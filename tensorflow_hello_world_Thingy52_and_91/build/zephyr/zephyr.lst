
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c000 <_vector_table>:
    c000:	20029430 	.word	0x20029430
    c004:	00013875 	.word	0x00013875
    c008:	00026d83 	.word	0x00026d83
    c00c:	000138a5 	.word	0x000138a5
    c010:	000138a5 	.word	0x000138a5
    c014:	000138a5 	.word	0x000138a5
    c018:	000138a5 	.word	0x000138a5
    c01c:	000138a5 	.word	0x000138a5
	...
    c02c:	0001364d 	.word	0x0001364d
    c030:	000138a5 	.word	0x000138a5
    c034:	00000000 	.word	0x00000000
    c038:	00013605 	.word	0x00013605
    c03c:	00026cbb 	.word	0x00026cbb

0000c040 <_irq_vector_table>:
    c040:	00013835 00013835 00013835 00013835     58..58..58..58..
    c050:	00013835 00013835 00013835 00013835     58..58..58..58..
    c060:	00013835 00013835 00013835 00013835     58..58..58..58..
    c070:	00013835 00013835 00013835 00013835     58..58..58..58..
    c080:	00013835 00013835 00013835 00013835     58..58..58..58..
    c090:	00013835 00013835 00013835 00013835     58..58..58..58..
    c0a0:	00013835 00013835 00013835 00013835     58..58..58..58..
    c0b0:	00013835 00013835 00013835 00013835     58..58..58..58..
    c0c0:	00013835 00013835 00013835 00013835     58..58..58..58..
    c0d0:	00013835 00013835 00013835 00013835     58..58..58..58..
    c0e0:	00013835 00013835 00013835 00013835     58..58..58..58..
    c0f0:	00013835 00013835 00013835 00013835     58..58..58..58..
    c100:	00013835 00013835 00013835 00013835     58..58..58..58..
    c110:	00013835 00013835 00013835 00013835     58..58..58..58..
    c120:	00013835 00013835 00013835 00013835     58..58..58..58..
    c130:	00013835 00013835 00013835 00013835     58..58..58..58..
    c140:	00013835                                58..

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
    c210:	0002b82c 00000001 0000c000 0000c000     ,...............
    c220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000c240 <__aeabi_drsub>:
    c240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c244:	e002      	b.n	c24c <__adddf3>
    c246:	bf00      	nop

0000c248 <__aeabi_dsub>:
    c248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c24c <__adddf3>:
    c24c:	b530      	push	{r4, r5, lr}
    c24e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c252:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c256:	ea94 0f05 	teq	r4, r5
    c25a:	bf08      	it	eq
    c25c:	ea90 0f02 	teqeq	r0, r2
    c260:	bf1f      	itttt	ne
    c262:	ea54 0c00 	orrsne.w	ip, r4, r0
    c266:	ea55 0c02 	orrsne.w	ip, r5, r2
    c26a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c26e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c272:	f000 80e2 	beq.w	c43a <__adddf3+0x1ee>
    c276:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c27a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c27e:	bfb8      	it	lt
    c280:	426d      	neglt	r5, r5
    c282:	dd0c      	ble.n	c29e <__adddf3+0x52>
    c284:	442c      	add	r4, r5
    c286:	ea80 0202 	eor.w	r2, r0, r2
    c28a:	ea81 0303 	eor.w	r3, r1, r3
    c28e:	ea82 0000 	eor.w	r0, r2, r0
    c292:	ea83 0101 	eor.w	r1, r3, r1
    c296:	ea80 0202 	eor.w	r2, r0, r2
    c29a:	ea81 0303 	eor.w	r3, r1, r3
    c29e:	2d36      	cmp	r5, #54	; 0x36
    c2a0:	bf88      	it	hi
    c2a2:	bd30      	pophi	{r4, r5, pc}
    c2a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c2a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c2ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c2b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c2b4:	d002      	beq.n	c2bc <__adddf3+0x70>
    c2b6:	4240      	negs	r0, r0
    c2b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c2bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c2c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c2c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c2c8:	d002      	beq.n	c2d0 <__adddf3+0x84>
    c2ca:	4252      	negs	r2, r2
    c2cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c2d0:	ea94 0f05 	teq	r4, r5
    c2d4:	f000 80a7 	beq.w	c426 <__adddf3+0x1da>
    c2d8:	f1a4 0401 	sub.w	r4, r4, #1
    c2dc:	f1d5 0e20 	rsbs	lr, r5, #32
    c2e0:	db0d      	blt.n	c2fe <__adddf3+0xb2>
    c2e2:	fa02 fc0e 	lsl.w	ip, r2, lr
    c2e6:	fa22 f205 	lsr.w	r2, r2, r5
    c2ea:	1880      	adds	r0, r0, r2
    c2ec:	f141 0100 	adc.w	r1, r1, #0
    c2f0:	fa03 f20e 	lsl.w	r2, r3, lr
    c2f4:	1880      	adds	r0, r0, r2
    c2f6:	fa43 f305 	asr.w	r3, r3, r5
    c2fa:	4159      	adcs	r1, r3
    c2fc:	e00e      	b.n	c31c <__adddf3+0xd0>
    c2fe:	f1a5 0520 	sub.w	r5, r5, #32
    c302:	f10e 0e20 	add.w	lr, lr, #32
    c306:	2a01      	cmp	r2, #1
    c308:	fa03 fc0e 	lsl.w	ip, r3, lr
    c30c:	bf28      	it	cs
    c30e:	f04c 0c02 	orrcs.w	ip, ip, #2
    c312:	fa43 f305 	asr.w	r3, r3, r5
    c316:	18c0      	adds	r0, r0, r3
    c318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c31c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c320:	d507      	bpl.n	c332 <__adddf3+0xe6>
    c322:	f04f 0e00 	mov.w	lr, #0
    c326:	f1dc 0c00 	rsbs	ip, ip, #0
    c32a:	eb7e 0000 	sbcs.w	r0, lr, r0
    c32e:	eb6e 0101 	sbc.w	r1, lr, r1
    c332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c336:	d31b      	bcc.n	c370 <__adddf3+0x124>
    c338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c33c:	d30c      	bcc.n	c358 <__adddf3+0x10c>
    c33e:	0849      	lsrs	r1, r1, #1
    c340:	ea5f 0030 	movs.w	r0, r0, rrx
    c344:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c348:	f104 0401 	add.w	r4, r4, #1
    c34c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c354:	f080 809a 	bcs.w	c48c <__adddf3+0x240>
    c358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c35c:	bf08      	it	eq
    c35e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c362:	f150 0000 	adcs.w	r0, r0, #0
    c366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c36a:	ea41 0105 	orr.w	r1, r1, r5
    c36e:	bd30      	pop	{r4, r5, pc}
    c370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c374:	4140      	adcs	r0, r0
    c376:	eb41 0101 	adc.w	r1, r1, r1
    c37a:	3c01      	subs	r4, #1
    c37c:	bf28      	it	cs
    c37e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    c382:	d2e9      	bcs.n	c358 <__adddf3+0x10c>
    c384:	f091 0f00 	teq	r1, #0
    c388:	bf04      	itt	eq
    c38a:	4601      	moveq	r1, r0
    c38c:	2000      	moveq	r0, #0
    c38e:	fab1 f381 	clz	r3, r1
    c392:	bf08      	it	eq
    c394:	3320      	addeq	r3, #32
    c396:	f1a3 030b 	sub.w	r3, r3, #11
    c39a:	f1b3 0220 	subs.w	r2, r3, #32
    c39e:	da0c      	bge.n	c3ba <__adddf3+0x16e>
    c3a0:	320c      	adds	r2, #12
    c3a2:	dd08      	ble.n	c3b6 <__adddf3+0x16a>
    c3a4:	f102 0c14 	add.w	ip, r2, #20
    c3a8:	f1c2 020c 	rsb	r2, r2, #12
    c3ac:	fa01 f00c 	lsl.w	r0, r1, ip
    c3b0:	fa21 f102 	lsr.w	r1, r1, r2
    c3b4:	e00c      	b.n	c3d0 <__adddf3+0x184>
    c3b6:	f102 0214 	add.w	r2, r2, #20
    c3ba:	bfd8      	it	le
    c3bc:	f1c2 0c20 	rsble	ip, r2, #32
    c3c0:	fa01 f102 	lsl.w	r1, r1, r2
    c3c4:	fa20 fc0c 	lsr.w	ip, r0, ip
    c3c8:	bfdc      	itt	le
    c3ca:	ea41 010c 	orrle.w	r1, r1, ip
    c3ce:	4090      	lslle	r0, r2
    c3d0:	1ae4      	subs	r4, r4, r3
    c3d2:	bfa2      	ittt	ge
    c3d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c3d8:	4329      	orrge	r1, r5
    c3da:	bd30      	popge	{r4, r5, pc}
    c3dc:	ea6f 0404 	mvn.w	r4, r4
    c3e0:	3c1f      	subs	r4, #31
    c3e2:	da1c      	bge.n	c41e <__adddf3+0x1d2>
    c3e4:	340c      	adds	r4, #12
    c3e6:	dc0e      	bgt.n	c406 <__adddf3+0x1ba>
    c3e8:	f104 0414 	add.w	r4, r4, #20
    c3ec:	f1c4 0220 	rsb	r2, r4, #32
    c3f0:	fa20 f004 	lsr.w	r0, r0, r4
    c3f4:	fa01 f302 	lsl.w	r3, r1, r2
    c3f8:	ea40 0003 	orr.w	r0, r0, r3
    c3fc:	fa21 f304 	lsr.w	r3, r1, r4
    c400:	ea45 0103 	orr.w	r1, r5, r3
    c404:	bd30      	pop	{r4, r5, pc}
    c406:	f1c4 040c 	rsb	r4, r4, #12
    c40a:	f1c4 0220 	rsb	r2, r4, #32
    c40e:	fa20 f002 	lsr.w	r0, r0, r2
    c412:	fa01 f304 	lsl.w	r3, r1, r4
    c416:	ea40 0003 	orr.w	r0, r0, r3
    c41a:	4629      	mov	r1, r5
    c41c:	bd30      	pop	{r4, r5, pc}
    c41e:	fa21 f004 	lsr.w	r0, r1, r4
    c422:	4629      	mov	r1, r5
    c424:	bd30      	pop	{r4, r5, pc}
    c426:	f094 0f00 	teq	r4, #0
    c42a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c42e:	bf06      	itte	eq
    c430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c434:	3401      	addeq	r4, #1
    c436:	3d01      	subne	r5, #1
    c438:	e74e      	b.n	c2d8 <__adddf3+0x8c>
    c43a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c43e:	bf18      	it	ne
    c440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c444:	d029      	beq.n	c49a <__adddf3+0x24e>
    c446:	ea94 0f05 	teq	r4, r5
    c44a:	bf08      	it	eq
    c44c:	ea90 0f02 	teqeq	r0, r2
    c450:	d005      	beq.n	c45e <__adddf3+0x212>
    c452:	ea54 0c00 	orrs.w	ip, r4, r0
    c456:	bf04      	itt	eq
    c458:	4619      	moveq	r1, r3
    c45a:	4610      	moveq	r0, r2
    c45c:	bd30      	pop	{r4, r5, pc}
    c45e:	ea91 0f03 	teq	r1, r3
    c462:	bf1e      	ittt	ne
    c464:	2100      	movne	r1, #0
    c466:	2000      	movne	r0, #0
    c468:	bd30      	popne	{r4, r5, pc}
    c46a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c46e:	d105      	bne.n	c47c <__adddf3+0x230>
    c470:	0040      	lsls	r0, r0, #1
    c472:	4149      	adcs	r1, r1
    c474:	bf28      	it	cs
    c476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c47a:	bd30      	pop	{r4, r5, pc}
    c47c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c480:	bf3c      	itt	cc
    c482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c486:	bd30      	popcc	{r4, r5, pc}
    c488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c48c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c494:	f04f 0000 	mov.w	r0, #0
    c498:	bd30      	pop	{r4, r5, pc}
    c49a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c49e:	bf1a      	itte	ne
    c4a0:	4619      	movne	r1, r3
    c4a2:	4610      	movne	r0, r2
    c4a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c4a8:	bf1c      	itt	ne
    c4aa:	460b      	movne	r3, r1
    c4ac:	4602      	movne	r2, r0
    c4ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c4b2:	bf06      	itte	eq
    c4b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c4b8:	ea91 0f03 	teqeq	r1, r3
    c4bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c4c0:	bd30      	pop	{r4, r5, pc}
    c4c2:	bf00      	nop

0000c4c4 <__aeabi_ui2d>:
    c4c4:	f090 0f00 	teq	r0, #0
    c4c8:	bf04      	itt	eq
    c4ca:	2100      	moveq	r1, #0
    c4cc:	4770      	bxeq	lr
    c4ce:	b530      	push	{r4, r5, lr}
    c4d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4d8:	f04f 0500 	mov.w	r5, #0
    c4dc:	f04f 0100 	mov.w	r1, #0
    c4e0:	e750      	b.n	c384 <__adddf3+0x138>
    c4e2:	bf00      	nop

0000c4e4 <__aeabi_i2d>:
    c4e4:	f090 0f00 	teq	r0, #0
    c4e8:	bf04      	itt	eq
    c4ea:	2100      	moveq	r1, #0
    c4ec:	4770      	bxeq	lr
    c4ee:	b530      	push	{r4, r5, lr}
    c4f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c4fc:	bf48      	it	mi
    c4fe:	4240      	negmi	r0, r0
    c500:	f04f 0100 	mov.w	r1, #0
    c504:	e73e      	b.n	c384 <__adddf3+0x138>
    c506:	bf00      	nop

0000c508 <__aeabi_f2d>:
    c508:	0042      	lsls	r2, r0, #1
    c50a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c50e:	ea4f 0131 	mov.w	r1, r1, rrx
    c512:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c516:	bf1f      	itttt	ne
    c518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c51c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c524:	4770      	bxne	lr
    c526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c52a:	bf08      	it	eq
    c52c:	4770      	bxeq	lr
    c52e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c532:	bf04      	itt	eq
    c534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c538:	4770      	bxeq	lr
    c53a:	b530      	push	{r4, r5, lr}
    c53c:	f44f 7460 	mov.w	r4, #896	; 0x380
    c540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c548:	e71c      	b.n	c384 <__adddf3+0x138>
    c54a:	bf00      	nop

0000c54c <__aeabi_ul2d>:
    c54c:	ea50 0201 	orrs.w	r2, r0, r1
    c550:	bf08      	it	eq
    c552:	4770      	bxeq	lr
    c554:	b530      	push	{r4, r5, lr}
    c556:	f04f 0500 	mov.w	r5, #0
    c55a:	e00a      	b.n	c572 <__aeabi_l2d+0x16>

0000c55c <__aeabi_l2d>:
    c55c:	ea50 0201 	orrs.w	r2, r0, r1
    c560:	bf08      	it	eq
    c562:	4770      	bxeq	lr
    c564:	b530      	push	{r4, r5, lr}
    c566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c56a:	d502      	bpl.n	c572 <__aeabi_l2d+0x16>
    c56c:	4240      	negs	r0, r0
    c56e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c572:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c576:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c57a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c57e:	f43f aed8 	beq.w	c332 <__adddf3+0xe6>
    c582:	f04f 0203 	mov.w	r2, #3
    c586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c58a:	bf18      	it	ne
    c58c:	3203      	addne	r2, #3
    c58e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c592:	bf18      	it	ne
    c594:	3203      	addne	r2, #3
    c596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c59a:	f1c2 0320 	rsb	r3, r2, #32
    c59e:	fa00 fc03 	lsl.w	ip, r0, r3
    c5a2:	fa20 f002 	lsr.w	r0, r0, r2
    c5a6:	fa01 fe03 	lsl.w	lr, r1, r3
    c5aa:	ea40 000e 	orr.w	r0, r0, lr
    c5ae:	fa21 f102 	lsr.w	r1, r1, r2
    c5b2:	4414      	add	r4, r2
    c5b4:	e6bd      	b.n	c332 <__adddf3+0xe6>
    c5b6:	bf00      	nop

0000c5b8 <__aeabi_uldivmod>:
    c5b8:	b953      	cbnz	r3, c5d0 <__aeabi_uldivmod+0x18>
    c5ba:	b94a      	cbnz	r2, c5d0 <__aeabi_uldivmod+0x18>
    c5bc:	2900      	cmp	r1, #0
    c5be:	bf08      	it	eq
    c5c0:	2800      	cmpeq	r0, #0
    c5c2:	bf1c      	itt	ne
    c5c4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    c5c8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    c5cc:	f000 b96e 	b.w	c8ac <__aeabi_idiv0>
    c5d0:	f1ad 0c08 	sub.w	ip, sp, #8
    c5d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c5d8:	f000 f806 	bl	c5e8 <__udivmoddi4>
    c5dc:	f8dd e004 	ldr.w	lr, [sp, #4]
    c5e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c5e4:	b004      	add	sp, #16
    c5e6:	4770      	bx	lr

0000c5e8 <__udivmoddi4>:
    c5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c5ec:	9d09      	ldr	r5, [sp, #36]	; 0x24
    c5ee:	460f      	mov	r7, r1
    c5f0:	4604      	mov	r4, r0
    c5f2:	4689      	mov	r9, r1
    c5f4:	2b00      	cmp	r3, #0
    c5f6:	d17c      	bne.n	c6f2 <__udivmoddi4+0x10a>
    c5f8:	428a      	cmp	r2, r1
    c5fa:	4616      	mov	r6, r2
    c5fc:	d940      	bls.n	c680 <__udivmoddi4+0x98>
    c5fe:	fab2 f282 	clz	r2, r2
    c602:	b14a      	cbz	r2, c618 <__udivmoddi4+0x30>
    c604:	f1c2 0120 	rsb	r1, r2, #32
    c608:	fa07 f302 	lsl.w	r3, r7, r2
    c60c:	4096      	lsls	r6, r2
    c60e:	4094      	lsls	r4, r2
    c610:	fa20 f101 	lsr.w	r1, r0, r1
    c614:	ea41 0903 	orr.w	r9, r1, r3
    c618:	ea4f 4e16 	mov.w	lr, r6, lsr #16
    c61c:	0c27      	lsrs	r7, r4, #16
    c61e:	fa1f f886 	uxth.w	r8, r6
    c622:	fbb9 fcfe 	udiv	ip, r9, lr
    c626:	fb0e 931c 	mls	r3, lr, ip, r9
    c62a:	fb0c f108 	mul.w	r1, ip, r8
    c62e:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
    c632:	4299      	cmp	r1, r3
    c634:	d906      	bls.n	c644 <__udivmoddi4+0x5c>
    c636:	18f3      	adds	r3, r6, r3
    c638:	d202      	bcs.n	c640 <__udivmoddi4+0x58>
    c63a:	4299      	cmp	r1, r3
    c63c:	f200 8123 	bhi.w	c886 <__udivmoddi4+0x29e>
    c640:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    c644:	1a59      	subs	r1, r3, r1
    c646:	b2a3      	uxth	r3, r4
    c648:	fbb1 f0fe 	udiv	r0, r1, lr
    c64c:	fb0e 1110 	mls	r1, lr, r0, r1
    c650:	fb00 f808 	mul.w	r8, r0, r8
    c654:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c658:	45a0      	cmp	r8, r4
    c65a:	d905      	bls.n	c668 <__udivmoddi4+0x80>
    c65c:	1934      	adds	r4, r6, r4
    c65e:	d202      	bcs.n	c666 <__udivmoddi4+0x7e>
    c660:	45a0      	cmp	r8, r4
    c662:	f200 810d 	bhi.w	c880 <__udivmoddi4+0x298>
    c666:	3801      	subs	r0, #1
    c668:	eba4 0408 	sub.w	r4, r4, r8
    c66c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c670:	2100      	movs	r1, #0
    c672:	b11d      	cbz	r5, c67c <__udivmoddi4+0x94>
    c674:	40d4      	lsrs	r4, r2
    c676:	2300      	movs	r3, #0
    c678:	e9c5 4300 	strd	r4, r3, [r5]
    c67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c680:	b902      	cbnz	r2, c684 <__udivmoddi4+0x9c>
    c682:	deff      	udf	#255	; 0xff
    c684:	fab2 f282 	clz	r2, r2
    c688:	2a00      	cmp	r2, #0
    c68a:	d14d      	bne.n	c728 <__udivmoddi4+0x140>
    c68c:	1b8f      	subs	r7, r1, r6
    c68e:	ea4f 4e16 	mov.w	lr, r6, lsr #16
    c692:	fa1f f886 	uxth.w	r8, r6
    c696:	2101      	movs	r1, #1
    c698:	0c23      	lsrs	r3, r4, #16
    c69a:	fbb7 fcfe 	udiv	ip, r7, lr
    c69e:	fb0e 771c 	mls	r7, lr, ip, r7
    c6a2:	fb08 f00c 	mul.w	r0, r8, ip
    c6a6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
    c6aa:	4298      	cmp	r0, r3
    c6ac:	d90a      	bls.n	c6c4 <__udivmoddi4+0xdc>
    c6ae:	18f3      	adds	r3, r6, r3
    c6b0:	bf2c      	ite	cs
    c6b2:	2701      	movcs	r7, #1
    c6b4:	2700      	movcc	r7, #0
    c6b6:	4298      	cmp	r0, r3
    c6b8:	d902      	bls.n	c6c0 <__udivmoddi4+0xd8>
    c6ba:	2f00      	cmp	r7, #0
    c6bc:	f000 80d9 	beq.w	c872 <__udivmoddi4+0x28a>
    c6c0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    c6c4:	1a1f      	subs	r7, r3, r0
    c6c6:	b2a3      	uxth	r3, r4
    c6c8:	fbb7 f0fe 	udiv	r0, r7, lr
    c6cc:	fb0e 7710 	mls	r7, lr, r0, r7
    c6d0:	fb08 f800 	mul.w	r8, r8, r0
    c6d4:	ea43 4407 	orr.w	r4, r3, r7, lsl #16
    c6d8:	45a0      	cmp	r8, r4
    c6da:	d905      	bls.n	c6e8 <__udivmoddi4+0x100>
    c6dc:	1934      	adds	r4, r6, r4
    c6de:	d202      	bcs.n	c6e6 <__udivmoddi4+0xfe>
    c6e0:	45a0      	cmp	r8, r4
    c6e2:	f200 80ca 	bhi.w	c87a <__udivmoddi4+0x292>
    c6e6:	3801      	subs	r0, #1
    c6e8:	eba4 0408 	sub.w	r4, r4, r8
    c6ec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c6f0:	e7bf      	b.n	c672 <__udivmoddi4+0x8a>
    c6f2:	428b      	cmp	r3, r1
    c6f4:	d908      	bls.n	c708 <__udivmoddi4+0x120>
    c6f6:	2d00      	cmp	r5, #0
    c6f8:	f000 80b2 	beq.w	c860 <__udivmoddi4+0x278>
    c6fc:	2100      	movs	r1, #0
    c6fe:	e9c5 0700 	strd	r0, r7, [r5]
    c702:	4608      	mov	r0, r1
    c704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c708:	fab3 f183 	clz	r1, r3
    c70c:	2900      	cmp	r1, #0
    c70e:	d149      	bne.n	c7a4 <__udivmoddi4+0x1bc>
    c710:	42bb      	cmp	r3, r7
    c712:	f0c0 80a8 	bcc.w	c866 <__udivmoddi4+0x27e>
    c716:	4282      	cmp	r2, r0
    c718:	f240 80a5 	bls.w	c866 <__udivmoddi4+0x27e>
    c71c:	4608      	mov	r0, r1
    c71e:	2d00      	cmp	r5, #0
    c720:	d0ac      	beq.n	c67c <__udivmoddi4+0x94>
    c722:	e9c5 4900 	strd	r4, r9, [r5]
    c726:	e7a9      	b.n	c67c <__udivmoddi4+0x94>
    c728:	f1c2 0020 	rsb	r0, r2, #32
    c72c:	4096      	lsls	r6, r2
    c72e:	4091      	lsls	r1, r2
    c730:	fa27 f300 	lsr.w	r3, r7, r0
    c734:	ea4f 4e16 	mov.w	lr, r6, lsr #16
    c738:	fa24 f700 	lsr.w	r7, r4, r0
    c73c:	fa1f f886 	uxth.w	r8, r6
    c740:	4094      	lsls	r4, r2
    c742:	430f      	orrs	r7, r1
    c744:	fbb3 f0fe 	udiv	r0, r3, lr
    c748:	ea4f 4c17 	mov.w	ip, r7, lsr #16
    c74c:	fb0e 3310 	mls	r3, lr, r0, r3
    c750:	fb00 f108 	mul.w	r1, r0, r8
    c754:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
    c758:	4299      	cmp	r1, r3
    c75a:	d90c      	bls.n	c776 <__udivmoddi4+0x18e>
    c75c:	18f3      	adds	r3, r6, r3
    c75e:	bf2c      	ite	cs
    c760:	f04f 0c01 	movcs.w	ip, #1
    c764:	f04f 0c00 	movcc.w	ip, #0
    c768:	4299      	cmp	r1, r3
    c76a:	d903      	bls.n	c774 <__udivmoddi4+0x18c>
    c76c:	f1bc 0f00 	cmp.w	ip, #0
    c770:	f000 8092 	beq.w	c898 <__udivmoddi4+0x2b0>
    c774:	3801      	subs	r0, #1
    c776:	1a5b      	subs	r3, r3, r1
    c778:	b2bf      	uxth	r7, r7
    c77a:	fbb3 f1fe 	udiv	r1, r3, lr
    c77e:	fb0e 3311 	mls	r3, lr, r1, r3
    c782:	fb01 fc08 	mul.w	ip, r1, r8
    c786:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
    c78a:	45bc      	cmp	ip, r7
    c78c:	d905      	bls.n	c79a <__udivmoddi4+0x1b2>
    c78e:	19f7      	adds	r7, r6, r7
    c790:	d202      	bcs.n	c798 <__udivmoddi4+0x1b0>
    c792:	45bc      	cmp	ip, r7
    c794:	f200 8087 	bhi.w	c8a6 <__udivmoddi4+0x2be>
    c798:	3901      	subs	r1, #1
    c79a:	eba7 070c 	sub.w	r7, r7, ip
    c79e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c7a2:	e779      	b.n	c698 <__udivmoddi4+0xb0>
    c7a4:	f1c1 0620 	rsb	r6, r1, #32
    c7a8:	fa03 f401 	lsl.w	r4, r3, r1
    c7ac:	fa02 fc01 	lsl.w	ip, r2, r1
    c7b0:	fa07 f801 	lsl.w	r8, r7, r1
    c7b4:	40f2      	lsrs	r2, r6
    c7b6:	fa27 f306 	lsr.w	r3, r7, r6
    c7ba:	fa20 f706 	lsr.w	r7, r0, r6
    c7be:	fa00 fe01 	lsl.w	lr, r0, r1
    c7c2:	4322      	orrs	r2, r4
    c7c4:	ea47 0408 	orr.w	r4, r7, r8
    c7c8:	ea4f 4812 	mov.w	r8, r2, lsr #16
    c7cc:	0c20      	lsrs	r0, r4, #16
    c7ce:	fa1f f982 	uxth.w	r9, r2
    c7d2:	fbb3 faf8 	udiv	sl, r3, r8
    c7d6:	fb08 371a 	mls	r7, r8, sl, r3
    c7da:	fb0a fb09 	mul.w	fp, sl, r9
    c7de:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
    c7e2:	45bb      	cmp	fp, r7
    c7e4:	d909      	bls.n	c7fa <__udivmoddi4+0x212>
    c7e6:	19d7      	adds	r7, r2, r7
    c7e8:	bf2c      	ite	cs
    c7ea:	2301      	movcs	r3, #1
    c7ec:	2300      	movcc	r3, #0
    c7ee:	45bb      	cmp	fp, r7
    c7f0:	d901      	bls.n	c7f6 <__udivmoddi4+0x20e>
    c7f2:	2b00      	cmp	r3, #0
    c7f4:	d053      	beq.n	c89e <__udivmoddi4+0x2b6>
    c7f6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    c7fa:	eba7 070b 	sub.w	r7, r7, fp
    c7fe:	b2a4      	uxth	r4, r4
    c800:	fbb7 f0f8 	udiv	r0, r7, r8
    c804:	fb08 7710 	mls	r7, r8, r0, r7
    c808:	fb00 f909 	mul.w	r9, r0, r9
    c80c:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
    c810:	45b9      	cmp	r9, r7
    c812:	d904      	bls.n	c81e <__udivmoddi4+0x236>
    c814:	19d7      	adds	r7, r2, r7
    c816:	d201      	bcs.n	c81c <__udivmoddi4+0x234>
    c818:	45b9      	cmp	r9, r7
    c81a:	d83a      	bhi.n	c892 <__udivmoddi4+0x2aa>
    c81c:	3801      	subs	r0, #1
    c81e:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    c822:	eba7 0709 	sub.w	r7, r7, r9
    c826:	fba0 890c 	umull	r8, r9, r0, ip
    c82a:	454f      	cmp	r7, r9
    c82c:	46c3      	mov	fp, r8
    c82e:	464c      	mov	r4, r9
    c830:	d302      	bcc.n	c838 <__udivmoddi4+0x250>
    c832:	d107      	bne.n	c844 <__udivmoddi4+0x25c>
    c834:	45c6      	cmp	lr, r8
    c836:	d205      	bcs.n	c844 <__udivmoddi4+0x25c>
    c838:	ebb8 0b0c 	subs.w	fp, r8, ip
    c83c:	eb69 0202 	sbc.w	r2, r9, r2
    c840:	3801      	subs	r0, #1
    c842:	4614      	mov	r4, r2
    c844:	b31d      	cbz	r5, c88e <__udivmoddi4+0x2a6>
    c846:	ebbe 030b 	subs.w	r3, lr, fp
    c84a:	eb67 0704 	sbc.w	r7, r7, r4
    c84e:	fa07 f606 	lsl.w	r6, r7, r6
    c852:	40cb      	lsrs	r3, r1
    c854:	40cf      	lsrs	r7, r1
    c856:	2100      	movs	r1, #0
    c858:	431e      	orrs	r6, r3
    c85a:	e9c5 6700 	strd	r6, r7, [r5]
    c85e:	e70d      	b.n	c67c <__udivmoddi4+0x94>
    c860:	4629      	mov	r1, r5
    c862:	4628      	mov	r0, r5
    c864:	e70a      	b.n	c67c <__udivmoddi4+0x94>
    c866:	1a84      	subs	r4, r0, r2
    c868:	eb67 0303 	sbc.w	r3, r7, r3
    c86c:	2001      	movs	r0, #1
    c86e:	4699      	mov	r9, r3
    c870:	e755      	b.n	c71e <__udivmoddi4+0x136>
    c872:	f1ac 0c02 	sub.w	ip, ip, #2
    c876:	4433      	add	r3, r6
    c878:	e724      	b.n	c6c4 <__udivmoddi4+0xdc>
    c87a:	3802      	subs	r0, #2
    c87c:	4434      	add	r4, r6
    c87e:	e733      	b.n	c6e8 <__udivmoddi4+0x100>
    c880:	3802      	subs	r0, #2
    c882:	4434      	add	r4, r6
    c884:	e6f0      	b.n	c668 <__udivmoddi4+0x80>
    c886:	f1ac 0c02 	sub.w	ip, ip, #2
    c88a:	4433      	add	r3, r6
    c88c:	e6da      	b.n	c644 <__udivmoddi4+0x5c>
    c88e:	4629      	mov	r1, r5
    c890:	e6f4      	b.n	c67c <__udivmoddi4+0x94>
    c892:	3802      	subs	r0, #2
    c894:	4417      	add	r7, r2
    c896:	e7c2      	b.n	c81e <__udivmoddi4+0x236>
    c898:	3802      	subs	r0, #2
    c89a:	4433      	add	r3, r6
    c89c:	e76b      	b.n	c776 <__udivmoddi4+0x18e>
    c89e:	f1aa 0a02 	sub.w	sl, sl, #2
    c8a2:	4417      	add	r7, r2
    c8a4:	e7a9      	b.n	c7fa <__udivmoddi4+0x212>
    c8a6:	3902      	subs	r1, #2
    c8a8:	4437      	add	r7, r6
    c8aa:	e776      	b.n	c79a <__udivmoddi4+0x1b2>

0000c8ac <__aeabi_idiv0>:
    c8ac:	4770      	bx	lr
    c8ae:	bf00      	nop

0000c8b0 <TfLiteIntArrayGetSizeInBytes>:
    c8b0:	b480      	push	{r7}
    c8b2:	b083      	sub	sp, #12
    c8b4:	af00      	add	r7, sp, #0
    c8b6:	6078      	str	r0, [r7, #4]
    c8b8:	687b      	ldr	r3, [r7, #4]
    c8ba:	3301      	adds	r3, #1
    c8bc:	009b      	lsls	r3, r3, #2
    c8be:	4618      	mov	r0, r3
    c8c0:	370c      	adds	r7, #12
    c8c2:	46bd      	mov	sp, r7
    c8c4:	bc80      	pop	{r7}
    c8c6:	4770      	bx	lr

0000c8c8 <TfLiteIntArrayEqual>:
    c8c8:	b580      	push	{r7, lr}
    c8ca:	b082      	sub	sp, #8
    c8cc:	af00      	add	r7, sp, #0
    c8ce:	6078      	str	r0, [r7, #4]
    c8d0:	6039      	str	r1, [r7, #0]
    c8d2:	687a      	ldr	r2, [r7, #4]
    c8d4:	683b      	ldr	r3, [r7, #0]
    c8d6:	429a      	cmp	r2, r3
    c8d8:	d101      	bne.n	c8de <TfLiteIntArrayEqual+0x16>
    c8da:	2301      	movs	r3, #1
    c8dc:	e010      	b.n	c900 <TfLiteIntArrayEqual+0x38>
    c8de:	687b      	ldr	r3, [r7, #4]
    c8e0:	2b00      	cmp	r3, #0
    c8e2:	d002      	beq.n	c8ea <TfLiteIntArrayEqual+0x22>
    c8e4:	683b      	ldr	r3, [r7, #0]
    c8e6:	2b00      	cmp	r3, #0
    c8e8:	d101      	bne.n	c8ee <TfLiteIntArrayEqual+0x26>
    c8ea:	2300      	movs	r3, #0
    c8ec:	e008      	b.n	c900 <TfLiteIntArrayEqual+0x38>
    c8ee:	683b      	ldr	r3, [r7, #0]
    c8f0:	6819      	ldr	r1, [r3, #0]
    c8f2:	683b      	ldr	r3, [r7, #0]
    c8f4:	3304      	adds	r3, #4
    c8f6:	461a      	mov	r2, r3
    c8f8:	6878      	ldr	r0, [r7, #4]
    c8fa:	f000 f805 	bl	c908 <TfLiteIntArrayEqualsArray>
    c8fe:	4603      	mov	r3, r0
    c900:	4618      	mov	r0, r3
    c902:	3708      	adds	r7, #8
    c904:	46bd      	mov	sp, r7
    c906:	bd80      	pop	{r7, pc}

0000c908 <TfLiteIntArrayEqualsArray>:
    c908:	b480      	push	{r7}
    c90a:	b087      	sub	sp, #28
    c90c:	af00      	add	r7, sp, #0
    c90e:	60f8      	str	r0, [r7, #12]
    c910:	60b9      	str	r1, [r7, #8]
    c912:	607a      	str	r2, [r7, #4]
    c914:	68fb      	ldr	r3, [r7, #12]
    c916:	2b00      	cmp	r3, #0
    c918:	d106      	bne.n	c928 <TfLiteIntArrayEqualsArray+0x20>
    c91a:	68bb      	ldr	r3, [r7, #8]
    c91c:	2b00      	cmp	r3, #0
    c91e:	bf0c      	ite	eq
    c920:	2301      	moveq	r3, #1
    c922:	2300      	movne	r3, #0
    c924:	b2db      	uxtb	r3, r3
    c926:	e020      	b.n	c96a <TfLiteIntArrayEqualsArray+0x62>
    c928:	68fb      	ldr	r3, [r7, #12]
    c92a:	681b      	ldr	r3, [r3, #0]
    c92c:	68ba      	ldr	r2, [r7, #8]
    c92e:	429a      	cmp	r2, r3
    c930:	d001      	beq.n	c936 <TfLiteIntArrayEqualsArray+0x2e>
    c932:	2300      	movs	r3, #0
    c934:	e019      	b.n	c96a <TfLiteIntArrayEqualsArray+0x62>
    c936:	2300      	movs	r3, #0
    c938:	617b      	str	r3, [r7, #20]
    c93a:	e010      	b.n	c95e <TfLiteIntArrayEqualsArray+0x56>
    c93c:	68fa      	ldr	r2, [r7, #12]
    c93e:	697b      	ldr	r3, [r7, #20]
    c940:	009b      	lsls	r3, r3, #2
    c942:	4413      	add	r3, r2
    c944:	685a      	ldr	r2, [r3, #4]
    c946:	697b      	ldr	r3, [r7, #20]
    c948:	009b      	lsls	r3, r3, #2
    c94a:	6879      	ldr	r1, [r7, #4]
    c94c:	440b      	add	r3, r1
    c94e:	681b      	ldr	r3, [r3, #0]
    c950:	429a      	cmp	r2, r3
    c952:	d001      	beq.n	c958 <TfLiteIntArrayEqualsArray+0x50>
    c954:	2300      	movs	r3, #0
    c956:	e008      	b.n	c96a <TfLiteIntArrayEqualsArray+0x62>
    c958:	697b      	ldr	r3, [r7, #20]
    c95a:	3301      	adds	r3, #1
    c95c:	617b      	str	r3, [r7, #20]
    c95e:	68fb      	ldr	r3, [r7, #12]
    c960:	681b      	ldr	r3, [r3, #0]
    c962:	697a      	ldr	r2, [r7, #20]
    c964:	429a      	cmp	r2, r3
    c966:	dbe9      	blt.n	c93c <TfLiteIntArrayEqualsArray+0x34>
    c968:	2301      	movs	r3, #1
    c96a:	4618      	mov	r0, r3
    c96c:	371c      	adds	r7, #28
    c96e:	46bd      	mov	sp, r7
    c970:	bc80      	pop	{r7}
    c972:	4770      	bx	lr

0000c974 <TfLiteIntArrayCreate>:
    c974:	b580      	push	{r7, lr}
    c976:	b084      	sub	sp, #16
    c978:	af00      	add	r7, sp, #0
    c97a:	6078      	str	r0, [r7, #4]
    c97c:	6878      	ldr	r0, [r7, #4]
    c97e:	f7ff ff97 	bl	c8b0 <TfLiteIntArrayGetSizeInBytes>
    c982:	4603      	mov	r3, r0
    c984:	4618      	mov	r0, r3
    c986:	f018 fdf7 	bl	25578 <malloc>
    c98a:	4603      	mov	r3, r0
    c98c:	60fb      	str	r3, [r7, #12]
    c98e:	68fb      	ldr	r3, [r7, #12]
    c990:	687a      	ldr	r2, [r7, #4]
    c992:	601a      	str	r2, [r3, #0]
    c994:	68fb      	ldr	r3, [r7, #12]
    c996:	4618      	mov	r0, r3
    c998:	3710      	adds	r7, #16
    c99a:	46bd      	mov	sp, r7
    c99c:	bd80      	pop	{r7, pc}

0000c99e <TfLiteIntArrayCopy>:
    c99e:	b580      	push	{r7, lr}
    c9a0:	b084      	sub	sp, #16
    c9a2:	af00      	add	r7, sp, #0
    c9a4:	6078      	str	r0, [r7, #4]
    c9a6:	687b      	ldr	r3, [r7, #4]
    c9a8:	2b00      	cmp	r3, #0
    c9aa:	d101      	bne.n	c9b0 <TfLiteIntArrayCopy+0x12>
    c9ac:	2300      	movs	r3, #0
    c9ae:	e013      	b.n	c9d8 <TfLiteIntArrayCopy+0x3a>
    c9b0:	687b      	ldr	r3, [r7, #4]
    c9b2:	681b      	ldr	r3, [r3, #0]
    c9b4:	4618      	mov	r0, r3
    c9b6:	f7ff ffdd 	bl	c974 <TfLiteIntArrayCreate>
    c9ba:	60f8      	str	r0, [r7, #12]
    c9bc:	68fb      	ldr	r3, [r7, #12]
    c9be:	2b00      	cmp	r3, #0
    c9c0:	d009      	beq.n	c9d6 <TfLiteIntArrayCopy+0x38>
    c9c2:	68fb      	ldr	r3, [r7, #12]
    c9c4:	1d18      	adds	r0, r3, #4
    c9c6:	687b      	ldr	r3, [r7, #4]
    c9c8:	1d19      	adds	r1, r3, #4
    c9ca:	687b      	ldr	r3, [r7, #4]
    c9cc:	681b      	ldr	r3, [r3, #0]
    c9ce:	009b      	lsls	r3, r3, #2
    c9d0:	461a      	mov	r2, r3
    c9d2:	f024 fa15 	bl	30e00 <memcpy>
    c9d6:	68fb      	ldr	r3, [r7, #12]
    c9d8:	4618      	mov	r0, r3
    c9da:	3710      	adds	r7, #16
    c9dc:	46bd      	mov	sp, r7
    c9de:	bd80      	pop	{r7, pc}

0000c9e0 <TfLiteIntArrayFree>:
    c9e0:	b580      	push	{r7, lr}
    c9e2:	b082      	sub	sp, #8
    c9e4:	af00      	add	r7, sp, #0
    c9e6:	6078      	str	r0, [r7, #4]
    c9e8:	6878      	ldr	r0, [r7, #4]
    c9ea:	f018 fdcd 	bl	25588 <free>
    c9ee:	bf00      	nop
    c9f0:	3708      	adds	r7, #8
    c9f2:	46bd      	mov	sp, r7
    c9f4:	bd80      	pop	{r7, pc}

0000c9f6 <TfLiteFloatArrayGetSizeInBytes>:
    c9f6:	b480      	push	{r7}
    c9f8:	b083      	sub	sp, #12
    c9fa:	af00      	add	r7, sp, #0
    c9fc:	6078      	str	r0, [r7, #4]
    c9fe:	687b      	ldr	r3, [r7, #4]
    ca00:	3301      	adds	r3, #1
    ca02:	009b      	lsls	r3, r3, #2
    ca04:	4618      	mov	r0, r3
    ca06:	370c      	adds	r7, #12
    ca08:	46bd      	mov	sp, r7
    ca0a:	bc80      	pop	{r7}
    ca0c:	4770      	bx	lr

0000ca0e <TfLiteFloatArrayCreate>:
    ca0e:	b580      	push	{r7, lr}
    ca10:	b084      	sub	sp, #16
    ca12:	af00      	add	r7, sp, #0
    ca14:	6078      	str	r0, [r7, #4]
    ca16:	6878      	ldr	r0, [r7, #4]
    ca18:	f7ff ffed 	bl	c9f6 <TfLiteFloatArrayGetSizeInBytes>
    ca1c:	4603      	mov	r3, r0
    ca1e:	4618      	mov	r0, r3
    ca20:	f018 fdaa 	bl	25578 <malloc>
    ca24:	4603      	mov	r3, r0
    ca26:	60fb      	str	r3, [r7, #12]
    ca28:	68fb      	ldr	r3, [r7, #12]
    ca2a:	687a      	ldr	r2, [r7, #4]
    ca2c:	601a      	str	r2, [r3, #0]
    ca2e:	68fb      	ldr	r3, [r7, #12]
    ca30:	4618      	mov	r0, r3
    ca32:	3710      	adds	r7, #16
    ca34:	46bd      	mov	sp, r7
    ca36:	bd80      	pop	{r7, pc}

0000ca38 <TfLiteFloatArrayFree>:
    ca38:	b580      	push	{r7, lr}
    ca3a:	b082      	sub	sp, #8
    ca3c:	af00      	add	r7, sp, #0
    ca3e:	6078      	str	r0, [r7, #4]
    ca40:	6878      	ldr	r0, [r7, #4]
    ca42:	f018 fda1 	bl	25588 <free>
    ca46:	bf00      	nop
    ca48:	3708      	adds	r7, #8
    ca4a:	46bd      	mov	sp, r7
    ca4c:	bd80      	pop	{r7, pc}

0000ca4e <TfLiteTensorDataFree>:
    ca4e:	b580      	push	{r7, lr}
    ca50:	b082      	sub	sp, #8
    ca52:	af00      	add	r7, sp, #0
    ca54:	6078      	str	r0, [r7, #4]
    ca56:	687b      	ldr	r3, [r7, #4]
    ca58:	7d1b      	ldrb	r3, [r3, #20]
    ca5a:	2b04      	cmp	r3, #4
    ca5c:	d003      	beq.n	ca66 <TfLiteTensorDataFree+0x18>
    ca5e:	687b      	ldr	r3, [r7, #4]
    ca60:	7d1b      	ldrb	r3, [r3, #20]
    ca62:	2b05      	cmp	r3, #5
    ca64:	d104      	bne.n	ca70 <TfLiteTensorDataFree+0x22>
    ca66:	687b      	ldr	r3, [r7, #4]
    ca68:	685b      	ldr	r3, [r3, #4]
    ca6a:	4618      	mov	r0, r3
    ca6c:	f018 fd8c 	bl	25588 <free>
    ca70:	687b      	ldr	r3, [r7, #4]
    ca72:	2200      	movs	r2, #0
    ca74:	605a      	str	r2, [r3, #4]
    ca76:	bf00      	nop
    ca78:	3708      	adds	r7, #8
    ca7a:	46bd      	mov	sp, r7
    ca7c:	bd80      	pop	{r7, pc}

0000ca7e <TfLiteQuantizationFree>:
    ca7e:	b580      	push	{r7, lr}
    ca80:	b084      	sub	sp, #16
    ca82:	af00      	add	r7, sp, #0
    ca84:	6078      	str	r0, [r7, #4]
    ca86:	687b      	ldr	r3, [r7, #4]
    ca88:	781b      	ldrb	r3, [r3, #0]
    ca8a:	2b01      	cmp	r3, #1
    ca8c:	d11d      	bne.n	caca <TfLiteQuantizationFree+0x4c>
    ca8e:	687b      	ldr	r3, [r7, #4]
    ca90:	685b      	ldr	r3, [r3, #4]
    ca92:	60fb      	str	r3, [r7, #12]
    ca94:	68fb      	ldr	r3, [r7, #12]
    ca96:	681b      	ldr	r3, [r3, #0]
    ca98:	2b00      	cmp	r3, #0
    ca9a:	d007      	beq.n	caac <TfLiteQuantizationFree+0x2e>
    ca9c:	68fb      	ldr	r3, [r7, #12]
    ca9e:	681b      	ldr	r3, [r3, #0]
    caa0:	4618      	mov	r0, r3
    caa2:	f7ff ffc9 	bl	ca38 <TfLiteFloatArrayFree>
    caa6:	68fb      	ldr	r3, [r7, #12]
    caa8:	2200      	movs	r2, #0
    caaa:	601a      	str	r2, [r3, #0]
    caac:	68fb      	ldr	r3, [r7, #12]
    caae:	685b      	ldr	r3, [r3, #4]
    cab0:	2b00      	cmp	r3, #0
    cab2:	d007      	beq.n	cac4 <TfLiteQuantizationFree+0x46>
    cab4:	68fb      	ldr	r3, [r7, #12]
    cab6:	685b      	ldr	r3, [r3, #4]
    cab8:	4618      	mov	r0, r3
    caba:	f7ff ff91 	bl	c9e0 <TfLiteIntArrayFree>
    cabe:	68fb      	ldr	r3, [r7, #12]
    cac0:	2200      	movs	r2, #0
    cac2:	605a      	str	r2, [r3, #4]
    cac4:	68f8      	ldr	r0, [r7, #12]
    cac6:	f018 fd5f 	bl	25588 <free>
    caca:	687b      	ldr	r3, [r7, #4]
    cacc:	2200      	movs	r2, #0
    cace:	605a      	str	r2, [r3, #4]
    cad0:	687b      	ldr	r3, [r7, #4]
    cad2:	2200      	movs	r2, #0
    cad4:	701a      	strb	r2, [r3, #0]
    cad6:	bf00      	nop
    cad8:	3710      	adds	r7, #16
    cada:	46bd      	mov	sp, r7
    cadc:	bd80      	pop	{r7, pc}

0000cade <TfLiteSparsityFree>:
    cade:	b590      	push	{r4, r7, lr}
    cae0:	b089      	sub	sp, #36	; 0x24
    cae2:	af00      	add	r7, sp, #0
    cae4:	6078      	str	r0, [r7, #4]
    cae6:	687b      	ldr	r3, [r7, #4]
    cae8:	2b00      	cmp	r3, #0
    caea:	d04b      	beq.n	cb84 <TfLiteSparsityFree+0xa6>
    caec:	687b      	ldr	r3, [r7, #4]
    caee:	681b      	ldr	r3, [r3, #0]
    caf0:	2b00      	cmp	r3, #0
    caf2:	d007      	beq.n	cb04 <TfLiteSparsityFree+0x26>
    caf4:	687b      	ldr	r3, [r7, #4]
    caf6:	681b      	ldr	r3, [r3, #0]
    caf8:	4618      	mov	r0, r3
    cafa:	f7ff ff71 	bl	c9e0 <TfLiteIntArrayFree>
    cafe:	687b      	ldr	r3, [r7, #4]
    cb00:	2200      	movs	r2, #0
    cb02:	601a      	str	r2, [r3, #0]
    cb04:	687b      	ldr	r3, [r7, #4]
    cb06:	685b      	ldr	r3, [r3, #4]
    cb08:	2b00      	cmp	r3, #0
    cb0a:	d007      	beq.n	cb1c <TfLiteSparsityFree+0x3e>
    cb0c:	687b      	ldr	r3, [r7, #4]
    cb0e:	685b      	ldr	r3, [r3, #4]
    cb10:	4618      	mov	r0, r3
    cb12:	f7ff ff65 	bl	c9e0 <TfLiteIntArrayFree>
    cb16:	687b      	ldr	r3, [r7, #4]
    cb18:	2200      	movs	r2, #0
    cb1a:	605a      	str	r2, [r3, #4]
    cb1c:	687b      	ldr	r3, [r7, #4]
    cb1e:	689b      	ldr	r3, [r3, #8]
    cb20:	2b00      	cmp	r3, #0
    cb22:	d02b      	beq.n	cb7c <TfLiteSparsityFree+0x9e>
    cb24:	2300      	movs	r3, #0
    cb26:	61fb      	str	r3, [r7, #28]
    cb28:	e01b      	b.n	cb62 <TfLiteSparsityFree+0x84>
    cb2a:	687b      	ldr	r3, [r7, #4]
    cb2c:	689a      	ldr	r2, [r3, #8]
    cb2e:	69fb      	ldr	r3, [r7, #28]
    cb30:	011b      	lsls	r3, r3, #4
    cb32:	4413      	add	r3, r2
    cb34:	f107 040c 	add.w	r4, r7, #12
    cb38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    cb3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    cb3e:	7b3b      	ldrb	r3, [r7, #12]
    cb40:	2b01      	cmp	r3, #1
    cb42:	d10b      	bne.n	cb5c <TfLiteSparsityFree+0x7e>
    cb44:	697b      	ldr	r3, [r7, #20]
    cb46:	4618      	mov	r0, r3
    cb48:	f7ff ff4a 	bl	c9e0 <TfLiteIntArrayFree>
    cb4c:	2300      	movs	r3, #0
    cb4e:	617b      	str	r3, [r7, #20]
    cb50:	69bb      	ldr	r3, [r7, #24]
    cb52:	4618      	mov	r0, r3
    cb54:	f7ff ff44 	bl	c9e0 <TfLiteIntArrayFree>
    cb58:	2300      	movs	r3, #0
    cb5a:	61bb      	str	r3, [r7, #24]
    cb5c:	69fb      	ldr	r3, [r7, #28]
    cb5e:	3301      	adds	r3, #1
    cb60:	61fb      	str	r3, [r7, #28]
    cb62:	687b      	ldr	r3, [r7, #4]
    cb64:	68db      	ldr	r3, [r3, #12]
    cb66:	69fa      	ldr	r2, [r7, #28]
    cb68:	429a      	cmp	r2, r3
    cb6a:	dbde      	blt.n	cb2a <TfLiteSparsityFree+0x4c>
    cb6c:	687b      	ldr	r3, [r7, #4]
    cb6e:	689b      	ldr	r3, [r3, #8]
    cb70:	4618      	mov	r0, r3
    cb72:	f018 fd09 	bl	25588 <free>
    cb76:	687b      	ldr	r3, [r7, #4]
    cb78:	2200      	movs	r2, #0
    cb7a:	609a      	str	r2, [r3, #8]
    cb7c:	6878      	ldr	r0, [r7, #4]
    cb7e:	f018 fd03 	bl	25588 <free>
    cb82:	e000      	b.n	cb86 <TfLiteSparsityFree+0xa8>
    cb84:	bf00      	nop
    cb86:	3724      	adds	r7, #36	; 0x24
    cb88:	46bd      	mov	sp, r7
    cb8a:	bd90      	pop	{r4, r7, pc}

0000cb8c <TfLiteTensorFree>:
    cb8c:	b580      	push	{r7, lr}
    cb8e:	b082      	sub	sp, #8
    cb90:	af00      	add	r7, sp, #0
    cb92:	6078      	str	r0, [r7, #4]
    cb94:	6878      	ldr	r0, [r7, #4]
    cb96:	f7ff ff5a 	bl	ca4e <TfLiteTensorDataFree>
    cb9a:	687b      	ldr	r3, [r7, #4]
    cb9c:	689b      	ldr	r3, [r3, #8]
    cb9e:	2b00      	cmp	r3, #0
    cba0:	d004      	beq.n	cbac <TfLiteTensorFree+0x20>
    cba2:	687b      	ldr	r3, [r7, #4]
    cba4:	689b      	ldr	r3, [r3, #8]
    cba6:	4618      	mov	r0, r3
    cba8:	f7ff ff1a 	bl	c9e0 <TfLiteIntArrayFree>
    cbac:	687b      	ldr	r3, [r7, #4]
    cbae:	2200      	movs	r2, #0
    cbb0:	609a      	str	r2, [r3, #8]
    cbb2:	687b      	ldr	r3, [r7, #4]
    cbb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    cbb6:	2b00      	cmp	r3, #0
    cbb8:	d004      	beq.n	cbc4 <TfLiteTensorFree+0x38>
    cbba:	687b      	ldr	r3, [r7, #4]
    cbbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    cbbe:	4618      	mov	r0, r3
    cbc0:	f7ff ff0e 	bl	c9e0 <TfLiteIntArrayFree>
    cbc4:	687b      	ldr	r3, [r7, #4]
    cbc6:	2200      	movs	r2, #0
    cbc8:	63da      	str	r2, [r3, #60]	; 0x3c
    cbca:	687b      	ldr	r3, [r7, #4]
    cbcc:	3330      	adds	r3, #48	; 0x30
    cbce:	4618      	mov	r0, r3
    cbd0:	f7ff ff55 	bl	ca7e <TfLiteQuantizationFree>
    cbd4:	687b      	ldr	r3, [r7, #4]
    cbd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    cbd8:	4618      	mov	r0, r3
    cbda:	f7ff ff80 	bl	cade <TfLiteSparsityFree>
    cbde:	687b      	ldr	r3, [r7, #4]
    cbe0:	2200      	movs	r2, #0
    cbe2:	639a      	str	r2, [r3, #56]	; 0x38
    cbe4:	bf00      	nop
    cbe6:	3708      	adds	r7, #8
    cbe8:	46bd      	mov	sp, r7
    cbea:	bd80      	pop	{r7, pc}

0000cbec <TfLiteTensorReset>:
    cbec:	b082      	sub	sp, #8
    cbee:	b580      	push	{r7, lr}
    cbf0:	b084      	sub	sp, #16
    cbf2:	af00      	add	r7, sp, #0
    cbf4:	60b9      	str	r1, [r7, #8]
    cbf6:	607a      	str	r2, [r7, #4]
    cbf8:	61fb      	str	r3, [r7, #28]
    cbfa:	4603      	mov	r3, r0
    cbfc:	73fb      	strb	r3, [r7, #15]
    cbfe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    cc00:	f7ff ffc4 	bl	cb8c <TfLiteTensorFree>
    cc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cc06:	7bfa      	ldrb	r2, [r7, #15]
    cc08:	701a      	strb	r2, [r3, #0]
    cc0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cc0c:	68ba      	ldr	r2, [r7, #8]
    cc0e:	621a      	str	r2, [r3, #32]
    cc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cc12:	687a      	ldr	r2, [r7, #4]
    cc14:	609a      	str	r2, [r3, #8]
    cc16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cc18:	330c      	adds	r3, #12
    cc1a:	f107 021c 	add.w	r2, r7, #28
    cc1e:	e892 0003 	ldmia.w	r2, {r0, r1}
    cc22:	e883 0003 	stmia.w	r3, {r0, r1}
    cc26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cc28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    cc2a:	605a      	str	r2, [r3, #4]
    cc2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cc2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    cc30:	619a      	str	r2, [r3, #24]
    cc32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cc34:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
    cc38:	751a      	strb	r2, [r3, #20]
    cc3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cc3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cc3e:	61da      	str	r2, [r3, #28]
    cc40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cc42:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
    cc46:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    cc4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cc4c:	2200      	movs	r2, #0
    cc4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    cc52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cc54:	2200      	movs	r2, #0
    cc56:	635a      	str	r2, [r3, #52]	; 0x34
    cc58:	bf00      	nop
    cc5a:	3710      	adds	r7, #16
    cc5c:	46bd      	mov	sp, r7
    cc5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    cc62:	b002      	add	sp, #8
    cc64:	4770      	bx	lr

0000cc66 <TfLiteTensorRealloc>:
    cc66:	b580      	push	{r7, lr}
    cc68:	b082      	sub	sp, #8
    cc6a:	af00      	add	r7, sp, #0
    cc6c:	6078      	str	r0, [r7, #4]
    cc6e:	6039      	str	r1, [r7, #0]
    cc70:	683b      	ldr	r3, [r7, #0]
    cc72:	7d1b      	ldrb	r3, [r3, #20]
    cc74:	2b04      	cmp	r3, #4
    cc76:	d003      	beq.n	cc80 <TfLiteTensorRealloc+0x1a>
    cc78:	683b      	ldr	r3, [r7, #0]
    cc7a:	7d1b      	ldrb	r3, [r3, #20]
    cc7c:	2b05      	cmp	r3, #5
    cc7e:	d11d      	bne.n	ccbc <TfLiteTensorRealloc+0x56>
    cc80:	683b      	ldr	r3, [r7, #0]
    cc82:	685b      	ldr	r3, [r3, #4]
    cc84:	2b00      	cmp	r3, #0
    cc86:	d107      	bne.n	cc98 <TfLiteTensorRealloc+0x32>
    cc88:	6878      	ldr	r0, [r7, #4]
    cc8a:	f018 fc75 	bl	25578 <malloc>
    cc8e:	4603      	mov	r3, r0
    cc90:	461a      	mov	r2, r3
    cc92:	683b      	ldr	r3, [r7, #0]
    cc94:	605a      	str	r2, [r3, #4]
    cc96:	e00d      	b.n	ccb4 <TfLiteTensorRealloc+0x4e>
    cc98:	683b      	ldr	r3, [r7, #0]
    cc9a:	699b      	ldr	r3, [r3, #24]
    cc9c:	687a      	ldr	r2, [r7, #4]
    cc9e:	429a      	cmp	r2, r3
    cca0:	d908      	bls.n	ccb4 <TfLiteTensorRealloc+0x4e>
    cca2:	683b      	ldr	r3, [r7, #0]
    cca4:	685b      	ldr	r3, [r3, #4]
    cca6:	6879      	ldr	r1, [r7, #4]
    cca8:	4618      	mov	r0, r3
    ccaa:	f018 ff91 	bl	25bd0 <realloc>
    ccae:	4602      	mov	r2, r0
    ccb0:	683b      	ldr	r3, [r7, #0]
    ccb2:	605a      	str	r2, [r3, #4]
    ccb4:	683b      	ldr	r3, [r7, #0]
    ccb6:	687a      	ldr	r2, [r7, #4]
    ccb8:	619a      	str	r2, [r3, #24]
    ccba:	e000      	b.n	ccbe <TfLiteTensorRealloc+0x58>
    ccbc:	bf00      	nop
    ccbe:	3708      	adds	r7, #8
    ccc0:	46bd      	mov	sp, r7
    ccc2:	bd80      	pop	{r7, pc}

0000ccc4 <TfLiteTypeGetName>:
    ccc4:	b480      	push	{r7}
    ccc6:	b083      	sub	sp, #12
    ccc8:	af00      	add	r7, sp, #0
    ccca:	4603      	mov	r3, r0
    cccc:	71fb      	strb	r3, [r7, #7]
    ccce:	79fb      	ldrb	r3, [r7, #7]
    ccd0:	2b0b      	cmp	r3, #11
    ccd2:	d833      	bhi.n	cd3c <TfLiteTypeGetName+0x78>
    ccd4:	a201      	add	r2, pc, #4	; (adr r2, ccdc <TfLiteTypeGetName+0x18>)
    ccd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ccda:	bf00      	nop
    ccdc:	0000cd0d 	.word	0x0000cd0d
    cce0:	0000cd11 	.word	0x0000cd11
    cce4:	0000cd19 	.word	0x0000cd19
    cce8:	0000cd1d 	.word	0x0000cd1d
    ccec:	0000cd25 	.word	0x0000cd25
    ccf0:	0000cd31 	.word	0x0000cd31
    ccf4:	0000cd29 	.word	0x0000cd29
    ccf8:	0000cd15 	.word	0x0000cd15
    ccfc:	0000cd2d 	.word	0x0000cd2d
    cd00:	0000cd21 	.word	0x0000cd21
    cd04:	0000cd35 	.word	0x0000cd35
    cd08:	0000cd39 	.word	0x0000cd39
    cd0c:	4b0e      	ldr	r3, [pc, #56]	; (cd48 <TfLiteTypeGetName+0x84>)
    cd0e:	e016      	b.n	cd3e <TfLiteTypeGetName+0x7a>
    cd10:	4b0e      	ldr	r3, [pc, #56]	; (cd4c <TfLiteTypeGetName+0x88>)
    cd12:	e014      	b.n	cd3e <TfLiteTypeGetName+0x7a>
    cd14:	4b0e      	ldr	r3, [pc, #56]	; (cd50 <TfLiteTypeGetName+0x8c>)
    cd16:	e012      	b.n	cd3e <TfLiteTypeGetName+0x7a>
    cd18:	4b0e      	ldr	r3, [pc, #56]	; (cd54 <TfLiteTypeGetName+0x90>)
    cd1a:	e010      	b.n	cd3e <TfLiteTypeGetName+0x7a>
    cd1c:	4b0e      	ldr	r3, [pc, #56]	; (cd58 <TfLiteTypeGetName+0x94>)
    cd1e:	e00e      	b.n	cd3e <TfLiteTypeGetName+0x7a>
    cd20:	4b0e      	ldr	r3, [pc, #56]	; (cd5c <TfLiteTypeGetName+0x98>)
    cd22:	e00c      	b.n	cd3e <TfLiteTypeGetName+0x7a>
    cd24:	4b0e      	ldr	r3, [pc, #56]	; (cd60 <TfLiteTypeGetName+0x9c>)
    cd26:	e00a      	b.n	cd3e <TfLiteTypeGetName+0x7a>
    cd28:	4b0e      	ldr	r3, [pc, #56]	; (cd64 <TfLiteTypeGetName+0xa0>)
    cd2a:	e008      	b.n	cd3e <TfLiteTypeGetName+0x7a>
    cd2c:	4b0e      	ldr	r3, [pc, #56]	; (cd68 <TfLiteTypeGetName+0xa4>)
    cd2e:	e006      	b.n	cd3e <TfLiteTypeGetName+0x7a>
    cd30:	4b0e      	ldr	r3, [pc, #56]	; (cd6c <TfLiteTypeGetName+0xa8>)
    cd32:	e004      	b.n	cd3e <TfLiteTypeGetName+0x7a>
    cd34:	4b0e      	ldr	r3, [pc, #56]	; (cd70 <TfLiteTypeGetName+0xac>)
    cd36:	e002      	b.n	cd3e <TfLiteTypeGetName+0x7a>
    cd38:	4b0e      	ldr	r3, [pc, #56]	; (cd74 <TfLiteTypeGetName+0xb0>)
    cd3a:	e000      	b.n	cd3e <TfLiteTypeGetName+0x7a>
    cd3c:	4b0e      	ldr	r3, [pc, #56]	; (cd78 <TfLiteTypeGetName+0xb4>)
    cd3e:	4618      	mov	r0, r3
    cd40:	370c      	adds	r7, #12
    cd42:	46bd      	mov	sp, r7
    cd44:	bc80      	pop	{r7}
    cd46:	4770      	bx	lr
    cd48:	00031bd8 	.word	0x00031bd8
    cd4c:	00031be0 	.word	0x00031be0
    cd50:	00031be8 	.word	0x00031be8
    cd54:	00031bf0 	.word	0x00031bf0
    cd58:	00031bf8 	.word	0x00031bf8
    cd5c:	00031c00 	.word	0x00031c00
    cd60:	00031c08 	.word	0x00031c08
    cd64:	00031c10 	.word	0x00031c10
    cd68:	00031c18 	.word	0x00031c18
    cd6c:	00031c24 	.word	0x00031c24
    cd70:	00031c2c 	.word	0x00031c2c
    cd74:	00031c34 	.word	0x00031c34
    cd78:	00031c3c 	.word	0x00031c3c

0000cd7c <TfLiteDelegateCreate>:
    cd7c:	b5b0      	push	{r4, r5, r7, lr}
    cd7e:	b08a      	sub	sp, #40	; 0x28
    cd80:	af00      	add	r7, sp, #0
    cd82:	6078      	str	r0, [r7, #4]
    cd84:	f107 0308 	add.w	r3, r7, #8
    cd88:	2220      	movs	r2, #32
    cd8a:	2100      	movs	r1, #0
    cd8c:	4618      	mov	r0, r3
    cd8e:	f024 f85e 	bl	30e4e <memset>
    cd92:	687b      	ldr	r3, [r7, #4]
    cd94:	461d      	mov	r5, r3
    cd96:	f107 0408 	add.w	r4, r7, #8
    cd9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    cd9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    cd9e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    cda2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    cda6:	6878      	ldr	r0, [r7, #4]
    cda8:	3728      	adds	r7, #40	; 0x28
    cdaa:	46bd      	mov	sp, r7
    cdac:	bdb0      	pop	{r4, r5, r7, pc}
    cdae:	bf00      	nop

0000cdb0 <is_fnqual_component_type>:
    cdb0:	284d      	cmp	r0, #77	; 0x4d
    cdb2:	d009      	beq.n	cdc8 <is_fnqual_component_type+0x18>
    cdb4:	d805      	bhi.n	cdc2 <is_fnqual_component_type+0x12>
    cdb6:	381c      	subs	r0, #28
    cdb8:	2804      	cmp	r0, #4
    cdba:	bf8c      	ite	hi
    cdbc:	2000      	movhi	r0, #0
    cdbe:	2001      	movls	r0, #1
    cdc0:	4770      	bx	lr
    cdc2:	384f      	subs	r0, #79	; 0x4f
    cdc4:	2801      	cmp	r0, #1
    cdc6:	e7f8      	b.n	cdba <is_fnqual_component_type+0xa>
    cdc8:	2001      	movs	r0, #1
    cdca:	4770      	bx	lr

0000cdcc <d_make_empty>:
    cdcc:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
    cdd0:	2100      	movs	r1, #0
    cdd2:	429a      	cmp	r2, r3
    cdd4:	bfb7      	itett	lt
    cdd6:	6903      	ldrlt	r3, [r0, #16]
    cdd8:	460b      	movge	r3, r1
    cdda:	eb03 1302 	addlt.w	r3, r3, r2, lsl #4
    cdde:	3201      	addlt	r2, #1
    cde0:	bfbc      	itt	lt
    cde2:	6059      	strlt	r1, [r3, #4]
    cde4:	6142      	strlt	r2, [r0, #20]
    cde6:	4618      	mov	r0, r3
    cde8:	4770      	bx	lr

0000cdea <d_make_comp>:
    cdea:	b570      	push	{r4, r5, r6, lr}
    cdec:	461d      	mov	r5, r3
    cdee:	1e4b      	subs	r3, r1, #1
    cdf0:	460e      	mov	r6, r1
    cdf2:	4614      	mov	r4, r2
    cdf4:	2b4f      	cmp	r3, #79	; 0x4f
    cdf6:	d837      	bhi.n	ce68 <d_make_comp+0x7e>
    cdf8:	e8df f003 	tbb	[pc, r3]
    cdfc:	28282828 	.word	0x28282828
    ce00:	36363636 	.word	0x36363636
    ce04:	32283232 	.word	0x32283232
    ce08:	32323232 	.word	0x32323232
    ce0c:	32323232 	.word	0x32323232
    ce10:	36323232 	.word	0x36323232
    ce14:	2a2a2a2a 	.word	0x2a2a2a2a
    ce18:	2a2a2a2a 	.word	0x2a2a2a2a
    ce1c:	32323228 	.word	0x32323228
    ce20:	32363232 	.word	0x32363232
    ce24:	3628292a 	.word	0x3628292a
    ce28:	322a2a28 	.word	0x322a2a28
    ce2c:	32363629 	.word	0x32363629
    ce30:	28283232 	.word	0x28283232
    ce34:	32282828 	.word	0x32282828
    ce38:	28322828 	.word	0x28322828
    ce3c:	32323636 	.word	0x32323636
    ce40:	36363632 	.word	0x36363632
    ce44:	28323232 	.word	0x28323232
    ce48:	2a2a282a 	.word	0x2a2a282a
    ce4c:	b154      	cbz	r4, ce64 <d_make_comp+0x7a>
    ce4e:	b15d      	cbz	r5, ce68 <d_make_comp+0x7e>
    ce50:	f7ff ffbc 	bl	cdcc <d_make_empty>
    ce54:	b110      	cbz	r0, ce5c <d_make_comp+0x72>
    ce56:	7006      	strb	r6, [r0, #0]
    ce58:	e9c0 4502 	strd	r4, r5, [r0, #8]
    ce5c:	4604      	mov	r4, r0
    ce5e:	e001      	b.n	ce64 <d_make_comp+0x7a>
    ce60:	2c00      	cmp	r4, #0
    ce62:	d1f5      	bne.n	ce50 <d_make_comp+0x66>
    ce64:	4620      	mov	r0, r4
    ce66:	bd70      	pop	{r4, r5, r6, pc}
    ce68:	2400      	movs	r4, #0
    ce6a:	e7fb      	b.n	ce64 <d_make_comp+0x7a>

0000ce6c <d_make_name>:
    ce6c:	b538      	push	{r3, r4, r5, lr}
    ce6e:	460c      	mov	r4, r1
    ce70:	4615      	mov	r5, r2
    ce72:	f7ff ffab 	bl	cdcc <d_make_empty>
    ce76:	b138      	cbz	r0, ce88 <d_make_name+0x1c>
    ce78:	2300      	movs	r3, #0
    ce7a:	b134      	cbz	r4, ce8a <d_make_name+0x1e>
    ce7c:	429d      	cmp	r5, r3
    ce7e:	dd06      	ble.n	ce8e <d_make_name+0x22>
    ce80:	6043      	str	r3, [r0, #4]
    ce82:	7003      	strb	r3, [r0, #0]
    ce84:	e9c0 4502 	strd	r4, r5, [r0, #8]
    ce88:	bd38      	pop	{r3, r4, r5, pc}
    ce8a:	4620      	mov	r0, r4
    ce8c:	e7fc      	b.n	ce88 <d_make_name+0x1c>
    ce8e:	4618      	mov	r0, r3
    ce90:	e7fa      	b.n	ce88 <d_make_name+0x1c>

0000ce92 <d_make_builtin_type>:
    ce92:	b510      	push	{r4, lr}
    ce94:	460c      	mov	r4, r1
    ce96:	f7ff ff99 	bl	cdcc <d_make_empty>
    ce9a:	b110      	cbz	r0, cea2 <d_make_builtin_type+0x10>
    ce9c:	2327      	movs	r3, #39	; 0x27
    ce9e:	6084      	str	r4, [r0, #8]
    cea0:	7003      	strb	r3, [r0, #0]
    cea2:	bd10      	pop	{r4, pc}

0000cea4 <d_ref_qualifier>:
    cea4:	68c3      	ldr	r3, [r0, #12]
    cea6:	460a      	mov	r2, r1
    cea8:	7819      	ldrb	r1, [r3, #0]
    ceaa:	2952      	cmp	r1, #82	; 0x52
    ceac:	d006      	beq.n	cebc <d_ref_qualifier+0x18>
    ceae:	294f      	cmp	r1, #79	; 0x4f
    ceb0:	d10c      	bne.n	cecc <d_ref_qualifier+0x28>
    ceb2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    ceb4:	3103      	adds	r1, #3
    ceb6:	62c1      	str	r1, [r0, #44]	; 0x2c
    ceb8:	2120      	movs	r1, #32
    ceba:	e003      	b.n	cec4 <d_ref_qualifier+0x20>
    cebc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    cebe:	3102      	adds	r1, #2
    cec0:	62c1      	str	r1, [r0, #44]	; 0x2c
    cec2:	211f      	movs	r1, #31
    cec4:	3301      	adds	r3, #1
    cec6:	60c3      	str	r3, [r0, #12]
    cec8:	2300      	movs	r3, #0
    ceca:	e78e      	b.n	cdea <d_make_comp>
    cecc:	4610      	mov	r0, r2
    cece:	4770      	bx	lr

0000ced0 <d_add_substitution>:
    ced0:	b151      	cbz	r1, cee8 <d_add_substitution+0x18>
    ced2:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
    ced6:	4293      	cmp	r3, r2
    ced8:	da06      	bge.n	cee8 <d_add_substitution+0x18>
    ceda:	69c2      	ldr	r2, [r0, #28]
    cedc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    cee0:	3301      	adds	r3, #1
    cee2:	6203      	str	r3, [r0, #32]
    cee4:	2001      	movs	r0, #1
    cee6:	4770      	bx	lr
    cee8:	2000      	movs	r0, #0
    ceea:	4770      	bx	lr

0000ceec <d_count_templates_scopes>:
    ceec:	b538      	push	{r3, r4, r5, lr}
    ceee:	4605      	mov	r5, r0
    cef0:	460c      	mov	r4, r1
    cef2:	2c00      	cmp	r4, #0
    cef4:	d047      	beq.n	cf86 <d_count_templates_scopes+0x9a>
    cef6:	7823      	ldrb	r3, [r4, #0]
    cef8:	3b01      	subs	r3, #1
    cefa:	2b4f      	cmp	r3, #79	; 0x4f
    cefc:	d843      	bhi.n	cf86 <d_count_templates_scopes+0x9a>
    cefe:	e8df f003 	tbb	[pc, r3]
    cf02:	2d2d      	.short	0x2d2d
    cf04:	4242282d 	.word	0x4242282d
    cf08:	2d2d4d4d 	.word	0x2d2d4d4d
    cf0c:	2d2d2d2d 	.word	0x2d2d2d2d
    cf10:	2d2d2d2d 	.word	0x2d2d2d2d
    cf14:	2d2d2d2d 	.word	0x2d2d2d2d
    cf18:	2d2d422d 	.word	0x2d2d422d
    cf1c:	2d2d2d2d 	.word	0x2d2d2d2d
    cf20:	2d2d2d2d 	.word	0x2d2d2d2d
    cf24:	2d2d4343 	.word	0x2d2d4343
    cf28:	2d2d2d42 	.word	0x2d2d2d42
    cf2c:	2d2d4f2d 	.word	0x2d2d4f2d
    cf30:	422d2d2d 	.word	0x422d2d2d
    cf34:	2d2d2d4d 	.word	0x2d2d2d4d
    cf38:	2d2d2d2d 	.word	0x2d2d2d2d
    cf3c:	2d2d2d2d 	.word	0x2d2d2d2d
    cf40:	42422d2d 	.word	0x42422d2d
    cf44:	4f4f4f2d 	.word	0x4f4f4f2d
    cf48:	2d2d424f 	.word	0x2d2d424f
    cf4c:	2d2d2d2d 	.word	0x2d2d2d2d
    cf50:	2d2d      	.short	0x2d2d
    cf52:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
    cf56:	3301      	adds	r3, #1
    cf58:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
    cf5c:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
    cf60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    cf64:	dc0f      	bgt.n	cf86 <d_count_templates_scopes+0x9a>
    cf66:	3301      	adds	r3, #1
    cf68:	68a1      	ldr	r1, [r4, #8]
    cf6a:	4628      	mov	r0, r5
    cf6c:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
    cf70:	f7ff ffbc 	bl	ceec <d_count_templates_scopes>
    cf74:	68e1      	ldr	r1, [r4, #12]
    cf76:	4628      	mov	r0, r5
    cf78:	f7ff ffb8 	bl	ceec <d_count_templates_scopes>
    cf7c:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
    cf80:	3b01      	subs	r3, #1
    cf82:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
    cf86:	bd38      	pop	{r3, r4, r5, pc}
    cf88:	68a3      	ldr	r3, [r4, #8]
    cf8a:	781b      	ldrb	r3, [r3, #0]
    cf8c:	2b05      	cmp	r3, #5
    cf8e:	bf02      	ittt	eq
    cf90:	f8d5 3138 	ldreq.w	r3, [r5, #312]	; 0x138
    cf94:	3301      	addeq	r3, #1
    cf96:	f8c5 3138 	streq.w	r3, [r5, #312]	; 0x138
    cf9a:	e7df      	b.n	cf5c <d_count_templates_scopes+0x70>
    cf9c:	68e4      	ldr	r4, [r4, #12]
    cf9e:	e7a8      	b.n	cef2 <d_count_templates_scopes+0x6>
    cfa0:	68a4      	ldr	r4, [r4, #8]
    cfa2:	e7a6      	b.n	cef2 <d_count_templates_scopes+0x6>

0000cfa4 <d_print_flush>:
    cfa4:	b538      	push	{r3, r4, r5, lr}
    cfa6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    cfaa:	2500      	movs	r5, #0
    cfac:	4604      	mov	r4, r0
    cfae:	5445      	strb	r5, [r0, r1]
    cfb0:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
    cfb4:	4798      	blx	r3
    cfb6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    cfba:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    cfbe:	3301      	adds	r3, #1
    cfc0:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    cfc4:	bd38      	pop	{r3, r4, r5, pc}

0000cfc6 <d_append_char>:
    cfc6:	b538      	push	{r3, r4, r5, lr}
    cfc8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    cfcc:	4604      	mov	r4, r0
    cfce:	460d      	mov	r5, r1
    cfd0:	2bff      	cmp	r3, #255	; 0xff
    cfd2:	d101      	bne.n	cfd8 <d_append_char+0x12>
    cfd4:	f7ff ffe6 	bl	cfa4 <d_print_flush>
    cfd8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    cfdc:	1c5a      	adds	r2, r3, #1
    cfde:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    cfe2:	54e5      	strb	r5, [r4, r3]
    cfe4:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    cfe8:	bd38      	pop	{r3, r4, r5, pc}

0000cfea <d_append_buffer>:
    cfea:	b570      	push	{r4, r5, r6, lr}
    cfec:	4606      	mov	r6, r0
    cfee:	460c      	mov	r4, r1
    cff0:	188d      	adds	r5, r1, r2
    cff2:	42ac      	cmp	r4, r5
    cff4:	d100      	bne.n	cff8 <d_append_buffer+0xe>
    cff6:	bd70      	pop	{r4, r5, r6, pc}
    cff8:	f814 1b01 	ldrb.w	r1, [r4], #1
    cffc:	4630      	mov	r0, r6
    cffe:	f7ff ffe2 	bl	cfc6 <d_append_char>
    d002:	e7f6      	b.n	cff2 <d_append_buffer+0x8>

0000d004 <d_pack_length>:
    d004:	2300      	movs	r3, #0
    d006:	b120      	cbz	r0, d012 <d_pack_length+0xe>
    d008:	7802      	ldrb	r2, [r0, #0]
    d00a:	2a2f      	cmp	r2, #47	; 0x2f
    d00c:	d101      	bne.n	d012 <d_pack_length+0xe>
    d00e:	6882      	ldr	r2, [r0, #8]
    d010:	b90a      	cbnz	r2, d016 <d_pack_length+0x12>
    d012:	4618      	mov	r0, r3
    d014:	4770      	bx	lr
    d016:	3301      	adds	r3, #1
    d018:	68c0      	ldr	r0, [r0, #12]
    d01a:	e7f4      	b.n	d006 <d_pack_length+0x2>

0000d01c <d_append_string>:
    d01c:	b513      	push	{r0, r1, r4, lr}
    d01e:	4604      	mov	r4, r0
    d020:	4608      	mov	r0, r1
    d022:	9101      	str	r1, [sp, #4]
    d024:	f004 fd78 	bl	11b18 <strlen>
    d028:	9901      	ldr	r1, [sp, #4]
    d02a:	4602      	mov	r2, r0
    d02c:	4620      	mov	r0, r4
    d02e:	b002      	add	sp, #8
    d030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d034:	e7d9      	b.n	cfea <d_append_buffer>

0000d036 <d_append_num>:
    d036:	b510      	push	{r4, lr}
    d038:	b088      	sub	sp, #32
    d03a:	4604      	mov	r4, r0
    d03c:	460a      	mov	r2, r1
    d03e:	4905      	ldr	r1, [pc, #20]	; (d054 <d_append_num+0x1e>)
    d040:	a801      	add	r0, sp, #4
    d042:	f018 fdf7 	bl	25c34 <siprintf>
    d046:	a901      	add	r1, sp, #4
    d048:	4620      	mov	r0, r4
    d04a:	f7ff ffe7 	bl	d01c <d_append_string>
    d04e:	b008      	add	sp, #32
    d050:	bd10      	pop	{r4, pc}
    d052:	bf00      	nop
    d054:	00036b22 	.word	0x00036b22

0000d058 <d_number.isra.0>:
    d058:	6801      	ldr	r1, [r0, #0]
    d05a:	4602      	mov	r2, r0
    d05c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d05e:	780b      	ldrb	r3, [r1, #0]
    d060:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    d064:	240a      	movs	r4, #10
    d066:	2b6e      	cmp	r3, #110	; 0x6e
    d068:	bf05      	ittet	eq
    d06a:	1c4b      	addeq	r3, r1, #1
    d06c:	2501      	moveq	r5, #1
    d06e:	2500      	movne	r5, #0
    d070:	6003      	streq	r3, [r0, #0]
    d072:	f04f 0000 	mov.w	r0, #0
    d076:	bf08      	it	eq
    d078:	784b      	ldrbeq	r3, [r1, #1]
    d07a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    d07e:	b2cf      	uxtb	r7, r1
    d080:	2f09      	cmp	r7, #9
    d082:	d902      	bls.n	d08a <d_number.isra.0+0x32>
    d084:	b105      	cbz	r5, d088 <d_number.isra.0+0x30>
    d086:	4240      	negs	r0, r0
    d088:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d08a:	1a71      	subs	r1, r6, r1
    d08c:	fbb1 f1f4 	udiv	r1, r1, r4
    d090:	4281      	cmp	r1, r0
    d092:	db08      	blt.n	d0a6 <d_number.isra.0+0x4e>
    d094:	fb04 3300 	mla	r3, r4, r0, r3
    d098:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    d09c:	6813      	ldr	r3, [r2, #0]
    d09e:	1c59      	adds	r1, r3, #1
    d0a0:	6011      	str	r1, [r2, #0]
    d0a2:	785b      	ldrb	r3, [r3, #1]
    d0a4:	e7e9      	b.n	d07a <d_number.isra.0+0x22>
    d0a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d0aa:	e7ed      	b.n	d088 <d_number.isra.0+0x30>

0000d0ac <d_number_component>:
    d0ac:	b538      	push	{r3, r4, r5, lr}
    d0ae:	4605      	mov	r5, r0
    d0b0:	f7ff fe8c 	bl	cdcc <d_make_empty>
    d0b4:	4604      	mov	r4, r0
    d0b6:	b130      	cbz	r0, d0c6 <d_number_component+0x1a>
    d0b8:	2342      	movs	r3, #66	; 0x42
    d0ba:	7003      	strb	r3, [r0, #0]
    d0bc:	f105 000c 	add.w	r0, r5, #12
    d0c0:	f7ff ffca 	bl	d058 <d_number.isra.0>
    d0c4:	60a0      	str	r0, [r4, #8]
    d0c6:	4620      	mov	r0, r4
    d0c8:	bd38      	pop	{r3, r4, r5, pc}

0000d0ca <d_compact_number>:
    d0ca:	68c3      	ldr	r3, [r0, #12]
    d0cc:	b510      	push	{r4, lr}
    d0ce:	781b      	ldrb	r3, [r3, #0]
    d0d0:	4604      	mov	r4, r0
    d0d2:	2b5f      	cmp	r3, #95	; 0x5f
    d0d4:	d010      	beq.n	d0f8 <d_compact_number+0x2e>
    d0d6:	2b6e      	cmp	r3, #110	; 0x6e
    d0d8:	d102      	bne.n	d0e0 <d_compact_number+0x16>
    d0da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d0de:	bd10      	pop	{r4, pc}
    d0e0:	300c      	adds	r0, #12
    d0e2:	f7ff ffb9 	bl	d058 <d_number.isra.0>
    d0e6:	3001      	adds	r0, #1
    d0e8:	d4f7      	bmi.n	d0da <d_compact_number+0x10>
    d0ea:	68e3      	ldr	r3, [r4, #12]
    d0ec:	781a      	ldrb	r2, [r3, #0]
    d0ee:	2a5f      	cmp	r2, #95	; 0x5f
    d0f0:	d1f3      	bne.n	d0da <d_compact_number+0x10>
    d0f2:	3301      	adds	r3, #1
    d0f4:	60e3      	str	r3, [r4, #12]
    d0f6:	e7f2      	b.n	d0de <d_compact_number+0x14>
    d0f8:	2000      	movs	r0, #0
    d0fa:	e7f6      	b.n	d0ea <d_compact_number+0x20>

0000d0fc <d_template_param>:
    d0fc:	b538      	push	{r3, r4, r5, lr}
    d0fe:	68c3      	ldr	r3, [r0, #12]
    d100:	4604      	mov	r4, r0
    d102:	781a      	ldrb	r2, [r3, #0]
    d104:	2a54      	cmp	r2, #84	; 0x54
    d106:	d001      	beq.n	d10c <d_template_param+0x10>
    d108:	2000      	movs	r0, #0
    d10a:	bd38      	pop	{r3, r4, r5, pc}
    d10c:	3301      	adds	r3, #1
    d10e:	60c3      	str	r3, [r0, #12]
    d110:	f7ff ffdb 	bl	d0ca <d_compact_number>
    d114:	1e05      	subs	r5, r0, #0
    d116:	dbf7      	blt.n	d108 <d_template_param+0xc>
    d118:	4620      	mov	r0, r4
    d11a:	f7ff fe57 	bl	cdcc <d_make_empty>
    d11e:	2800      	cmp	r0, #0
    d120:	d0f3      	beq.n	d10a <d_template_param+0xe>
    d122:	2305      	movs	r3, #5
    d124:	6085      	str	r5, [r0, #8]
    d126:	7003      	strb	r3, [r0, #0]
    d128:	e7ef      	b.n	d10a <d_template_param+0xe>

0000d12a <d_source_name>:
    d12a:	b570      	push	{r4, r5, r6, lr}
    d12c:	4604      	mov	r4, r0
    d12e:	300c      	adds	r0, #12
    d130:	f7ff ff92 	bl	d058 <d_number.isra.0>
    d134:	1e05      	subs	r5, r0, #0
    d136:	dd30      	ble.n	d19a <d_source_name+0x70>
    d138:	68e6      	ldr	r6, [r4, #12]
    d13a:	6863      	ldr	r3, [r4, #4]
    d13c:	1b9b      	subs	r3, r3, r6
    d13e:	429d      	cmp	r5, r3
    d140:	dc29      	bgt.n	d196 <d_source_name+0x6c>
    d142:	68a2      	ldr	r2, [r4, #8]
    d144:	1973      	adds	r3, r6, r5
    d146:	0752      	lsls	r2, r2, #29
    d148:	60e3      	str	r3, [r4, #12]
    d14a:	d504      	bpl.n	d156 <d_source_name+0x2c>
    d14c:	5d72      	ldrb	r2, [r6, r5]
    d14e:	2a24      	cmp	r2, #36	; 0x24
    d150:	bf04      	itt	eq
    d152:	3301      	addeq	r3, #1
    d154:	60e3      	streq	r3, [r4, #12]
    d156:	2d09      	cmp	r5, #9
    d158:	dd1a      	ble.n	d190 <d_source_name+0x66>
    d15a:	2208      	movs	r2, #8
    d15c:	4910      	ldr	r1, [pc, #64]	; (d1a0 <d_source_name+0x76>)
    d15e:	4630      	mov	r0, r6
    d160:	f023 fe40 	bl	30de4 <memcmp>
    d164:	b9a0      	cbnz	r0, d190 <d_source_name+0x66>
    d166:	7a33      	ldrb	r3, [r6, #8]
    d168:	2b2e      	cmp	r3, #46	; 0x2e
    d16a:	d003      	beq.n	d174 <d_source_name+0x4a>
    d16c:	2b5f      	cmp	r3, #95	; 0x5f
    d16e:	d001      	beq.n	d174 <d_source_name+0x4a>
    d170:	2b24      	cmp	r3, #36	; 0x24
    d172:	d10d      	bne.n	d190 <d_source_name+0x66>
    d174:	7a73      	ldrb	r3, [r6, #9]
    d176:	2b4e      	cmp	r3, #78	; 0x4e
    d178:	d10a      	bne.n	d190 <d_source_name+0x66>
    d17a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    d17c:	2215      	movs	r2, #21
    d17e:	4909      	ldr	r1, [pc, #36]	; (d1a4 <d_source_name+0x7a>)
    d180:	3016      	adds	r0, #22
    d182:	1b45      	subs	r5, r0, r5
    d184:	62e5      	str	r5, [r4, #44]	; 0x2c
    d186:	4620      	mov	r0, r4
    d188:	f7ff fe70 	bl	ce6c <d_make_name>
    d18c:	62a0      	str	r0, [r4, #40]	; 0x28
    d18e:	bd70      	pop	{r4, r5, r6, pc}
    d190:	462a      	mov	r2, r5
    d192:	4631      	mov	r1, r6
    d194:	e7f7      	b.n	d186 <d_source_name+0x5c>
    d196:	2000      	movs	r0, #0
    d198:	e7f8      	b.n	d18c <d_source_name+0x62>
    d19a:	2000      	movs	r0, #0
    d19c:	e7f7      	b.n	d18e <d_source_name+0x64>
    d19e:	bf00      	nop
    d1a0:	00036ee2 	.word	0x00036ee2
    d1a4:	00036eeb 	.word	0x00036eeb

0000d1a8 <d_abi_tags>:
    d1a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d1aa:	4604      	mov	r4, r0
    d1ac:	6a85      	ldr	r5, [r0, #40]	; 0x28
    d1ae:	460a      	mov	r2, r1
    d1b0:	68e3      	ldr	r3, [r4, #12]
    d1b2:	7819      	ldrb	r1, [r3, #0]
    d1b4:	2942      	cmp	r1, #66	; 0x42
    d1b6:	d003      	beq.n	d1c0 <d_abi_tags+0x18>
    d1b8:	4610      	mov	r0, r2
    d1ba:	62a5      	str	r5, [r4, #40]	; 0x28
    d1bc:	b003      	add	sp, #12
    d1be:	bd30      	pop	{r4, r5, pc}
    d1c0:	3301      	adds	r3, #1
    d1c2:	4620      	mov	r0, r4
    d1c4:	9201      	str	r2, [sp, #4]
    d1c6:	60e3      	str	r3, [r4, #12]
    d1c8:	f7ff ffaf 	bl	d12a <d_source_name>
    d1cc:	9a01      	ldr	r2, [sp, #4]
    d1ce:	4603      	mov	r3, r0
    d1d0:	214c      	movs	r1, #76	; 0x4c
    d1d2:	4620      	mov	r0, r4
    d1d4:	f7ff fe09 	bl	cdea <d_make_comp>
    d1d8:	4602      	mov	r2, r0
    d1da:	e7e9      	b.n	d1b0 <d_abi_tags+0x8>

0000d1dc <d_call_offset>:
    d1dc:	b538      	push	{r3, r4, r5, lr}
    d1de:	4604      	mov	r4, r0
    d1e0:	b939      	cbnz	r1, d1f2 <d_call_offset+0x16>
    d1e2:	68c3      	ldr	r3, [r0, #12]
    d1e4:	781a      	ldrb	r2, [r3, #0]
    d1e6:	b90a      	cbnz	r2, d1ec <d_call_offset+0x10>
    d1e8:	2000      	movs	r0, #0
    d1ea:	bd38      	pop	{r3, r4, r5, pc}
    d1ec:	1c5a      	adds	r2, r3, #1
    d1ee:	60c2      	str	r2, [r0, #12]
    d1f0:	7819      	ldrb	r1, [r3, #0]
    d1f2:	2968      	cmp	r1, #104	; 0x68
    d1f4:	d10b      	bne.n	d20e <d_call_offset+0x32>
    d1f6:	f104 000c 	add.w	r0, r4, #12
    d1fa:	f7ff ff2d 	bl	d058 <d_number.isra.0>
    d1fe:	68e3      	ldr	r3, [r4, #12]
    d200:	781a      	ldrb	r2, [r3, #0]
    d202:	2a5f      	cmp	r2, #95	; 0x5f
    d204:	d1f0      	bne.n	d1e8 <d_call_offset+0xc>
    d206:	3301      	adds	r3, #1
    d208:	2001      	movs	r0, #1
    d20a:	60e3      	str	r3, [r4, #12]
    d20c:	e7ed      	b.n	d1ea <d_call_offset+0xe>
    d20e:	2976      	cmp	r1, #118	; 0x76
    d210:	d1ea      	bne.n	d1e8 <d_call_offset+0xc>
    d212:	f104 050c 	add.w	r5, r4, #12
    d216:	4628      	mov	r0, r5
    d218:	f7ff ff1e 	bl	d058 <d_number.isra.0>
    d21c:	68e3      	ldr	r3, [r4, #12]
    d21e:	781a      	ldrb	r2, [r3, #0]
    d220:	2a5f      	cmp	r2, #95	; 0x5f
    d222:	d1e1      	bne.n	d1e8 <d_call_offset+0xc>
    d224:	3301      	adds	r3, #1
    d226:	4628      	mov	r0, r5
    d228:	60e3      	str	r3, [r4, #12]
    d22a:	e7e6      	b.n	d1fa <d_call_offset+0x1e>

0000d22c <next_is_type_qual.isra.0>:
    d22c:	7803      	ldrb	r3, [r0, #0]
    d22e:	2b72      	cmp	r3, #114	; 0x72
    d230:	d012      	beq.n	d258 <next_is_type_qual.isra.0+0x2c>
    d232:	2b56      	cmp	r3, #86	; 0x56
    d234:	d010      	beq.n	d258 <next_is_type_qual.isra.0+0x2c>
    d236:	2b4b      	cmp	r3, #75	; 0x4b
    d238:	d00e      	beq.n	d258 <next_is_type_qual.isra.0+0x2c>
    d23a:	2b44      	cmp	r3, #68	; 0x44
    d23c:	d10a      	bne.n	d254 <next_is_type_qual.isra.0+0x28>
    d23e:	7840      	ldrb	r0, [r0, #1]
    d240:	f000 03df 	and.w	r3, r0, #223	; 0xdf
    d244:	2b4f      	cmp	r3, #79	; 0x4f
    d246:	d007      	beq.n	d258 <next_is_type_qual.isra.0+0x2c>
    d248:	3877      	subs	r0, #119	; 0x77
    d24a:	2801      	cmp	r0, #1
    d24c:	bf8c      	ite	hi
    d24e:	2000      	movhi	r0, #0
    d250:	2001      	movls	r0, #1
    d252:	4770      	bx	lr
    d254:	2000      	movs	r0, #0
    d256:	4770      	bx	lr
    d258:	2001      	movs	r0, #1
    d25a:	4770      	bx	lr

0000d25c <op_is_new_cast.isra.0>:
    d25c:	6803      	ldr	r3, [r0, #0]
    d25e:	785a      	ldrb	r2, [r3, #1]
    d260:	2a63      	cmp	r2, #99	; 0x63
    d262:	d10a      	bne.n	d27a <op_is_new_cast.isra.0+0x1e>
    d264:	7818      	ldrb	r0, [r3, #0]
    d266:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
    d26a:	2b01      	cmp	r3, #1
    d26c:	d907      	bls.n	d27e <op_is_new_cast.isra.0+0x22>
    d26e:	3872      	subs	r0, #114	; 0x72
    d270:	2801      	cmp	r0, #1
    d272:	bf8c      	ite	hi
    d274:	2000      	movhi	r0, #0
    d276:	2001      	movls	r0, #1
    d278:	4770      	bx	lr
    d27a:	2000      	movs	r0, #0
    d27c:	4770      	bx	lr
    d27e:	2001      	movs	r0, #1
    d280:	4770      	bx	lr

0000d282 <d_discriminator>:
    d282:	b538      	push	{r3, r4, r5, lr}
    d284:	68c3      	ldr	r3, [r0, #12]
    d286:	4604      	mov	r4, r0
    d288:	781a      	ldrb	r2, [r3, #0]
    d28a:	2a5f      	cmp	r2, #95	; 0x5f
    d28c:	d001      	beq.n	d292 <d_discriminator+0x10>
    d28e:	2001      	movs	r0, #1
    d290:	bd38      	pop	{r3, r4, r5, pc}
    d292:	1c5a      	adds	r2, r3, #1
    d294:	300c      	adds	r0, #12
    d296:	6002      	str	r2, [r0, #0]
    d298:	785a      	ldrb	r2, [r3, #1]
    d29a:	2a5f      	cmp	r2, #95	; 0x5f
    d29c:	bf05      	ittet	eq
    d29e:	3302      	addeq	r3, #2
    d2a0:	2502      	moveq	r5, #2
    d2a2:	2501      	movne	r5, #1
    d2a4:	6003      	streq	r3, [r0, #0]
    d2a6:	f7ff fed7 	bl	d058 <d_number.isra.0>
    d2aa:	2800      	cmp	r0, #0
    d2ac:	db0a      	blt.n	d2c4 <d_discriminator+0x42>
    d2ae:	2d02      	cmp	r5, #2
    d2b0:	d1ed      	bne.n	d28e <d_discriminator+0xc>
    d2b2:	2809      	cmp	r0, #9
    d2b4:	ddeb      	ble.n	d28e <d_discriminator+0xc>
    d2b6:	68e3      	ldr	r3, [r4, #12]
    d2b8:	781a      	ldrb	r2, [r3, #0]
    d2ba:	2a5f      	cmp	r2, #95	; 0x5f
    d2bc:	d102      	bne.n	d2c4 <d_discriminator+0x42>
    d2be:	3301      	adds	r3, #1
    d2c0:	60e3      	str	r3, [r4, #12]
    d2c2:	e7e4      	b.n	d28e <d_discriminator+0xc>
    d2c4:	2000      	movs	r0, #0
    d2c6:	e7e3      	b.n	d290 <d_discriminator+0xe>

0000d2c8 <d_index_template_argument.part.0>:
    d2c8:	b900      	cbnz	r0, d2cc <d_index_template_argument.part.0+0x4>
    d2ca:	4770      	bx	lr
    d2cc:	7803      	ldrb	r3, [r0, #0]
    d2ce:	2b2f      	cmp	r3, #47	; 0x2f
    d2d0:	d107      	bne.n	d2e2 <d_index_template_argument.part.0+0x1a>
    d2d2:	2900      	cmp	r1, #0
    d2d4:	dd04      	ble.n	d2e0 <d_index_template_argument.part.0+0x18>
    d2d6:	3901      	subs	r1, #1
    d2d8:	68c0      	ldr	r0, [r0, #12]
    d2da:	e7f5      	b.n	d2c8 <d_index_template_argument.part.0>
    d2dc:	6880      	ldr	r0, [r0, #8]
    d2de:	4770      	bx	lr
    d2e0:	d0fc      	beq.n	d2dc <d_index_template_argument.part.0+0x14>
    d2e2:	2000      	movs	r0, #0
    d2e4:	4770      	bx	lr

0000d2e6 <d_growable_string_callback_adapter>:
    d2e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d2ea:	1c4b      	adds	r3, r1, #1
    d2ec:	4614      	mov	r4, r2
    d2ee:	6852      	ldr	r2, [r2, #4]
    d2f0:	4680      	mov	r8, r0
    d2f2:	68a5      	ldr	r5, [r4, #8]
    d2f4:	460f      	mov	r7, r1
    d2f6:	4413      	add	r3, r2
    d2f8:	42ab      	cmp	r3, r5
    d2fa:	d91a      	bls.n	d332 <d_growable_string_callback_adapter+0x4c>
    d2fc:	68e2      	ldr	r2, [r4, #12]
    d2fe:	b992      	cbnz	r2, d326 <d_growable_string_callback_adapter+0x40>
    d300:	2d00      	cmp	r5, #0
    d302:	bf08      	it	eq
    d304:	2502      	moveq	r5, #2
    d306:	42ab      	cmp	r3, r5
    d308:	d80f      	bhi.n	d32a <d_growable_string_callback_adapter+0x44>
    d30a:	4629      	mov	r1, r5
    d30c:	6820      	ldr	r0, [r4, #0]
    d30e:	f018 fc5f 	bl	25bd0 <realloc>
    d312:	4606      	mov	r6, r0
    d314:	b958      	cbnz	r0, d32e <d_growable_string_callback_adapter+0x48>
    d316:	6820      	ldr	r0, [r4, #0]
    d318:	f018 f936 	bl	25588 <free>
    d31c:	2301      	movs	r3, #1
    d31e:	60a6      	str	r6, [r4, #8]
    d320:	60e3      	str	r3, [r4, #12]
    d322:	e9c4 6600 	strd	r6, r6, [r4]
    d326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d32a:	006d      	lsls	r5, r5, #1
    d32c:	e7eb      	b.n	d306 <d_growable_string_callback_adapter+0x20>
    d32e:	6020      	str	r0, [r4, #0]
    d330:	60a5      	str	r5, [r4, #8]
    d332:	68e5      	ldr	r5, [r4, #12]
    d334:	2d00      	cmp	r5, #0
    d336:	d1f6      	bne.n	d326 <d_growable_string_callback_adapter+0x40>
    d338:	463a      	mov	r2, r7
    d33a:	4641      	mov	r1, r8
    d33c:	e9d4 0300 	ldrd	r0, r3, [r4]
    d340:	4418      	add	r0, r3
    d342:	f023 fd5d 	bl	30e00 <memcpy>
    d346:	e9d4 3200 	ldrd	r3, r2, [r4]
    d34a:	443b      	add	r3, r7
    d34c:	549d      	strb	r5, [r3, r2]
    d34e:	6861      	ldr	r1, [r4, #4]
    d350:	4439      	add	r1, r7
    d352:	6061      	str	r1, [r4, #4]
    d354:	e7e7      	b.n	d326 <d_growable_string_callback_adapter+0x40>

0000d356 <d_lookup_template_argument.isra.0>:
    d356:	4603      	mov	r3, r0
    d358:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
    d35c:	b918      	cbnz	r0, d366 <d_lookup_template_argument.isra.0+0x10>
    d35e:	2201      	movs	r2, #1
    d360:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    d364:	4770      	bx	lr
    d366:	6809      	ldr	r1, [r1, #0]
    d368:	6843      	ldr	r3, [r0, #4]
    d36a:	2900      	cmp	r1, #0
    d36c:	68d8      	ldr	r0, [r3, #12]
    d36e:	db00      	blt.n	d372 <d_lookup_template_argument.isra.0+0x1c>
    d370:	e7aa      	b.n	d2c8 <d_index_template_argument.part.0>
    d372:	4770      	bx	lr

0000d374 <d_find_pack>:
    d374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d378:	4605      	mov	r5, r0
    d37a:	460c      	mov	r4, r1
    d37c:	2601      	movs	r6, #1
    d37e:	4f25      	ldr	r7, [pc, #148]	; (d414 <d_find_pack+0xa0>)
    d380:	f8df 8094 	ldr.w	r8, [pc, #148]	; d418 <d_find_pack+0xa4>
    d384:	b16c      	cbz	r4, d3a2 <d_find_pack+0x2e>
    d386:	7823      	ldrb	r3, [r4, #0]
    d388:	2b08      	cmp	r3, #8
    d38a:	d914      	bls.n	d3b6 <d_find_pack+0x42>
    d38c:	2b2c      	cmp	r3, #44	; 0x2c
    d38e:	d829      	bhi.n	d3e4 <d_find_pack+0x70>
    d390:	2b17      	cmp	r3, #23
    d392:	d92b      	bls.n	d3ec <d_find_pack+0x78>
    d394:	3b18      	subs	r3, #24
    d396:	b2db      	uxtb	r3, r3
    d398:	fa06 f303 	lsl.w	r3, r6, r3
    d39c:	ea13 0f08 	tst.w	r3, r8
    d3a0:	d024      	beq.n	d3ec <d_find_pack+0x78>
    d3a2:	2000      	movs	r0, #0
    d3a4:	e033      	b.n	d40e <d_find_pack+0x9a>
    d3a6:	fa06 f303 	lsl.w	r3, r6, r3
    d3aa:	423b      	tst	r3, r7
    d3ac:	d1f9      	bne.n	d3a2 <d_find_pack+0x2e>
    d3ae:	079b      	lsls	r3, r3, #30
    d3b0:	d51c      	bpl.n	d3ec <d_find_pack+0x78>
    d3b2:	68e4      	ldr	r4, [r4, #12]
    d3b4:	e7e6      	b.n	d384 <d_find_pack+0x10>
    d3b6:	2b08      	cmp	r3, #8
    d3b8:	d818      	bhi.n	d3ec <d_find_pack+0x78>
    d3ba:	a201      	add	r2, pc, #4	; (adr r2, d3c0 <d_find_pack+0x4c>)
    d3bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d3c0:	0000d3a3 	.word	0x0000d3a3
    d3c4:	0000d3ed 	.word	0x0000d3ed
    d3c8:	0000d3ed 	.word	0x0000d3ed
    d3cc:	0000d3ed 	.word	0x0000d3ed
    d3d0:	0000d3ed 	.word	0x0000d3ed
    d3d4:	0000d3fb 	.word	0x0000d3fb
    d3d8:	0000d3a3 	.word	0x0000d3a3
    d3dc:	0000d3b3 	.word	0x0000d3b3
    d3e0:	0000d3b3 	.word	0x0000d3b3
    d3e4:	3b32      	subs	r3, #50	; 0x32
    d3e6:	b2db      	uxtb	r3, r3
    d3e8:	2b1a      	cmp	r3, #26
    d3ea:	d9dc      	bls.n	d3a6 <d_find_pack+0x32>
    d3ec:	68a1      	ldr	r1, [r4, #8]
    d3ee:	4628      	mov	r0, r5
    d3f0:	f7ff ffc0 	bl	d374 <d_find_pack>
    d3f4:	2800      	cmp	r0, #0
    d3f6:	d0dc      	beq.n	d3b2 <d_find_pack+0x3e>
    d3f8:	e009      	b.n	d40e <d_find_pack+0x9a>
    d3fa:	f104 0108 	add.w	r1, r4, #8
    d3fe:	4628      	mov	r0, r5
    d400:	f7ff ffa9 	bl	d356 <d_lookup_template_argument.isra.0>
    d404:	2800      	cmp	r0, #0
    d406:	d0cc      	beq.n	d3a2 <d_find_pack+0x2e>
    d408:	7803      	ldrb	r3, [r0, #0]
    d40a:	2b2f      	cmp	r3, #47	; 0x2f
    d40c:	d1c9      	bne.n	d3a2 <d_find_pack+0x2e>
    d40e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d412:	bf00      	nop
    d414:	06718001 	.word	0x06718001
    d418:	00108001 	.word	0x00108001

0000d41c <d_substitution>:
    d41c:	68c2      	ldr	r2, [r0, #12]
    d41e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d422:	7813      	ldrb	r3, [r2, #0]
    d424:	4604      	mov	r4, r0
    d426:	2b53      	cmp	r3, #83	; 0x53
    d428:	d14d      	bne.n	d4c6 <d_substitution+0xaa>
    d42a:	1c53      	adds	r3, r2, #1
    d42c:	60c3      	str	r3, [r0, #12]
    d42e:	7853      	ldrb	r3, [r2, #1]
    d430:	b163      	cbz	r3, d44c <d_substitution+0x30>
    d432:	1c93      	adds	r3, r2, #2
    d434:	60c3      	str	r3, [r0, #12]
    d436:	7853      	ldrb	r3, [r2, #1]
    d438:	2b5f      	cmp	r3, #95	; 0x5f
    d43a:	d070      	beq.n	d51e <d_substitution+0x102>
    d43c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    d440:	2a09      	cmp	r2, #9
    d442:	d960      	bls.n	d506 <d_substitution+0xea>
    d444:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    d448:	2a19      	cmp	r2, #25
    d44a:	d95c      	bls.n	d506 <d_substitution+0xea>
    d44c:	68a2      	ldr	r2, [r4, #8]
    d44e:	f002 0208 	and.w	r2, r2, #8
    d452:	2a00      	cmp	r2, #0
    d454:	bf14      	ite	ne
    d456:	2601      	movne	r6, #1
    d458:	2600      	moveq	r6, #0
    d45a:	d106      	bne.n	d46a <d_substitution+0x4e>
    d45c:	b129      	cbz	r1, d46a <d_substitution+0x4e>
    d45e:	68e2      	ldr	r2, [r4, #12]
    d460:	7812      	ldrb	r2, [r2, #0]
    d462:	3a43      	subs	r2, #67	; 0x43
    d464:	2a01      	cmp	r2, #1
    d466:	bf98      	it	ls
    d468:	460e      	movls	r6, r1
    d46a:	2207      	movs	r2, #7
    d46c:	4d31      	ldr	r5, [pc, #196]	; (d534 <d_substitution+0x118>)
    d46e:	7829      	ldrb	r1, [r5, #0]
    d470:	4299      	cmp	r1, r3
    d472:	d159      	bne.n	d528 <d_substitution+0x10c>
    d474:	696f      	ldr	r7, [r5, #20]
    d476:	b157      	cbz	r7, d48e <d_substitution+0x72>
    d478:	4620      	mov	r0, r4
    d47a:	f8d5 8018 	ldr.w	r8, [r5, #24]
    d47e:	f7ff fca5 	bl	cdcc <d_make_empty>
    d482:	b118      	cbz	r0, d48c <d_substitution+0x70>
    d484:	2318      	movs	r3, #24
    d486:	e9c0 7802 	strd	r7, r8, [r0, #8]
    d48a:	7003      	strb	r3, [r0, #0]
    d48c:	62a0      	str	r0, [r4, #40]	; 0x28
    d48e:	2e00      	cmp	r6, #0
    d490:	d047      	beq.n	d522 <d_substitution+0x106>
    d492:	e9d5 6503 	ldrd	r6, r5, [r5, #12]
    d496:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    d498:	4620      	mov	r0, r4
    d49a:	442b      	add	r3, r5
    d49c:	62e3      	str	r3, [r4, #44]	; 0x2c
    d49e:	f7ff fc95 	bl	cdcc <d_make_empty>
    d4a2:	4601      	mov	r1, r0
    d4a4:	b118      	cbz	r0, d4ae <d_substitution+0x92>
    d4a6:	2318      	movs	r3, #24
    d4a8:	e9c0 6502 	strd	r6, r5, [r0, #8]
    d4ac:	7003      	strb	r3, [r0, #0]
    d4ae:	68e3      	ldr	r3, [r4, #12]
    d4b0:	781b      	ldrb	r3, [r3, #0]
    d4b2:	2b42      	cmp	r3, #66	; 0x42
    d4b4:	d124      	bne.n	d500 <d_substitution+0xe4>
    d4b6:	4620      	mov	r0, r4
    d4b8:	f7ff fe76 	bl	d1a8 <d_abi_tags>
    d4bc:	4601      	mov	r1, r0
    d4be:	4620      	mov	r0, r4
    d4c0:	f7ff fd06 	bl	ced0 <d_add_substitution>
    d4c4:	b9e0      	cbnz	r0, d500 <d_substitution+0xe4>
    d4c6:	2100      	movs	r1, #0
    d4c8:	e01a      	b.n	d500 <d_substitution+0xe4>
    d4ca:	4611      	mov	r1, r2
    d4cc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    d4d0:	2a09      	cmp	r2, #9
    d4d2:	d81b      	bhi.n	d50c <d_substitution+0xf0>
    d4d4:	fb00 3301 	mla	r3, r0, r1, r3
    d4d8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    d4dc:	4291      	cmp	r1, r2
    d4de:	d8f2      	bhi.n	d4c6 <d_substitution+0xaa>
    d4e0:	68e1      	ldr	r1, [r4, #12]
    d4e2:	780b      	ldrb	r3, [r1, #0]
    d4e4:	2b00      	cmp	r3, #0
    d4e6:	d0f0      	beq.n	d4ca <d_substitution+0xae>
    d4e8:	1c4b      	adds	r3, r1, #1
    d4ea:	60e3      	str	r3, [r4, #12]
    d4ec:	780b      	ldrb	r3, [r1, #0]
    d4ee:	2b5f      	cmp	r3, #95	; 0x5f
    d4f0:	d1eb      	bne.n	d4ca <d_substitution+0xae>
    d4f2:	3201      	adds	r2, #1
    d4f4:	6a23      	ldr	r3, [r4, #32]
    d4f6:	4293      	cmp	r3, r2
    d4f8:	d9e5      	bls.n	d4c6 <d_substitution+0xaa>
    d4fa:	69e3      	ldr	r3, [r4, #28]
    d4fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    d500:	4608      	mov	r0, r1
    d502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d506:	2100      	movs	r1, #0
    d508:	2024      	movs	r0, #36	; 0x24
    d50a:	e7df      	b.n	d4cc <d_substitution+0xb0>
    d50c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    d510:	2a19      	cmp	r2, #25
    d512:	d8d8      	bhi.n	d4c6 <d_substitution+0xaa>
    d514:	fb00 3301 	mla	r3, r0, r1, r3
    d518:	f1a3 0237 	sub.w	r2, r3, #55	; 0x37
    d51c:	e7de      	b.n	d4dc <d_substitution+0xc0>
    d51e:	2200      	movs	r2, #0
    d520:	e7e8      	b.n	d4f4 <d_substitution+0xd8>
    d522:	e9d5 6501 	ldrd	r6, r5, [r5, #4]
    d526:	e7b6      	b.n	d496 <d_substitution+0x7a>
    d528:	3a01      	subs	r2, #1
    d52a:	f105 051c 	add.w	r5, r5, #28
    d52e:	d19e      	bne.n	d46e <d_substitution+0x52>
    d530:	e7c9      	b.n	d4c6 <d_substitution+0xaa>
    d532:	bf00      	nop
    d534:	00031c4c 	.word	0x00031c4c

0000d538 <d_expr_primary>:
    d538:	68c3      	ldr	r3, [r0, #12]
    d53a:	b570      	push	{r4, r5, r6, lr}
    d53c:	781a      	ldrb	r2, [r3, #0]
    d53e:	4604      	mov	r4, r0
    d540:	2a4c      	cmp	r2, #76	; 0x4c
    d542:	d001      	beq.n	d548 <d_expr_primary+0x10>
    d544:	2000      	movs	r0, #0
    d546:	bd70      	pop	{r4, r5, r6, pc}
    d548:	1c5a      	adds	r2, r3, #1
    d54a:	60c2      	str	r2, [r0, #12]
    d54c:	785a      	ldrb	r2, [r3, #1]
    d54e:	2a5f      	cmp	r2, #95	; 0x5f
    d550:	d028      	beq.n	d5a4 <d_expr_primary+0x6c>
    d552:	2a5a      	cmp	r2, #90	; 0x5a
    d554:	d028      	beq.n	d5a8 <d_expr_primary+0x70>
    d556:	f000 fa2b 	bl	d9b0 <d_type>
    d55a:	4605      	mov	r5, r0
    d55c:	2800      	cmp	r0, #0
    d55e:	d0f1      	beq.n	d544 <d_expr_primary+0xc>
    d560:	7803      	ldrb	r3, [r0, #0]
    d562:	2b27      	cmp	r3, #39	; 0x27
    d564:	d106      	bne.n	d574 <d_expr_primary+0x3c>
    d566:	6882      	ldr	r2, [r0, #8]
    d568:	7c13      	ldrb	r3, [r2, #16]
    d56a:	b11b      	cbz	r3, d574 <d_expr_primary+0x3c>
    d56c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    d56e:	6852      	ldr	r2, [r2, #4]
    d570:	1a9b      	subs	r3, r3, r2
    d572:	62e3      	str	r3, [r4, #44]	; 0x2c
    d574:	68e3      	ldr	r3, [r4, #12]
    d576:	781a      	ldrb	r2, [r3, #0]
    d578:	2a6e      	cmp	r2, #110	; 0x6e
    d57a:	bf05      	ittet	eq
    d57c:	3301      	addeq	r3, #1
    d57e:	263e      	moveq	r6, #62	; 0x3e
    d580:	263d      	movne	r6, #61	; 0x3d
    d582:	60e3      	streq	r3, [r4, #12]
    d584:	68e1      	ldr	r1, [r4, #12]
    d586:	68e2      	ldr	r2, [r4, #12]
    d588:	7813      	ldrb	r3, [r2, #0]
    d58a:	2b45      	cmp	r3, #69	; 0x45
    d58c:	d11d      	bne.n	d5ca <d_expr_primary+0x92>
    d58e:	1a52      	subs	r2, r2, r1
    d590:	4620      	mov	r0, r4
    d592:	f7ff fc6b 	bl	ce6c <d_make_name>
    d596:	462a      	mov	r2, r5
    d598:	4603      	mov	r3, r0
    d59a:	4631      	mov	r1, r6
    d59c:	4620      	mov	r0, r4
    d59e:	f7ff fc24 	bl	cdea <d_make_comp>
    d5a2:	e00b      	b.n	d5bc <d_expr_primary+0x84>
    d5a4:	3302      	adds	r3, #2
    d5a6:	60c3      	str	r3, [r0, #12]
    d5a8:	68e3      	ldr	r3, [r4, #12]
    d5aa:	781a      	ldrb	r2, [r3, #0]
    d5ac:	2a5a      	cmp	r2, #90	; 0x5a
    d5ae:	d111      	bne.n	d5d4 <d_expr_primary+0x9c>
    d5b0:	3301      	adds	r3, #1
    d5b2:	2100      	movs	r1, #0
    d5b4:	4620      	mov	r0, r4
    d5b6:	60e3      	str	r3, [r4, #12]
    d5b8:	f001 f912 	bl	e7e0 <d_encoding>
    d5bc:	68e3      	ldr	r3, [r4, #12]
    d5be:	781a      	ldrb	r2, [r3, #0]
    d5c0:	2a45      	cmp	r2, #69	; 0x45
    d5c2:	d1bf      	bne.n	d544 <d_expr_primary+0xc>
    d5c4:	3301      	adds	r3, #1
    d5c6:	60e3      	str	r3, [r4, #12]
    d5c8:	e7bd      	b.n	d546 <d_expr_primary+0xe>
    d5ca:	2b00      	cmp	r3, #0
    d5cc:	d0ba      	beq.n	d544 <d_expr_primary+0xc>
    d5ce:	3201      	adds	r2, #1
    d5d0:	60e2      	str	r2, [r4, #12]
    d5d2:	e7d8      	b.n	d586 <d_expr_primary+0x4e>
    d5d4:	2000      	movs	r0, #0
    d5d6:	e7f1      	b.n	d5bc <d_expr_primary+0x84>

0000d5d8 <d_expression_1>:
    d5d8:	68c3      	ldr	r3, [r0, #12]
    d5da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d5dc:	781a      	ldrb	r2, [r3, #0]
    d5de:	4604      	mov	r4, r0
    d5e0:	2a4c      	cmp	r2, #76	; 0x4c
    d5e2:	d103      	bne.n	d5ec <d_expression_1+0x14>
    d5e4:	b003      	add	sp, #12
    d5e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    d5ea:	e7a5      	b.n	d538 <d_expr_primary>
    d5ec:	2a54      	cmp	r2, #84	; 0x54
    d5ee:	d103      	bne.n	d5f8 <d_expression_1+0x20>
    d5f0:	b003      	add	sp, #12
    d5f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    d5f6:	e581      	b.n	d0fc <d_template_param>
    d5f8:	2a73      	cmp	r2, #115	; 0x73
    d5fa:	d12d      	bne.n	d658 <d_expression_1+0x80>
    d5fc:	785a      	ldrb	r2, [r3, #1]
    d5fe:	2a72      	cmp	r2, #114	; 0x72
    d600:	d120      	bne.n	d644 <d_expression_1+0x6c>
    d602:	3302      	adds	r3, #2
    d604:	60c3      	str	r3, [r0, #12]
    d606:	f000 f9d3 	bl	d9b0 <d_type>
    d60a:	4605      	mov	r5, r0
    d60c:	4620      	mov	r0, r4
    d60e:	f000 fea0 	bl	e352 <d_unqualified_name>
    d612:	68e3      	ldr	r3, [r4, #12]
    d614:	781b      	ldrb	r3, [r3, #0]
    d616:	2b49      	cmp	r3, #73	; 0x49
    d618:	d008      	beq.n	d62c <d_expression_1+0x54>
    d61a:	4603      	mov	r3, r0
    d61c:	462a      	mov	r2, r5
    d61e:	2101      	movs	r1, #1
    d620:	4620      	mov	r0, r4
    d622:	b003      	add	sp, #12
    d624:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    d628:	f7ff bbdf 	b.w	cdea <d_make_comp>
    d62c:	9001      	str	r0, [sp, #4]
    d62e:	4620      	mov	r0, r4
    d630:	f000 fcf5 	bl	e01e <d_template_args>
    d634:	9a01      	ldr	r2, [sp, #4]
    d636:	4603      	mov	r3, r0
    d638:	2104      	movs	r1, #4
    d63a:	4620      	mov	r0, r4
    d63c:	f7ff fbd5 	bl	cdea <d_make_comp>
    d640:	4603      	mov	r3, r0
    d642:	e7eb      	b.n	d61c <d_expression_1+0x44>
    d644:	2a70      	cmp	r2, #112	; 0x70
    d646:	d162      	bne.n	d70e <d_expression_1+0x136>
    d648:	3302      	adds	r3, #2
    d64a:	60c3      	str	r3, [r0, #12]
    d64c:	f7ff ffc4 	bl	d5d8 <d_expression_1>
    d650:	2300      	movs	r3, #0
    d652:	4602      	mov	r2, r0
    d654:	214b      	movs	r1, #75	; 0x4b
    d656:	e7e3      	b.n	d620 <d_expression_1+0x48>
    d658:	2a66      	cmp	r2, #102	; 0x66
    d65a:	d11f      	bne.n	d69c <d_expression_1+0xc4>
    d65c:	785a      	ldrb	r2, [r3, #1]
    d65e:	2a70      	cmp	r2, #112	; 0x70
    d660:	d155      	bne.n	d70e <d_expression_1+0x136>
    d662:	1c9a      	adds	r2, r3, #2
    d664:	60c2      	str	r2, [r0, #12]
    d666:	789a      	ldrb	r2, [r3, #2]
    d668:	2a54      	cmp	r2, #84	; 0x54
    d66a:	d10d      	bne.n	d688 <d_expression_1+0xb0>
    d66c:	3303      	adds	r3, #3
    d66e:	2600      	movs	r6, #0
    d670:	60c3      	str	r3, [r0, #12]
    d672:	4620      	mov	r0, r4
    d674:	f7ff fbaa 	bl	cdcc <d_make_empty>
    d678:	4605      	mov	r5, r0
    d67a:	b110      	cbz	r0, d682 <d_expression_1+0xaa>
    d67c:	2306      	movs	r3, #6
    d67e:	6086      	str	r6, [r0, #8]
    d680:	7003      	strb	r3, [r0, #0]
    d682:	4628      	mov	r0, r5
    d684:	b003      	add	sp, #12
    d686:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d688:	f7ff fd1f 	bl	d0ca <d_compact_number>
    d68c:	43c3      	mvns	r3, r0
    d68e:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
    d692:	d101      	bne.n	d698 <d_expression_1+0xc0>
    d694:	2500      	movs	r5, #0
    d696:	e7f4      	b.n	d682 <d_expression_1+0xaa>
    d698:	1c46      	adds	r6, r0, #1
    d69a:	e7ea      	b.n	d672 <d_expression_1+0x9a>
    d69c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    d6a0:	2909      	cmp	r1, #9
    d6a2:	d906      	bls.n	d6b2 <d_expression_1+0xda>
    d6a4:	2a6f      	cmp	r2, #111	; 0x6f
    d6a6:	d115      	bne.n	d6d4 <d_expression_1+0xfc>
    d6a8:	785a      	ldrb	r2, [r3, #1]
    d6aa:	2a6e      	cmp	r2, #110	; 0x6e
    d6ac:	d12f      	bne.n	d70e <d_expression_1+0x136>
    d6ae:	3302      	adds	r3, #2
    d6b0:	60c3      	str	r3, [r0, #12]
    d6b2:	4620      	mov	r0, r4
    d6b4:	f000 fe4d 	bl	e352 <d_unqualified_name>
    d6b8:	4605      	mov	r5, r0
    d6ba:	2800      	cmp	r0, #0
    d6bc:	d0ea      	beq.n	d694 <d_expression_1+0xbc>
    d6be:	68e3      	ldr	r3, [r4, #12]
    d6c0:	781b      	ldrb	r3, [r3, #0]
    d6c2:	2b49      	cmp	r3, #73	; 0x49
    d6c4:	d1dd      	bne.n	d682 <d_expression_1+0xaa>
    d6c6:	4620      	mov	r0, r4
    d6c8:	f000 fca9 	bl	e01e <d_template_args>
    d6cc:	462a      	mov	r2, r5
    d6ce:	4603      	mov	r3, r0
    d6d0:	2104      	movs	r1, #4
    d6d2:	e7a5      	b.n	d620 <d_expression_1+0x48>
    d6d4:	2a69      	cmp	r2, #105	; 0x69
    d6d6:	d001      	beq.n	d6dc <d_expression_1+0x104>
    d6d8:	2a74      	cmp	r2, #116	; 0x74
    d6da:	d118      	bne.n	d70e <d_expression_1+0x136>
    d6dc:	7859      	ldrb	r1, [r3, #1]
    d6de:	296c      	cmp	r1, #108	; 0x6c
    d6e0:	d115      	bne.n	d70e <d_expression_1+0x136>
    d6e2:	3302      	adds	r3, #2
    d6e4:	2a74      	cmp	r2, #116	; 0x74
    d6e6:	60e3      	str	r3, [r4, #12]
    d6e8:	d10f      	bne.n	d70a <d_expression_1+0x132>
    d6ea:	4620      	mov	r0, r4
    d6ec:	f000 f960 	bl	d9b0 <d_type>
    d6f0:	4605      	mov	r5, r0
    d6f2:	68e3      	ldr	r3, [r4, #12]
    d6f4:	785b      	ldrb	r3, [r3, #1]
    d6f6:	2b00      	cmp	r3, #0
    d6f8:	d0cc      	beq.n	d694 <d_expression_1+0xbc>
    d6fa:	2145      	movs	r1, #69	; 0x45
    d6fc:	4620      	mov	r0, r4
    d6fe:	f000 f92a 	bl	d956 <d_exprlist>
    d702:	462a      	mov	r2, r5
    d704:	4603      	mov	r3, r0
    d706:	2131      	movs	r1, #49	; 0x31
    d708:	e78a      	b.n	d620 <d_expression_1+0x48>
    d70a:	2500      	movs	r5, #0
    d70c:	e7f1      	b.n	d6f2 <d_expression_1+0x11a>
    d70e:	4620      	mov	r0, r4
    d710:	f000 fc8f 	bl	e032 <d_operator_name>
    d714:	4605      	mov	r5, r0
    d716:	2800      	cmp	r0, #0
    d718:	d0bc      	beq.n	d694 <d_expression_1+0xbc>
    d71a:	7803      	ldrb	r3, [r0, #0]
    d71c:	2b32      	cmp	r3, #50	; 0x32
    d71e:	d113      	bne.n	d748 <d_expression_1+0x170>
    d720:	6883      	ldr	r3, [r0, #8]
    d722:	4982      	ldr	r1, [pc, #520]	; (d92c <d_expression_1+0x354>)
    d724:	689a      	ldr	r2, [r3, #8]
    d726:	681e      	ldr	r6, [r3, #0]
    d728:	3a02      	subs	r2, #2
    d72a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    d72c:	4630      	mov	r0, r6
    d72e:	4413      	add	r3, r2
    d730:	62e3      	str	r3, [r4, #44]	; 0x2c
    d732:	f004 f9e7 	bl	11b04 <strcmp>
    d736:	68ab      	ldr	r3, [r5, #8]
    d738:	b9d0      	cbnz	r0, d770 <d_expression_1+0x198>
    d73a:	4620      	mov	r0, r4
    d73c:	f000 f938 	bl	d9b0 <d_type>
    d740:	4603      	mov	r3, r0
    d742:	462a      	mov	r2, r5
    d744:	2137      	movs	r1, #55	; 0x37
    d746:	e76b      	b.n	d620 <d_expression_1+0x48>
    d748:	2b34      	cmp	r3, #52	; 0x34
    d74a:	d03c      	beq.n	d7c6 <d_expression_1+0x1ee>
    d74c:	d8a2      	bhi.n	d694 <d_expression_1+0xbc>
    d74e:	2b33      	cmp	r3, #51	; 0x33
    d750:	d1a0      	bne.n	d694 <d_expression_1+0xbc>
    d752:	6883      	ldr	r3, [r0, #8]
    d754:	2b03      	cmp	r3, #3
    d756:	d89d      	bhi.n	d694 <d_expression_1+0xbc>
    d758:	a201      	add	r2, pc, #4	; (adr r2, d760 <d_expression_1+0x188>)
    d75a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d75e:	bf00      	nop
    d760:	0000d77f 	.word	0x0000d77f
    d764:	0000d7dd 	.word	0x0000d7dd
    d768:	0000d695 	.word	0x0000d695
    d76c:	0000d695 	.word	0x0000d695
    d770:	68df      	ldr	r7, [r3, #12]
    d772:	2f03      	cmp	r7, #3
    d774:	d88e      	bhi.n	d694 <d_expression_1+0xbc>
    d776:	e8df f007 	tbb	[pc, r7]
    d77a:	0602      	.short	0x0602
    d77c:	7c36      	.short	0x7c36
    d77e:	2300      	movs	r3, #0
    d780:	462a      	mov	r2, r5
    d782:	2136      	movs	r1, #54	; 0x36
    d784:	e74c      	b.n	d620 <d_expression_1+0x48>
    d786:	7833      	ldrb	r3, [r6, #0]
    d788:	2b70      	cmp	r3, #112	; 0x70
    d78a:	d001      	beq.n	d790 <d_expression_1+0x1b8>
    d78c:	2b6d      	cmp	r3, #109	; 0x6d
    d78e:	d108      	bne.n	d7a2 <d_expression_1+0x1ca>
    d790:	7872      	ldrb	r2, [r6, #1]
    d792:	429a      	cmp	r2, r3
    d794:	d105      	bne.n	d7a2 <d_expression_1+0x1ca>
    d796:	68e3      	ldr	r3, [r4, #12]
    d798:	781a      	ldrb	r2, [r3, #0]
    d79a:	2a5f      	cmp	r2, #95	; 0x5f
    d79c:	d102      	bne.n	d7a4 <d_expression_1+0x1cc>
    d79e:	3301      	adds	r3, #1
    d7a0:	60e3      	str	r3, [r4, #12]
    d7a2:	2700      	movs	r7, #0
    d7a4:	4962      	ldr	r1, [pc, #392]	; (d930 <d_expression_1+0x358>)
    d7a6:	4630      	mov	r0, r6
    d7a8:	f004 f9ac 	bl	11b04 <strcmp>
    d7ac:	b9b8      	cbnz	r0, d7de <d_expression_1+0x206>
    d7ae:	4620      	mov	r0, r4
    d7b0:	f000 fc06 	bl	dfc0 <d_template_args_1>
    d7b4:	2f00      	cmp	r7, #0
    d7b6:	d0c3      	beq.n	d740 <d_expression_1+0x168>
    d7b8:	4603      	mov	r3, r0
    d7ba:	4602      	mov	r2, r0
    d7bc:	2139      	movs	r1, #57	; 0x39
    d7be:	4620      	mov	r0, r4
    d7c0:	f7ff fb13 	bl	cdea <d_make_comp>
    d7c4:	e7bc      	b.n	d740 <d_expression_1+0x168>
    d7c6:	68e3      	ldr	r3, [r4, #12]
    d7c8:	781a      	ldrb	r2, [r3, #0]
    d7ca:	2a5f      	cmp	r2, #95	; 0x5f
    d7cc:	d106      	bne.n	d7dc <d_expression_1+0x204>
    d7ce:	3301      	adds	r3, #1
    d7d0:	2145      	movs	r1, #69	; 0x45
    d7d2:	4620      	mov	r0, r4
    d7d4:	60e3      	str	r3, [r4, #12]
    d7d6:	f000 f8be 	bl	d956 <d_exprlist>
    d7da:	e7b1      	b.n	d740 <d_expression_1+0x168>
    d7dc:	2700      	movs	r7, #0
    d7de:	4620      	mov	r0, r4
    d7e0:	f7ff fefa 	bl	d5d8 <d_expression_1>
    d7e4:	e7e6      	b.n	d7b4 <d_expression_1+0x1dc>
    d7e6:	68a8      	ldr	r0, [r5, #8]
    d7e8:	f7ff fd38 	bl	d25c <op_is_new_cast.isra.0>
    d7ec:	b1b8      	cbz	r0, d81e <d_expression_1+0x246>
    d7ee:	4620      	mov	r0, r4
    d7f0:	f000 f8de 	bl	d9b0 <d_type>
    d7f4:	4607      	mov	r7, r0
    d7f6:	494f      	ldr	r1, [pc, #316]	; (d934 <d_expression_1+0x35c>)
    d7f8:	4630      	mov	r0, r6
    d7fa:	f004 f983 	bl	11b04 <strcmp>
    d7fe:	b9c0      	cbnz	r0, d832 <d_expression_1+0x25a>
    d800:	2145      	movs	r1, #69	; 0x45
    d802:	4620      	mov	r0, r4
    d804:	f000 f8a7 	bl	d956 <d_exprlist>
    d808:	4606      	mov	r6, r0
    d80a:	4633      	mov	r3, r6
    d80c:	463a      	mov	r2, r7
    d80e:	2139      	movs	r1, #57	; 0x39
    d810:	4620      	mov	r0, r4
    d812:	f7ff faea 	bl	cdea <d_make_comp>
    d816:	462a      	mov	r2, r5
    d818:	4603      	mov	r3, r0
    d81a:	2138      	movs	r1, #56	; 0x38
    d81c:	e700      	b.n	d620 <d_expression_1+0x48>
    d81e:	7833      	ldrb	r3, [r6, #0]
    d820:	4620      	mov	r0, r4
    d822:	2b66      	cmp	r3, #102	; 0x66
    d824:	d102      	bne.n	d82c <d_expression_1+0x254>
    d826:	f000 fc04 	bl	e032 <d_operator_name>
    d82a:	e7e3      	b.n	d7f4 <d_expression_1+0x21c>
    d82c:	f7ff fed4 	bl	d5d8 <d_expression_1>
    d830:	e7e0      	b.n	d7f4 <d_expression_1+0x21c>
    d832:	4941      	ldr	r1, [pc, #260]	; (d938 <d_expression_1+0x360>)
    d834:	4630      	mov	r0, r6
    d836:	f004 f965 	bl	11b04 <strcmp>
    d83a:	b120      	cbz	r0, d846 <d_expression_1+0x26e>
    d83c:	493f      	ldr	r1, [pc, #252]	; (d93c <d_expression_1+0x364>)
    d83e:	4630      	mov	r0, r6
    d840:	f004 f960 	bl	11b04 <strcmp>
    d844:	b988      	cbnz	r0, d86a <d_expression_1+0x292>
    d846:	4620      	mov	r0, r4
    d848:	f000 fd83 	bl	e352 <d_unqualified_name>
    d84c:	68e3      	ldr	r3, [r4, #12]
    d84e:	4606      	mov	r6, r0
    d850:	781b      	ldrb	r3, [r3, #0]
    d852:	2b49      	cmp	r3, #73	; 0x49
    d854:	d1d9      	bne.n	d80a <d_expression_1+0x232>
    d856:	4620      	mov	r0, r4
    d858:	f000 fbe1 	bl	e01e <d_template_args>
    d85c:	4632      	mov	r2, r6
    d85e:	4603      	mov	r3, r0
    d860:	2104      	movs	r1, #4
    d862:	4620      	mov	r0, r4
    d864:	f7ff fac1 	bl	cdea <d_make_comp>
    d868:	e7ce      	b.n	d808 <d_expression_1+0x230>
    d86a:	4620      	mov	r0, r4
    d86c:	f7ff feb4 	bl	d5d8 <d_expression_1>
    d870:	e7ca      	b.n	d808 <d_expression_1+0x230>
    d872:	4933      	ldr	r1, [pc, #204]	; (d940 <d_expression_1+0x368>)
    d874:	4630      	mov	r0, r6
    d876:	f004 f945 	bl	11b04 <strcmp>
    d87a:	b9e8      	cbnz	r0, d8b8 <d_expression_1+0x2e0>
    d87c:	4620      	mov	r0, r4
    d87e:	f7ff feab 	bl	d5d8 <d_expression_1>
    d882:	4606      	mov	r6, r0
    d884:	4620      	mov	r0, r4
    d886:	f7ff fea7 	bl	d5d8 <d_expression_1>
    d88a:	4607      	mov	r7, r0
    d88c:	4620      	mov	r0, r4
    d88e:	f7ff fea3 	bl	d5d8 <d_expression_1>
    d892:	2800      	cmp	r0, #0
    d894:	f43f aefe 	beq.w	d694 <d_expression_1+0xbc>
    d898:	4603      	mov	r3, r0
    d89a:	463a      	mov	r2, r7
    d89c:	213c      	movs	r1, #60	; 0x3c
    d89e:	4620      	mov	r0, r4
    d8a0:	f7ff faa3 	bl	cdea <d_make_comp>
    d8a4:	4632      	mov	r2, r6
    d8a6:	4603      	mov	r3, r0
    d8a8:	213b      	movs	r1, #59	; 0x3b
    d8aa:	4620      	mov	r0, r4
    d8ac:	f7ff fa9d 	bl	cdea <d_make_comp>
    d8b0:	462a      	mov	r2, r5
    d8b2:	4603      	mov	r3, r0
    d8b4:	213a      	movs	r1, #58	; 0x3a
    d8b6:	e6b3      	b.n	d620 <d_expression_1+0x48>
    d8b8:	7833      	ldrb	r3, [r6, #0]
    d8ba:	2b66      	cmp	r3, #102	; 0x66
    d8bc:	d103      	bne.n	d8c6 <d_expression_1+0x2ee>
    d8be:	4620      	mov	r0, r4
    d8c0:	f000 fbb7 	bl	e032 <d_operator_name>
    d8c4:	e7dd      	b.n	d882 <d_expression_1+0x2aa>
    d8c6:	2b6e      	cmp	r3, #110	; 0x6e
    d8c8:	f47f aee4 	bne.w	d694 <d_expression_1+0xbc>
    d8cc:	7873      	ldrb	r3, [r6, #1]
    d8ce:	2b77      	cmp	r3, #119	; 0x77
    d8d0:	d002      	beq.n	d8d8 <d_expression_1+0x300>
    d8d2:	2b61      	cmp	r3, #97	; 0x61
    d8d4:	f47f aede 	bne.w	d694 <d_expression_1+0xbc>
    d8d8:	215f      	movs	r1, #95	; 0x5f
    d8da:	4620      	mov	r0, r4
    d8dc:	f000 f83b 	bl	d956 <d_exprlist>
    d8e0:	4606      	mov	r6, r0
    d8e2:	4620      	mov	r0, r4
    d8e4:	f000 f864 	bl	d9b0 <d_type>
    d8e8:	68e3      	ldr	r3, [r4, #12]
    d8ea:	4607      	mov	r7, r0
    d8ec:	781a      	ldrb	r2, [r3, #0]
    d8ee:	2a45      	cmp	r2, #69	; 0x45
    d8f0:	d103      	bne.n	d8fa <d_expression_1+0x322>
    d8f2:	3301      	adds	r3, #1
    d8f4:	2000      	movs	r0, #0
    d8f6:	60e3      	str	r3, [r4, #12]
    d8f8:	e7ce      	b.n	d898 <d_expression_1+0x2c0>
    d8fa:	2a70      	cmp	r2, #112	; 0x70
    d8fc:	d10a      	bne.n	d914 <d_expression_1+0x33c>
    d8fe:	785a      	ldrb	r2, [r3, #1]
    d900:	2a69      	cmp	r2, #105	; 0x69
    d902:	f47f aec7 	bne.w	d694 <d_expression_1+0xbc>
    d906:	3302      	adds	r3, #2
    d908:	2145      	movs	r1, #69	; 0x45
    d90a:	4620      	mov	r0, r4
    d90c:	60e3      	str	r3, [r4, #12]
    d90e:	f000 f822 	bl	d956 <d_exprlist>
    d912:	e7c1      	b.n	d898 <d_expression_1+0x2c0>
    d914:	2a69      	cmp	r2, #105	; 0x69
    d916:	f47f aebd 	bne.w	d694 <d_expression_1+0xbc>
    d91a:	785b      	ldrb	r3, [r3, #1]
    d91c:	2b6c      	cmp	r3, #108	; 0x6c
    d91e:	f47f aeb9 	bne.w	d694 <d_expression_1+0xbc>
    d922:	4620      	mov	r0, r4
    d924:	f7ff fe58 	bl	d5d8 <d_expression_1>
    d928:	e7b6      	b.n	d898 <d_expression_1+0x2c0>
    d92a:	bf00      	nop
    d92c:	00037383 	.word	0x00037383
    d930:	00036f0a 	.word	0x00036f0a
    d934:	00036f01 	.word	0x00036f01
    d938:	00036f04 	.word	0x00036f04
    d93c:	000371a1 	.word	0x000371a1
    d940:	00036f07 	.word	0x00036f07

0000d944 <d_expression>:
    d944:	b538      	push	{r3, r4, r5, lr}
    d946:	2301      	movs	r3, #1
    d948:	6b05      	ldr	r5, [r0, #48]	; 0x30
    d94a:	4604      	mov	r4, r0
    d94c:	6303      	str	r3, [r0, #48]	; 0x30
    d94e:	f7ff fe43 	bl	d5d8 <d_expression_1>
    d952:	6325      	str	r5, [r4, #48]	; 0x30
    d954:	bd38      	pop	{r3, r4, r5, pc}

0000d956 <d_exprlist>:
    d956:	68c2      	ldr	r2, [r0, #12]
    d958:	2300      	movs	r3, #0
    d95a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    d95c:	460d      	mov	r5, r1
    d95e:	7811      	ldrb	r1, [r2, #0]
    d960:	4604      	mov	r4, r0
    d962:	9301      	str	r3, [sp, #4]
    d964:	42a9      	cmp	r1, r5
    d966:	d108      	bne.n	d97a <d_exprlist+0x24>
    d968:	3201      	adds	r2, #1
    d96a:	212e      	movs	r1, #46	; 0x2e
    d96c:	60c2      	str	r2, [r0, #12]
    d96e:	461a      	mov	r2, r3
    d970:	b002      	add	sp, #8
    d972:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d976:	f7ff ba38 	b.w	cdea <d_make_comp>
    d97a:	ae01      	add	r6, sp, #4
    d97c:	4620      	mov	r0, r4
    d97e:	f7ff ffe1 	bl	d944 <d_expression>
    d982:	4602      	mov	r2, r0
    d984:	b910      	cbnz	r0, d98c <d_exprlist+0x36>
    d986:	2000      	movs	r0, #0
    d988:	b002      	add	sp, #8
    d98a:	bd70      	pop	{r4, r5, r6, pc}
    d98c:	2300      	movs	r3, #0
    d98e:	212e      	movs	r1, #46	; 0x2e
    d990:	4620      	mov	r0, r4
    d992:	f7ff fa2a 	bl	cdea <d_make_comp>
    d996:	6030      	str	r0, [r6, #0]
    d998:	2800      	cmp	r0, #0
    d99a:	d0f4      	beq.n	d986 <d_exprlist+0x30>
    d99c:	68e3      	ldr	r3, [r4, #12]
    d99e:	f100 060c 	add.w	r6, r0, #12
    d9a2:	781a      	ldrb	r2, [r3, #0]
    d9a4:	42aa      	cmp	r2, r5
    d9a6:	d1e9      	bne.n	d97c <d_exprlist+0x26>
    d9a8:	3301      	adds	r3, #1
    d9aa:	9801      	ldr	r0, [sp, #4]
    d9ac:	60e3      	str	r3, [r4, #12]
    d9ae:	e7eb      	b.n	d988 <d_exprlist+0x32>

0000d9b0 <d_type>:
    d9b0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    d9b4:	68c2      	ldr	r2, [r0, #12]
    d9b6:	4604      	mov	r4, r0
    d9b8:	4610      	mov	r0, r2
    d9ba:	f7ff fc37 	bl	d22c <next_is_type_qual.isra.0>
    d9be:	b350      	cbz	r0, da16 <d_type+0x66>
    d9c0:	2200      	movs	r2, #0
    d9c2:	a903      	add	r1, sp, #12
    d9c4:	4620      	mov	r0, r4
    d9c6:	f000 fbd9 	bl	e17c <d_cv_qualifiers>
    d9ca:	4605      	mov	r5, r0
    d9cc:	b918      	cbnz	r0, d9d6 <d_type+0x26>
    d9ce:	2000      	movs	r0, #0
    d9d0:	b004      	add	sp, #16
    d9d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d9d6:	68e3      	ldr	r3, [r4, #12]
    d9d8:	4620      	mov	r0, r4
    d9da:	781b      	ldrb	r3, [r3, #0]
    d9dc:	2b46      	cmp	r3, #70	; 0x46
    d9de:	d117      	bne.n	da10 <d_type+0x60>
    d9e0:	f000 fc88 	bl	e2f4 <d_function_type>
    d9e4:	6028      	str	r0, [r5, #0]
    d9e6:	682b      	ldr	r3, [r5, #0]
    d9e8:	2b00      	cmp	r3, #0
    d9ea:	d0f0      	beq.n	d9ce <d_type+0x1e>
    d9ec:	781a      	ldrb	r2, [r3, #0]
    d9ee:	3a1f      	subs	r2, #31
    d9f0:	2a01      	cmp	r2, #1
    d9f2:	d805      	bhi.n	da00 <d_type+0x50>
    d9f4:	9903      	ldr	r1, [sp, #12]
    d9f6:	689a      	ldr	r2, [r3, #8]
    d9f8:	6099      	str	r1, [r3, #8]
    d9fa:	682b      	ldr	r3, [r5, #0]
    d9fc:	9303      	str	r3, [sp, #12]
    d9fe:	602a      	str	r2, [r5, #0]
    da00:	9903      	ldr	r1, [sp, #12]
    da02:	4620      	mov	r0, r4
    da04:	f7ff fa64 	bl	ced0 <d_add_substitution>
    da08:	2800      	cmp	r0, #0
    da0a:	f040 80b4 	bne.w	db76 <d_type+0x1c6>
    da0e:	e7de      	b.n	d9ce <d_type+0x1e>
    da10:	f7ff ffce 	bl	d9b0 <d_type>
    da14:	e7e6      	b.n	d9e4 <d_type+0x34>
    da16:	7811      	ldrb	r1, [r2, #0]
    da18:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    da1c:	2b4a      	cmp	r3, #74	; 0x4a
    da1e:	d8d6      	bhi.n	d9ce <d_type+0x1e>
    da20:	a001      	add	r0, pc, #4	; (adr r0, da28 <d_type+0x78>)
    da22:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    da26:	bf00      	nop
    da28:	0000db9d 	.word	0x0000db9d
    da2c:	0000db9d 	.word	0x0000db9d
    da30:	0000db9d 	.word	0x0000db9d
    da34:	0000db9d 	.word	0x0000db9d
    da38:	0000db9d 	.word	0x0000db9d
    da3c:	0000db9d 	.word	0x0000db9d
    da40:	0000db9d 	.word	0x0000db9d
    da44:	0000db9d 	.word	0x0000db9d
    da48:	0000db9d 	.word	0x0000db9d
    da4c:	0000db9d 	.word	0x0000db9d
    da50:	0000d9cf 	.word	0x0000d9cf
    da54:	0000d9cf 	.word	0x0000d9cf
    da58:	0000d9cf 	.word	0x0000d9cf
    da5c:	0000d9cf 	.word	0x0000d9cf
    da60:	0000d9cf 	.word	0x0000d9cf
    da64:	0000d9cf 	.word	0x0000d9cf
    da68:	0000d9cf 	.word	0x0000d9cf
    da6c:	0000dba5 	.word	0x0000dba5
    da70:	0000d9cf 	.word	0x0000d9cf
    da74:	0000dd0b 	.word	0x0000dd0b
    da78:	0000dd67 	.word	0x0000dd67
    da7c:	0000d9cf 	.word	0x0000d9cf
    da80:	0000db93 	.word	0x0000db93
    da84:	0000dd1d 	.word	0x0000dd1d
    da88:	0000d9cf 	.word	0x0000d9cf
    da8c:	0000d9cf 	.word	0x0000d9cf
    da90:	0000d9cf 	.word	0x0000d9cf
    da94:	0000d9cf 	.word	0x0000d9cf
    da98:	0000d9cf 	.word	0x0000d9cf
    da9c:	0000dbf7 	.word	0x0000dbf7
    daa0:	0000db9d 	.word	0x0000db9d
    daa4:	0000dcd5 	.word	0x0000dcd5
    daa8:	0000dce7 	.word	0x0000dce7
    daac:	0000d9cf 	.word	0x0000d9cf
    dab0:	0000dcf9 	.word	0x0000dcf9
    dab4:	0000dc87 	.word	0x0000dc87
    dab8:	0000dc19 	.word	0x0000dc19
    dabc:	0000dd2f 	.word	0x0000dd2f
    dac0:	0000d9cf 	.word	0x0000d9cf
    dac4:	0000d9cf 	.word	0x0000d9cf
    dac8:	0000d9cf 	.word	0x0000d9cf
    dacc:	0000d9cf 	.word	0x0000d9cf
    dad0:	0000db9d 	.word	0x0000db9d
    dad4:	0000d9cf 	.word	0x0000d9cf
    dad8:	0000d9cf 	.word	0x0000d9cf
    dadc:	0000d9cf 	.word	0x0000d9cf
    dae0:	0000d9cf 	.word	0x0000d9cf
    dae4:	0000d9cf 	.word	0x0000d9cf
    dae8:	0000d9cf 	.word	0x0000d9cf
    daec:	0000db55 	.word	0x0000db55
    daf0:	0000db55 	.word	0x0000db55
    daf4:	0000db55 	.word	0x0000db55
    daf8:	0000db55 	.word	0x0000db55
    dafc:	0000db55 	.word	0x0000db55
    db00:	0000db55 	.word	0x0000db55
    db04:	0000db55 	.word	0x0000db55
    db08:	0000db55 	.word	0x0000db55
    db0c:	0000db55 	.word	0x0000db55
    db10:	0000db55 	.word	0x0000db55
    db14:	0000d9cf 	.word	0x0000d9cf
    db18:	0000db55 	.word	0x0000db55
    db1c:	0000db55 	.word	0x0000db55
    db20:	0000db55 	.word	0x0000db55
    db24:	0000db55 	.word	0x0000db55
    db28:	0000d9cf 	.word	0x0000d9cf
    db2c:	0000d9cf 	.word	0x0000d9cf
    db30:	0000d9cf 	.word	0x0000d9cf
    db34:	0000db55 	.word	0x0000db55
    db38:	0000db55 	.word	0x0000db55
    db3c:	0000db7b 	.word	0x0000db7b
    db40:	0000db55 	.word	0x0000db55
    db44:	0000db55 	.word	0x0000db55
    db48:	0000db55 	.word	0x0000db55
    db4c:	0000db55 	.word	0x0000db55
    db50:	0000db55 	.word	0x0000db55
    db54:	4bbf      	ldr	r3, [pc, #764]	; (de54 <d_type+0x4a4>)
    db56:	2214      	movs	r2, #20
    db58:	3961      	subs	r1, #97	; 0x61
    db5a:	4620      	mov	r0, r4
    db5c:	fb02 3101 	mla	r1, r2, r1, r3
    db60:	f7ff f997 	bl	ce92 <d_make_builtin_type>
    db64:	6882      	ldr	r2, [r0, #8]
    db66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    db68:	6852      	ldr	r2, [r2, #4]
    db6a:	9003      	str	r0, [sp, #12]
    db6c:	4413      	add	r3, r2
    db6e:	62e3      	str	r3, [r4, #44]	; 0x2c
    db70:	68e3      	ldr	r3, [r4, #12]
    db72:	3301      	adds	r3, #1
    db74:	60e3      	str	r3, [r4, #12]
    db76:	9803      	ldr	r0, [sp, #12]
    db78:	e72a      	b.n	d9d0 <d_type+0x20>
    db7a:	3201      	adds	r2, #1
    db7c:	4620      	mov	r0, r4
    db7e:	60e2      	str	r2, [r4, #12]
    db80:	f7ff fad3 	bl	d12a <d_source_name>
    db84:	2300      	movs	r3, #0
    db86:	4602      	mov	r2, r0
    db88:	2128      	movs	r1, #40	; 0x28
    db8a:	4620      	mov	r0, r4
    db8c:	f7ff f92d 	bl	cdea <d_make_comp>
    db90:	e002      	b.n	db98 <d_type+0x1e8>
    db92:	4620      	mov	r0, r4
    db94:	f000 fbae 	bl	e2f4 <d_function_type>
    db98:	9003      	str	r0, [sp, #12]
    db9a:	e731      	b.n	da00 <d_type+0x50>
    db9c:	4620      	mov	r0, r4
    db9e:	f000 fcdb 	bl	e558 <d_name>
    dba2:	e7f9      	b.n	db98 <d_type+0x1e8>
    dba4:	1c51      	adds	r1, r2, #1
    dba6:	60e1      	str	r1, [r4, #12]
    dba8:	7853      	ldrb	r3, [r2, #1]
    dbaa:	2b5f      	cmp	r3, #95	; 0x5f
    dbac:	d015      	beq.n	dbda <d_type+0x22a>
    dbae:	3b30      	subs	r3, #48	; 0x30
    dbb0:	2b09      	cmp	r3, #9
    dbb2:	d80e      	bhi.n	dbd2 <d_type+0x222>
    dbb4:	68e3      	ldr	r3, [r4, #12]
    dbb6:	1c5a      	adds	r2, r3, #1
    dbb8:	60e2      	str	r2, [r4, #12]
    dbba:	785b      	ldrb	r3, [r3, #1]
    dbbc:	3b30      	subs	r3, #48	; 0x30
    dbbe:	2b09      	cmp	r3, #9
    dbc0:	d9f8      	bls.n	dbb4 <d_type+0x204>
    dbc2:	1a52      	subs	r2, r2, r1
    dbc4:	4620      	mov	r0, r4
    dbc6:	f7ff f951 	bl	ce6c <d_make_name>
    dbca:	4605      	mov	r5, r0
    dbcc:	b930      	cbnz	r0, dbdc <d_type+0x22c>
    dbce:	2000      	movs	r0, #0
    dbd0:	e7e2      	b.n	db98 <d_type+0x1e8>
    dbd2:	4620      	mov	r0, r4
    dbd4:	f7ff feb6 	bl	d944 <d_expression>
    dbd8:	e7f7      	b.n	dbca <d_type+0x21a>
    dbda:	2500      	movs	r5, #0
    dbdc:	68e3      	ldr	r3, [r4, #12]
    dbde:	781a      	ldrb	r2, [r3, #0]
    dbe0:	2a5f      	cmp	r2, #95	; 0x5f
    dbe2:	d1f4      	bne.n	dbce <d_type+0x21e>
    dbe4:	3301      	adds	r3, #1
    dbe6:	4620      	mov	r0, r4
    dbe8:	60e3      	str	r3, [r4, #12]
    dbea:	f7ff fee1 	bl	d9b0 <d_type>
    dbee:	462a      	mov	r2, r5
    dbf0:	4603      	mov	r3, r0
    dbf2:	212a      	movs	r1, #42	; 0x2a
    dbf4:	e7c9      	b.n	db8a <d_type+0x1da>
    dbf6:	3201      	adds	r2, #1
    dbf8:	4620      	mov	r0, r4
    dbfa:	60e2      	str	r2, [r4, #12]
    dbfc:	f7ff fed8 	bl	d9b0 <d_type>
    dc00:	4605      	mov	r5, r0
    dc02:	2800      	cmp	r0, #0
    dc04:	d0e3      	beq.n	dbce <d_type+0x21e>
    dc06:	4620      	mov	r0, r4
    dc08:	f7ff fed2 	bl	d9b0 <d_type>
    dc0c:	4603      	mov	r3, r0
    dc0e:	2800      	cmp	r0, #0
    dc10:	d0dd      	beq.n	dbce <d_type+0x21e>
    dc12:	462a      	mov	r2, r5
    dc14:	212b      	movs	r1, #43	; 0x2b
    dc16:	e7b8      	b.n	db8a <d_type+0x1da>
    dc18:	4620      	mov	r0, r4
    dc1a:	f7ff fa6f 	bl	d0fc <d_template_param>
    dc1e:	68e5      	ldr	r5, [r4, #12]
    dc20:	9003      	str	r0, [sp, #12]
    dc22:	4601      	mov	r1, r0
    dc24:	782b      	ldrb	r3, [r5, #0]
    dc26:	2b49      	cmp	r3, #73	; 0x49
    dc28:	f47f aeea 	bne.w	da00 <d_type+0x50>
    dc2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    dc2e:	b973      	cbnz	r3, dc4e <d_type+0x29e>
    dc30:	4620      	mov	r0, r4
    dc32:	f7ff f94d 	bl	ced0 <d_add_substitution>
    dc36:	2800      	cmp	r0, #0
    dc38:	f43f aec9 	beq.w	d9ce <d_type+0x1e>
    dc3c:	9a03      	ldr	r2, [sp, #12]
    dc3e:	4620      	mov	r0, r4
    dc40:	9201      	str	r2, [sp, #4]
    dc42:	f000 f9ec 	bl	e01e <d_template_args>
    dc46:	9a01      	ldr	r2, [sp, #4]
    dc48:	4603      	mov	r3, r0
    dc4a:	2104      	movs	r1, #4
    dc4c:	e79d      	b.n	db8a <d_type+0x1da>
    dc4e:	4620      	mov	r0, r4
    dc50:	f8d4 8014 	ldr.w	r8, [r4, #20]
    dc54:	6a27      	ldr	r7, [r4, #32]
    dc56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    dc58:	f000 f9e1 	bl	e01e <d_template_args>
    dc5c:	68e2      	ldr	r2, [r4, #12]
    dc5e:	7812      	ldrb	r2, [r2, #0]
    dc60:	2a49      	cmp	r2, #73	; 0x49
    dc62:	d10a      	bne.n	dc7a <d_type+0x2ca>
    dc64:	9001      	str	r0, [sp, #4]
    dc66:	4620      	mov	r0, r4
    dc68:	9903      	ldr	r1, [sp, #12]
    dc6a:	f7ff f931 	bl	ced0 <d_add_substitution>
    dc6e:	9b01      	ldr	r3, [sp, #4]
    dc70:	2800      	cmp	r0, #0
    dc72:	f43f aead 	beq.w	d9d0 <d_type+0x20>
    dc76:	9a03      	ldr	r2, [sp, #12]
    dc78:	e7e7      	b.n	dc4a <d_type+0x29a>
    dc7a:	60e5      	str	r5, [r4, #12]
    dc7c:	f8c4 8014 	str.w	r8, [r4, #20]
    dc80:	6227      	str	r7, [r4, #32]
    dc82:	62e6      	str	r6, [r4, #44]	; 0x2c
    dc84:	e6bc      	b.n	da00 <d_type+0x50>
    dc86:	7853      	ldrb	r3, [r2, #1]
    dc88:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    dc8c:	2a09      	cmp	r2, #9
    dc8e:	d904      	bls.n	dc9a <d_type+0x2ea>
    dc90:	2b5f      	cmp	r3, #95	; 0x5f
    dc92:	d002      	beq.n	dc9a <d_type+0x2ea>
    dc94:	3b41      	subs	r3, #65	; 0x41
    dc96:	2b19      	cmp	r3, #25
    dc98:	d810      	bhi.n	dcbc <d_type+0x30c>
    dc9a:	2100      	movs	r1, #0
    dc9c:	4620      	mov	r0, r4
    dc9e:	f7ff fbbd 	bl	d41c <d_substitution>
    dca2:	68e3      	ldr	r3, [r4, #12]
    dca4:	9003      	str	r0, [sp, #12]
    dca6:	4605      	mov	r5, r0
    dca8:	781b      	ldrb	r3, [r3, #0]
    dcaa:	2b49      	cmp	r3, #73	; 0x49
    dcac:	f47f af63 	bne.w	db76 <d_type+0x1c6>
    dcb0:	4620      	mov	r0, r4
    dcb2:	f000 f9b4 	bl	e01e <d_template_args>
    dcb6:	462a      	mov	r2, r5
    dcb8:	4603      	mov	r3, r0
    dcba:	e7c6      	b.n	dc4a <d_type+0x29a>
    dcbc:	4620      	mov	r0, r4
    dcbe:	f000 fc4b 	bl	e558 <d_name>
    dcc2:	9003      	str	r0, [sp, #12]
    dcc4:	2800      	cmp	r0, #0
    dcc6:	f43f ae9b 	beq.w	da00 <d_type+0x50>
    dcca:	7803      	ldrb	r3, [r0, #0]
    dccc:	2b18      	cmp	r3, #24
    dcce:	f47f ae97 	bne.w	da00 <d_type+0x50>
    dcd2:	e750      	b.n	db76 <d_type+0x1c6>
    dcd4:	3201      	adds	r2, #1
    dcd6:	4620      	mov	r0, r4
    dcd8:	60e2      	str	r2, [r4, #12]
    dcda:	f7ff fe69 	bl	d9b0 <d_type>
    dcde:	2300      	movs	r3, #0
    dce0:	4602      	mov	r2, r0
    dce2:	2124      	movs	r1, #36	; 0x24
    dce4:	e751      	b.n	db8a <d_type+0x1da>
    dce6:	3201      	adds	r2, #1
    dce8:	4620      	mov	r0, r4
    dcea:	60e2      	str	r2, [r4, #12]
    dcec:	f7ff fe60 	bl	d9b0 <d_type>
    dcf0:	2300      	movs	r3, #0
    dcf2:	4602      	mov	r2, r0
    dcf4:	2122      	movs	r1, #34	; 0x22
    dcf6:	e748      	b.n	db8a <d_type+0x1da>
    dcf8:	3201      	adds	r2, #1
    dcfa:	4620      	mov	r0, r4
    dcfc:	60e2      	str	r2, [r4, #12]
    dcfe:	f7ff fe57 	bl	d9b0 <d_type>
    dd02:	2300      	movs	r3, #0
    dd04:	4602      	mov	r2, r0
    dd06:	2123      	movs	r1, #35	; 0x23
    dd08:	e73f      	b.n	db8a <d_type+0x1da>
    dd0a:	3201      	adds	r2, #1
    dd0c:	4620      	mov	r0, r4
    dd0e:	60e2      	str	r2, [r4, #12]
    dd10:	f7ff fe4e 	bl	d9b0 <d_type>
    dd14:	2300      	movs	r3, #0
    dd16:	4602      	mov	r2, r0
    dd18:	2125      	movs	r1, #37	; 0x25
    dd1a:	e736      	b.n	db8a <d_type+0x1da>
    dd1c:	3201      	adds	r2, #1
    dd1e:	4620      	mov	r0, r4
    dd20:	60e2      	str	r2, [r4, #12]
    dd22:	f7ff fe45 	bl	d9b0 <d_type>
    dd26:	2300      	movs	r3, #0
    dd28:	4602      	mov	r2, r0
    dd2a:	2126      	movs	r1, #38	; 0x26
    dd2c:	e72d      	b.n	db8a <d_type+0x1da>
    dd2e:	3201      	adds	r2, #1
    dd30:	4620      	mov	r0, r4
    dd32:	60e2      	str	r2, [r4, #12]
    dd34:	f7ff f9f9 	bl	d12a <d_source_name>
    dd38:	68e3      	ldr	r3, [r4, #12]
    dd3a:	9003      	str	r0, [sp, #12]
    dd3c:	4605      	mov	r5, r0
    dd3e:	781b      	ldrb	r3, [r3, #0]
    dd40:	2b49      	cmp	r3, #73	; 0x49
    dd42:	d109      	bne.n	dd58 <d_type+0x3a8>
    dd44:	4620      	mov	r0, r4
    dd46:	f000 f96a 	bl	e01e <d_template_args>
    dd4a:	462a      	mov	r2, r5
    dd4c:	4603      	mov	r3, r0
    dd4e:	2104      	movs	r1, #4
    dd50:	4620      	mov	r0, r4
    dd52:	f7ff f84a 	bl	cdea <d_make_comp>
    dd56:	9003      	str	r0, [sp, #12]
    dd58:	4620      	mov	r0, r4
    dd5a:	f7ff fe29 	bl	d9b0 <d_type>
    dd5e:	9b03      	ldr	r3, [sp, #12]
    dd60:	4602      	mov	r2, r0
    dd62:	2121      	movs	r1, #33	; 0x21
    dd64:	e711      	b.n	db8a <d_type+0x1da>
    dd66:	1c53      	adds	r3, r2, #1
    dd68:	60e3      	str	r3, [r4, #12]
    dd6a:	7853      	ldrb	r3, [r2, #1]
    dd6c:	2b00      	cmp	r3, #0
    dd6e:	f43f ae2e 	beq.w	d9ce <d_type+0x1e>
    dd72:	1c93      	adds	r3, r2, #2
    dd74:	60e3      	str	r3, [r4, #12]
    dd76:	7853      	ldrb	r3, [r2, #1]
    dd78:	2b46      	cmp	r3, #70	; 0x46
    dd7a:	f000 8095 	beq.w	dea8 <d_type+0x4f8>
    dd7e:	3b54      	subs	r3, #84	; 0x54
    dd80:	b2d9      	uxtb	r1, r3
    dd82:	2922      	cmp	r1, #34	; 0x22
    dd84:	f63f ae23 	bhi.w	d9ce <d_type+0x1e>
    dd88:	2b22      	cmp	r3, #34	; 0x22
    dd8a:	f63f ae20 	bhi.w	d9ce <d_type+0x1e>
    dd8e:	a101      	add	r1, pc, #4	; (adr r1, dd94 <d_type+0x3e4>)
    dd90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    dd94:	0000de21 	.word	0x0000de21
    dd98:	0000d9cf 	.word	0x0000d9cf
    dd9c:	0000d9cf 	.word	0x0000d9cf
    dda0:	0000d9cf 	.word	0x0000d9cf
    dda4:	0000d9cf 	.word	0x0000d9cf
    dda8:	0000d9cf 	.word	0x0000d9cf
    ddac:	0000d9cf 	.word	0x0000d9cf
    ddb0:	0000d9cf 	.word	0x0000d9cf
    ddb4:	0000d9cf 	.word	0x0000d9cf
    ddb8:	0000d9cf 	.word	0x0000d9cf
    ddbc:	0000d9cf 	.word	0x0000d9cf
    ddc0:	0000d9cf 	.word	0x0000d9cf
    ddc4:	0000d9cf 	.word	0x0000d9cf
    ddc8:	0000de67 	.word	0x0000de67
    ddcc:	0000d9cf 	.word	0x0000d9cf
    ddd0:	0000de75 	.word	0x0000de75
    ddd4:	0000de91 	.word	0x0000de91
    ddd8:	0000de95 	.word	0x0000de95
    dddc:	0000de7b 	.word	0x0000de7b
    dde0:	0000d9cf 	.word	0x0000d9cf
    dde4:	0000de99 	.word	0x0000de99
    dde8:	0000dea5 	.word	0x0000dea5
    ddec:	0000d9cf 	.word	0x0000d9cf
    ddf0:	0000d9cf 	.word	0x0000d9cf
    ddf4:	0000d9cf 	.word	0x0000d9cf
    ddf8:	0000d9cf 	.word	0x0000d9cf
    ddfc:	0000df4b 	.word	0x0000df4b
    de00:	0000d9cf 	.word	0x0000d9cf
    de04:	0000de59 	.word	0x0000de59
    de08:	0000d9cf 	.word	0x0000d9cf
    de0c:	0000d9cf 	.word	0x0000d9cf
    de10:	0000dea1 	.word	0x0000dea1
    de14:	0000de21 	.word	0x0000de21
    de18:	0000de9d 	.word	0x0000de9d
    de1c:	0000df07 	.word	0x0000df07
    de20:	4620      	mov	r0, r4
    de22:	f7ff fd8f 	bl	d944 <d_expression>
    de26:	2300      	movs	r3, #0
    de28:	4602      	mov	r2, r0
    de2a:	2143      	movs	r1, #67	; 0x43
    de2c:	4620      	mov	r0, r4
    de2e:	f7fe ffdc 	bl	cdea <d_make_comp>
    de32:	9003      	str	r0, [sp, #12]
    de34:	2800      	cmp	r0, #0
    de36:	f43f ade3 	beq.w	da00 <d_type+0x50>
    de3a:	68e3      	ldr	r3, [r4, #12]
    de3c:	781a      	ldrb	r2, [r3, #0]
    de3e:	b912      	cbnz	r2, de46 <d_type+0x496>
    de40:	2300      	movs	r3, #0
    de42:	9303      	str	r3, [sp, #12]
    de44:	e5dc      	b.n	da00 <d_type+0x50>
    de46:	1c5a      	adds	r2, r3, #1
    de48:	60e2      	str	r2, [r4, #12]
    de4a:	781b      	ldrb	r3, [r3, #0]
    de4c:	2b45      	cmp	r3, #69	; 0x45
    de4e:	d1f7      	bne.n	de40 <d_type+0x490>
    de50:	e5d6      	b.n	da00 <d_type+0x50>
    de52:	bf00      	nop
    de54:	00031d10 	.word	0x00031d10
    de58:	4620      	mov	r0, r4
    de5a:	f7ff fda9 	bl	d9b0 <d_type>
    de5e:	2300      	movs	r3, #0
    de60:	4602      	mov	r2, r0
    de62:	214b      	movs	r1, #75	; 0x4b
    de64:	e691      	b.n	db8a <d_type+0x1da>
    de66:	2204      	movs	r2, #4
    de68:	4939      	ldr	r1, [pc, #228]	; (df50 <d_type+0x5a0>)
    de6a:	4620      	mov	r0, r4
    de6c:	f7fe fffe 	bl	ce6c <d_make_name>
    de70:	9003      	str	r0, [sp, #12]
    de72:	e680      	b.n	db76 <d_type+0x1c6>
    de74:	220e      	movs	r2, #14
    de76:	4937      	ldr	r1, [pc, #220]	; (df54 <d_type+0x5a4>)
    de78:	e7f7      	b.n	de6a <d_type+0x4ba>
    de7a:	4937      	ldr	r1, [pc, #220]	; (df58 <d_type+0x5a8>)
    de7c:	4620      	mov	r0, r4
    de7e:	f7ff f808 	bl	ce92 <d_make_builtin_type>
    de82:	9003      	str	r0, [sp, #12]
    de84:	6882      	ldr	r2, [r0, #8]
    de86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    de88:	6852      	ldr	r2, [r2, #4]
    de8a:	4413      	add	r3, r2
    de8c:	62e3      	str	r3, [r4, #44]	; 0x2c
    de8e:	e672      	b.n	db76 <d_type+0x1c6>
    de90:	4932      	ldr	r1, [pc, #200]	; (df5c <d_type+0x5ac>)
    de92:	e7f3      	b.n	de7c <d_type+0x4cc>
    de94:	4932      	ldr	r1, [pc, #200]	; (df60 <d_type+0x5b0>)
    de96:	e7f1      	b.n	de7c <d_type+0x4cc>
    de98:	4932      	ldr	r1, [pc, #200]	; (df64 <d_type+0x5b4>)
    de9a:	e7ef      	b.n	de7c <d_type+0x4cc>
    de9c:	4932      	ldr	r1, [pc, #200]	; (df68 <d_type+0x5b8>)
    de9e:	e7ed      	b.n	de7c <d_type+0x4cc>
    dea0:	4932      	ldr	r1, [pc, #200]	; (df6c <d_type+0x5bc>)
    dea2:	e7eb      	b.n	de7c <d_type+0x4cc>
    dea4:	4932      	ldr	r1, [pc, #200]	; (df70 <d_type+0x5c0>)
    dea6:	e7e9      	b.n	de7c <d_type+0x4cc>
    dea8:	4620      	mov	r0, r4
    deaa:	f7fe ff8f 	bl	cdcc <d_make_empty>
    deae:	232c      	movs	r3, #44	; 0x2c
    deb0:	9003      	str	r0, [sp, #12]
    deb2:	7003      	strb	r3, [r0, #0]
    deb4:	68e3      	ldr	r3, [r4, #12]
    deb6:	781b      	ldrb	r3, [r3, #0]
    deb8:	3b30      	subs	r3, #48	; 0x30
    deba:	b2db      	uxtb	r3, r3
    debc:	2b09      	cmp	r3, #9
    debe:	bf94      	ite	ls
    dec0:	2301      	movls	r3, #1
    dec2:	2300      	movhi	r3, #0
    dec4:	8183      	strh	r3, [r0, #12]
    dec6:	d803      	bhi.n	ded0 <d_type+0x520>
    dec8:	f104 000c 	add.w	r0, r4, #12
    decc:	f7ff f8c4 	bl	d058 <d_number.isra.0>
    ded0:	4620      	mov	r0, r4
    ded2:	9d03      	ldr	r5, [sp, #12]
    ded4:	f7ff fd6c 	bl	d9b0 <d_type>
    ded8:	9b03      	ldr	r3, [sp, #12]
    deda:	60a8      	str	r0, [r5, #8]
    dedc:	689b      	ldr	r3, [r3, #8]
    dede:	2b00      	cmp	r3, #0
    dee0:	f43f ad75 	beq.w	d9ce <d_type+0x1e>
    dee4:	f104 000c 	add.w	r0, r4, #12
    dee8:	f7ff f8b6 	bl	d058 <d_number.isra.0>
    deec:	68e2      	ldr	r2, [r4, #12]
    deee:	7813      	ldrb	r3, [r2, #0]
    def0:	b113      	cbz	r3, def8 <d_type+0x548>
    def2:	1c53      	adds	r3, r2, #1
    def4:	60e3      	str	r3, [r4, #12]
    def6:	7813      	ldrb	r3, [r2, #0]
    def8:	f1a3 0273 	sub.w	r2, r3, #115	; 0x73
    defc:	4253      	negs	r3, r2
    defe:	4153      	adcs	r3, r2
    df00:	9a03      	ldr	r2, [sp, #12]
    df02:	81d3      	strh	r3, [r2, #14]
    df04:	e637      	b.n	db76 <d_type+0x1c6>
    df06:	7893      	ldrb	r3, [r2, #2]
    df08:	2b5f      	cmp	r3, #95	; 0x5f
    df0a:	d118      	bne.n	df3e <d_type+0x58e>
    df0c:	3203      	adds	r2, #3
    df0e:	4620      	mov	r0, r4
    df10:	60e2      	str	r2, [r4, #12]
    df12:	f7ff fd17 	bl	d944 <d_expression>
    df16:	4605      	mov	r5, r0
    df18:	b178      	cbz	r0, df3a <d_type+0x58a>
    df1a:	68e3      	ldr	r3, [r4, #12]
    df1c:	781a      	ldrb	r2, [r3, #0]
    df1e:	2a5f      	cmp	r2, #95	; 0x5f
    df20:	d111      	bne.n	df46 <d_type+0x596>
    df22:	3301      	adds	r3, #1
    df24:	4620      	mov	r0, r4
    df26:	60e3      	str	r3, [r4, #12]
    df28:	f7ff fd42 	bl	d9b0 <d_type>
    df2c:	462a      	mov	r2, r5
    df2e:	4603      	mov	r3, r0
    df30:	212d      	movs	r1, #45	; 0x2d
    df32:	4620      	mov	r0, r4
    df34:	f7fe ff59 	bl	cdea <d_make_comp>
    df38:	4605      	mov	r5, r0
    df3a:	9503      	str	r5, [sp, #12]
    df3c:	e560      	b.n	da00 <d_type+0x50>
    df3e:	4620      	mov	r0, r4
    df40:	f7ff f8b4 	bl	d0ac <d_number_component>
    df44:	e7e7      	b.n	df16 <d_type+0x566>
    df46:	2500      	movs	r5, #0
    df48:	e7f7      	b.n	df3a <d_type+0x58a>
    df4a:	490a      	ldr	r1, [pc, #40]	; (df74 <d_type+0x5c4>)
    df4c:	e796      	b.n	de7c <d_type+0x4cc>
    df4e:	bf00      	nop
    df50:	00036f0d 	.word	0x00036f0d
    df54:	00036f12 	.word	0x00036f12
    df58:	00031f18 	.word	0x00031f18
    df5c:	00031f2c 	.word	0x00031f2c
    df60:	00031f40 	.word	0x00031f40
    df64:	00031f54 	.word	0x00031f54
    df68:	00031f68 	.word	0x00031f68
    df6c:	00031f7c 	.word	0x00031f7c
    df70:	00031f90 	.word	0x00031f90
    df74:	00031fa4 	.word	0x00031fa4

0000df78 <d_template_arg>:
    df78:	68c2      	ldr	r2, [r0, #12]
    df7a:	b510      	push	{r4, lr}
    df7c:	7813      	ldrb	r3, [r2, #0]
    df7e:	4604      	mov	r4, r0
    df80:	2b4c      	cmp	r3, #76	; 0x4c
    df82:	d014      	beq.n	dfae <d_template_arg+0x36>
    df84:	d806      	bhi.n	df94 <d_template_arg+0x1c>
    df86:	3b49      	subs	r3, #73	; 0x49
    df88:	2b01      	cmp	r3, #1
    df8a:	d914      	bls.n	dfb6 <d_template_arg+0x3e>
    df8c:	4620      	mov	r0, r4
    df8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    df92:	e50d      	b.n	d9b0 <d_type>
    df94:	2b58      	cmp	r3, #88	; 0x58
    df96:	d1f9      	bne.n	df8c <d_template_arg+0x14>
    df98:	3201      	adds	r2, #1
    df9a:	60c2      	str	r2, [r0, #12]
    df9c:	f7ff fcd2 	bl	d944 <d_expression>
    dfa0:	68e3      	ldr	r3, [r4, #12]
    dfa2:	781a      	ldrb	r2, [r3, #0]
    dfa4:	2a45      	cmp	r2, #69	; 0x45
    dfa6:	d109      	bne.n	dfbc <d_template_arg+0x44>
    dfa8:	3301      	adds	r3, #1
    dfaa:	60e3      	str	r3, [r4, #12]
    dfac:	bd10      	pop	{r4, pc}
    dfae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dfb2:	f7ff bac1 	b.w	d538 <d_expr_primary>
    dfb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dfba:	e030      	b.n	e01e <d_template_args>
    dfbc:	2000      	movs	r0, #0
    dfbe:	e7f5      	b.n	dfac <d_template_arg+0x34>

0000dfc0 <d_template_args_1>:
    dfc0:	68c3      	ldr	r3, [r0, #12]
    dfc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    dfc4:	781a      	ldrb	r2, [r3, #0]
    dfc6:	4604      	mov	r4, r0
    dfc8:	6a85      	ldr	r5, [r0, #40]	; 0x28
    dfca:	2a45      	cmp	r2, #69	; 0x45
    dfcc:	d109      	bne.n	dfe2 <d_template_args_1+0x22>
    dfce:	3301      	adds	r3, #1
    dfd0:	212f      	movs	r1, #47	; 0x2f
    dfd2:	60c3      	str	r3, [r0, #12]
    dfd4:	2300      	movs	r3, #0
    dfd6:	461a      	mov	r2, r3
    dfd8:	b002      	add	sp, #8
    dfda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dfde:	f7fe bf04 	b.w	cdea <d_make_comp>
    dfe2:	2300      	movs	r3, #0
    dfe4:	ae01      	add	r6, sp, #4
    dfe6:	9301      	str	r3, [sp, #4]
    dfe8:	4620      	mov	r0, r4
    dfea:	f7ff ffc5 	bl	df78 <d_template_arg>
    dfee:	4602      	mov	r2, r0
    dff0:	b910      	cbnz	r0, dff8 <d_template_args_1+0x38>
    dff2:	2000      	movs	r0, #0
    dff4:	b002      	add	sp, #8
    dff6:	bd70      	pop	{r4, r5, r6, pc}
    dff8:	2300      	movs	r3, #0
    dffa:	212f      	movs	r1, #47	; 0x2f
    dffc:	4620      	mov	r0, r4
    dffe:	f7fe fef4 	bl	cdea <d_make_comp>
    e002:	6030      	str	r0, [r6, #0]
    e004:	2800      	cmp	r0, #0
    e006:	d0f4      	beq.n	dff2 <d_template_args_1+0x32>
    e008:	68e3      	ldr	r3, [r4, #12]
    e00a:	f100 060c 	add.w	r6, r0, #12
    e00e:	781a      	ldrb	r2, [r3, #0]
    e010:	2a45      	cmp	r2, #69	; 0x45
    e012:	d1e9      	bne.n	dfe8 <d_template_args_1+0x28>
    e014:	3301      	adds	r3, #1
    e016:	9801      	ldr	r0, [sp, #4]
    e018:	62a5      	str	r5, [r4, #40]	; 0x28
    e01a:	60e3      	str	r3, [r4, #12]
    e01c:	e7ea      	b.n	dff4 <d_template_args_1+0x34>

0000e01e <d_template_args>:
    e01e:	68c2      	ldr	r2, [r0, #12]
    e020:	7811      	ldrb	r1, [r2, #0]
    e022:	3949      	subs	r1, #73	; 0x49
    e024:	2901      	cmp	r1, #1
    e026:	d802      	bhi.n	e02e <d_template_args+0x10>
    e028:	3201      	adds	r2, #1
    e02a:	60c2      	str	r2, [r0, #12]
    e02c:	e7c8      	b.n	dfc0 <d_template_args_1>
    e02e:	2000      	movs	r0, #0
    e030:	4770      	bx	lr

0000e032 <d_operator_name>:
    e032:	68c3      	ldr	r3, [r0, #12]
    e034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e038:	781a      	ldrb	r2, [r3, #0]
    e03a:	4604      	mov	r4, r0
    e03c:	b112      	cbz	r2, e044 <d_operator_name+0x12>
    e03e:	1c5a      	adds	r2, r3, #1
    e040:	60c2      	str	r2, [r0, #12]
    e042:	781a      	ldrb	r2, [r3, #0]
    e044:	68e3      	ldr	r3, [r4, #12]
    e046:	7819      	ldrb	r1, [r3, #0]
    e048:	2900      	cmp	r1, #0
    e04a:	d035      	beq.n	e0b8 <d_operator_name+0x86>
    e04c:	1c59      	adds	r1, r3, #1
    e04e:	2a76      	cmp	r2, #118	; 0x76
    e050:	60e1      	str	r1, [r4, #12]
    e052:	7819      	ldrb	r1, [r3, #0]
    e054:	d117      	bne.n	e086 <d_operator_name+0x54>
    e056:	f1a1 0630 	sub.w	r6, r1, #48	; 0x30
    e05a:	b2f3      	uxtb	r3, r6
    e05c:	2b09      	cmp	r3, #9
    e05e:	d82b      	bhi.n	e0b8 <d_operator_name+0x86>
    e060:	4620      	mov	r0, r4
    e062:	f7ff f862 	bl	d12a <d_source_name>
    e066:	4605      	mov	r5, r0
    e068:	4620      	mov	r0, r4
    e06a:	f7fe feaf 	bl	cdcc <d_make_empty>
    e06e:	2800      	cmp	r0, #0
    e070:	d046      	beq.n	e100 <d_operator_name+0xce>
    e072:	2d00      	cmp	r5, #0
    e074:	d044      	beq.n	e100 <d_operator_name+0xce>
    e076:	2300      	movs	r3, #0
    e078:	6043      	str	r3, [r0, #4]
    e07a:	2333      	movs	r3, #51	; 0x33
    e07c:	e9c0 6502 	strd	r6, r5, [r0, #8]
    e080:	7003      	strb	r3, [r0, #0]
    e082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e086:	2a63      	cmp	r2, #99	; 0x63
    e088:	d116      	bne.n	e0b8 <d_operator_name+0x86>
    e08a:	2976      	cmp	r1, #118	; 0x76
    e08c:	d114      	bne.n	e0b8 <d_operator_name+0x86>
    e08e:	4620      	mov	r0, r4
    e090:	e9d4 350c 	ldrd	r3, r5, [r4, #48]	; 0x30
    e094:	fab3 f383 	clz	r3, r3
    e098:	095b      	lsrs	r3, r3, #5
    e09a:	6363      	str	r3, [r4, #52]	; 0x34
    e09c:	f7ff fc88 	bl	d9b0 <d_type>
    e0a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e0a2:	4602      	mov	r2, r0
    e0a4:	b133      	cbz	r3, e0b4 <d_operator_name+0x82>
    e0a6:	2300      	movs	r3, #0
    e0a8:	2135      	movs	r1, #53	; 0x35
    e0aa:	4620      	mov	r0, r4
    e0ac:	f7fe fe9d 	bl	cdea <d_make_comp>
    e0b0:	6365      	str	r5, [r4, #52]	; 0x34
    e0b2:	e7e6      	b.n	e082 <d_operator_name+0x50>
    e0b4:	2134      	movs	r1, #52	; 0x34
    e0b6:	e7f8      	b.n	e0aa <d_operator_name+0x78>
    e0b8:	2543      	movs	r5, #67	; 0x43
    e0ba:	2000      	movs	r0, #0
    e0bc:	4e11      	ldr	r6, [pc, #68]	; (e104 <d_operator_name+0xd2>)
    e0be:	1a2b      	subs	r3, r5, r0
    e0c0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    e0c4:	eb00 0363 	add.w	r3, r0, r3, asr #1
    e0c8:	011f      	lsls	r7, r3, #4
    e0ca:	eb06 1803 	add.w	r8, r6, r3, lsl #4
    e0ce:	59f7      	ldr	r7, [r6, r7]
    e0d0:	f897 c000 	ldrb.w	ip, [r7]
    e0d4:	4594      	cmp	ip, r2
    e0d6:	d10e      	bne.n	e0f6 <d_operator_name+0xc4>
    e0d8:	787f      	ldrb	r7, [r7, #1]
    e0da:	428f      	cmp	r7, r1
    e0dc:	d10b      	bne.n	e0f6 <d_operator_name+0xc4>
    e0de:	4620      	mov	r0, r4
    e0e0:	f7fe fe74 	bl	cdcc <d_make_empty>
    e0e4:	2800      	cmp	r0, #0
    e0e6:	d0cc      	beq.n	e082 <d_operator_name+0x50>
    e0e8:	2332      	movs	r3, #50	; 0x32
    e0ea:	f8c0 8008 	str.w	r8, [r0, #8]
    e0ee:	7003      	strb	r3, [r0, #0]
    e0f0:	e7c7      	b.n	e082 <d_operator_name+0x50>
    e0f2:	461d      	mov	r5, r3
    e0f4:	e7e3      	b.n	e0be <d_operator_name+0x8c>
    e0f6:	bf9c      	itt	ls
    e0f8:	1c58      	addls	r0, r3, #1
    e0fa:	462b      	movls	r3, r5
    e0fc:	4298      	cmp	r0, r3
    e0fe:	d1f8      	bne.n	e0f2 <d_operator_name+0xc0>
    e100:	2000      	movs	r0, #0
    e102:	e7be      	b.n	e082 <d_operator_name+0x50>
    e104:	00031fb8 	.word	0x00031fb8

0000e108 <d_parmlist>:
    e108:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e10a:	2300      	movs	r3, #0
    e10c:	4604      	mov	r4, r0
    e10e:	ad01      	add	r5, sp, #4
    e110:	9301      	str	r3, [sp, #4]
    e112:	68e2      	ldr	r2, [r4, #12]
    e114:	7813      	ldrb	r3, [r2, #0]
    e116:	b1eb      	cbz	r3, e154 <d_parmlist+0x4c>
    e118:	2b45      	cmp	r3, #69	; 0x45
    e11a:	d01b      	beq.n	e154 <d_parmlist+0x4c>
    e11c:	2b2e      	cmp	r3, #46	; 0x2e
    e11e:	d019      	beq.n	e154 <d_parmlist+0x4c>
    e120:	2b52      	cmp	r3, #82	; 0x52
    e122:	d001      	beq.n	e128 <d_parmlist+0x20>
    e124:	2b4f      	cmp	r3, #79	; 0x4f
    e126:	d102      	bne.n	e12e <d_parmlist+0x26>
    e128:	7853      	ldrb	r3, [r2, #1]
    e12a:	2b45      	cmp	r3, #69	; 0x45
    e12c:	d012      	beq.n	e154 <d_parmlist+0x4c>
    e12e:	4620      	mov	r0, r4
    e130:	f7ff fc3e 	bl	d9b0 <d_type>
    e134:	4602      	mov	r2, r0
    e136:	b910      	cbnz	r0, e13e <d_parmlist+0x36>
    e138:	2000      	movs	r0, #0
    e13a:	b003      	add	sp, #12
    e13c:	bd30      	pop	{r4, r5, pc}
    e13e:	2300      	movs	r3, #0
    e140:	212e      	movs	r1, #46	; 0x2e
    e142:	4620      	mov	r0, r4
    e144:	f7fe fe51 	bl	cdea <d_make_comp>
    e148:	6028      	str	r0, [r5, #0]
    e14a:	2800      	cmp	r0, #0
    e14c:	d0f4      	beq.n	e138 <d_parmlist+0x30>
    e14e:	f100 050c 	add.w	r5, r0, #12
    e152:	e7de      	b.n	e112 <d_parmlist+0xa>
    e154:	9801      	ldr	r0, [sp, #4]
    e156:	2800      	cmp	r0, #0
    e158:	d0ee      	beq.n	e138 <d_parmlist+0x30>
    e15a:	68c2      	ldr	r2, [r0, #12]
    e15c:	2a00      	cmp	r2, #0
    e15e:	d1ec      	bne.n	e13a <d_parmlist+0x32>
    e160:	6883      	ldr	r3, [r0, #8]
    e162:	7819      	ldrb	r1, [r3, #0]
    e164:	2927      	cmp	r1, #39	; 0x27
    e166:	d1e8      	bne.n	e13a <d_parmlist+0x32>
    e168:	6899      	ldr	r1, [r3, #8]
    e16a:	7c0b      	ldrb	r3, [r1, #16]
    e16c:	2b09      	cmp	r3, #9
    e16e:	d1e4      	bne.n	e13a <d_parmlist+0x32>
    e170:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    e172:	6849      	ldr	r1, [r1, #4]
    e174:	1a5b      	subs	r3, r3, r1
    e176:	62e3      	str	r3, [r4, #44]	; 0x2c
    e178:	6082      	str	r2, [r0, #8]
    e17a:	e7de      	b.n	e13a <d_parmlist+0x32>

0000e17c <d_cv_qualifiers>:
    e17c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e180:	1e17      	subs	r7, r2, #0
    e182:	460d      	mov	r5, r1
    e184:	68c3      	ldr	r3, [r0, #12]
    e186:	4604      	mov	r4, r0
    e188:	bf14      	ite	ne
    e18a:	f04f 0a1e 	movne.w	sl, #30
    e18e:	f04f 0a1b 	moveq.w	sl, #27
    e192:	7819      	ldrb	r1, [r3, #0]
    e194:	bf15      	itete	ne
    e196:	f04f 091d 	movne.w	r9, #29
    e19a:	f04f 091a 	moveq.w	r9, #26
    e19e:	f04f 081c 	movne.w	r8, #28
    e1a2:	f04f 0819 	moveq.w	r8, #25
    e1a6:	462e      	mov	r6, r5
    e1a8:	68e2      	ldr	r2, [r4, #12]
    e1aa:	4610      	mov	r0, r2
    e1ac:	f7ff f83e 	bl	d22c <next_is_type_qual.isra.0>
    e1b0:	b9a0      	cbnz	r0, e1dc <d_cv_qualifiers+0x60>
    e1b2:	2f00      	cmp	r7, #0
    e1b4:	d139      	bne.n	e22a <d_cv_qualifiers+0xae>
    e1b6:	2946      	cmp	r1, #70	; 0x46
    e1b8:	d137      	bne.n	e22a <d_cv_qualifiers+0xae>
    e1ba:	201d      	movs	r0, #29
    e1bc:	241e      	movs	r4, #30
    e1be:	271c      	movs	r7, #28
    e1c0:	42ae      	cmp	r6, r5
    e1c2:	d032      	beq.n	e22a <d_cv_qualifiers+0xae>
    e1c4:	682b      	ldr	r3, [r5, #0]
    e1c6:	781a      	ldrb	r2, [r3, #0]
    e1c8:	2a1a      	cmp	r2, #26
    e1ca:	d070      	beq.n	e2ae <d_cv_qualifiers+0x132>
    e1cc:	2a1b      	cmp	r2, #27
    e1ce:	d070      	beq.n	e2b2 <d_cv_qualifiers+0x136>
    e1d0:	2a19      	cmp	r2, #25
    e1d2:	d100      	bne.n	e1d6 <d_cv_qualifiers+0x5a>
    e1d4:	701f      	strb	r7, [r3, #0]
    e1d6:	682d      	ldr	r5, [r5, #0]
    e1d8:	3508      	adds	r5, #8
    e1da:	e7f1      	b.n	e1c0 <d_cv_qualifiers+0x44>
    e1dc:	1c53      	adds	r3, r2, #1
    e1de:	2972      	cmp	r1, #114	; 0x72
    e1e0:	60e3      	str	r3, [r4, #12]
    e1e2:	d111      	bne.n	e208 <d_cv_qualifiers+0x8c>
    e1e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    e1e6:	46c3      	mov	fp, r8
    e1e8:	3309      	adds	r3, #9
    e1ea:	62e3      	str	r3, [r4, #44]	; 0x2c
    e1ec:	2000      	movs	r0, #0
    e1ee:	4603      	mov	r3, r0
    e1f0:	2200      	movs	r2, #0
    e1f2:	4659      	mov	r1, fp
    e1f4:	4620      	mov	r0, r4
    e1f6:	f7fe fdf8 	bl	cdea <d_make_comp>
    e1fa:	6030      	str	r0, [r6, #0]
    e1fc:	b1a0      	cbz	r0, e228 <d_cv_qualifiers+0xac>
    e1fe:	68e3      	ldr	r3, [r4, #12]
    e200:	f100 0608 	add.w	r6, r0, #8
    e204:	7819      	ldrb	r1, [r3, #0]
    e206:	e7cf      	b.n	e1a8 <d_cv_qualifiers+0x2c>
    e208:	2956      	cmp	r1, #86	; 0x56
    e20a:	d104      	bne.n	e216 <d_cv_qualifiers+0x9a>
    e20c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    e20e:	46cb      	mov	fp, r9
    e210:	3309      	adds	r3, #9
    e212:	62e3      	str	r3, [r4, #44]	; 0x2c
    e214:	e7ea      	b.n	e1ec <d_cv_qualifiers+0x70>
    e216:	294b      	cmp	r1, #75	; 0x4b
    e218:	d104      	bne.n	e224 <d_cv_qualifiers+0xa8>
    e21a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    e21c:	46d3      	mov	fp, sl
    e21e:	3306      	adds	r3, #6
    e220:	62e3      	str	r3, [r4, #44]	; 0x2c
    e222:	e7e3      	b.n	e1ec <d_cv_qualifiers+0x70>
    e224:	7853      	ldrb	r3, [r2, #1]
    e226:	b91b      	cbnz	r3, e230 <d_cv_qualifiers+0xb4>
    e228:	2600      	movs	r6, #0
    e22a:	4630      	mov	r0, r6
    e22c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e230:	1c93      	adds	r3, r2, #2
    e232:	60e3      	str	r3, [r4, #12]
    e234:	f892 b001 	ldrb.w	fp, [r2, #1]
    e238:	f1bb 0f78 	cmp.w	fp, #120	; 0x78
    e23c:	d106      	bne.n	e24c <d_cv_qualifiers+0xd0>
    e23e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    e240:	2000      	movs	r0, #0
    e242:	f04f 0b4d 	mov.w	fp, #77	; 0x4d
    e246:	3311      	adds	r3, #17
    e248:	62e3      	str	r3, [r4, #44]	; 0x2c
    e24a:	e7d0      	b.n	e1ee <d_cv_qualifiers+0x72>
    e24c:	f1bb 0f6f 	cmp.w	fp, #111	; 0x6f
    e250:	d002      	beq.n	e258 <d_cv_qualifiers+0xdc>
    e252:	f1bb 0f4f 	cmp.w	fp, #79	; 0x4f
    e256:	d112      	bne.n	e27e <d_cv_qualifiers+0x102>
    e258:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    e25a:	f1bb 0f4f 	cmp.w	fp, #79	; 0x4f
    e25e:	f103 0309 	add.w	r3, r3, #9
    e262:	62e3      	str	r3, [r4, #44]	; 0x2c
    e264:	d11f      	bne.n	e2a6 <d_cv_qualifiers+0x12a>
    e266:	4620      	mov	r0, r4
    e268:	f7ff fb6c 	bl	d944 <d_expression>
    e26c:	2800      	cmp	r0, #0
    e26e:	d0db      	beq.n	e228 <d_cv_qualifiers+0xac>
    e270:	68e3      	ldr	r3, [r4, #12]
    e272:	781a      	ldrb	r2, [r3, #0]
    e274:	2a45      	cmp	r2, #69	; 0x45
    e276:	d1d7      	bne.n	e228 <d_cv_qualifiers+0xac>
    e278:	3301      	adds	r3, #1
    e27a:	60e3      	str	r3, [r4, #12]
    e27c:	e7b7      	b.n	e1ee <d_cv_qualifiers+0x72>
    e27e:	f1bb 0f77 	cmp.w	fp, #119	; 0x77
    e282:	d1d1      	bne.n	e228 <d_cv_qualifiers+0xac>
    e284:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    e286:	4620      	mov	r0, r4
    e288:	3306      	adds	r3, #6
    e28a:	62e3      	str	r3, [r4, #44]	; 0x2c
    e28c:	f7ff ff3c 	bl	e108 <d_parmlist>
    e290:	2800      	cmp	r0, #0
    e292:	d0c9      	beq.n	e228 <d_cv_qualifiers+0xac>
    e294:	68e3      	ldr	r3, [r4, #12]
    e296:	781a      	ldrb	r2, [r3, #0]
    e298:	2a45      	cmp	r2, #69	; 0x45
    e29a:	d1c5      	bne.n	e228 <d_cv_qualifiers+0xac>
    e29c:	3301      	adds	r3, #1
    e29e:	f04f 0b50 	mov.w	fp, #80	; 0x50
    e2a2:	60e3      	str	r3, [r4, #12]
    e2a4:	e7a3      	b.n	e1ee <d_cv_qualifiers+0x72>
    e2a6:	2000      	movs	r0, #0
    e2a8:	f04f 0b4f 	mov.w	fp, #79	; 0x4f
    e2ac:	e79f      	b.n	e1ee <d_cv_qualifiers+0x72>
    e2ae:	7018      	strb	r0, [r3, #0]
    e2b0:	e791      	b.n	e1d6 <d_cv_qualifiers+0x5a>
    e2b2:	701c      	strb	r4, [r3, #0]
    e2b4:	e78f      	b.n	e1d6 <d_cv_qualifiers+0x5a>

0000e2b6 <d_bare_function_type>:
    e2b6:	68c3      	ldr	r3, [r0, #12]
    e2b8:	b570      	push	{r4, r5, r6, lr}
    e2ba:	781a      	ldrb	r2, [r3, #0]
    e2bc:	4605      	mov	r5, r0
    e2be:	2a4a      	cmp	r2, #74	; 0x4a
    e2c0:	d108      	bne.n	e2d4 <d_bare_function_type+0x1e>
    e2c2:	3301      	adds	r3, #1
    e2c4:	60c3      	str	r3, [r0, #12]
    e2c6:	4628      	mov	r0, r5
    e2c8:	f7ff fb72 	bl	d9b0 <d_type>
    e2cc:	4604      	mov	r4, r0
    e2ce:	b920      	cbnz	r0, e2da <d_bare_function_type+0x24>
    e2d0:	2000      	movs	r0, #0
    e2d2:	bd70      	pop	{r4, r5, r6, pc}
    e2d4:	2900      	cmp	r1, #0
    e2d6:	d1f6      	bne.n	e2c6 <d_bare_function_type+0x10>
    e2d8:	460c      	mov	r4, r1
    e2da:	4628      	mov	r0, r5
    e2dc:	f7ff ff14 	bl	e108 <d_parmlist>
    e2e0:	4603      	mov	r3, r0
    e2e2:	2800      	cmp	r0, #0
    e2e4:	d0f4      	beq.n	e2d0 <d_bare_function_type+0x1a>
    e2e6:	4622      	mov	r2, r4
    e2e8:	4628      	mov	r0, r5
    e2ea:	2129      	movs	r1, #41	; 0x29
    e2ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e2f0:	f7fe bd7b 	b.w	cdea <d_make_comp>

0000e2f4 <d_function_type>:
    e2f4:	b510      	push	{r4, lr}
    e2f6:	4604      	mov	r4, r0
    e2f8:	6880      	ldr	r0, [r0, #8]
    e2fa:	f410 2080 	ands.w	r0, r0, #262144	; 0x40000
    e2fe:	d105      	bne.n	e30c <d_function_type+0x18>
    e300:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    e302:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    e306:	d80d      	bhi.n	e324 <d_function_type+0x30>
    e308:	3301      	adds	r3, #1
    e30a:	63a3      	str	r3, [r4, #56]	; 0x38
    e30c:	68e3      	ldr	r3, [r4, #12]
    e30e:	781a      	ldrb	r2, [r3, #0]
    e310:	2a46      	cmp	r2, #70	; 0x46
    e312:	d008      	beq.n	e326 <d_function_type+0x32>
    e314:	2000      	movs	r0, #0
    e316:	68a3      	ldr	r3, [r4, #8]
    e318:	035b      	lsls	r3, r3, #13
    e31a:	bf5e      	ittt	pl
    e31c:	6ba3      	ldrpl	r3, [r4, #56]	; 0x38
    e31e:	f103 33ff 	addpl.w	r3, r3, #4294967295	; 0xffffffff
    e322:	63a3      	strpl	r3, [r4, #56]	; 0x38
    e324:	bd10      	pop	{r4, pc}
    e326:	1c5a      	adds	r2, r3, #1
    e328:	2101      	movs	r1, #1
    e32a:	4620      	mov	r0, r4
    e32c:	60e2      	str	r2, [r4, #12]
    e32e:	785a      	ldrb	r2, [r3, #1]
    e330:	2a59      	cmp	r2, #89	; 0x59
    e332:	bf04      	itt	eq
    e334:	3302      	addeq	r3, #2
    e336:	60e3      	streq	r3, [r4, #12]
    e338:	f7ff ffbd 	bl	e2b6 <d_bare_function_type>
    e33c:	4601      	mov	r1, r0
    e33e:	4620      	mov	r0, r4
    e340:	f7fe fdb0 	bl	cea4 <d_ref_qualifier>
    e344:	68e3      	ldr	r3, [r4, #12]
    e346:	781a      	ldrb	r2, [r3, #0]
    e348:	2a45      	cmp	r2, #69	; 0x45
    e34a:	d1e3      	bne.n	e314 <d_function_type+0x20>
    e34c:	3301      	adds	r3, #1
    e34e:	60e3      	str	r3, [r4, #12]
    e350:	e7e1      	b.n	e316 <d_function_type+0x22>

0000e352 <d_unqualified_name>:
    e352:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e354:	68c3      	ldr	r3, [r0, #12]
    e356:	4605      	mov	r5, r0
    e358:	781a      	ldrb	r2, [r3, #0]
    e35a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    e35e:	2909      	cmp	r1, #9
    e360:	d80d      	bhi.n	e37e <d_unqualified_name+0x2c>
    e362:	f7fe fee2 	bl	d12a <d_source_name>
    e366:	4604      	mov	r4, r0
    e368:	68eb      	ldr	r3, [r5, #12]
    e36a:	781b      	ldrb	r3, [r3, #0]
    e36c:	2b42      	cmp	r3, #66	; 0x42
    e36e:	f040 80a0 	bne.w	e4b2 <d_unqualified_name+0x160>
    e372:	4621      	mov	r1, r4
    e374:	4628      	mov	r0, r5
    e376:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e37a:	f7fe bf15 	b.w	d1a8 <d_abi_tags>
    e37e:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
    e382:	2919      	cmp	r1, #25
    e384:	d824      	bhi.n	e3d0 <d_unqualified_name+0x7e>
    e386:	2a6f      	cmp	r2, #111	; 0x6f
    e388:	d104      	bne.n	e394 <d_unqualified_name+0x42>
    e38a:	785a      	ldrb	r2, [r3, #1]
    e38c:	2a6e      	cmp	r2, #110	; 0x6e
    e38e:	bf04      	itt	eq
    e390:	3302      	addeq	r3, #2
    e392:	60c3      	streq	r3, [r0, #12]
    e394:	4628      	mov	r0, r5
    e396:	f7ff fe4c 	bl	e032 <d_operator_name>
    e39a:	4604      	mov	r4, r0
    e39c:	b360      	cbz	r0, e3f8 <d_unqualified_name+0xa6>
    e39e:	7803      	ldrb	r3, [r0, #0]
    e3a0:	2b32      	cmp	r3, #50	; 0x32
    e3a2:	d1e1      	bne.n	e368 <d_unqualified_name+0x16>
    e3a4:	6882      	ldr	r2, [r0, #8]
    e3a6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    e3a8:	6891      	ldr	r1, [r2, #8]
    e3aa:	3307      	adds	r3, #7
    e3ac:	6810      	ldr	r0, [r2, #0]
    e3ae:	440b      	add	r3, r1
    e3b0:	4968      	ldr	r1, [pc, #416]	; (e554 <d_unqualified_name+0x202>)
    e3b2:	62eb      	str	r3, [r5, #44]	; 0x2c
    e3b4:	f003 fba6 	bl	11b04 <strcmp>
    e3b8:	2800      	cmp	r0, #0
    e3ba:	d1d5      	bne.n	e368 <d_unqualified_name+0x16>
    e3bc:	4628      	mov	r0, r5
    e3be:	f7fe feb4 	bl	d12a <d_source_name>
    e3c2:	4622      	mov	r2, r4
    e3c4:	4603      	mov	r3, r0
    e3c6:	2137      	movs	r1, #55	; 0x37
    e3c8:	4628      	mov	r0, r5
    e3ca:	f7fe fd0e 	bl	cdea <d_make_comp>
    e3ce:	e7ca      	b.n	e366 <d_unqualified_name+0x14>
    e3d0:	f1a2 0143 	sub.w	r1, r2, #67	; 0x43
    e3d4:	2901      	cmp	r1, #1
    e3d6:	d863      	bhi.n	e4a0 <d_unqualified_name+0x14e>
    e3d8:	6a86      	ldr	r6, [r0, #40]	; 0x28
    e3da:	b146      	cbz	r6, e3ee <d_unqualified_name+0x9c>
    e3dc:	7832      	ldrb	r2, [r6, #0]
    e3de:	b922      	cbnz	r2, e3ea <d_unqualified_name+0x98>
    e3e0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    e3e2:	68f1      	ldr	r1, [r6, #12]
    e3e4:	440a      	add	r2, r1
    e3e6:	62ea      	str	r2, [r5, #44]	; 0x2c
    e3e8:	e001      	b.n	e3ee <d_unqualified_name+0x9c>
    e3ea:	2a18      	cmp	r2, #24
    e3ec:	d0f8      	beq.n	e3e0 <d_unqualified_name+0x8e>
    e3ee:	781a      	ldrb	r2, [r3, #0]
    e3f0:	2a43      	cmp	r2, #67	; 0x43
    e3f2:	d003      	beq.n	e3fc <d_unqualified_name+0xaa>
    e3f4:	2a44      	cmp	r2, #68	; 0x44
    e3f6:	d025      	beq.n	e444 <d_unqualified_name+0xf2>
    e3f8:	2400      	movs	r4, #0
    e3fa:	e7b5      	b.n	e368 <d_unqualified_name+0x16>
    e3fc:	785a      	ldrb	r2, [r3, #1]
    e3fe:	2a49      	cmp	r2, #73	; 0x49
    e400:	bf05      	ittet	eq
    e402:	3301      	addeq	r3, #1
    e404:	2201      	moveq	r2, #1
    e406:	2200      	movne	r2, #0
    e408:	60eb      	streq	r3, [r5, #12]
    e40a:	68eb      	ldr	r3, [r5, #12]
    e40c:	785e      	ldrb	r6, [r3, #1]
    e40e:	f1a6 0131 	sub.w	r1, r6, #49	; 0x31
    e412:	2904      	cmp	r1, #4
    e414:	d8f0      	bhi.n	e3f8 <d_unqualified_name+0xa6>
    e416:	3302      	adds	r3, #2
    e418:	60eb      	str	r3, [r5, #12]
    e41a:	b112      	cbz	r2, e422 <d_unqualified_name+0xd0>
    e41c:	4628      	mov	r0, r5
    e41e:	f7ff fac7 	bl	d9b0 <d_type>
    e422:	4628      	mov	r0, r5
    e424:	6aaf      	ldr	r7, [r5, #40]	; 0x28
    e426:	f7fe fcd1 	bl	cdcc <d_make_empty>
    e42a:	4604      	mov	r4, r0
    e42c:	2800      	cmp	r0, #0
    e42e:	d0e3      	beq.n	e3f8 <d_unqualified_name+0xa6>
    e430:	2f00      	cmp	r7, #0
    e432:	d0e1      	beq.n	e3f8 <d_unqualified_name+0xa6>
    e434:	2300      	movs	r3, #0
    e436:	3e30      	subs	r6, #48	; 0x30
    e438:	60c7      	str	r7, [r0, #12]
    e43a:	6043      	str	r3, [r0, #4]
    e43c:	2307      	movs	r3, #7
    e43e:	7206      	strb	r6, [r0, #8]
    e440:	7003      	strb	r3, [r0, #0]
    e442:	e791      	b.n	e368 <d_unqualified_name+0x16>
    e444:	785a      	ldrb	r2, [r3, #1]
    e446:	3a30      	subs	r2, #48	; 0x30
    e448:	2a05      	cmp	r2, #5
    e44a:	d8d5      	bhi.n	e3f8 <d_unqualified_name+0xa6>
    e44c:	a101      	add	r1, pc, #4	; (adr r1, e454 <d_unqualified_name+0x102>)
    e44e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    e452:	bf00      	nop
    e454:	0000e49d 	.word	0x0000e49d
    e458:	0000e46d 	.word	0x0000e46d
    e45c:	0000e491 	.word	0x0000e491
    e460:	0000e3f9 	.word	0x0000e3f9
    e464:	0000e495 	.word	0x0000e495
    e468:	0000e499 	.word	0x0000e499
    e46c:	2702      	movs	r7, #2
    e46e:	3302      	adds	r3, #2
    e470:	4628      	mov	r0, r5
    e472:	60eb      	str	r3, [r5, #12]
    e474:	f7fe fcaa 	bl	cdcc <d_make_empty>
    e478:	4604      	mov	r4, r0
    e47a:	2800      	cmp	r0, #0
    e47c:	d0bc      	beq.n	e3f8 <d_unqualified_name+0xa6>
    e47e:	2e00      	cmp	r6, #0
    e480:	d0ba      	beq.n	e3f8 <d_unqualified_name+0xa6>
    e482:	2300      	movs	r3, #0
    e484:	7207      	strb	r7, [r0, #8]
    e486:	60c6      	str	r6, [r0, #12]
    e488:	6043      	str	r3, [r0, #4]
    e48a:	2308      	movs	r3, #8
    e48c:	7003      	strb	r3, [r0, #0]
    e48e:	e76b      	b.n	e368 <d_unqualified_name+0x16>
    e490:	2703      	movs	r7, #3
    e492:	e7ec      	b.n	e46e <d_unqualified_name+0x11c>
    e494:	2704      	movs	r7, #4
    e496:	e7ea      	b.n	e46e <d_unqualified_name+0x11c>
    e498:	2705      	movs	r7, #5
    e49a:	e7e8      	b.n	e46e <d_unqualified_name+0x11c>
    e49c:	2701      	movs	r7, #1
    e49e:	e7e6      	b.n	e46e <d_unqualified_name+0x11c>
    e4a0:	2a4c      	cmp	r2, #76	; 0x4c
    e4a2:	d10f      	bne.n	e4c4 <d_unqualified_name+0x172>
    e4a4:	3301      	adds	r3, #1
    e4a6:	60c3      	str	r3, [r0, #12]
    e4a8:	f7fe fe3f 	bl	d12a <d_source_name>
    e4ac:	4604      	mov	r4, r0
    e4ae:	b910      	cbnz	r0, e4b6 <d_unqualified_name+0x164>
    e4b0:	2400      	movs	r4, #0
    e4b2:	4620      	mov	r0, r4
    e4b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e4b6:	4628      	mov	r0, r5
    e4b8:	f7fe fee3 	bl	d282 <d_discriminator>
    e4bc:	2800      	cmp	r0, #0
    e4be:	f47f af53 	bne.w	e368 <d_unqualified_name+0x16>
    e4c2:	e7f5      	b.n	e4b0 <d_unqualified_name+0x15e>
    e4c4:	2a55      	cmp	r2, #85	; 0x55
    e4c6:	d1f3      	bne.n	e4b0 <d_unqualified_name+0x15e>
    e4c8:	785a      	ldrb	r2, [r3, #1]
    e4ca:	2a6c      	cmp	r2, #108	; 0x6c
    e4cc:	d015      	beq.n	e4fa <d_unqualified_name+0x1a8>
    e4ce:	2a74      	cmp	r2, #116	; 0x74
    e4d0:	d1ee      	bne.n	e4b0 <d_unqualified_name+0x15e>
    e4d2:	1c5a      	adds	r2, r3, #1
    e4d4:	60c2      	str	r2, [r0, #12]
    e4d6:	785a      	ldrb	r2, [r3, #1]
    e4d8:	2a74      	cmp	r2, #116	; 0x74
    e4da:	d18d      	bne.n	e3f8 <d_unqualified_name+0xa6>
    e4dc:	3302      	adds	r3, #2
    e4de:	60c3      	str	r3, [r0, #12]
    e4e0:	f7fe fdf3 	bl	d0ca <d_compact_number>
    e4e4:	1e06      	subs	r6, r0, #0
    e4e6:	db87      	blt.n	e3f8 <d_unqualified_name+0xa6>
    e4e8:	4628      	mov	r0, r5
    e4ea:	f7fe fc6f 	bl	cdcc <d_make_empty>
    e4ee:	4604      	mov	r4, r0
    e4f0:	b338      	cbz	r0, e542 <d_unqualified_name+0x1f0>
    e4f2:	2348      	movs	r3, #72	; 0x48
    e4f4:	6086      	str	r6, [r0, #8]
    e4f6:	7003      	strb	r3, [r0, #0]
    e4f8:	e023      	b.n	e542 <d_unqualified_name+0x1f0>
    e4fa:	1c5a      	adds	r2, r3, #1
    e4fc:	60c2      	str	r2, [r0, #12]
    e4fe:	785a      	ldrb	r2, [r3, #1]
    e500:	2a6c      	cmp	r2, #108	; 0x6c
    e502:	f47f af79 	bne.w	e3f8 <d_unqualified_name+0xa6>
    e506:	3302      	adds	r3, #2
    e508:	60c3      	str	r3, [r0, #12]
    e50a:	f7ff fdfd 	bl	e108 <d_parmlist>
    e50e:	4607      	mov	r7, r0
    e510:	2800      	cmp	r0, #0
    e512:	f43f af71 	beq.w	e3f8 <d_unqualified_name+0xa6>
    e516:	68eb      	ldr	r3, [r5, #12]
    e518:	781a      	ldrb	r2, [r3, #0]
    e51a:	2a45      	cmp	r2, #69	; 0x45
    e51c:	f47f af6c 	bne.w	e3f8 <d_unqualified_name+0xa6>
    e520:	3301      	adds	r3, #1
    e522:	4628      	mov	r0, r5
    e524:	60eb      	str	r3, [r5, #12]
    e526:	f7fe fdd0 	bl	d0ca <d_compact_number>
    e52a:	1e06      	subs	r6, r0, #0
    e52c:	f6ff af64 	blt.w	e3f8 <d_unqualified_name+0xa6>
    e530:	4628      	mov	r0, r5
    e532:	f7fe fc4b 	bl	cdcc <d_make_empty>
    e536:	4604      	mov	r4, r0
    e538:	b118      	cbz	r0, e542 <d_unqualified_name+0x1f0>
    e53a:	2346      	movs	r3, #70	; 0x46
    e53c:	e9c0 7602 	strd	r7, r6, [r0, #8]
    e540:	7003      	strb	r3, [r0, #0]
    e542:	4621      	mov	r1, r4
    e544:	4628      	mov	r0, r5
    e546:	f7fe fcc3 	bl	ced0 <d_add_substitution>
    e54a:	2800      	cmp	r0, #0
    e54c:	f47f af0c 	bne.w	e368 <d_unqualified_name+0x16>
    e550:	e752      	b.n	e3f8 <d_unqualified_name+0xa6>
    e552:	bf00      	nop
    e554:	00036f21 	.word	0x00036f21

0000e558 <d_name>:
    e558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    e55c:	68c3      	ldr	r3, [r0, #12]
    e55e:	4604      	mov	r4, r0
    e560:	781a      	ldrb	r2, [r3, #0]
    e562:	2a55      	cmp	r2, #85	; 0x55
    e564:	f000 8106 	beq.w	e774 <d_name+0x21c>
    e568:	d815      	bhi.n	e596 <d_name+0x3e>
    e56a:	2a4e      	cmp	r2, #78	; 0x4e
    e56c:	d041      	beq.n	e5f2 <d_name+0x9a>
    e56e:	2a53      	cmp	r2, #83	; 0x53
    e570:	f000 8104 	beq.w	e77c <d_name+0x224>
    e574:	4620      	mov	r0, r4
    e576:	f7ff feec 	bl	e352 <d_unqualified_name>
    e57a:	68e3      	ldr	r3, [r4, #12]
    e57c:	4605      	mov	r5, r0
    e57e:	781b      	ldrb	r3, [r3, #0]
    e580:	2b49      	cmp	r3, #73	; 0x49
    e582:	f040 80c6 	bne.w	e712 <d_name+0x1ba>
    e586:	4629      	mov	r1, r5
    e588:	4620      	mov	r0, r4
    e58a:	f7fe fca1 	bl	ced0 <d_add_substitution>
    e58e:	2800      	cmp	r0, #0
    e590:	f040 8103 	bne.w	e79a <d_name+0x242>
    e594:	e035      	b.n	e602 <d_name+0xaa>
    e596:	2a5a      	cmp	r2, #90	; 0x5a
    e598:	d1ec      	bne.n	e574 <d_name+0x1c>
    e59a:	3301      	adds	r3, #1
    e59c:	2100      	movs	r1, #0
    e59e:	60c3      	str	r3, [r0, #12]
    e5a0:	f000 f91e 	bl	e7e0 <d_encoding>
    e5a4:	4605      	mov	r5, r0
    e5a6:	b360      	cbz	r0, e602 <d_name+0xaa>
    e5a8:	68e3      	ldr	r3, [r4, #12]
    e5aa:	781a      	ldrb	r2, [r3, #0]
    e5ac:	2a45      	cmp	r2, #69	; 0x45
    e5ae:	d128      	bne.n	e602 <d_name+0xaa>
    e5b0:	1c5a      	adds	r2, r3, #1
    e5b2:	60e2      	str	r2, [r4, #12]
    e5b4:	785a      	ldrb	r2, [r3, #1]
    e5b6:	2a73      	cmp	r2, #115	; 0x73
    e5b8:	f040 80af 	bne.w	e71a <d_name+0x1c2>
    e5bc:	3302      	adds	r3, #2
    e5be:	4620      	mov	r0, r4
    e5c0:	60e3      	str	r3, [r4, #12]
    e5c2:	f7fe fe5e 	bl	d282 <d_discriminator>
    e5c6:	b1e0      	cbz	r0, e602 <d_name+0xaa>
    e5c8:	220e      	movs	r2, #14
    e5ca:	4982      	ldr	r1, [pc, #520]	; (e7d4 <d_name+0x27c>)
    e5cc:	4620      	mov	r0, r4
    e5ce:	f7fe fc4d 	bl	ce6c <d_make_name>
    e5d2:	4603      	mov	r3, r0
    e5d4:	782a      	ldrb	r2, [r5, #0]
    e5d6:	2a03      	cmp	r2, #3
    e5d8:	d105      	bne.n	e5e6 <d_name+0x8e>
    e5da:	68ea      	ldr	r2, [r5, #12]
    e5dc:	7811      	ldrb	r1, [r2, #0]
    e5de:	2929      	cmp	r1, #41	; 0x29
    e5e0:	bf04      	itt	eq
    e5e2:	2100      	moveq	r1, #0
    e5e4:	6091      	streq	r1, [r2, #8]
    e5e6:	462a      	mov	r2, r5
    e5e8:	2102      	movs	r1, #2
    e5ea:	4620      	mov	r0, r4
    e5ec:	f7fe fbfd 	bl	cdea <d_make_comp>
    e5f0:	e0c2      	b.n	e778 <d_name+0x220>
    e5f2:	3301      	adds	r3, #1
    e5f4:	2201      	movs	r2, #1
    e5f6:	a903      	add	r1, sp, #12
    e5f8:	60c3      	str	r3, [r0, #12]
    e5fa:	f7ff fdbf 	bl	e17c <d_cv_qualifiers>
    e5fe:	4607      	mov	r7, r0
    e600:	b908      	cbnz	r0, e606 <d_name+0xae>
    e602:	2500      	movs	r5, #0
    e604:	e085      	b.n	e712 <d_name+0x1ba>
    e606:	2100      	movs	r1, #0
    e608:	4620      	mov	r0, r4
    e60a:	f7fe fc4b 	bl	cea4 <d_ref_qualifier>
    e60e:	f04f 0a00 	mov.w	sl, #0
    e612:	4680      	mov	r8, r0
    e614:	f8df 91c4 	ldr.w	r9, [pc, #452]	; e7dc <d_name+0x284>
    e618:	68e3      	ldr	r3, [r4, #12]
    e61a:	781e      	ldrb	r6, [r3, #0]
    e61c:	b916      	cbnz	r6, e624 <d_name+0xcc>
    e61e:	2300      	movs	r3, #0
    e620:	603b      	str	r3, [r7, #0]
    e622:	e7ee      	b.n	e602 <d_name+0xaa>
    e624:	2e44      	cmp	r6, #68	; 0x44
    e626:	d118      	bne.n	e65a <d_name+0x102>
    e628:	785b      	ldrb	r3, [r3, #1]
    e62a:	4620      	mov	r0, r4
    e62c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    e630:	2b54      	cmp	r3, #84	; 0x54
    e632:	d10f      	bne.n	e654 <d_name+0xfc>
    e634:	f7ff f9bc 	bl	d9b0 <d_type>
    e638:	4605      	mov	r5, r0
    e63a:	f1ba 0f00 	cmp.w	sl, #0
    e63e:	d11e      	bne.n	e67e <d_name+0x126>
    e640:	68e3      	ldr	r3, [r4, #12]
    e642:	781b      	ldrb	r3, [r3, #0]
    e644:	2b45      	cmp	r3, #69	; 0x45
    e646:	d03d      	beq.n	e6c4 <d_name+0x16c>
    e648:	4629      	mov	r1, r5
    e64a:	4620      	mov	r0, r4
    e64c:	f7fe fc40 	bl	ced0 <d_add_substitution>
    e650:	bbc0      	cbnz	r0, e6c4 <d_name+0x16c>
    e652:	e7e4      	b.n	e61e <d_name+0xc6>
    e654:	f7ff fe7d 	bl	e352 <d_unqualified_name>
    e658:	e7ee      	b.n	e638 <d_name+0xe0>
    e65a:	f1a6 0230 	sub.w	r2, r6, #48	; 0x30
    e65e:	b2d2      	uxtb	r2, r2
    e660:	2a1c      	cmp	r2, #28
    e662:	d90e      	bls.n	e682 <d_name+0x12a>
    e664:	f1a6 0261 	sub.w	r2, r6, #97	; 0x61
    e668:	2a19      	cmp	r2, #25
    e66a:	d901      	bls.n	e670 <d_name+0x118>
    e66c:	2e55      	cmp	r6, #85	; 0x55
    e66e:	d11f      	bne.n	e6b0 <d_name+0x158>
    e670:	4620      	mov	r0, r4
    e672:	f7ff fe6e 	bl	e352 <d_unqualified_name>
    e676:	4605      	mov	r5, r0
    e678:	f1ba 0f00 	cmp.w	sl, #0
    e67c:	d015      	beq.n	e6aa <d_name+0x152>
    e67e:	2101      	movs	r1, #1
    e680:	e00d      	b.n	e69e <d_name+0x146>
    e682:	fa29 f202 	lsr.w	r2, r9, r2
    e686:	07d2      	lsls	r2, r2, #31
    e688:	d4f2      	bmi.n	e670 <d_name+0x118>
    e68a:	2e49      	cmp	r6, #73	; 0x49
    e68c:	d11c      	bne.n	e6c8 <d_name+0x170>
    e68e:	f1ba 0f00 	cmp.w	sl, #0
    e692:	d0c4      	beq.n	e61e <d_name+0xc6>
    e694:	4620      	mov	r0, r4
    e696:	f7ff fcc2 	bl	e01e <d_template_args>
    e69a:	2104      	movs	r1, #4
    e69c:	4605      	mov	r5, r0
    e69e:	462b      	mov	r3, r5
    e6a0:	4652      	mov	r2, sl
    e6a2:	4620      	mov	r0, r4
    e6a4:	f7fe fba1 	bl	cdea <d_make_comp>
    e6a8:	4605      	mov	r5, r0
    e6aa:	2e53      	cmp	r6, #83	; 0x53
    e6ac:	d1c8      	bne.n	e640 <d_name+0xe8>
    e6ae:	e009      	b.n	e6c4 <d_name+0x16c>
    e6b0:	2e53      	cmp	r6, #83	; 0x53
    e6b2:	d1ea      	bne.n	e68a <d_name+0x132>
    e6b4:	2101      	movs	r1, #1
    e6b6:	4620      	mov	r0, r4
    e6b8:	f7fe feb0 	bl	d41c <d_substitution>
    e6bc:	4605      	mov	r5, r0
    e6be:	f1ba 0f00 	cmp.w	sl, #0
    e6c2:	d1dc      	bne.n	e67e <d_name+0x126>
    e6c4:	46aa      	mov	sl, r5
    e6c6:	e7a7      	b.n	e618 <d_name+0xc0>
    e6c8:	2e54      	cmp	r6, #84	; 0x54
    e6ca:	d103      	bne.n	e6d4 <d_name+0x17c>
    e6cc:	4620      	mov	r0, r4
    e6ce:	f7fe fd15 	bl	d0fc <d_template_param>
    e6d2:	e7b1      	b.n	e638 <d_name+0xe0>
    e6d4:	2e45      	cmp	r6, #69	; 0x45
    e6d6:	d008      	beq.n	e6ea <d_name+0x192>
    e6d8:	2e4d      	cmp	r6, #77	; 0x4d
    e6da:	d1a0      	bne.n	e61e <d_name+0xc6>
    e6dc:	f1ba 0f00 	cmp.w	sl, #0
    e6e0:	d09d      	beq.n	e61e <d_name+0xc6>
    e6e2:	3301      	adds	r3, #1
    e6e4:	4655      	mov	r5, sl
    e6e6:	60e3      	str	r3, [r4, #12]
    e6e8:	e7ec      	b.n	e6c4 <d_name+0x16c>
    e6ea:	f8c7 a000 	str.w	sl, [r7]
    e6ee:	f1ba 0f00 	cmp.w	sl, #0
    e6f2:	d086      	beq.n	e602 <d_name+0xaa>
    e6f4:	f1b8 0f00 	cmp.w	r8, #0
    e6f8:	d004      	beq.n	e704 <d_name+0x1ac>
    e6fa:	9a03      	ldr	r2, [sp, #12]
    e6fc:	f8cd 800c 	str.w	r8, [sp, #12]
    e700:	f8c8 2008 	str.w	r2, [r8, #8]
    e704:	781a      	ldrb	r2, [r3, #0]
    e706:	2a45      	cmp	r2, #69	; 0x45
    e708:	f47f af7b 	bne.w	e602 <d_name+0xaa>
    e70c:	3301      	adds	r3, #1
    e70e:	9d03      	ldr	r5, [sp, #12]
    e710:	60e3      	str	r3, [r4, #12]
    e712:	4628      	mov	r0, r5
    e714:	b004      	add	sp, #16
    e716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e71a:	2a64      	cmp	r2, #100	; 0x64
    e71c:	d110      	bne.n	e740 <d_name+0x1e8>
    e71e:	3302      	adds	r3, #2
    e720:	4620      	mov	r0, r4
    e722:	60e3      	str	r3, [r4, #12]
    e724:	f7fe fcd1 	bl	d0ca <d_compact_number>
    e728:	1e07      	subs	r7, r0, #0
    e72a:	f6ff af6a 	blt.w	e602 <d_name+0xaa>
    e72e:	4620      	mov	r0, r4
    e730:	f7ff ff12 	bl	e558 <d_name>
    e734:	4606      	mov	r6, r0
    e736:	b930      	cbnz	r0, e746 <d_name+0x1ee>
    e738:	1c7b      	adds	r3, r7, #1
    e73a:	d10f      	bne.n	e75c <d_name+0x204>
    e73c:	4633      	mov	r3, r6
    e73e:	e749      	b.n	e5d4 <d_name+0x7c>
    e740:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    e744:	e7f3      	b.n	e72e <d_name+0x1d6>
    e746:	7803      	ldrb	r3, [r0, #0]
    e748:	2b46      	cmp	r3, #70	; 0x46
    e74a:	d0f5      	beq.n	e738 <d_name+0x1e0>
    e74c:	2b48      	cmp	r3, #72	; 0x48
    e74e:	d0f3      	beq.n	e738 <d_name+0x1e0>
    e750:	4620      	mov	r0, r4
    e752:	f7fe fd96 	bl	d282 <d_discriminator>
    e756:	2800      	cmp	r0, #0
    e758:	d1ee      	bne.n	e738 <d_name+0x1e0>
    e75a:	e752      	b.n	e602 <d_name+0xaa>
    e75c:	4620      	mov	r0, r4
    e75e:	f7fe fb35 	bl	cdcc <d_make_empty>
    e762:	4603      	mov	r3, r0
    e764:	2800      	cmp	r0, #0
    e766:	f43f af35 	beq.w	e5d4 <d_name+0x7c>
    e76a:	2247      	movs	r2, #71	; 0x47
    e76c:	e9c0 6702 	strd	r6, r7, [r0, #8]
    e770:	7002      	strb	r2, [r0, #0]
    e772:	e72f      	b.n	e5d4 <d_name+0x7c>
    e774:	f7ff fded 	bl	e352 <d_unqualified_name>
    e778:	4605      	mov	r5, r0
    e77a:	e7ca      	b.n	e712 <d_name+0x1ba>
    e77c:	785a      	ldrb	r2, [r3, #1]
    e77e:	2a74      	cmp	r2, #116	; 0x74
    e780:	d012      	beq.n	e7a8 <d_name+0x250>
    e782:	2100      	movs	r1, #0
    e784:	f7fe fe4a 	bl	d41c <d_substitution>
    e788:	2301      	movs	r3, #1
    e78a:	4605      	mov	r5, r0
    e78c:	68e2      	ldr	r2, [r4, #12]
    e78e:	7812      	ldrb	r2, [r2, #0]
    e790:	2a49      	cmp	r2, #73	; 0x49
    e792:	d1be      	bne.n	e712 <d_name+0x1ba>
    e794:	2b00      	cmp	r3, #0
    e796:	f43f aef6 	beq.w	e586 <d_name+0x2e>
    e79a:	4620      	mov	r0, r4
    e79c:	f7ff fc3f 	bl	e01e <d_template_args>
    e7a0:	462a      	mov	r2, r5
    e7a2:	4603      	mov	r3, r0
    e7a4:	2104      	movs	r1, #4
    e7a6:	e720      	b.n	e5ea <d_name+0x92>
    e7a8:	3302      	adds	r3, #2
    e7aa:	2203      	movs	r2, #3
    e7ac:	490a      	ldr	r1, [pc, #40]	; (e7d8 <d_name+0x280>)
    e7ae:	60c3      	str	r3, [r0, #12]
    e7b0:	f7fe fb5c 	bl	ce6c <d_make_name>
    e7b4:	9001      	str	r0, [sp, #4]
    e7b6:	4620      	mov	r0, r4
    e7b8:	f7ff fdcb 	bl	e352 <d_unqualified_name>
    e7bc:	9a01      	ldr	r2, [sp, #4]
    e7be:	4603      	mov	r3, r0
    e7c0:	2101      	movs	r1, #1
    e7c2:	4620      	mov	r0, r4
    e7c4:	f7fe fb11 	bl	cdea <d_make_comp>
    e7c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    e7ca:	4605      	mov	r5, r0
    e7cc:	3303      	adds	r3, #3
    e7ce:	62e3      	str	r3, [r4, #44]	; 0x2c
    e7d0:	2300      	movs	r3, #0
    e7d2:	e7db      	b.n	e78c <d_name+0x234>
    e7d4:	00036f24 	.word	0x00036f24
    e7d8:	00036f33 	.word	0x00036f33
    e7dc:	100803ff 	.word	0x100803ff

0000e7e0 <d_encoding>:
    e7e0:	68c3      	ldr	r3, [r0, #12]
    e7e2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    e7e6:	781a      	ldrb	r2, [r3, #0]
    e7e8:	4604      	mov	r4, r0
    e7ea:	460e      	mov	r6, r1
    e7ec:	2a47      	cmp	r2, #71	; 0x47
    e7ee:	d002      	beq.n	e7f6 <d_encoding+0x16>
    e7f0:	2a54      	cmp	r2, #84	; 0x54
    e7f2:	f040 818d 	bne.w	eb10 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb0>
    e7f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    e7f8:	f102 0114 	add.w	r1, r2, #20
    e7fc:	62e1      	str	r1, [r4, #44]	; 0x2c
    e7fe:	7819      	ldrb	r1, [r3, #0]
    e800:	2954      	cmp	r1, #84	; 0x54
    e802:	d108      	bne.n	e816 <d_encoding+0x36>
    e804:	1c59      	adds	r1, r3, #1
    e806:	60e1      	str	r1, [r4, #12]
    e808:	7859      	ldrb	r1, [r3, #1]
    e80a:	bb19      	cbnz	r1, e854 <d_encoding+0x74>
    e80c:	2500      	movs	r5, #0
    e80e:	4628      	mov	r0, r5
    e810:	b003      	add	sp, #12
    e812:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e816:	2947      	cmp	r1, #71	; 0x47
    e818:	d1f8      	bne.n	e80c <d_encoding+0x2c>
    e81a:	1c5a      	adds	r2, r3, #1
    e81c:	60e2      	str	r2, [r4, #12]
    e81e:	785a      	ldrb	r2, [r3, #1]
    e820:	2a00      	cmp	r2, #0
    e822:	d0f3      	beq.n	e80c <d_encoding+0x2c>
    e824:	1c9a      	adds	r2, r3, #2
    e826:	60e2      	str	r2, [r4, #12]
    e828:	785a      	ldrb	r2, [r3, #1]
    e82a:	2a54      	cmp	r2, #84	; 0x54
    e82c:	f000 813f 	beq.w	eaae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4e>
    e830:	f200 80e6 	bhi.w	ea00 <d_encoding+0x220>
    e834:	2a41      	cmp	r2, #65	; 0x41
    e836:	f000 8132 	beq.w	ea9e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3e>
    e83a:	2a52      	cmp	r2, #82	; 0x52
    e83c:	d1e6      	bne.n	e80c <d_encoding+0x2c>
    e83e:	4620      	mov	r0, r4
    e840:	f7ff fe8a 	bl	e558 <d_name>
    e844:	9001      	str	r0, [sp, #4]
    e846:	4620      	mov	r0, r4
    e848:	f7fe fc30 	bl	d0ac <d_number_component>
    e84c:	9a01      	ldr	r2, [sp, #4]
    e84e:	4603      	mov	r3, r0
    e850:	2116      	movs	r1, #22
    e852:	e05d      	b.n	e910 <d_encoding+0x130>
    e854:	1c99      	adds	r1, r3, #2
    e856:	60e1      	str	r1, [r4, #12]
    e858:	7859      	ldrb	r1, [r3, #1]
    e85a:	2957      	cmp	r1, #87	; 0x57
    e85c:	d836      	bhi.n	e8cc <d_encoding+0xec>
    e85e:	2940      	cmp	r1, #64	; 0x40
    e860:	d9d4      	bls.n	e80c <d_encoding+0x2c>
    e862:	3941      	subs	r1, #65	; 0x41
    e864:	2916      	cmp	r1, #22
    e866:	d8d1      	bhi.n	e80c <d_encoding+0x2c>
    e868:	a301      	add	r3, pc, #4	; (adr r3, e870 <d_encoding+0x90>)
    e86a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    e86e:	bf00      	nop
    e870:	0000e9f3 	.word	0x0000e9f3
    e874:	0000e80d 	.word	0x0000e80d
    e878:	0000e983 	.word	0x0000e983
    e87c:	0000e80d 	.word	0x0000e80d
    e880:	0000e80d 	.word	0x0000e80d
    e884:	0000e9bb 	.word	0x0000e9bb
    e888:	0000e80d 	.word	0x0000e80d
    e88c:	0000e9d7 	.word	0x0000e9d7
    e890:	0000e92f 	.word	0x0000e92f
    e894:	0000e9c9 	.word	0x0000e9c9
    e898:	0000e80d 	.word	0x0000e80d
    e89c:	0000e80d 	.word	0x0000e80d
    e8a0:	0000e80d 	.word	0x0000e80d
    e8a4:	0000e80d 	.word	0x0000e80d
    e8a8:	0000e80d 	.word	0x0000e80d
    e8ac:	0000e80d 	.word	0x0000e80d
    e8b0:	0000e80d 	.word	0x0000e80d
    e8b4:	0000e80d 	.word	0x0000e80d
    e8b8:	0000e93d 	.word	0x0000e93d
    e8bc:	0000e91d 	.word	0x0000e91d
    e8c0:	0000e80d 	.word	0x0000e80d
    e8c4:	0000e901 	.word	0x0000e901
    e8c8:	0000e9e5 	.word	0x0000e9e5
    e8cc:	2968      	cmp	r1, #104	; 0x68
    e8ce:	d03c      	beq.n	e94a <d_encoding+0x16a>
    e8d0:	2976      	cmp	r1, #118	; 0x76
    e8d2:	d048      	beq.n	e966 <d_encoding+0x186>
    e8d4:	2963      	cmp	r1, #99	; 0x63
    e8d6:	d199      	bne.n	e80c <d_encoding+0x2c>
    e8d8:	2100      	movs	r1, #0
    e8da:	4620      	mov	r0, r4
    e8dc:	f7fe fc7e 	bl	d1dc <d_call_offset>
    e8e0:	2800      	cmp	r0, #0
    e8e2:	d093      	beq.n	e80c <d_encoding+0x2c>
    e8e4:	2100      	movs	r1, #0
    e8e6:	4620      	mov	r0, r4
    e8e8:	f7fe fc78 	bl	d1dc <d_call_offset>
    e8ec:	2800      	cmp	r0, #0
    e8ee:	d08d      	beq.n	e80c <d_encoding+0x2c>
    e8f0:	2100      	movs	r1, #0
    e8f2:	4620      	mov	r0, r4
    e8f4:	f7ff ff74 	bl	e7e0 <d_encoding>
    e8f8:	2300      	movs	r3, #0
    e8fa:	4602      	mov	r2, r0
    e8fc:	2111      	movs	r1, #17
    e8fe:	e007      	b.n	e910 <d_encoding+0x130>
    e900:	320f      	adds	r2, #15
    e902:	4620      	mov	r0, r4
    e904:	62e2      	str	r2, [r4, #44]	; 0x2c
    e906:	f7ff f853 	bl	d9b0 <d_type>
    e90a:	2300      	movs	r3, #0
    e90c:	4602      	mov	r2, r0
    e90e:	2109      	movs	r1, #9
    e910:	4620      	mov	r0, r4
    e912:	b003      	add	sp, #12
    e914:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e918:	f7fe ba67 	b.w	cdea <d_make_comp>
    e91c:	320a      	adds	r2, #10
    e91e:	4620      	mov	r0, r4
    e920:	62e2      	str	r2, [r4, #44]	; 0x2c
    e922:	f7ff f845 	bl	d9b0 <d_type>
    e926:	2300      	movs	r3, #0
    e928:	4602      	mov	r2, r0
    e92a:	210a      	movs	r1, #10
    e92c:	e7f0      	b.n	e910 <d_encoding+0x130>
    e92e:	4620      	mov	r0, r4
    e930:	f7ff f83e 	bl	d9b0 <d_type>
    e934:	2300      	movs	r3, #0
    e936:	4602      	mov	r2, r0
    e938:	210c      	movs	r1, #12
    e93a:	e7e9      	b.n	e910 <d_encoding+0x130>
    e93c:	4620      	mov	r0, r4
    e93e:	f7ff f837 	bl	d9b0 <d_type>
    e942:	2300      	movs	r3, #0
    e944:	4602      	mov	r2, r0
    e946:	210d      	movs	r1, #13
    e948:	e7e2      	b.n	e910 <d_encoding+0x130>
    e94a:	4620      	mov	r0, r4
    e94c:	f7fe fc46 	bl	d1dc <d_call_offset>
    e950:	2800      	cmp	r0, #0
    e952:	f43f af5b 	beq.w	e80c <d_encoding+0x2c>
    e956:	2100      	movs	r1, #0
    e958:	4620      	mov	r0, r4
    e95a:	f7ff ff41 	bl	e7e0 <d_encoding>
    e95e:	2300      	movs	r3, #0
    e960:	4602      	mov	r2, r0
    e962:	210f      	movs	r1, #15
    e964:	e7d4      	b.n	e910 <d_encoding+0x130>
    e966:	4620      	mov	r0, r4
    e968:	f7fe fc38 	bl	d1dc <d_call_offset>
    e96c:	2800      	cmp	r0, #0
    e96e:	f43f af4d 	beq.w	e80c <d_encoding+0x2c>
    e972:	2100      	movs	r1, #0
    e974:	4620      	mov	r0, r4
    e976:	f7ff ff33 	bl	e7e0 <d_encoding>
    e97a:	2300      	movs	r3, #0
    e97c:	4602      	mov	r2, r0
    e97e:	2110      	movs	r1, #16
    e980:	e7c6      	b.n	e910 <d_encoding+0x130>
    e982:	4620      	mov	r0, r4
    e984:	f7ff f814 	bl	d9b0 <d_type>
    e988:	4605      	mov	r5, r0
    e98a:	f104 000c 	add.w	r0, r4, #12
    e98e:	f7fe fb63 	bl	d058 <d_number.isra.0>
    e992:	2800      	cmp	r0, #0
    e994:	f6ff af3a 	blt.w	e80c <d_encoding+0x2c>
    e998:	68e2      	ldr	r2, [r4, #12]
    e99a:	7813      	ldrb	r3, [r2, #0]
    e99c:	2b5f      	cmp	r3, #95	; 0x5f
    e99e:	f47f af35 	bne.w	e80c <d_encoding+0x2c>
    e9a2:	3201      	adds	r2, #1
    e9a4:	4620      	mov	r0, r4
    e9a6:	60e2      	str	r2, [r4, #12]
    e9a8:	f7ff f802 	bl	d9b0 <d_type>
    e9ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    e9ae:	4602      	mov	r2, r0
    e9b0:	210b      	movs	r1, #11
    e9b2:	3305      	adds	r3, #5
    e9b4:	62e3      	str	r3, [r4, #44]	; 0x2c
    e9b6:	462b      	mov	r3, r5
    e9b8:	e7aa      	b.n	e910 <d_encoding+0x130>
    e9ba:	4620      	mov	r0, r4
    e9bc:	f7fe fff8 	bl	d9b0 <d_type>
    e9c0:	2300      	movs	r3, #0
    e9c2:	4602      	mov	r2, r0
    e9c4:	210e      	movs	r1, #14
    e9c6:	e7a3      	b.n	e910 <d_encoding+0x130>
    e9c8:	4620      	mov	r0, r4
    e9ca:	f7fe fff1 	bl	d9b0 <d_type>
    e9ce:	2300      	movs	r3, #0
    e9d0:	4602      	mov	r2, r0
    e9d2:	2112      	movs	r1, #18
    e9d4:	e79c      	b.n	e910 <d_encoding+0x130>
    e9d6:	4620      	mov	r0, r4
    e9d8:	f7ff fdbe 	bl	e558 <d_name>
    e9dc:	2300      	movs	r3, #0
    e9de:	4602      	mov	r2, r0
    e9e0:	2114      	movs	r1, #20
    e9e2:	e795      	b.n	e910 <d_encoding+0x130>
    e9e4:	4620      	mov	r0, r4
    e9e6:	f7ff fdb7 	bl	e558 <d_name>
    e9ea:	2300      	movs	r3, #0
    e9ec:	4602      	mov	r2, r0
    e9ee:	2115      	movs	r1, #21
    e9f0:	e78e      	b.n	e910 <d_encoding+0x130>
    e9f2:	4620      	mov	r0, r4
    e9f4:	f7ff fac0 	bl	df78 <d_template_arg>
    e9f8:	2300      	movs	r3, #0
    e9fa:	4602      	mov	r2, r0
    e9fc:	2130      	movs	r1, #48	; 0x30
    e9fe:	e787      	b.n	e910 <d_encoding+0x130>
    ea00:	2a56      	cmp	r2, #86	; 0x56
    ea02:	d045      	beq.n	ea90 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x30>
    ea04:	2a72      	cmp	r2, #114	; 0x72
    ea06:	f47f af01 	bne.w	e80c <d_encoding+0x2c>
    ea0a:	f104 000c 	add.w	r0, r4, #12
    ea0e:	f7fe fb23 	bl	d058 <d_number.isra.0>
    ea12:	2801      	cmp	r0, #1
    ea14:	f77f aefa 	ble.w	e80c <d_encoding+0x2c>
    ea18:	68e3      	ldr	r3, [r4, #12]
    ea1a:	781a      	ldrb	r2, [r3, #0]
    ea1c:	2a00      	cmp	r2, #0
    ea1e:	f43f aef5 	beq.w	e80c <d_encoding+0x2c>
    ea22:	1c5d      	adds	r5, r3, #1
    ea24:	60e5      	str	r5, [r4, #12]
    ea26:	781b      	ldrb	r3, [r3, #0]
    ea28:	2b5f      	cmp	r3, #95	; 0x5f
    ea2a:	f47f aeef 	bne.w	e80c <d_encoding+0x2c>
    ea2e:	1e46      	subs	r6, r0, #1
    ea30:	f04f 0800 	mov.w	r8, #0
    ea34:	2741      	movs	r7, #65	; 0x41
    ea36:	782b      	ldrb	r3, [r5, #0]
    ea38:	2b00      	cmp	r3, #0
    ea3a:	f43f aee7 	beq.w	e80c <d_encoding+0x2c>
    ea3e:	2b24      	cmp	r3, #36	; 0x24
    ea40:	d150      	bne.n	eae4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x84>
    ea42:	786d      	ldrb	r5, [r5, #1]
    ea44:	2d53      	cmp	r5, #83	; 0x53
    ea46:	d049      	beq.n	eadc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7c>
    ea48:	2d5f      	cmp	r5, #95	; 0x5f
    ea4a:	d049      	beq.n	eae0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x80>
    ea4c:	2d24      	cmp	r5, #36	; 0x24
    ea4e:	f47f aedd 	bne.w	e80c <d_encoding+0x2c>
    ea52:	4620      	mov	r0, r4
    ea54:	f7fe f9ba 	bl	cdcc <d_make_empty>
    ea58:	b108      	cbz	r0, ea5e <d_encoding+0x27e>
    ea5a:	7007      	strb	r7, [r0, #0]
    ea5c:	6085      	str	r5, [r0, #8]
    ea5e:	68e5      	ldr	r5, [r4, #12]
    ea60:	3e02      	subs	r6, #2
    ea62:	3502      	adds	r5, #2
    ea64:	60e5      	str	r5, [r4, #12]
    ea66:	2800      	cmp	r0, #0
    ea68:	f43f aed0 	beq.w	e80c <d_encoding+0x2c>
    ea6c:	f1b8 0f00 	cmp.w	r8, #0
    ea70:	d008      	beq.n	ea84 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x24>
    ea72:	4603      	mov	r3, r0
    ea74:	4642      	mov	r2, r8
    ea76:	2140      	movs	r1, #64	; 0x40
    ea78:	4620      	mov	r0, r4
    ea7a:	f7fe f9b6 	bl	cdea <d_make_comp>
    ea7e:	2800      	cmp	r0, #0
    ea80:	f43f aec4 	beq.w	e80c <d_encoding+0x2c>
    ea84:	2e00      	cmp	r6, #0
    ea86:	dc27      	bgt.n	ead8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x78>
    ea88:	2300      	movs	r3, #0
    ea8a:	4602      	mov	r2, r0
    ea8c:	213f      	movs	r1, #63	; 0x3f
    ea8e:	e73f      	b.n	e910 <d_encoding+0x130>
    ea90:	4620      	mov	r0, r4
    ea92:	f7ff fd61 	bl	e558 <d_name>
    ea96:	2300      	movs	r3, #0
    ea98:	4602      	mov	r2, r0
    ea9a:	2113      	movs	r1, #19
    ea9c:	e738      	b.n	e910 <d_encoding+0x130>
    ea9e:	2100      	movs	r1, #0
    eaa0:	4620      	mov	r0, r4
    eaa2:	f7ff fe9d 	bl	e7e0 <d_encoding>
    eaa6:	2300      	movs	r3, #0
    eaa8:	4602      	mov	r2, r0
    eaaa:	2117      	movs	r1, #23
    eaac:	e730      	b.n	e910 <d_encoding+0x130>
    eaae:	789a      	ldrb	r2, [r3, #2]
    eab0:	2100      	movs	r1, #0
    eab2:	4620      	mov	r0, r4
    eab4:	b152      	cbz	r2, eacc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6c>
    eab6:	1cda      	adds	r2, r3, #3
    eab8:	60e2      	str	r2, [r4, #12]
    eaba:	789b      	ldrb	r3, [r3, #2]
    eabc:	2b6e      	cmp	r3, #110	; 0x6e
    eabe:	d105      	bne.n	eacc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6c>
    eac0:	f7ff fe8e 	bl	e7e0 <d_encoding>
    eac4:	2300      	movs	r3, #0
    eac6:	4602      	mov	r2, r0
    eac8:	214a      	movs	r1, #74	; 0x4a
    eaca:	e721      	b.n	e910 <d_encoding+0x130>
    eacc:	f7ff fe88 	bl	e7e0 <d_encoding>
    ead0:	2300      	movs	r3, #0
    ead2:	4602      	mov	r2, r0
    ead4:	2149      	movs	r1, #73	; 0x49
    ead6:	e71b      	b.n	e910 <d_encoding+0x130>
    ead8:	4680      	mov	r8, r0
    eada:	e7ac      	b.n	ea36 <d_encoding+0x256>
    eadc:	252f      	movs	r5, #47	; 0x2f
    eade:	e7b8      	b.n	ea52 <d_encoding+0x272>
    eae0:	252e      	movs	r5, #46	; 0x2e
    eae2:	e7b6      	b.n	ea52 <d_encoding+0x272>
    eae4:	f04f 0900 	mov.w	r9, #0
    eae8:	f815 3009 	ldrb.w	r3, [r5, r9]
    eaec:	b12b      	cbz	r3, eafa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9a>
    eaee:	2b24      	cmp	r3, #36	; 0x24
    eaf0:	d003      	beq.n	eafa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9a>
    eaf2:	f109 0901 	add.w	r9, r9, #1
    eaf6:	45b1      	cmp	r9, r6
    eaf8:	dbf6      	blt.n	eae8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x88>
    eafa:	4629      	mov	r1, r5
    eafc:	464a      	mov	r2, r9
    eafe:	4620      	mov	r0, r4
    eb00:	eba6 0609 	sub.w	r6, r6, r9
    eb04:	f7fe f9b2 	bl	ce6c <d_make_name>
    eb08:	68e5      	ldr	r5, [r4, #12]
    eb0a:	444d      	add	r5, r9
    eb0c:	60e5      	str	r5, [r4, #12]
    eb0e:	e7aa      	b.n	ea66 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6>
    eb10:	f7ff fd22 	bl	e558 <d_name>
    eb14:	4605      	mov	r5, r0
    eb16:	2800      	cmp	r0, #0
    eb18:	f43f ae78 	beq.w	e80c <d_encoding+0x2c>
    eb1c:	b116      	cbz	r6, eb24 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc4>
    eb1e:	68a3      	ldr	r3, [r4, #8]
    eb20:	07d9      	lsls	r1, r3, #31
    eb22:	d511      	bpl.n	eb48 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe8>
    eb24:	68e3      	ldr	r3, [r4, #12]
    eb26:	781b      	ldrb	r3, [r3, #0]
    eb28:	2b00      	cmp	r3, #0
    eb2a:	f43f ae70 	beq.w	e80e <d_encoding+0x2e>
    eb2e:	2b45      	cmp	r3, #69	; 0x45
    eb30:	f43f ae6d 	beq.w	e80e <d_encoding+0x2e>
    eb34:	4629      	mov	r1, r5
    eb36:	780a      	ldrb	r2, [r1, #0]
    eb38:	2a04      	cmp	r2, #4
    eb3a:	d038      	beq.n	ebae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14e>
    eb3c:	d817      	bhi.n	eb6e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10e>
    eb3e:	2a02      	cmp	r2, #2
    eb40:	d020      	beq.n	eb84 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x124>
    eb42:	2100      	movs	r1, #0
    eb44:	e021      	b.n	eb8a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12a>
    eb46:	68ad      	ldr	r5, [r5, #8]
    eb48:	782b      	ldrb	r3, [r5, #0]
    eb4a:	4618      	mov	r0, r3
    eb4c:	f7fe f930 	bl	cdb0 <is_fnqual_component_type>
    eb50:	2800      	cmp	r0, #0
    eb52:	d1f8      	bne.n	eb46 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe6>
    eb54:	2b02      	cmp	r3, #2
    eb56:	f47f ae5a 	bne.w	e80e <d_encoding+0x2e>
    eb5a:	68eb      	ldr	r3, [r5, #12]
    eb5c:	7818      	ldrb	r0, [r3, #0]
    eb5e:	f7fe f927 	bl	cdb0 <is_fnqual_component_type>
    eb62:	2800      	cmp	r0, #0
    eb64:	f43f ae53 	beq.w	e80e <d_encoding+0x2e>
    eb68:	689b      	ldr	r3, [r3, #8]
    eb6a:	60eb      	str	r3, [r5, #12]
    eb6c:	e7f5      	b.n	eb5a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfa>
    eb6e:	2a4d      	cmp	r2, #77	; 0x4d
    eb70:	d003      	beq.n	eb7a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x11a>
    eb72:	d804      	bhi.n	eb7e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x11e>
    eb74:	3a1c      	subs	r2, #28
    eb76:	2a04      	cmp	r2, #4
    eb78:	d8e3      	bhi.n	eb42 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe2>
    eb7a:	6889      	ldr	r1, [r1, #8]
    eb7c:	e003      	b.n	eb86 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x126>
    eb7e:	3a4f      	subs	r2, #79	; 0x4f
    eb80:	2a01      	cmp	r2, #1
    eb82:	e7f9      	b.n	eb78 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x118>
    eb84:	68c9      	ldr	r1, [r1, #12]
    eb86:	2900      	cmp	r1, #0
    eb88:	d1d5      	bne.n	eb36 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd6>
    eb8a:	4620      	mov	r0, r4
    eb8c:	f7ff fb93 	bl	e2b6 <d_bare_function_type>
    eb90:	2800      	cmp	r0, #0
    eb92:	f43f ae3b 	beq.w	e80c <d_encoding+0x2c>
    eb96:	b936      	cbnz	r6, eba6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x146>
    eb98:	782b      	ldrb	r3, [r5, #0]
    eb9a:	2b02      	cmp	r3, #2
    eb9c:	d103      	bne.n	eba6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x146>
    eb9e:	7803      	ldrb	r3, [r0, #0]
    eba0:	2b29      	cmp	r3, #41	; 0x29
    eba2:	bf08      	it	eq
    eba4:	6086      	streq	r6, [r0, #8]
    eba6:	4603      	mov	r3, r0
    eba8:	462a      	mov	r2, r5
    ebaa:	2103      	movs	r1, #3
    ebac:	e6b0      	b.n	e910 <d_encoding+0x130>
    ebae:	688b      	ldr	r3, [r1, #8]
    ebb0:	b16b      	cbz	r3, ebce <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x16e>
    ebb2:	7819      	ldrb	r1, [r3, #0]
    ebb4:	2908      	cmp	r1, #8
    ebb6:	d806      	bhi.n	ebc6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x166>
    ebb8:	2906      	cmp	r1, #6
    ebba:	d80d      	bhi.n	ebd8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x178>
    ebbc:	3901      	subs	r1, #1
    ebbe:	2901      	cmp	r1, #1
    ebc0:	d908      	bls.n	ebd4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x174>
    ebc2:	2300      	movs	r3, #0
    ebc4:	e003      	b.n	ebce <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x16e>
    ebc6:	f1a1 0235 	sub.w	r2, r1, #53	; 0x35
    ebca:	4253      	negs	r3, r2
    ebcc:	4153      	adcs	r3, r2
    ebce:	f083 0101 	eor.w	r1, r3, #1
    ebd2:	e7da      	b.n	eb8a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12a>
    ebd4:	68db      	ldr	r3, [r3, #12]
    ebd6:	e7eb      	b.n	ebb0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x150>
    ebd8:	2301      	movs	r3, #1
    ebda:	e7f8      	b.n	ebce <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x16e>

0000ebdc <d_print_comp>:
    ebdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ebe0:	4604      	mov	r4, r0
    ebe2:	b097      	sub	sp, #92	; 0x5c
    ebe4:	460e      	mov	r6, r1
    ebe6:	4615      	mov	r5, r2
    ebe8:	b13a      	cbz	r2, ebfa <d_print_comp+0x1e>
    ebea:	6852      	ldr	r2, [r2, #4]
    ebec:	2a01      	cmp	r2, #1
    ebee:	dc04      	bgt.n	ebfa <d_print_comp+0x1e>
    ebf0:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
    ebf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    ebf8:	dd05      	ble.n	ec06 <d_print_comp+0x2a>
    ebfa:	2301      	movs	r3, #1
    ebfc:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    ec00:	b017      	add	sp, #92	; 0x5c
    ec02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ec06:	3301      	adds	r3, #1
    ec08:	3201      	adds	r2, #1
    ec0a:	a902      	add	r1, sp, #8
    ec0c:	9502      	str	r5, [sp, #8]
    ec0e:	606a      	str	r2, [r5, #4]
    ec10:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    ec14:	f8d0 8118 	ldr.w	r8, [r0, #280]	; 0x118
    ec18:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
    ec1c:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
    ec20:	9303      	str	r3, [sp, #12]
    ec22:	f1b8 0f00 	cmp.w	r8, #0
    ec26:	d15d      	bne.n	ece4 <d_print_comp+0x108>
    ec28:	782b      	ldrb	r3, [r5, #0]
    ec2a:	2b50      	cmp	r3, #80	; 0x50
    ec2c:	f200 8634 	bhi.w	f898 <d_print_comp+0xcbc>
    ec30:	e8df f013 	tbh	[pc, r3, lsl #1]
    ec34:	00b60051 	.word	0x00b60051
    ec38:	00dd00b6 	.word	0x00dd00b6
    ec3c:	01670120 	.word	0x01670120
    ec40:	019e0781 	.word	0x019e0781
    ec44:	01ac01a3 	.word	0x01ac01a3
    ec48:	01be01b5 	.word	0x01be01b5
    ec4c:	01d901d0 	.word	0x01d901d0
    ec50:	01eb01e2 	.word	0x01eb01e2
    ec54:	01fd01f4 	.word	0x01fd01f4
    ec58:	020f0206 	.word	0x020f0206
    ec5c:	02210218 	.word	0x02210218
    ec60:	02680256 	.word	0x02680256
    ec64:	02880283 	.word	0x02880283
    ec68:	02880288 	.word	0x02880288
    ec6c:	033e033e 	.word	0x033e033e
    ec70:	033e033e 	.word	0x033e033e
    ec74:	033e033e 	.word	0x033e033e
    ec78:	02c6033e 	.word	0x02c6033e
    ec7c:	033e02c6 	.word	0x033e02c6
    ec80:	0343033e 	.word	0x0343033e
    ec84:	0352034d 	.word	0x0352034d
    ec88:	03f2038f 	.word	0x03f2038f
    ec8c:	03f2040d 	.word	0x03f2040d
    ec90:	042d042d 	.word	0x042d042d
    ec94:	04590195 	.word	0x04590195
    ec98:	048a046e 	.word	0x048a046e
    ec9c:	04940632 	.word	0x04940632
    eca0:	04e404de 	.word	0x04e404de
    eca4:	0632059c 	.word	0x0632059c
    eca8:	06320637 	.word	0x06320637
    ecac:	068e0632 	.word	0x068e0632
    ecb0:	0715068e 	.word	0x0715068e
    ecb4:	072a071f 	.word	0x072a071f
    ecb8:	07480710 	.word	0x07480710
    ecbc:	079f0795 	.word	0x079f0795
    ecc0:	063207a9 	.word	0x063207a9
    ecc4:	027107ca 	.word	0x027107ca
    ecc8:	0756027a 	.word	0x0756027a
    eccc:	033e00a4 	.word	0x033e00a4
    ecd0:	033e07d8 	.word	0x033e07d8
    ecd4:	033e      	.short	0x033e
    ecd6:	0776      	lsls	r6, r6, #29
    ecd8:	68af      	ldr	r7, [r5, #8]
    ecda:	d40f      	bmi.n	ecfc <d_print_comp+0x120>
    ecdc:	68ea      	ldr	r2, [r5, #12]
    ecde:	4639      	mov	r1, r7
    ece0:	f7fe f983 	bl	cfea <d_append_buffer>
    ece4:	9b03      	ldr	r3, [sp, #12]
    ece6:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
    ecea:	686b      	ldr	r3, [r5, #4]
    ecec:	3b01      	subs	r3, #1
    ecee:	606b      	str	r3, [r5, #4]
    ecf0:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    ecf4:	3b01      	subs	r3, #1
    ecf6:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    ecfa:	e781      	b.n	ec00 <d_print_comp+0x24>
    ecfc:	68eb      	ldr	r3, [r5, #12]
    ecfe:	eb07 0803 	add.w	r8, r7, r3
    ed02:	45b8      	cmp	r8, r7
    ed04:	d9ee      	bls.n	ece4 <d_print_comp+0x108>
    ed06:	eba8 0307 	sub.w	r3, r8, r7
    ed0a:	7839      	ldrb	r1, [r7, #0]
    ed0c:	2b03      	cmp	r3, #3
    ed0e:	dd0c      	ble.n	ed2a <d_print_comp+0x14e>
    ed10:	295f      	cmp	r1, #95	; 0x5f
    ed12:	d10a      	bne.n	ed2a <d_print_comp+0x14e>
    ed14:	787b      	ldrb	r3, [r7, #1]
    ed16:	2b5f      	cmp	r3, #95	; 0x5f
    ed18:	d107      	bne.n	ed2a <d_print_comp+0x14e>
    ed1a:	78bb      	ldrb	r3, [r7, #2]
    ed1c:	2b55      	cmp	r3, #85	; 0x55
    ed1e:	d104      	bne.n	ed2a <d_print_comp+0x14e>
    ed20:	1cfe      	adds	r6, r7, #3
    ed22:	2000      	movs	r0, #0
    ed24:	45b0      	cmp	r8, r6
    ed26:	46b1      	mov	r9, r6
    ed28:	d804      	bhi.n	ed34 <d_print_comp+0x158>
    ed2a:	4620      	mov	r0, r4
    ed2c:	46b9      	mov	r9, r7
    ed2e:	f7fe f94a 	bl	cfc6 <d_append_char>
    ed32:	e020      	b.n	ed76 <d_print_comp+0x19a>
    ed34:	f816 3b01 	ldrb.w	r3, [r6], #1
    ed38:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    ed3c:	fa5f fc82 	uxtb.w	ip, r2
    ed40:	f1bc 0f09 	cmp.w	ip, #9
    ed44:	d803      	bhi.n	ed4e <d_print_comp+0x172>
    ed46:	4613      	mov	r3, r2
    ed48:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    ed4c:	e7ea      	b.n	ed24 <d_print_comp+0x148>
    ed4e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    ed52:	2a05      	cmp	r2, #5
    ed54:	d801      	bhi.n	ed5a <d_print_comp+0x17e>
    ed56:	3b37      	subs	r3, #55	; 0x37
    ed58:	e7f6      	b.n	ed48 <d_print_comp+0x16c>
    ed5a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
    ed5e:	2a05      	cmp	r2, #5
    ed60:	d801      	bhi.n	ed66 <d_print_comp+0x18a>
    ed62:	3b57      	subs	r3, #87	; 0x57
    ed64:	e7f0      	b.n	ed48 <d_print_comp+0x16c>
    ed66:	2b5f      	cmp	r3, #95	; 0x5f
    ed68:	d1df      	bne.n	ed2a <d_print_comp+0x14e>
    ed6a:	28ff      	cmp	r0, #255	; 0xff
    ed6c:	d8dd      	bhi.n	ed2a <d_print_comp+0x14e>
    ed6e:	b2c1      	uxtb	r1, r0
    ed70:	4620      	mov	r0, r4
    ed72:	f7fe f928 	bl	cfc6 <d_append_char>
    ed76:	f109 0701 	add.w	r7, r9, #1
    ed7a:	e7c2      	b.n	ed02 <d_print_comp+0x126>
    ed7c:	68aa      	ldr	r2, [r5, #8]
    ed7e:	4631      	mov	r1, r6
    ed80:	f7ff ff2c 	bl	ebdc <d_print_comp>
    ed84:	4620      	mov	r0, r4
    ed86:	49c0      	ldr	r1, [pc, #768]	; (f088 <d_print_comp+0x4ac>)
    ed88:	f7fe f948 	bl	d01c <d_append_string>
    ed8c:	4631      	mov	r1, r6
    ed8e:	4620      	mov	r0, r4
    ed90:	68ea      	ldr	r2, [r5, #12]
    ed92:	f7ff ff23 	bl	ebdc <d_print_comp>
    ed96:	215d      	movs	r1, #93	; 0x5d
    ed98:	4620      	mov	r0, r4
    ed9a:	f7fe f914 	bl	cfc6 <d_append_char>
    ed9e:	e7a1      	b.n	ece4 <d_print_comp+0x108>
    eda0:	68aa      	ldr	r2, [r5, #8]
    eda2:	4631      	mov	r1, r6
    eda4:	f7ff ff1a 	bl	ebdc <d_print_comp>
    eda8:	0770      	lsls	r0, r6, #29
    edaa:	d41b      	bmi.n	ede4 <d_print_comp+0x208>
    edac:	49b7      	ldr	r1, [pc, #732]	; (f08c <d_print_comp+0x4b0>)
    edae:	4620      	mov	r0, r4
    edb0:	f7fe f934 	bl	d01c <d_append_string>
    edb4:	68ef      	ldr	r7, [r5, #12]
    edb6:	783b      	ldrb	r3, [r7, #0]
    edb8:	2b47      	cmp	r3, #71	; 0x47
    edba:	d10d      	bne.n	edd8 <d_print_comp+0x1fc>
    edbc:	49b4      	ldr	r1, [pc, #720]	; (f090 <d_print_comp+0x4b4>)
    edbe:	4620      	mov	r0, r4
    edc0:	f7fe f92c 	bl	d01c <d_append_string>
    edc4:	68f9      	ldr	r1, [r7, #12]
    edc6:	4620      	mov	r0, r4
    edc8:	3101      	adds	r1, #1
    edca:	f7fe f934 	bl	d036 <d_append_num>
    edce:	49b1      	ldr	r1, [pc, #708]	; (f094 <d_print_comp+0x4b8>)
    edd0:	4620      	mov	r0, r4
    edd2:	f7fe f923 	bl	d01c <d_append_string>
    edd6:	68bf      	ldr	r7, [r7, #8]
    edd8:	463a      	mov	r2, r7
    edda:	4631      	mov	r1, r6
    eddc:	4620      	mov	r0, r4
    edde:	f7ff fefd 	bl	ebdc <d_print_comp>
    ede2:	e77f      	b.n	ece4 <d_print_comp+0x108>
    ede4:	212e      	movs	r1, #46	; 0x2e
    ede6:	4620      	mov	r0, r4
    ede8:	f7fe f8ed 	bl	cfc6 <d_append_char>
    edec:	e7e2      	b.n	edb4 <d_print_comp+0x1d8>
    edee:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
    edf2:	2200      	movs	r2, #0
    edf4:	68af      	ldr	r7, [r5, #8]
    edf6:	9301      	str	r3, [sp, #4]
    edf8:	ab06      	add	r3, sp, #24
    edfa:	4690      	mov	r8, r2
    edfc:	4611      	mov	r1, r2
    edfe:	4699      	mov	r9, r3
    ee00:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
    ee04:	b117      	cbz	r7, ee0c <d_print_comp+0x230>
    ee06:	f1b8 0f04 	cmp.w	r8, #4
    ee0a:	d103      	bne.n	ee14 <d_print_comp+0x238>
    ee0c:	2301      	movs	r3, #1
    ee0e:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    ee12:	e767      	b.n	ece4 <d_print_comp+0x108>
    ee14:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    ee18:	f108 0801 	add.w	r8, r8, #1
    ee1c:	f8d4 a110 	ldr.w	sl, [r4, #272]	; 0x110
    ee20:	601a      	str	r2, [r3, #0]
    ee22:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    ee26:	f8c3 a00c 	str.w	sl, [r3, #12]
    ee2a:	e9c3 7101 	strd	r7, r1, [r3, #4]
    ee2e:	783a      	ldrb	r2, [r7, #0]
    ee30:	4610      	mov	r0, r2
    ee32:	f7fd ffbd 	bl	cdb0 <is_fnqual_component_type>
    ee36:	3310      	adds	r3, #16
    ee38:	2800      	cmp	r0, #0
    ee3a:	f000 86e6 	beq.w	fc0a <d_print_comp+0x102e>
    ee3e:	68bf      	ldr	r7, [r7, #8]
    ee40:	e7e0      	b.n	ee04 <d_print_comp+0x228>
    ee42:	f1b8 0f04 	cmp.w	r8, #4
    ee46:	f109 0c10 	add.w	ip, r9, #16
    ee4a:	d0df      	beq.n	ee0c <d_print_comp+0x230>
    ee4c:	f1a9 0e10 	sub.w	lr, r9, #16
    ee50:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
    ee54:	f108 0801 	add.w	r8, r8, #1
    ee58:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
    ee5c:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
    ee60:	f84c ec10 	str.w	lr, [ip, #-16]
    ee64:	f849 ac04 	str.w	sl, [r9, #-4]
    ee68:	e949 7b03 	strd	r7, fp, [r9, #-12]
    ee6c:	46e1      	mov	r9, ip
    ee6e:	68bf      	ldr	r7, [r7, #8]
    ee70:	f000 bed9 	b.w	fc26 <d_print_comp+0x104a>
    ee74:	2300      	movs	r3, #0
    ee76:	0771      	lsls	r1, r6, #29
    ee78:	f8d0 8148 	ldr.w	r8, [r0, #328]	; 0x148
    ee7c:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
    ee80:	68af      	ldr	r7, [r5, #8]
    ee82:	f8c0 5148 	str.w	r5, [r0, #328]	; 0x148
    ee86:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    ee8a:	d517      	bpl.n	eebc <d_print_comp+0x2e0>
    ee8c:	783b      	ldrb	r3, [r7, #0]
    ee8e:	b9ab      	cbnz	r3, eebc <d_print_comp+0x2e0>
    ee90:	68fa      	ldr	r2, [r7, #12]
    ee92:	2a06      	cmp	r2, #6
    ee94:	d112      	bne.n	eebc <d_print_comp+0x2e0>
    ee96:	4980      	ldr	r1, [pc, #512]	; (f098 <d_print_comp+0x4bc>)
    ee98:	68b8      	ldr	r0, [r7, #8]
    ee9a:	f022 f8d1 	bl	31040 <strncmp>
    ee9e:	b968      	cbnz	r0, eebc <d_print_comp+0x2e0>
    eea0:	4631      	mov	r1, r6
    eea2:	4620      	mov	r0, r4
    eea4:	68ea      	ldr	r2, [r5, #12]
    eea6:	f7ff fe99 	bl	ebdc <d_print_comp>
    eeaa:	497c      	ldr	r1, [pc, #496]	; (f09c <d_print_comp+0x4c0>)
    eeac:	4620      	mov	r0, r4
    eeae:	f7fe f8b5 	bl	d01c <d_append_string>
    eeb2:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
    eeb6:	f8c4 8148 	str.w	r8, [r4, #328]	; 0x148
    eeba:	e713      	b.n	ece4 <d_print_comp+0x108>
    eebc:	463a      	mov	r2, r7
    eebe:	4631      	mov	r1, r6
    eec0:	4620      	mov	r0, r4
    eec2:	f7ff fe8b 	bl	ebdc <d_print_comp>
    eec6:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    eeca:	2b3c      	cmp	r3, #60	; 0x3c
    eecc:	d103      	bne.n	eed6 <d_print_comp+0x2fa>
    eece:	2120      	movs	r1, #32
    eed0:	4620      	mov	r0, r4
    eed2:	f7fe f878 	bl	cfc6 <d_append_char>
    eed6:	213c      	movs	r1, #60	; 0x3c
    eed8:	4620      	mov	r0, r4
    eeda:	f7fe f874 	bl	cfc6 <d_append_char>
    eede:	68ea      	ldr	r2, [r5, #12]
    eee0:	4631      	mov	r1, r6
    eee2:	4620      	mov	r0, r4
    eee4:	f7ff fe7a 	bl	ebdc <d_print_comp>
    eee8:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    eeec:	2b3e      	cmp	r3, #62	; 0x3e
    eeee:	d103      	bne.n	eef8 <d_print_comp+0x31c>
    eef0:	2120      	movs	r1, #32
    eef2:	4620      	mov	r0, r4
    eef4:	f7fe f867 	bl	cfc6 <d_append_char>
    eef8:	213e      	movs	r1, #62	; 0x3e
    eefa:	4620      	mov	r0, r4
    eefc:	f7fe f863 	bl	cfc6 <d_append_char>
    ef00:	e7d7      	b.n	eeb2 <d_print_comp+0x2d6>
    ef02:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
    ef06:	b14b      	cbz	r3, ef1c <d_print_comp+0x340>
    ef08:	2205      	movs	r2, #5
    ef0a:	4965      	ldr	r1, [pc, #404]	; (f0a0 <d_print_comp+0x4c4>)
    ef0c:	f7fe f86d 	bl	cfea <d_append_buffer>
    ef10:	68a9      	ldr	r1, [r5, #8]
    ef12:	4620      	mov	r0, r4
    ef14:	3101      	adds	r1, #1
    ef16:	f7fe f88e 	bl	d036 <d_append_num>
    ef1a:	e6e3      	b.n	ece4 <d_print_comp+0x108>
    ef1c:	f105 0108 	add.w	r1, r5, #8
    ef20:	f7fe fa19 	bl	d356 <d_lookup_template_argument.isra.0>
    ef24:	4602      	mov	r2, r0
    ef26:	b150      	cbz	r0, ef3e <d_print_comp+0x362>
    ef28:	7803      	ldrb	r3, [r0, #0]
    ef2a:	2b2f      	cmp	r3, #47	; 0x2f
    ef2c:	d10b      	bne.n	ef46 <d_print_comp+0x36a>
    ef2e:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    ef32:	2900      	cmp	r1, #0
    ef34:	db07      	blt.n	ef46 <d_print_comp+0x36a>
    ef36:	f7fe f9c7 	bl	d2c8 <d_index_template_argument.part.0>
    ef3a:	4602      	mov	r2, r0
    ef3c:	b918      	cbnz	r0, ef46 <d_print_comp+0x36a>
    ef3e:	2301      	movs	r3, #1
    ef40:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    ef44:	e6ce      	b.n	ece4 <d_print_comp+0x108>
    ef46:	f8d4 7110 	ldr.w	r7, [r4, #272]	; 0x110
    ef4a:	4631      	mov	r1, r6
    ef4c:	4620      	mov	r0, r4
    ef4e:	683b      	ldr	r3, [r7, #0]
    ef50:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    ef54:	f7ff fe42 	bl	ebdc <d_print_comp>
    ef58:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    ef5c:	e6c2      	b.n	ece4 <d_print_comp+0x108>
    ef5e:	4951      	ldr	r1, [pc, #324]	; (f0a4 <d_print_comp+0x4c8>)
    ef60:	f7fe f85c 	bl	d01c <d_append_string>
    ef64:	68aa      	ldr	r2, [r5, #8]
    ef66:	4631      	mov	r1, r6
    ef68:	4620      	mov	r0, r4
    ef6a:	f7ff fe37 	bl	ebdc <d_print_comp>
    ef6e:	e6b9      	b.n	ece4 <d_print_comp+0x108>
    ef70:	68ea      	ldr	r2, [r5, #12]
    ef72:	4631      	mov	r1, r6
    ef74:	f7ff fe32 	bl	ebdc <d_print_comp>
    ef78:	e6b4      	b.n	ece4 <d_print_comp+0x108>
    ef7a:	217e      	movs	r1, #126	; 0x7e
    ef7c:	f7fe f823 	bl	cfc6 <d_append_char>
    ef80:	68ea      	ldr	r2, [r5, #12]
    ef82:	4631      	mov	r1, r6
    ef84:	4620      	mov	r0, r4
    ef86:	f7ff fe29 	bl	ebdc <d_print_comp>
    ef8a:	e6ab      	b.n	ece4 <d_print_comp+0x108>
    ef8c:	4946      	ldr	r1, [pc, #280]	; (f0a8 <d_print_comp+0x4cc>)
    ef8e:	f7fe f845 	bl	d01c <d_append_string>
    ef92:	68aa      	ldr	r2, [r5, #8]
    ef94:	4631      	mov	r1, r6
    ef96:	4620      	mov	r0, r4
    ef98:	f7ff fe20 	bl	ebdc <d_print_comp>
    ef9c:	e6a2      	b.n	ece4 <d_print_comp+0x108>
    ef9e:	4943      	ldr	r1, [pc, #268]	; (f0ac <d_print_comp+0x4d0>)
    efa0:	f7fe f83c 	bl	d01c <d_append_string>
    efa4:	68aa      	ldr	r2, [r5, #8]
    efa6:	4631      	mov	r1, r6
    efa8:	4620      	mov	r0, r4
    efaa:	f7ff fe17 	bl	ebdc <d_print_comp>
    efae:	e699      	b.n	ece4 <d_print_comp+0x108>
    efb0:	493f      	ldr	r1, [pc, #252]	; (f0b0 <d_print_comp+0x4d4>)
    efb2:	f7fe f833 	bl	d01c <d_append_string>
    efb6:	68aa      	ldr	r2, [r5, #8]
    efb8:	4631      	mov	r1, r6
    efba:	4620      	mov	r0, r4
    efbc:	f7ff fe0e 	bl	ebdc <d_print_comp>
    efc0:	4620      	mov	r0, r4
    efc2:	493c      	ldr	r1, [pc, #240]	; (f0b4 <d_print_comp+0x4d8>)
    efc4:	f7fe f82a 	bl	d01c <d_append_string>
    efc8:	68ea      	ldr	r2, [r5, #12]
    efca:	4631      	mov	r1, r6
    efcc:	4620      	mov	r0, r4
    efce:	f7ff fe05 	bl	ebdc <d_print_comp>
    efd2:	e687      	b.n	ece4 <d_print_comp+0x108>
    efd4:	4938      	ldr	r1, [pc, #224]	; (f0b8 <d_print_comp+0x4dc>)
    efd6:	f7fe f821 	bl	d01c <d_append_string>
    efda:	68aa      	ldr	r2, [r5, #8]
    efdc:	4631      	mov	r1, r6
    efde:	4620      	mov	r0, r4
    efe0:	f7ff fdfc 	bl	ebdc <d_print_comp>
    efe4:	e67e      	b.n	ece4 <d_print_comp+0x108>
    efe6:	4935      	ldr	r1, [pc, #212]	; (f0bc <d_print_comp+0x4e0>)
    efe8:	f7fe f818 	bl	d01c <d_append_string>
    efec:	68aa      	ldr	r2, [r5, #8]
    efee:	4631      	mov	r1, r6
    eff0:	4620      	mov	r0, r4
    eff2:	f7ff fdf3 	bl	ebdc <d_print_comp>
    eff6:	e675      	b.n	ece4 <d_print_comp+0x108>
    eff8:	4931      	ldr	r1, [pc, #196]	; (f0c0 <d_print_comp+0x4e4>)
    effa:	f7fe f80f 	bl	d01c <d_append_string>
    effe:	68aa      	ldr	r2, [r5, #8]
    f000:	4631      	mov	r1, r6
    f002:	4620      	mov	r0, r4
    f004:	f7ff fdea 	bl	ebdc <d_print_comp>
    f008:	e66c      	b.n	ece4 <d_print_comp+0x108>
    f00a:	492e      	ldr	r1, [pc, #184]	; (f0c4 <d_print_comp+0x4e8>)
    f00c:	f7fe f806 	bl	d01c <d_append_string>
    f010:	68aa      	ldr	r2, [r5, #8]
    f012:	4631      	mov	r1, r6
    f014:	4620      	mov	r0, r4
    f016:	f7ff fde1 	bl	ebdc <d_print_comp>
    f01a:	e663      	b.n	ece4 <d_print_comp+0x108>
    f01c:	492a      	ldr	r1, [pc, #168]	; (f0c8 <d_print_comp+0x4ec>)
    f01e:	f7fd fffd 	bl	d01c <d_append_string>
    f022:	68aa      	ldr	r2, [r5, #8]
    f024:	4631      	mov	r1, r6
    f026:	4620      	mov	r0, r4
    f028:	f7ff fdd8 	bl	ebdc <d_print_comp>
    f02c:	e65a      	b.n	ece4 <d_print_comp+0x108>
    f02e:	4927      	ldr	r1, [pc, #156]	; (f0cc <d_print_comp+0x4f0>)
    f030:	f7fd fff4 	bl	d01c <d_append_string>
    f034:	68aa      	ldr	r2, [r5, #8]
    f036:	4631      	mov	r1, r6
    f038:	4620      	mov	r0, r4
    f03a:	f7ff fdcf 	bl	ebdc <d_print_comp>
    f03e:	e651      	b.n	ece4 <d_print_comp+0x108>
    f040:	4923      	ldr	r1, [pc, #140]	; (f0d0 <d_print_comp+0x4f4>)
    f042:	f7fd ffeb 	bl	d01c <d_append_string>
    f046:	68aa      	ldr	r2, [r5, #8]
    f048:	4631      	mov	r1, r6
    f04a:	4620      	mov	r0, r4
    f04c:	f7ff fdc6 	bl	ebdc <d_print_comp>
    f050:	e648      	b.n	ece4 <d_print_comp+0x108>
    f052:	4920      	ldr	r1, [pc, #128]	; (f0d4 <d_print_comp+0x4f8>)
    f054:	f7fd ffe2 	bl	d01c <d_append_string>
    f058:	68aa      	ldr	r2, [r5, #8]
    f05a:	4631      	mov	r1, r6
    f05c:	4620      	mov	r0, r4
    f05e:	f7ff fdbd 	bl	ebdc <d_print_comp>
    f062:	e63f      	b.n	ece4 <d_print_comp+0x108>
    f064:	491c      	ldr	r1, [pc, #112]	; (f0d8 <d_print_comp+0x4fc>)
    f066:	f7fd ffd9 	bl	d01c <d_append_string>
    f06a:	68aa      	ldr	r2, [r5, #8]
    f06c:	4631      	mov	r1, r6
    f06e:	4620      	mov	r0, r4
    f070:	f7ff fdb4 	bl	ebdc <d_print_comp>
    f074:	e636      	b.n	ece4 <d_print_comp+0x108>
    f076:	4919      	ldr	r1, [pc, #100]	; (f0dc <d_print_comp+0x500>)
    f078:	f7fd ffd0 	bl	d01c <d_append_string>
    f07c:	68aa      	ldr	r2, [r5, #8]
    f07e:	4631      	mov	r1, r6
    f080:	4620      	mov	r0, r4
    f082:	f7ff fdab 	bl	ebdc <d_print_comp>
    f086:	e62d      	b.n	ece4 <d_print_comp+0x108>
    f088:	00036f37 	.word	0x00036f37
    f08c:	00036f4c 	.word	0x00036f4c
    f090:	00036f3d 	.word	0x00036f3d
    f094:	00036f4b 	.word	0x00036f4b
    f098:	00036f4f 	.word	0x00036f4f
    f09c:	000373f7 	.word	0x000373f7
    f0a0:	00036f56 	.word	0x00036f56
    f0a4:	00036f5c 	.word	0x00036f5c
    f0a8:	00036f91 	.word	0x00036f91
    f0ac:	00036f7b 	.word	0x00036f7b
    f0b0:	00036f84 	.word	0x00036f84
    f0b4:	00036f9d 	.word	0x00036f9d
    f0b8:	00036fa2 	.word	0x00036fa2
    f0bc:	00036fb0 	.word	0x00036fb0
    f0c0:	00036fc3 	.word	0x00036fc3
    f0c4:	00036fd4 	.word	0x00036fd4
    f0c8:	00036fd8 	.word	0x00036fd8
    f0cc:	00036fea 	.word	0x00036fea
    f0d0:	00037005 	.word	0x00037005
    f0d4:	00037015 	.word	0x00037015
    f0d8:	00037029 	.word	0x00037029
    f0dc:	00037040 	.word	0x00037040
    f0e0:	49b8      	ldr	r1, [pc, #736]	; (f3c4 <d_print_comp+0x7e8>)
    f0e2:	f7fd ff9b 	bl	d01c <d_append_string>
    f0e6:	68ea      	ldr	r2, [r5, #12]
    f0e8:	4631      	mov	r1, r6
    f0ea:	4620      	mov	r0, r4
    f0ec:	f7ff fd76 	bl	ebdc <d_print_comp>
    f0f0:	4620      	mov	r0, r4
    f0f2:	49b5      	ldr	r1, [pc, #724]	; (f3c8 <d_print_comp+0x7ec>)
    f0f4:	f7fd ff92 	bl	d01c <d_append_string>
    f0f8:	68aa      	ldr	r2, [r5, #8]
    f0fa:	4631      	mov	r1, r6
    f0fc:	4620      	mov	r0, r4
    f0fe:	f7ff fd6d 	bl	ebdc <d_print_comp>
    f102:	e5ef      	b.n	ece4 <d_print_comp+0x108>
    f104:	49b1      	ldr	r1, [pc, #708]	; (f3cc <d_print_comp+0x7f0>)
    f106:	f7fd ff89 	bl	d01c <d_append_string>
    f10a:	68aa      	ldr	r2, [r5, #8]
    f10c:	4631      	mov	r1, r6
    f10e:	4620      	mov	r0, r4
    f110:	f7ff fd64 	bl	ebdc <d_print_comp>
    f114:	e5e6      	b.n	ece4 <d_print_comp+0x108>
    f116:	49ae      	ldr	r1, [pc, #696]	; (f3d0 <d_print_comp+0x7f4>)
    f118:	f7fd ff80 	bl	d01c <d_append_string>
    f11c:	68aa      	ldr	r2, [r5, #8]
    f11e:	4631      	mov	r1, r6
    f120:	4620      	mov	r0, r4
    f122:	f7ff fd5b 	bl	ebdc <d_print_comp>
    f126:	e5dd      	b.n	ece4 <d_print_comp+0x108>
    f128:	49aa      	ldr	r1, [pc, #680]	; (f3d4 <d_print_comp+0x7f8>)
    f12a:	f7fd ff77 	bl	d01c <d_append_string>
    f12e:	68aa      	ldr	r2, [r5, #8]
    f130:	4631      	mov	r1, r6
    f132:	4620      	mov	r0, r4
    f134:	f7ff fd52 	bl	ebdc <d_print_comp>
    f138:	e5d4      	b.n	ece4 <d_print_comp+0x108>
    f13a:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    f13e:	f7fd ff54 	bl	cfea <d_append_buffer>
    f142:	e5cf      	b.n	ece4 <d_print_comp+0x108>
    f144:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    f148:	bb22      	cbnz	r2, f194 <d_print_comp+0x5b8>
    f14a:	4690      	mov	r8, r2
    f14c:	462f      	mov	r7, r5
    f14e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f152:	9707      	str	r7, [sp, #28]
    f154:	9306      	str	r3, [sp, #24]
    f156:	ab06      	add	r3, sp, #24
    f158:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    f15c:	2300      	movs	r3, #0
    f15e:	9308      	str	r3, [sp, #32]
    f160:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    f164:	9309      	str	r3, [sp, #36]	; 0x24
    f166:	b902      	cbnz	r2, f16a <d_print_comp+0x58e>
    f168:	68ba      	ldr	r2, [r7, #8]
    f16a:	4631      	mov	r1, r6
    f16c:	4620      	mov	r0, r4
    f16e:	f7ff fd35 	bl	ebdc <d_print_comp>
    f172:	9b08      	ldr	r3, [sp, #32]
    f174:	b923      	cbnz	r3, f180 <d_print_comp+0x5a4>
    f176:	463a      	mov	r2, r7
    f178:	4631      	mov	r1, r6
    f17a:	4620      	mov	r0, r4
    f17c:	f000 fd9e 	bl	fcbc <d_print_mod>
    f180:	9b06      	ldr	r3, [sp, #24]
    f182:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    f186:	f1b8 0f00 	cmp.w	r8, #0
    f18a:	f43f adab 	beq.w	ece4 <d_print_comp+0x108>
    f18e:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
    f192:	e5a7      	b.n	ece4 <d_print_comp+0x108>
    f194:	f8d2 8008 	ldr.w	r8, [r2, #8]
    f198:	f1b8 0f00 	cmp.w	r8, #0
    f19c:	d10e      	bne.n	f1bc <d_print_comp+0x5e0>
    f19e:	6851      	ldr	r1, [r2, #4]
    f1a0:	7809      	ldrb	r1, [r1, #0]
    f1a2:	f1a1 0019 	sub.w	r0, r1, #25
    f1a6:	2802      	cmp	r0, #2
    f1a8:	f200 8084 	bhi.w	f2b4 <d_print_comp+0x6d8>
    f1ac:	428b      	cmp	r3, r1
    f1ae:	d105      	bne.n	f1bc <d_print_comp+0x5e0>
    f1b0:	68aa      	ldr	r2, [r5, #8]
    f1b2:	4631      	mov	r1, r6
    f1b4:	4620      	mov	r0, r4
    f1b6:	f7ff fd11 	bl	ebdc <d_print_comp>
    f1ba:	e593      	b.n	ece4 <d_print_comp+0x108>
    f1bc:	6812      	ldr	r2, [r2, #0]
    f1be:	e7c3      	b.n	f148 <d_print_comp+0x56c>
    f1c0:	f8d0 8120 	ldr.w	r8, [r0, #288]	; 0x120
    f1c4:	68af      	ldr	r7, [r5, #8]
    f1c6:	f1b8 0f00 	cmp.w	r8, #0
    f1ca:	d165      	bne.n	f298 <d_print_comp+0x6bc>
    f1cc:	783b      	ldrb	r3, [r7, #0]
    f1ce:	2b05      	cmp	r3, #5
    f1d0:	d164      	bne.n	f29c <d_print_comp+0x6c0>
    f1d2:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
    f1d6:	4642      	mov	r2, r8
    f1d8:	429a      	cmp	r2, r3
    f1da:	db07      	blt.n	f1ec <d_print_comp+0x610>
    f1dc:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
    f1e0:	4293      	cmp	r3, r2
    f1e2:	db0d      	blt.n	f200 <d_print_comp+0x624>
    f1e4:	2301      	movs	r3, #1
    f1e6:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    f1ea:	e57b      	b.n	ece4 <d_print_comp+0x108>
    f1ec:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
    f1f0:	eb00 0cc2 	add.w	ip, r0, r2, lsl #3
    f1f4:	f850 0032 	ldr.w	r0, [r0, r2, lsl #3]
    f1f8:	4287      	cmp	r7, r0
    f1fa:	d039      	beq.n	f270 <d_print_comp+0x694>
    f1fc:	3201      	adds	r2, #1
    f1fe:	e7eb      	b.n	f1d8 <d_print_comp+0x5fc>
    f200:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
    f204:	1c58      	adds	r0, r3, #1
    f206:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
    f20a:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    f20e:	f841 7033 	str.w	r7, [r1, r3, lsl #3]
    f212:	1d13      	adds	r3, r2, #4
    f214:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
    f218:	b9ca      	cbnz	r2, f24e <d_print_comp+0x672>
    f21a:	601a      	str	r2, [r3, #0]
    f21c:	f107 0108 	add.w	r1, r7, #8
    f220:	4620      	mov	r0, r4
    f222:	f7fe f898 	bl	d356 <d_lookup_template_argument.isra.0>
    f226:	4607      	mov	r7, r0
    f228:	b150      	cbz	r0, f240 <d_print_comp+0x664>
    f22a:	7803      	ldrb	r3, [r0, #0]
    f22c:	2b2f      	cmp	r3, #47	; 0x2f
    f22e:	d135      	bne.n	f29c <d_print_comp+0x6c0>
    f230:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    f234:	2900      	cmp	r1, #0
    f236:	db31      	blt.n	f29c <d_print_comp+0x6c0>
    f238:	f7fe f846 	bl	d2c8 <d_index_template_argument.part.0>
    f23c:	4607      	mov	r7, r0
    f23e:	bb68      	cbnz	r0, f29c <d_print_comp+0x6c0>
    f240:	f1b8 0f00 	cmp.w	r8, #0
    f244:	f43f ae7b 	beq.w	ef3e <d_print_comp+0x362>
    f248:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
    f24c:	e677      	b.n	ef3e <d_print_comp+0x362>
    f24e:	e9d4 1050 	ldrd	r1, r0, [r4, #320]	; 0x140
    f252:	4281      	cmp	r1, r0
    f254:	dac6      	bge.n	f1e4 <d_print_comp+0x608>
    f256:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    f25a:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    f25e:	3101      	adds	r1, #1
    f260:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
    f264:	6851      	ldr	r1, [r2, #4]
    f266:	6041      	str	r1, [r0, #4]
    f268:	6018      	str	r0, [r3, #0]
    f26a:	4603      	mov	r3, r0
    f26c:	6812      	ldr	r2, [r2, #0]
    f26e:	e7d3      	b.n	f218 <d_print_comp+0x63c>
    f270:	460b      	mov	r3, r1
    f272:	681a      	ldr	r2, [r3, #0]
    f274:	4297      	cmp	r7, r2
    f276:	d0d1      	beq.n	f21c <d_print_comp+0x640>
    f278:	4295      	cmp	r5, r2
    f27a:	d101      	bne.n	f280 <d_print_comp+0x6a4>
    f27c:	428b      	cmp	r3, r1
    f27e:	d1cd      	bne.n	f21c <d_print_comp+0x640>
    f280:	685b      	ldr	r3, [r3, #4]
    f282:	2b00      	cmp	r3, #0
    f284:	d1f5      	bne.n	f272 <d_print_comp+0x696>
    f286:	f8dc 3004 	ldr.w	r3, [ip, #4]
    f28a:	f04f 0801 	mov.w	r8, #1
    f28e:	f8d4 9110 	ldr.w	r9, [r4, #272]	; 0x110
    f292:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    f296:	e7c1      	b.n	f21c <d_print_comp+0x640>
    f298:	f04f 0800 	mov.w	r8, #0
    f29c:	783b      	ldrb	r3, [r7, #0]
    f29e:	2b23      	cmp	r3, #35	; 0x23
    f2a0:	d009      	beq.n	f2b6 <d_print_comp+0x6da>
    f2a2:	782a      	ldrb	r2, [r5, #0]
    f2a4:	429a      	cmp	r2, r3
    f2a6:	d006      	beq.n	f2b6 <d_print_comp+0x6da>
    f2a8:	2b24      	cmp	r3, #36	; 0x24
    f2aa:	d103      	bne.n	f2b4 <d_print_comp+0x6d8>
    f2ac:	68ba      	ldr	r2, [r7, #8]
    f2ae:	e74d      	b.n	f14c <d_print_comp+0x570>
    f2b0:	f04f 0800 	mov.w	r8, #0
    f2b4:	462f      	mov	r7, r5
    f2b6:	2200      	movs	r2, #0
    f2b8:	e749      	b.n	f14e <d_print_comp+0x572>
    f2ba:	68ab      	ldr	r3, [r5, #8]
    f2bc:	0772      	lsls	r2, r6, #29
    f2be:	bf54      	ite	pl
    f2c0:	e9d3 1200 	ldrdpl	r1, r2, [r3]
    f2c4:	e9d3 1202 	ldrdmi	r1, r2, [r3, #8]
    f2c8:	f7fd fe8f 	bl	cfea <d_append_buffer>
    f2cc:	e50a      	b.n	ece4 <d_print_comp+0x108>
    f2ce:	68aa      	ldr	r2, [r5, #8]
    f2d0:	4631      	mov	r1, r6
    f2d2:	f7ff fc83 	bl	ebdc <d_print_comp>
    f2d6:	e505      	b.n	ece4 <d_print_comp+0x108>
    f2d8:	f016 0720 	ands.w	r7, r6, #32
    f2dc:	d007      	beq.n	f2ee <d_print_comp+0x712>
    f2de:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
    f2e2:	f105 020c 	add.w	r2, r5, #12
    f2e6:	f026 0160 	bic.w	r1, r6, #96	; 0x60
    f2ea:	f000 fd81 	bl	fdf0 <d_print_function_type.isra.0>
    f2ee:	68aa      	ldr	r2, [r5, #8]
    f2f0:	b35a      	cbz	r2, f34a <d_print_comp+0x76e>
    f2f2:	f026 0160 	bic.w	r1, r6, #96	; 0x60
    f2f6:	b11f      	cbz	r7, f300 <d_print_comp+0x724>
    f2f8:	4620      	mov	r0, r4
    f2fa:	f7ff fc6f 	bl	ebdc <d_print_comp>
    f2fe:	e4f1      	b.n	ece4 <d_print_comp+0x108>
    f300:	0673      	lsls	r3, r6, #25
    f302:	d418      	bmi.n	f336 <d_print_comp+0x75a>
    f304:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f308:	4620      	mov	r0, r4
    f30a:	9306      	str	r3, [sp, #24]
    f30c:	ab06      	add	r3, sp, #24
    f30e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    f312:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    f316:	e9cd 5707 	strd	r5, r7, [sp, #28]
    f31a:	9309      	str	r3, [sp, #36]	; 0x24
    f31c:	f7ff fc5e 	bl	ebdc <d_print_comp>
    f320:	9b06      	ldr	r3, [sp, #24]
    f322:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    f326:	9b08      	ldr	r3, [sp, #32]
    f328:	2b00      	cmp	r3, #0
    f32a:	f47f acdb 	bne.w	ece4 <d_print_comp+0x108>
    f32e:	2120      	movs	r1, #32
    f330:	4620      	mov	r0, r4
    f332:	f7fd fe48 	bl	cfc6 <d_append_char>
    f336:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f33a:	f105 020c 	add.w	r2, r5, #12
    f33e:	f026 0160 	bic.w	r1, r6, #96	; 0x60
    f342:	4620      	mov	r0, r4
    f344:	f000 fd54 	bl	fdf0 <d_print_function_type.isra.0>
    f348:	e4cc      	b.n	ece4 <d_print_comp+0x108>
    f34a:	2f00      	cmp	r7, #0
    f34c:	f47f acca 	bne.w	ece4 <d_print_comp+0x108>
    f350:	e7f1      	b.n	f336 <d_print_comp+0x75a>
    f352:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
    f356:	2300      	movs	r3, #0
    f358:	2701      	movs	r7, #1
    f35a:	f10d 0818 	add.w	r8, sp, #24
    f35e:	9308      	str	r3, [sp, #32]
    f360:	46cc      	mov	ip, r9
    f362:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
    f366:	46ba      	mov	sl, r7
    f368:	f8cd 9018 	str.w	r9, [sp, #24]
    f36c:	f8c0 8114 	str.w	r8, [r0, #276]	; 0x114
    f370:	9507      	str	r5, [sp, #28]
    f372:	9309      	str	r3, [sp, #36]	; 0x24
    f374:	f1bc 0f00 	cmp.w	ip, #0
    f378:	d005      	beq.n	f386 <d_print_comp+0x7aa>
    f37a:	f8dc 3004 	ldr.w	r3, [ip, #4]
    f37e:	781b      	ldrb	r3, [r3, #0]
    f380:	3b19      	subs	r3, #25
    f382:	2b02      	cmp	r3, #2
    f384:	d915      	bls.n	f3b2 <d_print_comp+0x7d6>
    f386:	68ea      	ldr	r2, [r5, #12]
    f388:	4631      	mov	r1, r6
    f38a:	4620      	mov	r0, r4
    f38c:	f7ff fc26 	bl	ebdc <d_print_comp>
    f390:	9b08      	ldr	r3, [sp, #32]
    f392:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
    f396:	2b00      	cmp	r3, #0
    f398:	f47f aca4 	bne.w	ece4 <d_print_comp+0x108>
    f39c:	2f01      	cmp	r7, #1
    f39e:	d132      	bne.n	f406 <d_print_comp+0x82a>
    f3a0:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f3a4:	f105 0208 	add.w	r2, r5, #8
    f3a8:	4631      	mov	r1, r6
    f3aa:	4620      	mov	r0, r4
    f3ac:	f000 fdf4 	bl	ff98 <d_print_array_type.isra.0>
    f3b0:	e498      	b.n	ece4 <d_print_comp+0x108>
    f3b2:	f8dc 3008 	ldr.w	r3, [ip, #8]
    f3b6:	bb1b      	cbnz	r3, f400 <d_print_comp+0x824>
    f3b8:	2f03      	cmp	r7, #3
    f3ba:	d90d      	bls.n	f3d8 <d_print_comp+0x7fc>
    f3bc:	2301      	movs	r3, #1
    f3be:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    f3c2:	e48f      	b.n	ece4 <d_print_comp+0x108>
    f3c4:	0003705a 	.word	0x0003705a
    f3c8:	00036f7e 	.word	0x00036f7e
    f3cc:	00037070 	.word	0x00037070
    f3d0:	00037086 	.word	0x00037086
    f3d4:	00037082 	.word	0x00037082
    f3d8:	ab16      	add	r3, sp, #88	; 0x58
    f3da:	eb03 1b07 	add.w	fp, r3, r7, lsl #4
    f3de:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
    f3e2:	f1ab 0e40 	sub.w	lr, fp, #64	; 0x40
    f3e6:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    f3ea:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f3ee:	f84b 3c40 	str.w	r3, [fp, #-64]
    f3f2:	eb08 1307 	add.w	r3, r8, r7, lsl #4
    f3f6:	3701      	adds	r7, #1
    f3f8:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    f3fc:	f8cc a008 	str.w	sl, [ip, #8]
    f400:	f8dc c000 	ldr.w	ip, [ip]
    f404:	e7b6      	b.n	f374 <d_print_comp+0x798>
    f406:	3f01      	subs	r7, #1
    f408:	4631      	mov	r1, r6
    f40a:	4620      	mov	r0, r4
    f40c:	eb08 1307 	add.w	r3, r8, r7, lsl #4
    f410:	685a      	ldr	r2, [r3, #4]
    f412:	f000 fc53 	bl	fcbc <d_print_mod>
    f416:	e7c1      	b.n	f39c <d_print_comp+0x7c0>
    f418:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
    f41c:	4631      	mov	r1, r6
    f41e:	68ea      	ldr	r2, [r5, #12]
    f420:	9306      	str	r3, [sp, #24]
    f422:	ab06      	add	r3, sp, #24
    f424:	9507      	str	r5, [sp, #28]
    f426:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    f42a:	2300      	movs	r3, #0
    f42c:	9308      	str	r3, [sp, #32]
    f42e:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
    f432:	9309      	str	r3, [sp, #36]	; 0x24
    f434:	f7ff fbd2 	bl	ebdc <d_print_comp>
    f438:	9b08      	ldr	r3, [sp, #32]
    f43a:	b923      	cbnz	r3, f446 <d_print_comp+0x86a>
    f43c:	462a      	mov	r2, r5
    f43e:	4631      	mov	r1, r6
    f440:	4620      	mov	r0, r4
    f442:	f000 fc3b 	bl	fcbc <d_print_mod>
    f446:	9b06      	ldr	r3, [sp, #24]
    f448:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    f44c:	e44a      	b.n	ece4 <d_print_comp+0x108>
    f44e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    f452:	b113      	cbz	r3, f45a <d_print_comp+0x87e>
    f454:	49b9      	ldr	r1, [pc, #740]	; (f73c <d_print_comp+0xb60>)
    f456:	f7fd fde1 	bl	d01c <d_append_string>
    f45a:	68aa      	ldr	r2, [r5, #8]
    f45c:	4bb8      	ldr	r3, [pc, #736]	; (f740 <d_print_comp+0xb64>)
    f45e:	6891      	ldr	r1, [r2, #8]
    f460:	4299      	cmp	r1, r3
    f462:	d007      	beq.n	f474 <d_print_comp+0x898>
    f464:	4631      	mov	r1, r6
    f466:	4620      	mov	r0, r4
    f468:	f7ff fbb8 	bl	ebdc <d_print_comp>
    f46c:	2120      	movs	r1, #32
    f46e:	4620      	mov	r0, r4
    f470:	f7fd fda9 	bl	cfc6 <d_append_char>
    f474:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
    f478:	b123      	cbz	r3, f484 <d_print_comp+0x8a8>
    f47a:	49b2      	ldr	r1, [pc, #712]	; (f744 <d_print_comp+0xb68>)
    f47c:	4620      	mov	r0, r4
    f47e:	f7fd fdcd 	bl	d01c <d_append_string>
    f482:	e42f      	b.n	ece4 <d_print_comp+0x108>
    f484:	49b0      	ldr	r1, [pc, #704]	; (f748 <d_print_comp+0xb6c>)
    f486:	4620      	mov	r0, r4
    f488:	f7fd fdc8 	bl	d01c <d_append_string>
    f48c:	e42a      	b.n	ece4 <d_print_comp+0x108>
    f48e:	68aa      	ldr	r2, [r5, #8]
    f490:	b112      	cbz	r2, f498 <d_print_comp+0x8bc>
    f492:	4631      	mov	r1, r6
    f494:	f7ff fba2 	bl	ebdc <d_print_comp>
    f498:	68eb      	ldr	r3, [r5, #12]
    f49a:	2b00      	cmp	r3, #0
    f49c:	f43f ac22 	beq.w	ece4 <d_print_comp+0x108>
    f4a0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    f4a4:	2bfd      	cmp	r3, #253	; 0xfd
    f4a6:	d902      	bls.n	f4ae <d_print_comp+0x8d2>
    f4a8:	4620      	mov	r0, r4
    f4aa:	f7fd fd7b 	bl	cfa4 <d_print_flush>
    f4ae:	49a7      	ldr	r1, [pc, #668]	; (f74c <d_print_comp+0xb70>)
    f4b0:	4620      	mov	r0, r4
    f4b2:	f7fd fdb3 	bl	d01c <d_append_string>
    f4b6:	68ea      	ldr	r2, [r5, #12]
    f4b8:	4631      	mov	r1, r6
    f4ba:	4620      	mov	r0, r4
    f4bc:	f8d4 8128 	ldr.w	r8, [r4, #296]	; 0x128
    f4c0:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
    f4c4:	f7ff fb8a 	bl	ebdc <d_print_comp>
    f4c8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    f4cc:	4598      	cmp	r8, r3
    f4ce:	f47f ac09 	bne.w	ece4 <d_print_comp+0x108>
    f4d2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    f4d6:	429f      	cmp	r7, r3
    f4d8:	f47f ac04 	bne.w	ece4 <d_print_comp+0x108>
    f4dc:	3f02      	subs	r7, #2
    f4de:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
    f4e2:	f7ff bbff 	b.w	ece4 <d_print_comp+0x108>
    f4e6:	e9d5 2702 	ldrd	r2, r7, [r5, #8]
    f4ea:	b112      	cbz	r2, f4f2 <d_print_comp+0x916>
    f4ec:	4631      	mov	r1, r6
    f4ee:	f7ff fb75 	bl	ebdc <d_print_comp>
    f4f2:	4620      	mov	r0, r4
    f4f4:	217b      	movs	r1, #123	; 0x7b
    f4f6:	f7fd fd66 	bl	cfc6 <d_append_char>
    f4fa:	4631      	mov	r1, r6
    f4fc:	4620      	mov	r0, r4
    f4fe:	463a      	mov	r2, r7
    f500:	f7ff fb6c 	bl	ebdc <d_print_comp>
    f504:	217d      	movs	r1, #125	; 0x7d
    f506:	4620      	mov	r0, r4
    f508:	f7fd fd5d 	bl	cfc6 <d_append_char>
    f50c:	f7ff bbea 	b.w	ece4 <d_print_comp+0x108>
    f510:	68af      	ldr	r7, [r5, #8]
    f512:	498f      	ldr	r1, [pc, #572]	; (f750 <d_print_comp+0xb74>)
    f514:	68be      	ldr	r6, [r7, #8]
    f516:	f7fd fd81 	bl	d01c <d_append_string>
    f51a:	687b      	ldr	r3, [r7, #4]
    f51c:	781b      	ldrb	r3, [r3, #0]
    f51e:	3b61      	subs	r3, #97	; 0x61
    f520:	2b19      	cmp	r3, #25
    f522:	d803      	bhi.n	f52c <d_print_comp+0x950>
    f524:	2120      	movs	r1, #32
    f526:	4620      	mov	r0, r4
    f528:	f7fd fd4d 	bl	cfc6 <d_append_char>
    f52c:	6879      	ldr	r1, [r7, #4]
    f52e:	4620      	mov	r0, r4
    f530:	198b      	adds	r3, r1, r6
    f532:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    f536:	2b20      	cmp	r3, #32
    f538:	bf08      	it	eq
    f53a:	f106 36ff 	addeq.w	r6, r6, #4294967295	; 0xffffffff
    f53e:	4632      	mov	r2, r6
    f540:	f7fd fd53 	bl	cfea <d_append_buffer>
    f544:	f7ff bbce 	b.w	ece4 <d_print_comp+0x108>
    f548:	4982      	ldr	r1, [pc, #520]	; (f754 <d_print_comp+0xb78>)
    f54a:	f7fd fd67 	bl	d01c <d_append_string>
    f54e:	68ea      	ldr	r2, [r5, #12]
    f550:	4631      	mov	r1, r6
    f552:	4620      	mov	r0, r4
    f554:	f7ff fb42 	bl	ebdc <d_print_comp>
    f558:	f7ff bbc4 	b.w	ece4 <d_print_comp+0x108>
    f55c:	497d      	ldr	r1, [pc, #500]	; (f754 <d_print_comp+0xb78>)
    f55e:	f7fd fd5d 	bl	d01c <d_append_string>
    f562:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    f566:	b133      	cbz	r3, f576 <d_print_comp+0x99a>
    f568:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
    f56c:	9307      	str	r3, [sp, #28]
    f56e:	9206      	str	r2, [sp, #24]
    f570:	aa06      	add	r2, sp, #24
    f572:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    f576:	68aa      	ldr	r2, [r5, #8]
    f578:	7813      	ldrb	r3, [r2, #0]
    f57a:	2b04      	cmp	r3, #4
    f57c:	d00d      	beq.n	f59a <d_print_comp+0x9be>
    f57e:	4631      	mov	r1, r6
    f580:	4620      	mov	r0, r4
    f582:	f7ff fb2b 	bl	ebdc <d_print_comp>
    f586:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    f58a:	2b00      	cmp	r3, #0
    f58c:	f43f abaa 	beq.w	ece4 <d_print_comp+0x108>
    f590:	9b06      	ldr	r3, [sp, #24]
    f592:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    f596:	f7ff bba5 	b.w	ece4 <d_print_comp+0x108>
    f59a:	6892      	ldr	r2, [r2, #8]
    f59c:	4631      	mov	r1, r6
    f59e:	4620      	mov	r0, r4
    f5a0:	f7ff fb1c 	bl	ebdc <d_print_comp>
    f5a4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    f5a8:	b113      	cbz	r3, f5b0 <d_print_comp+0x9d4>
    f5aa:	9b06      	ldr	r3, [sp, #24]
    f5ac:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    f5b0:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    f5b4:	2b3c      	cmp	r3, #60	; 0x3c
    f5b6:	d103      	bne.n	f5c0 <d_print_comp+0x9e4>
    f5b8:	2120      	movs	r1, #32
    f5ba:	4620      	mov	r0, r4
    f5bc:	f7fd fd03 	bl	cfc6 <d_append_char>
    f5c0:	213c      	movs	r1, #60	; 0x3c
    f5c2:	4620      	mov	r0, r4
    f5c4:	f7fd fcff 	bl	cfc6 <d_append_char>
    f5c8:	68ab      	ldr	r3, [r5, #8]
    f5ca:	4631      	mov	r1, r6
    f5cc:	4620      	mov	r0, r4
    f5ce:	68da      	ldr	r2, [r3, #12]
    f5d0:	f7ff fb04 	bl	ebdc <d_print_comp>
    f5d4:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    f5d8:	2b3e      	cmp	r3, #62	; 0x3e
    f5da:	d103      	bne.n	f5e4 <d_print_comp+0xa08>
    f5dc:	2120      	movs	r1, #32
    f5de:	4620      	mov	r0, r4
    f5e0:	f7fd fcf1 	bl	cfc6 <d_append_char>
    f5e4:	213e      	movs	r1, #62	; 0x3e
    f5e6:	4620      	mov	r0, r4
    f5e8:	f7fd fced 	bl	cfc6 <d_append_char>
    f5ec:	f7ff bb7a 	b.w	ece4 <d_print_comp+0x108>
    f5f0:	68aa      	ldr	r2, [r5, #8]
    f5f2:	4631      	mov	r1, r6
    f5f4:	f000 fd14 	bl	10020 <d_print_expr_op>
    f5f8:	f7ff bb74 	b.w	ece4 <d_print_comp+0x108>
    f5fc:	e9d5 a702 	ldrd	sl, r7, [r5, #8]
    f600:	f89a 3000 	ldrb.w	r3, [sl]
    f604:	2b32      	cmp	r3, #50	; 0x32
    f606:	d134      	bne.n	f672 <d_print_comp+0xa96>
    f608:	f8da 3008 	ldr.w	r3, [sl, #8]
    f60c:	4952      	ldr	r1, [pc, #328]	; (f758 <d_print_comp+0xb7c>)
    f60e:	f8d3 9000 	ldr.w	r9, [r3]
    f612:	4648      	mov	r0, r9
    f614:	f002 fa76 	bl	11b04 <strcmp>
    f618:	b958      	cbnz	r0, f632 <d_print_comp+0xa56>
    f61a:	783b      	ldrb	r3, [r7, #0]
    f61c:	2b03      	cmp	r3, #3
    f61e:	d108      	bne.n	f632 <d_print_comp+0xa56>
    f620:	68bb      	ldr	r3, [r7, #8]
    f622:	781a      	ldrb	r2, [r3, #0]
    f624:	2a01      	cmp	r2, #1
    f626:	d104      	bne.n	f632 <d_print_comp+0xa56>
    f628:	68fa      	ldr	r2, [r7, #12]
    f62a:	7812      	ldrb	r2, [r2, #0]
    f62c:	2a29      	cmp	r2, #41	; 0x29
    f62e:	bf08      	it	eq
    f630:	461f      	moveq	r7, r3
    f632:	783b      	ldrb	r3, [r7, #0]
    f634:	2b39      	cmp	r3, #57	; 0x39
    f636:	d10b      	bne.n	f650 <d_print_comp+0xa74>
    f638:	68ba      	ldr	r2, [r7, #8]
    f63a:	4631      	mov	r1, r6
    f63c:	4620      	mov	r0, r4
    f63e:	f000 fcfe 	bl	1003e <d_print_subexpr>
    f642:	4652      	mov	r2, sl
    f644:	4631      	mov	r1, r6
    f646:	4620      	mov	r0, r4
    f648:	f000 fcea 	bl	10020 <d_print_expr_op>
    f64c:	f7ff bb4a 	b.w	ece4 <d_print_comp+0x108>
    f650:	4942      	ldr	r1, [pc, #264]	; (f75c <d_print_comp+0xb80>)
    f652:	4648      	mov	r0, r9
    f654:	f002 fa56 	bl	11b04 <strcmp>
    f658:	b9f0      	cbnz	r0, f698 <d_print_comp+0xabc>
    f65a:	4639      	mov	r1, r7
    f65c:	4620      	mov	r0, r4
    f65e:	f7fd fe89 	bl	d374 <d_find_pack>
    f662:	f7fd fccf 	bl	d004 <d_pack_length>
    f666:	4601      	mov	r1, r0
    f668:	4620      	mov	r0, r4
    f66a:	f7fd fce4 	bl	d036 <d_append_num>
    f66e:	f7ff bb39 	b.w	ece4 <d_print_comp+0x108>
    f672:	2b34      	cmp	r3, #52	; 0x34
    f674:	d032      	beq.n	f6dc <d_print_comp+0xb00>
    f676:	f04f 0900 	mov.w	r9, #0
    f67a:	4652      	mov	r2, sl
    f67c:	4631      	mov	r1, r6
    f67e:	4620      	mov	r0, r4
    f680:	f000 fcce 	bl	10020 <d_print_expr_op>
    f684:	f1b9 0f00 	cmp.w	r9, #0
    f688:	d136      	bne.n	f6f8 <d_print_comp+0xb1c>
    f68a:	463a      	mov	r2, r7
    f68c:	4631      	mov	r1, r6
    f68e:	4620      	mov	r0, r4
    f690:	f000 fcd5 	bl	1003e <d_print_subexpr>
    f694:	f7ff bb26 	b.w	ece4 <d_print_comp+0x108>
    f698:	4931      	ldr	r1, [pc, #196]	; (f760 <d_print_comp+0xb84>)
    f69a:	4648      	mov	r0, r9
    f69c:	f002 fa32 	bl	11b04 <strcmp>
    f6a0:	4680      	mov	r8, r0
    f6a2:	2800      	cmp	r0, #0
    f6a4:	d1e9      	bne.n	f67a <d_print_comp+0xa9e>
    f6a6:	783b      	ldrb	r3, [r7, #0]
    f6a8:	2b2f      	cmp	r3, #47	; 0x2f
    f6aa:	d10e      	bne.n	f6ca <d_print_comp+0xaee>
    f6ac:	68bb      	ldr	r3, [r7, #8]
    f6ae:	b163      	cbz	r3, f6ca <d_print_comp+0xaee>
    f6b0:	781a      	ldrb	r2, [r3, #0]
    f6b2:	2a4b      	cmp	r2, #75	; 0x4b
    f6b4:	d10f      	bne.n	f6d6 <d_print_comp+0xafa>
    f6b6:	6899      	ldr	r1, [r3, #8]
    f6b8:	4620      	mov	r0, r4
    f6ba:	f7fd fe5b 	bl	d374 <d_find_pack>
    f6be:	f7fd fca1 	bl	d004 <d_pack_length>
    f6c2:	4480      	add	r8, r0
    f6c4:	68ff      	ldr	r7, [r7, #12]
    f6c6:	2f00      	cmp	r7, #0
    f6c8:	d1ed      	bne.n	f6a6 <d_print_comp+0xaca>
    f6ca:	4641      	mov	r1, r8
    f6cc:	4620      	mov	r0, r4
    f6ce:	f7fd fcb2 	bl	d036 <d_append_num>
    f6d2:	f7ff bb07 	b.w	ece4 <d_print_comp+0x108>
    f6d6:	f108 0801 	add.w	r8, r8, #1
    f6da:	e7f3      	b.n	f6c4 <d_print_comp+0xae8>
    f6dc:	2128      	movs	r1, #40	; 0x28
    f6de:	f7fd fc72 	bl	cfc6 <d_append_char>
    f6e2:	4631      	mov	r1, r6
    f6e4:	4620      	mov	r0, r4
    f6e6:	f8da 2008 	ldr.w	r2, [sl, #8]
    f6ea:	f7ff fa77 	bl	ebdc <d_print_comp>
    f6ee:	2129      	movs	r1, #41	; 0x29
    f6f0:	4620      	mov	r0, r4
    f6f2:	f7fd fc68 	bl	cfc6 <d_append_char>
    f6f6:	e7c8      	b.n	f68a <d_print_comp+0xaae>
    f6f8:	491a      	ldr	r1, [pc, #104]	; (f764 <d_print_comp+0xb88>)
    f6fa:	4648      	mov	r0, r9
    f6fc:	f002 fa02 	bl	11b04 <strcmp>
    f700:	b930      	cbnz	r0, f710 <d_print_comp+0xb34>
    f702:	463a      	mov	r2, r7
    f704:	4631      	mov	r1, r6
    f706:	4620      	mov	r0, r4
    f708:	f7ff fa68 	bl	ebdc <d_print_comp>
    f70c:	f7ff baea 	b.w	ece4 <d_print_comp+0x108>
    f710:	4915      	ldr	r1, [pc, #84]	; (f768 <d_print_comp+0xb8c>)
    f712:	4648      	mov	r0, r9
    f714:	f002 f9f6 	bl	11b04 <strcmp>
    f718:	2800      	cmp	r0, #0
    f71a:	d1b6      	bne.n	f68a <d_print_comp+0xaae>
    f71c:	4620      	mov	r0, r4
    f71e:	2128      	movs	r1, #40	; 0x28
    f720:	f7fd fc51 	bl	cfc6 <d_append_char>
    f724:	4631      	mov	r1, r6
    f726:	4620      	mov	r0, r4
    f728:	463a      	mov	r2, r7
    f72a:	f7ff fa57 	bl	ebdc <d_print_comp>
    f72e:	2129      	movs	r1, #41	; 0x29
    f730:	4620      	mov	r0, r4
    f732:	f7fd fc48 	bl	cfc6 <d_append_char>
    f736:	f7ff bad5 	b.w	ece4 <d_print_comp+0x108>
    f73a:	bf00      	nop
    f73c:	0003709d 	.word	0x0003709d
    f740:	00031db0 	.word	0x00031db0
    f744:	000370a3 	.word	0x000370a3
    f748:	000370aa 	.word	0x000370aa
    f74c:	000370b1 	.word	0x000370b1
    f750:	000370b4 	.word	0x000370b4
    f754:	000370bd 	.word	0x000370bd
    f758:	00033cd9 	.word	0x00033cd9
    f75c:	000370c7 	.word	0x000370c7
    f760:	00036f0a 	.word	0x00036f0a
    f764:	000370ca 	.word	0x000370ca
    f768:	00037383 	.word	0x00037383
    f76c:	68eb      	ldr	r3, [r5, #12]
    f76e:	781b      	ldrb	r3, [r3, #0]
    f770:	2b39      	cmp	r3, #57	; 0x39
    f772:	f47f abe4 	bne.w	ef3e <d_print_comp+0x362>
    f776:	68a9      	ldr	r1, [r5, #8]
    f778:	6888      	ldr	r0, [r1, #8]
    f77a:	f7fd fd6f 	bl	d25c <op_is_new_cast.isra.0>
    f77e:	b1f0      	cbz	r0, f7be <d_print_comp+0xbe2>
    f780:	460a      	mov	r2, r1
    f782:	4620      	mov	r0, r4
    f784:	4631      	mov	r1, r6
    f786:	f000 fc4b 	bl	10020 <d_print_expr_op>
    f78a:	4620      	mov	r0, r4
    f78c:	213c      	movs	r1, #60	; 0x3c
    f78e:	f7fd fc1a 	bl	cfc6 <d_append_char>
    f792:	68eb      	ldr	r3, [r5, #12]
    f794:	4631      	mov	r1, r6
    f796:	4620      	mov	r0, r4
    f798:	689a      	ldr	r2, [r3, #8]
    f79a:	f7ff fa1f 	bl	ebdc <d_print_comp>
    f79e:	4620      	mov	r0, r4
    f7a0:	49bc      	ldr	r1, [pc, #752]	; (fa94 <d_print_comp+0xeb8>)
    f7a2:	f7fd fc3b 	bl	d01c <d_append_string>
    f7a6:	68eb      	ldr	r3, [r5, #12]
    f7a8:	4631      	mov	r1, r6
    f7aa:	4620      	mov	r0, r4
    f7ac:	68da      	ldr	r2, [r3, #12]
    f7ae:	f7ff fa15 	bl	ebdc <d_print_comp>
    f7b2:	2129      	movs	r1, #41	; 0x29
    f7b4:	4620      	mov	r0, r4
    f7b6:	f7fd fc06 	bl	cfc6 <d_append_char>
    f7ba:	f7ff ba93 	b.w	ece4 <d_print_comp+0x108>
    f7be:	462a      	mov	r2, r5
    f7c0:	4631      	mov	r1, r6
    f7c2:	4620      	mov	r0, r4
    f7c4:	f000 fc59 	bl	1007a <d_maybe_print_fold_expression>
    f7c8:	2800      	cmp	r0, #0
    f7ca:	f47f aa8b 	bne.w	ece4 <d_print_comp+0x108>
    f7ce:	68ab      	ldr	r3, [r5, #8]
    f7d0:	781a      	ldrb	r2, [r3, #0]
    f7d2:	2a32      	cmp	r2, #50	; 0x32
    f7d4:	d10b      	bne.n	f7ee <d_print_comp+0xc12>
    f7d6:	689b      	ldr	r3, [r3, #8]
    f7d8:	689a      	ldr	r2, [r3, #8]
    f7da:	2a01      	cmp	r2, #1
    f7dc:	d107      	bne.n	f7ee <d_print_comp+0xc12>
    f7de:	685b      	ldr	r3, [r3, #4]
    f7e0:	781b      	ldrb	r3, [r3, #0]
    f7e2:	2b3e      	cmp	r3, #62	; 0x3e
    f7e4:	d103      	bne.n	f7ee <d_print_comp+0xc12>
    f7e6:	2128      	movs	r1, #40	; 0x28
    f7e8:	4620      	mov	r0, r4
    f7ea:	f7fd fbec 	bl	cfc6 <d_append_char>
    f7ee:	68ab      	ldr	r3, [r5, #8]
    f7f0:	49a9      	ldr	r1, [pc, #676]	; (fa98 <d_print_comp+0xebc>)
    f7f2:	689b      	ldr	r3, [r3, #8]
    f7f4:	6818      	ldr	r0, [r3, #0]
    f7f6:	f002 f985 	bl	11b04 <strcmp>
    f7fa:	68eb      	ldr	r3, [r5, #12]
    f7fc:	689a      	ldr	r2, [r3, #8]
    f7fe:	b950      	cbnz	r0, f816 <d_print_comp+0xc3a>
    f800:	7813      	ldrb	r3, [r2, #0]
    f802:	2b03      	cmp	r3, #3
    f804:	d107      	bne.n	f816 <d_print_comp+0xc3a>
    f806:	68d3      	ldr	r3, [r2, #12]
    f808:	781b      	ldrb	r3, [r3, #0]
    f80a:	2b29      	cmp	r3, #41	; 0x29
    f80c:	bf1c      	itt	ne
    f80e:	2301      	movne	r3, #1
    f810:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
    f814:	6892      	ldr	r2, [r2, #8]
    f816:	4631      	mov	r1, r6
    f818:	4620      	mov	r0, r4
    f81a:	f000 fc10 	bl	1003e <d_print_subexpr>
    f81e:	68af      	ldr	r7, [r5, #8]
    f820:	499e      	ldr	r1, [pc, #632]	; (fa9c <d_print_comp+0xec0>)
    f822:	68bb      	ldr	r3, [r7, #8]
    f824:	f8d3 8000 	ldr.w	r8, [r3]
    f828:	4640      	mov	r0, r8
    f82a:	f002 f96b 	bl	11b04 <strcmp>
    f82e:	bb10      	cbnz	r0, f876 <d_print_comp+0xc9a>
    f830:	215b      	movs	r1, #91	; 0x5b
    f832:	4620      	mov	r0, r4
    f834:	f7fd fbc7 	bl	cfc6 <d_append_char>
    f838:	68eb      	ldr	r3, [r5, #12]
    f83a:	4631      	mov	r1, r6
    f83c:	4620      	mov	r0, r4
    f83e:	68da      	ldr	r2, [r3, #12]
    f840:	f7ff f9cc 	bl	ebdc <d_print_comp>
    f844:	215d      	movs	r1, #93	; 0x5d
    f846:	4620      	mov	r0, r4
    f848:	f7fd fbbd 	bl	cfc6 <d_append_char>
    f84c:	68ab      	ldr	r3, [r5, #8]
    f84e:	781a      	ldrb	r2, [r3, #0]
    f850:	2a32      	cmp	r2, #50	; 0x32
    f852:	f47f aa47 	bne.w	ece4 <d_print_comp+0x108>
    f856:	689b      	ldr	r3, [r3, #8]
    f858:	689a      	ldr	r2, [r3, #8]
    f85a:	2a01      	cmp	r2, #1
    f85c:	f47f aa42 	bne.w	ece4 <d_print_comp+0x108>
    f860:	685b      	ldr	r3, [r3, #4]
    f862:	781b      	ldrb	r3, [r3, #0]
    f864:	2b3e      	cmp	r3, #62	; 0x3e
    f866:	f47f aa3d 	bne.w	ece4 <d_print_comp+0x108>
    f86a:	2129      	movs	r1, #41	; 0x29
    f86c:	4620      	mov	r0, r4
    f86e:	f7fd fbaa 	bl	cfc6 <d_append_char>
    f872:	f7ff ba37 	b.w	ece4 <d_print_comp+0x108>
    f876:	4988      	ldr	r1, [pc, #544]	; (fa98 <d_print_comp+0xebc>)
    f878:	4640      	mov	r0, r8
    f87a:	f002 f943 	bl	11b04 <strcmp>
    f87e:	b120      	cbz	r0, f88a <d_print_comp+0xcae>
    f880:	463a      	mov	r2, r7
    f882:	4631      	mov	r1, r6
    f884:	4620      	mov	r0, r4
    f886:	f000 fbcb 	bl	10020 <d_print_expr_op>
    f88a:	68eb      	ldr	r3, [r5, #12]
    f88c:	4631      	mov	r1, r6
    f88e:	4620      	mov	r0, r4
    f890:	68da      	ldr	r2, [r3, #12]
    f892:	f000 fbd4 	bl	1003e <d_print_subexpr>
    f896:	e7d9      	b.n	f84c <d_print_comp+0xc70>
    f898:	2301      	movs	r3, #1
    f89a:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
    f89e:	f7ff ba21 	b.w	ece4 <d_print_comp+0x108>
    f8a2:	68eb      	ldr	r3, [r5, #12]
    f8a4:	781a      	ldrb	r2, [r3, #0]
    f8a6:	2a3b      	cmp	r2, #59	; 0x3b
    f8a8:	f47f ab49 	bne.w	ef3e <d_print_comp+0x362>
    f8ac:	68db      	ldr	r3, [r3, #12]
    f8ae:	781b      	ldrb	r3, [r3, #0]
    f8b0:	2b3c      	cmp	r3, #60	; 0x3c
    f8b2:	f47f ab44 	bne.w	ef3e <d_print_comp+0x362>
    f8b6:	462a      	mov	r2, r5
    f8b8:	4631      	mov	r1, r6
    f8ba:	f000 fbde 	bl	1007a <d_maybe_print_fold_expression>
    f8be:	2800      	cmp	r0, #0
    f8c0:	f47f aa10 	bne.w	ece4 <d_print_comp+0x108>
    f8c4:	4976      	ldr	r1, [pc, #472]	; (faa0 <d_print_comp+0xec4>)
    f8c6:	e9d5 a302 	ldrd	sl, r3, [r5, #8]
    f8ca:	e9d3 8302 	ldrd	r8, r3, [r3, #8]
    f8ce:	e9d3 9702 	ldrd	r9, r7, [r3, #8]
    f8d2:	f8da 3008 	ldr.w	r3, [sl, #8]
    f8d6:	6818      	ldr	r0, [r3, #0]
    f8d8:	f002 f914 	bl	11b04 <strcmp>
    f8dc:	b9c8      	cbnz	r0, f912 <d_print_comp+0xd36>
    f8de:	4642      	mov	r2, r8
    f8e0:	4631      	mov	r1, r6
    f8e2:	4620      	mov	r0, r4
    f8e4:	f000 fbab 	bl	1003e <d_print_subexpr>
    f8e8:	4652      	mov	r2, sl
    f8ea:	4631      	mov	r1, r6
    f8ec:	4620      	mov	r0, r4
    f8ee:	f000 fb97 	bl	10020 <d_print_expr_op>
    f8f2:	464a      	mov	r2, r9
    f8f4:	4631      	mov	r1, r6
    f8f6:	4620      	mov	r0, r4
    f8f8:	f000 fba1 	bl	1003e <d_print_subexpr>
    f8fc:	4620      	mov	r0, r4
    f8fe:	4969      	ldr	r1, [pc, #420]	; (faa4 <d_print_comp+0xec8>)
    f900:	f7fd fb8c 	bl	d01c <d_append_string>
    f904:	463a      	mov	r2, r7
    f906:	4631      	mov	r1, r6
    f908:	4620      	mov	r0, r4
    f90a:	f000 fb98 	bl	1003e <d_print_subexpr>
    f90e:	f7ff b9e9 	b.w	ece4 <d_print_comp+0x108>
    f912:	4965      	ldr	r1, [pc, #404]	; (faa8 <d_print_comp+0xecc>)
    f914:	4620      	mov	r0, r4
    f916:	f7fd fb81 	bl	d01c <d_append_string>
    f91a:	f8d8 3008 	ldr.w	r3, [r8, #8]
    f91e:	b143      	cbz	r3, f932 <d_print_comp+0xd56>
    f920:	4631      	mov	r1, r6
    f922:	4620      	mov	r0, r4
    f924:	4642      	mov	r2, r8
    f926:	f000 fb8a 	bl	1003e <d_print_subexpr>
    f92a:	2120      	movs	r1, #32
    f92c:	4620      	mov	r0, r4
    f92e:	f7fd fb4a 	bl	cfc6 <d_append_char>
    f932:	464a      	mov	r2, r9
    f934:	4631      	mov	r1, r6
    f936:	4620      	mov	r0, r4
    f938:	f7ff f950 	bl	ebdc <d_print_comp>
    f93c:	2f00      	cmp	r7, #0
    f93e:	f43f a9d1 	beq.w	ece4 <d_print_comp+0x108>
    f942:	463a      	mov	r2, r7
    f944:	4631      	mov	r1, r6
    f946:	4620      	mov	r0, r4
    f948:	f000 fb79 	bl	1003e <d_print_subexpr>
    f94c:	f7ff b9ca 	b.w	ece4 <d_print_comp+0x108>
    f950:	68aa      	ldr	r2, [r5, #8]
    f952:	7811      	ldrb	r1, [r2, #0]
    f954:	2927      	cmp	r1, #39	; 0x27
    f956:	d17b      	bne.n	fa50 <d_print_comp+0xe74>
    f958:	6892      	ldr	r2, [r2, #8]
    f95a:	7c17      	ldrb	r7, [r2, #16]
    f95c:	2f06      	cmp	r7, #6
    f95e:	d816      	bhi.n	f98e <d_print_comp+0xdb2>
    f960:	b1bf      	cbz	r7, f992 <d_print_comp+0xdb6>
    f962:	68ea      	ldr	r2, [r5, #12]
    f964:	7812      	ldrb	r2, [r2, #0]
    f966:	b9a2      	cbnz	r2, f992 <d_print_comp+0xdb6>
    f968:	2b3e      	cmp	r3, #62	; 0x3e
    f96a:	d102      	bne.n	f972 <d_print_comp+0xd96>
    f96c:	212d      	movs	r1, #45	; 0x2d
    f96e:	f7fd fb2a 	bl	cfc6 <d_append_char>
    f972:	3f02      	subs	r7, #2
    f974:	68ea      	ldr	r2, [r5, #12]
    f976:	4631      	mov	r1, r6
    f978:	4620      	mov	r0, r4
    f97a:	f7ff f92f 	bl	ebdc <d_print_comp>
    f97e:	2f04      	cmp	r7, #4
    f980:	f63f a9b0 	bhi.w	ece4 <d_print_comp+0x108>
    f984:	e8df f007 	tbb	[pc, r7]
    f988:	3f39332d 	.word	0x3f39332d
    f98c:	45          	.byte	0x45
    f98d:	00          	.byte	0x00
    f98e:	2f07      	cmp	r7, #7
    f990:	d045      	beq.n	fa1e <d_print_comp+0xe42>
    f992:	2128      	movs	r1, #40	; 0x28
    f994:	4620      	mov	r0, r4
    f996:	f7fd fb16 	bl	cfc6 <d_append_char>
    f99a:	68aa      	ldr	r2, [r5, #8]
    f99c:	4631      	mov	r1, r6
    f99e:	4620      	mov	r0, r4
    f9a0:	f7ff f91c 	bl	ebdc <d_print_comp>
    f9a4:	2129      	movs	r1, #41	; 0x29
    f9a6:	4620      	mov	r0, r4
    f9a8:	f7fd fb0d 	bl	cfc6 <d_append_char>
    f9ac:	782b      	ldrb	r3, [r5, #0]
    f9ae:	2b3e      	cmp	r3, #62	; 0x3e
    f9b0:	d103      	bne.n	f9ba <d_print_comp+0xdde>
    f9b2:	212d      	movs	r1, #45	; 0x2d
    f9b4:	4620      	mov	r0, r4
    f9b6:	f7fd fb06 	bl	cfc6 <d_append_char>
    f9ba:	2f08      	cmp	r7, #8
    f9bc:	d103      	bne.n	f9c6 <d_print_comp+0xdea>
    f9be:	215b      	movs	r1, #91	; 0x5b
    f9c0:	4620      	mov	r0, r4
    f9c2:	f7fd fb00 	bl	cfc6 <d_append_char>
    f9c6:	68ea      	ldr	r2, [r5, #12]
    f9c8:	4631      	mov	r1, r6
    f9ca:	4620      	mov	r0, r4
    f9cc:	f7ff f906 	bl	ebdc <d_print_comp>
    f9d0:	2f08      	cmp	r7, #8
    f9d2:	f47f a987 	bne.w	ece4 <d_print_comp+0x108>
    f9d6:	215d      	movs	r1, #93	; 0x5d
    f9d8:	4620      	mov	r0, r4
    f9da:	f7fd faf4 	bl	cfc6 <d_append_char>
    f9de:	f7ff b981 	b.w	ece4 <d_print_comp+0x108>
    f9e2:	2175      	movs	r1, #117	; 0x75
    f9e4:	4620      	mov	r0, r4
    f9e6:	f7fd faee 	bl	cfc6 <d_append_char>
    f9ea:	f7ff b97b 	b.w	ece4 <d_print_comp+0x108>
    f9ee:	216c      	movs	r1, #108	; 0x6c
    f9f0:	4620      	mov	r0, r4
    f9f2:	f7fd fae8 	bl	cfc6 <d_append_char>
    f9f6:	f7ff b975 	b.w	ece4 <d_print_comp+0x108>
    f9fa:	492c      	ldr	r1, [pc, #176]	; (faac <d_print_comp+0xed0>)
    f9fc:	4620      	mov	r0, r4
    f9fe:	f7fd fb0d 	bl	d01c <d_append_string>
    fa02:	f7ff b96f 	b.w	ece4 <d_print_comp+0x108>
    fa06:	492a      	ldr	r1, [pc, #168]	; (fab0 <d_print_comp+0xed4>)
    fa08:	4620      	mov	r0, r4
    fa0a:	f7fd fb07 	bl	d01c <d_append_string>
    fa0e:	f7ff b969 	b.w	ece4 <d_print_comp+0x108>
    fa12:	4928      	ldr	r1, [pc, #160]	; (fab4 <d_print_comp+0xed8>)
    fa14:	4620      	mov	r0, r4
    fa16:	f7fd fb01 	bl	d01c <d_append_string>
    fa1a:	f7ff b963 	b.w	ece4 <d_print_comp+0x108>
    fa1e:	68ea      	ldr	r2, [r5, #12]
    fa20:	7811      	ldrb	r1, [r2, #0]
    fa22:	2900      	cmp	r1, #0
    fa24:	d1b5      	bne.n	f992 <d_print_comp+0xdb6>
    fa26:	68d1      	ldr	r1, [r2, #12]
    fa28:	2901      	cmp	r1, #1
    fa2a:	d1b2      	bne.n	f992 <d_print_comp+0xdb6>
    fa2c:	2b3d      	cmp	r3, #61	; 0x3d
    fa2e:	d1b0      	bne.n	f992 <d_print_comp+0xdb6>
    fa30:	6893      	ldr	r3, [r2, #8]
    fa32:	781b      	ldrb	r3, [r3, #0]
    fa34:	2b30      	cmp	r3, #48	; 0x30
    fa36:	d006      	beq.n	fa46 <d_print_comp+0xe6a>
    fa38:	2b31      	cmp	r3, #49	; 0x31
    fa3a:	d1aa      	bne.n	f992 <d_print_comp+0xdb6>
    fa3c:	491e      	ldr	r1, [pc, #120]	; (fab8 <d_print_comp+0xedc>)
    fa3e:	f7fd faed 	bl	d01c <d_append_string>
    fa42:	f7ff b94f 	b.w	ece4 <d_print_comp+0x108>
    fa46:	491d      	ldr	r1, [pc, #116]	; (fabc <d_print_comp+0xee0>)
    fa48:	f7fd fae8 	bl	d01c <d_append_string>
    fa4c:	f7ff b94a 	b.w	ece4 <d_print_comp+0x108>
    fa50:	2700      	movs	r7, #0
    fa52:	e79e      	b.n	f992 <d_print_comp+0xdb6>
    fa54:	68a9      	ldr	r1, [r5, #8]
    fa56:	f7fd faee 	bl	d036 <d_append_num>
    fa5a:	f7ff b943 	b.w	ece4 <d_print_comp+0x108>
    fa5e:	4918      	ldr	r1, [pc, #96]	; (fac0 <d_print_comp+0xee4>)
    fa60:	f7fd fadc 	bl	d01c <d_append_string>
    fa64:	68aa      	ldr	r2, [r5, #8]
    fa66:	4631      	mov	r1, r6
    fa68:	4620      	mov	r0, r4
    fa6a:	f7ff f8b7 	bl	ebdc <d_print_comp>
    fa6e:	f7ff b939 	b.w	ece4 <d_print_comp+0x108>
    fa72:	68aa      	ldr	r2, [r5, #8]
    fa74:	4631      	mov	r1, r6
    fa76:	f7ff f8b1 	bl	ebdc <d_print_comp>
    fa7a:	68ea      	ldr	r2, [r5, #12]
    fa7c:	4631      	mov	r1, r6
    fa7e:	4620      	mov	r0, r4
    fa80:	f7ff f8ac 	bl	ebdc <d_print_comp>
    fa84:	f7ff b92e 	b.w	ece4 <d_print_comp+0x108>
    fa88:	7a29      	ldrb	r1, [r5, #8]
    fa8a:	f7fd fa9c 	bl	cfc6 <d_append_char>
    fa8e:	f7ff b929 	b.w	ece4 <d_print_comp+0x108>
    fa92:	bf00      	nop
    fa94:	000370cd 	.word	0x000370cd
    fa98:	00036f01 	.word	0x00036f01
    fa9c:	000370d0 	.word	0x000370d0
    faa0:	00036f07 	.word	0x00036f07
    faa4:	000370d3 	.word	0x000370d3
    faa8:	000370d7 	.word	0x000370d7
    faac:	000370dc 	.word	0x000370dc
    fab0:	000370e0 	.word	0x000370e0
    fab4:	000370df 	.word	0x000370df
    fab8:	000370e3 	.word	0x000370e3
    fabc:	0003621d 	.word	0x0003621d
    fac0:	000370e8 	.word	0x000370e8
    fac4:	4972      	ldr	r1, [pc, #456]	; (fc90 <d_print_comp+0x10b4>)
    fac6:	f7fd faa9 	bl	d01c <d_append_string>
    faca:	4631      	mov	r1, r6
    facc:	4620      	mov	r0, r4
    face:	68aa      	ldr	r2, [r5, #8]
    fad0:	f7ff f884 	bl	ebdc <d_print_comp>
    fad4:	2129      	movs	r1, #41	; 0x29
    fad6:	4620      	mov	r0, r4
    fad8:	f7fd fa75 	bl	cfc6 <d_append_char>
    fadc:	f7ff b902 	b.w	ece4 <d_print_comp+0x108>
    fae0:	68a9      	ldr	r1, [r5, #8]
    fae2:	f7fd fc47 	bl	d374 <d_find_pack>
    fae6:	b950      	cbnz	r0, fafe <d_print_comp+0xf22>
    fae8:	4631      	mov	r1, r6
    faea:	4620      	mov	r0, r4
    faec:	68aa      	ldr	r2, [r5, #8]
    faee:	f000 faa6 	bl	1003e <d_print_subexpr>
    faf2:	4968      	ldr	r1, [pc, #416]	; (fc94 <d_print_comp+0x10b8>)
    faf4:	4620      	mov	r0, r4
    faf6:	f7fd fa91 	bl	d01c <d_append_string>
    fafa:	f7ff b8f3 	b.w	ece4 <d_print_comp+0x108>
    fafe:	f7fd fa81 	bl	d004 <d_pack_length>
    fb02:	f8df b1b4 	ldr.w	fp, [pc, #436]	; fcb8 <d_print_comp+0x10dc>
    fb06:	4607      	mov	r7, r0
    fb08:	f8d5 9008 	ldr.w	r9, [r5, #8]
    fb0c:	f100 3aff 	add.w	sl, r0, #4294967295	; 0xffffffff
    fb10:	4547      	cmp	r7, r8
    fb12:	f77f a8e7 	ble.w	ece4 <d_print_comp+0x108>
    fb16:	464a      	mov	r2, r9
    fb18:	4631      	mov	r1, r6
    fb1a:	4620      	mov	r0, r4
    fb1c:	f8c4 8124 	str.w	r8, [r4, #292]	; 0x124
    fb20:	f7ff f85c 	bl	ebdc <d_print_comp>
    fb24:	45d0      	cmp	r8, sl
    fb26:	da03      	bge.n	fb30 <d_print_comp+0xf54>
    fb28:	4659      	mov	r1, fp
    fb2a:	4620      	mov	r0, r4
    fb2c:	f7fd fa76 	bl	d01c <d_append_string>
    fb30:	f108 0801 	add.w	r8, r8, #1
    fb34:	e7ec      	b.n	fb10 <d_print_comp+0xf34>
    fb36:	68ae      	ldr	r6, [r5, #8]
    fb38:	b926      	cbnz	r6, fb44 <d_print_comp+0xf68>
    fb3a:	4957      	ldr	r1, [pc, #348]	; (fc98 <d_print_comp+0x10bc>)
    fb3c:	f7fd fa6e 	bl	d01c <d_append_string>
    fb40:	f7ff b8d0 	b.w	ece4 <d_print_comp+0x108>
    fb44:	4955      	ldr	r1, [pc, #340]	; (fc9c <d_print_comp+0x10c0>)
    fb46:	f7fd fa69 	bl	d01c <d_append_string>
    fb4a:	4631      	mov	r1, r6
    fb4c:	4620      	mov	r0, r4
    fb4e:	f7fd fa72 	bl	d036 <d_append_num>
    fb52:	217d      	movs	r1, #125	; 0x7d
    fb54:	4620      	mov	r0, r4
    fb56:	f7fd fa36 	bl	cfc6 <d_append_char>
    fb5a:	f7ff b8c3 	b.w	ece4 <d_print_comp+0x108>
    fb5e:	4950      	ldr	r1, [pc, #320]	; (fca0 <d_print_comp+0x10c4>)
    fb60:	f7fd fa5c 	bl	d01c <d_append_string>
    fb64:	68aa      	ldr	r2, [r5, #8]
    fb66:	4631      	mov	r1, r6
    fb68:	4620      	mov	r0, r4
    fb6a:	f7ff f837 	bl	ebdc <d_print_comp>
    fb6e:	f7ff b8b9 	b.w	ece4 <d_print_comp+0x108>
    fb72:	494c      	ldr	r1, [pc, #304]	; (fca4 <d_print_comp+0x10c8>)
    fb74:	f7fd fa52 	bl	d01c <d_append_string>
    fb78:	68aa      	ldr	r2, [r5, #8]
    fb7a:	4631      	mov	r1, r6
    fb7c:	4620      	mov	r0, r4
    fb7e:	f7ff f82d 	bl	ebdc <d_print_comp>
    fb82:	f7ff b8af 	b.w	ece4 <d_print_comp+0x108>
    fb86:	4948      	ldr	r1, [pc, #288]	; (fca8 <d_print_comp+0x10cc>)
    fb88:	f7fd fa48 	bl	d01c <d_append_string>
    fb8c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    fb90:	68aa      	ldr	r2, [r5, #8]
    fb92:	4631      	mov	r1, r6
    fb94:	3301      	adds	r3, #1
    fb96:	4620      	mov	r0, r4
    fb98:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    fb9c:	f7ff f81e 	bl	ebdc <d_print_comp>
    fba0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    fba4:	4620      	mov	r0, r4
    fba6:	4941      	ldr	r1, [pc, #260]	; (fcac <d_print_comp+0x10d0>)
    fba8:	3b01      	subs	r3, #1
    fbaa:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    fbae:	f7fd fa35 	bl	d01c <d_append_string>
    fbb2:	68e9      	ldr	r1, [r5, #12]
    fbb4:	4620      	mov	r0, r4
    fbb6:	3101      	adds	r1, #1
    fbb8:	f7fd fa3d 	bl	d036 <d_append_num>
    fbbc:	217d      	movs	r1, #125	; 0x7d
    fbbe:	4620      	mov	r0, r4
    fbc0:	f7fd fa01 	bl	cfc6 <d_append_char>
    fbc4:	f7ff b88e 	b.w	ece4 <d_print_comp+0x108>
    fbc8:	4939      	ldr	r1, [pc, #228]	; (fcb0 <d_print_comp+0x10d4>)
    fbca:	f7fd fa27 	bl	d01c <d_append_string>
    fbce:	68a9      	ldr	r1, [r5, #8]
    fbd0:	4620      	mov	r0, r4
    fbd2:	3101      	adds	r1, #1
    fbd4:	f7fd fa2f 	bl	d036 <d_append_num>
    fbd8:	217d      	movs	r1, #125	; 0x7d
    fbda:	4620      	mov	r0, r4
    fbdc:	f7fd f9f3 	bl	cfc6 <d_append_char>
    fbe0:	f7ff b880 	b.w	ece4 <d_print_comp+0x108>
    fbe4:	68aa      	ldr	r2, [r5, #8]
    fbe6:	4631      	mov	r1, r6
    fbe8:	f7fe fff8 	bl	ebdc <d_print_comp>
    fbec:	4620      	mov	r0, r4
    fbee:	4931      	ldr	r1, [pc, #196]	; (fcb4 <d_print_comp+0x10d8>)
    fbf0:	f7fd fa14 	bl	d01c <d_append_string>
    fbf4:	4631      	mov	r1, r6
    fbf6:	4620      	mov	r0, r4
    fbf8:	68ea      	ldr	r2, [r5, #12]
    fbfa:	f7fe ffef 	bl	ebdc <d_print_comp>
    fbfe:	215d      	movs	r1, #93	; 0x5d
    fc00:	4620      	mov	r0, r4
    fc02:	f7fd f9e0 	bl	cfc6 <d_append_char>
    fc06:	f7ff b86d 	b.w	ece4 <d_print_comp+0x108>
    fc0a:	2a02      	cmp	r2, #2
    fc0c:	d111      	bne.n	fc32 <d_print_comp+0x1056>
    fc0e:	68ff      	ldr	r7, [r7, #12]
    fc10:	783b      	ldrb	r3, [r7, #0]
    fc12:	2b47      	cmp	r3, #71	; 0x47
    fc14:	d103      	bne.n	fc1e <d_print_comp+0x1042>
    fc16:	68bf      	ldr	r7, [r7, #8]
    fc18:	2f00      	cmp	r7, #0
    fc1a:	f43f a8f7 	beq.w	ee0c <d_print_comp+0x230>
    fc1e:	eb09 1908 	add.w	r9, r9, r8, lsl #4
    fc22:	f04f 0b00 	mov.w	fp, #0
    fc26:	7838      	ldrb	r0, [r7, #0]
    fc28:	f7fd f8c2 	bl	cdb0 <is_fnqual_component_type>
    fc2c:	2800      	cmp	r0, #0
    fc2e:	f47f a908 	bne.w	ee42 <d_print_comp+0x266>
    fc32:	783b      	ldrb	r3, [r7, #0]
    fc34:	4631      	mov	r1, r6
    fc36:	68ea      	ldr	r2, [r5, #12]
    fc38:	4620      	mov	r0, r4
    fc3a:	2b04      	cmp	r3, #4
    fc3c:	bf01      	itttt	eq
    fc3e:	ab04      	addeq	r3, sp, #16
    fc40:	9705      	streq	r7, [sp, #20]
    fc42:	f8cd a010 	streq.w	sl, [sp, #16]
    fc46:	f8c4 3110 	streq.w	r3, [r4, #272]	; 0x110
    fc4a:	f7fe ffc7 	bl	ebdc <d_print_comp>
    fc4e:	783b      	ldrb	r3, [r7, #0]
    fc50:	2b04      	cmp	r3, #4
    fc52:	bf04      	itt	eq
    fc54:	9b04      	ldreq	r3, [sp, #16]
    fc56:	f8c4 3110 	streq.w	r3, [r4, #272]	; 0x110
    fc5a:	ab06      	add	r3, sp, #24
    fc5c:	eb03 1708 	add.w	r7, r3, r8, lsl #4
    fc60:	f857 3c08 	ldr.w	r3, [r7, #-8]
    fc64:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    fc68:	b94b      	cbnz	r3, fc7e <d_print_comp+0x10a2>
    fc6a:	2120      	movs	r1, #32
    fc6c:	4620      	mov	r0, r4
    fc6e:	f7fd f9aa 	bl	cfc6 <d_append_char>
    fc72:	f857 2c0c 	ldr.w	r2, [r7, #-12]
    fc76:	4631      	mov	r1, r6
    fc78:	4620      	mov	r0, r4
    fc7a:	f000 f81f 	bl	fcbc <d_print_mod>
    fc7e:	3f10      	subs	r7, #16
    fc80:	f1b8 0f00 	cmp.w	r8, #0
    fc84:	d1ec      	bne.n	fc60 <d_print_comp+0x1084>
    fc86:	9b01      	ldr	r3, [sp, #4]
    fc88:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    fc8c:	f7ff b82a 	b.w	ece4 <d_print_comp+0x108>
    fc90:	000370f7 	.word	0x000370f7
    fc94:	000371d2 	.word	0x000371d2
    fc98:	00037102 	.word	0x00037102
    fc9c:	00037107 	.word	0x00037107
    fca0:	0003710e 	.word	0x0003710e
    fca4:	0003712c 	.word	0x0003712c
    fca8:	00037149 	.word	0x00037149
    fcac:	00037152 	.word	0x00037152
    fcb0:	00037155 	.word	0x00037155
    fcb4:	00037164 	.word	0x00037164
    fcb8:	000370b1 	.word	0x000370b1

0000fcbc <d_print_mod>:
    fcbc:	b570      	push	{r4, r5, r6, lr}
    fcbe:	7813      	ldrb	r3, [r2, #0]
    fcc0:	4604      	mov	r4, r0
    fcc2:	460e      	mov	r6, r1
    fcc4:	4615      	mov	r5, r2
    fcc6:	2b03      	cmp	r3, #3
    fcc8:	d06e      	beq.n	fda8 <d_print_mod+0xec>
    fcca:	3b19      	subs	r3, #25
    fccc:	b2da      	uxtb	r2, r3
    fcce:	2a37      	cmp	r2, #55	; 0x37
    fcd0:	d874      	bhi.n	fdbc <d_print_mod+0x100>
    fcd2:	2b37      	cmp	r3, #55	; 0x37
    fcd4:	d872      	bhi.n	fdbc <d_print_mod+0x100>
    fcd6:	e8df f003 	tbb	[pc, r3]
    fcda:	221c      	.short	0x221c
    fcdc:	24221c24 	.word	0x24221c24
    fce0:	433c504b 	.word	0x433c504b
    fce4:	5755534e 	.word	0x5755534e
    fce8:	71717171 	.word	0x71717171
    fcec:	716c7159 	.word	0x716c7159
    fcf0:	71717171 	.word	0x71717171
    fcf4:	71717171 	.word	0x71717171
    fcf8:	71717171 	.word	0x71717171
    fcfc:	71717171 	.word	0x71717171
    fd00:	71717171 	.word	0x71717171
    fd04:	71717171 	.word	0x71717171
    fd08:	71717171 	.word	0x71717171
    fd0c:	71267171 	.word	0x71267171
    fd10:	3a28      	.short	0x3a28
    fd12:	492c      	ldr	r1, [pc, #176]	; (fdc4 <d_print_mod+0x108>)
    fd14:	4620      	mov	r0, r4
    fd16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fd1a:	f7fd b97f 	b.w	d01c <d_append_string>
    fd1e:	492a      	ldr	r1, [pc, #168]	; (fdc8 <d_print_mod+0x10c>)
    fd20:	e7f8      	b.n	fd14 <d_print_mod+0x58>
    fd22:	492a      	ldr	r1, [pc, #168]	; (fdcc <d_print_mod+0x110>)
    fd24:	e7f6      	b.n	fd14 <d_print_mod+0x58>
    fd26:	492a      	ldr	r1, [pc, #168]	; (fdd0 <d_print_mod+0x114>)
    fd28:	e7f4      	b.n	fd14 <d_print_mod+0x58>
    fd2a:	492a      	ldr	r1, [pc, #168]	; (fdd4 <d_print_mod+0x118>)
    fd2c:	4620      	mov	r0, r4
    fd2e:	f7fd f975 	bl	d01c <d_append_string>
    fd32:	68eb      	ldr	r3, [r5, #12]
    fd34:	2b00      	cmp	r3, #0
    fd36:	d043      	beq.n	fdc0 <d_print_mod+0x104>
    fd38:	2128      	movs	r1, #40	; 0x28
    fd3a:	4620      	mov	r0, r4
    fd3c:	f7fd f943 	bl	cfc6 <d_append_char>
    fd40:	68ea      	ldr	r2, [r5, #12]
    fd42:	4631      	mov	r1, r6
    fd44:	4620      	mov	r0, r4
    fd46:	f7fe ff49 	bl	ebdc <d_print_comp>
    fd4a:	2129      	movs	r1, #41	; 0x29
    fd4c:	e00b      	b.n	fd66 <d_print_mod+0xaa>
    fd4e:	4922      	ldr	r1, [pc, #136]	; (fdd8 <d_print_mod+0x11c>)
    fd50:	e7ec      	b.n	fd2c <d_print_mod+0x70>
    fd52:	2120      	movs	r1, #32
    fd54:	f7fd f937 	bl	cfc6 <d_append_char>
    fd58:	68ea      	ldr	r2, [r5, #12]
    fd5a:	4631      	mov	r1, r6
    fd5c:	4620      	mov	r0, r4
    fd5e:	e024      	b.n	fdaa <d_print_mod+0xee>
    fd60:	074b      	lsls	r3, r1, #29
    fd62:	d42d      	bmi.n	fdc0 <d_print_mod+0x104>
    fd64:	212a      	movs	r1, #42	; 0x2a
    fd66:	4620      	mov	r0, r4
    fd68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fd6c:	f7fd b92b 	b.w	cfc6 <d_append_char>
    fd70:	2120      	movs	r1, #32
    fd72:	f7fd f928 	bl	cfc6 <d_append_char>
    fd76:	2126      	movs	r1, #38	; 0x26
    fd78:	e7f5      	b.n	fd66 <d_print_mod+0xaa>
    fd7a:	2120      	movs	r1, #32
    fd7c:	f7fd f923 	bl	cfc6 <d_append_char>
    fd80:	4916      	ldr	r1, [pc, #88]	; (fddc <d_print_mod+0x120>)
    fd82:	e7c7      	b.n	fd14 <d_print_mod+0x58>
    fd84:	4916      	ldr	r1, [pc, #88]	; (fde0 <d_print_mod+0x124>)
    fd86:	e7c5      	b.n	fd14 <d_print_mod+0x58>
    fd88:	4916      	ldr	r1, [pc, #88]	; (fde4 <d_print_mod+0x128>)
    fd8a:	e7c3      	b.n	fd14 <d_print_mod+0x58>
    fd8c:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
    fd90:	2b28      	cmp	r3, #40	; 0x28
    fd92:	d002      	beq.n	fd9a <d_print_mod+0xde>
    fd94:	2120      	movs	r1, #32
    fd96:	f7fd f916 	bl	cfc6 <d_append_char>
    fd9a:	4631      	mov	r1, r6
    fd9c:	68aa      	ldr	r2, [r5, #8]
    fd9e:	4620      	mov	r0, r4
    fda0:	f7fe ff1c 	bl	ebdc <d_print_comp>
    fda4:	4910      	ldr	r1, [pc, #64]	; (fde8 <d_print_mod+0x12c>)
    fda6:	e7b5      	b.n	fd14 <d_print_mod+0x58>
    fda8:	6892      	ldr	r2, [r2, #8]
    fdaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fdae:	f7fe bf15 	b.w	ebdc <d_print_comp>
    fdb2:	490e      	ldr	r1, [pc, #56]	; (fdec <d_print_mod+0x130>)
    fdb4:	f7fd f932 	bl	d01c <d_append_string>
    fdb8:	68aa      	ldr	r2, [r5, #8]
    fdba:	e7c2      	b.n	fd42 <d_print_mod+0x86>
    fdbc:	462a      	mov	r2, r5
    fdbe:	e7cc      	b.n	fd5a <d_print_mod+0x9e>
    fdc0:	bd70      	pop	{r4, r5, r6, pc}
    fdc2:	bf00      	nop
    fdc4:	0003716d 	.word	0x0003716d
    fdc8:	00037177 	.word	0x00037177
    fdcc:	00037181 	.word	0x00037181
    fdd0:	00037188 	.word	0x00037188
    fdd4:	0003719a 	.word	0x0003719a
    fdd8:	000371a4 	.word	0x000371a4
    fddc:	000371ab 	.word	0x000371ab
    fde0:	000371ae 	.word	0x000371ae
    fde4:	000371b7 	.word	0x000371b7
    fde8:	000371c2 	.word	0x000371c2
    fdec:	000371c6 	.word	0x000371c6

0000fdf0 <d_print_function_type.isra.0>:
    fdf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fdf4:	4604      	mov	r4, r0
    fdf6:	460e      	mov	r6, r1
    fdf8:	4690      	mov	r8, r2
    fdfa:	461f      	mov	r7, r3
    fdfc:	461d      	mov	r5, r3
    fdfe:	bb3d      	cbnz	r5, fe50 <d_print_function_type.isra.0+0x60>
    fe00:	2300      	movs	r3, #0
    fe02:	f8d4 9114 	ldr.w	r9, [r4, #276]	; 0x114
    fe06:	463a      	mov	r2, r7
    fe08:	4631      	mov	r1, r6
    fe0a:	4620      	mov	r0, r4
    fe0c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    fe10:	f000 f849 	bl	fea6 <d_print_mod_list>
    fe14:	b11d      	cbz	r5, fe1e <d_print_function_type.isra.0+0x2e>
    fe16:	2129      	movs	r1, #41	; 0x29
    fe18:	4620      	mov	r0, r4
    fe1a:	f7fd f8d4 	bl	cfc6 <d_append_char>
    fe1e:	2128      	movs	r1, #40	; 0x28
    fe20:	4620      	mov	r0, r4
    fe22:	f7fd f8d0 	bl	cfc6 <d_append_char>
    fe26:	f8d8 2000 	ldr.w	r2, [r8]
    fe2a:	b11a      	cbz	r2, fe34 <d_print_function_type.isra.0+0x44>
    fe2c:	4631      	mov	r1, r6
    fe2e:	4620      	mov	r0, r4
    fe30:	f7fe fed4 	bl	ebdc <d_print_comp>
    fe34:	2129      	movs	r1, #41	; 0x29
    fe36:	4620      	mov	r0, r4
    fe38:	f7fd f8c5 	bl	cfc6 <d_append_char>
    fe3c:	2301      	movs	r3, #1
    fe3e:	463a      	mov	r2, r7
    fe40:	4631      	mov	r1, r6
    fe42:	4620      	mov	r0, r4
    fe44:	f000 f82f 	bl	fea6 <d_print_mod_list>
    fe48:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
    fe4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fe50:	68ab      	ldr	r3, [r5, #8]
    fe52:	b993      	cbnz	r3, fe7a <d_print_function_type.isra.0+0x8a>
    fe54:	686b      	ldr	r3, [r5, #4]
    fe56:	781b      	ldrb	r3, [r3, #0]
    fe58:	3b19      	subs	r3, #25
    fe5a:	2b12      	cmp	r3, #18
    fe5c:	d80b      	bhi.n	fe76 <d_print_function_type.isra.0+0x86>
    fe5e:	e8df f003 	tbb	[pc, r3]
    fe62:	1414      	.short	0x1414
    fe64:	0a0a0a14 	.word	0x0a0a0a14
    fe68:	0e140a0a 	.word	0x0e140a0a
    fe6c:	14140e0e 	.word	0x14140e0e
    fe70:	0a0a0a0a 	.word	0x0a0a0a0a
    fe74:	14          	.byte	0x14
    fe75:	00          	.byte	0x00
    fe76:	682d      	ldr	r5, [r5, #0]
    fe78:	e7c1      	b.n	fdfe <d_print_function_type.isra.0+0xe>
    fe7a:	2500      	movs	r5, #0
    fe7c:	e7c0      	b.n	fe00 <d_print_function_type.isra.0+0x10>
    fe7e:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    fe82:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    fe86:	2b28      	cmp	r3, #40	; 0x28
    fe88:	d007      	beq.n	fe9a <d_print_function_type.isra.0+0xaa>
    fe8a:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    fe8e:	2b20      	cmp	r3, #32
    fe90:	d003      	beq.n	fe9a <d_print_function_type.isra.0+0xaa>
    fe92:	2120      	movs	r1, #32
    fe94:	4620      	mov	r0, r4
    fe96:	f7fd f896 	bl	cfc6 <d_append_char>
    fe9a:	2128      	movs	r1, #40	; 0x28
    fe9c:	4620      	mov	r0, r4
    fe9e:	2501      	movs	r5, #1
    fea0:	f7fd f891 	bl	cfc6 <d_append_char>
    fea4:	e7ac      	b.n	fe00 <d_print_function_type.isra.0+0x10>

0000fea6 <d_print_mod_list>:
    fea6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    feaa:	4604      	mov	r4, r0
    feac:	460e      	mov	r6, r1
    feae:	4615      	mov	r5, r2
    feb0:	4698      	mov	r8, r3
    feb2:	f04f 0901 	mov.w	r9, #1
    feb6:	b305      	cbz	r5, fefa <d_print_mod_list+0x54>
    feb8:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    febc:	b9eb      	cbnz	r3, fefa <d_print_mod_list+0x54>
    febe:	68ab      	ldr	r3, [r5, #8]
    fec0:	b943      	cbnz	r3, fed4 <d_print_mod_list+0x2e>
    fec2:	686a      	ldr	r2, [r5, #4]
    fec4:	7811      	ldrb	r1, [r2, #0]
    fec6:	f1b8 0f00 	cmp.w	r8, #0
    feca:	d105      	bne.n	fed8 <d_print_mod_list+0x32>
    fecc:	4608      	mov	r0, r1
    fece:	f7fc ff6f 	bl	cdb0 <is_fnqual_component_type>
    fed2:	b108      	cbz	r0, fed8 <d_print_mod_list+0x32>
    fed4:	682d      	ldr	r5, [r5, #0]
    fed6:	e7ee      	b.n	feb6 <d_print_mod_list+0x10>
    fed8:	68eb      	ldr	r3, [r5, #12]
    feda:	2929      	cmp	r1, #41	; 0x29
    fedc:	f8d4 7110 	ldr.w	r7, [r4, #272]	; 0x110
    fee0:	f8c5 9008 	str.w	r9, [r5, #8]
    fee4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    fee8:	d109      	bne.n	fefe <d_print_mod_list+0x58>
    feea:	682b      	ldr	r3, [r5, #0]
    feec:	320c      	adds	r2, #12
    feee:	4631      	mov	r1, r6
    fef0:	4620      	mov	r0, r4
    fef2:	f7ff ff7d 	bl	fdf0 <d_print_function_type.isra.0>
    fef6:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    fefa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fefe:	292a      	cmp	r1, #42	; 0x2a
    ff00:	d106      	bne.n	ff10 <d_print_mod_list+0x6a>
    ff02:	682b      	ldr	r3, [r5, #0]
    ff04:	3208      	adds	r2, #8
    ff06:	4631      	mov	r1, r6
    ff08:	4620      	mov	r0, r4
    ff0a:	f000 f845 	bl	ff98 <d_print_array_type.isra.0>
    ff0e:	e7f2      	b.n	fef6 <d_print_mod_list+0x50>
    ff10:	2902      	cmp	r1, #2
    ff12:	d134      	bne.n	ff7e <d_print_mod_list+0xd8>
    ff14:	2300      	movs	r3, #0
    ff16:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
    ff1a:	6892      	ldr	r2, [r2, #8]
    ff1c:	4631      	mov	r1, r6
    ff1e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    ff22:	4620      	mov	r0, r4
    ff24:	f7fe fe5a 	bl	ebdc <d_print_comp>
    ff28:	0773      	lsls	r3, r6, #29
    ff2a:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
    ff2e:	d421      	bmi.n	ff74 <d_print_mod_list+0xce>
    ff30:	4916      	ldr	r1, [pc, #88]	; (ff8c <d_print_mod_list+0xe6>)
    ff32:	4620      	mov	r0, r4
    ff34:	f7fd f872 	bl	d01c <d_append_string>
    ff38:	686b      	ldr	r3, [r5, #4]
    ff3a:	68dd      	ldr	r5, [r3, #12]
    ff3c:	782b      	ldrb	r3, [r5, #0]
    ff3e:	2b47      	cmp	r3, #71	; 0x47
    ff40:	d10d      	bne.n	ff5e <d_print_mod_list+0xb8>
    ff42:	4913      	ldr	r1, [pc, #76]	; (ff90 <d_print_mod_list+0xea>)
    ff44:	4620      	mov	r0, r4
    ff46:	f7fd f869 	bl	d01c <d_append_string>
    ff4a:	68e9      	ldr	r1, [r5, #12]
    ff4c:	4620      	mov	r0, r4
    ff4e:	3101      	adds	r1, #1
    ff50:	f7fd f871 	bl	d036 <d_append_num>
    ff54:	490f      	ldr	r1, [pc, #60]	; (ff94 <d_print_mod_list+0xee>)
    ff56:	4620      	mov	r0, r4
    ff58:	f7fd f860 	bl	d01c <d_append_string>
    ff5c:	68ad      	ldr	r5, [r5, #8]
    ff5e:	7828      	ldrb	r0, [r5, #0]
    ff60:	f7fc ff26 	bl	cdb0 <is_fnqual_component_type>
    ff64:	2800      	cmp	r0, #0
    ff66:	d1f9      	bne.n	ff5c <d_print_mod_list+0xb6>
    ff68:	462a      	mov	r2, r5
    ff6a:	4631      	mov	r1, r6
    ff6c:	4620      	mov	r0, r4
    ff6e:	f7fe fe35 	bl	ebdc <d_print_comp>
    ff72:	e7c0      	b.n	fef6 <d_print_mod_list+0x50>
    ff74:	212e      	movs	r1, #46	; 0x2e
    ff76:	4620      	mov	r0, r4
    ff78:	f7fd f825 	bl	cfc6 <d_append_char>
    ff7c:	e7dc      	b.n	ff38 <d_print_mod_list+0x92>
    ff7e:	4631      	mov	r1, r6
    ff80:	4620      	mov	r0, r4
    ff82:	f7ff fe9b 	bl	fcbc <d_print_mod>
    ff86:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    ff8a:	e7a3      	b.n	fed4 <d_print_mod_list+0x2e>
    ff8c:	00036f4c 	.word	0x00036f4c
    ff90:	00036f3d 	.word	0x00036f3d
    ff94:	00036f4b 	.word	0x00036f4b

0000ff98 <d_print_array_type.isra.0>:
    ff98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    ff9c:	460f      	mov	r7, r1
    ff9e:	4690      	mov	r8, r2
    ffa0:	461e      	mov	r6, r3
    ffa2:	b9b3      	cbnz	r3, ffd2 <d_print_array_type.isra.0+0x3a>
    ffa4:	2120      	movs	r1, #32
    ffa6:	9001      	str	r0, [sp, #4]
    ffa8:	f7fd f80d 	bl	cfc6 <d_append_char>
    ffac:	9801      	ldr	r0, [sp, #4]
    ffae:	215b      	movs	r1, #91	; 0x5b
    ffb0:	9001      	str	r0, [sp, #4]
    ffb2:	f7fd f808 	bl	cfc6 <d_append_char>
    ffb6:	f8d8 2000 	ldr.w	r2, [r8]
    ffba:	9801      	ldr	r0, [sp, #4]
    ffbc:	b11a      	cbz	r2, ffc6 <d_print_array_type.isra.0+0x2e>
    ffbe:	4639      	mov	r1, r7
    ffc0:	f7fe fe0c 	bl	ebdc <d_print_comp>
    ffc4:	9801      	ldr	r0, [sp, #4]
    ffc6:	215d      	movs	r1, #93	; 0x5d
    ffc8:	b002      	add	sp, #8
    ffca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ffce:	f7fc bffa 	b.w	cfc6 <d_append_char>
    ffd2:	461c      	mov	r4, r3
    ffd4:	68a5      	ldr	r5, [r4, #8]
    ffd6:	b95d      	cbnz	r5, fff0 <d_print_array_type.isra.0+0x58>
    ffd8:	6863      	ldr	r3, [r4, #4]
    ffda:	781b      	ldrb	r3, [r3, #0]
    ffdc:	2b2a      	cmp	r3, #42	; 0x2a
    ffde:	d01a      	beq.n	10016 <d_print_array_type.isra.0+0x7e>
    ffe0:	2401      	movs	r4, #1
    ffe2:	490e      	ldr	r1, [pc, #56]	; (1001c <d_print_array_type.isra.0+0x84>)
    ffe4:	9001      	str	r0, [sp, #4]
    ffe6:	f7fd f819 	bl	d01c <d_append_string>
    ffea:	4625      	mov	r5, r4
    ffec:	9801      	ldr	r0, [sp, #4]
    ffee:	e003      	b.n	fff8 <d_print_array_type.isra.0+0x60>
    fff0:	6824      	ldr	r4, [r4, #0]
    fff2:	2c00      	cmp	r4, #0
    fff4:	d1ee      	bne.n	ffd4 <d_print_array_type.isra.0+0x3c>
    fff6:	2501      	movs	r5, #1
    fff8:	2300      	movs	r3, #0
    fffa:	4632      	mov	r2, r6
    fffc:	4639      	mov	r1, r7
    fffe:	9001      	str	r0, [sp, #4]
   10000:	f7ff ff51 	bl	fea6 <d_print_mod_list>
   10004:	9801      	ldr	r0, [sp, #4]
   10006:	b11c      	cbz	r4, 10010 <d_print_array_type.isra.0+0x78>
   10008:	2129      	movs	r1, #41	; 0x29
   1000a:	f7fc ffdc 	bl	cfc6 <d_append_char>
   1000e:	9801      	ldr	r0, [sp, #4]
   10010:	2d00      	cmp	r5, #0
   10012:	d1c7      	bne.n	ffa4 <d_print_array_type.isra.0+0xc>
   10014:	e7cb      	b.n	ffae <d_print_array_type.isra.0+0x16>
   10016:	462c      	mov	r4, r5
   10018:	e7ee      	b.n	fff8 <d_print_array_type.isra.0+0x60>
   1001a:	bf00      	nop
   1001c:	000370ff 	.word	0x000370ff

00010020 <d_print_expr_op>:
   10020:	b410      	push	{r4}
   10022:	7814      	ldrb	r4, [r2, #0]
   10024:	2c32      	cmp	r4, #50	; 0x32
   10026:	d106      	bne.n	10036 <d_print_expr_op+0x16>
   10028:	6893      	ldr	r3, [r2, #8]
   1002a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1002e:	e9d3 1201 	ldrd	r1, r2, [r3, #4]
   10032:	f7fc bfda 	b.w	cfea <d_append_buffer>
   10036:	f85d 4b04 	ldr.w	r4, [sp], #4
   1003a:	f7fe bdcf 	b.w	ebdc <d_print_comp>

0001003e <d_print_subexpr>:
   1003e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10040:	7813      	ldrb	r3, [r2, #0]
   10042:	4604      	mov	r4, r0
   10044:	460f      	mov	r7, r1
   10046:	4616      	mov	r6, r2
   10048:	2b01      	cmp	r3, #1
   1004a:	d913      	bls.n	10074 <d_print_subexpr+0x36>
   1004c:	2b31      	cmp	r3, #49	; 0x31
   1004e:	d011      	beq.n	10074 <d_print_subexpr+0x36>
   10050:	2b06      	cmp	r3, #6
   10052:	d00f      	beq.n	10074 <d_print_subexpr+0x36>
   10054:	2500      	movs	r5, #0
   10056:	2128      	movs	r1, #40	; 0x28
   10058:	f7fc ffb5 	bl	cfc6 <d_append_char>
   1005c:	4632      	mov	r2, r6
   1005e:	4639      	mov	r1, r7
   10060:	4620      	mov	r0, r4
   10062:	f7fe fdbb 	bl	ebdc <d_print_comp>
   10066:	b93d      	cbnz	r5, 10078 <d_print_subexpr+0x3a>
   10068:	4620      	mov	r0, r4
   1006a:	2129      	movs	r1, #41	; 0x29
   1006c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10070:	f7fc bfa9 	b.w	cfc6 <d_append_char>
   10074:	2501      	movs	r5, #1
   10076:	e7f1      	b.n	1005c <d_print_subexpr+0x1e>
   10078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001007a <d_maybe_print_fold_expression>:
   1007a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1007e:	6893      	ldr	r3, [r2, #8]
   10080:	460d      	mov	r5, r1
   10082:	4604      	mov	r4, r0
   10084:	689b      	ldr	r3, [r3, #8]
   10086:	681b      	ldr	r3, [r3, #0]
   10088:	7819      	ldrb	r1, [r3, #0]
   1008a:	2966      	cmp	r1, #102	; 0x66
   1008c:	d15c      	bne.n	10148 <d_maybe_print_fold_expression+0xce>
   1008e:	68d2      	ldr	r2, [r2, #12]
   10090:	f8d0 9124 	ldr.w	r9, [r0, #292]	; 0x124
   10094:	e9d2 7602 	ldrd	r7, r6, [r2, #8]
   10098:	7832      	ldrb	r2, [r6, #0]
   1009a:	2a3c      	cmp	r2, #60	; 0x3c
   1009c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   100a0:	bf08      	it	eq
   100a2:	e9d6 6802 	ldrdeq	r6, r8, [r6, #8]
   100a6:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
   100aa:	bf18      	it	ne
   100ac:	f04f 0800 	movne.w	r8, #0
   100b0:	785b      	ldrb	r3, [r3, #1]
   100b2:	2b6c      	cmp	r3, #108	; 0x6c
   100b4:	d01d      	beq.n	100f2 <d_maybe_print_fold_expression+0x78>
   100b6:	d808      	bhi.n	100ca <d_maybe_print_fold_expression+0x50>
   100b8:	2b4c      	cmp	r3, #76	; 0x4c
   100ba:	d02c      	beq.n	10116 <d_maybe_print_fold_expression+0x9c>
   100bc:	2b52      	cmp	r3, #82	; 0x52
   100be:	d02a      	beq.n	10116 <d_maybe_print_fold_expression+0x9c>
   100c0:	2001      	movs	r0, #1
   100c2:	f8c4 9124 	str.w	r9, [r4, #292]	; 0x124
   100c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   100ca:	2b72      	cmp	r3, #114	; 0x72
   100cc:	d1f8      	bne.n	100c0 <d_maybe_print_fold_expression+0x46>
   100ce:	2128      	movs	r1, #40	; 0x28
   100d0:	f7fc ff79 	bl	cfc6 <d_append_char>
   100d4:	4632      	mov	r2, r6
   100d6:	4629      	mov	r1, r5
   100d8:	4620      	mov	r0, r4
   100da:	f7ff ffb0 	bl	1003e <d_print_subexpr>
   100de:	4629      	mov	r1, r5
   100e0:	4620      	mov	r0, r4
   100e2:	463a      	mov	r2, r7
   100e4:	f7ff ff9c 	bl	10020 <d_print_expr_op>
   100e8:	4918      	ldr	r1, [pc, #96]	; (1014c <d_maybe_print_fold_expression+0xd2>)
   100ea:	4620      	mov	r0, r4
   100ec:	f7fc ff96 	bl	d01c <d_append_string>
   100f0:	e7e6      	b.n	100c0 <d_maybe_print_fold_expression+0x46>
   100f2:	4917      	ldr	r1, [pc, #92]	; (10150 <d_maybe_print_fold_expression+0xd6>)
   100f4:	f7fc ff92 	bl	d01c <d_append_string>
   100f8:	463a      	mov	r2, r7
   100fa:	4629      	mov	r1, r5
   100fc:	4620      	mov	r0, r4
   100fe:	f7ff ff8f 	bl	10020 <d_print_expr_op>
   10102:	4632      	mov	r2, r6
   10104:	4629      	mov	r1, r5
   10106:	4620      	mov	r0, r4
   10108:	f7ff ff99 	bl	1003e <d_print_subexpr>
   1010c:	2129      	movs	r1, #41	; 0x29
   1010e:	4620      	mov	r0, r4
   10110:	f7fc ff59 	bl	cfc6 <d_append_char>
   10114:	e7d4      	b.n	100c0 <d_maybe_print_fold_expression+0x46>
   10116:	2128      	movs	r1, #40	; 0x28
   10118:	4620      	mov	r0, r4
   1011a:	f7fc ff54 	bl	cfc6 <d_append_char>
   1011e:	4632      	mov	r2, r6
   10120:	4629      	mov	r1, r5
   10122:	4620      	mov	r0, r4
   10124:	f7ff ff8b 	bl	1003e <d_print_subexpr>
   10128:	463a      	mov	r2, r7
   1012a:	4629      	mov	r1, r5
   1012c:	4620      	mov	r0, r4
   1012e:	f7ff ff77 	bl	10020 <d_print_expr_op>
   10132:	4908      	ldr	r1, [pc, #32]	; (10154 <d_maybe_print_fold_expression+0xda>)
   10134:	4620      	mov	r0, r4
   10136:	f7fc ff71 	bl	d01c <d_append_string>
   1013a:	463a      	mov	r2, r7
   1013c:	4629      	mov	r1, r5
   1013e:	4620      	mov	r0, r4
   10140:	f7ff ff6e 	bl	10020 <d_print_expr_op>
   10144:	4642      	mov	r2, r8
   10146:	e7dd      	b.n	10104 <d_maybe_print_fold_expression+0x8a>
   10148:	2000      	movs	r0, #0
   1014a:	e7bc      	b.n	100c6 <d_maybe_print_fold_expression+0x4c>
   1014c:	000371d6 	.word	0x000371d6
   10150:	000371d1 	.word	0x000371d1
   10154:	000371d2 	.word	0x000371d2

00010158 <d_demangle_callback.constprop.0>:
   10158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1015c:	b0e5      	sub	sp, #404	; 0x194
   1015e:	4605      	mov	r5, r0
   10160:	4689      	mov	r9, r1
   10162:	4690      	mov	r8, r2
   10164:	f890 b000 	ldrb.w	fp, [r0]
   10168:	af00      	add	r7, sp, #0
   1016a:	f1bb 0f5f 	cmp.w	fp, #95	; 0x5f
   1016e:	d102      	bne.n	10176 <d_demangle_callback.constprop.0+0x1e>
   10170:	7843      	ldrb	r3, [r0, #1]
   10172:	2b5a      	cmp	r3, #90	; 0x5a
   10174:	d071      	beq.n	1025a <d_demangle_callback.constprop.0+0x102>
   10176:	2208      	movs	r2, #8
   10178:	499a      	ldr	r1, [pc, #616]	; (103e4 <d_demangle_callback.constprop.0+0x28c>)
   1017a:	4628      	mov	r0, r5
   1017c:	f020 ff60 	bl	31040 <strncmp>
   10180:	2800      	cmp	r0, #0
   10182:	d16d      	bne.n	10260 <d_demangle_callback.constprop.0+0x108>
   10184:	7a2b      	ldrb	r3, [r5, #8]
   10186:	2b2e      	cmp	r3, #46	; 0x2e
   10188:	d003      	beq.n	10192 <d_demangle_callback.constprop.0+0x3a>
   1018a:	2b5f      	cmp	r3, #95	; 0x5f
   1018c:	d001      	beq.n	10192 <d_demangle_callback.constprop.0+0x3a>
   1018e:	2b24      	cmp	r3, #36	; 0x24
   10190:	d166      	bne.n	10260 <d_demangle_callback.constprop.0+0x108>
   10192:	7a6b      	ldrb	r3, [r5, #9]
   10194:	2b44      	cmp	r3, #68	; 0x44
   10196:	d001      	beq.n	1019c <d_demangle_callback.constprop.0+0x44>
   10198:	2b49      	cmp	r3, #73	; 0x49
   1019a:	d161      	bne.n	10260 <d_demangle_callback.constprop.0+0x108>
   1019c:	7aaa      	ldrb	r2, [r5, #10]
   1019e:	2a5f      	cmp	r2, #95	; 0x5f
   101a0:	d15e      	bne.n	10260 <d_demangle_callback.constprop.0+0x108>
   101a2:	2b49      	cmp	r3, #73	; 0x49
   101a4:	bf0c      	ite	eq
   101a6:	f04f 0a02 	moveq.w	sl, #2
   101aa:	f04f 0a03 	movne.w	sl, #3
   101ae:	4628      	mov	r0, r5
   101b0:	2400      	movs	r4, #0
   101b2:	f001 fcb1 	bl	11b18 <strlen>
   101b6:	182b      	adds	r3, r5, r0
   101b8:	60bd      	str	r5, [r7, #8]
   101ba:	60fb      	str	r3, [r7, #12]
   101bc:	2311      	movs	r3, #17
   101be:	61fc      	str	r4, [r7, #28]
   101c0:	643c      	str	r4, [r7, #64]	; 0x40
   101c2:	e9c7 3504 	strd	r3, r5, [r7, #16]
   101c6:	0043      	lsls	r3, r0, #1
   101c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   101cc:	623b      	str	r3, [r7, #32]
   101ce:	e9c7 400a 	strd	r4, r0, [r7, #40]	; 0x28
   101d2:	e9c7 440c 	strd	r4, r4, [r7, #48]	; 0x30
   101d6:	e9c7 440e 	strd	r4, r4, [r7, #56]	; 0x38
   101da:	f200 80a0 	bhi.w	1031e <d_demangle_callback.constprop.0+0x1c6>
   101de:	466e      	mov	r6, sp
   101e0:	f1ba 0f01 	cmp.w	sl, #1
   101e4:	eba6 1340 	sub.w	r3, r6, r0, lsl #5
   101e8:	ea4f 0080 	mov.w	r0, r0, lsl #2
   101ec:	469d      	mov	sp, r3
   101ee:	61bb      	str	r3, [r7, #24]
   101f0:	f100 0007 	add.w	r0, r0, #7
   101f4:	f020 0007 	bic.w	r0, r0, #7
   101f8:	ebad 0d00 	sub.w	sp, sp, r0
   101fc:	f8c7 d024 	str.w	sp, [r7, #36]	; 0x24
   10200:	f000 8093 	beq.w	1032a <d_demangle_callback.constprop.0+0x1d2>
   10204:	f1aa 0302 	sub.w	r3, sl, #2
   10208:	2b01      	cmp	r3, #1
   1020a:	d82c      	bhi.n	10266 <d_demangle_callback.constprop.0+0x10e>
   1020c:	f1ba 0f02 	cmp.w	sl, #2
   10210:	7aeb      	ldrb	r3, [r5, #11]
   10212:	f105 010b 	add.w	r1, r5, #11
   10216:	bf0c      	ite	eq
   10218:	f04f 0a44 	moveq.w	sl, #68	; 0x44
   1021c:	f04f 0a45 	movne.w	sl, #69	; 0x45
   10220:	2b5f      	cmp	r3, #95	; 0x5f
   10222:	6179      	str	r1, [r7, #20]
   10224:	f000 80cf 	beq.w	103c6 <d_demangle_callback.constprop.0+0x26e>
   10228:	4608      	mov	r0, r1
   1022a:	6079      	str	r1, [r7, #4]
   1022c:	f001 fc74 	bl	11b18 <strlen>
   10230:	6879      	ldr	r1, [r7, #4]
   10232:	4602      	mov	r2, r0
   10234:	f107 0008 	add.w	r0, r7, #8
   10238:	f7fc fe18 	bl	ce6c <d_make_name>
   1023c:	4602      	mov	r2, r0
   1023e:	2300      	movs	r3, #0
   10240:	4651      	mov	r1, sl
   10242:	f107 0008 	add.w	r0, r7, #8
   10246:	f7fc fdd0 	bl	cdea <d_make_comp>
   1024a:	697d      	ldr	r5, [r7, #20]
   1024c:	4604      	mov	r4, r0
   1024e:	4628      	mov	r0, r5
   10250:	f001 fc62 	bl	11b18 <strlen>
   10254:	4428      	add	r0, r5
   10256:	6178      	str	r0, [r7, #20]
   10258:	e00a      	b.n	10270 <d_demangle_callback.constprop.0+0x118>
   1025a:	f04f 0a01 	mov.w	sl, #1
   1025e:	e7a6      	b.n	101ae <d_demangle_callback.constprop.0+0x56>
   10260:	f04f 0a00 	mov.w	sl, #0
   10264:	e7a3      	b.n	101ae <d_demangle_callback.constprop.0+0x56>
   10266:	f107 0008 	add.w	r0, r7, #8
   1026a:	f7fd fba1 	bl	d9b0 <d_type>
   1026e:	4604      	mov	r4, r0
   10270:	697b      	ldr	r3, [r7, #20]
   10272:	781d      	ldrb	r5, [r3, #0]
   10274:	2d00      	cmp	r5, #0
   10276:	f040 80b2 	bne.w	103de <d_demangle_callback.constprop.0+0x286>
   1027a:	2c00      	cmp	r4, #0
   1027c:	d04e      	beq.n	1031c <d_demangle_callback.constprop.0+0x1c4>
   1027e:	4621      	mov	r1, r4
   10280:	f107 0044 	add.w	r0, r7, #68	; 0x44
   10284:	f8c7 5144 	str.w	r5, [r7, #324]	; 0x144
   10288:	f887 5148 	strb.w	r5, [r7, #328]	; 0x148
   1028c:	f8c7 5164 	str.w	r5, [r7, #356]	; 0x164
   10290:	f8c7 5188 	str.w	r5, [r7, #392]	; 0x188
   10294:	e9c7 5555 	strd	r5, r5, [r7, #340]	; 0x154
   10298:	e9c7 555a 	strd	r5, r5, [r7, #360]	; 0x168
   1029c:	e9c7 5557 	strd	r5, r5, [r7, #348]	; 0x15c
   102a0:	e9c7 555c 	strd	r5, r5, [r7, #368]	; 0x170
   102a4:	e9c7 555e 	strd	r5, r5, [r7, #376]	; 0x178
   102a8:	e9c7 5560 	strd	r5, r5, [r7, #384]	; 0x180
   102ac:	e9c7 9853 	strd	r9, r8, [r7, #332]	; 0x14c
   102b0:	f7fc fe1c 	bl	ceec <d_count_templates_scopes>
   102b4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
   102b8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
   102bc:	2100      	movs	r1, #0
   102be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   102c2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
   102c6:	f8c7 118c 	str.w	r1, [r7, #396]	; 0x18c
   102ca:	f107 0044 	add.w	r0, r7, #68	; 0x44
   102ce:	bfb8      	it	lt
   102d0:	f8c7 5160 	strlt.w	r5, [r7, #352]	; 0x160
   102d4:	2a01      	cmp	r2, #1
   102d6:	fb03 f302 	mul.w	r3, r3, r2
   102da:	466d      	mov	r5, sp
   102dc:	bfb8      	it	lt
   102de:	2201      	movlt	r2, #1
   102e0:	2b01      	cmp	r3, #1
   102e2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   102e6:	eba5 02c2 	sub.w	r2, r5, r2, lsl #3
   102ea:	bfb8      	it	lt
   102ec:	2301      	movlt	r3, #1
   102ee:	4695      	mov	sp, r2
   102f0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
   102f4:	4622      	mov	r2, r4
   102f6:	4669      	mov	r1, sp
   102f8:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
   102fc:	2111      	movs	r1, #17
   102fe:	469d      	mov	sp, r3
   10300:	f8c7 d180 	str.w	sp, [r7, #384]	; 0x180
   10304:	f7fe fc6a 	bl	ebdc <d_print_comp>
   10308:	f107 0044 	add.w	r0, r7, #68	; 0x44
   1030c:	46ad      	mov	sp, r5
   1030e:	f7fc fe49 	bl	cfa4 <d_print_flush>
   10312:	f8d7 415c 	ldr.w	r4, [r7, #348]	; 0x15c
   10316:	fab4 f484 	clz	r4, r4
   1031a:	0964      	lsrs	r4, r4, #5
   1031c:	46b5      	mov	sp, r6
   1031e:	4620      	mov	r0, r4
   10320:	f507 77ca 	add.w	r7, r7, #404	; 0x194
   10324:	46bd      	mov	sp, r7
   10326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1032a:	f1bb 0f5f 	cmp.w	fp, #95	; 0x5f
   1032e:	d001      	beq.n	10334 <d_demangle_callback.constprop.0+0x1dc>
   10330:	2400      	movs	r4, #0
   10332:	e79d      	b.n	10270 <d_demangle_callback.constprop.0+0x118>
   10334:	1c6b      	adds	r3, r5, #1
   10336:	617b      	str	r3, [r7, #20]
   10338:	786b      	ldrb	r3, [r5, #1]
   1033a:	2b5a      	cmp	r3, #90	; 0x5a
   1033c:	d1f8      	bne.n	10330 <d_demangle_callback.constprop.0+0x1d8>
   1033e:	3502      	adds	r5, #2
   10340:	4651      	mov	r1, sl
   10342:	f107 0008 	add.w	r0, r7, #8
   10346:	617d      	str	r5, [r7, #20]
   10348:	f7fe fa4a 	bl	e7e0 <d_encoding>
   1034c:	693b      	ldr	r3, [r7, #16]
   1034e:	4604      	mov	r4, r0
   10350:	07db      	lsls	r3, r3, #31
   10352:	d58d      	bpl.n	10270 <d_demangle_callback.constprop.0+0x118>
   10354:	6979      	ldr	r1, [r7, #20]
   10356:	780b      	ldrb	r3, [r1, #0]
   10358:	2b2e      	cmp	r3, #46	; 0x2e
   1035a:	d189      	bne.n	10270 <d_demangle_callback.constprop.0+0x118>
   1035c:	784b      	ldrb	r3, [r1, #1]
   1035e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   10362:	2a19      	cmp	r2, #25
   10364:	d907      	bls.n	10376 <d_demangle_callback.constprop.0+0x21e>
   10366:	2b5f      	cmp	r3, #95	; 0x5f
   10368:	d005      	beq.n	10376 <d_demangle_callback.constprop.0+0x21e>
   1036a:	3b30      	subs	r3, #48	; 0x30
   1036c:	2b09      	cmp	r3, #9
   1036e:	f63f af7f 	bhi.w	10270 <d_demangle_callback.constprop.0+0x118>
   10372:	460a      	mov	r2, r1
   10374:	e009      	b.n	1038a <d_demangle_callback.constprop.0+0x232>
   10376:	1c8b      	adds	r3, r1, #2
   10378:	461a      	mov	r2, r3
   1037a:	f813 0b01 	ldrb.w	r0, [r3], #1
   1037e:	f1a0 0561 	sub.w	r5, r0, #97	; 0x61
   10382:	2d19      	cmp	r5, #25
   10384:	d9f8      	bls.n	10378 <d_demangle_callback.constprop.0+0x220>
   10386:	285f      	cmp	r0, #95	; 0x5f
   10388:	d0f6      	beq.n	10378 <d_demangle_callback.constprop.0+0x220>
   1038a:	7813      	ldrb	r3, [r2, #0]
   1038c:	2b2e      	cmp	r3, #46	; 0x2e
   1038e:	d00e      	beq.n	103ae <d_demangle_callback.constprop.0+0x256>
   10390:	617a      	str	r2, [r7, #20]
   10392:	f107 0008 	add.w	r0, r7, #8
   10396:	1a52      	subs	r2, r2, r1
   10398:	f7fc fd68 	bl	ce6c <d_make_name>
   1039c:	4622      	mov	r2, r4
   1039e:	4603      	mov	r3, r0
   103a0:	214e      	movs	r1, #78	; 0x4e
   103a2:	f107 0008 	add.w	r0, r7, #8
   103a6:	f7fc fd20 	bl	cdea <d_make_comp>
   103aa:	4604      	mov	r4, r0
   103ac:	e7d2      	b.n	10354 <d_demangle_callback.constprop.0+0x1fc>
   103ae:	7853      	ldrb	r3, [r2, #1]
   103b0:	3b30      	subs	r3, #48	; 0x30
   103b2:	2b09      	cmp	r3, #9
   103b4:	d8ec      	bhi.n	10390 <d_demangle_callback.constprop.0+0x238>
   103b6:	1c90      	adds	r0, r2, #2
   103b8:	4602      	mov	r2, r0
   103ba:	3001      	adds	r0, #1
   103bc:	7813      	ldrb	r3, [r2, #0]
   103be:	3b30      	subs	r3, #48	; 0x30
   103c0:	2b09      	cmp	r3, #9
   103c2:	d9f9      	bls.n	103b8 <d_demangle_callback.constprop.0+0x260>
   103c4:	e7e1      	b.n	1038a <d_demangle_callback.constprop.0+0x232>
   103c6:	7b2b      	ldrb	r3, [r5, #12]
   103c8:	2b5a      	cmp	r3, #90	; 0x5a
   103ca:	f47f af2d 	bne.w	10228 <d_demangle_callback.constprop.0+0xd0>
   103ce:	350d      	adds	r5, #13
   103d0:	4621      	mov	r1, r4
   103d2:	f107 0008 	add.w	r0, r7, #8
   103d6:	617d      	str	r5, [r7, #20]
   103d8:	f7fe fa02 	bl	e7e0 <d_encoding>
   103dc:	e72e      	b.n	1023c <d_demangle_callback.constprop.0+0xe4>
   103de:	2400      	movs	r4, #0
   103e0:	e79c      	b.n	1031c <d_demangle_callback.constprop.0+0x1c4>
   103e2:	bf00      	nop
   103e4:	00036ee2 	.word	0x00036ee2

000103e8 <__cxa_demangle>:
   103e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   103ec:	460f      	mov	r7, r1
   103ee:	4616      	mov	r6, r2
   103f0:	461c      	mov	r4, r3
   103f2:	b948      	cbnz	r0, 10408 <__cxa_demangle+0x20>
   103f4:	b924      	cbnz	r4, 10400 <__cxa_demangle+0x18>
   103f6:	2500      	movs	r5, #0
   103f8:	4628      	mov	r0, r5
   103fa:	b004      	add	sp, #16
   103fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10400:	f06f 0302 	mvn.w	r3, #2
   10404:	6023      	str	r3, [r4, #0]
   10406:	e7f6      	b.n	103f6 <__cxa_demangle+0xe>
   10408:	b109      	cbz	r1, 1040e <__cxa_demangle+0x26>
   1040a:	2a00      	cmp	r2, #0
   1040c:	d0f2      	beq.n	103f4 <__cxa_demangle+0xc>
   1040e:	2300      	movs	r3, #0
   10410:	466a      	mov	r2, sp
   10412:	491e      	ldr	r1, [pc, #120]	; (1048c <__cxa_demangle+0xa4>)
   10414:	e9cd 3300 	strd	r3, r3, [sp]
   10418:	e9cd 3302 	strd	r3, r3, [sp, #8]
   1041c:	f7ff fe9c 	bl	10158 <d_demangle_callback.constprop.0>
   10420:	b938      	cbnz	r0, 10432 <__cxa_demangle+0x4a>
   10422:	9800      	ldr	r0, [sp, #0]
   10424:	f015 f8b0 	bl	25588 <free>
   10428:	2c00      	cmp	r4, #0
   1042a:	d0e4      	beq.n	103f6 <__cxa_demangle+0xe>
   1042c:	f06f 0301 	mvn.w	r3, #1
   10430:	e7e8      	b.n	10404 <__cxa_demangle+0x1c>
   10432:	9b03      	ldr	r3, [sp, #12]
   10434:	b963      	cbnz	r3, 10450 <__cxa_demangle+0x68>
   10436:	f8dd 8008 	ldr.w	r8, [sp, #8]
   1043a:	9d00      	ldr	r5, [sp, #0]
   1043c:	b95d      	cbnz	r5, 10456 <__cxa_demangle+0x6e>
   1043e:	2c00      	cmp	r4, #0
   10440:	d0d9      	beq.n	103f6 <__cxa_demangle+0xe>
   10442:	f1b8 0f01 	cmp.w	r8, #1
   10446:	d1f1      	bne.n	1042c <__cxa_demangle+0x44>
   10448:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1044c:	6023      	str	r3, [r4, #0]
   1044e:	e7d3      	b.n	103f8 <__cxa_demangle+0x10>
   10450:	f04f 0801 	mov.w	r8, #1
   10454:	e7f1      	b.n	1043a <__cxa_demangle+0x52>
   10456:	b91f      	cbnz	r7, 10460 <__cxa_demangle+0x78>
   10458:	b186      	cbz	r6, 1047c <__cxa_demangle+0x94>
   1045a:	f8c6 8000 	str.w	r8, [r6]
   1045e:	e00d      	b.n	1047c <__cxa_demangle+0x94>
   10460:	4628      	mov	r0, r5
   10462:	f001 fb59 	bl	11b18 <strlen>
   10466:	6833      	ldr	r3, [r6, #0]
   10468:	4298      	cmp	r0, r3
   1046a:	d20b      	bcs.n	10484 <__cxa_demangle+0x9c>
   1046c:	4629      	mov	r1, r5
   1046e:	4638      	mov	r0, r7
   10470:	f020 fdde 	bl	31030 <strcpy>
   10474:	4628      	mov	r0, r5
   10476:	463d      	mov	r5, r7
   10478:	f015 f886 	bl	25588 <free>
   1047c:	2c00      	cmp	r4, #0
   1047e:	d0bb      	beq.n	103f8 <__cxa_demangle+0x10>
   10480:	2300      	movs	r3, #0
   10482:	e7e3      	b.n	1044c <__cxa_demangle+0x64>
   10484:	4638      	mov	r0, r7
   10486:	f015 f87f 	bl	25588 <free>
   1048a:	e7e6      	b.n	1045a <__cxa_demangle+0x72>
   1048c:	0000d2e7 	.word	0x0000d2e7

00010490 <__gcclibcxx_demangle_callback>:
   10490:	b508      	push	{r3, lr}
   10492:	b140      	cbz	r0, 104a6 <__gcclibcxx_demangle_callback+0x16>
   10494:	b139      	cbz	r1, 104a6 <__gcclibcxx_demangle_callback+0x16>
   10496:	f7ff fe5f 	bl	10158 <d_demangle_callback.constprop.0>
   1049a:	2800      	cmp	r0, #0
   1049c:	bf14      	ite	ne
   1049e:	2000      	movne	r0, #0
   104a0:	f06f 0001 	mvneq.w	r0, #1
   104a4:	bd08      	pop	{r3, pc}
   104a6:	f06f 0002 	mvn.w	r0, #2
   104aa:	e7fb      	b.n	104a4 <__gcclibcxx_demangle_callback+0x14>

000104ac <__aeabi_dmul>:
   104ac:	b570      	push	{r4, r5, r6, lr}
   104ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
   104b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   104b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   104ba:	bf1d      	ittte	ne
   104bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   104c0:	ea94 0f0c 	teqne	r4, ip
   104c4:	ea95 0f0c 	teqne	r5, ip
   104c8:	f000 f8de 	bleq	10688 <__aeabi_dmul+0x1dc>
   104cc:	442c      	add	r4, r5
   104ce:	ea81 0603 	eor.w	r6, r1, r3
   104d2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   104d6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   104da:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   104de:	bf18      	it	ne
   104e0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   104e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   104e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   104ec:	d038      	beq.n	10560 <__aeabi_dmul+0xb4>
   104ee:	fba0 ce02 	umull	ip, lr, r0, r2
   104f2:	f04f 0500 	mov.w	r5, #0
   104f6:	fbe1 e502 	umlal	lr, r5, r1, r2
   104fa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   104fe:	fbe0 e503 	umlal	lr, r5, r0, r3
   10502:	f04f 0600 	mov.w	r6, #0
   10506:	fbe1 5603 	umlal	r5, r6, r1, r3
   1050a:	f09c 0f00 	teq	ip, #0
   1050e:	bf18      	it	ne
   10510:	f04e 0e01 	orrne.w	lr, lr, #1
   10514:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   10518:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1051c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   10520:	d204      	bcs.n	1052c <__aeabi_dmul+0x80>
   10522:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   10526:	416d      	adcs	r5, r5
   10528:	eb46 0606 	adc.w	r6, r6, r6
   1052c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   10530:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   10534:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   10538:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1053c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   10540:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   10544:	bf88      	it	hi
   10546:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1054a:	d81e      	bhi.n	1058a <__aeabi_dmul+0xde>
   1054c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   10550:	bf08      	it	eq
   10552:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   10556:	f150 0000 	adcs.w	r0, r0, #0
   1055a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1055e:	bd70      	pop	{r4, r5, r6, pc}
   10560:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   10564:	ea46 0101 	orr.w	r1, r6, r1
   10568:	ea40 0002 	orr.w	r0, r0, r2
   1056c:	ea81 0103 	eor.w	r1, r1, r3
   10570:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   10574:	bfc2      	ittt	gt
   10576:	ebd4 050c 	rsbsgt	r5, r4, ip
   1057a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1057e:	bd70      	popgt	{r4, r5, r6, pc}
   10580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   10584:	f04f 0e00 	mov.w	lr, #0
   10588:	3c01      	subs	r4, #1
   1058a:	f300 80ab 	bgt.w	106e4 <__aeabi_dmul+0x238>
   1058e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   10592:	bfde      	ittt	le
   10594:	2000      	movle	r0, #0
   10596:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1059a:	bd70      	pople	{r4, r5, r6, pc}
   1059c:	f1c4 0400 	rsb	r4, r4, #0
   105a0:	3c20      	subs	r4, #32
   105a2:	da35      	bge.n	10610 <__aeabi_dmul+0x164>
   105a4:	340c      	adds	r4, #12
   105a6:	dc1b      	bgt.n	105e0 <__aeabi_dmul+0x134>
   105a8:	f104 0414 	add.w	r4, r4, #20
   105ac:	f1c4 0520 	rsb	r5, r4, #32
   105b0:	fa00 f305 	lsl.w	r3, r0, r5
   105b4:	fa20 f004 	lsr.w	r0, r0, r4
   105b8:	fa01 f205 	lsl.w	r2, r1, r5
   105bc:	ea40 0002 	orr.w	r0, r0, r2
   105c0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   105c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   105c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   105cc:	fa21 f604 	lsr.w	r6, r1, r4
   105d0:	eb42 0106 	adc.w	r1, r2, r6
   105d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   105d8:	bf08      	it	eq
   105da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   105de:	bd70      	pop	{r4, r5, r6, pc}
   105e0:	f1c4 040c 	rsb	r4, r4, #12
   105e4:	f1c4 0520 	rsb	r5, r4, #32
   105e8:	fa00 f304 	lsl.w	r3, r0, r4
   105ec:	fa20 f005 	lsr.w	r0, r0, r5
   105f0:	fa01 f204 	lsl.w	r2, r1, r4
   105f4:	ea40 0002 	orr.w	r0, r0, r2
   105f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   105fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   10600:	f141 0100 	adc.w	r1, r1, #0
   10604:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   10608:	bf08      	it	eq
   1060a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1060e:	bd70      	pop	{r4, r5, r6, pc}
   10610:	f1c4 0520 	rsb	r5, r4, #32
   10614:	fa00 f205 	lsl.w	r2, r0, r5
   10618:	ea4e 0e02 	orr.w	lr, lr, r2
   1061c:	fa20 f304 	lsr.w	r3, r0, r4
   10620:	fa01 f205 	lsl.w	r2, r1, r5
   10624:	ea43 0302 	orr.w	r3, r3, r2
   10628:	fa21 f004 	lsr.w	r0, r1, r4
   1062c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   10630:	fa21 f204 	lsr.w	r2, r1, r4
   10634:	ea20 0002 	bic.w	r0, r0, r2
   10638:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1063c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   10640:	bf08      	it	eq
   10642:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   10646:	bd70      	pop	{r4, r5, r6, pc}
   10648:	f094 0f00 	teq	r4, #0
   1064c:	d10f      	bne.n	1066e <__aeabi_dmul+0x1c2>
   1064e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   10652:	0040      	lsls	r0, r0, #1
   10654:	eb41 0101 	adc.w	r1, r1, r1
   10658:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1065c:	bf08      	it	eq
   1065e:	3c01      	subeq	r4, #1
   10660:	d0f7      	beq.n	10652 <__aeabi_dmul+0x1a6>
   10662:	ea41 0106 	orr.w	r1, r1, r6
   10666:	f095 0f00 	teq	r5, #0
   1066a:	bf18      	it	ne
   1066c:	4770      	bxne	lr
   1066e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   10672:	0052      	lsls	r2, r2, #1
   10674:	eb43 0303 	adc.w	r3, r3, r3
   10678:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1067c:	bf08      	it	eq
   1067e:	3d01      	subeq	r5, #1
   10680:	d0f7      	beq.n	10672 <__aeabi_dmul+0x1c6>
   10682:	ea43 0306 	orr.w	r3, r3, r6
   10686:	4770      	bx	lr
   10688:	ea94 0f0c 	teq	r4, ip
   1068c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   10690:	bf18      	it	ne
   10692:	ea95 0f0c 	teqne	r5, ip
   10696:	d00c      	beq.n	106b2 <__aeabi_dmul+0x206>
   10698:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1069c:	bf18      	it	ne
   1069e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   106a2:	d1d1      	bne.n	10648 <__aeabi_dmul+0x19c>
   106a4:	ea81 0103 	eor.w	r1, r1, r3
   106a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   106ac:	f04f 0000 	mov.w	r0, #0
   106b0:	bd70      	pop	{r4, r5, r6, pc}
   106b2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   106b6:	bf06      	itte	eq
   106b8:	4610      	moveq	r0, r2
   106ba:	4619      	moveq	r1, r3
   106bc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   106c0:	d019      	beq.n	106f6 <__aeabi_dmul+0x24a>
   106c2:	ea94 0f0c 	teq	r4, ip
   106c6:	d102      	bne.n	106ce <__aeabi_dmul+0x222>
   106c8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   106cc:	d113      	bne.n	106f6 <__aeabi_dmul+0x24a>
   106ce:	ea95 0f0c 	teq	r5, ip
   106d2:	d105      	bne.n	106e0 <__aeabi_dmul+0x234>
   106d4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   106d8:	bf1c      	itt	ne
   106da:	4610      	movne	r0, r2
   106dc:	4619      	movne	r1, r3
   106de:	d10a      	bne.n	106f6 <__aeabi_dmul+0x24a>
   106e0:	ea81 0103 	eor.w	r1, r1, r3
   106e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   106e8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   106ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   106f0:	f04f 0000 	mov.w	r0, #0
   106f4:	bd70      	pop	{r4, r5, r6, pc}
   106f6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   106fa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   106fe:	bd70      	pop	{r4, r5, r6, pc}

00010700 <__aeabi_ddiv>:
   10700:	b570      	push	{r4, r5, r6, lr}
   10702:	f04f 0cff 	mov.w	ip, #255	; 0xff
   10706:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1070a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1070e:	bf1d      	ittte	ne
   10710:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   10714:	ea94 0f0c 	teqne	r4, ip
   10718:	ea95 0f0c 	teqne	r5, ip
   1071c:	f000 f8a7 	bleq	1086e <__aeabi_ddiv+0x16e>
   10720:	eba4 0405 	sub.w	r4, r4, r5
   10724:	ea81 0e03 	eor.w	lr, r1, r3
   10728:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1072c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   10730:	f000 8088 	beq.w	10844 <__aeabi_ddiv+0x144>
   10734:	ea4f 3303 	mov.w	r3, r3, lsl #12
   10738:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1073c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   10740:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   10744:	ea4f 2202 	mov.w	r2, r2, lsl #8
   10748:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1074c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   10750:	ea4f 2600 	mov.w	r6, r0, lsl #8
   10754:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   10758:	429d      	cmp	r5, r3
   1075a:	bf08      	it	eq
   1075c:	4296      	cmpeq	r6, r2
   1075e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   10762:	f504 7440 	add.w	r4, r4, #768	; 0x300
   10766:	d202      	bcs.n	1076e <__aeabi_ddiv+0x6e>
   10768:	085b      	lsrs	r3, r3, #1
   1076a:	ea4f 0232 	mov.w	r2, r2, rrx
   1076e:	1ab6      	subs	r6, r6, r2
   10770:	eb65 0503 	sbc.w	r5, r5, r3
   10774:	085b      	lsrs	r3, r3, #1
   10776:	ea4f 0232 	mov.w	r2, r2, rrx
   1077a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1077e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   10782:	ebb6 0e02 	subs.w	lr, r6, r2
   10786:	eb75 0e03 	sbcs.w	lr, r5, r3
   1078a:	bf22      	ittt	cs
   1078c:	1ab6      	subcs	r6, r6, r2
   1078e:	4675      	movcs	r5, lr
   10790:	ea40 000c 	orrcs.w	r0, r0, ip
   10794:	085b      	lsrs	r3, r3, #1
   10796:	ea4f 0232 	mov.w	r2, r2, rrx
   1079a:	ebb6 0e02 	subs.w	lr, r6, r2
   1079e:	eb75 0e03 	sbcs.w	lr, r5, r3
   107a2:	bf22      	ittt	cs
   107a4:	1ab6      	subcs	r6, r6, r2
   107a6:	4675      	movcs	r5, lr
   107a8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   107ac:	085b      	lsrs	r3, r3, #1
   107ae:	ea4f 0232 	mov.w	r2, r2, rrx
   107b2:	ebb6 0e02 	subs.w	lr, r6, r2
   107b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   107ba:	bf22      	ittt	cs
   107bc:	1ab6      	subcs	r6, r6, r2
   107be:	4675      	movcs	r5, lr
   107c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   107c4:	085b      	lsrs	r3, r3, #1
   107c6:	ea4f 0232 	mov.w	r2, r2, rrx
   107ca:	ebb6 0e02 	subs.w	lr, r6, r2
   107ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   107d2:	bf22      	ittt	cs
   107d4:	1ab6      	subcs	r6, r6, r2
   107d6:	4675      	movcs	r5, lr
   107d8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   107dc:	ea55 0e06 	orrs.w	lr, r5, r6
   107e0:	d018      	beq.n	10814 <__aeabi_ddiv+0x114>
   107e2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   107e6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   107ea:	ea4f 1606 	mov.w	r6, r6, lsl #4
   107ee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   107f2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   107f6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   107fa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   107fe:	d1c0      	bne.n	10782 <__aeabi_ddiv+0x82>
   10800:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   10804:	d10b      	bne.n	1081e <__aeabi_ddiv+0x11e>
   10806:	ea41 0100 	orr.w	r1, r1, r0
   1080a:	f04f 0000 	mov.w	r0, #0
   1080e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   10812:	e7b6      	b.n	10782 <__aeabi_ddiv+0x82>
   10814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   10818:	bf04      	itt	eq
   1081a:	4301      	orreq	r1, r0
   1081c:	2000      	moveq	r0, #0
   1081e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   10822:	bf88      	it	hi
   10824:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   10828:	f63f aeaf 	bhi.w	1058a <__aeabi_dmul+0xde>
   1082c:	ebb5 0c03 	subs.w	ip, r5, r3
   10830:	bf04      	itt	eq
   10832:	ebb6 0c02 	subseq.w	ip, r6, r2
   10836:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1083a:	f150 0000 	adcs.w	r0, r0, #0
   1083e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   10842:	bd70      	pop	{r4, r5, r6, pc}
   10844:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   10848:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1084c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   10850:	bfc2      	ittt	gt
   10852:	ebd4 050c 	rsbsgt	r5, r4, ip
   10856:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1085a:	bd70      	popgt	{r4, r5, r6, pc}
   1085c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   10860:	f04f 0e00 	mov.w	lr, #0
   10864:	3c01      	subs	r4, #1
   10866:	e690      	b.n	1058a <__aeabi_dmul+0xde>
   10868:	ea45 0e06 	orr.w	lr, r5, r6
   1086c:	e68d      	b.n	1058a <__aeabi_dmul+0xde>
   1086e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   10872:	ea94 0f0c 	teq	r4, ip
   10876:	bf08      	it	eq
   10878:	ea95 0f0c 	teqeq	r5, ip
   1087c:	f43f af3b 	beq.w	106f6 <__aeabi_dmul+0x24a>
   10880:	ea94 0f0c 	teq	r4, ip
   10884:	d10a      	bne.n	1089c <__aeabi_ddiv+0x19c>
   10886:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1088a:	f47f af34 	bne.w	106f6 <__aeabi_dmul+0x24a>
   1088e:	ea95 0f0c 	teq	r5, ip
   10892:	f47f af25 	bne.w	106e0 <__aeabi_dmul+0x234>
   10896:	4610      	mov	r0, r2
   10898:	4619      	mov	r1, r3
   1089a:	e72c      	b.n	106f6 <__aeabi_dmul+0x24a>
   1089c:	ea95 0f0c 	teq	r5, ip
   108a0:	d106      	bne.n	108b0 <__aeabi_ddiv+0x1b0>
   108a2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   108a6:	f43f aefd 	beq.w	106a4 <__aeabi_dmul+0x1f8>
   108aa:	4610      	mov	r0, r2
   108ac:	4619      	mov	r1, r3
   108ae:	e722      	b.n	106f6 <__aeabi_dmul+0x24a>
   108b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   108b4:	bf18      	it	ne
   108b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   108ba:	f47f aec5 	bne.w	10648 <__aeabi_dmul+0x19c>
   108be:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   108c2:	f47f af0d 	bne.w	106e0 <__aeabi_dmul+0x234>
   108c6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   108ca:	f47f aeeb 	bne.w	106a4 <__aeabi_dmul+0x1f8>
   108ce:	e712      	b.n	106f6 <__aeabi_dmul+0x24a>

000108d0 <__gedf2>:
   108d0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   108d4:	e006      	b.n	108e4 <__cmpdf2+0x4>
   108d6:	bf00      	nop

000108d8 <__ledf2>:
   108d8:	f04f 0c01 	mov.w	ip, #1
   108dc:	e002      	b.n	108e4 <__cmpdf2+0x4>
   108de:	bf00      	nop

000108e0 <__cmpdf2>:
   108e0:	f04f 0c01 	mov.w	ip, #1
   108e4:	f84d cd04 	str.w	ip, [sp, #-4]!
   108e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   108ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   108f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   108f4:	bf18      	it	ne
   108f6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   108fa:	d01b      	beq.n	10934 <__cmpdf2+0x54>
   108fc:	b001      	add	sp, #4
   108fe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   10902:	bf0c      	ite	eq
   10904:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   10908:	ea91 0f03 	teqne	r1, r3
   1090c:	bf02      	ittt	eq
   1090e:	ea90 0f02 	teqeq	r0, r2
   10912:	2000      	moveq	r0, #0
   10914:	4770      	bxeq	lr
   10916:	f110 0f00 	cmn.w	r0, #0
   1091a:	ea91 0f03 	teq	r1, r3
   1091e:	bf58      	it	pl
   10920:	4299      	cmppl	r1, r3
   10922:	bf08      	it	eq
   10924:	4290      	cmpeq	r0, r2
   10926:	bf2c      	ite	cs
   10928:	17d8      	asrcs	r0, r3, #31
   1092a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1092e:	f040 0001 	orr.w	r0, r0, #1
   10932:	4770      	bx	lr
   10934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   10938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1093c:	d102      	bne.n	10944 <__cmpdf2+0x64>
   1093e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   10942:	d107      	bne.n	10954 <__cmpdf2+0x74>
   10944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   10948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1094c:	d1d6      	bne.n	108fc <__cmpdf2+0x1c>
   1094e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   10952:	d0d3      	beq.n	108fc <__cmpdf2+0x1c>
   10954:	f85d 0b04 	ldr.w	r0, [sp], #4
   10958:	4770      	bx	lr
   1095a:	bf00      	nop

0001095c <__aeabi_cdrcmple>:
   1095c:	4684      	mov	ip, r0
   1095e:	4610      	mov	r0, r2
   10960:	4662      	mov	r2, ip
   10962:	468c      	mov	ip, r1
   10964:	4619      	mov	r1, r3
   10966:	4663      	mov	r3, ip
   10968:	e000      	b.n	1096c <__aeabi_cdcmpeq>
   1096a:	bf00      	nop

0001096c <__aeabi_cdcmpeq>:
   1096c:	b501      	push	{r0, lr}
   1096e:	f7ff ffb7 	bl	108e0 <__cmpdf2>
   10972:	2800      	cmp	r0, #0
   10974:	bf48      	it	mi
   10976:	f110 0f00 	cmnmi.w	r0, #0
   1097a:	bd01      	pop	{r0, pc}

0001097c <__aeabi_dcmpeq>:
   1097c:	f84d ed08 	str.w	lr, [sp, #-8]!
   10980:	f7ff fff4 	bl	1096c <__aeabi_cdcmpeq>
   10984:	bf0c      	ite	eq
   10986:	2001      	moveq	r0, #1
   10988:	2000      	movne	r0, #0
   1098a:	f85d fb08 	ldr.w	pc, [sp], #8
   1098e:	bf00      	nop

00010990 <__aeabi_dcmplt>:
   10990:	f84d ed08 	str.w	lr, [sp, #-8]!
   10994:	f7ff ffea 	bl	1096c <__aeabi_cdcmpeq>
   10998:	bf34      	ite	cc
   1099a:	2001      	movcc	r0, #1
   1099c:	2000      	movcs	r0, #0
   1099e:	f85d fb08 	ldr.w	pc, [sp], #8
   109a2:	bf00      	nop

000109a4 <__aeabi_dcmple>:
   109a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   109a8:	f7ff ffe0 	bl	1096c <__aeabi_cdcmpeq>
   109ac:	bf94      	ite	ls
   109ae:	2001      	movls	r0, #1
   109b0:	2000      	movhi	r0, #0
   109b2:	f85d fb08 	ldr.w	pc, [sp], #8
   109b6:	bf00      	nop

000109b8 <__aeabi_dcmpge>:
   109b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   109bc:	f7ff ffce 	bl	1095c <__aeabi_cdrcmple>
   109c0:	bf94      	ite	ls
   109c2:	2001      	movls	r0, #1
   109c4:	2000      	movhi	r0, #0
   109c6:	f85d fb08 	ldr.w	pc, [sp], #8
   109ca:	bf00      	nop

000109cc <__aeabi_dcmpgt>:
   109cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   109d0:	f7ff ffc4 	bl	1095c <__aeabi_cdrcmple>
   109d4:	bf34      	ite	cc
   109d6:	2001      	movcc	r0, #1
   109d8:	2000      	movcs	r0, #0
   109da:	f85d fb08 	ldr.w	pc, [sp], #8
   109de:	bf00      	nop

000109e0 <__aeabi_d2iz>:
   109e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   109e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   109e8:	d215      	bcs.n	10a16 <__aeabi_d2iz+0x36>
   109ea:	d511      	bpl.n	10a10 <__aeabi_d2iz+0x30>
   109ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   109f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   109f4:	d912      	bls.n	10a1c <__aeabi_d2iz+0x3c>
   109f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   109fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   109fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   10a02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   10a06:	fa23 f002 	lsr.w	r0, r3, r2
   10a0a:	bf18      	it	ne
   10a0c:	4240      	negne	r0, r0
   10a0e:	4770      	bx	lr
   10a10:	f04f 0000 	mov.w	r0, #0
   10a14:	4770      	bx	lr
   10a16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   10a1a:	d105      	bne.n	10a28 <__aeabi_d2iz+0x48>
   10a1c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   10a20:	bf08      	it	eq
   10a22:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   10a26:	4770      	bx	lr
   10a28:	f04f 0000 	mov.w	r0, #0
   10a2c:	4770      	bx	lr
   10a2e:	bf00      	nop

00010a30 <__aeabi_d2f>:
   10a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
   10a34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   10a38:	bf24      	itt	cs
   10a3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   10a3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   10a42:	d90d      	bls.n	10a60 <__aeabi_d2f+0x30>
   10a44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   10a48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   10a4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   10a50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10a54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   10a58:	bf08      	it	eq
   10a5a:	f020 0001 	biceq.w	r0, r0, #1
   10a5e:	4770      	bx	lr
   10a60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   10a64:	d121      	bne.n	10aaa <__aeabi_d2f+0x7a>
   10a66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   10a6a:	bfbc      	itt	lt
   10a6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   10a70:	4770      	bxlt	lr
   10a72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   10a76:	ea4f 5252 	mov.w	r2, r2, lsr #21
   10a7a:	f1c2 0218 	rsb	r2, r2, #24
   10a7e:	f1c2 0c20 	rsb	ip, r2, #32
   10a82:	fa10 f30c 	lsls.w	r3, r0, ip
   10a86:	fa20 f002 	lsr.w	r0, r0, r2
   10a8a:	bf18      	it	ne
   10a8c:	f040 0001 	orrne.w	r0, r0, #1
   10a90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   10a94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   10a98:	fa03 fc0c 	lsl.w	ip, r3, ip
   10a9c:	ea40 000c 	orr.w	r0, r0, ip
   10aa0:	fa23 f302 	lsr.w	r3, r3, r2
   10aa4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   10aa8:	e7cc      	b.n	10a44 <__aeabi_d2f+0x14>
   10aaa:	ea7f 5362 	mvns.w	r3, r2, asr #21
   10aae:	d107      	bne.n	10ac0 <__aeabi_d2f+0x90>
   10ab0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   10ab4:	bf1e      	ittt	ne
   10ab6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   10aba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   10abe:	4770      	bxne	lr
   10ac0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   10ac4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   10ac8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   10acc:	4770      	bx	lr
   10ace:	bf00      	nop

00010ad0 <__aeabi_d2lz>:
   10ad0:	b538      	push	{r3, r4, r5, lr}
   10ad2:	2200      	movs	r2, #0
   10ad4:	2300      	movs	r3, #0
   10ad6:	4604      	mov	r4, r0
   10ad8:	460d      	mov	r5, r1
   10ada:	f7ff ff59 	bl	10990 <__aeabi_dcmplt>
   10ade:	b928      	cbnz	r0, 10aec <__aeabi_d2lz+0x1c>
   10ae0:	4620      	mov	r0, r4
   10ae2:	4629      	mov	r1, r5
   10ae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10ae8:	f000 b80a 	b.w	10b00 <__aeabi_d2ulz>
   10aec:	4620      	mov	r0, r4
   10aee:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   10af2:	f000 f805 	bl	10b00 <__aeabi_d2ulz>
   10af6:	4240      	negs	r0, r0
   10af8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   10afc:	bd38      	pop	{r3, r4, r5, pc}
   10afe:	bf00      	nop

00010b00 <__aeabi_d2ulz>:
   10b00:	b5d0      	push	{r4, r6, r7, lr}
   10b02:	2200      	movs	r2, #0
   10b04:	4b0b      	ldr	r3, [pc, #44]	; (10b34 <__aeabi_d2ulz+0x34>)
   10b06:	4606      	mov	r6, r0
   10b08:	460f      	mov	r7, r1
   10b0a:	f7ff fccf 	bl	104ac <__aeabi_dmul>
   10b0e:	f000 ffd9 	bl	11ac4 <__aeabi_d2uiz>
   10b12:	4604      	mov	r4, r0
   10b14:	f7fb fcd6 	bl	c4c4 <__aeabi_ui2d>
   10b18:	2200      	movs	r2, #0
   10b1a:	4b07      	ldr	r3, [pc, #28]	; (10b38 <__aeabi_d2ulz+0x38>)
   10b1c:	f7ff fcc6 	bl	104ac <__aeabi_dmul>
   10b20:	4602      	mov	r2, r0
   10b22:	460b      	mov	r3, r1
   10b24:	4630      	mov	r0, r6
   10b26:	4639      	mov	r1, r7
   10b28:	f7fb fb8e 	bl	c248 <__aeabi_dsub>
   10b2c:	f000 ffca 	bl	11ac4 <__aeabi_d2uiz>
   10b30:	4621      	mov	r1, r4
   10b32:	bdd0      	pop	{r4, r6, r7, pc}
   10b34:	3df00000 	.word	0x3df00000
   10b38:	41f00000 	.word	0x41f00000

00010b3c <selfrel_offset31>:
   10b3c:	6803      	ldr	r3, [r0, #0]
   10b3e:	005a      	lsls	r2, r3, #1
   10b40:	bf4c      	ite	mi
   10b42:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
   10b46:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
   10b4a:	4418      	add	r0, r3
   10b4c:	4770      	bx	lr
   10b4e:	bf00      	nop

00010b50 <search_EIT_table>:
   10b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10b54:	b339      	cbz	r1, 10ba6 <search_EIT_table+0x56>
   10b56:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
   10b5a:	4606      	mov	r6, r0
   10b5c:	4617      	mov	r7, r2
   10b5e:	f04f 0900 	mov.w	r9, #0
   10b62:	4645      	mov	r5, r8
   10b64:	eb19 0105 	adds.w	r1, r9, r5
   10b68:	bf48      	it	mi
   10b6a:	3101      	addmi	r1, #1
   10b6c:	1049      	asrs	r1, r1, #1
   10b6e:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
   10b72:	00cc      	lsls	r4, r1, #3
   10b74:	4650      	mov	r0, sl
   10b76:	f7ff ffe1 	bl	10b3c <selfrel_offset31>
   10b7a:	3408      	adds	r4, #8
   10b7c:	4588      	cmp	r8, r1
   10b7e:	4603      	mov	r3, r0
   10b80:	eb06 0004 	add.w	r0, r6, r4
   10b84:	d009      	beq.n	10b9a <search_EIT_table+0x4a>
   10b86:	42bb      	cmp	r3, r7
   10b88:	d809      	bhi.n	10b9e <search_EIT_table+0x4e>
   10b8a:	f7ff ffd7 	bl	10b3c <selfrel_offset31>
   10b8e:	3801      	subs	r0, #1
   10b90:	f101 0901 	add.w	r9, r1, #1
   10b94:	42b8      	cmp	r0, r7
   10b96:	d3e5      	bcc.n	10b64 <search_EIT_table+0x14>
   10b98:	e007      	b.n	10baa <search_EIT_table+0x5a>
   10b9a:	42bb      	cmp	r3, r7
   10b9c:	d905      	bls.n	10baa <search_EIT_table+0x5a>
   10b9e:	4589      	cmp	r9, r1
   10ba0:	f101 35ff 	add.w	r5, r1, #4294967295	; 0xffffffff
   10ba4:	d1de      	bne.n	10b64 <search_EIT_table+0x14>
   10ba6:	f04f 0a00 	mov.w	sl, #0
   10baa:	4650      	mov	r0, sl
   10bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00010bb0 <__gnu_unwind_get_pr_addr>:
   10bb0:	2801      	cmp	r0, #1
   10bb2:	d006      	beq.n	10bc2 <__gnu_unwind_get_pr_addr+0x12>
   10bb4:	2802      	cmp	r0, #2
   10bb6:	d006      	beq.n	10bc6 <__gnu_unwind_get_pr_addr+0x16>
   10bb8:	2800      	cmp	r0, #0
   10bba:	4804      	ldr	r0, [pc, #16]	; (10bcc <__gnu_unwind_get_pr_addr+0x1c>)
   10bbc:	bf18      	it	ne
   10bbe:	2000      	movne	r0, #0
   10bc0:	4770      	bx	lr
   10bc2:	4803      	ldr	r0, [pc, #12]	; (10bd0 <__gnu_unwind_get_pr_addr+0x20>)
   10bc4:	4770      	bx	lr
   10bc6:	4803      	ldr	r0, [pc, #12]	; (10bd4 <__gnu_unwind_get_pr_addr+0x24>)
   10bc8:	4770      	bx	lr
   10bca:	bf00      	nop
   10bcc:	000112cd 	.word	0x000112cd
   10bd0:	000112d1 	.word	0x000112d1
   10bd4:	000112d5 	.word	0x000112d5

00010bd8 <get_eit_entry>:
   10bd8:	4b23      	ldr	r3, [pc, #140]	; (10c68 <get_eit_entry+0x90>)
   10bda:	b530      	push	{r4, r5, lr}
   10bdc:	4604      	mov	r4, r0
   10bde:	b083      	sub	sp, #12
   10be0:	1e8d      	subs	r5, r1, #2
   10be2:	b343      	cbz	r3, 10c36 <get_eit_entry+0x5e>
   10be4:	a901      	add	r1, sp, #4
   10be6:	4628      	mov	r0, r5
   10be8:	e000      	b.n	10bec <get_eit_entry+0x14>
   10bea:	bf00      	nop
   10bec:	b1f0      	cbz	r0, 10c2c <get_eit_entry+0x54>
   10bee:	9901      	ldr	r1, [sp, #4]
   10bf0:	462a      	mov	r2, r5
   10bf2:	f7ff ffad 	bl	10b50 <search_EIT_table>
   10bf6:	4601      	mov	r1, r0
   10bf8:	b1c0      	cbz	r0, 10c2c <get_eit_entry+0x54>
   10bfa:	f7ff ff9f 	bl	10b3c <selfrel_offset31>
   10bfe:	684b      	ldr	r3, [r1, #4]
   10c00:	64a0      	str	r0, [r4, #72]	; 0x48
   10c02:	2b01      	cmp	r3, #1
   10c04:	d02c      	beq.n	10c60 <get_eit_entry+0x88>
   10c06:	2b00      	cmp	r3, #0
   10c08:	f101 0004 	add.w	r0, r1, #4
   10c0c:	db24      	blt.n	10c58 <get_eit_entry+0x80>
   10c0e:	f7ff ff95 	bl	10b3c <selfrel_offset31>
   10c12:	2300      	movs	r3, #0
   10c14:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
   10c18:	6803      	ldr	r3, [r0, #0]
   10c1a:	2b00      	cmp	r3, #0
   10c1c:	db11      	blt.n	10c42 <get_eit_entry+0x6a>
   10c1e:	f7ff ff8d 	bl	10b3c <selfrel_offset31>
   10c22:	4603      	mov	r3, r0
   10c24:	2000      	movs	r0, #0
   10c26:	6123      	str	r3, [r4, #16]
   10c28:	b003      	add	sp, #12
   10c2a:	bd30      	pop	{r4, r5, pc}
   10c2c:	2300      	movs	r3, #0
   10c2e:	2009      	movs	r0, #9
   10c30:	6123      	str	r3, [r4, #16]
   10c32:	b003      	add	sp, #12
   10c34:	bd30      	pop	{r4, r5, pc}
   10c36:	490d      	ldr	r1, [pc, #52]	; (10c6c <get_eit_entry+0x94>)
   10c38:	480d      	ldr	r0, [pc, #52]	; (10c70 <get_eit_entry+0x98>)
   10c3a:	1a09      	subs	r1, r1, r0
   10c3c:	10c9      	asrs	r1, r1, #3
   10c3e:	9101      	str	r1, [sp, #4]
   10c40:	e7d6      	b.n	10bf0 <get_eit_entry+0x18>
   10c42:	f3c3 6003 	ubfx	r0, r3, #24, #4
   10c46:	f7ff ffb3 	bl	10bb0 <__gnu_unwind_get_pr_addr>
   10c4a:	2800      	cmp	r0, #0
   10c4c:	6120      	str	r0, [r4, #16]
   10c4e:	bf14      	ite	ne
   10c50:	2000      	movne	r0, #0
   10c52:	2009      	moveq	r0, #9
   10c54:	b003      	add	sp, #12
   10c56:	bd30      	pop	{r4, r5, pc}
   10c58:	2301      	movs	r3, #1
   10c5a:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
   10c5e:	e7db      	b.n	10c18 <get_eit_entry+0x40>
   10c60:	2300      	movs	r3, #0
   10c62:	2005      	movs	r0, #5
   10c64:	6123      	str	r3, [r4, #16]
   10c66:	e7df      	b.n	10c28 <get_eit_entry+0x50>
   10c68:	00000000 	.word	0x00000000
   10c6c:	00031544 	.word	0x00031544
   10c70:	00031394 	.word	0x00031394

00010c74 <restore_non_core_regs>:
   10c74:	6803      	ldr	r3, [r0, #0]
   10c76:	07da      	lsls	r2, r3, #31
   10c78:	b510      	push	{r4, lr}
   10c7a:	4604      	mov	r4, r0
   10c7c:	d406      	bmi.n	10c8c <restore_non_core_regs+0x18>
   10c7e:	079b      	lsls	r3, r3, #30
   10c80:	f100 0048 	add.w	r0, r0, #72	; 0x48
   10c84:	d509      	bpl.n	10c9a <restore_non_core_regs+0x26>
   10c86:	f000 fc93 	bl	115b0 <__gnu_Unwind_Restore_VFP_D>
   10c8a:	6823      	ldr	r3, [r4, #0]
   10c8c:	0759      	lsls	r1, r3, #29
   10c8e:	d509      	bpl.n	10ca4 <restore_non_core_regs+0x30>
   10c90:	071a      	lsls	r2, r3, #28
   10c92:	d50e      	bpl.n	10cb2 <restore_non_core_regs+0x3e>
   10c94:	06db      	lsls	r3, r3, #27
   10c96:	d513      	bpl.n	10cc0 <restore_non_core_regs+0x4c>
   10c98:	bd10      	pop	{r4, pc}
   10c9a:	f000 fc81 	bl	115a0 <__gnu_Unwind_Restore_VFP>
   10c9e:	6823      	ldr	r3, [r4, #0]
   10ca0:	0759      	lsls	r1, r3, #29
   10ca2:	d4f5      	bmi.n	10c90 <restore_non_core_regs+0x1c>
   10ca4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   10ca8:	f000 fc8a 	bl	115c0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   10cac:	6823      	ldr	r3, [r4, #0]
   10cae:	071a      	lsls	r2, r3, #28
   10cb0:	d4f0      	bmi.n	10c94 <restore_non_core_regs+0x20>
   10cb2:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   10cb6:	f000 fc8b 	bl	115d0 <__gnu_Unwind_Restore_WMMXD>
   10cba:	6823      	ldr	r3, [r4, #0]
   10cbc:	06db      	lsls	r3, r3, #27
   10cbe:	d4eb      	bmi.n	10c98 <restore_non_core_regs+0x24>
   10cc0:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   10cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10cc8:	f000 bcc6 	b.w	11658 <__gnu_Unwind_Restore_WMMXC>

00010ccc <_Unwind_decode_typeinfo_ptr.isra.0>:
   10ccc:	4603      	mov	r3, r0
   10cce:	6800      	ldr	r0, [r0, #0]
   10cd0:	b100      	cbz	r0, 10cd4 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
   10cd2:	4418      	add	r0, r3
   10cd4:	4770      	bx	lr
   10cd6:	bf00      	nop

00010cd8 <__gnu_unwind_24bit.isra.0>:
   10cd8:	2009      	movs	r0, #9
   10cda:	4770      	bx	lr

00010cdc <_Unwind_DebugHook>:
   10cdc:	4770      	bx	lr
   10cde:	bf00      	nop

00010ce0 <unwind_phase2>:
   10ce0:	b570      	push	{r4, r5, r6, lr}
   10ce2:	4604      	mov	r4, r0
   10ce4:	460e      	mov	r6, r1
   10ce6:	6c31      	ldr	r1, [r6, #64]	; 0x40
   10ce8:	4620      	mov	r0, r4
   10cea:	f7ff ff75 	bl	10bd8 <get_eit_entry>
   10cee:	4605      	mov	r5, r0
   10cf0:	b988      	cbnz	r0, 10d16 <unwind_phase2+0x36>
   10cf2:	6c30      	ldr	r0, [r6, #64]	; 0x40
   10cf4:	4632      	mov	r2, r6
   10cf6:	6923      	ldr	r3, [r4, #16]
   10cf8:	4621      	mov	r1, r4
   10cfa:	6160      	str	r0, [r4, #20]
   10cfc:	2001      	movs	r0, #1
   10cfe:	4798      	blx	r3
   10d00:	2808      	cmp	r0, #8
   10d02:	d0f0      	beq.n	10ce6 <unwind_phase2+0x6>
   10d04:	2807      	cmp	r0, #7
   10d06:	d106      	bne.n	10d16 <unwind_phase2+0x36>
   10d08:	4628      	mov	r0, r5
   10d0a:	6c31      	ldr	r1, [r6, #64]	; 0x40
   10d0c:	f7ff ffe6 	bl	10cdc <_Unwind_DebugHook>
   10d10:	1d30      	adds	r0, r6, #4
   10d12:	f000 fc39 	bl	11588 <__restore_core_regs>
   10d16:	f020 f850 	bl	30dba <abort>
   10d1a:	bf00      	nop

00010d1c <unwind_phase2_forced>:
   10d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10d20:	f101 0c04 	add.w	ip, r1, #4
   10d24:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
   10d28:	4606      	mov	r6, r0
   10d2a:	68c7      	ldr	r7, [r0, #12]
   10d2c:	f10d 0e0c 	add.w	lr, sp, #12
   10d30:	4614      	mov	r4, r2
   10d32:	ad02      	add	r5, sp, #8
   10d34:	f8d6 8018 	ldr.w	r8, [r6, #24]
   10d38:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   10d3c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   10d40:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   10d44:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   10d48:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   10d4c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   10d50:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   10d54:	f04f 0c00 	mov.w	ip, #0
   10d58:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
   10d5c:	f8c5 c000 	str.w	ip, [r5]
   10d60:	e022      	b.n	10da8 <unwind_phase2_forced+0x8c>
   10d62:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   10d64:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   10d68:	4629      	mov	r1, r5
   10d6a:	a87a      	add	r0, sp, #488	; 0x1e8
   10d6c:	6173      	str	r3, [r6, #20]
   10d6e:	f020 f847 	bl	30e00 <memcpy>
   10d72:	6933      	ldr	r3, [r6, #16]
   10d74:	aa7a      	add	r2, sp, #488	; 0x1e8
   10d76:	4631      	mov	r1, r6
   10d78:	4650      	mov	r0, sl
   10d7a:	4798      	blx	r3
   10d7c:	4681      	mov	r9, r0
   10d7e:	9888      	ldr	r0, [sp, #544]	; 0x220
   10d80:	4621      	mov	r1, r4
   10d82:	f8cd 8004 	str.w	r8, [sp, #4]
   10d86:	4633      	mov	r3, r6
   10d88:	9500      	str	r5, [sp, #0]
   10d8a:	4632      	mov	r2, r6
   10d8c:	6468      	str	r0, [r5, #68]	; 0x44
   10d8e:	2001      	movs	r0, #1
   10d90:	47b8      	blx	r7
   10d92:	4604      	mov	r4, r0
   10d94:	b9f0      	cbnz	r0, 10dd4 <unwind_phase2_forced+0xb8>
   10d96:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   10d9a:	a97a      	add	r1, sp, #488	; 0x1e8
   10d9c:	4628      	mov	r0, r5
   10d9e:	f020 f82f 	bl	30e00 <memcpy>
   10da2:	f1b9 0f08 	cmp.w	r9, #8
   10da6:	d11c      	bne.n	10de2 <unwind_phase2_forced+0xc6>
   10da8:	3409      	adds	r4, #9
   10daa:	6c29      	ldr	r1, [r5, #64]	; 0x40
   10dac:	4630      	mov	r0, r6
   10dae:	f7ff ff13 	bl	10bd8 <get_eit_entry>
   10db2:	4681      	mov	r9, r0
   10db4:	fa5f fa84 	uxtb.w	sl, r4
   10db8:	2800      	cmp	r0, #0
   10dba:	d0d2      	beq.n	10d62 <unwind_phase2_forced+0x46>
   10dbc:	6ba8      	ldr	r0, [r5, #56]	; 0x38
   10dbe:	f04a 0110 	orr.w	r1, sl, #16
   10dc2:	f8cd 8004 	str.w	r8, [sp, #4]
   10dc6:	4633      	mov	r3, r6
   10dc8:	9500      	str	r5, [sp, #0]
   10dca:	4632      	mov	r2, r6
   10dcc:	6468      	str	r0, [r5, #68]	; 0x44
   10dce:	2001      	movs	r0, #1
   10dd0:	47b8      	blx	r7
   10dd2:	b108      	cbz	r0, 10dd8 <unwind_phase2_forced+0xbc>
   10dd4:	f04f 0909 	mov.w	r9, #9
   10dd8:	4648      	mov	r0, r9
   10dda:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   10dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10de2:	f1b9 0f07 	cmp.w	r9, #7
   10de6:	d1f5      	bne.n	10dd4 <unwind_phase2_forced+0xb8>
   10de8:	4620      	mov	r0, r4
   10dea:	6c29      	ldr	r1, [r5, #64]	; 0x40
   10dec:	f7ff ff76 	bl	10cdc <_Unwind_DebugHook>
   10df0:	a803      	add	r0, sp, #12
   10df2:	f000 fbc9 	bl	11588 <__restore_core_regs>
   10df6:	bf00      	nop

00010df8 <_Unwind_GetCFA>:
   10df8:	6c40      	ldr	r0, [r0, #68]	; 0x44
   10dfa:	4770      	bx	lr

00010dfc <__gnu_Unwind_RaiseException>:
   10dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   10dfe:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   10e00:	b0f9      	sub	sp, #484	; 0x1e4
   10e02:	1d0e      	adds	r6, r1, #4
   10e04:	460f      	mov	r7, r1
   10e06:	640b      	str	r3, [r1, #64]	; 0x40
   10e08:	ac01      	add	r4, sp, #4
   10e0a:	4605      	mov	r5, r0
   10e0c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   10e0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   10e10:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   10e12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   10e14:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   10e16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   10e18:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   10e1c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   10e20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   10e24:	9600      	str	r6, [sp, #0]
   10e26:	e006      	b.n	10e36 <__gnu_Unwind_RaiseException+0x3a>
   10e28:	692b      	ldr	r3, [r5, #16]
   10e2a:	466a      	mov	r2, sp
   10e2c:	4629      	mov	r1, r5
   10e2e:	4798      	blx	r3
   10e30:	2808      	cmp	r0, #8
   10e32:	4604      	mov	r4, r0
   10e34:	d108      	bne.n	10e48 <__gnu_Unwind_RaiseException+0x4c>
   10e36:	9910      	ldr	r1, [sp, #64]	; 0x40
   10e38:	4628      	mov	r0, r5
   10e3a:	f7ff fecd 	bl	10bd8 <get_eit_entry>
   10e3e:	2800      	cmp	r0, #0
   10e40:	d0f2      	beq.n	10e28 <__gnu_Unwind_RaiseException+0x2c>
   10e42:	2009      	movs	r0, #9
   10e44:	b079      	add	sp, #484	; 0x1e4
   10e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10e48:	4668      	mov	r0, sp
   10e4a:	f7ff ff13 	bl	10c74 <restore_non_core_regs>
   10e4e:	2c06      	cmp	r4, #6
   10e50:	d1f7      	bne.n	10e42 <__gnu_Unwind_RaiseException+0x46>
   10e52:	4639      	mov	r1, r7
   10e54:	4628      	mov	r0, r5
   10e56:	f7ff ff43 	bl	10ce0 <unwind_phase2>
   10e5a:	bf00      	nop

00010e5c <__gnu_Unwind_ForcedUnwind>:
   10e5c:	b430      	push	{r4, r5}
   10e5e:	4615      	mov	r5, r2
   10e60:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   10e62:	60c1      	str	r1, [r0, #12]
   10e64:	2200      	movs	r2, #0
   10e66:	6185      	str	r5, [r0, #24]
   10e68:	4619      	mov	r1, r3
   10e6a:	641c      	str	r4, [r3, #64]	; 0x40
   10e6c:	bc30      	pop	{r4, r5}
   10e6e:	e755      	b.n	10d1c <unwind_phase2_forced>

00010e70 <__gnu_Unwind_Resume>:
   10e70:	b570      	push	{r4, r5, r6, lr}
   10e72:	6943      	ldr	r3, [r0, #20]
   10e74:	68c6      	ldr	r6, [r0, #12]
   10e76:	640b      	str	r3, [r1, #64]	; 0x40
   10e78:	b9ae      	cbnz	r6, 10ea6 <__gnu_Unwind_Resume+0x36>
   10e7a:	6903      	ldr	r3, [r0, #16]
   10e7c:	460a      	mov	r2, r1
   10e7e:	4604      	mov	r4, r0
   10e80:	460d      	mov	r5, r1
   10e82:	4601      	mov	r1, r0
   10e84:	2002      	movs	r0, #2
   10e86:	4798      	blx	r3
   10e88:	2807      	cmp	r0, #7
   10e8a:	d005      	beq.n	10e98 <__gnu_Unwind_Resume+0x28>
   10e8c:	2808      	cmp	r0, #8
   10e8e:	d10f      	bne.n	10eb0 <__gnu_Unwind_Resume+0x40>
   10e90:	4629      	mov	r1, r5
   10e92:	4620      	mov	r0, r4
   10e94:	f7ff ff24 	bl	10ce0 <unwind_phase2>
   10e98:	4630      	mov	r0, r6
   10e9a:	6c29      	ldr	r1, [r5, #64]	; 0x40
   10e9c:	f7ff ff1e 	bl	10cdc <_Unwind_DebugHook>
   10ea0:	1d28      	adds	r0, r5, #4
   10ea2:	f000 fb71 	bl	11588 <__restore_core_regs>
   10ea6:	2201      	movs	r2, #1
   10ea8:	f7ff ff38 	bl	10d1c <unwind_phase2_forced>
   10eac:	f01f ff85 	bl	30dba <abort>
   10eb0:	f01f ff83 	bl	30dba <abort>

00010eb4 <__gnu_Unwind_Resume_or_Rethrow>:
   10eb4:	68c2      	ldr	r2, [r0, #12]
   10eb6:	b12a      	cbz	r2, 10ec4 <__gnu_Unwind_Resume_or_Rethrow+0x10>
   10eb8:	2200      	movs	r2, #0
   10eba:	b410      	push	{r4}
   10ebc:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
   10ebe:	640c      	str	r4, [r1, #64]	; 0x40
   10ec0:	bc10      	pop	{r4}
   10ec2:	e72b      	b.n	10d1c <unwind_phase2_forced>
   10ec4:	e79a      	b.n	10dfc <__gnu_Unwind_RaiseException>
   10ec6:	bf00      	nop

00010ec8 <_Unwind_Complete>:
   10ec8:	4770      	bx	lr
   10eca:	bf00      	nop

00010ecc <_Unwind_DeleteException>:
   10ecc:	6883      	ldr	r3, [r0, #8]
   10ece:	4601      	mov	r1, r0
   10ed0:	b10b      	cbz	r3, 10ed6 <_Unwind_DeleteException+0xa>
   10ed2:	2001      	movs	r0, #1
   10ed4:	4718      	bx	r3
   10ed6:	4770      	bx	lr

00010ed8 <_Unwind_VRS_Get>:
   10ed8:	2901      	cmp	r1, #1
   10eda:	d015      	beq.n	10f08 <_Unwind_VRS_Get+0x30>
   10edc:	d80c      	bhi.n	10ef8 <_Unwind_VRS_Get+0x20>
   10ede:	b98b      	cbnz	r3, 10f04 <_Unwind_VRS_Get+0x2c>
   10ee0:	2a0f      	cmp	r2, #15
   10ee2:	bf94      	ite	ls
   10ee4:	2100      	movls	r1, #0
   10ee6:	2101      	movhi	r1, #1
   10ee8:	b961      	cbnz	r1, 10f04 <_Unwind_VRS_Get+0x2c>
   10eea:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   10eee:	4608      	mov	r0, r1
   10ef0:	6853      	ldr	r3, [r2, #4]
   10ef2:	9a00      	ldr	r2, [sp, #0]
   10ef4:	6013      	str	r3, [r2, #0]
   10ef6:	4770      	bx	lr
   10ef8:	3903      	subs	r1, #3
   10efa:	2901      	cmp	r1, #1
   10efc:	bf94      	ite	ls
   10efe:	2001      	movls	r0, #1
   10f00:	2002      	movhi	r0, #2
   10f02:	4770      	bx	lr
   10f04:	2002      	movs	r0, #2
   10f06:	4770      	bx	lr
   10f08:	4608      	mov	r0, r1
   10f0a:	4770      	bx	lr

00010f0c <_Unwind_GetGR>:
   10f0c:	b510      	push	{r4, lr}
   10f0e:	b084      	sub	sp, #16
   10f10:	2300      	movs	r3, #0
   10f12:	460a      	mov	r2, r1
   10f14:	ac03      	add	r4, sp, #12
   10f16:	4619      	mov	r1, r3
   10f18:	9400      	str	r4, [sp, #0]
   10f1a:	f7ff ffdd 	bl	10ed8 <_Unwind_VRS_Get>
   10f1e:	9803      	ldr	r0, [sp, #12]
   10f20:	b004      	add	sp, #16
   10f22:	bd10      	pop	{r4, pc}

00010f24 <_Unwind_VRS_Set>:
   10f24:	2901      	cmp	r1, #1
   10f26:	d015      	beq.n	10f54 <_Unwind_VRS_Set+0x30>
   10f28:	d80c      	bhi.n	10f44 <_Unwind_VRS_Set+0x20>
   10f2a:	b98b      	cbnz	r3, 10f50 <_Unwind_VRS_Set+0x2c>
   10f2c:	2a0f      	cmp	r2, #15
   10f2e:	bf94      	ite	ls
   10f30:	2100      	movls	r1, #0
   10f32:	2101      	movhi	r1, #1
   10f34:	b961      	cbnz	r1, 10f50 <_Unwind_VRS_Set+0x2c>
   10f36:	9b00      	ldr	r3, [sp, #0]
   10f38:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   10f3c:	4608      	mov	r0, r1
   10f3e:	681b      	ldr	r3, [r3, #0]
   10f40:	6053      	str	r3, [r2, #4]
   10f42:	4770      	bx	lr
   10f44:	3903      	subs	r1, #3
   10f46:	2901      	cmp	r1, #1
   10f48:	bf94      	ite	ls
   10f4a:	2001      	movls	r0, #1
   10f4c:	2002      	movhi	r0, #2
   10f4e:	4770      	bx	lr
   10f50:	2002      	movs	r0, #2
   10f52:	4770      	bx	lr
   10f54:	4608      	mov	r0, r1
   10f56:	4770      	bx	lr

00010f58 <_Unwind_SetGR>:
   10f58:	b510      	push	{r4, lr}
   10f5a:	b084      	sub	sp, #16
   10f5c:	2300      	movs	r3, #0
   10f5e:	ac03      	add	r4, sp, #12
   10f60:	9203      	str	r2, [sp, #12]
   10f62:	460a      	mov	r2, r1
   10f64:	4619      	mov	r1, r3
   10f66:	9400      	str	r4, [sp, #0]
   10f68:	f7ff ffdc 	bl	10f24 <_Unwind_VRS_Set>
   10f6c:	b004      	add	sp, #16
   10f6e:	bd10      	pop	{r4, pc}

00010f70 <__gnu_Unwind_Backtrace>:
   10f70:	b5f0      	push	{r4, r5, r6, r7, lr}
   10f72:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   10f74:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
   10f78:	1d15      	adds	r5, r2, #4
   10f7a:	4607      	mov	r7, r0
   10f7c:	6413      	str	r3, [r2, #64]	; 0x40
   10f7e:	ac17      	add	r4, sp, #92	; 0x5c
   10f80:	460e      	mov	r6, r1
   10f82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   10f84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   10f86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   10f88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   10f8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   10f8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   10f8e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   10f92:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   10f96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   10f9a:	9516      	str	r5, [sp, #88]	; 0x58
   10f9c:	e010      	b.n	10fc0 <__gnu_Unwind_Backtrace+0x50>
   10f9e:	f7ff ffdb 	bl	10f58 <_Unwind_SetGR>
   10fa2:	4631      	mov	r1, r6
   10fa4:	a816      	add	r0, sp, #88	; 0x58
   10fa6:	47b8      	blx	r7
   10fa8:	4603      	mov	r3, r0
   10faa:	aa16      	add	r2, sp, #88	; 0x58
   10fac:	4669      	mov	r1, sp
   10fae:	2008      	movs	r0, #8
   10fb0:	b983      	cbnz	r3, 10fd4 <__gnu_Unwind_Backtrace+0x64>
   10fb2:	9b04      	ldr	r3, [sp, #16]
   10fb4:	4798      	blx	r3
   10fb6:	2805      	cmp	r0, #5
   10fb8:	4604      	mov	r4, r0
   10fba:	d00c      	beq.n	10fd6 <__gnu_Unwind_Backtrace+0x66>
   10fbc:	2809      	cmp	r0, #9
   10fbe:	d00a      	beq.n	10fd6 <__gnu_Unwind_Backtrace+0x66>
   10fc0:	9926      	ldr	r1, [sp, #152]	; 0x98
   10fc2:	4668      	mov	r0, sp
   10fc4:	f7ff fe08 	bl	10bd8 <get_eit_entry>
   10fc8:	4603      	mov	r3, r0
   10fca:	466a      	mov	r2, sp
   10fcc:	210c      	movs	r1, #12
   10fce:	a816      	add	r0, sp, #88	; 0x58
   10fd0:	2b00      	cmp	r3, #0
   10fd2:	d0e4      	beq.n	10f9e <__gnu_Unwind_Backtrace+0x2e>
   10fd4:	2409      	movs	r4, #9
   10fd6:	a816      	add	r0, sp, #88	; 0x58
   10fd8:	f7ff fe4c 	bl	10c74 <restore_non_core_regs>
   10fdc:	4620      	mov	r0, r4
   10fde:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
   10fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00010fe4 <__gnu_unwind_pr_common>:
   10fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fe8:	461d      	mov	r5, r3
   10fea:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   10fec:	b089      	sub	sp, #36	; 0x24
   10fee:	4616      	mov	r6, r2
   10ff0:	f853 2b04 	ldr.w	r2, [r3], #4
   10ff4:	460c      	mov	r4, r1
   10ff6:	f000 0803 	and.w	r8, r0, #3
   10ffa:	9306      	str	r3, [sp, #24]
   10ffc:	2d00      	cmp	r5, #0
   10ffe:	d07a      	beq.n	110f6 <__gnu_unwind_pr_common+0x112>
   11000:	0c11      	lsrs	r1, r2, #16
   11002:	2702      	movs	r7, #2
   11004:	0412      	lsls	r2, r2, #16
   11006:	fa5f fc81 	uxtb.w	ip, r1
   1100a:	f88d 101d 	strb.w	r1, [sp, #29]
   1100e:	9205      	str	r2, [sp, #20]
   11010:	eb03 038c 	add.w	r3, r3, ip, lsl #2
   11014:	f88d 701c 	strb.w	r7, [sp, #28]
   11018:	f1b8 0f02 	cmp.w	r8, #2
   1101c:	6d22      	ldr	r2, [r4, #80]	; 0x50
   1101e:	bf08      	it	eq
   11020:	6ba3      	ldreq	r3, [r4, #56]	; 0x38
   11022:	f012 0201 	ands.w	r2, r2, #1
   11026:	d008      	beq.n	1103a <__gnu_unwind_pr_common+0x56>
   11028:	4630      	mov	r0, r6
   1102a:	a905      	add	r1, sp, #20
   1102c:	f000 fbae 	bl	1178c <__gnu_unwind_execute>
   11030:	bb98      	cbnz	r0, 1109a <__gnu_unwind_pr_common+0xb6>
   11032:	2008      	movs	r0, #8
   11034:	b009      	add	sp, #36	; 0x24
   11036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1103a:	f8d3 a000 	ldr.w	sl, [r3]
   1103e:	f1ba 0f00 	cmp.w	sl, #0
   11042:	d0f1      	beq.n	11028 <__gnu_unwind_pr_common+0x44>
   11044:	f080 0008 	eor.w	r0, r0, #8
   11048:	9201      	str	r2, [sp, #4]
   1104a:	f3c0 02c0 	ubfx	r2, r0, #3, #1
   1104e:	9202      	str	r2, [sp, #8]
   11050:	2d02      	cmp	r5, #2
   11052:	d04c      	beq.n	110ee <__gnu_unwind_pr_common+0x10a>
   11054:	f8b3 a000 	ldrh.w	sl, [r3]
   11058:	f103 0b04 	add.w	fp, r3, #4
   1105c:	885f      	ldrh	r7, [r3, #2]
   1105e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   11060:	f027 0901 	bic.w	r9, r7, #1
   11064:	007f      	lsls	r7, r7, #1
   11066:	210f      	movs	r1, #15
   11068:	4499      	add	r9, r3
   1106a:	4630      	mov	r0, r6
   1106c:	f7ff ff4e 	bl	10f0c <_Unwind_GetGR>
   11070:	f007 0702 	and.w	r7, r7, #2
   11074:	f00a 0301 	and.w	r3, sl, #1
   11078:	4581      	cmp	r9, r0
   1107a:	ea43 0307 	orr.w	r3, r3, r7
   1107e:	d810      	bhi.n	110a2 <__gnu_unwind_pr_common+0xbe>
   11080:	f02a 0a01 	bic.w	sl, sl, #1
   11084:	44d1      	add	r9, sl
   11086:	4581      	cmp	r9, r0
   11088:	d90b      	bls.n	110a2 <__gnu_unwind_pr_common+0xbe>
   1108a:	2b01      	cmp	r3, #1
   1108c:	f000 80bb 	beq.w	11206 <__gnu_unwind_pr_common+0x222>
   11090:	2b02      	cmp	r3, #2
   11092:	f000 8085 	beq.w	111a0 <__gnu_unwind_pr_common+0x1bc>
   11096:	2b00      	cmp	r3, #0
   11098:	d048      	beq.n	1112c <__gnu_unwind_pr_common+0x148>
   1109a:	2009      	movs	r0, #9
   1109c:	b009      	add	sp, #36	; 0x24
   1109e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   110a2:	2b01      	cmp	r3, #1
   110a4:	d03c      	beq.n	11120 <__gnu_unwind_pr_common+0x13c>
   110a6:	2b02      	cmp	r3, #2
   110a8:	d02b      	beq.n	11102 <__gnu_unwind_pr_common+0x11e>
   110aa:	2b00      	cmp	r3, #0
   110ac:	d1f5      	bne.n	1109a <__gnu_unwind_pr_common+0xb6>
   110ae:	f10b 0304 	add.w	r3, fp, #4
   110b2:	f8d3 a000 	ldr.w	sl, [r3]
   110b6:	f1ba 0f00 	cmp.w	sl, #0
   110ba:	d1c9      	bne.n	11050 <__gnu_unwind_pr_common+0x6c>
   110bc:	a905      	add	r1, sp, #20
   110be:	4630      	mov	r0, r6
   110c0:	f000 fb64 	bl	1178c <__gnu_unwind_execute>
   110c4:	2800      	cmp	r0, #0
   110c6:	d1e8      	bne.n	1109a <__gnu_unwind_pr_common+0xb6>
   110c8:	9b01      	ldr	r3, [sp, #4]
   110ca:	2b00      	cmp	r3, #0
   110cc:	d0b1      	beq.n	11032 <__gnu_unwind_pr_common+0x4e>
   110ce:	210f      	movs	r1, #15
   110d0:	4630      	mov	r0, r6
   110d2:	f7ff ff1b 	bl	10f0c <_Unwind_GetGR>
   110d6:	210e      	movs	r1, #14
   110d8:	4602      	mov	r2, r0
   110da:	4630      	mov	r0, r6
   110dc:	f7ff ff3c 	bl	10f58 <_Unwind_SetGR>
   110e0:	4630      	mov	r0, r6
   110e2:	4a79      	ldr	r2, [pc, #484]	; (112c8 <__gnu_unwind_pr_common+0x2e4>)
   110e4:	210f      	movs	r1, #15
   110e6:	f7ff ff37 	bl	10f58 <_Unwind_SetGR>
   110ea:	2007      	movs	r0, #7
   110ec:	e7d6      	b.n	1109c <__gnu_unwind_pr_common+0xb8>
   110ee:	685f      	ldr	r7, [r3, #4]
   110f0:	f103 0b08 	add.w	fp, r3, #8
   110f4:	e7b3      	b.n	1105e <__gnu_unwind_pr_common+0x7a>
   110f6:	0212      	lsls	r2, r2, #8
   110f8:	2103      	movs	r1, #3
   110fa:	9205      	str	r2, [sp, #20]
   110fc:	f8ad 101c 	strh.w	r1, [sp, #28]
   11100:	e78a      	b.n	11018 <__gnu_unwind_pr_common+0x34>
   11102:	f8db 3000 	ldr.w	r3, [fp]
   11106:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
   1110a:	f1b8 0f00 	cmp.w	r8, #0
   1110e:	d123      	bne.n	11158 <__gnu_unwind_pr_common+0x174>
   11110:	2b00      	cmp	r3, #0
   11112:	da01      	bge.n	11118 <__gnu_unwind_pr_common+0x134>
   11114:	f10b 0b04 	add.w	fp, fp, #4
   11118:	3701      	adds	r7, #1
   1111a:	eb0b 0387 	add.w	r3, fp, r7, lsl #2
   1111e:	e7c8      	b.n	110b2 <__gnu_unwind_pr_common+0xce>
   11120:	f1b8 0f00 	cmp.w	r8, #0
   11124:	d123      	bne.n	1116e <__gnu_unwind_pr_common+0x18a>
   11126:	f10b 0308 	add.w	r3, fp, #8
   1112a:	e7c2      	b.n	110b2 <__gnu_unwind_pr_common+0xce>
   1112c:	f1b8 0f00 	cmp.w	r8, #0
   11130:	d0bd      	beq.n	110ae <__gnu_unwind_pr_common+0xca>
   11132:	465f      	mov	r7, fp
   11134:	4658      	mov	r0, fp
   11136:	f7ff fd01 	bl	10b3c <selfrel_offset31>
   1113a:	4605      	mov	r5, r0
   1113c:	3704      	adds	r7, #4
   1113e:	4620      	mov	r0, r4
   11140:	63a7      	str	r7, [r4, #56]	; 0x38
   11142:	f01f fbfd 	bl	30940 <__cxa_begin_cleanup>
   11146:	2800      	cmp	r0, #0
   11148:	d0a7      	beq.n	1109a <__gnu_unwind_pr_common+0xb6>
   1114a:	4630      	mov	r0, r6
   1114c:	462a      	mov	r2, r5
   1114e:	210f      	movs	r1, #15
   11150:	f7ff ff02 	bl	10f58 <_Unwind_SetGR>
   11154:	2007      	movs	r0, #7
   11156:	e7a1      	b.n	1109c <__gnu_unwind_pr_common+0xb8>
   11158:	f8d4 9020 	ldr.w	r9, [r4, #32]
   1115c:	210d      	movs	r1, #13
   1115e:	4630      	mov	r0, r6
   11160:	f7ff fed4 	bl	10f0c <_Unwind_GetGR>
   11164:	4581      	cmp	r9, r0
   11166:	d07b      	beq.n	11260 <__gnu_unwind_pr_common+0x27c>
   11168:	f8db 3000 	ldr.w	r3, [fp]
   1116c:	e7d0      	b.n	11110 <__gnu_unwind_pr_common+0x12c>
   1116e:	6a27      	ldr	r7, [r4, #32]
   11170:	210d      	movs	r1, #13
   11172:	4630      	mov	r0, r6
   11174:	f7ff feca 	bl	10f0c <_Unwind_GetGR>
   11178:	4287      	cmp	r7, r0
   1117a:	d1d4      	bne.n	11126 <__gnu_unwind_pr_common+0x142>
   1117c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1117e:	459b      	cmp	fp, r3
   11180:	d1d1      	bne.n	11126 <__gnu_unwind_pr_common+0x142>
   11182:	4658      	mov	r0, fp
   11184:	f7ff fcda 	bl	10b3c <selfrel_offset31>
   11188:	210f      	movs	r1, #15
   1118a:	4602      	mov	r2, r0
   1118c:	4630      	mov	r0, r6
   1118e:	f7ff fee3 	bl	10f58 <_Unwind_SetGR>
   11192:	4630      	mov	r0, r6
   11194:	4622      	mov	r2, r4
   11196:	2100      	movs	r1, #0
   11198:	f7ff fede 	bl	10f58 <_Unwind_SetGR>
   1119c:	2007      	movs	r0, #7
   1119e:	e77d      	b.n	1109c <__gnu_unwind_pr_common+0xb8>
   111a0:	f8db 3000 	ldr.w	r3, [fp]
   111a4:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
   111a8:	f1b8 0f00 	cmp.w	r8, #0
   111ac:	d1d4      	bne.n	11158 <__gnu_unwind_pr_common+0x174>
   111ae:	9a02      	ldr	r2, [sp, #8]
   111b0:	b90a      	cbnz	r2, 111b6 <__gnu_unwind_pr_common+0x1d2>
   111b2:	2f00      	cmp	r7, #0
   111b4:	d1ac      	bne.n	11110 <__gnu_unwind_pr_common+0x12c>
   111b6:	f104 0358 	add.w	r3, r4, #88	; 0x58
   111ba:	f8cd 800c 	str.w	r8, [sp, #12]
   111be:	f10b 0a04 	add.w	sl, fp, #4
   111c2:	46a8      	mov	r8, r5
   111c4:	f04f 0900 	mov.w	r9, #0
   111c8:	461d      	mov	r5, r3
   111ca:	e00a      	b.n	111e2 <__gnu_unwind_pr_common+0x1fe>
   111cc:	9504      	str	r5, [sp, #16]
   111ce:	f7ff fd7d 	bl	10ccc <_Unwind_decode_typeinfo_ptr.isra.0>
   111d2:	ab04      	add	r3, sp, #16
   111d4:	4601      	mov	r1, r0
   111d6:	2200      	movs	r2, #0
   111d8:	4620      	mov	r0, r4
   111da:	f011 f915 	bl	22408 <__cxa_type_match>
   111de:	2800      	cmp	r0, #0
   111e0:	d150      	bne.n	11284 <__gnu_unwind_pr_common+0x2a0>
   111e2:	45b9      	cmp	r9, r7
   111e4:	4650      	mov	r0, sl
   111e6:	f109 0901 	add.w	r9, r9, #1
   111ea:	f10a 0a04 	add.w	sl, sl, #4
   111ee:	d1ed      	bne.n	111cc <__gnu_unwind_pr_common+0x1e8>
   111f0:	4630      	mov	r0, r6
   111f2:	210d      	movs	r1, #13
   111f4:	f7ff fe8a 	bl	10f0c <_Unwind_GetGR>
   111f8:	9b04      	ldr	r3, [sp, #16]
   111fa:	4602      	mov	r2, r0
   111fc:	2006      	movs	r0, #6
   111fe:	6222      	str	r2, [r4, #32]
   11200:	e9c4 3b09 	strd	r3, fp, [r4, #36]	; 0x24
   11204:	e74a      	b.n	1109c <__gnu_unwind_pr_common+0xb8>
   11206:	f1b8 0f00 	cmp.w	r8, #0
   1120a:	d1b0      	bne.n	1116e <__gnu_unwind_pr_common+0x18a>
   1120c:	e9db 2300 	ldrd	r2, r3, [fp]
   11210:	1c99      	adds	r1, r3, #2
   11212:	ea4f 72d2 	mov.w	r2, r2, lsr #31
   11216:	f43f af40 	beq.w	1109a <__gnu_unwind_pr_common+0xb6>
   1121a:	f104 0158 	add.w	r1, r4, #88	; 0x58
   1121e:	3301      	adds	r3, #1
   11220:	9104      	str	r1, [sp, #16]
   11222:	d035      	beq.n	11290 <__gnu_unwind_pr_common+0x2ac>
   11224:	f10b 0004 	add.w	r0, fp, #4
   11228:	f7ff fd50 	bl	10ccc <_Unwind_decode_typeinfo_ptr.isra.0>
   1122c:	ab04      	add	r3, sp, #16
   1122e:	4601      	mov	r1, r0
   11230:	4620      	mov	r0, r4
   11232:	f011 f8e9 	bl	22408 <__cxa_type_match>
   11236:	2800      	cmp	r0, #0
   11238:	f43f af75 	beq.w	11126 <__gnu_unwind_pr_common+0x142>
   1123c:	4681      	mov	r9, r0
   1123e:	210d      	movs	r1, #13
   11240:	4630      	mov	r0, r6
   11242:	465f      	mov	r7, fp
   11244:	f7ff fe62 	bl	10f0c <_Unwind_GetGR>
   11248:	f1b9 0f02 	cmp.w	r9, #2
   1124c:	6220      	str	r0, [r4, #32]
   1124e:	d125      	bne.n	1129c <__gnu_unwind_pr_common+0x2b8>
   11250:	4623      	mov	r3, r4
   11252:	9a04      	ldr	r2, [sp, #16]
   11254:	f843 2f2c 	str.w	r2, [r3, #44]!
   11258:	6263      	str	r3, [r4, #36]	; 0x24
   1125a:	2006      	movs	r0, #6
   1125c:	62a7      	str	r7, [r4, #40]	; 0x28
   1125e:	e71d      	b.n	1109c <__gnu_unwind_pr_common+0xb8>
   11260:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11262:	459b      	cmp	fp, r3
   11264:	d180      	bne.n	11168 <__gnu_unwind_pr_common+0x184>
   11266:	2104      	movs	r1, #4
   11268:	2300      	movs	r3, #0
   1126a:	eb0b 0201 	add.w	r2, fp, r1
   1126e:	e9c4 730a 	strd	r7, r3, [r4, #40]	; 0x28
   11272:	e9c4 120c 	strd	r1, r2, [r4, #48]	; 0x30
   11276:	f8db 2000 	ldr.w	r2, [fp]
   1127a:	429a      	cmp	r2, r3
   1127c:	db11      	blt.n	112a2 <__gnu_unwind_pr_common+0x2be>
   1127e:	2301      	movs	r3, #1
   11280:	9301      	str	r3, [sp, #4]
   11282:	e749      	b.n	11118 <__gnu_unwind_pr_common+0x134>
   11284:	4645      	mov	r5, r8
   11286:	f8db 3000 	ldr.w	r3, [fp]
   1128a:	f8dd 800c 	ldr.w	r8, [sp, #12]
   1128e:	e73f      	b.n	11110 <__gnu_unwind_pr_common+0x12c>
   11290:	465f      	mov	r7, fp
   11292:	4630      	mov	r0, r6
   11294:	210d      	movs	r1, #13
   11296:	f7ff fe39 	bl	10f0c <_Unwind_GetGR>
   1129a:	6220      	str	r0, [r4, #32]
   1129c:	9b04      	ldr	r3, [sp, #16]
   1129e:	6263      	str	r3, [r4, #36]	; 0x24
   112a0:	e7db      	b.n	1125a <__gnu_unwind_pr_common+0x276>
   112a2:	463b      	mov	r3, r7
   112a4:	1c58      	adds	r0, r3, #1
   112a6:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
   112aa:	f7ff fc47 	bl	10b3c <selfrel_offset31>
   112ae:	210f      	movs	r1, #15
   112b0:	4602      	mov	r2, r0
   112b2:	4630      	mov	r0, r6
   112b4:	f7ff fe50 	bl	10f58 <_Unwind_SetGR>
   112b8:	2300      	movs	r3, #0
   112ba:	4630      	mov	r0, r6
   112bc:	4622      	mov	r2, r4
   112be:	4619      	mov	r1, r3
   112c0:	f7ff fe4a 	bl	10f58 <_Unwind_SetGR>
   112c4:	2007      	movs	r0, #7
   112c6:	e6e9      	b.n	1109c <__gnu_unwind_pr_common+0xb8>
   112c8:	000224c5 	.word	0x000224c5

000112cc <__aeabi_unwind_cpp_pr0>:
   112cc:	2300      	movs	r3, #0
   112ce:	e689      	b.n	10fe4 <__gnu_unwind_pr_common>

000112d0 <__aeabi_unwind_cpp_pr1>:
   112d0:	2301      	movs	r3, #1
   112d2:	e687      	b.n	10fe4 <__gnu_unwind_pr_common>

000112d4 <__aeabi_unwind_cpp_pr2>:
   112d4:	2302      	movs	r3, #2
   112d6:	e685      	b.n	10fe4 <__gnu_unwind_pr_common>

000112d8 <_Unwind_VRS_Pop>:
   112d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   112dc:	4606      	mov	r6, r0
   112de:	b0c3      	sub	sp, #268	; 0x10c
   112e0:	4615      	mov	r5, r2
   112e2:	461c      	mov	r4, r3
   112e4:	2904      	cmp	r1, #4
   112e6:	f200 80bf 	bhi.w	11468 <_Unwind_VRS_Pop+0x190>
   112ea:	e8df f001 	tbb	[pc, r1]
   112ee:	56a1      	.short	0x56a1
   112f0:	29bd      	.short	0x29bd
   112f2:	03          	.byte	0x03
   112f3:	00          	.byte	0x00
   112f4:	2c00      	cmp	r4, #0
   112f6:	f040 80b7 	bne.w	11468 <_Unwind_VRS_Pop+0x190>
   112fa:	2a10      	cmp	r2, #16
   112fc:	f200 80b4 	bhi.w	11468 <_Unwind_VRS_Pop+0x190>
   11300:	6803      	ldr	r3, [r0, #0]
   11302:	06df      	lsls	r7, r3, #27
   11304:	f100 80b4 	bmi.w	11470 <_Unwind_VRS_Pop+0x198>
   11308:	af20      	add	r7, sp, #128	; 0x80
   1130a:	2401      	movs	r4, #1
   1130c:	4638      	mov	r0, r7
   1130e:	f000 f9ad 	bl	1166c <__gnu_Unwind_Save_WMMXC>
   11312:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   11314:	2300      	movs	r3, #0
   11316:	fa04 f103 	lsl.w	r1, r4, r3
   1131a:	4602      	mov	r2, r0
   1131c:	4229      	tst	r1, r5
   1131e:	d004      	beq.n	1132a <_Unwind_VRS_Pop+0x52>
   11320:	f852 1b04 	ldr.w	r1, [r2], #4
   11324:	4610      	mov	r0, r2
   11326:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
   1132a:	3301      	adds	r3, #1
   1132c:	2b04      	cmp	r3, #4
   1132e:	d1f2      	bne.n	11316 <_Unwind_VRS_Pop+0x3e>
   11330:	63b0      	str	r0, [r6, #56]	; 0x38
   11332:	4638      	mov	r0, r7
   11334:	f000 f990 	bl	11658 <__gnu_Unwind_Restore_WMMXC>
   11338:	2000      	movs	r0, #0
   1133a:	b043      	add	sp, #268	; 0x10c
   1133c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11340:	2c03      	cmp	r4, #3
   11342:	f040 8091 	bne.w	11468 <_Unwind_VRS_Pop+0x190>
   11346:	fa1f f882 	uxth.w	r8, r2
   1134a:	0c14      	lsrs	r4, r2, #16
   1134c:	eb08 4512 	add.w	r5, r8, r2, lsr #16
   11350:	2d10      	cmp	r5, #16
   11352:	f200 8089 	bhi.w	11468 <_Unwind_VRS_Pop+0x190>
   11356:	6803      	ldr	r3, [r0, #0]
   11358:	071a      	lsls	r2, r3, #28
   1135a:	f100 80d7 	bmi.w	1150c <_Unwind_VRS_Pop+0x234>
   1135e:	af20      	add	r7, sp, #128	; 0x80
   11360:	4638      	mov	r0, r7
   11362:	f000 f957 	bl	11614 <__gnu_Unwind_Save_WMMXD>
   11366:	6bb5      	ldr	r5, [r6, #56]	; 0x38
   11368:	eb07 01c4 	add.w	r1, r7, r4, lsl #3
   1136c:	f1b8 0f00 	cmp.w	r8, #0
   11370:	d00b      	beq.n	1138a <_Unwind_VRS_Pop+0xb2>
   11372:	460b      	mov	r3, r1
   11374:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
   11378:	ea4f 08c8 	mov.w	r8, r8, lsl #3
   1137c:	1ae8      	subs	r0, r5, r3
   1137e:	581a      	ldr	r2, [r3, r0]
   11380:	f843 2b04 	str.w	r2, [r3], #4
   11384:	428b      	cmp	r3, r1
   11386:	d1fa      	bne.n	1137e <_Unwind_VRS_Pop+0xa6>
   11388:	4445      	add	r5, r8
   1138a:	4638      	mov	r0, r7
   1138c:	63b5      	str	r5, [r6, #56]	; 0x38
   1138e:	f000 f91f 	bl	115d0 <__gnu_Unwind_Restore_WMMXD>
   11392:	2000      	movs	r0, #0
   11394:	b043      	add	sp, #268	; 0x10c
   11396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1139a:	f004 03fb 	and.w	r3, r4, #251	; 0xfb
   1139e:	ea4f 4812 	mov.w	r8, r2, lsr #16
   113a2:	b295      	uxth	r5, r2
   113a4:	2b01      	cmp	r3, #1
   113a6:	d15f      	bne.n	11468 <_Unwind_VRS_Pop+0x190>
   113a8:	2c01      	cmp	r4, #1
   113aa:	eb08 0905 	add.w	r9, r8, r5
   113ae:	d058      	beq.n	11462 <_Unwind_VRS_Pop+0x18a>
   113b0:	f1b9 0f20 	cmp.w	r9, #32
   113b4:	d858      	bhi.n	11468 <_Unwind_VRS_Pop+0x190>
   113b6:	f1b8 0f0f 	cmp.w	r8, #15
   113ba:	d97e      	bls.n	114ba <_Unwind_VRS_Pop+0x1e2>
   113bc:	2c05      	cmp	r4, #5
   113be:	46a9      	mov	r9, r5
   113c0:	f000 80b3 	beq.w	1152a <_Unwind_VRS_Pop+0x252>
   113c4:	2d00      	cmp	r5, #0
   113c6:	d14f      	bne.n	11468 <_Unwind_VRS_Pop+0x190>
   113c8:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   113ca:	b36d      	cbz	r5, 11428 <_Unwind_VRS_Pop+0x150>
   113cc:	af20      	add	r7, sp, #128	; 0x80
   113ce:	f04f 0900 	mov.w	r9, #0
   113d2:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   113d6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   113da:	3f04      	subs	r7, #4
   113dc:	f853 1b04 	ldr.w	r1, [r3], #4
   113e0:	429d      	cmp	r5, r3
   113e2:	f847 1f04 	str.w	r1, [r7, #4]!
   113e6:	d1f9      	bne.n	113dc <_Unwind_VRS_Pop+0x104>
   113e8:	f1b9 0f00 	cmp.w	r9, #0
   113ec:	d00f      	beq.n	1140e <_Unwind_VRS_Pop+0x136>
   113ee:	466f      	mov	r7, sp
   113f0:	4641      	mov	r1, r8
   113f2:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
   113f6:	2910      	cmp	r1, #16
   113f8:	bf38      	it	cc
   113fa:	2110      	movcc	r1, #16
   113fc:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
   11400:	3984      	subs	r1, #132	; 0x84
   11402:	f853 0b04 	ldr.w	r0, [r3], #4
   11406:	429d      	cmp	r5, r3
   11408:	f841 0f04 	str.w	r0, [r1, #4]!
   1140c:	d1f9      	bne.n	11402 <_Unwind_VRS_Pop+0x12a>
   1140e:	2c01      	cmp	r4, #1
   11410:	f000 8084 	beq.w	1151c <_Unwind_VRS_Pop+0x244>
   11414:	f1b8 0f0f 	cmp.w	r8, #15
   11418:	63b5      	str	r5, [r6, #56]	; 0x38
   1141a:	d973      	bls.n	11504 <_Unwind_VRS_Pop+0x22c>
   1141c:	f1b9 0f00 	cmp.w	r9, #0
   11420:	d002      	beq.n	11428 <_Unwind_VRS_Pop+0x150>
   11422:	4668      	mov	r0, sp
   11424:	f000 f8cc 	bl	115c0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   11428:	2000      	movs	r0, #0
   1142a:	b043      	add	sp, #268	; 0x10c
   1142c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11430:	b9d4      	cbnz	r4, 11468 <_Unwind_VRS_Pop+0x190>
   11432:	4623      	mov	r3, r4
   11434:	b297      	uxth	r7, r2
   11436:	6b84      	ldr	r4, [r0, #56]	; 0x38
   11438:	f106 0c04 	add.w	ip, r6, #4
   1143c:	2001      	movs	r0, #1
   1143e:	fa00 f103 	lsl.w	r1, r0, r3
   11442:	4622      	mov	r2, r4
   11444:	4239      	tst	r1, r7
   11446:	d004      	beq.n	11452 <_Unwind_VRS_Pop+0x17a>
   11448:	f852 1b04 	ldr.w	r1, [r2], #4
   1144c:	4614      	mov	r4, r2
   1144e:	f84c 1023 	str.w	r1, [ip, r3, lsl #2]
   11452:	3301      	adds	r3, #1
   11454:	2b10      	cmp	r3, #16
   11456:	d1f2      	bne.n	1143e <_Unwind_VRS_Pop+0x166>
   11458:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
   1145c:	d1e4      	bne.n	11428 <_Unwind_VRS_Pop+0x150>
   1145e:	63b4      	str	r4, [r6, #56]	; 0x38
   11460:	e003      	b.n	1146a <_Unwind_VRS_Pop+0x192>
   11462:	f1b9 0f10 	cmp.w	r9, #16
   11466:	d90b      	bls.n	11480 <_Unwind_VRS_Pop+0x1a8>
   11468:	2002      	movs	r0, #2
   1146a:	b043      	add	sp, #268	; 0x10c
   1146c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11470:	f023 0310 	bic.w	r3, r3, #16
   11474:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
   11478:	6033      	str	r3, [r6, #0]
   1147a:	f000 f8f7 	bl	1166c <__gnu_Unwind_Save_WMMXC>
   1147e:	e743      	b.n	11308 <_Unwind_VRS_Pop+0x30>
   11480:	f1b8 0f0f 	cmp.w	r8, #15
   11484:	d8f0      	bhi.n	11468 <_Unwind_VRS_Pop+0x190>
   11486:	6803      	ldr	r3, [r0, #0]
   11488:	07d8      	lsls	r0, r3, #31
   1148a:	d55f      	bpl.n	1154c <_Unwind_VRS_Pop+0x274>
   1148c:	f106 0048 	add.w	r0, r6, #72	; 0x48
   11490:	f023 0303 	bic.w	r3, r3, #3
   11494:	6033      	str	r3, [r6, #0]
   11496:	f000 f887 	bl	115a8 <__gnu_Unwind_Save_VFP>
   1149a:	2c01      	cmp	r4, #1
   1149c:	d056      	beq.n	1154c <_Unwind_VRS_Pop+0x274>
   1149e:	f1b8 0f0f 	cmp.w	r8, #15
   114a2:	d891      	bhi.n	113c8 <_Unwind_VRS_Pop+0xf0>
   114a4:	af20      	add	r7, sp, #128	; 0x80
   114a6:	4638      	mov	r0, r7
   114a8:	f000 f886 	bl	115b8 <__gnu_Unwind_Save_VFP_D>
   114ac:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   114ae:	2d00      	cmp	r5, #0
   114b0:	d18d      	bne.n	113ce <_Unwind_VRS_Pop+0xf6>
   114b2:	4638      	mov	r0, r7
   114b4:	f000 f87c 	bl	115b0 <__gnu_Unwind_Restore_VFP_D>
   114b8:	e7b6      	b.n	11428 <_Unwind_VRS_Pop+0x150>
   114ba:	f1b9 0f10 	cmp.w	r9, #16
   114be:	d94f      	bls.n	11560 <_Unwind_VRS_Pop+0x288>
   114c0:	2c05      	cmp	r4, #5
   114c2:	d1d1      	bne.n	11468 <_Unwind_VRS_Pop+0x190>
   114c4:	6833      	ldr	r3, [r6, #0]
   114c6:	f1a9 0910 	sub.w	r9, r9, #16
   114ca:	07dd      	lsls	r5, r3, #31
   114cc:	d509      	bpl.n	114e2 <_Unwind_VRS_Pop+0x20a>
   114ce:	f023 0301 	bic.w	r3, r3, #1
   114d2:	4630      	mov	r0, r6
   114d4:	f043 0302 	orr.w	r3, r3, #2
   114d8:	f840 3b48 	str.w	r3, [r0], #72
   114dc:	f000 f86c 	bl	115b8 <__gnu_Unwind_Save_VFP_D>
   114e0:	6833      	ldr	r3, [r6, #0]
   114e2:	0759      	lsls	r1, r3, #29
   114e4:	d427      	bmi.n	11536 <_Unwind_VRS_Pop+0x25e>
   114e6:	a820      	add	r0, sp, #128	; 0x80
   114e8:	f000 f866 	bl	115b8 <__gnu_Unwind_Save_VFP_D>
   114ec:	466f      	mov	r7, sp
   114ee:	f1c8 0510 	rsb	r5, r8, #16
   114f2:	4638      	mov	r0, r7
   114f4:	f000 f868 	bl	115c8 <__gnu_Unwind_Save_VFP_D_16_to_31>
   114f8:	2d00      	cmp	r5, #0
   114fa:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   114fc:	f77f af78 	ble.w	113f0 <_Unwind_VRS_Pop+0x118>
   11500:	af20      	add	r7, sp, #128	; 0x80
   11502:	e766      	b.n	113d2 <_Unwind_VRS_Pop+0xfa>
   11504:	a820      	add	r0, sp, #128	; 0x80
   11506:	f000 f853 	bl	115b0 <__gnu_Unwind_Restore_VFP_D>
   1150a:	e787      	b.n	1141c <_Unwind_VRS_Pop+0x144>
   1150c:	f023 0308 	bic.w	r3, r3, #8
   11510:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   11514:	6033      	str	r3, [r6, #0]
   11516:	f000 f87d 	bl	11614 <__gnu_Unwind_Save_WMMXD>
   1151a:	e720      	b.n	1135e <_Unwind_VRS_Pop+0x86>
   1151c:	af20      	add	r7, sp, #128	; 0x80
   1151e:	3504      	adds	r5, #4
   11520:	4638      	mov	r0, r7
   11522:	63b5      	str	r5, [r6, #56]	; 0x38
   11524:	f000 f83c 	bl	115a0 <__gnu_Unwind_Restore_VFP>
   11528:	e77e      	b.n	11428 <_Unwind_VRS_Pop+0x150>
   1152a:	2d00      	cmp	r5, #0
   1152c:	f43f af4c 	beq.w	113c8 <_Unwind_VRS_Pop+0xf0>
   11530:	6833      	ldr	r3, [r6, #0]
   11532:	075a      	lsls	r2, r3, #29
   11534:	d5da      	bpl.n	114ec <_Unwind_VRS_Pop+0x214>
   11536:	f023 0304 	bic.w	r3, r3, #4
   1153a:	4630      	mov	r0, r6
   1153c:	f840 3bd0 	str.w	r3, [r0], #208
   11540:	f000 f842 	bl	115c8 <__gnu_Unwind_Save_VFP_D_16_to_31>
   11544:	f1b8 0f0f 	cmp.w	r8, #15
   11548:	d8d0      	bhi.n	114ec <_Unwind_VRS_Pop+0x214>
   1154a:	e7cc      	b.n	114e6 <_Unwind_VRS_Pop+0x20e>
   1154c:	af20      	add	r7, sp, #128	; 0x80
   1154e:	4638      	mov	r0, r7
   11550:	f000 f82a 	bl	115a8 <__gnu_Unwind_Save_VFP>
   11554:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   11556:	2d00      	cmp	r5, #0
   11558:	f47f af39 	bne.w	113ce <_Unwind_VRS_Pop+0xf6>
   1155c:	461d      	mov	r5, r3
   1155e:	e7de      	b.n	1151e <_Unwind_VRS_Pop+0x246>
   11560:	6833      	ldr	r3, [r6, #0]
   11562:	07d9      	lsls	r1, r3, #31
   11564:	d599      	bpl.n	1149a <_Unwind_VRS_Pop+0x1c2>
   11566:	2c05      	cmp	r4, #5
   11568:	f106 0048 	add.w	r0, r6, #72	; 0x48
   1156c:	d190      	bne.n	11490 <_Unwind_VRS_Pop+0x1b8>
   1156e:	f023 0301 	bic.w	r3, r3, #1
   11572:	af20      	add	r7, sp, #128	; 0x80
   11574:	f043 0302 	orr.w	r3, r3, #2
   11578:	6033      	str	r3, [r6, #0]
   1157a:	f000 f81d 	bl	115b8 <__gnu_Unwind_Save_VFP_D>
   1157e:	4638      	mov	r0, r7
   11580:	f000 f81a 	bl	115b8 <__gnu_Unwind_Save_VFP_D>
   11584:	e792      	b.n	114ac <_Unwind_VRS_Pop+0x1d4>
   11586:	bf00      	nop

00011588 <__restore_core_regs>:
   11588:	f100 0134 	add.w	r1, r0, #52	; 0x34
   1158c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
   11590:	469c      	mov	ip, r3
   11592:	46a6      	mov	lr, r4
   11594:	f84c 5d04 	str.w	r5, [ip, #-4]!
   11598:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   1159c:	46e5      	mov	sp, ip
   1159e:	bd00      	pop	{pc}

000115a0 <__gnu_Unwind_Restore_VFP>:
   115a0:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
   115a4:	4770      	bx	lr
   115a6:	bf00      	nop

000115a8 <__gnu_Unwind_Save_VFP>:
   115a8:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
   115ac:	4770      	bx	lr
   115ae:	bf00      	nop

000115b0 <__gnu_Unwind_Restore_VFP_D>:
   115b0:	ec90 0b20 	vldmia	r0, {d0-d15}
   115b4:	4770      	bx	lr
   115b6:	bf00      	nop

000115b8 <__gnu_Unwind_Save_VFP_D>:
   115b8:	ec80 0b20 	vstmia	r0, {d0-d15}
   115bc:	4770      	bx	lr
   115be:	bf00      	nop

000115c0 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
   115c0:	ecd0 0b20 	vldmia	r0, {d16-d31}
   115c4:	4770      	bx	lr
   115c6:	bf00      	nop

000115c8 <__gnu_Unwind_Save_VFP_D_16_to_31>:
   115c8:	ecc0 0b20 	vstmia	r0, {d16-d31}
   115cc:	4770      	bx	lr
   115ce:	bf00      	nop

000115d0 <__gnu_Unwind_Restore_WMMXD>:
   115d0:	ecf0 0102 	ldfe	f0, [r0], #8
   115d4:	ecf0 1102 	ldfe	f1, [r0], #8
   115d8:	ecf0 2102 	ldfe	f2, [r0], #8
   115dc:	ecf0 3102 	ldfe	f3, [r0], #8
   115e0:	ecf0 4102 	ldfe	f4, [r0], #8
   115e4:	ecf0 5102 	ldfe	f5, [r0], #8
   115e8:	ecf0 6102 	ldfe	f6, [r0], #8
   115ec:	ecf0 7102 	ldfe	f7, [r0], #8
   115f0:	ecf0 8102 	ldfp	f0, [r0], #8
   115f4:	ecf0 9102 	ldfp	f1, [r0], #8
   115f8:	ecf0 a102 	ldfp	f2, [r0], #8
   115fc:	ecf0 b102 	ldfp	f3, [r0], #8
   11600:	ecf0 c102 	ldfp	f4, [r0], #8
   11604:	ecf0 d102 	ldfp	f5, [r0], #8
   11608:	ecf0 e102 	ldfp	f6, [r0], #8
   1160c:	ecf0 f102 	ldfp	f7, [r0], #8
   11610:	4770      	bx	lr
   11612:	bf00      	nop

00011614 <__gnu_Unwind_Save_WMMXD>:
   11614:	ece0 0102 	stfe	f0, [r0], #8
   11618:	ece0 1102 	stfe	f1, [r0], #8
   1161c:	ece0 2102 	stfe	f2, [r0], #8
   11620:	ece0 3102 	stfe	f3, [r0], #8
   11624:	ece0 4102 	stfe	f4, [r0], #8
   11628:	ece0 5102 	stfe	f5, [r0], #8
   1162c:	ece0 6102 	stfe	f6, [r0], #8
   11630:	ece0 7102 	stfe	f7, [r0], #8
   11634:	ece0 8102 	stfp	f0, [r0], #8
   11638:	ece0 9102 	stfp	f1, [r0], #8
   1163c:	ece0 a102 	stfp	f2, [r0], #8
   11640:	ece0 b102 	stfp	f3, [r0], #8
   11644:	ece0 c102 	stfp	f4, [r0], #8
   11648:	ece0 d102 	stfp	f5, [r0], #8
   1164c:	ece0 e102 	stfp	f6, [r0], #8
   11650:	ece0 f102 	stfp	f7, [r0], #8
   11654:	4770      	bx	lr
   11656:	bf00      	nop

00011658 <__gnu_Unwind_Restore_WMMXC>:
   11658:	fcb0 8101 	ldc2	1, cr8, [r0], #4
   1165c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
   11660:	fcb0 a101 	ldc2	1, cr10, [r0], #4
   11664:	fcb0 b101 	ldc2	1, cr11, [r0], #4
   11668:	4770      	bx	lr
   1166a:	bf00      	nop

0001166c <__gnu_Unwind_Save_WMMXC>:
   1166c:	fca0 8101 	stc2	1, cr8, [r0], #4
   11670:	fca0 9101 	stc2	1, cr9, [r0], #4
   11674:	fca0 a101 	stc2	1, cr10, [r0], #4
   11678:	fca0 b101 	stc2	1, cr11, [r0], #4
   1167c:	4770      	bx	lr
   1167e:	bf00      	nop

00011680 <_Unwind_RaiseException>:
   11680:	46ec      	mov	ip, sp
   11682:	b500      	push	{lr}
   11684:	e92d 5000 	stmdb	sp!, {ip, lr}
   11688:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1168c:	f04f 0300 	mov.w	r3, #0
   11690:	e92d 000c 	stmdb	sp!, {r2, r3}
   11694:	a901      	add	r1, sp, #4
   11696:	f7ff fbb1 	bl	10dfc <__gnu_Unwind_RaiseException>
   1169a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1169e:	b012      	add	sp, #72	; 0x48
   116a0:	4770      	bx	lr
   116a2:	bf00      	nop

000116a4 <_Unwind_Resume>:
   116a4:	46ec      	mov	ip, sp
   116a6:	b500      	push	{lr}
   116a8:	e92d 5000 	stmdb	sp!, {ip, lr}
   116ac:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   116b0:	f04f 0300 	mov.w	r3, #0
   116b4:	e92d 000c 	stmdb	sp!, {r2, r3}
   116b8:	a901      	add	r1, sp, #4
   116ba:	f7ff fbd9 	bl	10e70 <__gnu_Unwind_Resume>
   116be:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   116c2:	b012      	add	sp, #72	; 0x48
   116c4:	4770      	bx	lr
   116c6:	bf00      	nop

000116c8 <_Unwind_Resume_or_Rethrow>:
   116c8:	46ec      	mov	ip, sp
   116ca:	b500      	push	{lr}
   116cc:	e92d 5000 	stmdb	sp!, {ip, lr}
   116d0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   116d4:	f04f 0300 	mov.w	r3, #0
   116d8:	e92d 000c 	stmdb	sp!, {r2, r3}
   116dc:	a901      	add	r1, sp, #4
   116de:	f7ff fbe9 	bl	10eb4 <__gnu_Unwind_Resume_or_Rethrow>
   116e2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   116e6:	b012      	add	sp, #72	; 0x48
   116e8:	4770      	bx	lr
   116ea:	bf00      	nop

000116ec <_Unwind_ForcedUnwind>:
   116ec:	46ec      	mov	ip, sp
   116ee:	b500      	push	{lr}
   116f0:	e92d 5000 	stmdb	sp!, {ip, lr}
   116f4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   116f8:	f04f 0300 	mov.w	r3, #0
   116fc:	e92d 000c 	stmdb	sp!, {r2, r3}
   11700:	ab01      	add	r3, sp, #4
   11702:	f7ff fbab 	bl	10e5c <__gnu_Unwind_ForcedUnwind>
   11706:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1170a:	b012      	add	sp, #72	; 0x48
   1170c:	4770      	bx	lr
   1170e:	bf00      	nop

00011710 <_Unwind_Backtrace>:
   11710:	46ec      	mov	ip, sp
   11712:	b500      	push	{lr}
   11714:	e92d 5000 	stmdb	sp!, {ip, lr}
   11718:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1171c:	f04f 0300 	mov.w	r3, #0
   11720:	e92d 000c 	stmdb	sp!, {r2, r3}
   11724:	aa01      	add	r2, sp, #4
   11726:	f7ff fc23 	bl	10f70 <__gnu_Unwind_Backtrace>
   1172a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1172e:	b012      	add	sp, #72	; 0x48
   11730:	4770      	bx	lr
   11732:	bf00      	nop

00011734 <next_unwind_byte>:
   11734:	7a02      	ldrb	r2, [r0, #8]
   11736:	4603      	mov	r3, r0
   11738:	b97a      	cbnz	r2, 1175a <next_unwind_byte+0x26>
   1173a:	7a42      	ldrb	r2, [r0, #9]
   1173c:	b1a2      	cbz	r2, 11768 <next_unwind_byte+0x34>
   1173e:	6841      	ldr	r1, [r0, #4]
   11740:	3a01      	subs	r2, #1
   11742:	b430      	push	{r4, r5}
   11744:	7242      	strb	r2, [r0, #9]
   11746:	2403      	movs	r4, #3
   11748:	6808      	ldr	r0, [r1, #0]
   1174a:	1d0d      	adds	r5, r1, #4
   1174c:	721c      	strb	r4, [r3, #8]
   1174e:	0202      	lsls	r2, r0, #8
   11750:	605d      	str	r5, [r3, #4]
   11752:	0e00      	lsrs	r0, r0, #24
   11754:	601a      	str	r2, [r3, #0]
   11756:	bc30      	pop	{r4, r5}
   11758:	4770      	bx	lr
   1175a:	6800      	ldr	r0, [r0, #0]
   1175c:	3a01      	subs	r2, #1
   1175e:	721a      	strb	r2, [r3, #8]
   11760:	0202      	lsls	r2, r0, #8
   11762:	0e00      	lsrs	r0, r0, #24
   11764:	601a      	str	r2, [r3, #0]
   11766:	4770      	bx	lr
   11768:	20b0      	movs	r0, #176	; 0xb0
   1176a:	4770      	bx	lr

0001176c <_Unwind_GetGR.constprop.0>:
   1176c:	b500      	push	{lr}
   1176e:	b085      	sub	sp, #20
   11770:	2300      	movs	r3, #0
   11772:	220c      	movs	r2, #12
   11774:	a903      	add	r1, sp, #12
   11776:	9100      	str	r1, [sp, #0]
   11778:	4619      	mov	r1, r3
   1177a:	f7ff fbad 	bl	10ed8 <_Unwind_VRS_Get>
   1177e:	9803      	ldr	r0, [sp, #12]
   11780:	b005      	add	sp, #20
   11782:	f85d fb04 	ldr.w	pc, [sp], #4
   11786:	bf00      	nop

00011788 <unwind_UCB_from_context>:
   11788:	e7f0      	b.n	1176c <_Unwind_GetGR.constprop.0>
   1178a:	bf00      	nop

0001178c <__gnu_unwind_execute>:
   1178c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11790:	f04f 0800 	mov.w	r8, #0
   11794:	b085      	sub	sp, #20
   11796:	4606      	mov	r6, r0
   11798:	460d      	mov	r5, r1
   1179a:	4628      	mov	r0, r5
   1179c:	f7ff ffca 	bl	11734 <next_unwind_byte>
   117a0:	28b0      	cmp	r0, #176	; 0xb0
   117a2:	4604      	mov	r4, r0
   117a4:	f000 80bd 	beq.w	11922 <__gnu_unwind_execute+0x196>
   117a8:	0607      	lsls	r7, r0, #24
   117aa:	d520      	bpl.n	117ee <__gnu_unwind_execute+0x62>
   117ac:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   117b0:	2b80      	cmp	r3, #128	; 0x80
   117b2:	d04e      	beq.n	11852 <__gnu_unwind_execute+0xc6>
   117b4:	2b90      	cmp	r3, #144	; 0x90
   117b6:	d037      	beq.n	11828 <__gnu_unwind_execute+0x9c>
   117b8:	2ba0      	cmp	r3, #160	; 0xa0
   117ba:	d061      	beq.n	11880 <__gnu_unwind_execute+0xf4>
   117bc:	2bb0      	cmp	r3, #176	; 0xb0
   117be:	d076      	beq.n	118ae <__gnu_unwind_execute+0x122>
   117c0:	2bc0      	cmp	r3, #192	; 0xc0
   117c2:	f000 808d 	beq.w	118e0 <__gnu_unwind_execute+0x154>
   117c6:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   117ca:	2bd0      	cmp	r3, #208	; 0xd0
   117cc:	d10b      	bne.n	117e6 <__gnu_unwind_execute+0x5a>
   117ce:	f000 0207 	and.w	r2, r0, #7
   117d2:	2101      	movs	r1, #1
   117d4:	2305      	movs	r3, #5
   117d6:	4630      	mov	r0, r6
   117d8:	440a      	add	r2, r1
   117da:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   117de:	f7ff fd7b 	bl	112d8 <_Unwind_VRS_Pop>
   117e2:	2800      	cmp	r0, #0
   117e4:	d0d9      	beq.n	1179a <__gnu_unwind_execute+0xe>
   117e6:	2009      	movs	r0, #9
   117e8:	b005      	add	sp, #20
   117ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   117ee:	0087      	lsls	r7, r0, #2
   117f0:	f10d 090c 	add.w	r9, sp, #12
   117f4:	2300      	movs	r3, #0
   117f6:	220d      	movs	r2, #13
   117f8:	b2ff      	uxtb	r7, r7
   117fa:	4630      	mov	r0, r6
   117fc:	4619      	mov	r1, r3
   117fe:	f8cd 9000 	str.w	r9, [sp]
   11802:	f7ff fb69 	bl	10ed8 <_Unwind_VRS_Get>
   11806:	3704      	adds	r7, #4
   11808:	9b03      	ldr	r3, [sp, #12]
   1180a:	0660      	lsls	r0, r4, #25
   1180c:	f04f 020d 	mov.w	r2, #13
   11810:	4630      	mov	r0, r6
   11812:	bf4c      	ite	mi
   11814:	1bdf      	submi	r7, r3, r7
   11816:	18ff      	addpl	r7, r7, r3
   11818:	2300      	movs	r3, #0
   1181a:	f8cd 9000 	str.w	r9, [sp]
   1181e:	9703      	str	r7, [sp, #12]
   11820:	4619      	mov	r1, r3
   11822:	f7ff fb7f 	bl	10f24 <_Unwind_VRS_Set>
   11826:	e7b8      	b.n	1179a <__gnu_unwind_execute+0xe>
   11828:	f000 030d 	and.w	r3, r0, #13
   1182c:	2b0d      	cmp	r3, #13
   1182e:	d0da      	beq.n	117e6 <__gnu_unwind_execute+0x5a>
   11830:	af03      	add	r7, sp, #12
   11832:	2300      	movs	r3, #0
   11834:	f000 020f 	and.w	r2, r0, #15
   11838:	4630      	mov	r0, r6
   1183a:	4619      	mov	r1, r3
   1183c:	9700      	str	r7, [sp, #0]
   1183e:	f7ff fb4b 	bl	10ed8 <_Unwind_VRS_Get>
   11842:	2300      	movs	r3, #0
   11844:	220d      	movs	r2, #13
   11846:	4630      	mov	r0, r6
   11848:	4619      	mov	r1, r3
   1184a:	9700      	str	r7, [sp, #0]
   1184c:	f7ff fb6a 	bl	10f24 <_Unwind_VRS_Set>
   11850:	e7a3      	b.n	1179a <__gnu_unwind_execute+0xe>
   11852:	0224      	lsls	r4, r4, #8
   11854:	4628      	mov	r0, r5
   11856:	f7ff ff6d 	bl	11734 <next_unwind_byte>
   1185a:	4320      	orrs	r0, r4
   1185c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   11860:	d0c1      	beq.n	117e6 <__gnu_unwind_execute+0x5a>
   11862:	0104      	lsls	r4, r0, #4
   11864:	2300      	movs	r3, #0
   11866:	4630      	mov	r0, r6
   11868:	b2a2      	uxth	r2, r4
   1186a:	4619      	mov	r1, r3
   1186c:	f7ff fd34 	bl	112d8 <_Unwind_VRS_Pop>
   11870:	2800      	cmp	r0, #0
   11872:	d1b8      	bne.n	117e6 <__gnu_unwind_execute+0x5a>
   11874:	f414 4f00 	tst.w	r4, #32768	; 0x8000
   11878:	bf18      	it	ne
   1187a:	f04f 0801 	movne.w	r8, #1
   1187e:	e78c      	b.n	1179a <__gnu_unwind_execute+0xe>
   11880:	43c3      	mvns	r3, r0
   11882:	f44f 627f 	mov.w	r2, #4080	; 0xff0
   11886:	0701      	lsls	r1, r0, #28
   11888:	4630      	mov	r0, r6
   1188a:	f003 0307 	and.w	r3, r3, #7
   1188e:	fa42 f203 	asr.w	r2, r2, r3
   11892:	f04f 0300 	mov.w	r3, #0
   11896:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
   1189a:	4619      	mov	r1, r3
   1189c:	bf48      	it	mi
   1189e:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
   118a2:	f7ff fd19 	bl	112d8 <_Unwind_VRS_Pop>
   118a6:	2800      	cmp	r0, #0
   118a8:	f43f af77 	beq.w	1179a <__gnu_unwind_execute+0xe>
   118ac:	e79b      	b.n	117e6 <__gnu_unwind_execute+0x5a>
   118ae:	28b1      	cmp	r0, #177	; 0xb1
   118b0:	d03c      	beq.n	1192c <__gnu_unwind_execute+0x1a0>
   118b2:	28b2      	cmp	r0, #178	; 0xb2
   118b4:	f000 80b0 	beq.w	11a18 <__gnu_unwind_execute+0x28c>
   118b8:	28b3      	cmp	r0, #179	; 0xb3
   118ba:	d04a      	beq.n	11952 <__gnu_unwind_execute+0x1c6>
   118bc:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
   118c0:	2bb4      	cmp	r3, #180	; 0xb4
   118c2:	d090      	beq.n	117e6 <__gnu_unwind_execute+0x5a>
   118c4:	f000 0207 	and.w	r2, r0, #7
   118c8:	2301      	movs	r3, #1
   118ca:	4630      	mov	r0, r6
   118cc:	441a      	add	r2, r3
   118ce:	4619      	mov	r1, r3
   118d0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   118d4:	f7ff fd00 	bl	112d8 <_Unwind_VRS_Pop>
   118d8:	2800      	cmp	r0, #0
   118da:	f43f af5e 	beq.w	1179a <__gnu_unwind_execute+0xe>
   118de:	e782      	b.n	117e6 <__gnu_unwind_execute+0x5a>
   118e0:	28c6      	cmp	r0, #198	; 0xc6
   118e2:	d04f      	beq.n	11984 <__gnu_unwind_execute+0x1f8>
   118e4:	28c7      	cmp	r0, #199	; 0xc7
   118e6:	d061      	beq.n	119ac <__gnu_unwind_execute+0x220>
   118e8:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   118ec:	2bc0      	cmp	r3, #192	; 0xc0
   118ee:	d070      	beq.n	119d2 <__gnu_unwind_execute+0x246>
   118f0:	28c8      	cmp	r0, #200	; 0xc8
   118f2:	d07c      	beq.n	119ee <__gnu_unwind_execute+0x262>
   118f4:	28c9      	cmp	r0, #201	; 0xc9
   118f6:	f47f af76 	bne.w	117e6 <__gnu_unwind_execute+0x5a>
   118fa:	4628      	mov	r0, r5
   118fc:	f7ff ff1a 	bl	11734 <next_unwind_byte>
   11900:	2305      	movs	r3, #5
   11902:	4602      	mov	r2, r0
   11904:	2101      	movs	r1, #1
   11906:	4630      	mov	r0, r6
   11908:	0314      	lsls	r4, r2, #12
   1190a:	f002 020f 	and.w	r2, r2, #15
   1190e:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
   11912:	440a      	add	r2, r1
   11914:	4322      	orrs	r2, r4
   11916:	f7ff fcdf 	bl	112d8 <_Unwind_VRS_Pop>
   1191a:	2800      	cmp	r0, #0
   1191c:	f43f af3d 	beq.w	1179a <__gnu_unwind_execute+0xe>
   11920:	e761      	b.n	117e6 <__gnu_unwind_execute+0x5a>
   11922:	f1b8 0f00 	cmp.w	r8, #0
   11926:	d01c      	beq.n	11962 <__gnu_unwind_execute+0x1d6>
   11928:	2000      	movs	r0, #0
   1192a:	e75d      	b.n	117e8 <__gnu_unwind_execute+0x5c>
   1192c:	4628      	mov	r0, r5
   1192e:	f7ff ff01 	bl	11734 <next_unwind_byte>
   11932:	4602      	mov	r2, r0
   11934:	2800      	cmp	r0, #0
   11936:	f43f af56 	beq.w	117e6 <__gnu_unwind_execute+0x5a>
   1193a:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   1193e:	f47f af52 	bne.w	117e6 <__gnu_unwind_execute+0x5a>
   11942:	4619      	mov	r1, r3
   11944:	4630      	mov	r0, r6
   11946:	f7ff fcc7 	bl	112d8 <_Unwind_VRS_Pop>
   1194a:	2800      	cmp	r0, #0
   1194c:	f43f af25 	beq.w	1179a <__gnu_unwind_execute+0xe>
   11950:	e749      	b.n	117e6 <__gnu_unwind_execute+0x5a>
   11952:	4628      	mov	r0, r5
   11954:	f7ff feee 	bl	11734 <next_unwind_byte>
   11958:	2301      	movs	r3, #1
   1195a:	4602      	mov	r2, r0
   1195c:	4630      	mov	r0, r6
   1195e:	4619      	mov	r1, r3
   11960:	e7d2      	b.n	11908 <__gnu_unwind_execute+0x17c>
   11962:	ac03      	add	r4, sp, #12
   11964:	4643      	mov	r3, r8
   11966:	220e      	movs	r2, #14
   11968:	4641      	mov	r1, r8
   1196a:	4630      	mov	r0, r6
   1196c:	9400      	str	r4, [sp, #0]
   1196e:	f7ff fab3 	bl	10ed8 <_Unwind_VRS_Get>
   11972:	4630      	mov	r0, r6
   11974:	4643      	mov	r3, r8
   11976:	220f      	movs	r2, #15
   11978:	4641      	mov	r1, r8
   1197a:	9400      	str	r4, [sp, #0]
   1197c:	f7ff fad2 	bl	10f24 <_Unwind_VRS_Set>
   11980:	4640      	mov	r0, r8
   11982:	e731      	b.n	117e8 <__gnu_unwind_execute+0x5c>
   11984:	4628      	mov	r0, r5
   11986:	f7ff fed5 	bl	11734 <next_unwind_byte>
   1198a:	4602      	mov	r2, r0
   1198c:	2303      	movs	r3, #3
   1198e:	4630      	mov	r0, r6
   11990:	0314      	lsls	r4, r2, #12
   11992:	f002 020f 	and.w	r2, r2, #15
   11996:	4619      	mov	r1, r3
   11998:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
   1199c:	3201      	adds	r2, #1
   1199e:	4322      	orrs	r2, r4
   119a0:	f7ff fc9a 	bl	112d8 <_Unwind_VRS_Pop>
   119a4:	2800      	cmp	r0, #0
   119a6:	f43f aef8 	beq.w	1179a <__gnu_unwind_execute+0xe>
   119aa:	e71c      	b.n	117e6 <__gnu_unwind_execute+0x5a>
   119ac:	4628      	mov	r0, r5
   119ae:	f7ff fec1 	bl	11734 <next_unwind_byte>
   119b2:	4602      	mov	r2, r0
   119b4:	2800      	cmp	r0, #0
   119b6:	f43f af16 	beq.w	117e6 <__gnu_unwind_execute+0x5a>
   119ba:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   119be:	f47f af12 	bne.w	117e6 <__gnu_unwind_execute+0x5a>
   119c2:	2104      	movs	r1, #4
   119c4:	4630      	mov	r0, r6
   119c6:	f7ff fc87 	bl	112d8 <_Unwind_VRS_Pop>
   119ca:	2800      	cmp	r0, #0
   119cc:	f43f aee5 	beq.w	1179a <__gnu_unwind_execute+0xe>
   119d0:	e709      	b.n	117e6 <__gnu_unwind_execute+0x5a>
   119d2:	f000 020f 	and.w	r2, r0, #15
   119d6:	2303      	movs	r3, #3
   119d8:	4630      	mov	r0, r6
   119da:	3201      	adds	r2, #1
   119dc:	4619      	mov	r1, r3
   119de:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
   119e2:	f7ff fc79 	bl	112d8 <_Unwind_VRS_Pop>
   119e6:	2800      	cmp	r0, #0
   119e8:	f43f aed7 	beq.w	1179a <__gnu_unwind_execute+0xe>
   119ec:	e6fb      	b.n	117e6 <__gnu_unwind_execute+0x5a>
   119ee:	4628      	mov	r0, r5
   119f0:	f7ff fea0 	bl	11734 <next_unwind_byte>
   119f4:	4602      	mov	r2, r0
   119f6:	2101      	movs	r1, #1
   119f8:	2305      	movs	r3, #5
   119fa:	f002 04f0 	and.w	r4, r2, #240	; 0xf0
   119fe:	f002 020f 	and.w	r2, r2, #15
   11a02:	4630      	mov	r0, r6
   11a04:	3410      	adds	r4, #16
   11a06:	440a      	add	r2, r1
   11a08:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
   11a0c:	f7ff fc64 	bl	112d8 <_Unwind_VRS_Pop>
   11a10:	2800      	cmp	r0, #0
   11a12:	f43f aec2 	beq.w	1179a <__gnu_unwind_execute+0xe>
   11a16:	e6e6      	b.n	117e6 <__gnu_unwind_execute+0x5a>
   11a18:	2300      	movs	r3, #0
   11a1a:	f10d 090c 	add.w	r9, sp, #12
   11a1e:	220d      	movs	r2, #13
   11a20:	4630      	mov	r0, r6
   11a22:	4619      	mov	r1, r3
   11a24:	f8cd 9000 	str.w	r9, [sp]
   11a28:	f7ff fa56 	bl	10ed8 <_Unwind_VRS_Get>
   11a2c:	4628      	mov	r0, r5
   11a2e:	f7ff fe81 	bl	11734 <next_unwind_byte>
   11a32:	0602      	lsls	r2, r0, #24
   11a34:	f04f 0402 	mov.w	r4, #2
   11a38:	d50b      	bpl.n	11a52 <__gnu_unwind_execute+0x2c6>
   11a3a:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   11a3e:	9a03      	ldr	r2, [sp, #12]
   11a40:	4628      	mov	r0, r5
   11a42:	40a3      	lsls	r3, r4
   11a44:	3407      	adds	r4, #7
   11a46:	4413      	add	r3, r2
   11a48:	9303      	str	r3, [sp, #12]
   11a4a:	f7ff fe73 	bl	11734 <next_unwind_byte>
   11a4e:	0603      	lsls	r3, r0, #24
   11a50:	d4f3      	bmi.n	11a3a <__gnu_unwind_execute+0x2ae>
   11a52:	9a03      	ldr	r2, [sp, #12]
   11a54:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   11a58:	2300      	movs	r3, #0
   11a5a:	f8cd 9000 	str.w	r9, [sp]
   11a5e:	fa00 f404 	lsl.w	r4, r0, r4
   11a62:	f502 7001 	add.w	r0, r2, #516	; 0x204
   11a66:	4619      	mov	r1, r3
   11a68:	220d      	movs	r2, #13
   11a6a:	4404      	add	r4, r0
   11a6c:	4630      	mov	r0, r6
   11a6e:	9403      	str	r4, [sp, #12]
   11a70:	f7ff fa58 	bl	10f24 <_Unwind_VRS_Set>
   11a74:	e691      	b.n	1179a <__gnu_unwind_execute+0xe>
   11a76:	bf00      	nop

00011a78 <__gnu_unwind_frame>:
   11a78:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
   11a7a:	460b      	mov	r3, r1
   11a7c:	b530      	push	{r4, r5, lr}
   11a7e:	4618      	mov	r0, r3
   11a80:	b085      	sub	sp, #20
   11a82:	6853      	ldr	r3, [r2, #4]
   11a84:	2503      	movs	r5, #3
   11a86:	f102 0408 	add.w	r4, r2, #8
   11a8a:	a901      	add	r1, sp, #4
   11a8c:	021b      	lsls	r3, r3, #8
   11a8e:	f88d 500c 	strb.w	r5, [sp, #12]
   11a92:	79d2      	ldrb	r2, [r2, #7]
   11a94:	e9cd 3401 	strd	r3, r4, [sp, #4]
   11a98:	f88d 200d 	strb.w	r2, [sp, #13]
   11a9c:	f7ff fe76 	bl	1178c <__gnu_unwind_execute>
   11aa0:	b005      	add	sp, #20
   11aa2:	bd30      	pop	{r4, r5, pc}

00011aa4 <_Unwind_GetRegionStart>:
   11aa4:	b508      	push	{r3, lr}
   11aa6:	f7ff fe6f 	bl	11788 <unwind_UCB_from_context>
   11aaa:	6c80      	ldr	r0, [r0, #72]	; 0x48
   11aac:	bd08      	pop	{r3, pc}
   11aae:	bf00      	nop

00011ab0 <_Unwind_GetLanguageSpecificData>:
   11ab0:	b508      	push	{r3, lr}
   11ab2:	f7ff fe69 	bl	11788 <unwind_UCB_from_context>
   11ab6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   11ab8:	79c3      	ldrb	r3, [r0, #7]
   11aba:	3302      	adds	r3, #2
   11abc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   11ac0:	bd08      	pop	{r3, pc}
   11ac2:	bf00      	nop

00011ac4 <__aeabi_d2uiz>:
   11ac4:	004a      	lsls	r2, r1, #1
   11ac6:	d211      	bcs.n	11aec <__aeabi_d2uiz+0x28>
   11ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   11acc:	d211      	bcs.n	11af2 <__aeabi_d2uiz+0x2e>
   11ace:	d50d      	bpl.n	11aec <__aeabi_d2uiz+0x28>
   11ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   11ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   11ad8:	d40e      	bmi.n	11af8 <__aeabi_d2uiz+0x34>
   11ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   11ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   11ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   11ae6:	fa23 f002 	lsr.w	r0, r3, r2
   11aea:	4770      	bx	lr
   11aec:	f04f 0000 	mov.w	r0, #0
   11af0:	4770      	bx	lr
   11af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   11af6:	d102      	bne.n	11afe <__aeabi_d2uiz+0x3a>
   11af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11afc:	4770      	bx	lr
   11afe:	f04f 0000 	mov.w	r0, #0
   11b02:	4770      	bx	lr

00011b04 <strcmp>:
   11b04:	f810 2b01 	ldrb.w	r2, [r0], #1
   11b08:	f811 3b01 	ldrb.w	r3, [r1], #1
   11b0c:	2a01      	cmp	r2, #1
   11b0e:	bf28      	it	cs
   11b10:	429a      	cmpcs	r2, r3
   11b12:	d0f7      	beq.n	11b04 <strcmp>
   11b14:	1ad0      	subs	r0, r2, r3
   11b16:	4770      	bx	lr

00011b18 <strlen>:
   11b18:	4603      	mov	r3, r0
   11b1a:	f813 2b01 	ldrb.w	r2, [r3], #1
   11b1e:	2a00      	cmp	r2, #0
   11b20:	d1fb      	bne.n	11b1a <strlen+0x2>
   11b22:	1a18      	subs	r0, r3, r0
   11b24:	3801      	subs	r0, #1
   11b26:	4770      	bx	lr

00011b28 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
   11b28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   11b2c:	4606      	mov	r6, r0
   11b2e:	e9dd 890b 	ldrd	r8, r9, [sp, #44]	; 0x2c
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
   11b32:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
                              int32_t* quantized_multiplier, int* left_shift) {
   11b36:	460f      	mov	r7, r1
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
   11b38:	990a      	ldr	r1, [sp, #40]	; 0x28
                              int32_t* quantized_multiplier, int* left_shift) {
   11b3a:	e9cd 2300 	strd	r2, r3, [sp]
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
   11b3e:	40c8      	lsrs	r0, r1
   11b40:	f7fa fcd0 	bl	c4e4 <__aeabi_i2d>
   11b44:	e9dd 2300 	ldrd	r2, r3, [sp]
   11b48:	4604      	mov	r4, r0
   11b4a:	460d      	mov	r5, r1
   11b4c:	4630      	mov	r0, r6
   11b4e:	4639      	mov	r1, r7
   11b50:	f7fe fcac 	bl	104ac <__aeabi_dmul>
   11b54:	4602      	mov	r2, r0
   11b56:	460b      	mov	r3, r1
   11b58:	4620      	mov	r0, r4
   11b5a:	4629      	mov	r1, r5
   11b5c:	f7fe fca6 	bl	104ac <__aeabi_dmul>
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
   11b60:	a309      	add	r3, pc, #36	; (adr r3, 11b88 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x60>)
   11b62:	e9d3 2300 	ldrd	r2, r3, [r3]
   11b66:	4604      	mov	r4, r0
   11b68:	460d      	mov	r5, r1
   11b6a:	f7fe ff2f 	bl	109cc <__aeabi_dcmpgt>
   11b6e:	b110      	cbz	r0, 11b76 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x4e>
	return __b;
   11b70:	a505      	add	r5, pc, #20	; (adr r5, 11b88 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x60>)
   11b72:	e9d5 4500 	ldrd	r4, r5, [r5]
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
   11b76:	464b      	mov	r3, r9
   11b78:	4642      	mov	r2, r8
   11b7a:	4620      	mov	r0, r4
   11b7c:	4629      	mov	r1, r5
                                   quantized_multiplier, left_shift);
}
   11b7e:	b003      	add	sp, #12
   11b80:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
   11b84:	f00f ba00 	b.w	20f88 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_>
   11b88:	ffc00000 	.word	0xffc00000
   11b8c:	41dfffff 	.word	0x41dfffff

00011b90 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
   11b90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b94:	4604      	mov	r4, r0
   11b96:	e9dd 7b0c 	ldrd	r7, fp, [sp, #48]	; 0x30
  const double input_product_scale = static_cast<double>(input->params.scale) *
   11b9a:	68c8      	ldr	r0, [r1, #12]
                                              double* multiplier) {
   11b9c:	4615      	mov	r5, r2
   11b9e:	461e      	mov	r6, r3
   11ba0:	468a      	mov	sl, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
   11ba2:	f7fa fcb1 	bl	c508 <__aeabi_f2d>
   11ba6:	4680      	mov	r8, r0
                                     static_cast<double>(filter->params.scale);
   11ba8:	68e8      	ldr	r0, [r5, #12]
  const double input_product_scale = static_cast<double>(input->params.scale) *
   11baa:	4689      	mov	r9, r1
                                     static_cast<double>(filter->params.scale);
   11bac:	f7fa fcac 	bl	c508 <__aeabi_f2d>
   11bb0:	4602      	mov	r2, r0
   11bb2:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
   11bb4:	4640      	mov	r0, r8
   11bb6:	4649      	mov	r1, r9
   11bb8:	f7fe fc78 	bl	104ac <__aeabi_dmul>
   11bbc:	4680      	mov	r8, r0
   11bbe:	4689      	mov	r9, r1
  // TODO(ahentz): The following conditions must be guaranteed by the training
  // pipeline.
  if (bias) {
   11bc0:	b1d6      	cbz	r6, 11bf8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x68>
    const double bias_scale = static_cast<double>(bias->params.scale);
   11bc2:	68f0      	ldr	r0, [r6, #12]
   11bc4:	f7fa fca0 	bl	c508 <__aeabi_f2d>
   11bc8:	4602      	mov	r2, r0
   11bca:	460b      	mov	r3, r1
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
   11bcc:	4640      	mov	r0, r8
   11bce:	4649      	mov	r1, r9
   11bd0:	f7fa fb3a 	bl	c248 <__aeabi_dsub>
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
   11bd4:	4680      	mov	r8, r0
    const double output_scale = static_cast<double>(output->params.scale);
   11bd6:	68f8      	ldr	r0, [r7, #12]
   11bd8:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
   11bdc:	f7fa fc94 	bl	c508 <__aeabi_f2d>
   11be0:	4602      	mov	r2, r0
   11be2:	460b      	mov	r3, r1

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
   11be4:	4640      	mov	r0, r8
   11be6:	4649      	mov	r1, r9
   11be8:	f7fe fd8a 	bl	10700 <__aeabi_ddiv>
   11bec:	a311      	add	r3, pc, #68	; (adr r3, 11c34 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa4>)
   11bee:	e9d3 2300 	ldrd	r2, r3, [r3]
   11bf2:	f7fe fed7 	bl	109a4 <__aeabi_dcmple>
   11bf6:	b150      	cbz	r0, 11c0e <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x7e>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
   11bf8:	463b      	mov	r3, r7
   11bfa:	462a      	mov	r2, r5
   11bfc:	4651      	mov	r1, sl
   11bfe:	4620      	mov	r0, r4
   11c00:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
                                          multiplier);
}
   11c04:	b003      	add	sp, #12
   11c06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
   11c0a:	f00f b9f7 	b.w	20ffc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
   11c0e:	4b06      	ldr	r3, [pc, #24]	; (11c28 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x98>)
   11c10:	4620      	mov	r0, r4
   11c12:	9300      	str	r3, [sp, #0]
   11c14:	6965      	ldr	r5, [r4, #20]
   11c16:	239a      	movs	r3, #154	; 0x9a
   11c18:	4a04      	ldr	r2, [pc, #16]	; (11c2c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x9c>)
   11c1a:	4905      	ldr	r1, [pc, #20]	; (11c30 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa0>)
   11c1c:	47a8      	blx	r5
}
   11c1e:	2001      	movs	r0, #1
   11c20:	b003      	add	sp, #12
   11c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c26:	bf00      	nop
   11c28:	000361fb 	.word	0x000361fb
   11c2c:	000361bb 	.word	0x000361bb
   11c30:	00034b9c 	.word	0x00034b9c
   11c34:	47ae147b 	.word	0x47ae147b
   11c38:	3f947ae1 	.word	0x3f947ae1
   11c3c:	00000000 	.word	0x00000000

00011c40 <floor>:
   11c40:	b580      	push	{r7, lr}
   11c42:	b08c      	sub	sp, #48	; 0x30
   11c44:	af00      	add	r7, sp, #0
   11c46:	e9c7 0100 	strd	r0, r1, [r7]
   11c4a:	e9d7 2300 	ldrd	r2, r3, [r7]
   11c4e:	e9c7 2304 	strd	r2, r3, [r7, #16]
   11c52:	697b      	ldr	r3, [r7, #20]
   11c54:	62fb      	str	r3, [r7, #44]	; 0x2c
   11c56:	693b      	ldr	r3, [r7, #16]
   11c58:	62bb      	str	r3, [r7, #40]	; 0x28
   11c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11c5c:	151b      	asrs	r3, r3, #20
   11c5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
   11c62:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   11c66:	627b      	str	r3, [r7, #36]	; 0x24
   11c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11c6a:	2b13      	cmp	r3, #19
   11c6c:	dc62      	bgt.n	11d34 <floor+0xf4>
   11c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11c70:	2b00      	cmp	r3, #0
   11c72:	da29      	bge.n	11cc8 <floor+0x88>
   11c74:	a162      	add	r1, pc, #392	; (adr r1, 11e00 <floor+0x1c0>)
   11c76:	e9d1 0100 	ldrd	r0, r1, [r1]
   11c7a:	e9d7 2300 	ldrd	r2, r3, [r7]
   11c7e:	f7fa fae5 	bl	c24c <__adddf3>
   11c82:	4602      	mov	r2, r0
   11c84:	460b      	mov	r3, r1
   11c86:	4610      	mov	r0, r2
   11c88:	4619      	mov	r1, r3
   11c8a:	f04f 0200 	mov.w	r2, #0
   11c8e:	f04f 0300 	mov.w	r3, #0
   11c92:	f7fe fe9b 	bl	109cc <__aeabi_dcmpgt>
   11c96:	4603      	mov	r3, r0
   11c98:	2b00      	cmp	r3, #0
   11c9a:	f000 80a1 	beq.w	11de0 <floor+0x1a0>
   11c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11ca0:	2b00      	cmp	r3, #0
   11ca2:	db04      	blt.n	11cae <floor+0x6e>
   11ca4:	2300      	movs	r3, #0
   11ca6:	62bb      	str	r3, [r7, #40]	; 0x28
   11ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11caa:	62fb      	str	r3, [r7, #44]	; 0x2c
   11cac:	e098      	b.n	11de0 <floor+0x1a0>
   11cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11cb0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   11cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11cb6:	4313      	orrs	r3, r2
   11cb8:	2b00      	cmp	r3, #0
   11cba:	f000 8091 	beq.w	11de0 <floor+0x1a0>
   11cbe:	4b52      	ldr	r3, [pc, #328]	; (11e08 <floor+0x1c8>)
   11cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   11cc2:	2300      	movs	r3, #0
   11cc4:	62bb      	str	r3, [r7, #40]	; 0x28
   11cc6:	e08b      	b.n	11de0 <floor+0x1a0>
   11cc8:	4a50      	ldr	r2, [pc, #320]	; (11e0c <floor+0x1cc>)
   11cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11ccc:	fa42 f303 	asr.w	r3, r2, r3
   11cd0:	623b      	str	r3, [r7, #32]
   11cd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   11cd4:	6a3b      	ldr	r3, [r7, #32]
   11cd6:	401a      	ands	r2, r3
   11cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11cda:	4313      	orrs	r3, r2
   11cdc:	2b00      	cmp	r3, #0
   11cde:	d102      	bne.n	11ce6 <floor+0xa6>
   11ce0:	e9d7 2300 	ldrd	r2, r3, [r7]
   11ce4:	e086      	b.n	11df4 <floor+0x1b4>
   11ce6:	a146      	add	r1, pc, #280	; (adr r1, 11e00 <floor+0x1c0>)
   11ce8:	e9d1 0100 	ldrd	r0, r1, [r1]
   11cec:	e9d7 2300 	ldrd	r2, r3, [r7]
   11cf0:	f7fa faac 	bl	c24c <__adddf3>
   11cf4:	4602      	mov	r2, r0
   11cf6:	460b      	mov	r3, r1
   11cf8:	4610      	mov	r0, r2
   11cfa:	4619      	mov	r1, r3
   11cfc:	f04f 0200 	mov.w	r2, #0
   11d00:	f04f 0300 	mov.w	r3, #0
   11d04:	f7fe fe62 	bl	109cc <__aeabi_dcmpgt>
   11d08:	4603      	mov	r3, r0
   11d0a:	2b00      	cmp	r3, #0
   11d0c:	d068      	beq.n	11de0 <floor+0x1a0>
   11d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11d10:	2b00      	cmp	r3, #0
   11d12:	da07      	bge.n	11d24 <floor+0xe4>
   11d14:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   11d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11d1a:	fa42 f303 	asr.w	r3, r2, r3
   11d1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   11d20:	4413      	add	r3, r2
   11d22:	62fb      	str	r3, [r7, #44]	; 0x2c
   11d24:	6a3b      	ldr	r3, [r7, #32]
   11d26:	43da      	mvns	r2, r3
   11d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11d2a:	4013      	ands	r3, r2
   11d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   11d2e:	2300      	movs	r3, #0
   11d30:	62bb      	str	r3, [r7, #40]	; 0x28
   11d32:	e055      	b.n	11de0 <floor+0x1a0>
   11d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11d36:	2b33      	cmp	r3, #51	; 0x33
   11d38:	dd0f      	ble.n	11d5a <floor+0x11a>
   11d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   11d40:	d108      	bne.n	11d54 <floor+0x114>
   11d42:	e9d7 0100 	ldrd	r0, r1, [r7]
   11d46:	4602      	mov	r2, r0
   11d48:	460b      	mov	r3, r1
   11d4a:	f7fa fa7f 	bl	c24c <__adddf3>
   11d4e:	4602      	mov	r2, r0
   11d50:	460b      	mov	r3, r1
   11d52:	e04f      	b.n	11df4 <floor+0x1b4>
   11d54:	e9d7 2300 	ldrd	r2, r3, [r7]
   11d58:	e04c      	b.n	11df4 <floor+0x1b4>
   11d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11d5c:	3b14      	subs	r3, #20
   11d5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11d62:	fa22 f303 	lsr.w	r3, r2, r3
   11d66:	623b      	str	r3, [r7, #32]
   11d68:	6aba      	ldr	r2, [r7, #40]	; 0x28
   11d6a:	6a3b      	ldr	r3, [r7, #32]
   11d6c:	4013      	ands	r3, r2
   11d6e:	2b00      	cmp	r3, #0
   11d70:	d102      	bne.n	11d78 <floor+0x138>
   11d72:	e9d7 2300 	ldrd	r2, r3, [r7]
   11d76:	e03d      	b.n	11df4 <floor+0x1b4>
   11d78:	a121      	add	r1, pc, #132	; (adr r1, 11e00 <floor+0x1c0>)
   11d7a:	e9d1 0100 	ldrd	r0, r1, [r1]
   11d7e:	e9d7 2300 	ldrd	r2, r3, [r7]
   11d82:	f7fa fa63 	bl	c24c <__adddf3>
   11d86:	4602      	mov	r2, r0
   11d88:	460b      	mov	r3, r1
   11d8a:	4610      	mov	r0, r2
   11d8c:	4619      	mov	r1, r3
   11d8e:	f04f 0200 	mov.w	r2, #0
   11d92:	f04f 0300 	mov.w	r3, #0
   11d96:	f7fe fe19 	bl	109cc <__aeabi_dcmpgt>
   11d9a:	4603      	mov	r3, r0
   11d9c:	2b00      	cmp	r3, #0
   11d9e:	d01f      	beq.n	11de0 <floor+0x1a0>
   11da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11da2:	2b00      	cmp	r3, #0
   11da4:	da17      	bge.n	11dd6 <floor+0x196>
   11da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11da8:	2b14      	cmp	r3, #20
   11daa:	d103      	bne.n	11db4 <floor+0x174>
   11dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11dae:	3301      	adds	r3, #1
   11db0:	62fb      	str	r3, [r7, #44]	; 0x2c
   11db2:	e010      	b.n	11dd6 <floor+0x196>
   11db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11db6:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   11dba:	2201      	movs	r2, #1
   11dbc:	409a      	lsls	r2, r3
   11dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11dc0:	4413      	add	r3, r2
   11dc2:	61fb      	str	r3, [r7, #28]
   11dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11dc6:	69fa      	ldr	r2, [r7, #28]
   11dc8:	429a      	cmp	r2, r3
   11dca:	d202      	bcs.n	11dd2 <floor+0x192>
   11dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11dce:	3301      	adds	r3, #1
   11dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   11dd2:	69fb      	ldr	r3, [r7, #28]
   11dd4:	62bb      	str	r3, [r7, #40]	; 0x28
   11dd6:	6a3b      	ldr	r3, [r7, #32]
   11dd8:	43da      	mvns	r2, r3
   11dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11ddc:	4013      	ands	r3, r2
   11dde:	62bb      	str	r3, [r7, #40]	; 0x28
   11de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11de2:	60fb      	str	r3, [r7, #12]
   11de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11de6:	60bb      	str	r3, [r7, #8]
   11de8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   11dec:	e9c7 2300 	strd	r2, r3, [r7]
   11df0:	e9d7 2300 	ldrd	r2, r3, [r7]
   11df4:	4610      	mov	r0, r2
   11df6:	4619      	mov	r1, r3
   11df8:	3730      	adds	r7, #48	; 0x30
   11dfa:	46bd      	mov	sp, r7
   11dfc:	bd80      	pop	{r7, pc}
   11dfe:	bf00      	nop
   11e00:	8800759c 	.word	0x8800759c
   11e04:	7e37e43c 	.word	0x7e37e43c
   11e08:	bff00000 	.word	0xbff00000
   11e0c:	000fffff 	.word	0x000fffff

00011e10 <setup>:
static uint8_t tensor_arena[kTensorArenaSize];
} // namespace

// The name of this function is important for Arduino compatibility.
void setup()
{
   11e10:	b5f0      	push	{r4, r5, r6, r7, lr}

	// Set up logging. Google style is to avoid globals or statics because of
	// lifetime uncertainty, but since this has a trivial destructor it's okay.
	// NOLINTNEXTLINE(runtime-global-variables)

	static tflite::MicroErrorReporter micro_error_reporter;
   11e12:	4c3f      	ldr	r4, [pc, #252]	; (11f10 <setup+0x100>)
{
   11e14:	b085      	sub	sp, #20
	static tflite::MicroErrorReporter micro_error_reporter;
   11e16:	e8d4 3f8f 	ldab	r3, [r4]
   11e1a:	07da      	lsls	r2, r3, #31
   11e1c:	d40b      	bmi.n	11e36 <setup+0x26>
   11e1e:	4620      	mov	r0, r4
   11e20:	f010 f9c6 	bl	221b0 <__cxa_guard_acquire>
   11e24:	b138      	cbz	r0, 11e36 <setup+0x26>
   11e26:	4620      	mov	r0, r4
   11e28:	f01e fba2 	bl	30570 <__cxa_guard_release>
   11e2c:	4a39      	ldr	r2, [pc, #228]	; (11f14 <setup+0x104>)
   11e2e:	493a      	ldr	r1, [pc, #232]	; (11f18 <setup+0x108>)
   11e30:	483a      	ldr	r0, [pc, #232]	; (11f1c <setup+0x10c>)
   11e32:	f014 ffad 	bl	26d90 <__aeabi_atexit>
	error_reporter = &micro_error_reporter;
   11e36:	4b39      	ldr	r3, [pc, #228]	; (11f1c <setup+0x10c>)
   11e38:	4d39      	ldr	r5, [pc, #228]	; (11f20 <setup+0x110>)

	// Map the model into a usable data structure. This doesn't involve any
	// copying or parsing, it's a very lightweight operation.
	model = tflite::GetModel(g_modelurd);
   11e3a:	4c3a      	ldr	r4, [pc, #232]	; (11f24 <setup+0x114>)
	error_reporter = &micro_error_reporter;
   11e3c:	602b      	str	r3, [r5, #0]
// Helpers to get a typed pointer to the root object contained in the buffer.
template<typename T> T *GetMutableRoot(void *buf) {
  EndianCheck();
  return reinterpret_cast<T *>(
      reinterpret_cast<uint8_t *>(buf) +
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
   11e3e:	4b3a      	ldr	r3, [pc, #232]	; (11f28 <setup+0x118>)
   11e40:	681a      	ldr	r2, [r3, #0]
   11e42:	18d1      	adds	r1, r2, r3
// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
    return data_ - ReadScalar<soffset_t>(data_);
   11e44:	58d3      	ldr	r3, [r2, r3]
	model = tflite::GetModel(g_modelurd);
   11e46:	6021      	str	r1, [r4, #0]
   11e48:	1acb      	subs	r3, r1, r3
    auto vtable = GetVTable();
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   11e4a:	881a      	ldrh	r2, [r3, #0]
   11e4c:	2a04      	cmp	r2, #4
   11e4e:	d90c      	bls.n	11e6a <setup+0x5a>

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
  return EndianScalar(*reinterpret_cast<const T *>(p));
   11e50:	889a      	ldrh	r2, [r3, #4]
  }

  template<typename T> T GetField(voffset_t field, T defaultval) const {
    auto field_offset = GetOptionalFieldOffset(field);
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   11e52:	b112      	cbz	r2, 11e5a <setup+0x4a>
   11e54:	588a      	ldr	r2, [r1, r2]

	if (model->version() != TFLITE_SCHEMA_VERSION) {
   11e56:	2a03      	cmp	r2, #3
   11e58:	d009      	beq.n	11e6e <setup+0x5e>
		TF_LITE_REPORT_ERROR(
   11e5a:	2303      	movs	r3, #3
   11e5c:	4933      	ldr	r1, [pc, #204]	; (11f2c <setup+0x11c>)
   11e5e:	482f      	ldr	r0, [pc, #188]	; (11f1c <setup+0x10c>)
	input = interpreter->input(0);
	output = interpreter->output(0);

	// Keep track of how many inferences we have performed.
	inference_count = 0;
}
   11e60:	b005      	add	sp, #20
   11e62:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		TF_LITE_REPORT_ERROR(
   11e66:	f01e b837 	b.w	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   11e6a:	2200      	movs	r2, #0
   11e6c:	e7f5      	b.n	11e5a <setup+0x4a>
	static tflite::AllOpsResolver resolver;
   11e6e:	4e30      	ldr	r6, [pc, #192]	; (11f30 <setup+0x120>)
   11e70:	e8d6 3f8f 	ldab	r3, [r6]
   11e74:	07db      	lsls	r3, r3, #31
   11e76:	d40e      	bmi.n	11e96 <setup+0x86>
   11e78:	4630      	mov	r0, r6
   11e7a:	f010 f999 	bl	221b0 <__cxa_guard_acquire>
   11e7e:	b150      	cbz	r0, 11e96 <setup+0x86>
   11e80:	482c      	ldr	r0, [pc, #176]	; (11f34 <setup+0x124>)
   11e82:	f004 f81b 	bl	15ebc <_ZN6tflite14AllOpsResolverC1Ev>
   11e86:	4630      	mov	r0, r6
   11e88:	f01e fb72 	bl	30570 <__cxa_guard_release>
   11e8c:	4a21      	ldr	r2, [pc, #132]	; (11f14 <setup+0x104>)
   11e8e:	492a      	ldr	r1, [pc, #168]	; (11f38 <setup+0x128>)
   11e90:	4828      	ldr	r0, [pc, #160]	; (11f34 <setup+0x124>)
   11e92:	f014 ff7d 	bl	26d90 <__aeabi_atexit>
							   error_reporter);
   11e96:	4f29      	ldr	r7, [pc, #164]	; (11f3c <setup+0x12c>)
   11e98:	e8d7 3f8f 	ldab	r3, [r7]
   11e9c:	f013 0601 	ands.w	r6, r3, #1
   11ea0:	d117      	bne.n	11ed2 <setup+0xc2>
   11ea2:	4638      	mov	r0, r7
   11ea4:	f010 f984 	bl	221b0 <__cxa_guard_acquire>
   11ea8:	b198      	cbz	r0, 11ed2 <setup+0xc2>
   11eaa:	682b      	ldr	r3, [r5, #0]
   11eac:	9602      	str	r6, [sp, #8]
   11eae:	9301      	str	r3, [sp, #4]
   11eb0:	f640 4374 	movw	r3, #3188	; 0xc74
   11eb4:	9300      	str	r3, [sp, #0]
   11eb6:	4a1f      	ldr	r2, [pc, #124]	; (11f34 <setup+0x124>)
   11eb8:	6821      	ldr	r1, [r4, #0]
   11eba:	4b21      	ldr	r3, [pc, #132]	; (11f40 <setup+0x130>)
   11ebc:	4821      	ldr	r0, [pc, #132]	; (11f44 <setup+0x134>)
   11ebe:	f015 faea 	bl	27496 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE>
   11ec2:	4638      	mov	r0, r7
   11ec4:	f01e fb54 	bl	30570 <__cxa_guard_release>
   11ec8:	4a12      	ldr	r2, [pc, #72]	; (11f14 <setup+0x104>)
   11eca:	491f      	ldr	r1, [pc, #124]	; (11f48 <setup+0x138>)
   11ecc:	481d      	ldr	r0, [pc, #116]	; (11f44 <setup+0x134>)
   11ece:	f014 ff5f 	bl	26d90 <__aeabi_atexit>
	interpreter = &static_interpreter;
   11ed2:	481c      	ldr	r0, [pc, #112]	; (11f44 <setup+0x134>)
   11ed4:	4e1d      	ldr	r6, [pc, #116]	; (11f4c <setup+0x13c>)
   11ed6:	6030      	str	r0, [r6, #0]
	TfLiteStatus allocate_status = interpreter->AllocateTensors();
   11ed8:	f004 fb20 	bl	1651c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
	if (allocate_status != kTfLiteOk) {
   11edc:	4604      	mov	r4, r0
   11ede:	b130      	cbz	r0, 11eee <setup+0xde>
		TF_LITE_REPORT_ERROR(error_reporter,
   11ee0:	491b      	ldr	r1, [pc, #108]	; (11f50 <setup+0x140>)
   11ee2:	6828      	ldr	r0, [r5, #0]
}
   11ee4:	b005      	add	sp, #20
   11ee6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		TF_LITE_REPORT_ERROR(error_reporter,
   11eea:	f01d bff5 	b.w	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	input = interpreter->input(0);
   11eee:	4601      	mov	r1, r0
   11ef0:	6830      	ldr	r0, [r6, #0]
   11ef2:	f004 fadb 	bl	164ac <_ZN6tflite16MicroInterpreter5inputEj>
   11ef6:	4b17      	ldr	r3, [pc, #92]	; (11f54 <setup+0x144>)
	output = interpreter->output(0);
   11ef8:	4621      	mov	r1, r4
	input = interpreter->input(0);
   11efa:	6018      	str	r0, [r3, #0]
	output = interpreter->output(0);
   11efc:	6830      	ldr	r0, [r6, #0]
   11efe:	f004 faf1 	bl	164e4 <_ZN6tflite16MicroInterpreter6outputEj>
   11f02:	4b15      	ldr	r3, [pc, #84]	; (11f58 <setup+0x148>)
   11f04:	6018      	str	r0, [r3, #0]
	inference_count = 0;
   11f06:	4b15      	ldr	r3, [pc, #84]	; (11f5c <setup+0x14c>)
   11f08:	601c      	str	r4, [r3, #0]
}
   11f0a:	b005      	add	sp, #20
   11f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11f0e:	bf00      	nop
   11f10:	200201bc 	.word	0x200201bc
   11f14:	200215cc 	.word	0x200215cc
   11f18:	000263ed 	.word	0x000263ed
   11f1c:	20020000 	.word	0x20020000
   11f20:	200201c8 	.word	0x200201c8
   11f24:	200201d4 	.word	0x200201d4
   11f28:	00032420 	.word	0x00032420
   11f2c:	00033740 	.word	0x00033740
   11f30:	200201c0 	.word	0x200201c0
   11f34:	20020254 	.word	0x20020254
   11f38:	000263ef 	.word	0x000263ef
   11f3c:	200201b8 	.word	0x200201b8
   11f40:	20026088 	.word	0x20026088
   11f44:	200201dc 	.word	0x200201dc
   11f48:	00027503 	.word	0x00027503
   11f4c:	200201c4 	.word	0x200201c4
   11f50:	00033787 	.word	0x00033787
   11f54:	200201d0 	.word	0x200201d0
   11f58:	200201d8 	.word	0x200201d8
   11f5c:	200201cc 	.word	0x200201cc

00011f60 <loop>:
	// Calculate an x value to feed into the model. We compare the current
	// inference_count to the number of inferences per cycle to determine
	// our position within the range of possible x values the model was
	// trained on, and use this to calculate a value.
	float position = static_cast<float>(inference_count) /
			 static_cast<float>(kInferencesPerCycle);
   11f60:	4b1e      	ldr	r3, [pc, #120]	; (11fdc <loop+0x7c>)
{
   11f62:	b573      	push	{r0, r1, r4, r5, r6, lr}
			 static_cast<float>(kInferencesPerCycle);
   11f64:	681b      	ldr	r3, [r3, #0]
	float position = static_cast<float>(inference_count) /
   11f66:	4d1e      	ldr	r5, [pc, #120]	; (11fe0 <loop+0x80>)
			 static_cast<float>(kInferencesPerCycle);
   11f68:	ee07 3a10 	vmov	s14, r3
	float position = static_cast<float>(inference_count) /
   11f6c:	edd5 7a00 	vldr	s15, [r5]
			 static_cast<float>(kInferencesPerCycle);
   11f70:	eef8 6ac7 	vcvt.f32.s32	s13, s14
	float position = static_cast<float>(inference_count) /
   11f74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   11f78:	ee87 7aa6 	vdiv.f32	s14, s15, s13

	float x_val = position * kXrange;
   11f7c:	eddf 7a19 	vldr	s15, [pc, #100]	; 11fe4 <loop+0x84>
   11f80:	ee67 7a27 	vmul.f32	s15, s14, s15
			 static_cast<float>(kInferencesPerCycle);
   11f84:	9300      	str	r3, [sp, #0]

	// Place our calculated x value in the model's input tensor
	input->data.f[0] = x_val;
   11f86:	4b18      	ldr	r3, [pc, #96]	; (11fe8 <loop+0x88>)
   11f88:	edcd 7a01 	vstr	s15, [sp, #4]
   11f8c:	681b      	ldr	r3, [r3, #0]
   11f8e:	4e17      	ldr	r6, [pc, #92]	; (11fec <loop+0x8c>)
   11f90:	685b      	ldr	r3, [r3, #4]
   11f92:	edc3 7a00 	vstr	s15, [r3]
	// Run inference, and report any error
	TfLiteStatus invoke_status = interpreter->Invoke();
   11f96:	4b16      	ldr	r3, [pc, #88]	; (11ff0 <loop+0x90>)
   11f98:	6818      	ldr	r0, [r3, #0]
   11f9a:	f004 fb3d 	bl	16618 <_ZN6tflite16MicroInterpreter6InvokeEv>
	if (invoke_status != kTfLiteOk) {
   11f9e:	9901      	ldr	r1, [sp, #4]
   11fa0:	4604      	mov	r4, r0
   11fa2:	b158      	cbz	r0, 11fbc <loop+0x5c>
		TF_LITE_REPORT_ERROR(error_reporter,
   11fa4:	4608      	mov	r0, r1
   11fa6:	f7fa faaf 	bl	c508 <__aeabi_f2d>
   11faa:	4602      	mov	r2, r0
   11fac:	460b      	mov	r3, r1
   11fae:	6830      	ldr	r0, [r6, #0]
   11fb0:	4910      	ldr	r1, [pc, #64]	; (11ff4 <loop+0x94>)
	// Increment the inference_counter, and reset it if we have reached
	// the total number per cycle
	inference_count += 1;
	if (inference_count >= kInferencesPerCycle)
		inference_count = 0;
}
   11fb2:	b002      	add	sp, #8
   11fb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		TF_LITE_REPORT_ERROR(error_reporter,
   11fb8:	f01d bf8e 	b.w	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	float y_val = output->data.f[0];
   11fbc:	4b0e      	ldr	r3, [pc, #56]	; (11ff8 <loop+0x98>)
	HandleOutput(error_reporter, x_val, y_val);
   11fbe:	6830      	ldr	r0, [r6, #0]
	float y_val = output->data.f[0];
   11fc0:	681b      	ldr	r3, [r3, #0]
   11fc2:	685b      	ldr	r3, [r3, #4]
	HandleOutput(error_reporter, x_val, y_val);
   11fc4:	681a      	ldr	r2, [r3, #0]
   11fc6:	f000 f819 	bl	11ffc <_Z12HandleOutputPN6tflite13ErrorReporterEff>
	inference_count += 1;
   11fca:	682b      	ldr	r3, [r5, #0]
   11fcc:	9a00      	ldr	r2, [sp, #0]
   11fce:	3301      	adds	r3, #1
   11fd0:	429a      	cmp	r2, r3
   11fd2:	bfd8      	it	le
   11fd4:	4623      	movle	r3, r4
   11fd6:	602b      	str	r3, [r5, #0]
}
   11fd8:	b002      	add	sp, #8
   11fda:	bd70      	pop	{r4, r5, r6, pc}
   11fdc:	00032df8 	.word	0x00032df8
   11fe0:	200201cc 	.word	0x200201cc
   11fe4:	40c90fdb 	.word	0x40c90fdb
   11fe8:	200201d0 	.word	0x200201d0
   11fec:	200201c8 	.word	0x200201c8
   11ff0:	200201c4 	.word	0x200201c4
   11ff4:	000337a0 	.word	0x000337a0
   11ff8:	200201d8 	.word	0x200201d8

00011ffc <_Z12HandleOutputPN6tflite13ErrorReporterEff>:



void HandleOutput(tflite::ErrorReporter *error_reporter, float x_value,
		  float y_value)
{
   11ffc:	b530      	push	{r4, r5, lr}
   11ffe:	4604      	mov	r4, r0
   12000:	b085      	sub	sp, #20
        new_period = period;
    } 
    

	// Log the current X and Y values
 	TF_LITE_REPORT_ERROR(error_reporter, "x_value: %f, y_value: %f\n",
   12002:	4608      	mov	r0, r1
{
   12004:	4615      	mov	r5, r2
 	TF_LITE_REPORT_ERROR(error_reporter, "x_value: %f, y_value: %f\n",
   12006:	f7fa fa7f 	bl	c508 <__aeabi_f2d>
   1200a:	4602      	mov	r2, r0
   1200c:	460b      	mov	r3, r1
   1200e:	4628      	mov	r0, r5
   12010:	e9cd 2302 	strd	r2, r3, [sp, #8]
   12014:	f7fa fa78 	bl	c508 <__aeabi_f2d>
   12018:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1201c:	e9cd 0100 	strd	r0, r1, [sp]
   12020:	4620      	mov	r0, r4
   12022:	4918      	ldr	r1, [pc, #96]	; (12084 <_Z12HandleOutputPN6tflite13ErrorReporterEff+0x88>)
   12024:	f01d ff58 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   12028:	4817      	ldr	r0, [pc, #92]	; (12088 <_Z12HandleOutputPN6tflite13ErrorReporterEff+0x8c>)
   1202a:	f002 fe45 	bl	14cb8 <z_impl_device_get_binding>
			     static_cast<double>(x_value),
			     static_cast<double>(y_value)); 
	

	dev = device_get_binding(LED0);
   1202e:	4c17      	ldr	r4, [pc, #92]	; (1208c <_Z12HandleOutputPN6tflite13ErrorReporterEff+0x90>)
   12030:	6020      	str	r0, [r4, #0]
	if (dev == NULL) {
   12032:	b308      	cbz	r0, 12078 <_Z12HandleOutputPN6tflite13ErrorReporterEff+0x7c>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config_info;
	struct gpio_driver_data *data =
   12034:	68c5      	ldr	r5, [r0, #12]
	return api->pin_configure(port, pin, flags);
   12036:	6883      	ldr	r3, [r0, #8]
   12038:	f44f 52d0 	mov.w	r2, #6656	; 0x1a00
   1203c:	2102      	movs	r1, #2
   1203e:	681b      	ldr	r3, [r3, #0]
   12040:	4798      	blx	r3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
   12042:	2800      	cmp	r0, #0
   12044:	4a12      	ldr	r2, [pc, #72]	; (12090 <_Z12HandleOutputPN6tflite13ErrorReporterEff+0x94>)
   12046:	d115      	bne.n	12074 <_Z12HandleOutputPN6tflite13ErrorReporterEff+0x78>
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   12048:	682b      	ldr	r3, [r5, #0]
   1204a:	f023 0304 	bic.w	r3, r3, #4
   1204e:	602b      	str	r3, [r5, #0]
		return;
	}

	ret = gpio_pin_configure(dev, PIN, GPIO_OUTPUT_ACTIVE | FLAGS);
   12050:	6010      	str	r0, [r2, #0]
	if (ret < 0) {
		return;
	};


	gpio_pin_set(dev, PIN, (int)led_is_on);
   12052:	6820      	ldr	r0, [r4, #0]
   12054:	4b0f      	ldr	r3, [pc, #60]	; (12094 <_Z12HandleOutputPN6tflite13ErrorReporterEff+0x98>)

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   12056:	68c2      	ldr	r2, [r0, #12]
   12058:	781b      	ldrb	r3, [r3, #0]
   1205a:	6812      	ldr	r2, [r2, #0]
   1205c:	0752      	lsls	r2, r2, #29
		value = (value != 0) ? 0 : 1;
   1205e:	bf48      	it	mi
   12060:	f083 0301 	eormi.w	r3, r3, #1
	if (value != 0)	{
   12064:	b153      	cbz	r3, 1207c <_Z12HandleOutputPN6tflite13ErrorReporterEff+0x80>
	return api->port_set_bits_raw(port, pins);
   12066:	6883      	ldr	r3, [r0, #8]
   12068:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1206a:	2104      	movs	r1, #4
			//led_is_on = !led_is_on;
	
   1206c:	b005      	add	sp, #20
   1206e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   12072:	4718      	bx	r3
	ret = gpio_pin_configure(dev, PIN, GPIO_OUTPUT_ACTIVE | FLAGS);
   12074:	6010      	str	r0, [r2, #0]
	if (ret < 0) {
   12076:	daec      	bge.n	12052 <_Z12HandleOutputPN6tflite13ErrorReporterEff+0x56>
   12078:	b005      	add	sp, #20
   1207a:	bd30      	pop	{r4, r5, pc}
   1207c:	6883      	ldr	r3, [r0, #8]
   1207e:	691b      	ldr	r3, [r3, #16]
   12080:	e7f3      	b.n	1206a <_Z12HandleOutputPN6tflite13ErrorReporterEff+0x6e>
   12082:	bf00      	nop
   12084:	000337bc 	.word	0x000337bc
   12088:	000337d6 	.word	0x000337d6
   1208c:	200214e4 	.word	0x200214e4
   12090:	200214e8 	.word	0x200214e8
   12094:	200200bc 	.word	0x200200bc

00012098 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
   12098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1209c:	ed2d 8b02 	vpush	{d8}
   120a0:	b083      	sub	sp, #12
   120a2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   120a4:	469a      	mov	sl, r3
   120a6:	2c01      	cmp	r4, #1
   120a8:	bfb8      	it	lt
   120aa:	2401      	movlt	r4, #1
   120ac:	2b01      	cmp	r3, #1
   120ae:	bf0c      	ite	eq
   120b0:	2330      	moveq	r3, #48	; 0x30
   120b2:	2320      	movne	r3, #32
   120b4:	4615      	mov	r5, r2
   120b6:	4606      	mov	r6, r0
   120b8:	ee08 3a10 	vmov	s16, r3
   120bc:	2701      	movs	r7, #1
   120be:	f04f 080a 	mov.w	r8, #10
   120c2:	2200      	movs	r2, #0
   120c4:	f8df b074 	ldr.w	fp, [pc, #116]	; 1213c <_printk_dec_ulong+0xa4>
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
   120c8:	fbb5 f9fb 	udiv	r9, r5, fp
   120cc:	b90a      	cbnz	r2, 120d2 <_printk_dec_ulong+0x3a>
   120ce:	45ab      	cmp	fp, r5
   120d0:	d820      	bhi.n	12114 <_printk_dec_ulong+0x7c>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
   120d2:	f109 0030 	add.w	r0, r9, #48	; 0x30
   120d6:	9100      	str	r1, [sp, #0]
   120d8:	47b0      	blx	r6
			found_largest_digit = 1;
   120da:	2201      	movs	r2, #1
			digits++;
   120dc:	3701      	adds	r7, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
   120de:	9900      	ldr	r1, [sp, #0]
		}
		remaining--;
		remainder %= pos;
		pos /= 10;
   120e0:	230a      	movs	r3, #10
		remaining--;
   120e2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
	while (pos >= 10) {
   120e6:	f1b8 0f01 	cmp.w	r8, #1
		remainder %= pos;
   120ea:	fb0b 5519 	mls	r5, fp, r9, r5
		pos /= 10;
   120ee:	fbbb fbf3 	udiv	fp, fp, r3
	while (pos >= 10) {
   120f2:	d1e9      	bne.n	120c8 <_printk_dec_ulong+0x30>
	}
	out((int)(remainder + 48), ctx);
   120f4:	f105 0030 	add.w	r0, r5, #48	; 0x30
   120f8:	9100      	str	r1, [sp, #0]
   120fa:	47b0      	blx	r6

	if (padding == PAD_SPACE_AFTER) {
   120fc:	f1ba 0f03 	cmp.w	sl, #3
   12100:	9900      	ldr	r1, [sp, #0]
   12102:	d102      	bne.n	1210a <_printk_dec_ulong+0x72>
		remaining = min_width - digits;
   12104:	1be4      	subs	r4, r4, r7
		while (remaining-- > 0) {
   12106:	2c00      	cmp	r4, #0
   12108:	dc11      	bgt.n	1212e <_printk_dec_ulong+0x96>
			out(' ', ctx);
		}
	}
}
   1210a:	b003      	add	sp, #12
   1210c:	ecbd 8b02 	vpop	{d8}
   12110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
   12114:	4544      	cmp	r4, r8
   12116:	dbe3      	blt.n	120e0 <_printk_dec_ulong+0x48>
				&& padding < PAD_SPACE_AFTER) {
   12118:	f1ba 0f02 	cmp.w	sl, #2
   1211c:	d8e0      	bhi.n	120e0 <_printk_dec_ulong+0x48>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
   1211e:	ee18 0a10 	vmov	r0, s16
   12122:	e9cd 1200 	strd	r1, r2, [sp]
			digits++;
   12126:	3701      	adds	r7, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
   12128:	47b0      	blx	r6
			digits++;
   1212a:	9a01      	ldr	r2, [sp, #4]
   1212c:	e7d7      	b.n	120de <_printk_dec_ulong+0x46>
			out(' ', ctx);
   1212e:	2020      	movs	r0, #32
   12130:	9100      	str	r1, [sp, #0]
   12132:	3c01      	subs	r4, #1
   12134:	47b0      	blx	r6
   12136:	9900      	ldr	r1, [sp, #0]
   12138:	e7e5      	b.n	12106 <_printk_dec_ulong+0x6e>
   1213a:	bf00      	nop
   1213c:	3b9aca00 	.word	0x3b9aca00

00012140 <__printk_hook_install>:
	_char_out = fn;
   12140:	4b01      	ldr	r3, [pc, #4]	; (12148 <__printk_hook_install+0x8>)
   12142:	6018      	str	r0, [r3, #0]
}
   12144:	4770      	bx	lr
   12146:	bf00      	nop
   12148:	20020004 	.word	0x20020004

0001214c <z_vprintk>:
{
   1214c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   12150:	2700      	movs	r7, #0
{
   12152:	4605      	mov	r5, r0
   12154:	468b      	mov	fp, r1
	int min_width = -1;
   12156:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
   1215a:	46b8      	mov	r8, r7
{
   1215c:	461c      	mov	r4, r3
   1215e:	b08d      	sub	sp, #52	; 0x34
   12160:	1e53      	subs	r3, r2, #1
   12162:	9303      	str	r3, [sp, #12]
			might_format = 0;
   12164:	2600      	movs	r6, #0
					break;
   12166:	e005      	b.n	12174 <z_vprintk+0x28>
		if (!might_format) {
   12168:	b96e      	cbnz	r6, 12186 <z_vprintk+0x3a>
			if (*fmt != '%') {
   1216a:	2825      	cmp	r0, #37	; 0x25
   1216c:	f000 8171 	beq.w	12452 <z_vprintk+0x306>
				out((int)*fmt, ctx);
   12170:	4659      	mov	r1, fp
   12172:	47a8      	blx	r5
	while (*fmt) {
   12174:	9b03      	ldr	r3, [sp, #12]
   12176:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   1217a:	9303      	str	r3, [sp, #12]
   1217c:	2800      	cmp	r0, #0
   1217e:	d1f3      	bne.n	12168 <z_vprintk+0x1c>
}
   12180:	b00d      	add	sp, #52	; 0x34
   12182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   12186:	287a      	cmp	r0, #122	; 0x7a
   12188:	d80a      	bhi.n	121a0 <z_vprintk+0x54>
   1218a:	2862      	cmp	r0, #98	; 0x62
   1218c:	d810      	bhi.n	121b0 <z_vprintk+0x64>
   1218e:	2830      	cmp	r0, #48	; 0x30
   12190:	d054      	beq.n	1223c <z_vprintk+0xf0>
   12192:	d845      	bhi.n	12220 <z_vprintk+0xd4>
   12194:	2825      	cmp	r0, #37	; 0x25
   12196:	f000 815a 	beq.w	1244e <z_vprintk+0x302>
   1219a:	282d      	cmp	r0, #45	; 0x2d
   1219c:	f000 815f 	beq.w	1245e <z_vprintk+0x312>
					out((int)'%', ctx);
   121a0:	4659      	mov	r1, fp
   121a2:	2025      	movs	r0, #37	; 0x25
   121a4:	47a8      	blx	r5
					out((int)*fmt, ctx);
   121a6:	4659      	mov	r1, fp
   121a8:	9b03      	ldr	r3, [sp, #12]
   121aa:	7818      	ldrb	r0, [r3, #0]
   121ac:	47a8      	blx	r5
   121ae:	e7d9      	b.n	12164 <z_vprintk+0x18>
   121b0:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
   121b4:	2b17      	cmp	r3, #23
   121b6:	d8f3      	bhi.n	121a0 <z_vprintk+0x54>
   121b8:	a201      	add	r2, pc, #4	; (adr r2, 121c0 <z_vprintk+0x74>)
   121ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   121be:	bf00      	nop
   121c0:	00012447 	.word	0x00012447
   121c4:	0001228b 	.word	0x0001228b
   121c8:	000121a1 	.word	0x000121a1
   121cc:	000121a1 	.word	0x000121a1
   121d0:	000121a1 	.word	0x000121a1
   121d4:	0001226d 	.word	0x0001226d
   121d8:	0001228b 	.word	0x0001228b
   121dc:	000121a1 	.word	0x000121a1
   121e0:	000121a1 	.word	0x000121a1
   121e4:	0001226d 	.word	0x0001226d
   121e8:	000121a1 	.word	0x000121a1
   121ec:	000121a1 	.word	0x000121a1
   121f0:	000121a1 	.word	0x000121a1
   121f4:	0001232d 	.word	0x0001232d
   121f8:	000121a1 	.word	0x000121a1
   121fc:	000121a1 	.word	0x000121a1
   12200:	00012417 	.word	0x00012417
   12204:	000121a1 	.word	0x000121a1
   12208:	000122fb 	.word	0x000122fb
   1220c:	000121a1 	.word	0x000121a1
   12210:	000121a1 	.word	0x000121a1
   12214:	00012229 	.word	0x00012229
   12218:	000121a1 	.word	0x000121a1
   1221c:	0001226d 	.word	0x0001226d
			switch (*fmt) {
   12220:	2839      	cmp	r0, #57	; 0x39
   12222:	d91a      	bls.n	1225a <z_vprintk+0x10e>
   12224:	2858      	cmp	r0, #88	; 0x58
   12226:	d1bb      	bne.n	121a0 <z_vprintk+0x54>
				if (*fmt == 'p') {
   12228:	9b03      	ldr	r3, [sp, #12]
   1222a:	781b      	ldrb	r3, [r3, #0]
   1222c:	2b70      	cmp	r3, #112	; 0x70
   1222e:	f040 8088 	bne.w	12342 <z_vprintk+0x1f6>
					x = va_arg(ap, unsigned int);
   12232:	f854 3b04 	ldr.w	r3, [r4], #4
   12236:	2200      	movs	r2, #0
   12238:	9306      	str	r3, [sp, #24]
   1223a:	e090      	b.n	1235e <z_vprintk+0x212>
				if (min_width < 0 && padding == PAD_NONE) {
   1223c:	f1b9 0f00 	cmp.w	r9, #0
   12240:	da0e      	bge.n	12260 <z_vprintk+0x114>
   12242:	f1b8 0f00 	cmp.w	r8, #0
   12246:	f000 810d 	beq.w	12464 <z_vprintk+0x318>
					min_width = *fmt - '0';
   1224a:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   1224e:	f1b8 0f00 	cmp.w	r8, #0
   12252:	bf08      	it	eq
   12254:	f04f 0802 	moveq.w	r8, #2
   12258:	e78c      	b.n	12174 <z_vprintk+0x28>
				if (min_width < 0) {
   1225a:	f1b9 0f00 	cmp.w	r9, #0
   1225e:	dbf4      	blt.n	1224a <z_vprintk+0xfe>
					min_width = 10 * min_width + *fmt - '0';
   12260:	230a      	movs	r3, #10
   12262:	fb03 0909 	mla	r9, r3, r9, r0
   12266:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
   1226a:	e7f0      	b.n	1224e <z_vprintk+0x102>
				if (*fmt == 'h' && length_mod == 'h') {
   1226c:	2868      	cmp	r0, #104	; 0x68
   1226e:	d103      	bne.n	12278 <z_vprintk+0x12c>
   12270:	2f68      	cmp	r7, #104	; 0x68
   12272:	d106      	bne.n	12282 <z_vprintk+0x136>
					length_mod = 'H';
   12274:	2748      	movs	r7, #72	; 0x48
   12276:	e77d      	b.n	12174 <z_vprintk+0x28>
				} else if (*fmt == 'l' && length_mod == 'l') {
   12278:	286c      	cmp	r0, #108	; 0x6c
   1227a:	d102      	bne.n	12282 <z_vprintk+0x136>
   1227c:	2f6c      	cmp	r7, #108	; 0x6c
   1227e:	f000 80f4 	beq.w	1246a <z_vprintk+0x31e>
				} else if (length_mod == 0) {
   12282:	2f00      	cmp	r7, #0
   12284:	d18c      	bne.n	121a0 <z_vprintk+0x54>
   12286:	4607      	mov	r7, r0
   12288:	e774      	b.n	12174 <z_vprintk+0x28>
				if (length_mod == 'z') {
   1228a:	2f7a      	cmp	r7, #122	; 0x7a
   1228c:	d102      	bne.n	12294 <z_vprintk+0x148>
					d = va_arg(ap, int);
   1228e:	f854 6b04 	ldr.w	r6, [r4], #4
   12292:	e021      	b.n	122d8 <z_vprintk+0x18c>
				} else if (length_mod == 'l') {
   12294:	2f6c      	cmp	r7, #108	; 0x6c
   12296:	d0fa      	beq.n	1228e <z_vprintk+0x142>
				} else if (length_mod == 'L') {
   12298:	2f4c      	cmp	r7, #76	; 0x4c
   1229a:	d1f8      	bne.n	1228e <z_vprintk+0x142>
					long long lld = va_arg(ap, long long);
   1229c:	3407      	adds	r4, #7
   1229e:	f024 0407 	bic.w	r4, r4, #7
   122a2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   122a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
					if (lld > __LONG_MAX__ ||
   122aa:	9b04      	ldr	r3, [sp, #16]
   122ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   122b0:	f113 4100 	adds.w	r1, r3, #2147483648	; 0x80000000
   122b4:	9b05      	ldr	r3, [sp, #20]
   122b6:	9108      	str	r1, [sp, #32]
   122b8:	f143 0100 	adc.w	r1, r3, #0
   122bc:	9109      	str	r1, [sp, #36]	; 0x24
   122be:	2100      	movs	r1, #0
   122c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   122c4:	4299      	cmp	r1, r3
   122c6:	bf08      	it	eq
   122c8:	4290      	cmpeq	r0, r2
   122ca:	d204      	bcs.n	122d6 <z_vprintk+0x18a>
						print_err(out, ctx);
   122cc:	4659      	mov	r1, fp
   122ce:	4628      	mov	r0, r5
   122d0:	f014 f89d 	bl	2640e <print_err>
						break;
   122d4:	e746      	b.n	12164 <z_vprintk+0x18>
					d = lld;
   122d6:	9e04      	ldr	r6, [sp, #16]
				if (d < 0) {
   122d8:	2e00      	cmp	r6, #0
   122da:	da05      	bge.n	122e8 <z_vprintk+0x19c>
					out((int)'-', ctx);
   122dc:	4659      	mov	r1, fp
   122de:	202d      	movs	r0, #45	; 0x2d
   122e0:	47a8      	blx	r5
					d = -d;
   122e2:	4276      	negs	r6, r6
					min_width--;
   122e4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
   122e8:	4643      	mov	r3, r8
   122ea:	4632      	mov	r2, r6
   122ec:	f8cd 9000 	str.w	r9, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   122f0:	4659      	mov	r1, fp
   122f2:	4628      	mov	r0, r5
   122f4:	f7ff fed0 	bl	12098 <_printk_dec_ulong>
				break;
   122f8:	e734      	b.n	12164 <z_vprintk+0x18>
				if (length_mod == 'z') {
   122fa:	2f7a      	cmp	r7, #122	; 0x7a
   122fc:	d102      	bne.n	12304 <z_vprintk+0x1b8>
					u = va_arg(ap, unsigned int);
   122fe:	f854 2b04 	ldr.w	r2, [r4], #4
   12302:	e00f      	b.n	12324 <z_vprintk+0x1d8>
				} else if (length_mod == 'l') {
   12304:	2f6c      	cmp	r7, #108	; 0x6c
   12306:	d0fa      	beq.n	122fe <z_vprintk+0x1b2>
				} else if (length_mod == 'L') {
   12308:	2f4c      	cmp	r7, #76	; 0x4c
   1230a:	d1f8      	bne.n	122fe <z_vprintk+0x1b2>
					if (llu > ~0UL) {
   1230c:	2100      	movs	r1, #0
   1230e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					unsigned long long llu =
   12312:	3407      	adds	r4, #7
   12314:	f024 0407 	bic.w	r4, r4, #7
   12318:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
   1231c:	4299      	cmp	r1, r3
   1231e:	bf08      	it	eq
   12320:	4290      	cmpeq	r0, r2
   12322:	d3d3      	bcc.n	122cc <z_vprintk+0x180>
				_printk_dec_ulong(out, ctx, u, padding,
   12324:	4643      	mov	r3, r8
   12326:	f8cd 9000 	str.w	r9, [sp]
   1232a:	e7e1      	b.n	122f0 <z_vprintk+0x1a4>
				out('0', ctx);
   1232c:	4659      	mov	r1, fp
   1232e:	2030      	movs	r0, #48	; 0x30
   12330:	47a8      	blx	r5
				out('x', ctx);
   12332:	4659      	mov	r1, fp
   12334:	2078      	movs	r0, #120	; 0x78
   12336:	47a8      	blx	r5
					min_width = 8;
   12338:	f04f 0908 	mov.w	r9, #8
				padding = PAD_ZERO_BEFORE;
   1233c:	f04f 0801 	mov.w	r8, #1
   12340:	e772      	b.n	12228 <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
   12342:	2f6c      	cmp	r7, #108	; 0x6c
   12344:	f43f af75 	beq.w	12232 <z_vprintk+0xe6>
				} else if (length_mod == 'L') {
   12348:	2f4c      	cmp	r7, #76	; 0x4c
   1234a:	f47f af72 	bne.w	12232 <z_vprintk+0xe6>
					x = va_arg(ap, unsigned long long);
   1234e:	1de3      	adds	r3, r4, #7
   12350:	f023 0307 	bic.w	r3, r3, #7
   12354:	461c      	mov	r4, r3
   12356:	f854 2b08 	ldr.w	r2, [r4], #8
   1235a:	9206      	str	r2, [sp, #24]
   1235c:	685a      	ldr	r2, [r3, #4]
	int digits = 0;
   1235e:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
   12360:	2310      	movs	r3, #16
	int shift = sizeof(num) * 8;
   12362:	f04f 0a40 	mov.w	sl, #64	; 0x40
	int digits = 0;
   12366:	9104      	str	r1, [sp, #16]
	int found_largest_digit = 0;
   12368:	9107      	str	r1, [sp, #28]
		shift -= 4;
   1236a:	f1aa 0a04 	sub.w	sl, sl, #4
		nibble = (num >> shift) & 0xf;
   1236e:	9906      	ldr	r1, [sp, #24]
   12370:	f1ca 0e20 	rsb	lr, sl, #32
   12374:	f1aa 0c20 	sub.w	ip, sl, #32
   12378:	fa21 f00a 	lsr.w	r0, r1, sl
   1237c:	fa02 fe0e 	lsl.w	lr, r2, lr
   12380:	ea40 000e 	orr.w	r0, r0, lr
   12384:	fa22 fc0c 	lsr.w	ip, r2, ip
   12388:	ea40 000c 	orr.w	r0, r0, ip
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   1238c:	f010 000f 	ands.w	r0, r0, #15
   12390:	d107      	bne.n	123a2 <z_vprintk+0x256>
   12392:	9907      	ldr	r1, [sp, #28]
   12394:	b911      	cbnz	r1, 1239c <z_vprintk+0x250>
   12396:	f1ba 0f00 	cmp.w	sl, #0
   1239a:	d125      	bne.n	123e8 <z_vprintk+0x29c>
			nibble += nibble > 9 ? 87 : 48;
   1239c:	f04f 0c30 	mov.w	ip, #48	; 0x30
   123a0:	e005      	b.n	123ae <z_vprintk+0x262>
   123a2:	2809      	cmp	r0, #9
   123a4:	bf8c      	ite	hi
   123a6:	f04f 0c57 	movhi.w	ip, #87	; 0x57
   123aa:	f04f 0c30 	movls.w	ip, #48	; 0x30
   123ae:	4460      	add	r0, ip
			out((int)nibble, ctx);
   123b0:	4659      	mov	r1, fp
   123b2:	b240      	sxtb	r0, r0
   123b4:	920a      	str	r2, [sp, #40]	; 0x28
   123b6:	9307      	str	r3, [sp, #28]
   123b8:	47a8      	blx	r5
			digits++;
   123ba:	9b04      	ldr	r3, [sp, #16]
	while (shift >= 4) {
   123bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			digits++;
   123be:	3301      	adds	r3, #1
   123c0:	9304      	str	r3, [sp, #16]
	while (shift >= 4) {
   123c2:	9b07      	ldr	r3, [sp, #28]
   123c4:	f1ba 0f00 	cmp.w	sl, #0
   123c8:	d123      	bne.n	12412 <z_vprintk+0x2c6>
	if (padding == PAD_SPACE_AFTER) {
   123ca:	f1b8 0f03 	cmp.w	r8, #3
   123ce:	f47f aec9 	bne.w	12164 <z_vprintk+0x18>
		remaining = min_width * 2 - digits;
   123d2:	9b04      	ldr	r3, [sp, #16]
   123d4:	ebc3 0649 	rsb	r6, r3, r9, lsl #1
		while (remaining-- > 0) {
   123d8:	2e00      	cmp	r6, #0
   123da:	f77f aec3 	ble.w	12164 <z_vprintk+0x18>
			out(' ', ctx);
   123de:	4659      	mov	r1, fp
   123e0:	2020      	movs	r0, #32
   123e2:	47a8      	blx	r5
   123e4:	3e01      	subs	r6, #1
   123e6:	e7f7      	b.n	123d8 <z_vprintk+0x28c>
		if (remaining-- <= min_width) {
   123e8:	1e59      	subs	r1, r3, #1
   123ea:	4599      	cmp	r9, r3
   123ec:	910a      	str	r1, [sp, #40]	; 0x28
   123ee:	db07      	blt.n	12400 <z_vprintk+0x2b4>
			if (padding == PAD_ZERO_BEFORE) {
   123f0:	f1b8 0f01 	cmp.w	r8, #1
   123f4:	d106      	bne.n	12404 <z_vprintk+0x2b8>
				out('0', ctx);
   123f6:	4659      	mov	r1, fp
   123f8:	2030      	movs	r0, #48	; 0x30
   123fa:	920b      	str	r2, [sp, #44]	; 0x2c
				out(' ', ctx);
   123fc:	47a8      	blx	r5
   123fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			nibble += nibble > 9 ? 87 : 48;
   12400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12402:	e7b2      	b.n	1236a <z_vprintk+0x21e>
			} else if (padding == PAD_SPACE_BEFORE) {
   12404:	f1b8 0f02 	cmp.w	r8, #2
   12408:	d1fa      	bne.n	12400 <z_vprintk+0x2b4>
				out(' ', ctx);
   1240a:	4659      	mov	r1, fp
   1240c:	2020      	movs	r0, #32
   1240e:	920b      	str	r2, [sp, #44]	; 0x2c
   12410:	e7f4      	b.n	123fc <z_vprintk+0x2b0>
			found_largest_digit = 1;
   12412:	9607      	str	r6, [sp, #28]
   12414:	e7a9      	b.n	1236a <z_vprintk+0x21e>
				char *s = va_arg(ap, char *);
   12416:	f854 6b04 	ldr.w	r6, [r4], #4
				while (*s) {
   1241a:	46b2      	mov	sl, r6
   1241c:	4653      	mov	r3, sl
   1241e:	f81a 0b01 	ldrb.w	r0, [sl], #1
   12422:	b968      	cbnz	r0, 12440 <z_vprintk+0x2f4>
				if (padding == PAD_SPACE_AFTER) {
   12424:	f1b8 0f03 	cmp.w	r8, #3
   12428:	d121      	bne.n	1246e <z_vprintk+0x322>
					int remaining = min_width - (s - start);
   1242a:	1b9e      	subs	r6, r3, r6
   1242c:	eba9 0606 	sub.w	r6, r9, r6
					while (remaining-- > 0) {
   12430:	2e00      	cmp	r6, #0
   12432:	f77f ae97 	ble.w	12164 <z_vprintk+0x18>
						out(' ', ctx);
   12436:	4659      	mov	r1, fp
   12438:	2020      	movs	r0, #32
   1243a:	47a8      	blx	r5
   1243c:	3e01      	subs	r6, #1
   1243e:	e7f7      	b.n	12430 <z_vprintk+0x2e4>
					out((int)(*s++), ctx);
   12440:	4659      	mov	r1, fp
   12442:	47a8      	blx	r5
   12444:	e7ea      	b.n	1241c <z_vprintk+0x2d0>
				out(c, ctx);
   12446:	4659      	mov	r1, fp
   12448:	f854 0b04 	ldr.w	r0, [r4], #4
   1244c:	e6ae      	b.n	121ac <z_vprintk+0x60>
				out((int)'%', ctx);
   1244e:	4659      	mov	r1, fp
   12450:	e6ac      	b.n	121ac <z_vprintk+0x60>
				length_mod = 0;
   12452:	4637      	mov	r7, r6
				padding = PAD_NONE;
   12454:	46b0      	mov	r8, r6
				min_width = -1;
   12456:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
   1245a:	2601      	movs	r6, #1
   1245c:	e68a      	b.n	12174 <z_vprintk+0x28>
			switch (*fmt) {
   1245e:	f04f 0803 	mov.w	r8, #3
   12462:	e687      	b.n	12174 <z_vprintk+0x28>
					padding = PAD_ZERO_BEFORE;
   12464:	f04f 0801 	mov.w	r8, #1
   12468:	e684      	b.n	12174 <z_vprintk+0x28>
					length_mod = 'L';
   1246a:	274c      	movs	r7, #76	; 0x4c
   1246c:	e682      	b.n	12174 <z_vprintk+0x28>
			might_format = 0;
   1246e:	4606      	mov	r6, r0
		++fmt;
   12470:	e680      	b.n	12174 <z_vprintk+0x28>
   12472:	bf00      	nop

00012474 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   12474:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
   12476:	2500      	movs	r5, #0
{
   12478:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   1247a:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   1247e:	4604      	mov	r4, r0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
   12480:	a901      	add	r1, sp, #4
   12482:	4805      	ldr	r0, [pc, #20]	; (12498 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   12484:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
   12486:	f7ff fe61 	bl	1214c <z_vprintk>

	if (ctx.count < ctx.max) {
   1248a:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   1248e:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   12490:	bfb8      	it	lt
   12492:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   12494:	b005      	add	sp, #20
   12496:	bd30      	pop	{r4, r5, pc}
   12498:	0002642b 	.word	0x0002642b

0001249c <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   1249c:	f04f 0220 	mov.w	r2, #32
   124a0:	f3ef 8311 	mrs	r3, BASEPRI
   124a4:	f382 8811 	msr	BASEPRI, r2
   124a8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   124ac:	2101      	movs	r1, #1
   124ae:	4a04      	ldr	r2, [pc, #16]	; (124c0 <nordicsemi_nrf91_init+0x24>)
   124b0:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   124b4:	f383 8811 	msr	BASEPRI, r3
   124b8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   124bc:	2000      	movs	r0, #0
   124be:	4770      	bx	lr
   124c0:	40039000 	.word	0x40039000

000124c4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   124c4:	b120      	cbz	r0, 124d0 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   124c6:	4b03      	ldr	r3, [pc, #12]	; (124d4 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   124c8:	0180      	lsls	r0, r0, #6
   124ca:	f043 0301 	orr.w	r3, r3, #1
   124ce:	4718      	bx	r3

void arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   124d0:	4770      	bx	lr
   124d2:	bf00      	nop
   124d4:	00032df0 	.word	0x00032df0

000124d8 <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
   124d8:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   124da:	2200      	movs	r2, #0
{
   124dc:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   124de:	490f      	ldr	r1, [pc, #60]	; (1251c <enable_logger+0x44>)
   124e0:	480f      	ldr	r0, [pc, #60]	; (12520 <enable_logger+0x48>)
   124e2:	f014 ff19 	bl	27318 <k_timer_init>
		};
		return (k_tid_t) arch_syscall_invoke6(*(uintptr_t *)&new_thread, *(uintptr_t *)&stack, *(uintptr_t *)&stack_size, *(uintptr_t *)&entry, *(uintptr_t *)&p1, (uintptr_t) &more, K_SYSCALL_K_THREAD_CREATE);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   124e6:	2200      	movs	r2, #0
   124e8:	2300      	movs	r3, #0
   124ea:	2400      	movs	r4, #0
   124ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
   124f0:	230e      	movs	r3, #14
   124f2:	4d0c      	ldr	r5, [pc, #48]	; (12524 <enable_logger+0x4c>)
   124f4:	e9cd 3403 	strd	r3, r4, [sp, #12]
   124f8:	f44f 7240 	mov.w	r2, #768	; 0x300
   124fc:	4628      	mov	r0, r5
   124fe:	e9cd 4401 	strd	r4, r4, [sp, #4]
   12502:	4b09      	ldr	r3, [pc, #36]	; (12528 <enable_logger+0x50>)
   12504:	4909      	ldr	r1, [pc, #36]	; (1252c <enable_logger+0x54>)
   12506:	9400      	str	r4, [sp, #0]
   12508:	f003 fa48 	bl	1599c <z_impl_k_thread_create>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&thread_id, *(uintptr_t *)&value, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread_id, value);
   1250c:	4908      	ldr	r1, [pc, #32]	; (12530 <enable_logger+0x58>)
   1250e:	4628      	mov	r0, r5
   12510:	f014 feb8 	bl	27284 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   12514:	4620      	mov	r0, r4
   12516:	b009      	add	sp, #36	; 0x24
   12518:	bd30      	pop	{r4, r5, pc}
   1251a:	bf00      	nop
   1251c:	00012535 	.word	0x00012535
   12520:	20020180 	.word	0x20020180
   12524:	2002151c 	.word	0x2002151c
   12528:	00012985 	.word	0x00012985
   1252c:	20027130 	.word	0x20027130
   12530:	000337e1 	.word	0x000337e1

00012534 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   12534:	4801      	ldr	r0, [pc, #4]	; (1253c <log_process_thread_timer_expiry_fn+0x8>)
   12536:	f003 b9c1 	b.w	158bc <z_impl_k_sem_give>
   1253a:	bf00      	nop
   1253c:	20020138 	.word	0x20020138

00012540 <z_log_get_s_mask>:
{
   12540:	b5f0      	push	{r4, r5, r6, r7, lr}
   12542:	4605      	mov	r5, r0
	u32_t mask = 0;
   12544:	2000      	movs	r0, #0
				mask |= BIT(arg);
   12546:	2701      	movs	r7, #1
	u32_t arg = 0;
   12548:	4603      	mov	r3, r0
	bool arm = false;
   1254a:	4602      	mov	r2, r0
		} else if (arm && isalpha((int)curr)) {
   1254c:	4e0d      	ldr	r6, [pc, #52]	; (12584 <z_log_get_s_mask+0x44>)
	while ((curr = *str++) && arg < nargs) {
   1254e:	f815 4b01 	ldrb.w	r4, [r5], #1
   12552:	b10c      	cbz	r4, 12558 <z_log_get_s_mask+0x18>
   12554:	428b      	cmp	r3, r1
   12556:	d300      	bcc.n	1255a <z_log_get_s_mask+0x1a>
}
   12558:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   1255a:	2c25      	cmp	r4, #37	; 0x25
   1255c:	d102      	bne.n	12564 <z_log_get_s_mask+0x24>
			arm = !arm;
   1255e:	f082 0201 	eor.w	r2, r2, #1
   12562:	e7f4      	b.n	1254e <z_log_get_s_mask+0xe>
		} else if (arm && isalpha((int)curr)) {
   12564:	2a00      	cmp	r2, #0
   12566:	d0f2      	beq.n	1254e <z_log_get_s_mask+0xe>
   12568:	f814 c006 	ldrb.w	ip, [r4, r6]
   1256c:	f01c 0f03 	tst.w	ip, #3
   12570:	d0ed      	beq.n	1254e <z_log_get_s_mask+0xe>
			if (curr == 's') {
   12572:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   12574:	bf04      	itt	eq
   12576:	fa07 f203 	lsleq.w	r2, r7, r3
   1257a:	4310      	orreq	r0, r2
			arg++;
   1257c:	3301      	adds	r3, #1
			arm = false;
   1257e:	2200      	movs	r2, #0
   12580:	e7e5      	b.n	1254e <z_log_get_s_mask+0xe>
   12582:	bf00      	nop
   12584:	00037575 	.word	0x00037575

00012588 <log_core_init>:
{
   12588:	b508      	push	{r3, lr}
		log_msg_pool_init();
   1258a:	f000 fa59 	bl	12a40 <log_msg_pool_init>
		log_list_init(&list);
   1258e:	4809      	ldr	r0, [pc, #36]	; (125b4 <log_core_init+0x2c>)
   12590:	f014 f843 	bl	2661a <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   12594:	2304      	movs	r3, #4
   12596:	2228      	movs	r2, #40	; 0x28
   12598:	4907      	ldr	r1, [pc, #28]	; (125b8 <log_core_init+0x30>)
   1259a:	4808      	ldr	r0, [pc, #32]	; (125bc <log_core_init+0x34>)
   1259c:	f014 fd58 	bl	27050 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
   125a0:	4b07      	ldr	r3, [pc, #28]	; (125c0 <log_core_init+0x38>)
   125a2:	4a08      	ldr	r2, [pc, #32]	; (125c4 <log_core_init+0x3c>)
	log_output_timestamp_freq_set(freq);
   125a4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
   125a8:	601a      	str	r2, [r3, #0]
}
   125aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
   125ae:	f000 bc8f 	b.w	12ed0 <log_output_timestamp_freq_set>
   125b2:	bf00      	nop
   125b4:	200214f8 	.word	0x200214f8
   125b8:	20029d70 	.word	0x20029d70
   125bc:	20021500 	.word	0x20021500
   125c0:	20020008 	.word	0x20020008
   125c4:	00026659 	.word	0x00026659

000125c8 <dropped_notify>:
{
   125c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   125ca:	2500      	movs	r5, #0
   125cc:	4b0c      	ldr	r3, [pc, #48]	; (12600 <dropped_notify+0x38>)
   125ce:	e8d3 7fef 	ldaex	r7, [r3]
   125d2:	e8c3 5fe2 	stlex	r2, r5, [r3]
   125d6:	2a00      	cmp	r2, #0
   125d8:	d1f9      	bne.n	125ce <dropped_notify+0x6>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   125da:	4c0a      	ldr	r4, [pc, #40]	; (12604 <dropped_notify+0x3c>)
   125dc:	4e0a      	ldr	r6, [pc, #40]	; (12608 <dropped_notify+0x40>)
   125de:	1b36      	subs	r6, r6, r4
   125e0:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   125e2:	42b5      	cmp	r5, r6
   125e4:	db00      	blt.n	125e8 <dropped_notify+0x20>
}
   125e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   125e8:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   125ea:	795b      	ldrb	r3, [r3, #5]
   125ec:	b12b      	cbz	r3, 125fa <dropped_notify+0x32>
	if (backend->api->dropped != NULL) {
   125ee:	6823      	ldr	r3, [r4, #0]
   125f0:	68db      	ldr	r3, [r3, #12]
   125f2:	b113      	cbz	r3, 125fa <dropped_notify+0x32>
		backend->api->dropped(backend, cnt);
   125f4:	4639      	mov	r1, r7
   125f6:	4620      	mov	r0, r4
   125f8:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   125fa:	3501      	adds	r5, #1
   125fc:	3410      	adds	r4, #16
   125fe:	e7f0      	b.n	125e2 <dropped_notify+0x1a>
   12600:	200214f0 	.word	0x200214f0
   12604:	00031810 	.word	0x00031810
   12608:	00031820 	.word	0x00031820

0001260c <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1260c:	4b04      	ldr	r3, [pc, #16]	; (12620 <log_dropped+0x14>)
   1260e:	e8d3 2fef 	ldaex	r2, [r3]
   12612:	3201      	adds	r2, #1
   12614:	e8c3 2fe1 	stlex	r1, r2, [r3]
   12618:	2900      	cmp	r1, #0
   1261a:	d1f8      	bne.n	1260e <log_dropped+0x2>
}
   1261c:	4770      	bx	lr
   1261e:	bf00      	nop
   12620:	200214f0 	.word	0x200214f0

00012624 <log_source_name_get>:
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
   12624:	4a04      	ldr	r2, [pc, #16]	; (12638 <log_source_name_get+0x14>)
   12626:	4b05      	ldr	r3, [pc, #20]	; (1263c <log_source_name_get+0x18>)
   12628:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   1262a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   1262e:	bf34      	ite	cc
   12630:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
   12634:	2000      	movcs	r0, #0
}
   12636:	4770      	bx	lr
   12638:	000317c8 	.word	0x000317c8
   1263c:	00031810 	.word	0x00031810

00012640 <log_backend_enable>:
	id += backend - log_backend_get(0);
   12640:	4b09      	ldr	r3, [pc, #36]	; (12668 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
   12642:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
   12644:	1ac3      	subs	r3, r0, r3
   12646:	111b      	asrs	r3, r3, #4
   12648:	3301      	adds	r3, #1
{
   1264a:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
   1264c:	7113      	strb	r3, [r2, #4]
	backend->cb->active = true;
   1264e:	2201      	movs	r2, #1
	log_backend_activate(backend, ctx);
   12650:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
   12652:	4c06      	ldr	r4, [pc, #24]	; (1266c <log_backend_enable+0x2c>)
   12654:	715a      	strb	r2, [r3, #5]
   12656:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
   12658:	6019      	str	r1, [r3, #0]
   1265a:	b912      	cbnz	r2, 12662 <log_backend_enable+0x22>
   1265c:	4804      	ldr	r0, [pc, #16]	; (12670 <log_backend_enable+0x30>)
   1265e:	f003 f92d 	bl	158bc <z_impl_k_sem_give>
	backend_attached = true;
   12662:	2301      	movs	r3, #1
   12664:	7023      	strb	r3, [r4, #0]
}
   12666:	bd10      	pop	{r4, pc}
   12668:	00031810 	.word	0x00031810
   1266c:	20026cfc 	.word	0x20026cfc
   12670:	20020138 	.word	0x20020138

00012674 <log_init>:
{
   12674:	b570      	push	{r4, r5, r6, lr}
	return __log_backends_end - __log_backends_start;
   12676:	4b14      	ldr	r3, [pc, #80]	; (126c8 <log_init+0x54>)
   12678:	4c14      	ldr	r4, [pc, #80]	; (126cc <log_init+0x58>)
   1267a:	1b1b      	subs	r3, r3, r4
	assert(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   1267c:	2b9f      	cmp	r3, #159	; 0x9f
   1267e:	ea4f 1623 	mov.w	r6, r3, asr #4
   12682:	d906      	bls.n	12692 <log_init+0x1e>
   12684:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   12688:	4b11      	ldr	r3, [pc, #68]	; (126d0 <log_init+0x5c>)
   1268a:	4a12      	ldr	r2, [pc, #72]	; (126d4 <log_init+0x60>)
   1268c:	4812      	ldr	r0, [pc, #72]	; (126d8 <log_init+0x64>)
   1268e:	f013 febb 	bl	26408 <__assert_func>
   12692:	4b12      	ldr	r3, [pc, #72]	; (126dc <log_init+0x68>)
   12694:	e8d3 5fef 	ldaex	r5, [r3]
   12698:	1c6a      	adds	r2, r5, #1
   1269a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1269e:	2900      	cmp	r1, #0
   126a0:	d1f8      	bne.n	12694 <log_init+0x20>
	if (atomic_inc(&initialized) != 0) {
   126a2:	b90d      	cbnz	r5, 126a8 <log_init+0x34>
	for (i = 0; i < log_backend_count_get(); i++) {
   126a4:	42b5      	cmp	r5, r6
   126a6:	d100      	bne.n	126aa <log_init+0x36>
}
   126a8:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   126aa:	7b23      	ldrb	r3, [r4, #12]
   126ac:	b143      	cbz	r3, 126c0 <log_init+0x4c>
			if (backend->api->init != NULL) {
   126ae:	6823      	ldr	r3, [r4, #0]
   126b0:	695b      	ldr	r3, [r3, #20]
   126b2:	b103      	cbz	r3, 126b6 <log_init+0x42>
				backend->api->init();
   126b4:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
   126b6:	2204      	movs	r2, #4
   126b8:	2100      	movs	r1, #0
   126ba:	4620      	mov	r0, r4
   126bc:	f7ff ffc0 	bl	12640 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   126c0:	3501      	adds	r5, #1
   126c2:	3410      	adds	r4, #16
   126c4:	e7ee      	b.n	126a4 <log_init+0x30>
   126c6:	bf00      	nop
   126c8:	00031820 	.word	0x00031820
   126cc:	00031810 	.word	0x00031810
   126d0:	00033816 	.word	0x00033816
   126d4:	000338a6 	.word	0x000338a6
   126d8:	000337e9 	.word	0x000337e9
   126dc:	200214f4 	.word	0x200214f4

000126e0 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
   126e0:	4b14      	ldr	r3, [pc, #80]	; (12734 <log_strdup+0x54>)
{
   126e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
   126e4:	4298      	cmp	r0, r3
{
   126e6:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   126e8:	d302      	bcc.n	126f0 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   126ea:	4b13      	ldr	r3, [pc, #76]	; (12738 <log_strdup+0x58>)
   126ec:	4298      	cmp	r0, r3
   126ee:	d31c      	bcc.n	1272a <log_strdup+0x4a>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   126f0:	2200      	movs	r2, #0
   126f2:	2300      	movs	r3, #0
   126f4:	4811      	ldr	r0, [pc, #68]	; (1273c <log_strdup+0x5c>)
   126f6:	a901      	add	r1, sp, #4
   126f8:	f002 fc76 	bl	14fe8 <k_mem_slab_alloc>
	if (err != 0) {
   126fc:	4605      	mov	r5, r0
   126fe:	b9b8      	cbnz	r0, 12730 <log_strdup+0x50>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12700:	2201      	movs	r2, #1
   12702:	9b01      	ldr	r3, [sp, #4]
   12704:	e8d3 1fef 	ldaex	r1, [r3]
   12708:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1270c:	2800      	cmp	r0, #0
   1270e:	d1f9      	bne.n	12704 <log_strdup+0x24>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   12710:	9e01      	ldr	r6, [sp, #4]
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   12712:	221f      	movs	r2, #31
   12714:	1d33      	adds	r3, r6, #4
   12716:	4621      	mov	r1, r4
   12718:	4618      	mov	r0, r3
   1271a:	f01e fca3 	bl	31064 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   1271e:	227e      	movs	r2, #126	; 0x7e
	return dup->buf;
   12720:	4604      	mov	r4, r0
	dup->buf[sizeof(dup->buf) - 2] = '~';
   12722:	f886 2023 	strb.w	r2, [r6, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   12726:	f886 5024 	strb.w	r5, [r6, #36]	; 0x24
}
   1272a:	4620      	mov	r0, r4
   1272c:	b002      	add	sp, #8
   1272e:	bd70      	pop	{r4, r5, r6, pc}
		return (char *)log_strdup_fail_msg;
   12730:	4c03      	ldr	r4, [pc, #12]	; (12740 <log_strdup+0x60>)
   12732:	e7fa      	b.n	1272a <log_strdup+0x4a>
   12734:	00031544 	.word	0x00031544
   12738:	000376ac 	.word	0x000376ac
   1273c:	20021500 	.word	0x20021500
   12740:	00033849 	.word	0x00033849

00012744 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (u8_t *)buf);
   12744:	b148      	cbz	r0, 1275a <log_is_strdup+0x16>
   12746:	4b05      	ldr	r3, [pc, #20]	; (1275c <log_is_strdup+0x18>)
   12748:	4298      	cmp	r0, r3
   1274a:	d305      	bcc.n	12758 <log_is_strdup+0x14>
   1274c:	33a0      	adds	r3, #160	; 0xa0
   1274e:	4298      	cmp	r0, r3
   12750:	bf2c      	ite	cs
   12752:	2000      	movcs	r0, #0
   12754:	2001      	movcc	r0, #1
   12756:	4770      	bx	lr
   12758:	2000      	movs	r0, #0
}
   1275a:	4770      	bx	lr
   1275c:	20029d70 	.word	0x20029d70

00012760 <z_impl_log_process>:
{
   12760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
   12764:	4b4a      	ldr	r3, [pc, #296]	; (12890 <z_impl_log_process+0x130>)
{
   12766:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
   12768:	781b      	ldrb	r3, [r3, #0]
{
   1276a:	b085      	sub	sp, #20
	if (!backend_attached && !bypass) {
   1276c:	b903      	cbnz	r3, 12770 <z_impl_log_process+0x10>
   1276e:	b340      	cbz	r0, 127c2 <z_impl_log_process+0x62>
	__asm__ volatile(
   12770:	f04f 0320 	mov.w	r3, #32
   12774:	f3ef 8611 	mrs	r6, BASEPRI
   12778:	f383 8811 	msr	BASEPRI, r3
   1277c:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
   12780:	4844      	ldr	r0, [pc, #272]	; (12894 <z_impl_log_process+0x134>)
   12782:	f013 ff5a 	bl	2663a <log_list_head_get>
   12786:	4605      	mov	r5, r0
	__asm__ volatile(
   12788:	f386 8811 	msr	BASEPRI, r6
   1278c:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
   12790:	b158      	cbz	r0, 127aa <z_impl_log_process+0x4a>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   12792:	4b41      	ldr	r3, [pc, #260]	; (12898 <z_impl_log_process+0x138>)
   12794:	e8d3 2fef 	ldaex	r2, [r3]
   12798:	3a01      	subs	r2, #1
   1279a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1279e:	2900      	cmp	r1, #0
   127a0:	d1f8      	bne.n	12794 <z_impl_log_process+0x34>
	if (!bypass) {
   127a2:	b194      	cbz	r4, 127ca <z_impl_log_process+0x6a>
	log_msg_put(msg);
   127a4:	4628      	mov	r0, r5
   127a6:	f014 f852 	bl	2684e <log_msg_put>
	if (!bypass && dropped_cnt) {
   127aa:	b924      	cbnz	r4, 127b6 <z_impl_log_process+0x56>
   127ac:	4b3b      	ldr	r3, [pc, #236]	; (1289c <z_impl_log_process+0x13c>)
   127ae:	681b      	ldr	r3, [r3, #0]
   127b0:	b10b      	cbz	r3, 127b6 <z_impl_log_process+0x56>
		dropped_notify();
   127b2:	f7ff ff09 	bl	125c8 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
   127b6:	4837      	ldr	r0, [pc, #220]	; (12894 <z_impl_log_process+0x134>)
   127b8:	f013 ff3d 	bl	26636 <log_list_head_peek>
   127bc:	1e04      	subs	r4, r0, #0
   127be:	bf18      	it	ne
   127c0:	2401      	movne	r4, #1
}
   127c2:	4620      	mov	r0, r4
   127c4:	b005      	add	sp, #20
   127c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
   127ca:	4b35      	ldr	r3, [pc, #212]	; (128a0 <z_impl_log_process+0x140>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
   127cc:	781b      	ldrb	r3, [r3, #0]
   127ce:	b9cb      	cbnz	r3, 12804 <z_impl_log_process+0xa4>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   127d0:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
   127d2:	07db      	lsls	r3, r3, #31
   127d4:	d416      	bmi.n	12804 <z_impl_log_process+0xa4>
	msg_str = log_msg_str_get(msg);
   127d6:	f014 f849 	bl	2686c <log_msg_str_get>
   127da:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   127dc:	4628      	mov	r0, r5
   127de:	f014 f814 	bl	2680a <log_msg_nargs_get>
   127e2:	4601      	mov	r1, r0
   127e4:	4640      	mov	r0, r8
   127e6:	f7ff feab 	bl	12540 <z_log_get_s_mask>
   127ea:	4606      	mov	r6, r0
	return ((u8_t *)data - (u8_t *)__log_const_start)/
   127ec:	4f2d      	ldr	r7, [pc, #180]	; (128a4 <z_impl_log_process+0x144>)
   127ee:	4b2e      	ldr	r3, [pc, #184]	; (128a8 <z_impl_log_process+0x148>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   127f0:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 128c4 <z_impl_log_process+0x164>
   127f4:	1bdb      	subs	r3, r3, r7
   127f6:	08db      	lsrs	r3, r3, #3
   127f8:	9303      	str	r3, [sp, #12]
   127fa:	4b2c      	ldr	r3, [pc, #176]	; (128ac <z_impl_log_process+0x14c>)
   127fc:	1bdb      	subs	r3, r3, r7
   127fe:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
   12802:	b936      	cbnz	r6, 12812 <z_impl_log_process+0xb2>
   12804:	4e2a      	ldr	r6, [pc, #168]	; (128b0 <z_impl_log_process+0x150>)
   12806:	4f2b      	ldr	r7, [pc, #172]	; (128b4 <z_impl_log_process+0x154>)
   12808:	f04f 0800 	mov.w	r8, #0
   1280c:	1bbf      	subs	r7, r7, r6
   1280e:	113f      	asrs	r7, r7, #4
   12810:	e03a      	b.n	12888 <z_impl_log_process+0x128>
		idx = 31 - __builtin_clz(mask);
   12812:	fab6 f186 	clz	r1, r6
   12816:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   1281a:	4649      	mov	r1, r9
   1281c:	4628      	mov	r0, r5
   1281e:	f013 fff7 	bl	26810 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
   12822:	4b25      	ldr	r3, [pc, #148]	; (128b8 <z_impl_log_process+0x158>)
		str = (const char *)log_msg_arg_get(msg, idx);
   12824:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   12826:	4298      	cmp	r0, r3
   12828:	d302      	bcc.n	12830 <z_impl_log_process+0xd0>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   1282a:	4a24      	ldr	r2, [pc, #144]	; (128bc <z_impl_log_process+0x15c>)
   1282c:	4290      	cmp	r0, r2
   1282e:	d31a      	bcc.n	12866 <z_impl_log_process+0x106>
   12830:	4608      	mov	r0, r1
   12832:	f7ff ff87 	bl	12744 <log_is_strdup>
   12836:	4602      	mov	r2, r0
   12838:	b9a8      	cbnz	r0, 12866 <z_impl_log_process+0x106>
   1283a:	4b21      	ldr	r3, [pc, #132]	; (128c0 <z_impl_log_process+0x160>)
   1283c:	4299      	cmp	r1, r3
   1283e:	d012      	beq.n	12866 <z_impl_log_process+0x106>
	return msg->hdr.ids.source_id;
   12840:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   12842:	9903      	ldr	r1, [sp, #12]
   12844:	0998      	lsrs	r0, r3, #6
   12846:	ebb1 1f93 	cmp.w	r1, r3, lsr #6
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   1284a:	ea4f 138a 	mov.w	r3, sl, lsl #6
   1284e:	f043 0301 	orr.w	r3, r3, #1
	return __log_const_start[source_id].name;
   12852:	bf88      	it	hi
   12854:	f857 2030 	ldrhi.w	r2, [r7, r0, lsl #3]
   12858:	4649      	mov	r1, r9
   1285a:	f8ad 3000 	strh.w	r3, [sp]
   1285e:	4658      	mov	r0, fp
   12860:	4643      	mov	r3, r8
   12862:	f013 ff3c 	bl	266de <log_3>
		mask &= ~BIT(idx);
   12866:	2301      	movs	r3, #1
   12868:	fa03 f109 	lsl.w	r1, r3, r9
   1286c:	ea26 0601 	bic.w	r6, r6, r1
   12870:	e7c7      	b.n	12802 <z_impl_log_process+0xa2>
	return backend->cb->active;
   12872:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
   12874:	795b      	ldrb	r3, [r3, #5]
   12876:	b123      	cbz	r3, 12882 <z_impl_log_process+0x122>
	backend->api->put(backend, msg);
   12878:	6833      	ldr	r3, [r6, #0]
   1287a:	4629      	mov	r1, r5
   1287c:	4630      	mov	r0, r6
   1287e:	681b      	ldr	r3, [r3, #0]
   12880:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
   12882:	f108 0801 	add.w	r8, r8, #1
   12886:	3610      	adds	r6, #16
   12888:	45b8      	cmp	r8, r7
   1288a:	dbf2      	blt.n	12872 <z_impl_log_process+0x112>
   1288c:	e78a      	b.n	127a4 <z_impl_log_process+0x44>
   1288e:	bf00      	nop
   12890:	20026cfc 	.word	0x20026cfc
   12894:	200214f8 	.word	0x200214f8
   12898:	200214ec 	.word	0x200214ec
   1289c:	200214f0 	.word	0x200214f0
   128a0:	20026cfd 	.word	0x20026cfd
   128a4:	000317c8 	.word	0x000317c8
   128a8:	00031810 	.word	0x00031810
   128ac:	000317d8 	.word	0x000317d8
   128b0:	00031810 	.word	0x00031810
   128b4:	00031820 	.word	0x00031820
   128b8:	00031544 	.word	0x00031544
   128bc:	000376ac 	.word	0x000376ac
   128c0:	00033849 	.word	0x00033849
   128c4:	00033863 	.word	0x00033863

000128c8 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
   128c8:	4b27      	ldr	r3, [pc, #156]	; (12968 <msg_finalize+0xa0>)
{
   128ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
   128cc:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
   128ce:	8141      	strh	r1, [r0, #10]
{
   128d0:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   128d2:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   128d4:	4d25      	ldr	r5, [pc, #148]	; (1296c <msg_finalize+0xa4>)
   128d6:	60e0      	str	r0, [r4, #12]
   128d8:	e8d5 3fef 	ldaex	r3, [r5]
   128dc:	3301      	adds	r3, #1
   128de:	e8c5 3fe2 	stlex	r2, r3, [r5]
   128e2:	2a00      	cmp	r2, #0
   128e4:	d1f8      	bne.n	128d8 <msg_finalize+0x10>
	__asm__ volatile(
   128e6:	f04f 0320 	mov.w	r3, #32
   128ea:	f3ef 8611 	mrs	r6, BASEPRI
   128ee:	f383 8811 	msr	BASEPRI, r3
   128f2:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   128f6:	481e      	ldr	r0, [pc, #120]	; (12970 <msg_finalize+0xa8>)
   128f8:	4621      	mov	r1, r4
   128fa:	f013 fe92 	bl	26622 <log_list_add_tail>
	__asm__ volatile(
   128fe:	f386 8811 	msr	BASEPRI, r6
   12902:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
   12906:	4b1b      	ldr	r3, [pc, #108]	; (12974 <msg_finalize+0xac>)
   12908:	781b      	ldrb	r3, [r3, #0]
   1290a:	b183      	cbz	r3, 1292e <msg_finalize+0x66>
	__asm__ volatile(
   1290c:	f04f 0320 	mov.w	r3, #32
   12910:	f3ef 8411 	mrs	r4, BASEPRI
   12914:	f383 8811 	msr	BASEPRI, r3
   12918:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   1291c:	2000      	movs	r0, #0
   1291e:	f7ff ff1f 	bl	12760 <z_impl_log_process>
	__asm__ volatile(
   12922:	f384 8811 	msr	BASEPRI, r4
   12926:	f3bf 8f6f 	isb	sy
}
   1292a:	b002      	add	sp, #8
   1292c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
   1292e:	4a12      	ldr	r2, [pc, #72]	; (12978 <msg_finalize+0xb0>)
   12930:	682b      	ldr	r3, [r5, #0]
   12932:	6812      	ldr	r2, [r2, #0]
   12934:	2a00      	cmp	r2, #0
   12936:	d0f8      	beq.n	1292a <msg_finalize+0x62>
   12938:	2b01      	cmp	r3, #1
   1293a:	d10a      	bne.n	12952 <msg_finalize+0x8a>
	z_impl_k_timer_start(timer, duration, period);
   1293c:	2200      	movs	r2, #0
   1293e:	2300      	movs	r3, #0
   12940:	480e      	ldr	r0, [pc, #56]	; (1297c <msg_finalize+0xb4>)
   12942:	e9cd 2300 	strd	r2, r3, [sp]
   12946:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1294a:	2300      	movs	r3, #0
   1294c:	f003 f9fc 	bl	15d48 <z_impl_k_timer_start>
   12950:	e7eb      	b.n	1292a <msg_finalize+0x62>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   12952:	2b0a      	cmp	r3, #10
   12954:	d1e9      	bne.n	1292a <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
   12956:	4809      	ldr	r0, [pc, #36]	; (1297c <msg_finalize+0xb4>)
   12958:	f014 fcea 	bl	27330 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   1295c:	4808      	ldr	r0, [pc, #32]	; (12980 <msg_finalize+0xb8>)
}
   1295e:	b002      	add	sp, #8
   12960:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12964:	f002 bfaa 	b.w	158bc <z_impl_k_sem_give>
   12968:	20020008 	.word	0x20020008
   1296c:	200214ec 	.word	0x200214ec
   12970:	200214f8 	.word	0x200214f8
   12974:	20026cfd 	.word	0x20026cfd
   12978:	20021590 	.word	0x20021590
   1297c:	20020180 	.word	0x20020180
   12980:	20020138 	.word	0x20020138

00012984 <log_process_thread_func>:
{
   12984:	b510      	push	{r4, lr}
	log_init();
   12986:	f7ff fe75 	bl	12674 <log_init>
	return z_impl_k_current_get();
   1298a:	f002 ff91 	bl	158b0 <z_impl_k_current_get>
	proc_tid = process_tid;
   1298e:	4b0c      	ldr	r3, [pc, #48]	; (129c0 <log_process_thread_func+0x3c>)
   12990:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   12992:	b130      	cbz	r0, 129a2 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   12994:	4b0b      	ldr	r3, [pc, #44]	; (129c4 <log_process_thread_func+0x40>)
	    process_tid &&
   12996:	681b      	ldr	r3, [r3, #0]
   12998:	2b09      	cmp	r3, #9
   1299a:	dd02      	ble.n	129a2 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
   1299c:	480a      	ldr	r0, [pc, #40]	; (129c8 <log_process_thread_func+0x44>)
   1299e:	f002 ff8d 	bl	158bc <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   129a2:	4c09      	ldr	r4, [pc, #36]	; (129c8 <log_process_thread_func+0x44>)
   129a4:	2000      	movs	r0, #0
   129a6:	f7ff fedb 	bl	12760 <z_impl_log_process>
		if (log_process(false) == false) {
   129aa:	2800      	cmp	r0, #0
   129ac:	d1fa      	bne.n	129a4 <log_process_thread_func+0x20>
   129ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   129b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   129b6:	4620      	mov	r0, r4
   129b8:	f002 ffa0 	bl	158fc <z_impl_k_sem_take>
   129bc:	e7f2      	b.n	129a4 <log_process_thread_func+0x20>
   129be:	bf00      	nop
   129c0:	20021590 	.word	0x20021590
   129c4:	200214ec 	.word	0x200214ec
   129c8:	20020138 	.word	0x20020138

000129cc <z_impl_log_panic>:
{
   129cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   129ce:	4f0e      	ldr	r7, [pc, #56]	; (12a08 <z_impl_log_panic+0x3c>)
   129d0:	783d      	ldrb	r5, [r7, #0]
   129d2:	b975      	cbnz	r5, 129f2 <z_impl_log_panic+0x26>
	log_init();
   129d4:	f7ff fe4e 	bl	12674 <log_init>
	return __log_backends_end - __log_backends_start;
   129d8:	4c0c      	ldr	r4, [pc, #48]	; (12a0c <z_impl_log_panic+0x40>)
   129da:	4e0d      	ldr	r6, [pc, #52]	; (12a10 <z_impl_log_panic+0x44>)
   129dc:	1b36      	subs	r6, r6, r4
   129de:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   129e0:	42b5      	cmp	r5, r6
   129e2:	db07      	blt.n	129f4 <z_impl_log_panic+0x28>
   129e4:	2000      	movs	r0, #0
   129e6:	f7ff febb 	bl	12760 <z_impl_log_process>
		while (log_process(false) == true) {
   129ea:	2800      	cmp	r0, #0
   129ec:	d1fa      	bne.n	129e4 <z_impl_log_panic+0x18>
	panic_mode = true;
   129ee:	2301      	movs	r3, #1
   129f0:	703b      	strb	r3, [r7, #0]
}
   129f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
   129f4:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   129f6:	795b      	ldrb	r3, [r3, #5]
   129f8:	b11b      	cbz	r3, 12a02 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
   129fa:	6823      	ldr	r3, [r4, #0]
   129fc:	4620      	mov	r0, r4
   129fe:	691b      	ldr	r3, [r3, #16]
   12a00:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   12a02:	3501      	adds	r5, #1
   12a04:	3410      	adds	r4, #16
   12a06:	e7eb      	b.n	129e0 <z_impl_log_panic+0x14>
   12a08:	20026cfd 	.word	0x20026cfd
   12a0c:	00031810 	.word	0x00031810
   12a10:	00031820 	.word	0x00031820

00012a14 <log_free>:
{
   12a14:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   12a16:	3804      	subs	r0, #4
   12a18:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   12a1a:	e8d0 3fef 	ldaex	r3, [r0]
   12a1e:	1e5a      	subs	r2, r3, #1
   12a20:	e8c0 2fe1 	stlex	r1, r2, [r0]
   12a24:	2900      	cmp	r1, #0
   12a26:	d1f8      	bne.n	12a1a <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
   12a28:	2b01      	cmp	r3, #1
   12a2a:	d103      	bne.n	12a34 <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   12a2c:	4803      	ldr	r0, [pc, #12]	; (12a3c <log_free+0x28>)
   12a2e:	a901      	add	r1, sp, #4
   12a30:	f002 fb0c 	bl	1504c <k_mem_slab_free>
}
   12a34:	b003      	add	sp, #12
   12a36:	f85d fb04 	ldr.w	pc, [sp], #4
   12a3a:	bf00      	nop
   12a3c:	20021500 	.word	0x20021500

00012a40 <log_msg_pool_init>:
static u8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   12a40:	2320      	movs	r3, #32
   12a42:	4902      	ldr	r1, [pc, #8]	; (12a4c <log_msg_pool_init+0xc>)
   12a44:	461a      	mov	r2, r3
   12a46:	4802      	ldr	r0, [pc, #8]	; (12a50 <log_msg_pool_init+0x10>)
   12a48:	f014 bb02 	b.w	27050 <k_mem_slab_init>
   12a4c:	20029e10 	.word	0x20029e10
   12a50:	20021594 	.word	0x20021594

00012a54 <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
   12a54:	2300      	movs	r3, #0
{
   12a56:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
   12a58:	4d09      	ldr	r5, [pc, #36]	; (12a80 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
   12a5a:	9301      	str	r3, [sp, #4]
   12a5c:	2001      	movs	r0, #1
   12a5e:	f7ff fe7f 	bl	12760 <z_impl_log_process>
   12a62:	4604      	mov	r4, r0
			log_dropped();
   12a64:	f7ff fdd2 	bl	1260c <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   12a68:	2200      	movs	r2, #0
   12a6a:	2300      	movs	r3, #0
   12a6c:	4628      	mov	r0, r5
   12a6e:	a901      	add	r1, sp, #4
   12a70:	f002 faba 	bl	14fe8 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   12a74:	b108      	cbz	r0, 12a7a <log_msg_no_space_handle+0x26>
   12a76:	2c00      	cmp	r4, #0
   12a78:	d1f0      	bne.n	12a5c <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
   12a7a:	9801      	ldr	r0, [sp, #4]
   12a7c:	b003      	add	sp, #12
   12a7e:	bd30      	pop	{r4, r5, pc}
   12a80:	20021594 	.word	0x20021594

00012a84 <log_msg_chunk_alloc>:
	union log_msg_chunk *msg = NULL;
   12a84:	2300      	movs	r3, #0
{
   12a86:	b507      	push	{r0, r1, r2, lr}
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   12a88:	2200      	movs	r2, #0
	union log_msg_chunk *msg = NULL;
   12a8a:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   12a8c:	4806      	ldr	r0, [pc, #24]	; (12aa8 <log_msg_chunk_alloc+0x24>)
   12a8e:	2300      	movs	r3, #0
   12a90:	a901      	add	r1, sp, #4
   12a92:	f002 faa9 	bl	14fe8 <k_mem_slab_alloc>
	if (err != 0) {
   12a96:	b110      	cbz	r0, 12a9e <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
   12a98:	f7ff ffdc 	bl	12a54 <log_msg_no_space_handle>
   12a9c:	9001      	str	r0, [sp, #4]
}
   12a9e:	9801      	ldr	r0, [sp, #4]
   12aa0:	b003      	add	sp, #12
   12aa2:	f85d fb04 	ldr.w	pc, [sp], #4
   12aa6:	bf00      	nop
   12aa8:	20021594 	.word	0x20021594

00012aac <msg_free>:
{
   12aac:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   12aae:	7a03      	ldrb	r3, [r0, #8]
	}
}

u32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
   12ab0:	7a45      	ldrb	r5, [r0, #9]
{
   12ab2:	b085      	sub	sp, #20
   12ab4:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
   12ab6:	07d8      	lsls	r0, r3, #31
	return msg->hdr.params.std.nargs;
   12ab8:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
   12abc:	d41c      	bmi.n	12af8 <msg_free+0x4c>
   12abe:	b1dd      	cbz	r5, 12af8 <msg_free+0x4c>
		u32_t smask = 0;
   12ac0:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
   12ac2:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
   12ac4:	4631      	mov	r1, r6
   12ac6:	9801      	ldr	r0, [sp, #4]
   12ac8:	f013 fea2 	bl	26810 <log_msg_arg_get>
   12acc:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
   12ace:	f7ff fe39 	bl	12744 <log_is_strdup>
   12ad2:	b170      	cbz	r0, 12af2 <msg_free+0x46>
				if (smask == 0) {
   12ad4:	b934      	cbnz	r4, 12ae4 <msg_free+0x38>
					smask = z_log_get_s_mask(
   12ad6:	9b01      	ldr	r3, [sp, #4]
   12ad8:	4629      	mov	r1, r5
   12ada:	6918      	ldr	r0, [r3, #16]
   12adc:	f7ff fd30 	bl	12540 <z_log_get_s_mask>
					if (smask == 0) {
   12ae0:	4604      	mov	r4, r0
   12ae2:	b148      	cbz	r0, 12af8 <msg_free+0x4c>
				if (smask & BIT(i)) {
   12ae4:	fa24 f306 	lsr.w	r3, r4, r6
   12ae8:	07d9      	lsls	r1, r3, #31
   12aea:	d502      	bpl.n	12af2 <msg_free+0x46>
					log_free(buf);
   12aec:	4638      	mov	r0, r7
   12aee:	f7ff ff91 	bl	12a14 <log_free>
		for (i = 0; i < nargs; i++) {
   12af2:	3601      	adds	r6, #1
   12af4:	42ae      	cmp	r6, r5
   12af6:	d3e5      	bcc.n	12ac4 <msg_free+0x18>
	if (msg->hdr.params.generic.ext == 1) {
   12af8:	9b01      	ldr	r3, [sp, #4]
   12afa:	7a1a      	ldrb	r2, [r3, #8]
   12afc:	0792      	lsls	r2, r2, #30
   12afe:	d504      	bpl.n	12b0a <msg_free+0x5e>
		cont_free(msg->payload.ext.next);
   12b00:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   12b02:	4c08      	ldr	r4, [pc, #32]	; (12b24 <msg_free+0x78>)
   12b04:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
   12b06:	9b03      	ldr	r3, [sp, #12]
   12b08:	b92b      	cbnz	r3, 12b16 <msg_free+0x6a>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   12b0a:	4806      	ldr	r0, [pc, #24]	; (12b24 <msg_free+0x78>)
   12b0c:	a901      	add	r1, sp, #4
   12b0e:	f002 fa9d 	bl	1504c <k_mem_slab_free>
}
   12b12:	b005      	add	sp, #20
   12b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
   12b16:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   12b18:	4620      	mov	r0, r4
   12b1a:	a903      	add	r1, sp, #12
   12b1c:	f002 fa96 	bl	1504c <k_mem_slab_free>
		cont = next;
   12b20:	9503      	str	r5, [sp, #12]
   12b22:	e7f0      	b.n	12b06 <msg_free+0x5a>
   12b24:	20021594 	.word	0x20021594

00012b28 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
   12b28:	b40e      	push	{r1, r2, r3}
   12b2a:	b503      	push	{r0, r1, lr}
   12b2c:	ab03      	add	r3, sp, #12
   12b2e:	f853 2b04 	ldr.w	r2, [r3], #4
   12b32:	4601      	mov	r1, r0
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
   12b34:	4804      	ldr	r0, [pc, #16]	; (12b48 <print_formatted+0x20>)
	va_start(args, fmt);
   12b36:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
   12b38:	f7ff fb08 	bl	1214c <z_vprintk>
#endif
	va_end(args);

	return length;
}
   12b3c:	2000      	movs	r0, #0
   12b3e:	b002      	add	sp, #8
   12b40:	f85d eb04 	ldr.w	lr, [sp], #4
   12b44:	b003      	add	sp, #12
   12b46:	4770      	bx	lr
   12b48:	00026c11 	.word	0x00026c11

00012b4c <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
   12b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
   12b50:	f011 0402 	ands.w	r4, r1, #2
{
   12b54:	b085      	sub	sp, #20
   12b56:	4606      	mov	r6, r0
   12b58:	4690      	mov	r8, r2
   12b5a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   12b5e:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   12b62:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
   12b66:	d007      	beq.n	12b78 <prefix_print+0x2c>
	if (!format) {
   12b68:	f011 0f44 	tst.w	r1, #68	; 0x44
   12b6c:	d137      	bne.n	12bde <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
   12b6e:	461a      	mov	r2, r3
   12b70:	4932      	ldr	r1, [pc, #200]	; (12c3c <prefix_print+0xf0>)
   12b72:	f7ff ffd9 	bl	12b28 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
   12b76:	4604      	mov	r4, r0
	if (color) {
   12b78:	f1b9 0f00 	cmp.w	r9, #0
   12b7c:	d00a      	beq.n	12b94 <prefix_print+0x48>
		const char *color = start && (colors[level] != NULL) ?
   12b7e:	4b30      	ldr	r3, [pc, #192]	; (12c40 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
   12b80:	4630      	mov	r0, r6
		const char *color = start && (colors[level] != NULL) ?
   12b82:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
   12b86:	4b2f      	ldr	r3, [pc, #188]	; (12c44 <prefix_print+0xf8>)
   12b88:	492f      	ldr	r1, [pc, #188]	; (12c48 <prefix_print+0xfc>)
   12b8a:	2a00      	cmp	r2, #0
   12b8c:	bf08      	it	eq
   12b8e:	461a      	moveq	r2, r3
   12b90:	f7ff ffca 	bl	12b28 <print_formatted>
	if (level_on) {
   12b94:	b13d      	cbz	r5, 12ba6 <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
   12b96:	4b2d      	ldr	r3, [pc, #180]	; (12c4c <prefix_print+0x100>)
   12b98:	4630      	mov	r0, r6
   12b9a:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
   12b9e:	492c      	ldr	r1, [pc, #176]	; (12c50 <prefix_print+0x104>)
   12ba0:	f7ff ffc2 	bl	12b28 <print_formatted>
   12ba4:	4605      	mov	r5, r0
	total += print_formatted(log_output,
   12ba6:	f1b8 0f00 	cmp.w	r8, #0
   12baa:	d044      	beq.n	12c36 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   12bac:	2301      	movs	r3, #1
   12bae:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
   12bb2:	4b28      	ldr	r3, [pc, #160]	; (12c54 <prefix_print+0x108>)
   12bb4:	f017 0f10 	tst.w	r7, #16
   12bb8:	4f27      	ldr	r7, [pc, #156]	; (12c58 <prefix_print+0x10c>)
   12bba:	bf18      	it	ne
   12bbc:	461f      	movne	r7, r3
   12bbe:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
   12bc2:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   12bc6:	f7ff fd2d 	bl	12624 <log_source_name_get>
   12bca:	4639      	mov	r1, r7
   12bcc:	4602      	mov	r2, r0
   12bce:	4630      	mov	r0, r6
   12bd0:	f7ff ffaa 	bl	12b28 <print_formatted>
   12bd4:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
   12bd6:	4420      	add	r0, r4
   12bd8:	b005      	add	sp, #20
   12bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
   12bde:	4a1f      	ldr	r2, [pc, #124]	; (12c5c <prefix_print+0x110>)
   12be0:	6811      	ldr	r1, [r2, #0]
   12be2:	b331      	cbz	r1, 12c32 <prefix_print+0xe6>
		timestamp /= timestamp_div;
   12be4:	4a1e      	ldr	r2, [pc, #120]	; (12c60 <prefix_print+0x114>)
   12be6:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   12bea:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
   12bec:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
   12bf0:	fbb3 f3f4 	udiv	r3, r3, r4
		seconds = timestamp / freq;
   12bf4:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
   12bf8:	fbb4 f2fe 	udiv	r2, r4, lr
   12bfc:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
   12c00:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
   12c04:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   12c08:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
   12c0c:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   12c10:	fb01 441b 	mls	r4, r1, fp, r4
   12c14:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
   12c18:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   12c1c:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
   12c20:	e9cd b101 	strd	fp, r1, [sp, #4]
   12c24:	fb0a e113 	mls	r1, sl, r3, lr
   12c28:	9100      	str	r1, [sp, #0]
   12c2a:	490e      	ldr	r1, [pc, #56]	; (12c64 <prefix_print+0x118>)
   12c2c:	f7ff ff7c 	bl	12b28 <print_formatted>
   12c30:	e7a1      	b.n	12b76 <prefix_print+0x2a>
		length = 0;
   12c32:	4608      	mov	r0, r1
   12c34:	e79f      	b.n	12b76 <prefix_print+0x2a>
	total += print_formatted(log_output,
   12c36:	4f08      	ldr	r7, [pc, #32]	; (12c58 <prefix_print+0x10c>)
   12c38:	e7c1      	b.n	12bbe <prefix_print+0x72>
   12c3a:	bf00      	nop
   12c3c:	000338b9 	.word	0x000338b9
   12c40:	00032dfc 	.word	0x00032dfc
   12c44:	000338af 	.word	0x000338af
   12c48:	00033e14 	.word	0x00033e14
   12c4c:	00032e10 	.word	0x00032e10
   12c50:	000338de 	.word	0x000338de
   12c54:	00034a52 	.word	0x00034a52
   12c58:	000338b4 	.word	0x000338b4
   12c5c:	200215b0 	.word	0x200215b0
   12c60:	200215b4 	.word	0x200215b4
   12c64:	000338c2 	.word	0x000338c2

00012c68 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
   12c68:	b538      	push	{r3, r4, r5, lr}
   12c6a:	460c      	mov	r4, r1
	if (color) {
   12c6c:	07e1      	lsls	r1, r4, #31
{
   12c6e:	4605      	mov	r5, r0
	if (color) {
   12c70:	d503      	bpl.n	12c7a <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
   12c72:	4a08      	ldr	r2, [pc, #32]	; (12c94 <postfix_print+0x2c>)
   12c74:	4908      	ldr	r1, [pc, #32]	; (12c98 <postfix_print+0x30>)
   12c76:	f7ff ff57 	bl	12b28 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   12c7a:	06e2      	lsls	r2, r4, #27
   12c7c:	d408      	bmi.n	12c90 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   12c7e:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   12c80:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
   12c82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
   12c86:	bf4c      	ite	mi
   12c88:	4904      	ldrmi	r1, [pc, #16]	; (12c9c <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   12c8a:	4905      	ldrpl	r1, [pc, #20]	; (12ca0 <postfix_print+0x38>)
   12c8c:	f7ff bf4c 	b.w	12b28 <print_formatted>
}
   12c90:	bd38      	pop	{r3, r4, r5, pc}
   12c92:	bf00      	nop
   12c94:	000338af 	.word	0x000338af
   12c98:	00033e14 	.word	0x00033e14
   12c9c:	00033f2c 	.word	0x00033f2c
   12ca0:	00033f2b 	.word	0x00033f2b

00012ca4 <hexdump_line_print>:
{
   12ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12ca8:	461d      	mov	r5, r3
   12caa:	9b08      	ldr	r3, [sp, #32]
   12cac:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   12cae:	06da      	lsls	r2, r3, #27
{
   12cb0:	4604      	mov	r4, r0
   12cb2:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   12cb4:	d405      	bmi.n	12cc2 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   12cb6:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   12cb8:	bf4c      	ite	mi
   12cba:	492b      	ldrmi	r1, [pc, #172]	; (12d68 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
   12cbc:	492b      	ldrpl	r1, [pc, #172]	; (12d6c <hexdump_line_print+0xc8>)
   12cbe:	f7ff ff33 	bl	12b28 <print_formatted>
{
   12cc2:	f04f 0800 	mov.w	r8, #0
		print_formatted(log_output, " ");
   12cc6:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 12d74 <hexdump_line_print+0xd0>
	for (int i = 0; i < prefix_offset; i++) {
   12cca:	45a8      	cmp	r8, r5
   12ccc:	db2d      	blt.n	12d2a <hexdump_line_print+0x86>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12cce:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
   12cd0:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 12d78 <hexdump_line_print+0xd4>
			print_formatted(log_output, "%02x ", data[i]);
   12cd4:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 12d7c <hexdump_line_print+0xd8>
			print_formatted(log_output, " ");
   12cd8:	f8df a098 	ldr.w	sl, [pc, #152]	; 12d74 <hexdump_line_print+0xd0>
		if (i < length) {
   12cdc:	42bd      	cmp	r5, r7
   12cde:	d232      	bcs.n	12d46 <hexdump_line_print+0xa2>
			print_formatted(log_output, "%02x ", data[i]);
   12ce0:	4649      	mov	r1, r9
   12ce2:	4620      	mov	r0, r4
   12ce4:	5d72      	ldrb	r2, [r6, r5]
   12ce6:	f7ff ff1f 	bl	12b28 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12cea:	3501      	adds	r5, #1
   12cec:	2d10      	cmp	r5, #16
   12cee:	d123      	bne.n	12d38 <hexdump_line_print+0x94>
	print_formatted(log_output, "|");
   12cf0:	4620      	mov	r0, r4
   12cf2:	491f      	ldr	r1, [pc, #124]	; (12d70 <hexdump_line_print+0xcc>)
   12cf4:	f7ff ff18 	bl	12b28 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12cf8:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
   12cfa:	f8df 8078 	ldr.w	r8, [pc, #120]	; 12d74 <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
   12cfe:	f8df 9080 	ldr.w	r9, [pc, #128]	; 12d80 <hexdump_line_print+0xdc>
			print_formatted(log_output, "%c",
   12d02:	f8df a080 	ldr.w	sl, [pc, #128]	; 12d84 <hexdump_line_print+0xe0>
		if (i < length) {
   12d06:	42af      	cmp	r7, r5
   12d08:	d929      	bls.n	12d5e <hexdump_line_print+0xba>
			char c = (char)data[i];
   12d0a:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
   12d0c:	4651      	mov	r1, sl
   12d0e:	f812 3009 	ldrb.w	r3, [r2, r9]
   12d12:	4620      	mov	r0, r4
   12d14:	f013 0f97 	tst.w	r3, #151	; 0x97
   12d18:	bf08      	it	eq
   12d1a:	222e      	moveq	r2, #46	; 0x2e
   12d1c:	f7ff ff04 	bl	12b28 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12d20:	3501      	adds	r5, #1
   12d22:	2d10      	cmp	r5, #16
   12d24:	d114      	bne.n	12d50 <hexdump_line_print+0xac>
}
   12d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
   12d2a:	4649      	mov	r1, r9
   12d2c:	4620      	mov	r0, r4
   12d2e:	f7ff fefb 	bl	12b28 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   12d32:	f108 0801 	add.w	r8, r8, #1
   12d36:	e7c8      	b.n	12cca <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
   12d38:	076a      	lsls	r2, r5, #29
   12d3a:	d1cf      	bne.n	12cdc <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
   12d3c:	4651      	mov	r1, sl
   12d3e:	4620      	mov	r0, r4
   12d40:	f7ff fef2 	bl	12b28 <print_formatted>
   12d44:	e7ca      	b.n	12cdc <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
   12d46:	4641      	mov	r1, r8
   12d48:	4620      	mov	r0, r4
   12d4a:	f7ff feed 	bl	12b28 <print_formatted>
   12d4e:	e7cc      	b.n	12cea <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
   12d50:	076b      	lsls	r3, r5, #29
   12d52:	d1d8      	bne.n	12d06 <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
   12d54:	4641      	mov	r1, r8
   12d56:	4620      	mov	r0, r4
   12d58:	f7ff fee6 	bl	12b28 <print_formatted>
   12d5c:	e7d3      	b.n	12d06 <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
   12d5e:	4641      	mov	r1, r8
   12d60:	4620      	mov	r0, r4
   12d62:	f7ff fee1 	bl	12b28 <print_formatted>
   12d66:	e7db      	b.n	12d20 <hexdump_line_print+0x7c>
   12d68:	00033f2c 	.word	0x00033f2c
   12d6c:	00033f2b 	.word	0x00033f2b
   12d70:	00037410 	.word	0x00037410
   12d74:	0003697a 	.word	0x0003697a
   12d78:	000338ea 	.word	0x000338ea
   12d7c:	000338e4 	.word	0x000338e4
   12d80:	00037575 	.word	0x00037575
   12d84:	000338ee 	.word	0x000338ee

00012d88 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    u32_t flags)
{
   12d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
   12d8c:	7a8b      	ldrb	r3, [r1, #10]
   12d8e:	4617      	mov	r7, r2
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   12d90:	f013 0807 	ands.w	r8, r3, #7
{
   12d94:	4605      	mov	r5, r0
   12d96:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   12d98:	7a0a      	ldrb	r2, [r1, #8]
   12d9a:	b08a      	sub	sp, #40	; 0x28
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   12d9c:	d020      	beq.n	12de0 <log_output_msg_process+0x58>
   12d9e:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
   12da0:	8949      	ldrh	r1, [r1, #10]
   12da2:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   12da6:	0989      	lsrs	r1, r1, #6
   12da8:	e9cd 8300 	strd	r8, r3, [sp]
   12dac:	9102      	str	r1, [sp, #8]
   12dae:	68f3      	ldr	r3, [r6, #12]
   12db0:	4639      	mov	r1, r7
   12db2:	f002 0201 	and.w	r2, r2, #1
   12db6:	f7ff fec9 	bl	12b4c <prefix_print>
   12dba:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   12dbc:	7a34      	ldrb	r4, [r6, #8]
   12dbe:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
   12dc0:	f014 0401 	ands.w	r4, r4, #1
   12dc4:	d00e      	beq.n	12de4 <log_output_msg_process+0x5c>
		std_print(msg, log_output);
   12dc6:	4629      	mov	r1, r5
   12dc8:	4630      	mov	r0, r6
   12dca:	f013 fdb7 	bl	2693c <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
   12dce:	f1b8 0f00 	cmp.w	r8, #0
   12dd2:	d02b      	beq.n	12e2c <log_output_msg_process+0xa4>
		postfix_print(log_output, flags, level);
   12dd4:	4642      	mov	r2, r8
   12dd6:	4639      	mov	r1, r7
   12dd8:	4628      	mov	r0, r5
   12dda:	f7ff ff45 	bl	12c68 <postfix_print>
   12dde:	e025      	b.n	12e2c <log_output_msg_process+0xa4>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   12de0:	46c1      	mov	r9, r8
   12de2:	e7eb      	b.n	12dbc <log_output_msg_process+0x34>
	} else if (raw_string) {
   12de4:	f1b8 0f00 	cmp.w	r8, #0
   12de8:	d126      	bne.n	12e38 <log_output_msg_process+0xb0>
	size_t offset = 0;
   12dea:	4627      	mov	r7, r4
		length = log_output->size;
   12dec:	68eb      	ldr	r3, [r5, #12]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
   12dee:	aa06      	add	r2, sp, #24
		length = log_output->size;
   12df0:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
   12df2:	4630      	mov	r0, r6
   12df4:	463b      	mov	r3, r7
   12df6:	68a9      	ldr	r1, [r5, #8]
   12df8:	f013 fd8c 	bl	26914 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
   12dfc:	9a06      	ldr	r2, [sp, #24]
   12dfe:	686b      	ldr	r3, [r5, #4]
   12e00:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   12e02:	b13a      	cbz	r2, 12e14 <log_output_msg_process+0x8c>
			eol = (log_output->buf[length - 1] == '\n');
   12e04:	68ab      	ldr	r3, [r5, #8]
   12e06:	4413      	add	r3, r2
   12e08:	f813 4c01 	ldrb.w	r4, [r3, #-1]
   12e0c:	f1a4 030a 	sub.w	r3, r4, #10
   12e10:	425c      	negs	r4, r3
   12e12:	415c      	adcs	r4, r3
		log_output_flush(log_output);
   12e14:	4628      	mov	r0, r5
   12e16:	f013 feee 	bl	26bf6 <log_output_flush>
		offset += length;
   12e1a:	9b06      	ldr	r3, [sp, #24]
   12e1c:	441f      	add	r7, r3
	} while (length > 0);
   12e1e:	2b00      	cmp	r3, #0
   12e20:	d1e4      	bne.n	12dec <log_output_msg_process+0x64>
	if (eol) {
   12e22:	b11c      	cbz	r4, 12e2c <log_output_msg_process+0xa4>
		print_formatted(log_output, "\r");
   12e24:	4628      	mov	r0, r5
   12e26:	4913      	ldr	r1, [pc, #76]	; (12e74 <log_output_msg_process+0xec>)
   12e28:	f7ff fe7e 	bl	12b28 <print_formatted>
	}

	log_output_flush(log_output);
   12e2c:	4628      	mov	r0, r5
   12e2e:	f013 fee2 	bl	26bf6 <log_output_flush>
}
   12e32:	b00a      	add	sp, #40	; 0x28
   12e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
   12e38:	4630      	mov	r0, r6
   12e3a:	f013 fd17 	bl	2686c <log_msg_str_get>
   12e3e:	490e      	ldr	r1, [pc, #56]	; (12e78 <log_output_msg_process+0xf0>)
   12e40:	4602      	mov	r2, r0
   12e42:	4628      	mov	r0, r5
   12e44:	f7ff fe70 	bl	12b28 <print_formatted>
		length = sizeof(buf);
   12e48:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   12e4c:	aa05      	add	r2, sp, #20
   12e4e:	4623      	mov	r3, r4
   12e50:	4630      	mov	r0, r6
   12e52:	a906      	add	r1, sp, #24
		length = sizeof(buf);
   12e54:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   12e58:	f013 fd5c 	bl	26914 <log_msg_hexdump_data_get>
		if (length) {
   12e5c:	9a05      	ldr	r2, [sp, #20]
   12e5e:	2a00      	cmp	r2, #0
   12e60:	d0b8      	beq.n	12dd4 <log_output_msg_process+0x4c>
			hexdump_line_print(log_output, buf, length,
   12e62:	464b      	mov	r3, r9
   12e64:	4628      	mov	r0, r5
   12e66:	9700      	str	r7, [sp, #0]
   12e68:	a906      	add	r1, sp, #24
   12e6a:	f7ff ff1b 	bl	12ca4 <hexdump_line_print>
			offset += length;
   12e6e:	9b05      	ldr	r3, [sp, #20]
   12e70:	441c      	add	r4, r3
		length = sizeof(buf);
   12e72:	e7eb      	b.n	12e4c <log_output_msg_process+0xc4>
   12e74:	000338f1 	.word	0x000338f1
   12e78:	00033e14 	.word	0x00033e14

00012e7c <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, u32_t cnt)
{
   12e7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
	struct device *dev = (struct device *)log_output->control_block->ctx;
   12e7e:	e9d0 4300 	ldrd	r4, r3, [r0]
   12e82:	685d      	ldr	r5, [r3, #4]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   12e84:	f242 730f 	movw	r3, #9999	; 0x270f
   12e88:	428b      	cmp	r3, r1
   12e8a:	bf28      	it	cs
   12e8c:	460b      	movcs	r3, r1
   12e8e:	4668      	mov	r0, sp
   12e90:	2105      	movs	r1, #5
   12e92:	4a0c      	ldr	r2, [pc, #48]	; (12ec4 <log_output_dropped_process+0x48>)
   12e94:	f013 fae9 	bl	2646a <snprintk>
   12e98:	4606      	mov	r6, r0

	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
   12e9a:	462b      	mov	r3, r5
   12e9c:	4620      	mov	r0, r4
   12e9e:	220b      	movs	r2, #11
   12ea0:	4909      	ldr	r1, [pc, #36]	; (12ec8 <log_output_dropped_process+0x4c>)
   12ea2:	f013 fd3e 	bl	26922 <buffer_write>
	buffer_write(outf, buf, len, dev);
   12ea6:	462b      	mov	r3, r5
   12ea8:	4632      	mov	r2, r6
   12eaa:	4669      	mov	r1, sp
   12eac:	4620      	mov	r0, r4
   12eae:	f013 fd38 	bl	26922 <buffer_write>
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
   12eb2:	462b      	mov	r3, r5
   12eb4:	221b      	movs	r2, #27
   12eb6:	4620      	mov	r0, r4
   12eb8:	4904      	ldr	r1, [pc, #16]	; (12ecc <log_output_dropped_process+0x50>)
   12eba:	f013 fd32 	bl	26922 <buffer_write>
}
   12ebe:	b002      	add	sp, #8
   12ec0:	bd70      	pop	{r4, r5, r6, pc}
   12ec2:	bf00      	nop
   12ec4:	00036b22 	.word	0x00036b22
   12ec8:	0003392f 	.word	0x0003392f
   12ecc:	00033913 	.word	0x00033913

00012ed0 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
   12ed0:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   12ed2:	2100      	movs	r1, #0
	timestamp_div = 1U;
   12ed4:	4a07      	ldr	r2, [pc, #28]	; (12ef4 <log_output_timestamp_freq_set+0x24>)
{
   12ed6:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
   12ed8:	4c07      	ldr	r4, [pc, #28]	; (12ef8 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   12eda:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   12edc:	42a0      	cmp	r0, r4
   12ede:	d804      	bhi.n	12eea <log_output_timestamp_freq_set+0x1a>
   12ee0:	b101      	cbz	r1, 12ee4 <log_output_timestamp_freq_set+0x14>
   12ee2:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   12ee4:	4b05      	ldr	r3, [pc, #20]	; (12efc <log_output_timestamp_freq_set+0x2c>)
   12ee6:	6018      	str	r0, [r3, #0]
}
   12ee8:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
   12eea:	2101      	movs	r1, #1
		frequency /= 2U;
   12eec:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   12eee:	005b      	lsls	r3, r3, #1
   12ef0:	e7f4      	b.n	12edc <log_output_timestamp_freq_set+0xc>
   12ef2:	bf00      	nop
   12ef4:	200215b4 	.word	0x200215b4
   12ef8:	000f4240 	.word	0x000f4240
   12efc:	200215b0 	.word	0x200215b0

00012f00 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   12f00:	2201      	movs	r2, #1
   12f02:	4b01      	ldr	r3, [pc, #4]	; (12f08 <log_backend_rtt_init+0x8>)
   12f04:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   12f06:	4770      	bx	lr
   12f08:	20026d0e 	.word	0x20026d0e

00012f0c <panic>:

static void panic(struct log_backend const *const backend)
{
   12f0c:	b508      	push	{r3, lr}
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
   12f0e:	4803      	ldr	r0, [pc, #12]	; (12f1c <panic+0x10>)
   12f10:	f013 fe71 	bl	26bf6 <log_output_flush>
	log_backend_std_panic(&log_output);
	panic_mode = true;
   12f14:	2201      	movs	r2, #1
   12f16:	4b02      	ldr	r3, [pc, #8]	; (12f20 <panic+0x14>)
   12f18:	701a      	strb	r2, [r3, #0]
}
   12f1a:	bd08      	pop	{r3, pc}
   12f1c:	00032e3c 	.word	0x00032e3c
   12f20:	20026d0f 	.word	0x20026d0f

00012f24 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, u32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
   12f24:	4801      	ldr	r0, [pc, #4]	; (12f2c <dropped+0x8>)
   12f26:	f7ff bfa9 	b.w	12e7c <log_output_dropped_process>
   12f2a:	bf00      	nop
   12f2c:	00032e3c 	.word	0x00032e3c

00012f30 <put>:
{
   12f30:	b510      	push	{r4, lr}
   12f32:	460c      	mov	r4, r1
	log_msg_get(msg);
   12f34:	4608      	mov	r0, r1
   12f36:	f013 fc5f 	bl	267f8 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
   12f3a:	4621      	mov	r1, r4
   12f3c:	4804      	ldr	r0, [pc, #16]	; (12f50 <put+0x20>)
   12f3e:	220f      	movs	r2, #15
   12f40:	f7ff ff22 	bl	12d88 <log_output_msg_process>
	log_msg_put(msg);
   12f44:	4620      	mov	r0, r4
}
   12f46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12f4a:	f013 bc80 	b.w	2684e <log_msg_put>
   12f4e:	bf00      	nop
   12f50:	00032e3c 	.word	0x00032e3c

00012f54 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   12f54:	4b05      	ldr	r3, [pc, #20]	; (12f6c <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
   12f56:	781b      	ldrb	r3, [r3, #0]
   12f58:	b11b      	cbz	r3, 12f62 <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
   12f5a:	f241 3088 	movw	r0, #5000	; 0x1388
   12f5e:	f014 b98f 	b.w	27280 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
   12f62:	20a4      	movs	r0, #164	; 0xa4
   12f64:	2100      	movs	r1, #0
   12f66:	f002 bc83 	b.w	15870 <z_impl_k_sleep>
   12f6a:	bf00      	nop
   12f6c:	20026d0f 	.word	0x20026d0f

00012f70 <data_out_block_mode>:
{
   12f70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   12f74:	f8df 9090 	ldr.w	r9, [pc, #144]	; 13008 <data_out_block_mode+0x98>
{
   12f78:	4607      	mov	r7, r0
   12f7a:	460e      	mov	r6, r1
	int retry_cnt = CONFIG_LOG_BACKEND_RTT_RETRY_CNT;
   12f7c:	2404      	movs	r4, #4
   12f7e:	46ca      	mov	sl, r9
	return z_impl_k_mutex_lock(mutex, timeout);
   12f80:	f8df b088 	ldr.w	fp, [pc, #136]	; 1300c <data_out_block_mode+0x9c>
		if (!is_sync_mode()) {
   12f84:	f899 3000 	ldrb.w	r3, [r9]
   12f88:	b933      	cbnz	r3, 12f98 <data_out_block_mode+0x28>
   12f8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12f8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12f92:	4658      	mov	r0, fp
   12f94:	f002 f884 	bl	150a0 <z_impl_k_mutex_lock>
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   12f98:	4632      	mov	r2, r6
   12f9a:	4639      	mov	r1, r7
   12f9c:	2000      	movs	r0, #0
   12f9e:	f000 fa8d 	bl	134bc <SEGGER_RTT_WriteSkipNoLock>
		if (!is_sync_mode()) {
   12fa2:	f89a 3000 	ldrb.w	r3, [sl]
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   12fa6:	4680      	mov	r8, r0
		if (!is_sync_mode()) {
   12fa8:	b913      	cbnz	r3, 12fb0 <data_out_block_mode+0x40>
	return z_impl_k_mutex_unlock(mutex);
   12faa:	4658      	mov	r0, fp
   12fac:	f002 f8f0 	bl	15190 <z_impl_k_mutex_unlock>
		if (ret) {
   12fb0:	4d14      	ldr	r5, [pc, #80]	; (13004 <data_out_block_mode+0x94>)
   12fb2:	f1b8 0f00 	cmp.w	r8, #0
   12fb6:	d018      	beq.n	12fea <data_out_block_mode+0x7a>
	host_present = true;
   12fb8:	2301      	movs	r3, #1
   12fba:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
   12fbc:	f89a 3000 	ldrb.w	r3, [sl]
   12fc0:	b933      	cbnz	r3, 12fd0 <data_out_block_mode+0x60>
}
   12fc2:	4630      	mov	r0, r6
   12fc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (retry_cnt == 0) {
   12fc8:	b95c      	cbnz	r4, 12fe2 <data_out_block_mode+0x72>
		host_present = false;
   12fca:	702c      	strb	r4, [r5, #0]
   12fcc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   12fd0:	2000      	movs	r0, #0
   12fd2:	f000 faf3 	bl	135bc <SEGGER_RTT_HasDataUp>
   12fd6:	2800      	cmp	r0, #0
   12fd8:	d0f3      	beq.n	12fc2 <data_out_block_mode+0x52>
   12fda:	782b      	ldrb	r3, [r5, #0]
   12fdc:	2b00      	cmp	r3, #0
   12fde:	d1f3      	bne.n	12fc8 <data_out_block_mode+0x58>
   12fe0:	e7ef      	b.n	12fc2 <data_out_block_mode+0x52>
			on_failed_write(retry_cnt--);
   12fe2:	3c01      	subs	r4, #1
   12fe4:	f7ff ffb6 	bl	12f54 <on_failed_write.part.0>
   12fe8:	e7f2      	b.n	12fd0 <data_out_block_mode+0x60>
		} else if (host_present) {
   12fea:	782b      	ldrb	r3, [r5, #0]
   12fec:	b113      	cbz	r3, 12ff4 <data_out_block_mode+0x84>
	if (retry_cnt == 0) {
   12fee:	3c01      	subs	r4, #1
   12ff0:	d104      	bne.n	12ffc <data_out_block_mode+0x8c>
		host_present = false;
   12ff2:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
   12ff4:	782b      	ldrb	r3, [r5, #0]
   12ff6:	2b00      	cmp	r3, #0
   12ff8:	d1c4      	bne.n	12f84 <data_out_block_mode+0x14>
   12ffa:	e7e2      	b.n	12fc2 <data_out_block_mode+0x52>
   12ffc:	f7ff ffaa 	bl	12f54 <on_failed_write.part.0>
   13000:	e7f8      	b.n	12ff4 <data_out_block_mode+0x84>
   13002:	bf00      	nop
   13004:	20026d0e 	.word	0x20026d0e
   13008:	20026d0f 	.word	0x20026d0f
   1300c:	2002016c 	.word	0x2002016c

00013010 <__do_init_array_aux>:
 * @brief Execute initialization routines referenced in .init_array section
 *
 * @return N/A
 */
void __do_init_array_aux(void)
{
   13010:	b538      	push	{r3, r4, r5, lr}
	for (func_ptr *func = __init_array_start;
   13012:	4c04      	ldr	r4, [pc, #16]	; (13024 <__do_init_array_aux+0x14>)
   13014:	4d04      	ldr	r5, [pc, #16]	; (13028 <__do_init_array_aux+0x18>)
   13016:	42ac      	cmp	r4, r5
   13018:	d300      	bcc.n	1301c <__do_init_array_aux+0xc>
		func < __init_array_end;
		func++) {
		(*func)();
	}
}
   1301a:	bd38      	pop	{r3, r4, r5, pc}
		(*func)();
   1301c:	f854 3b04 	ldr.w	r3, [r4], #4
   13020:	4798      	blx	r3
		func++) {
   13022:	e7f8      	b.n	13016 <__do_init_array_aux+0x6>
   13024:	000317c4 	.word	0x000317c4
   13028:	000317c8 	.word	0x000317c8

0001302c <__do_global_ctors_aux>:
 *
 * This routine is invoked by the kernel prior to the execution of the
 * application's main().
 */
void __do_global_ctors_aux(void)
{
   1302c:	b538      	push	{r3, r4, r5, lr}
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
   1302e:	4c05      	ldr	r4, [pc, #20]	; (13044 <__do_global_ctors_aux+0x18>)
   13030:	6825      	ldr	r5, [r4, #0]

	while (nCtors >= 1U) {
   13032:	eb04 0485 	add.w	r4, r4, r5, lsl #2
   13036:	b905      	cbnz	r5, 1303a <__do_global_ctors_aux+0xe>
		__CTOR_LIST__[nCtors--]();
	}
}
   13038:	bd38      	pop	{r3, r4, r5, pc}
		__CTOR_LIST__[nCtors--]();
   1303a:	f854 3904 	ldr.w	r3, [r4], #-4
   1303e:	3d01      	subs	r5, #1
   13040:	4798      	blx	r3
   13042:	e7f8      	b.n	13036 <__do_global_ctors_aux+0xa>
   13044:	000317bc 	.word	0x000317bc

00013048 <rtt_console_init>:

	return character;
}

static int rtt_console_init(struct device *d)
{
   13048:	b508      	push	{r3, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
   1304a:	4804      	ldr	r0, [pc, #16]	; (1305c <rtt_console_init+0x14>)
   1304c:	f7ff f878 	bl	12140 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
   13050:	4802      	ldr	r0, [pc, #8]	; (1305c <rtt_console_init+0x14>)
   13052:	f001 f84f 	bl	140f4 <__stdout_hook_install>

	return 0;
}
   13056:	2000      	movs	r0, #0
   13058:	bd08      	pop	{r3, pc}
   1305a:	bf00      	nop
   1305c:	00013061 	.word	0x00013061

00013060 <rtt_console_out>:
{
   13060:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   13064:	4604      	mov	r4, r0
	char c = (char)character;
   13066:	2503      	movs	r5, #3
	return z_impl_k_mutex_lock(mutex, timeout);
   13068:	f8df 805c 	ldr.w	r8, [pc, #92]	; 130c8 <rtt_console_out+0x68>
   1306c:	4e15      	ldr	r6, [pc, #84]	; (130c4 <rtt_console_out+0x64>)
   1306e:	f88d 0007 	strb.w	r0, [sp, #7]
   13072:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13076:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1307a:	4640      	mov	r0, r8
   1307c:	f002 f810 	bl	150a0 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   13080:	2201      	movs	r2, #1
   13082:	f10d 0107 	add.w	r1, sp, #7
   13086:	2000      	movs	r0, #0
   13088:	f000 fa64 	bl	13554 <SEGGER_RTT_WriteNoLock>
   1308c:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
   1308e:	4640      	mov	r0, r8
   13090:	f002 f87e 	bl	15190 <z_impl_k_mutex_unlock>
		if (cnt) {
   13094:	b12f      	cbz	r7, 130a2 <rtt_console_out+0x42>
			host_present = true;
   13096:	2301      	movs	r3, #1
   13098:	7033      	strb	r3, [r6, #0]
}
   1309a:	4620      	mov	r0, r4
   1309c:	b002      	add	sp, #8
   1309e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
   130a2:	7833      	ldrb	r3, [r6, #0]
   130a4:	2b00      	cmp	r3, #0
   130a6:	d0f8      	beq.n	1309a <rtt_console_out+0x3a>
			if (max_cnt) {
   130a8:	3d01      	subs	r5, #1
   130aa:	d008      	beq.n	130be <rtt_console_out+0x5e>
	if (k_is_in_isr()) {
   130ac:	f014 f8e2 	bl	27274 <k_is_in_isr>
   130b0:	2800      	cmp	r0, #0
   130b2:	d1de      	bne.n	13072 <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
   130b4:	2100      	movs	r1, #0
   130b6:	2042      	movs	r0, #66	; 0x42
   130b8:	f002 fbda 	bl	15870 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline s32_t k_msleep(s32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
   130bc:	e7d9      	b.n	13072 <rtt_console_out+0x12>
				host_present = false;
   130be:	7035      	strb	r5, [r6, #0]
   130c0:	e7eb      	b.n	1309a <rtt_console_out+0x3a>
   130c2:	bf00      	nop
   130c4:	20026d10 	.word	0x20026d10
   130c8:	2002016c 	.word	0x2002016c

000130cc <clock_async_start>:
}

static int clock_async_start(struct device *dev,
			     clock_control_subsys_t subsys,
			     struct clock_control_async_data *data)
{
   130cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct nrf_clock_control_sub_data *clk_data;
	int key;
	u8_t ref;

	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
	config = get_sub_config(dev, type);
   130d0:	6846      	ldr	r6, [r0, #4]
	clk_data = get_sub_data(dev, type);
   130d2:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   130d6:	b2cf      	uxtb	r7, r1
			((data != NULL) && (data->cb != NULL)));

	/* if node is in the list it means that it is scheduled for
	 * the second time.
	 */
	if ((data != NULL)
   130d8:	b14a      	cbz	r2, 130ee <clock_async_start+0x22>
	sys_snode_t *item = sys_slist_peek_head(list);
   130da:	230c      	movs	r3, #12
   130dc:	437b      	muls	r3, r7
   130de:	f85e 3003 	ldr.w	r3, [lr, r3]
		if (item == node) {
   130e2:	429a      	cmp	r2, r3
   130e4:	d053      	beq.n	1318e <clock_async_start+0xc2>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   130e6:	b113      	cbz	r3, 130ee <clock_async_start+0x22>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   130e8:	681b      	ldr	r3, [r3, #0]
	} while (item);
   130ea:	2b00      	cmp	r3, #0
   130ec:	d1f9      	bne.n	130e2 <clock_async_start+0x16>
	__asm__ volatile(
   130ee:	f04f 0320 	mov.w	r3, #32
   130f2:	f3ef 8c11 	mrs	ip, BASEPRI
   130f6:	f383 8811 	msr	BASEPRI, r3
   130fa:	f3bf 8f6f 	isb	sy
	    && is_in_list(&clk_data->list, &data->node)) {
		return -EBUSY;
	}

	key = irq_lock();
	ref = ++clk_data->ref;
   130fe:	250c      	movs	r5, #12
   13100:	437d      	muls	r5, r7
   13102:	eb0e 0305 	add.w	r3, lr, r5
   13106:	7a1c      	ldrb	r4, [r3, #8]
   13108:	3401      	adds	r4, #1
   1310a:	b2e4      	uxtb	r4, r4
   1310c:	721c      	strb	r4, [r3, #8]
	__asm__ volatile(
   1310e:	f38c 8811 	msr	BASEPRI, ip
   13112:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(clk_data->ref > 0);
	irq_unlock(key);

	if (data) {
   13116:	b352      	cbz	r2, 1316e <clock_async_start+0xa2>
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   13118:	f04f 0803 	mov.w	r8, #3
   1311c:	f8df c078 	ldr.w	ip, [pc, #120]	; 13198 <clock_async_start+0xcc>
   13120:	f8cc 8308 	str.w	r8, [ip, #776]	; 0x308
		bool already_started;

		clock_irqs_disable();
		already_started = clk_data->started;
   13124:	f893 c009 	ldrb.w	ip, [r3, #9]
		if (!already_started) {
   13128:	f1bc 0f00 	cmp.w	ip, #0
   1312c:	d115      	bne.n	1315a <clock_async_start+0x8e>
	__asm__ volatile(
   1312e:	f04f 0820 	mov.w	r8, #32
   13132:	f3ef 8911 	mrs	r9, BASEPRI
   13136:	f388 8811 	msr	BASEPRI, r8
   1313a:	f3bf 8f6f 	isb	sy
	parent->next = child;
   1313e:	f8c2 c000 	str.w	ip, [r2]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   13142:	f8d3 8004 	ldr.w	r8, [r3, #4]
   13146:	f1b8 0f00 	cmp.w	r8, #0
   1314a:	d11c      	bne.n	13186 <clock_async_start+0xba>
	list->tail = node;
   1314c:	605a      	str	r2, [r3, #4]
	list->head = node;
   1314e:	f84e 2005 	str.w	r2, [lr, r5]
	__asm__ volatile(
   13152:	f389 8811 	msr	BASEPRI, r9
   13156:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
   1315a:	2503      	movs	r5, #3
   1315c:	4b0e      	ldr	r3, [pc, #56]	; (13198 <clock_async_start+0xcc>)
   1315e:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
			list_append(&clk_data->list, &data->node);
		}
		clock_irqs_enable();

		if (already_started) {
   13162:	f1bc 0f00 	cmp.w	ip, #0
   13166:	d002      	beq.n	1316e <clock_async_start+0xa2>
			data->cb(dev, subsys, data->user_data);
   13168:	e9d2 3201 	ldrd	r3, r2, [r2, #4]
   1316c:	4798      	blx	r3
		}
	}

	if (ref == 1) {
   1316e:	2c01      	cmp	r4, #1
   13170:	d107      	bne.n	13182 <clock_async_start+0xb6>
		if (IS_ENABLED(CONFIG_NRF52_ANOMALY_132_WORKAROUND) &&
			(subsys == CLOCK_CONTROL_NRF_SUBSYS_LF)) {
			anomaly_132_workaround();
		}

		nrf_clock_task_trigger(NRF_CLOCK, config->start_tsk);
   13172:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_clock_task_trigger(NRF_CLOCK_Type * p_reg, nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13176:	78b3      	ldrb	r3, [r6, #2]
   13178:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1317c:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   13180:	601c      	str	r4, [r3, #0]
	}

	return 0;
   13182:	2000      	movs	r0, #0
   13184:	e005      	b.n	13192 <clock_async_start+0xc6>
	parent->next = child;
   13186:	f8c8 2000 	str.w	r2, [r8]
	list->tail = node;
   1318a:	605a      	str	r2, [r3, #4]
}
   1318c:	e7e1      	b.n	13152 <clock_async_start+0x86>
		return -EBUSY;
   1318e:	f06f 000f 	mvn.w	r0, #15
}
   13192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13196:	bf00      	nop
   13198:	40005000 	.word	0x40005000

0001319c <clk_init>:
 * symbol.
 */
void nrf_power_clock_isr(void *arg);

static int clk_init(struct device *dev)
{
   1319c:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1319e:	2200      	movs	r2, #0
{
   131a0:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   131a2:	2101      	movs	r1, #1
   131a4:	2005      	movs	r0, #5
   131a6:	f000 fa71 	bl	1368c <z_arm_irq_priority_set>
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_IRQN(0));
   131aa:	2005      	movs	r0, #5
   131ac:	f000 fa5e 	bl	1366c <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
   131b0:	2202      	movs	r2, #2
   131b2:	4b07      	ldr	r3, [pc, #28]	; (131d0 <clk_init+0x34>)
	list->head = NULL;
   131b4:	2000      	movs	r0, #0
   131b6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
   131ba:	2203      	movs	r2, #3
   131bc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	clock_irqs_enable();

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		sys_slist_init(&(get_sub_data(dev, i)->list));
   131c0:	68e3      	ldr	r3, [r4, #12]
	list->tail = NULL;
   131c2:	e9c3 0000 	strd	r0, r0, [r3]
   131c6:	68e3      	ldr	r3, [r4, #12]
   131c8:	e9c3 0003 	strd	r0, r0, [r3, #12]
	}

	return 0;
}
   131cc:	bd10      	pop	{r4, pc}
   131ce:	bf00      	nop
   131d0:	40005000 	.word	0x40005000

000131d4 <clkstarted_handle.constprop.0>:
DEVICE_AND_API_INIT(clock_nrf, DT_INST_LABEL(0),
		    clk_init, &data, &config, PRE_KERNEL_1,
		    CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &clock_control_api);

static void clkstarted_handle(struct device *dev,
   131d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
	struct clock_control_async_data *async_data;

	DBG(dev, type, "Clock started");
	sub_data->started = true;
   131d6:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   131d8:	4f11      	ldr	r7, [pc, #68]	; (13220 <clkstarted_handle.constprop.0+0x4c>)
static void clkstarted_handle(struct device *dev,
   131da:	4605      	mov	r5, r0
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   131dc:	68fb      	ldr	r3, [r7, #12]
	sub_data->started = true;
   131de:	fb04 3400 	mla	r4, r4, r0, r3
   131e2:	2301      	movs	r3, #1
   131e4:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
   131e6:	f04f 0320 	mov.w	r3, #32
   131ea:	f3ef 8111 	mrs	r1, BASEPRI
   131ee:	f383 8811 	msr	BASEPRI, r3
   131f2:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   131f6:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   131f8:	b12b      	cbz	r3, 13206 <clkstarted_handle.constprop.0+0x32>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   131fa:	6866      	ldr	r6, [r4, #4]
   131fc:	681a      	ldr	r2, [r3, #0]
   131fe:	42b3      	cmp	r3, r6
	list->head = node;
   13200:	6022      	str	r2, [r4, #0]
	list->tail = node;
   13202:	bf08      	it	eq
   13204:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
   13206:	f381 8811 	msr	BASEPRI, r1
   1320a:	f3bf 8f6f 	isb	sy

	while ((async_data = list_get(&sub_data->list)) != NULL) {
   1320e:	b903      	cbnz	r3, 13212 <clkstarted_handle.constprop.0+0x3e>
		async_data->cb(dev, (clock_control_subsys_t)type,
				async_data->user_data);
	}
}
   13210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		async_data->cb(dev, (clock_control_subsys_t)type,
   13212:	4629      	mov	r1, r5
   13214:	e9d3 6201 	ldrd	r6, r2, [r3, #4]
   13218:	4638      	mov	r0, r7
   1321a:	47b0      	blx	r6
   1321c:	e7e3      	b.n	131e6 <clkstarted_handle.constprop.0+0x12>
   1321e:	bf00      	nop
   13220:	200200c0 	.word	0x200200c0

00013224 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
   13224:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   13226:	4b10      	ldr	r3, [pc, #64]	; (13268 <nrf_power_clock_isr+0x44>)
   13228:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
   1322a:	b162      	cbz	r2, 13246 <nrf_power_clock_isr+0x22>
    return p_reg->INTENSET & mask;
   1322c:	4a0f      	ldr	r2, [pc, #60]	; (1326c <nrf_power_clock_isr+0x48>)
   1322e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
   13232:	07d1      	lsls	r1, r2, #31
   13234:	d507      	bpl.n	13246 <nrf_power_clock_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13236:	2200      	movs	r2, #0
   13238:	601a      	str	r2, [r3, #0]
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1323a:	4b0d      	ldr	r3, [pc, #52]	; (13270 <nrf_power_clock_isr+0x4c>)

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
   1323c:	68db      	ldr	r3, [r3, #12]
   1323e:	7a58      	ldrb	r0, [r3, #9]
   13240:	b908      	cbnz	r0, 13246 <nrf_power_clock_isr+0x22>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   13242:	f7ff ffc7 	bl	131d4 <clkstarted_handle.constprop.0>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   13246:	4b0b      	ldr	r3, [pc, #44]	; (13274 <nrf_power_clock_isr+0x50>)
   13248:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
   1324a:	b15a      	cbz	r2, 13264 <nrf_power_clock_isr+0x40>
    return p_reg->INTENSET & mask;
   1324c:	4a07      	ldr	r2, [pc, #28]	; (1326c <nrf_power_clock_isr+0x48>)
   1324e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
   13252:	0792      	lsls	r2, r2, #30
   13254:	d506      	bpl.n	13264 <nrf_power_clock_isr+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13256:	2200      	movs	r2, #0
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started();
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   13258:	2001      	movs	r0, #1
   1325a:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
   1325c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   13260:	f7ff bfb8 	b.w	131d4 <clkstarted_handle.constprop.0>
}
   13264:	bd08      	pop	{r3, pc}
   13266:	bf00      	nop
   13268:	40005100 	.word	0x40005100
   1326c:	40005000 	.word	0x40005000
   13270:	200200c0 	.word	0x200200c0
   13274:	40005104 	.word	0x40005104

00013278 <handle_next_tick_case>:
 * counter progresses during that time it means that 1 tick elapsed and
 * interrupt is set pending.
 */
static void handle_next_tick_case(u32_t t)
{
	set_comparator(t + 2);
   13278:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   1327a:	4b08      	ldr	r3, [pc, #32]	; (1329c <handle_next_tick_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   1327c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   13280:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   13284:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
   13288:	4290      	cmp	r0, r2
   1328a:	d100      	bne.n	1328e <handle_next_tick_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
   1328c:	4770      	bx	lr
   1328e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
   13292:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   13294:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   13298:	e7f2      	b.n	13280 <handle_next_tick_case+0x8>
   1329a:	bf00      	nop
   1329c:	40015000 	.word	0x40015000

000132a0 <rtc1_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   132a0:	2200      	movs	r2, #0
   132a2:	4b06      	ldr	r3, [pc, #24]	; (132bc <rtc1_nrf_isr+0x1c>)
   132a4:	601a      	str	r2, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	u32_t t = get_comparator();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   132a6:	4a06      	ldr	r2, [pc, #24]	; (132c0 <rtc1_nrf_isr+0x20>)
    return p_reg->CC[ch];
   132a8:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
   132ac:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   132ae:	1ac0      	subs	r0, r0, r3
   132b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   132b4:	4403      	add	r3, r0
   132b6:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_ticks(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
   132b8:	f002 bcb2 	b.w	15c20 <z_clock_announce>
   132bc:	40015140 	.word	0x40015140
   132c0:	200215e8 	.word	0x200215e8

000132c4 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
   132c4:	b538      	push	{r3, r4, r5, lr}
   132c6:	4814      	ldr	r0, [pc, #80]	; (13318 <z_clock_driver_init+0x54>)
   132c8:	f001 fcf6 	bl	14cb8 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_LABEL(DT_INST(0, nordic_nrf_clock)));
	if (!clock) {
   132cc:	b300      	cbz	r0, 13310 <z_clock_driver_init+0x4c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
   132ce:	6883      	ldr	r3, [r0, #8]
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   132d0:	2400      	movs	r4, #0
   132d2:	2101      	movs	r1, #1
   132d4:	681b      	ldr	r3, [r3, #0]
   132d6:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   132d8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   132dc:	4d0f      	ldr	r5, [pc, #60]	; (1331c <z_clock_driver_init+0x58>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   132de:	4b10      	ldr	r3, [pc, #64]	; (13320 <z_clock_driver_init+0x5c>)
    p_reg->PRESCALER = val;
   132e0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   132e4:	601c      	str	r4, [r3, #0]
   132e6:	4b0f      	ldr	r3, [pc, #60]	; (13324 <z_clock_driver_init+0x60>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC1_IRQn);
	int_enable();

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
   132e8:	2101      	movs	r1, #1
   132ea:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
   132ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   132f2:	4622      	mov	r2, r4
   132f4:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   132f8:	2015      	movs	r0, #21
   132fa:	f000 f9c7 	bl	1368c <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
   132fe:	2015      	movs	r0, #21
   13300:	f000 f9b4 	bl	1366c <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   13304:	2301      	movs	r3, #1

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
   13306:	4620      	mov	r0, r4
   13308:	4a07      	ldr	r2, [pc, #28]	; (13328 <z_clock_driver_init+0x64>)
   1330a:	6013      	str	r3, [r2, #0]
   1330c:	602b      	str	r3, [r5, #0]
}
   1330e:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   13310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13314:	e7fb      	b.n	1330e <z_clock_driver_init+0x4a>
   13316:	bf00      	nop
   13318:	00033951 	.word	0x00033951
   1331c:	40015000 	.word	0x40015000
   13320:	40015140 	.word	0x40015140
   13324:	e000e100 	.word	0xe000e100
   13328:	40015008 	.word	0x40015008

0001332c <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
   1332c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     return p_reg->COUNTER;
   1332e:	4b2c      	ldr	r3, [pc, #176]	; (133e0 <z_clock_set_timeout+0xb4>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   13330:	4c2c      	ldr	r4, [pc, #176]	; (133e4 <z_clock_set_timeout+0xb8>)
   13332:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	u32_t unannounced = counter_sub(counter(), last_count);
   13336:	4b2c      	ldr	r3, [pc, #176]	; (133e8 <z_clock_set_timeout+0xbc>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   13338:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1333c:	bf08      	it	eq
   1333e:	4620      	moveq	r0, r4
	u32_t unannounced = counter_sub(counter(), last_count);
   13340:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
   13342:	1a52      	subs	r2, r2, r1
   13344:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
   13348:	0212      	lsls	r2, r2, #8
   1334a:	d436      	bmi.n	133ba <z_clock_set_timeout+0x8e>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
   1334c:	3801      	subs	r0, #1
   1334e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   13352:	42a0      	cmp	r0, r4
   13354:	bfa8      	it	ge
   13356:	4620      	movge	r0, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   13358:	3301      	adds	r3, #1
   1335a:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
   1335c:	42a0      	cmp	r0, r4
   1335e:	bf94      	ite	ls
   13360:	180c      	addls	r4, r1, r0
   13362:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
   13364:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13368:	2700      	movs	r7, #0
    p_reg->INTENCLR = mask;
   1336a:	4b1d      	ldr	r3, [pc, #116]	; (133e0 <z_clock_set_timeout+0xb4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1336c:	4e1f      	ldr	r6, [pc, #124]	; (133ec <z_clock_set_timeout+0xc0>)
    p_reg->INTENCLR = mask;
   1336e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
     return p_reg->COUNTER;
   13372:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    return p_reg->CC[ch];
   13376:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   1337a:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	return (a - b) & COUNTER_MAX;
   1337e:	1a52      	subs	r2, r2, r1
   13380:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (counter_sub(prev_val, now) == 1) {
   13384:	2a01      	cmp	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13386:	6037      	str	r7, [r6, #0]
    p_reg->CC[ch] = cc_val;
   13388:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1338c:	461d      	mov	r5, r3
   1338e:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
   13392:	d103      	bne.n	1339c <z_clock_set_timeout+0x70>
	z_impl_k_busy_wait(usec_to_wait);
   13394:	200f      	movs	r0, #15
   13396:	f013 ff73 	bl	27280 <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1339a:	6037      	str	r7, [r6, #0]
   1339c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   133a0:	4b13      	ldr	r3, [pc, #76]	; (133f0 <z_clock_set_timeout+0xc4>)
   133a2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
   133a6:	f8d5 0504 	ldr.w	r0, [r5, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   133aa:	1a23      	subs	r3, r4, r0
   133ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
   133b0:	2b01      	cmp	r3, #1
   133b2:	d104      	bne.n	133be <z_clock_set_timeout+0x92>
		handle_next_tick_case(t);
   133b4:	f7ff ff60 	bl	13278 <handle_next_tick_case>
   133b8:	e00b      	b.n	133d2 <z_clock_set_timeout+0xa6>
		ticks = 0;
   133ba:	2000      	movs	r0, #0
   133bc:	e7cc      	b.n	13358 <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   133be:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   133c2:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
     return p_reg->COUNTER;
   133c6:	f8d5 0504 	ldr.w	r0, [r5, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   133ca:	1a24      	subs	r4, r4, r0
   133cc:	3c02      	subs	r4, #2
	if (diff > MAX_TICKS) {
   133ce:	0223      	lsls	r3, r4, #8
   133d0:	d4f0      	bmi.n	133b4 <z_clock_set_timeout+0x88>
    p_reg->INTENSET = mask;
   133d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   133d6:	4b02      	ldr	r3, [pc, #8]	; (133e0 <z_clock_set_timeout+0xb4>)
   133d8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_ticks(cyc);
}
   133dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   133de:	bf00      	nop
   133e0:	40015000 	.word	0x40015000
   133e4:	007fffff 	.word	0x007fffff
   133e8:	200215e8 	.word	0x200215e8
   133ec:	40015140 	.word	0x40015140
   133f0:	e000e100 	.word	0xe000e100

000133f4 <z_clock_elapsed>:
	__asm__ volatile(
   133f4:	f04f 0220 	mov.w	r2, #32
   133f8:	f3ef 8311 	mrs	r3, BASEPRI
   133fc:	f382 8811 	msr	BASEPRI, r2
   13400:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
   13404:	4a06      	ldr	r2, [pc, #24]	; (13420 <z_clock_elapsed+0x2c>)
   13406:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   1340a:	4a06      	ldr	r2, [pc, #24]	; (13424 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
   1340c:	6812      	ldr	r2, [r2, #0]
   1340e:	1a80      	subs	r0, r0, r2
   13410:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
   13414:	f383 8811 	msr	BASEPRI, r3
   13418:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   1341c:	4770      	bx	lr
   1341e:	bf00      	nop
   13420:	40015000 	.word	0x40015000
   13424:	200215e8 	.word	0x200215e8

00013428 <z_timer_cycle_get_32>:
	__asm__ volatile(
   13428:	f04f 0320 	mov.w	r3, #32
   1342c:	f3ef 8211 	mrs	r2, BASEPRI
   13430:	f383 8811 	msr	BASEPRI, r3
   13434:	f3bf 8f6f 	isb	sy

u32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
   13438:	4906      	ldr	r1, [pc, #24]	; (13454 <z_timer_cycle_get_32+0x2c>)
   1343a:	4b07      	ldr	r3, [pc, #28]	; (13458 <z_timer_cycle_get_32+0x30>)
   1343c:	6808      	ldr	r0, [r1, #0]
   1343e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
   13442:	f382 8811 	msr	BASEPRI, r2
   13446:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
   1344a:	1a1b      	subs	r3, r3, r0
   1344c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
   13450:	4418      	add	r0, r3
   13452:	4770      	bx	lr
   13454:	200215e8 	.word	0x200215e8
   13458:	40015000 	.word	0x40015000

0001345c <_DoInit>:
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1345c:	2303      	movs	r3, #3
static void _DoInit(void) {
   1345e:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   13460:	4c10      	ldr	r4, [pc, #64]	; (134a4 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   13462:	4a11      	ldr	r2, [pc, #68]	; (134a8 <_DoInit+0x4c>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   13464:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
   13468:	4b10      	ldr	r3, [pc, #64]	; (134ac <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
   1346a:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1346c:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   1346e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   13472:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   13474:	4a0e      	ldr	r2, [pc, #56]	; (134b0 <_DoInit+0x54>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   13476:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
   13478:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
   1347a:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   1347c:	2210      	movs	r2, #16
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
   1347e:	490d      	ldr	r1, [pc, #52]	; (134b4 <_DoInit+0x58>)
   13480:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
   13482:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   13484:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   13486:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
   13488:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   1348a:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1348c:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   1348e:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
   13490:	f01d fdce 	bl	31030 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
   13494:	4620      	mov	r0, r4
   13496:	4908      	ldr	r1, [pc, #32]	; (134b8 <_DoInit+0x5c>)
   13498:	f01d fdca 	bl	31030 <strcpy>
  p->acID[6] = ' ';
   1349c:	2320      	movs	r3, #32
   1349e:	71a3      	strb	r3, [r4, #6]
}
   134a0:	bd10      	pop	{r4, pc}
   134a2:	bf00      	nop
   134a4:	200215ec 	.word	0x200215ec
   134a8:	0003397b 	.word	0x0003397b
   134ac:	20026d21 	.word	0x20026d21
   134b0:	20026d11 	.word	0x20026d11
   134b4:	00033984 	.word	0x00033984
   134b8:	00033988 	.word	0x00033988

000134bc <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   134bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
   134c0:	f04f 0b18 	mov.w	fp, #24
   134c4:	4f22      	ldr	r7, [pc, #136]	; (13550 <SEGGER_RTT_WriteSkipNoLock+0x94>)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   134c6:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   134c8:	fb0b 7200 	mla	r2, fp, r0, r7
   134cc:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   134ce:	6a55      	ldr	r5, [r2, #36]	; 0x24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   134d0:	4606      	mov	r6, r0
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   134d2:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   134d4:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   134d6:	d834      	bhi.n	13542 <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   134d8:	f8d2 a020 	ldr.w	sl, [r2, #32]
   134dc:	ebaa 0905 	sub.w	r9, sl, r5
   134e0:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
   134e4:	4294      	cmp	r4, r2
   134e6:	d811      	bhi.n	1350c <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
   134e8:	f04f 0918 	mov.w	r9, #24
   134ec:	fb06 9309 	mla	r3, r6, r9, r9
   134f0:	443b      	add	r3, r7
   134f2:	6858      	ldr	r0, [r3, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   134f4:	4622      	mov	r2, r4
   134f6:	4641      	mov	r1, r8
   134f8:	4428      	add	r0, r5
   134fa:	f01d fc81 	bl	30e00 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
   134fe:	fb09 7606 	mla	r6, r9, r6, r7
   13502:	442c      	add	r4, r5
      //
      if (NumBytes) {
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
      }
      pRing->WrOff = NumBytes;
      return 1;
   13504:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   13506:	6274      	str	r4, [r6, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   13508:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   1350c:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   1350e:	429c      	cmp	r4, r3
   13510:	d81b      	bhi.n	1354a <SEGGER_RTT_WriteSkipNoLock+0x8e>
      memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
   13512:	fb00 bb0b 	mla	fp, r0, fp, fp
   13516:	44bb      	add	fp, r7
   13518:	f8db 0004 	ldr.w	r0, [fp, #4]
   1351c:	464a      	mov	r2, r9
   1351e:	4428      	add	r0, r5
   13520:	442c      	add	r4, r5
   13522:	f01d fc6d 	bl	30e00 <memcpy>
      if (NumBytes) {
   13526:	ebb4 040a 	subs.w	r4, r4, sl
   1352a:	d006      	beq.n	1353a <SEGGER_RTT_WriteSkipNoLock+0x7e>
   1352c:	4622      	mov	r2, r4
   1352e:	f8db 0004 	ldr.w	r0, [fp, #4]
   13532:	eb08 0109 	add.w	r1, r8, r9
   13536:	f01d fc63 	bl	30e00 <memcpy>
      pRing->WrOff = NumBytes;
   1353a:	2018      	movs	r0, #24
   1353c:	fb00 7606 	mla	r6, r0, r6, r7
   13540:	e7e0      	b.n	13504 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
   13542:	3b01      	subs	r3, #1
   13544:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   13546:	42a3      	cmp	r3, r4
   13548:	d2ce      	bcs.n	134e8 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   1354a:	2000      	movs	r0, #0
   1354c:	e7dc      	b.n	13508 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   1354e:	bf00      	nop
   13550:	200215ec 	.word	0x200215ec

00013554 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   13554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
   13556:	2318      	movs	r3, #24
   13558:	4c17      	ldr	r4, [pc, #92]	; (135b8 <SEGGER_RTT_WriteNoLock+0x64>)
   1355a:	fb00 3503 	mla	r5, r0, r3, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   1355e:	fb03 4000 	mla	r0, r3, r0, r4
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
   13562:	4425      	add	r5, r4
  switch (pRing->Flags) {
   13564:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   13566:	460f      	mov	r7, r1
  switch (pRing->Flags) {
   13568:	2c01      	cmp	r4, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1356a:	4616      	mov	r6, r2
  switch (pRing->Flags) {
   1356c:	d00f      	beq.n	1358e <SEGGER_RTT_WriteNoLock+0x3a>
   1356e:	2c02      	cmp	r4, #2
   13570:	d01a      	beq.n	135a8 <SEGGER_RTT_WriteNoLock+0x54>
   13572:	b9f4      	cbnz	r4, 135b2 <SEGGER_RTT_WriteNoLock+0x5e>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
   13574:	4628      	mov	r0, r5
   13576:	f013 fba2 	bl	26cbe <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   1357a:	4286      	cmp	r6, r0
   1357c:	d805      	bhi.n	1358a <SEGGER_RTT_WriteNoLock+0x36>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
   1357e:	4632      	mov	r2, r6
   13580:	4639      	mov	r1, r7
   13582:	4628      	mov	r0, r5
   13584:	f013 fba9 	bl	26cda <_WriteNoCheck>
   13588:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
   1358a:	4620      	mov	r0, r4
   1358c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
   1358e:	4628      	mov	r0, r5
   13590:	f013 fb95 	bl	26cbe <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   13594:	4286      	cmp	r6, r0
   13596:	4634      	mov	r4, r6
   13598:	bf28      	it	cs
   1359a:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   1359c:	4639      	mov	r1, r7
   1359e:	4622      	mov	r2, r4
   135a0:	4628      	mov	r0, r5
   135a2:	f013 fb9a 	bl	26cda <_WriteNoCheck>
    break;
   135a6:	e7f0      	b.n	1358a <SEGGER_RTT_WriteNoLock+0x36>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   135a8:	4628      	mov	r0, r5
}
   135aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
   135ae:	f013 bbb0 	b.w	26d12 <_WriteBlocking>
  switch (pRing->Flags) {
   135b2:	2400      	movs	r4, #0
  return Status;
   135b4:	e7e9      	b.n	1358a <SEGGER_RTT_WriteNoLock+0x36>
   135b6:	bf00      	nop
   135b8:	200215ec 	.word	0x200215ec

000135bc <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
   135bc:	2218      	movs	r2, #24
   135be:	4b03      	ldr	r3, [pc, #12]	; (135cc <SEGGER_RTT_HasDataUp+0x10>)
   135c0:	fb02 3000 	mla	r0, r2, r0, r3
   135c4:	6a83      	ldr	r3, [r0, #40]	; 0x28
  return pRing->WrOff - v;
   135c6:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
   135c8:	1ac0      	subs	r0, r0, r3
   135ca:	4770      	bx	lr
   135cc:	200215ec 	.word	0x200215ec

000135d0 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
   135d0:	4a09      	ldr	r2, [pc, #36]	; (135f8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   135d2:	490a      	ldr	r1, [pc, #40]	; (135fc <arch_swap+0x2c>)
	_current->arch.basepri = key;
   135d4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   135d6:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   135d8:	66d8      	str	r0, [r3, #108]	; 0x6c
	_current->arch.swap_return_value = _k_neg_eagain;
   135da:	6719      	str	r1, [r3, #112]	; 0x70

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   135dc:	4908      	ldr	r1, [pc, #32]	; (13600 <arch_swap+0x30>)
   135de:	684b      	ldr	r3, [r1, #4]
   135e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   135e4:	604b      	str	r3, [r1, #4]
   135e6:	2300      	movs	r3, #0
   135e8:	f383 8811 	msr	BASEPRI, r3
   135ec:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   135f0:	6893      	ldr	r3, [r2, #8]
}
   135f2:	6f18      	ldr	r0, [r3, #112]	; 0x70
   135f4:	4770      	bx	lr
   135f6:	bf00      	nop
   135f8:	200217c0 	.word	0x200217c0
   135fc:	00032f38 	.word	0x00032f38
   13600:	e000ed00 	.word	0xe000ed00

00013604 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   13604:	490f      	ldr	r1, [pc, #60]	; (13644 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
   13606:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   13608:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   1360c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1360e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   13612:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   13616:	2020      	movs	r0, #32
    msr BASEPRI, r0
   13618:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   1361c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   13620:	4f09      	ldr	r7, [pc, #36]	; (13648 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   13622:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   13626:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   13628:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1362a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   1362c:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
    movs r3, #0
   1362e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   13630:	66d3      	str	r3, [r2, #108]	; 0x6c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   13632:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   13636:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   1363a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1363e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   13642:	4770      	bx	lr
    ldr r1, =_kernel
   13644:	200217c0 	.word	0x200217c0
    ldr v4, =_SCS_ICSR
   13648:	e000ed04 	.word	0xe000ed04

0001364c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   1364c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   13650:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   13652:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   13656:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1365a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   1365c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   13660:	2902      	cmp	r1, #2
    beq _oops
   13662:	d0ff      	beq.n	13664 <_oops>

00013664 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   13664:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   13666:	f013 fb88 	bl	26d7a <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   1366a:	bd01      	pop	{r0, pc}

0001366c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   1366c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   1366e:	2b00      	cmp	r3, #0
   13670:	db08      	blt.n	13684 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13672:	2201      	movs	r2, #1
   13674:	f000 001f 	and.w	r0, r0, #31
   13678:	fa02 f000 	lsl.w	r0, r2, r0
   1367c:	4a02      	ldr	r2, [pc, #8]	; (13688 <arch_irq_enable+0x1c>)
   1367e:	095b      	lsrs	r3, r3, #5
   13680:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   13684:	4770      	bx	lr
   13686:	bf00      	nop
   13688:	e000e100 	.word	0xe000e100

0001368c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   1368c:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   1368e:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
   13690:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13694:	bfac      	ite	ge
   13696:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1369a:	4b06      	ldrlt	r3, [pc, #24]	; (136b4 <z_arm_irq_priority_set+0x28>)
   1369c:	ea4f 1141 	mov.w	r1, r1, lsl #5
   136a0:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   136a2:	bfab      	itete	ge
   136a4:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   136a8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   136ac:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   136b0:	5419      	strblt	r1, [r3, r0]
}
   136b2:	4770      	bx	lr
   136b4:	e000ed14 	.word	0xe000ed14

000136b8 <arch_new_thread>:
#ifdef CONFIG_INIT_STACKS
	memset(stack, 0xaa, stack_size);
#endif
#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)stack;
	thread->stack_info.size = stack_size;
   136b8:	e9c0 1218 	strd	r1, r2, [r0, #96]	; 0x60
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
   136bc:	440a      	add	r2, r1
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(Z_STACK_PTR_ALIGN(stackEnd -
   136be:	3a20      	subs	r2, #32
   136c0:	f022 0207 	bic.w	r2, r2, #7
#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
   136c4:	6013      	str	r3, [r2, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
   136c6:	9b00      	ldr	r3, [sp, #0]
	pInitCtx->basic.pc &= 0xfffffffe;
   136c8:	4907      	ldr	r1, [pc, #28]	; (136e8 <arch_new_thread+0x30>)
	pInitCtx->basic.a2 = (u32_t)parameter1;
   136ca:	6053      	str	r3, [r2, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
   136cc:	9b01      	ldr	r3, [sp, #4]
	pInitCtx->basic.pc &= 0xfffffffe;
   136ce:	f021 0101 	bic.w	r1, r1, #1
	pInitCtx->basic.a3 = (u32_t)parameter2;
   136d2:	6093      	str	r3, [r2, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
   136d4:	9b02      	ldr	r3, [sp, #8]
	pInitCtx->basic.pc &= 0xfffffffe;
   136d6:	6191      	str	r1, [r2, #24]
	pInitCtx->basic.a4 = (u32_t)parameter3;
   136d8:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	pInitCtx->basic.xpsr =
   136da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   136de:	61d3      	str	r3, [r2, #28]
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (u32_t)pInitCtx;

	thread->arch.basepri = 0;
   136e0:	2300      	movs	r3, #0
	thread->callee_saved.psp = (u32_t)pInitCtx;
   136e2:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   136e4:	66c3      	str	r3, [r0, #108]	; 0x6c

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   136e6:	4770      	bx	lr
   136e8:	000264ad 	.word	0x000264ad

000136ec <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
   136ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   136ee:	461d      	mov	r5, r3
   136f0:	4606      	mov	r6, r0
   136f2:	460c      	mov	r4, r1
   136f4:	4617      	mov	r7, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   136f6:	2300      	movs	r3, #0
   136f8:	eee1 3a10 	vmsr	fpscr, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   136fc:	f000 fb4c 	bl	13d98 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);

	_current = main_thread;
   13700:	4b08      	ldr	r3, [pc, #32]	; (13724 <arch_switch_to_main_thread+0x38>)
	start_of_main_stack =
   13702:	19e2      	adds	r2, r4, r7
	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);
   13704:	f022 0407 	bic.w	r4, r2, #7
	_current = main_thread;
   13708:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1370a:	4628      	mov	r0, r5
   1370c:	f384 8809 	msr	PSP, r4
   13710:	2100      	movs	r1, #0
   13712:	b663      	cpsie	if
   13714:	f381 8811 	msr	BASEPRI, r1
   13718:	f3bf 8f6f 	isb	sy
   1371c:	2200      	movs	r2, #0
   1371e:	2300      	movs	r3, #0
   13720:	f012 fec4 	bl	264ac <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   13724:	200217c0 	.word	0x200217c0

00013728 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   13728:	4901      	ldr	r1, [pc, #4]	; (13730 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1372a:	2210      	movs	r2, #16
	str	r2, [r1]
   1372c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1372e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   13730:	e000ed10 	.word	0xe000ed10

00013734 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   13734:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   13736:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   13738:	f380 8811 	msr	BASEPRI, r0
	isb
   1373c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   13740:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   13744:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   13746:	b662      	cpsie	i
	isb
   13748:	f3bf 8f6f 	isb	sy

	bx	lr
   1374c:	4770      	bx	lr
   1374e:	bf00      	nop

00013750 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   13750:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13752:	4606      	mov	r6, r0

	if (esf != NULL) {
   13754:	460c      	mov	r4, r1
   13756:	b301      	cbz	r1, 1379a <z_arm_fatal_error+0x4a>
	return ((u8_t *)data - (u8_t *)__log_const_start)/
   13758:	4b13      	ldr	r3, [pc, #76]	; (137a8 <z_arm_fatal_error+0x58>)
   1375a:	4d14      	ldr	r5, [pc, #80]	; (137ac <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   1375c:	4814      	ldr	r0, [pc, #80]	; (137b0 <z_arm_fatal_error+0x60>)
   1375e:	1aed      	subs	r5, r5, r3
   13760:	08ed      	lsrs	r5, r5, #3
   13762:	01ad      	lsls	r5, r5, #6
   13764:	f045 0501 	orr.w	r5, r5, #1
   13768:	f8ad 5000 	strh.w	r5, [sp]
   1376c:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   13770:	6809      	ldr	r1, [r1, #0]
   13772:	f012 ffb4 	bl	266de <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   13776:	f8ad 5000 	strh.w	r5, [sp]
   1377a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1377e:	68e1      	ldr	r1, [r4, #12]
   13780:	480c      	ldr	r0, [pc, #48]	; (137b4 <z_arm_fatal_error+0x64>)
   13782:	f012 ffac 	bl	266de <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   13786:	462a      	mov	r2, r5
   13788:	69e1      	ldr	r1, [r4, #28]
   1378a:	480b      	ldr	r0, [pc, #44]	; (137b8 <z_arm_fatal_error+0x68>)
   1378c:	f012 ff77 	bl	2667e <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   13790:	462a      	mov	r2, r5
   13792:	69a1      	ldr	r1, [r4, #24]
   13794:	4809      	ldr	r0, [pc, #36]	; (137bc <z_arm_fatal_error+0x6c>)
   13796:	f012 ff72 	bl	2667e <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1379a:	4621      	mov	r1, r4
   1379c:	4630      	mov	r0, r6
}
   1379e:	b002      	add	sp, #8
   137a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
   137a4:	f001 bab2 	b.w	14d0c <z_fatal_error>
   137a8:	000317c8 	.word	0x000317c8
   137ac:	000317e8 	.word	0x000317e8
   137b0:	0003398f 	.word	0x0003398f
   137b4:	000339be 	.word	0x000339be
   137b8:	000339ed 	.word	0x000339ed
   137bc:	000339fc 	.word	0x000339fc

000137c0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   137c0:	bf30      	wfi
    b z_SysNmiOnReset
   137c2:	f7ff bffd 	b.w	137c0 <z_SysNmiOnReset>
   137c6:	bf00      	nop

000137c8 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   137c8:	4a17      	ldr	r2, [pc, #92]	; (13828 <z_arm_prep_c+0x60>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   137ca:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   137cc:	4b17      	ldr	r3, [pc, #92]	; (1382c <z_arm_prep_c+0x64>)
   137ce:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   137d2:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   137d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   137d8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   137dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   137e0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   137e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   137e8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   137ec:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   137f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR &= (~(FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk));
   137f4:	4a0e      	ldr	r2, [pc, #56]	; (13830 <z_arm_prep_c+0x68>)
   137f6:	6853      	ldr	r3, [r2, #4]
   137f8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
   137fc:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   137fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13802:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   13806:	2300      	movs	r3, #0
   13808:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1380c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   13810:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   13814:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   13818:	f001 faf6 	bl	14e08 <z_bss_zero>
	z_data_copy();
   1381c:	f001 fafe 	bl	14e1c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   13820:	f000 fa88 	bl	13d34 <z_arm_interrupt_init>
	z_cstart();
   13824:	f001 fb3c 	bl	14ea0 <z_cstart>
   13828:	0000c000 	.word	0x0000c000
   1382c:	e000ed00 	.word	0xe000ed00
   13830:	e000ef30 	.word	0xe000ef30

00013834 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   13834:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   13836:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   13838:	4a0b      	ldr	r2, [pc, #44]	; (13868 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   1383a:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   1383c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1383e:	bf1e      	ittt	ne
	movne	r1, #0
   13840:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   13842:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
   13844:	f013 fc02 	blne	2704c <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   13848:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1384a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1384e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   13852:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   13856:	4905      	ldr	r1, [pc, #20]	; (1386c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   13858:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1385a:	c909      	ldmia	r1!, {r0, r3}
#ifdef CONFIG_EXECUTION_BENCHMARKING
	push {r0, r3}	/* Save r0 and r3 into stack */
	bl read_timer_end_of_isr
	pop {r0, r3}	/* Restore r0 and r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
   1385c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1385e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   13862:	4903      	ldr	r1, [pc, #12]	; (13870 <_isr_wrapper+0x3c>)
	bx r1
   13864:	4708      	bx	r1
   13866:	0000      	.short	0x0000
	ldr r2, =_kernel
   13868:	200217c0 	.word	0x200217c0
	ldr r1, =_sw_isr_table
   1386c:	000315b4 	.word	0x000315b4
	ldr r1, =z_arm_int_exit
   13870:	00013cf5 	.word	0x00013cf5

00013874 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   13874:	f012 fecf 	bl	26616 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   13878:	2020      	movs	r0, #32
    msr BASEPRI, r0
   1387a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   1387e:	4808      	ldr	r0, [pc, #32]	; (138a0 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   13880:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   13884:	1840      	adds	r0, r0, r1
    msr PSP, r0
   13886:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   1388a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1388e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   13890:	4308      	orrs	r0, r1
    msr CONTROL, r0
   13892:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   13896:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   1389a:	f7ff ff95 	bl	137c8 <z_arm_prep_c>
   1389e:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   138a0:	20029570 	.word	0x20029570

000138a4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   138a4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   138a8:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
   138ac:	4672      	mov	r2, lr

	push {r0, lr}
   138ae:	b501      	push	{r0, lr}

	bl z_arm_fault
   138b0:	f000 f93c 	bl	13b2c <z_arm_fault>

	pop {r0, pc}
   138b4:	bd01      	pop	{r0, pc}
   138b6:	bf00      	nop

000138b8 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
   138b8:	b570      	push	{r4, r5, r6, lr}
   138ba:	4b27      	ldr	r3, [pc, #156]	; (13958 <usage_fault.isra.0+0xa0>)
   138bc:	4c27      	ldr	r4, [pc, #156]	; (1395c <usage_fault.isra.0+0xa4>)
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   138be:	4d28      	ldr	r5, [pc, #160]	; (13960 <usage_fault.isra.0+0xa8>)
   138c0:	1ae4      	subs	r4, r4, r3
   138c2:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** USAGE FAULT *****");
   138c4:	01a4      	lsls	r4, r4, #6
   138c6:	f044 0601 	orr.w	r6, r4, #1
   138ca:	4631      	mov	r1, r6
   138cc:	4825      	ldr	r0, [pc, #148]	; (13964 <usage_fault.isra.0+0xac>)
   138ce:	f012 fec7 	bl	26660 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   138d2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   138d4:	0192      	lsls	r2, r2, #6
   138d6:	d503      	bpl.n	138e0 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
   138d8:	4631      	mov	r1, r6
   138da:	4823      	ldr	r0, [pc, #140]	; (13968 <usage_fault.isra.0+0xb0>)
   138dc:	f012 fec0 	bl	26660 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   138e0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   138e2:	01db      	lsls	r3, r3, #7
   138e4:	d504      	bpl.n	138f0 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
   138e6:	4821      	ldr	r0, [pc, #132]	; (1396c <usage_fault.isra.0+0xb4>)
   138e8:	f044 0101 	orr.w	r1, r4, #1
   138ec:	f012 feb8 	bl	26660 <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   138f0:	4d1b      	ldr	r5, [pc, #108]	; (13960 <usage_fault.isra.0+0xa8>)
   138f2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   138f4:	02d6      	lsls	r6, r2, #11
   138f6:	d504      	bpl.n	13902 <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   138f8:	481d      	ldr	r0, [pc, #116]	; (13970 <usage_fault.isra.0+0xb8>)
   138fa:	f044 0101 	orr.w	r1, r4, #1
   138fe:	f012 feaf 	bl	26660 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   13902:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13904:	0318      	lsls	r0, r3, #12
   13906:	d504      	bpl.n	13912 <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  No coprocessor instructions");
   13908:	481a      	ldr	r0, [pc, #104]	; (13974 <usage_fault.isra.0+0xbc>)
   1390a:	f044 0101 	orr.w	r1, r4, #1
   1390e:	f012 fea7 	bl	26660 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   13912:	4d13      	ldr	r5, [pc, #76]	; (13960 <usage_fault.isra.0+0xa8>)
   13914:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   13916:	0351      	lsls	r1, r2, #13
   13918:	d504      	bpl.n	13924 <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   1391a:	4817      	ldr	r0, [pc, #92]	; (13978 <usage_fault.isra.0+0xc0>)
   1391c:	f044 0101 	orr.w	r1, r4, #1
   13920:	f012 fe9e 	bl	26660 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   13924:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13926:	039a      	lsls	r2, r3, #14
   13928:	d504      	bpl.n	13934 <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   1392a:	4814      	ldr	r0, [pc, #80]	; (1397c <usage_fault.isra.0+0xc4>)
   1392c:	f044 0101 	orr.w	r1, r4, #1
   13930:	f012 fe96 	bl	26660 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   13934:	4d0a      	ldr	r5, [pc, #40]	; (13960 <usage_fault.isra.0+0xa8>)
   13936:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13938:	03db      	lsls	r3, r3, #15
   1393a:	d504      	bpl.n	13946 <usage_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   1393c:	4810      	ldr	r0, [pc, #64]	; (13980 <usage_fault.isra.0+0xc8>)
   1393e:	f044 0101 	orr.w	r1, r4, #1
   13942:	f012 fe8d 	bl	26660 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   13946:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
   13948:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1394a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   1394e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   13952:	62ab      	str	r3, [r5, #40]	; 0x28
}
   13954:	bd70      	pop	{r4, r5, r6, pc}
   13956:	bf00      	nop
   13958:	000317c8 	.word	0x000317c8
   1395c:	000317e8 	.word	0x000317e8
   13960:	e000ed00 	.word	0xe000ed00
   13964:	00033a2a 	.word	0x00033a2a
   13968:	00033a42 	.word	0x00033a42
   1396c:	00033a55 	.word	0x00033a55
   13970:	00033a6f 	.word	0x00033a6f
   13974:	00033a99 	.word	0x00033a99
   13978:	00033ab7 	.word	0x00033ab7
   1397c:	00033adc 	.word	0x00033adc
   13980:	00033af6 	.word	0x00033af6

00013984 <mem_manage_fault.isra.0>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   13984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13988:	4b27      	ldr	r3, [pc, #156]	; (13a28 <mem_manage_fault.isra.0+0xa4>)
   1398a:	4c28      	ldr	r4, [pc, #160]	; (13a2c <mem_manage_fault.isra.0+0xa8>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1398c:	4d28      	ldr	r5, [pc, #160]	; (13a30 <mem_manage_fault.isra.0+0xac>)
   1398e:	1ae4      	subs	r4, r4, r3
   13990:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   13992:	01a4      	lsls	r4, r4, #6
   13994:	f044 0801 	orr.w	r8, r4, #1
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   13998:	4607      	mov	r7, r0
   1399a:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   1399c:	4825      	ldr	r0, [pc, #148]	; (13a34 <mem_manage_fault.isra.0+0xb0>)
   1399e:	4641      	mov	r1, r8
   139a0:	f012 fe5e 	bl	26660 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   139a4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   139a6:	06d1      	lsls	r1, r2, #27
   139a8:	d503      	bpl.n	139b2 <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   139aa:	4641      	mov	r1, r8
   139ac:	4822      	ldr	r0, [pc, #136]	; (13a38 <mem_manage_fault.isra.0+0xb4>)
   139ae:	f012 fe57 	bl	26660 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   139b2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   139b4:	071a      	lsls	r2, r3, #28
   139b6:	d504      	bpl.n	139c2 <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   139b8:	4820      	ldr	r0, [pc, #128]	; (13a3c <mem_manage_fault.isra.0+0xb8>)
   139ba:	f044 0101 	orr.w	r1, r4, #1
   139be:	f012 fe4f 	bl	26660 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   139c2:	4d1b      	ldr	r5, [pc, #108]	; (13a30 <mem_manage_fault.isra.0+0xac>)
   139c4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   139c6:	079b      	lsls	r3, r3, #30
   139c8:	d512      	bpl.n	139f0 <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
   139ca:	f044 0801 	orr.w	r8, r4, #1
   139ce:	4641      	mov	r1, r8
   139d0:	481b      	ldr	r0, [pc, #108]	; (13a40 <mem_manage_fault.isra.0+0xbc>)
   139d2:	f012 fe45 	bl	26660 <log_0>
		mmfar = SCB->MMFAR;
   139d6:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   139d8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   139da:	0618      	lsls	r0, r3, #24
   139dc:	d508      	bpl.n	139f0 <mem_manage_fault.isra.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   139de:	4642      	mov	r2, r8
   139e0:	4818      	ldr	r0, [pc, #96]	; (13a44 <mem_manage_fault.isra.0+0xc0>)
   139e2:	f012 fe4c 	bl	2667e <log_1>
			if (from_hard_fault) {
   139e6:	b11f      	cbz	r7, 139f0 <mem_manage_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   139e8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   139ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   139ee:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   139f0:	4d0f      	ldr	r5, [pc, #60]	; (13a30 <mem_manage_fault.isra.0+0xac>)
   139f2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   139f4:	07d2      	lsls	r2, r2, #31
   139f6:	d504      	bpl.n	13a02 <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
   139f8:	4813      	ldr	r0, [pc, #76]	; (13a48 <mem_manage_fault.isra.0+0xc4>)
   139fa:	f044 0101 	orr.w	r1, r4, #1
   139fe:	f012 fe2f 	bl	26660 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   13a02:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13a04:	069b      	lsls	r3, r3, #26
   13a06:	d504      	bpl.n	13a12 <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
   13a08:	4810      	ldr	r0, [pc, #64]	; (13a4c <mem_manage_fault.isra.0+0xc8>)
   13a0a:	f044 0101 	orr.w	r1, r4, #1
   13a0e:	f012 fe27 	bl	26660 <log_0>
	*recoverable = memory_fault_recoverable(esf);
   13a12:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   13a14:	4b06      	ldr	r3, [pc, #24]	; (13a30 <mem_manage_fault.isra.0+0xac>)
   13a16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   13a18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13a1a:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   13a1e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   13a20:	7030      	strb	r0, [r6, #0]
}
   13a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13a26:	bf00      	nop
   13a28:	000317c8 	.word	0x000317c8
   13a2c:	000317e8 	.word	0x000317e8
   13a30:	e000ed00 	.word	0xe000ed00
   13a34:	00033b21 	.word	0x00033b21
   13a38:	00033b37 	.word	0x00033b37
   13a3c:	00033b6a 	.word	0x00033b6a
   13a40:	00033b7d 	.word	0x00033b7d
   13a44:	00033b95 	.word	0x00033b95
   13a48:	00033bab 	.word	0x00033bab
   13a4c:	00033bca 	.word	0x00033bca

00013a50 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   13a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13a54:	4b2a      	ldr	r3, [pc, #168]	; (13b00 <bus_fault.isra.0+0xb0>)
   13a56:	4c2b      	ldr	r4, [pc, #172]	; (13b04 <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   13a58:	4d2b      	ldr	r5, [pc, #172]	; (13b08 <bus_fault.isra.0+0xb8>)
   13a5a:	1ae4      	subs	r4, r4, r3
   13a5c:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   13a5e:	01a4      	lsls	r4, r4, #6
   13a60:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   13a64:	4607      	mov	r7, r0
   13a66:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   13a68:	4828      	ldr	r0, [pc, #160]	; (13b0c <bus_fault.isra.0+0xbc>)
   13a6a:	4641      	mov	r1, r8
   13a6c:	f012 fdf8 	bl	26660 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   13a70:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   13a72:	04d1      	lsls	r1, r2, #19
   13a74:	d503      	bpl.n	13a7e <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
   13a76:	4641      	mov	r1, r8
   13a78:	4825      	ldr	r0, [pc, #148]	; (13b10 <bus_fault.isra.0+0xc0>)
   13a7a:	f012 fdf1 	bl	26660 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   13a7e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13a80:	051a      	lsls	r2, r3, #20
   13a82:	d504      	bpl.n	13a8e <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   13a84:	4823      	ldr	r0, [pc, #140]	; (13b14 <bus_fault.isra.0+0xc4>)
   13a86:	f044 0101 	orr.w	r1, r4, #1
   13a8a:	f012 fde9 	bl	26660 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   13a8e:	4d1e      	ldr	r5, [pc, #120]	; (13b08 <bus_fault.isra.0+0xb8>)
   13a90:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13a92:	059b      	lsls	r3, r3, #22
   13a94:	d512      	bpl.n	13abc <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
   13a96:	f044 0801 	orr.w	r8, r4, #1
   13a9a:	4641      	mov	r1, r8
   13a9c:	481e      	ldr	r0, [pc, #120]	; (13b18 <bus_fault.isra.0+0xc8>)
   13a9e:	f012 fddf 	bl	26660 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   13aa2:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   13aa4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13aa6:	0418      	lsls	r0, r3, #16
   13aa8:	d508      	bpl.n	13abc <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   13aaa:	4642      	mov	r2, r8
   13aac:	481b      	ldr	r0, [pc, #108]	; (13b1c <bus_fault.isra.0+0xcc>)
   13aae:	f012 fde6 	bl	2667e <log_1>
			if (from_hard_fault) {
   13ab2:	b11f      	cbz	r7, 13abc <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   13ab4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13ab6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   13aba:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   13abc:	4d12      	ldr	r5, [pc, #72]	; (13b08 <bus_fault.isra.0+0xb8>)
   13abe:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13ac0:	0559      	lsls	r1, r3, #21
   13ac2:	d504      	bpl.n	13ace <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
   13ac4:	4816      	ldr	r0, [pc, #88]	; (13b20 <bus_fault.isra.0+0xd0>)
   13ac6:	f044 0101 	orr.w	r1, r4, #1
   13aca:	f012 fdc9 	bl	26660 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   13ace:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13ad0:	05da      	lsls	r2, r3, #23
   13ad2:	d50d      	bpl.n	13af0 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
   13ad4:	4813      	ldr	r0, [pc, #76]	; (13b24 <bus_fault.isra.0+0xd4>)
   13ad6:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   13ada:	f012 fdc1 	bl	26660 <log_0>
	*recoverable = memory_fault_recoverable(esf);
   13ade:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   13ae0:	4a09      	ldr	r2, [pc, #36]	; (13b08 <bus_fault.isra.0+0xb8>)
   13ae2:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13ae4:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   13ae8:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   13aea:	7030      	strb	r0, [r6, #0]
}
   13aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   13af0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13af2:	049b      	lsls	r3, r3, #18
   13af4:	d5f3      	bpl.n	13ade <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   13af6:	480c      	ldr	r0, [pc, #48]	; (13b28 <bus_fault.isra.0+0xd8>)
   13af8:	f044 0101 	orr.w	r1, r4, #1
   13afc:	e7ed      	b.n	13ada <bus_fault.isra.0+0x8a>
   13afe:	bf00      	nop
   13b00:	000317c8 	.word	0x000317c8
   13b04:	000317e8 	.word	0x000317e8
   13b08:	e000ed00 	.word	0xe000ed00
   13b0c:	00033bf9 	.word	0x00033bf9
   13b10:	00033c0f 	.word	0x00033c0f
   13b14:	00033b6a 	.word	0x00033b6a
   13b18:	00033c20 	.word	0x00033c20
   13b1c:	00033c39 	.word	0x00033c39
   13b20:	00033c4e 	.word	0x00033c4e
   13b24:	00033c69 	.word	0x00033c69
   13b28:	00033bca 	.word	0x00033bca

00013b2c <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
   13b2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13b30:	4b5e      	ldr	r3, [pc, #376]	; (13cac <z_arm_fault+0x180>)
{
   13b32:	4681      	mov	r9, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13b34:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   13b38:	460d      	mov	r5, r1
   13b3a:	4614      	mov	r4, r2
   13b3c:	2600      	movs	r6, #0
   13b3e:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13b40:	f3c8 0708 	ubfx	r7, r8, #0, #9
   13b44:	f386 8811 	msr	BASEPRI, r6
   13b48:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   13b4c:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   13b50:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   13b54:	d123      	bne.n	13b9e <z_arm_fault+0x72>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   13b56:	07d0      	lsls	r0, r2, #31
   13b58:	d421      	bmi.n	13b9e <z_arm_fault+0x72>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   13b5a:	0651      	lsls	r1, r2, #25
   13b5c:	d403      	bmi.n	13b66 <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   13b5e:	0722      	lsls	r2, r4, #28
   13b60:	d40e      	bmi.n	13b80 <z_arm_fault+0x54>
			*nested_exc = true;
   13b62:	2601      	movs	r6, #1
   13b64:	e00e      	b.n	13b84 <z_arm_fault+0x58>
   13b66:	4952      	ldr	r1, [pc, #328]	; (13cb0 <z_arm_fault+0x184>)
   13b68:	4a52      	ldr	r2, [pc, #328]	; (13cb4 <z_arm_fault+0x188>)
		PR_FAULT_INFO("Exception occurred in Secure State");
   13b6a:	4853      	ldr	r0, [pc, #332]	; (13cb8 <z_arm_fault+0x18c>)
   13b6c:	1a52      	subs	r2, r2, r1
   13b6e:	08d2      	lsrs	r2, r2, #3
   13b70:	0192      	lsls	r2, r2, #6
   13b72:	f042 0101 	orr.w	r1, r2, #1
   13b76:	f012 fd73 	bl	26660 <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   13b7a:	f014 0604 	ands.w	r6, r4, #4
   13b7e:	d001      	beq.n	13b84 <z_arm_fault+0x58>
			ptr_esf = (z_arch_esf_t *)psp;
   13b80:	46a9      	mov	r9, r5
	*nested_exc = false;
   13b82:	2600      	movs	r6, #0
	*recoverable = false;
   13b84:	2300      	movs	r3, #0
   13b86:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   13b8a:	1efb      	subs	r3, r7, #3
   13b8c:	2b09      	cmp	r3, #9
   13b8e:	d873      	bhi.n	13c78 <z_arm_fault+0x14c>
   13b90:	e8df f003 	tbb	[pc, r3]
   13b94:	3e656107 	.word	0x3e656107
   13b98:	72727272 	.word	0x72727272
   13b9c:	6972      	.short	0x6972
		return NULL;
   13b9e:	46b1      	mov	r9, r6
   13ba0:	e7f0      	b.n	13b84 <z_arm_fault+0x58>
	*recoverable = false;
   13ba2:	f04f 0800 	mov.w	r8, #0
   13ba6:	4b42      	ldr	r3, [pc, #264]	; (13cb0 <z_arm_fault+0x184>)
   13ba8:	4f42      	ldr	r7, [pc, #264]	; (13cb4 <z_arm_fault+0x188>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   13baa:	4844      	ldr	r0, [pc, #272]	; (13cbc <z_arm_fault+0x190>)
   13bac:	1aff      	subs	r7, r7, r3
   13bae:	08ff      	lsrs	r7, r7, #3
   13bb0:	01bf      	lsls	r7, r7, #6
   13bb2:	f047 0701 	orr.w	r7, r7, #1
   13bb6:	4639      	mov	r1, r7
   13bb8:	f012 fd52 	bl	26660 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   13bbc:	4b3b      	ldr	r3, [pc, #236]	; (13cac <z_arm_fault+0x180>)
	*recoverable = false;
   13bbe:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   13bc2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   13bc4:	f014 0402 	ands.w	r4, r4, #2
   13bc8:	d005      	beq.n	13bd6 <z_arm_fault+0xaa>
		PR_EXC("  Bus fault on vector table read");
   13bca:	4639      	mov	r1, r7
   13bcc:	483c      	ldr	r0, [pc, #240]	; (13cc0 <z_arm_fault+0x194>)
	PR_FAULT_INFO(
   13bce:	f012 fd47 	bl	26660 <log_0>
	u32_t reason = K_ERR_CPU_EXCEPTION;
   13bd2:	2400      	movs	r4, #0
}
   13bd4:	e01f      	b.n	13c16 <z_arm_fault+0xea>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   13bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   13bd8:	005b      	lsls	r3, r3, #1
   13bda:	d51c      	bpl.n	13c16 <z_arm_fault+0xea>
		PR_EXC("  Fault escalation (see below)");
   13bdc:	4639      	mov	r1, r7
   13bde:	4839      	ldr	r0, [pc, #228]	; (13cc4 <z_arm_fault+0x198>)
   13be0:	f012 fd3e 	bl	26660 <log_0>
		if (SCB_MMFSR != 0) {
   13be4:	4b38      	ldr	r3, [pc, #224]	; (13cc8 <z_arm_fault+0x19c>)
   13be6:	781b      	ldrb	r3, [r3, #0]
   13be8:	b12b      	cbz	r3, 13bf6 <z_arm_fault+0xca>
			reason = mem_manage_fault(esf, 1, recoverable);
   13bea:	2001      	movs	r0, #1
   13bec:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   13bf0:	f7ff fec8 	bl	13984 <mem_manage_fault.isra.0>
   13bf4:	e00e      	b.n	13c14 <z_arm_fault+0xe8>
		} else if (SCB_BFSR != 0) {
   13bf6:	4b35      	ldr	r3, [pc, #212]	; (13ccc <z_arm_fault+0x1a0>)
   13bf8:	781b      	ldrb	r3, [r3, #0]
   13bfa:	b12b      	cbz	r3, 13c08 <z_arm_fault+0xdc>
			reason = bus_fault(esf, 1, recoverable);
   13bfc:	2001      	movs	r0, #1
   13bfe:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   13c02:	f7ff ff25 	bl	13a50 <bus_fault.isra.0>
   13c06:	e005      	b.n	13c14 <z_arm_fault+0xe8>
		} else if (SCB_UFSR != 0) {
   13c08:	4b31      	ldr	r3, [pc, #196]	; (13cd0 <z_arm_fault+0x1a4>)
   13c0a:	881b      	ldrh	r3, [r3, #0]
   13c0c:	b29b      	uxth	r3, r3
   13c0e:	b113      	cbz	r3, 13c16 <z_arm_fault+0xea>
			reason = usage_fault(esf);
   13c10:	f7ff fe52 	bl	138b8 <usage_fault.isra.0>
   13c14:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   13c16:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13c1a:	b9cb      	cbnz	r3, 13c50 <z_arm_fault+0x124>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   13c1c:	464b      	mov	r3, r9
   13c1e:	ad02      	add	r5, sp, #8
   13c20:	f109 0720 	add.w	r7, r9, #32
   13c24:	462a      	mov	r2, r5
   13c26:	6818      	ldr	r0, [r3, #0]
   13c28:	6859      	ldr	r1, [r3, #4]
   13c2a:	3308      	adds	r3, #8
   13c2c:	c203      	stmia	r2!, {r0, r1}
   13c2e:	42bb      	cmp	r3, r7
   13c30:	4615      	mov	r5, r2
   13c32:	d1f7      	bne.n	13c24 <z_arm_fault+0xf8>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   13c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13c36:	b39e      	cbz	r6, 13ca0 <z_arm_fault+0x174>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   13c38:	f3c3 0208 	ubfx	r2, r3, #0, #9
   13c3c:	b922      	cbnz	r2, 13c48 <z_arm_fault+0x11c>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   13c3e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   13c42:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   13c46:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   13c48:	4620      	mov	r0, r4
   13c4a:	a902      	add	r1, sp, #8
   13c4c:	f7ff fd80 	bl	13750 <z_arm_fatal_error>
}
   13c50:	b00b      	add	sp, #44	; 0x2c
   13c52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   13c56:	2000      	movs	r0, #0
   13c58:	f10d 0107 	add.w	r1, sp, #7
   13c5c:	e7c8      	b.n	13bf0 <z_arm_fault+0xc4>
		reason = bus_fault(esf, 0, recoverable);
   13c5e:	2000      	movs	r0, #0
   13c60:	f10d 0107 	add.w	r1, sp, #7
   13c64:	e7cd      	b.n	13c02 <z_arm_fault+0xd6>
   13c66:	4913      	ldr	r1, [pc, #76]	; (13cb4 <z_arm_fault+0x188>)
   13c68:	4b11      	ldr	r3, [pc, #68]	; (13cb0 <z_arm_fault+0x184>)
	PR_FAULT_INFO(
   13c6a:	481a      	ldr	r0, [pc, #104]	; (13cd4 <z_arm_fault+0x1a8>)
   13c6c:	1ac9      	subs	r1, r1, r3
   13c6e:	08c9      	lsrs	r1, r1, #3
   13c70:	0189      	lsls	r1, r1, #6
   13c72:	f041 0101 	orr.w	r1, r1, #1
   13c76:	e7aa      	b.n	13bce <z_arm_fault+0xa2>
   13c78:	4a0d      	ldr	r2, [pc, #52]	; (13cb0 <z_arm_fault+0x184>)
   13c7a:	4b0e      	ldr	r3, [pc, #56]	; (13cb4 <z_arm_fault+0x188>)
	PR_FAULT_INFO("***** %s %d) *****",
   13c7c:	4816      	ldr	r0, [pc, #88]	; (13cd8 <z_arm_fault+0x1ac>)
   13c7e:	1a9b      	subs	r3, r3, r2
   13c80:	08db      	lsrs	r3, r3, #3
   13c82:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   13c86:	ea4f 1383 	mov.w	r3, r3, lsl #6
   13c8a:	4914      	ldr	r1, [pc, #80]	; (13cdc <z_arm_fault+0x1b0>)
   13c8c:	f043 0301 	orr.w	r3, r3, #1
   13c90:	bf18      	it	ne
   13c92:	4601      	movne	r1, r0
   13c94:	f1a7 0210 	sub.w	r2, r7, #16
   13c98:	4811      	ldr	r0, [pc, #68]	; (13ce0 <z_arm_fault+0x1b4>)
   13c9a:	f012 fd07 	bl	266ac <log_2>
   13c9e:	e798      	b.n	13bd2 <z_arm_fault+0xa6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   13ca0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   13ca4:	f023 0301 	bic.w	r3, r3, #1
   13ca8:	e7cd      	b.n	13c46 <z_arm_fault+0x11a>
   13caa:	bf00      	nop
   13cac:	e000ed00 	.word	0xe000ed00
   13cb0:	000317c8 	.word	0x000317c8
   13cb4:	000317e8 	.word	0x000317e8
   13cb8:	00033c81 	.word	0x00033c81
   13cbc:	00033ca4 	.word	0x00033ca4
   13cc0:	00033cbb 	.word	0x00033cbb
   13cc4:	00033cdc 	.word	0x00033cdc
   13cc8:	e000ed28 	.word	0xe000ed28
   13ccc:	e000ed29 	.word	0xe000ed29
   13cd0:	e000ed2a 	.word	0xe000ed2a
   13cd4:	00033cfb 	.word	0x00033cfb
   13cd8:	00033d46 	.word	0x00033d46
   13cdc:	00033d31 	.word	0x00033d31
   13ce0:	00033d5f 	.word	0x00033d5f

00013ce4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   13ce4:	4a02      	ldr	r2, [pc, #8]	; (13cf0 <z_arm_fault_init+0xc>)
   13ce6:	6953      	ldr	r3, [r2, #20]
   13ce8:	f043 0310 	orr.w	r3, r3, #16
   13cec:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   13cee:	4770      	bx	lr
   13cf0:	e000ed00 	.word	0xe000ed00

00013cf4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   13cf4:	4b04      	ldr	r3, [pc, #16]	; (13d08 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   13cf6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   13cf8:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   13cfa:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   13cfc:	d003      	beq.n	13d06 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   13cfe:	4903      	ldr	r1, [pc, #12]	; (13d0c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   13d00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   13d04:	600a      	str	r2, [r1, #0]

00013d06 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   13d06:	4770      	bx	lr
	ldr r3, =_kernel
   13d08:	200217c0 	.word	0x200217c0
	ldr r1, =_SCS_ICSR
   13d0c:	e000ed04 	.word	0xe000ed04

00013d10 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   13d10:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   13d14:	4905      	ldr	r1, [pc, #20]	; (13d2c <sys_arch_reboot+0x1c>)
   13d16:	4b06      	ldr	r3, [pc, #24]	; (13d30 <sys_arch_reboot+0x20>)
   13d18:	68ca      	ldr	r2, [r1, #12]
   13d1a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   13d1e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   13d20:	60cb      	str	r3, [r1, #12]
   13d22:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   13d26:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   13d28:	e7fd      	b.n	13d26 <sys_arch_reboot+0x16>
   13d2a:	bf00      	nop
   13d2c:	e000ed00 	.word	0xe000ed00
   13d30:	05fa0004 	.word	0x05fa0004

00013d34 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   13d34:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13d36:	2120      	movs	r1, #32
   13d38:	4803      	ldr	r0, [pc, #12]	; (13d48 <z_arm_interrupt_init+0x14>)
   13d3a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   13d3c:	3301      	adds	r3, #1
   13d3e:	2b41      	cmp	r3, #65	; 0x41
   13d40:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   13d44:	d1f9      	bne.n	13d3a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   13d46:	4770      	bx	lr
   13d48:	e000e100 	.word	0xe000e100

00013d4c <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
   13d4c:	b538      	push	{r3, r4, r5, lr}
   13d4e:	4604      	mov	r4, r0
	__asm__ volatile(
   13d50:	f04f 0320 	mov.w	r3, #32
   13d54:	f3ef 8511 	mrs	r5, BASEPRI
   13d58:	f383 8811 	msr	BASEPRI, r3
   13d5c:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
   13d60:	f001 fc0a 	bl	15578 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
   13d64:	4b0a      	ldr	r3, [pc, #40]	; (13d90 <z_impl_k_thread_abort+0x44>)
   13d66:	689b      	ldr	r3, [r3, #8]
   13d68:	42a3      	cmp	r3, r4
   13d6a:	d10b      	bne.n	13d84 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   13d6c:	4b09      	ldr	r3, [pc, #36]	; (13d94 <z_impl_k_thread_abort+0x48>)
   13d6e:	685a      	ldr	r2, [r3, #4]
   13d70:	f3c2 0208 	ubfx	r2, r2, #0, #9
   13d74:	b912      	cbnz	r2, 13d7c <z_impl_k_thread_abort+0x30>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
   13d76:	4628      	mov	r0, r5
   13d78:	f7ff fc2a 	bl	135d0 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13d7c:	685a      	ldr	r2, [r3, #4]
   13d7e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   13d82:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
   13d84:	4628      	mov	r0, r5
}
   13d86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
   13d8a:	f013 b9b0 	b.w	270ee <z_reschedule_irqlock>
   13d8e:	bf00      	nop
   13d90:	200217c0 	.word	0x200217c0
   13d94:	e000ed00 	.word	0xe000ed00

00013d98 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   13d98:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   13d9a:	4b0e      	ldr	r3, [pc, #56]	; (13dd4 <z_arm_configure_static_mpu_regions+0x3c>)
{
   13d9c:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   13d9e:	9302      	str	r3, [sp, #8]
   13da0:	4b0d      	ldr	r3, [pc, #52]	; (13dd8 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   13da2:	4c0e      	ldr	r4, [pc, #56]	; (13ddc <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   13da4:	9303      	str	r3, [sp, #12]
   13da6:	4b0e      	ldr	r3, [pc, #56]	; (13de0 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   13da8:	4a0e      	ldr	r2, [pc, #56]	; (13de4 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
   13daa:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   13dac:	ab02      	add	r3, sp, #8
   13dae:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   13db0:	a801      	add	r0, sp, #4
   13db2:	4623      	mov	r3, r4
   13db4:	2101      	movs	r1, #1
   13db6:	f000 f93d 	bl	14034 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   13dba:	2300      	movs	r3, #0
   13dbc:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   13dbe:	4b0a      	ldr	r3, [pc, #40]	; (13de8 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   13dc0:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   13dc2:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   13dc4:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   13dc6:	9305      	str	r3, [sp, #20]
   13dc8:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   13dca:	f000 f93d 	bl	14048 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   13dce:	b008      	add	sp, #32
   13dd0:	bd10      	pop	{r4, pc}
   13dd2:	bf00      	nop
   13dd4:	20020000 	.word	0x20020000
   13dd8:	00000000 	.word	0x00000000
   13ddc:	20040000 	.word	0x20040000
   13de0:	00010006 	.word	0x00010006
   13de4:	20020000 	.word	0x20020000
   13de8:	20020180 	.word	0x20020180

00013dec <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
   13dec:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   13dee:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   13df0:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   13df2:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   13df6:	f004 031f 	and.w	r3, r4, #31
   13dfa:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   13dfc:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   13dfe:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   13e00:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   13e04:	4904      	ldr	r1, [pc, #16]	; (13e18 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   13e06:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   13e0a:	f043 0301 	orr.w	r3, r3, #1
   13e0e:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   13e10:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   13e12:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   13e14:	bd10      	pop	{r4, pc}
   13e16:	bf00      	nop
   13e18:	e000ed90 	.word	0xe000ed90

00013e1c <region_allocate_and_init.part.0>:
#include <arm_mpu_v8_internal.h>
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const u8_t index,
   13e1c:	b508      	push	{r3, lr}
   13e1e:	4a07      	ldr	r2, [pc, #28]	; (13e3c <region_allocate_and_init.part.0+0x20>)
   13e20:	4b07      	ldr	r3, [pc, #28]	; (13e40 <region_allocate_and_init.part.0+0x24>)
   13e22:	4601      	mov	r1, r0
   13e24:	1ad2      	subs	r2, r2, r3
   13e26:	08d2      	lsrs	r2, r2, #3
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   13e28:	0192      	lsls	r2, r2, #6
   13e2a:	4806      	ldr	r0, [pc, #24]	; (13e44 <region_allocate_and_init.part.0+0x28>)
   13e2c:	f042 0201 	orr.w	r2, r2, #1
   13e30:	f012 fc25 	bl	2667e <log_1>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   13e34:	f06f 0015 	mvn.w	r0, #21
   13e38:	bd08      	pop	{r3, pc}
   13e3a:	bf00      	nop
   13e3c:	000317e0 	.word	0x000317e0
   13e40:	000317c8 	.word	0x000317c8
   13e44:	00033d76 	.word	0x00033d76

00013e48 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   13e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e4c:	4607      	mov	r7, r0
   13e4e:	4688      	mov	r8, r1
   13e50:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   13e52:	2600      	movs	r6, #0
	MPU->RNR = index;
   13e54:	4d56      	ldr	r5, [pc, #344]	; (13fb0 <mpu_configure_regions_and_partition.constprop.0+0x168>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   13e56:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   13e58:	4546      	cmp	r6, r8
   13e5a:	da35      	bge.n	13ec8 <mpu_configure_regions_and_partition.constprop.0+0x80>
		if (regions[i]->size == 0U) {
   13e5c:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
   13e60:	f8d3 9004 	ldr.w	r9, [r3, #4]
   13e64:	f1b9 0f00 	cmp.w	r9, #0
   13e68:	d051      	beq.n	13f0e <mpu_configure_regions_and_partition.constprop.0+0xc6>
		&&
   13e6a:	f1b9 0f1f 	cmp.w	r9, #31
   13e6e:	d91e      	bls.n	13eae <mpu_configure_regions_and_partition.constprop.0+0x66>
		&&
   13e70:	f019 0f1f 	tst.w	r9, #31
   13e74:	d11b      	bne.n	13eae <mpu_configure_regions_and_partition.constprop.0+0x66>
		((part->start &
   13e76:	f8d3 a000 	ldr.w	sl, [r3]
		&&
   13e7a:	f01a 0f1f 	tst.w	sl, #31
   13e7e:	d116      	bne.n	13eae <mpu_configure_regions_and_partition.constprop.0+0x66>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   13e80:	4650      	mov	r0, sl
   13e82:	f012 ffab 	bl	26ddc <arm_cmse_mpu_region_get>
   13e86:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   13e88:	eb09 000a 	add.w	r0, r9, sl
   13e8c:	3801      	subs	r0, #1
   13e8e:	f012 ffa5 	bl	26ddc <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   13e92:	4583      	cmp	fp, r0
   13e94:	d01c      	beq.n	13ed0 <mpu_configure_regions_and_partition.constprop.0+0x88>
	return -EINVAL;
   13e96:	f06f 0b15 	mvn.w	fp, #21
   13e9a:	4a46      	ldr	r2, [pc, #280]	; (13fb4 <mpu_configure_regions_and_partition.constprop.0+0x16c>)
   13e9c:	4b46      	ldr	r3, [pc, #280]	; (13fb8 <mpu_configure_regions_and_partition.constprop.0+0x170>)
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   13e9e:	4659      	mov	r1, fp
   13ea0:	1ad2      	subs	r2, r2, r3
   13ea2:	08d2      	lsrs	r2, r2, #3
   13ea4:	0192      	lsls	r2, r2, #6
   13ea6:	4845      	ldr	r0, [pc, #276]	; (13fbc <mpu_configure_regions_and_partition.constprop.0+0x174>)
   13ea8:	f042 0201 	orr.w	r2, r2, #1
   13eac:	e008      	b.n	13ec0 <mpu_configure_regions_and_partition.constprop.0+0x78>
			LOG_ERR("Partition %u: sanity check failed.", i);
   13eae:	4631      	mov	r1, r6
   13eb0:	4a40      	ldr	r2, [pc, #256]	; (13fb4 <mpu_configure_regions_and_partition.constprop.0+0x16c>)
   13eb2:	4b41      	ldr	r3, [pc, #260]	; (13fb8 <mpu_configure_regions_and_partition.constprop.0+0x170>)
   13eb4:	4842      	ldr	r0, [pc, #264]	; (13fc0 <mpu_configure_regions_and_partition.constprop.0+0x178>)
   13eb6:	1ad2      	subs	r2, r2, r3
   13eb8:	08d2      	lsrs	r2, r2, #3
   13eba:	0192      	lsls	r2, r2, #6
   13ebc:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Invalid underlying region index %u",
   13ec0:	f012 fbdd 	bl	2667e <log_1>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   13ec4:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   13ec8:	4620      	mov	r0, r4
   13eca:	b005      	add	sp, #20
   13ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   13ed0:	f11b 0f16 	cmn.w	fp, #22
   13ed4:	d0e1      	beq.n	13e9a <mpu_configure_regions_and_partition.constprop.0+0x52>
			(u_reg_index > (reg_index - 1))) {
   13ed6:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   13ed8:	455b      	cmp	r3, fp
   13eda:	dbde      	blt.n	13e9a <mpu_configure_regions_and_partition.constprop.0+0x52>
	MPU->RNR = index;
   13edc:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   13ee0:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
   13ee2:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   13ee6:	692b      	ldr	r3, [r5, #16]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   13ee8:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   13eec:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   13ef0:	f043 0a1f 	orr.w	sl, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   13ef4:	e9d1 3200 	ldrd	r3, r2, [r1]
   13ef8:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   13efa:	4298      	cmp	r0, r3
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   13efc:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
   13f00:	d118      	bne.n	13f34 <mpu_configure_regions_and_partition.constprop.0+0xec>
   13f02:	45ca      	cmp	sl, r9
   13f04:	d105      	bne.n	13f12 <mpu_configure_regions_and_partition.constprop.0+0xca>
			mpu_configure_region(u_reg_index, regions[i]);
   13f06:	fa5f f08b 	uxtb.w	r0, fp
   13f0a:	f012 ff46 	bl	26d9a <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   13f0e:	3601      	adds	r6, #1
   13f10:	e7a2      	b.n	13e58 <mpu_configure_regions_and_partition.constprop.0+0x10>
	MPU->RNR = index;
   13f12:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   13f16:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   13f18:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   13f1c:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   13f20:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   13f22:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
   13f24:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
   13f26:	f012 ff38 	bl	26d9a <mpu_configure_region>
			if (reg_index == -EINVAL) {
   13f2a:	f110 0f16 	cmn.w	r0, #22
   13f2e:	d0c9      	beq.n	13ec4 <mpu_configure_regions_and_partition.constprop.0+0x7c>
			reg_index++;
   13f30:	1c44      	adds	r4, r0, #1
   13f32:	e7ec      	b.n	13f0e <mpu_configure_regions_and_partition.constprop.0+0xc6>
	MPU->RNR = index;
   13f34:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   13f38:	692a      	ldr	r2, [r5, #16]
   13f3a:	3b01      	subs	r3, #1
   13f3c:	f023 031f 	bic.w	r3, r3, #31
   13f40:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   13f44:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   13f46:	45ca      	cmp	sl, r9
   13f48:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   13f4a:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   13f4c:	d0eb      	beq.n	13f26 <mpu_configure_regions_and_partition.constprop.0+0xde>
				mpu_configure_region(reg_index, regions[i]);
   13f4e:	f012 ff24 	bl	26d9a <mpu_configure_region>
			if (reg_index == -EINVAL) {
   13f52:	f110 0f16 	cmn.w	r0, #22
   13f56:	d0b5      	beq.n	13ec4 <mpu_configure_regions_and_partition.constprop.0+0x7c>
	MPU->RNR = index;
   13f58:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   13f5c:	68ea      	ldr	r2, [r5, #12]
   13f5e:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   13f62:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	attr->rbar = MPU->RBAR &
   13f66:	f362 0304 	bfi	r3, r2, #0, #5
   13f6a:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   13f6e:	692b      	ldr	r3, [r5, #16]
   13f70:	f89d 2008 	ldrb.w	r2, [sp, #8]
   13f74:	085b      	lsrs	r3, r3, #1
   13f76:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
   13f7a:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   13f7e:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   13f82:	e9d3 1300 	ldrd	r1, r3, [r3]
   13f86:	440b      	add	r3, r1
   13f88:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   13f8a:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   13f8e:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
   13f90:	4453      	add	r3, sl
   13f92:	eba3 0309 	sub.w	r3, r3, r9
				region_allocate_and_init(reg_index,
   13f96:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i]->start +
   13f98:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   13f9c:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
   13f9e:	9303      	str	r3, [sp, #12]
   13fa0:	d902      	bls.n	13fa8 <mpu_configure_regions_and_partition.constprop.0+0x160>
   13fa2:	f7ff ff3b 	bl	13e1c <region_allocate_and_init.part.0>
   13fa6:	e7c0      	b.n	13f2a <mpu_configure_regions_and_partition.constprop.0+0xe2>
	region_init(index, region_conf);
   13fa8:	4669      	mov	r1, sp
   13faa:	f7ff ff1f 	bl	13dec <region_init>
			if (reg_index == -EINVAL) {
   13fae:	e7bf      	b.n	13f30 <mpu_configure_regions_and_partition.constprop.0+0xe8>
   13fb0:	e000ed90 	.word	0xe000ed90
   13fb4:	000317e0 	.word	0x000317e0
   13fb8:	000317c8 	.word	0x000317c8
   13fbc:	00033dbf 	.word	0x00033dbf
   13fc0:	00033d9c 	.word	0x00033d9c

00013fc4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   13fc4:	2205      	movs	r2, #5
   13fc6:	4b03      	ldr	r3, [pc, #12]	; (13fd4 <arm_core_mpu_enable+0x10>)
   13fc8:	605a      	str	r2, [r3, #4]
   13fca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13fce:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   13fd2:	4770      	bx	lr
   13fd4:	e000ed90 	.word	0xe000ed90

00013fd8 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   13fd8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   13fdc:	2200      	movs	r2, #0
   13fde:	4b01      	ldr	r3, [pc, #4]	; (13fe4 <arm_core_mpu_disable+0xc>)
   13fe0:	605a      	str	r2, [r3, #4]
}
   13fe2:	4770      	bx	lr
   13fe4:	e000ed90 	.word	0xe000ed90

00013fe8 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
   13fe8:	b538      	push	{r3, r4, r5, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   13fea:	4c0e      	ldr	r4, [pc, #56]	; (14024 <arm_mpu_init+0x3c>)
   13fec:	6825      	ldr	r5, [r4, #0]
   13fee:	2d10      	cmp	r5, #16
   13ff0:	d814      	bhi.n	1401c <arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   13ff2:	f7ff fff1 	bl	13fd8 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   13ff6:	2000      	movs	r0, #0
	MPU->MAIR0 =
   13ff8:	4b0b      	ldr	r3, [pc, #44]	; (14028 <arm_mpu_init+0x40>)
   13ffa:	4a0c      	ldr	r2, [pc, #48]	; (1402c <arm_mpu_init+0x44>)
   13ffc:	631a      	str	r2, [r3, #48]	; 0x30
   13ffe:	4285      	cmp	r5, r0
   14000:	d105      	bne.n	1400e <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   14002:	4b0b      	ldr	r3, [pc, #44]	; (14030 <arm_mpu_init+0x48>)
   14004:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   14006:	f7ff ffdd 	bl	13fc4 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
   1400a:	2000      	movs	r0, #0
}
   1400c:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   1400e:	6861      	ldr	r1, [r4, #4]
   14010:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   14014:	f7ff feea 	bl	13dec <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   14018:	3001      	adds	r0, #1
   1401a:	e7f0      	b.n	13ffe <arm_mpu_init+0x16>
		return -1;
   1401c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14020:	e7f4      	b.n	1400c <arm_mpu_init+0x24>
   14022:	bf00      	nop
   14024:	00032e70 	.word	0x00032e70
   14028:	e000ed90 	.word	0xe000ed90
   1402c:	0044ffaa 	.word	0x0044ffaa
   14030:	20027121 	.word	0x20027121

00014034 <arm_core_mpu_configure_static_mpu_regions>:
{
   14034:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   14036:	4c03      	ldr	r4, [pc, #12]	; (14044 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   14038:	7822      	ldrb	r2, [r4, #0]
   1403a:	f7ff ff05 	bl	13e48 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   1403e:	7020      	strb	r0, [r4, #0]
}
   14040:	bd10      	pop	{r4, pc}
   14042:	bf00      	nop
   14044:	20027121 	.word	0x20027121

00014048 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   14048:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1404c:	4d26      	ldr	r5, [pc, #152]	; (140e8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
   1404e:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   14050:	4606      	mov	r6, r0
   14052:	f04f 0800 	mov.w	r8, #0
   14056:	46ab      	mov	fp, r5
	MPU->RNR = index;
   14058:	4f24      	ldr	r7, [pc, #144]	; (140ec <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1405a:	45d0      	cmp	r8, sl
   1405c:	da1b      	bge.n	14096 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   1405e:	f8d6 9004 	ldr.w	r9, [r6, #4]
   14062:	f1b9 0f00 	cmp.w	r9, #0
   14066:	d039      	beq.n	140dc <arm_core_mpu_mark_areas_for_dynamic_regions+0x94>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   14068:	6831      	ldr	r1, [r6, #0]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1406a:	4608      	mov	r0, r1
   1406c:	9101      	str	r1, [sp, #4]
   1406e:	f012 feb5 	bl	26ddc <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   14072:	9901      	ldr	r1, [sp, #4]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   14074:	4604      	mov	r4, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   14076:	eb09 0001 	add.w	r0, r9, r1
   1407a:	3801      	subs	r0, #1
   1407c:	f012 feae 	bl	26ddc <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   14080:	4284      	cmp	r4, r0
   14082:	f04f 0214 	mov.w	r2, #20
   14086:	4b1a      	ldr	r3, [pc, #104]	; (140f0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa8>)
   14088:	d008      	beq.n	1409c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   1408a:	f06f 0315 	mvn.w	r3, #21
   1408e:	fb02 f808 	mul.w	r8, r2, r8
   14092:	f84b 3008 	str.w	r3, [fp, r8]
}
   14096:	b003      	add	sp, #12
   14098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   1409c:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   140a0:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   140a2:	d0f8      	beq.n	14096 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   140a4:	7819      	ldrb	r1, [r3, #0]
   140a6:	42a1      	cmp	r1, r4
   140a8:	ddf5      	ble.n	14096 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
   140aa:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   140ae:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
   140b0:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
   140b2:	68fc      	ldr	r4, [r7, #12]
   140b4:	f100 0108 	add.w	r1, r0, #8
   140b8:	7b00      	ldrb	r0, [r0, #12]
   140ba:	f364 0004 	bfi	r0, r4, #0, #5
   140be:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   140c0:	6938      	ldr	r0, [r7, #16]
   140c2:	790c      	ldrb	r4, [r1, #4]
   140c4:	0840      	lsrs	r0, r0, #1
   140c6:	f360 1447 	bfi	r4, r0, #5, #3
   140ca:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   140cc:	68f9      	ldr	r1, [r7, #12]
   140ce:	f021 011f 	bic.w	r1, r1, #31
   140d2:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   140d4:	6939      	ldr	r1, [r7, #16]
   140d6:	f021 011f 	bic.w	r1, r1, #31
   140da:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   140dc:	f108 0801 	add.w	r8, r8, #1
   140e0:	3514      	adds	r5, #20
   140e2:	360c      	adds	r6, #12
   140e4:	e7b9      	b.n	1405a <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   140e6:	bf00      	nop
   140e8:	20021694 	.word	0x20021694
   140ec:	e000ed90 	.word	0xe000ed90
   140f0:	20027121 	.word	0x20027121

000140f4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   140f4:	4b01      	ldr	r3, [pc, #4]	; (140fc <__stdout_hook_install+0x8>)
   140f6:	6018      	str	r0, [r3, #0]
}
   140f8:	4770      	bx	lr
   140fa:	bf00      	nop
   140fc:	20020010 	.word	0x20020010

00014100 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   14100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14102:	4606      	mov	r6, r0
   14104:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   14106:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   14108:	4f06      	ldr	r7, [pc, #24]	; (14124 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   1410a:	42ac      	cmp	r4, r5
   1410c:	da08      	bge.n	14120 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   1410e:	683b      	ldr	r3, [r7, #0]
   14110:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   14112:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   14114:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   14116:	f104 0401 	add.w	r4, r4, #1
   1411a:	d001      	beq.n	14120 <z_impl_zephyr_read_stdin+0x20>
   1411c:	280d      	cmp	r0, #13
   1411e:	d1f4      	bne.n	1410a <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   14120:	4620      	mov	r0, r4
   14122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14124:	2002000c 	.word	0x2002000c

00014128 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   14128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1412a:	460d      	mov	r5, r1
   1412c:	4f09      	ldr	r7, [pc, #36]	; (14154 <z_impl_zephyr_write_stdout+0x2c>)
   1412e:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   14130:	f1c0 0401 	rsb	r4, r0, #1
   14134:	19a3      	adds	r3, r4, r6
   14136:	429d      	cmp	r5, r3
   14138:	dc01      	bgt.n	1413e <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   1413a:	4628      	mov	r0, r5
   1413c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   1413e:	7873      	ldrb	r3, [r6, #1]
   14140:	2b0a      	cmp	r3, #10
   14142:	d102      	bne.n	1414a <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   14144:	200d      	movs	r0, #13
   14146:	683b      	ldr	r3, [r7, #0]
   14148:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   1414a:	683b      	ldr	r3, [r7, #0]
   1414c:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   14150:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   14152:	e7ef      	b.n	14134 <z_impl_zephyr_write_stdout+0xc>
   14154:	20020010 	.word	0x20020010

00014158 <_exit>:

int _write(int fd, const void *buf, int nbytes)
{
	ARG_UNUSED(fd);

	return z_impl_zephyr_write_stdout(buf, nbytes);
   14158:	2105      	movs	r1, #5
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   1415a:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   1415c:	4801      	ldr	r0, [pc, #4]	; (14164 <_exit+0xc>)
   1415e:	f7ff ffe3 	bl	14128 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   14162:	e7fe      	b.n	14162 <_exit+0xa>
   14164:	00033de2 	.word	0x00033de2

00014168 <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
   14168:	b510      	push	{r4, lr}
   1416a:	4604      	mov	r4, r0
	void *ret, *ptr;

	sys_sem_take(&heap_sem, K_FOREVER);
   1416c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14170:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14174:	480a      	ldr	r0, [pc, #40]	; (141a0 <_sbrk+0x38>)
   14176:	f012 f98a 	bl	2648e <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
   1417a:	490a      	ldr	r1, [pc, #40]	; (141a4 <_sbrk+0x3c>)
   1417c:	680b      	ldr	r3, [r1, #0]
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   1417e:	18e0      	adds	r0, r4, r3
   14180:	4c09      	ldr	r4, [pc, #36]	; (141a8 <_sbrk+0x40>)
   14182:	f1c4 5200 	rsb	r2, r4, #536870912	; 0x20000000
   14186:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   1418a:	4290      	cmp	r0, r2
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
   1418c:	bf2e      	itee	cs
   1418e:	f04f 34ff 	movcs.w	r4, #4294967295	; 0xffffffff
	ptr = ((char *)HEAP_BASE) + heap_sz;
   14192:	18e4      	addcc	r4, r4, r3
		heap_sz += count;
   14194:	6008      	strcc	r0, [r1, #0]
	}

	sys_sem_give(&heap_sem);
   14196:	4802      	ldr	r0, [pc, #8]	; (141a0 <_sbrk+0x38>)
   14198:	f012 f974 	bl	26484 <sys_sem_give>

	return ret;
}
   1419c:	4620      	mov	r0, r4
   1419e:	bd10      	pop	{r4, pc}
   141a0:	20020148 	.word	0x20020148
   141a4:	200216a8 	.word	0x200216a8
   141a8:	2002a210 	.word	0x2002a210

000141ac <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(struct device *port)
{
   141ac:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   141ae:	4b09      	ldr	r3, [pc, #36]	; (141d4 <gpio_nrfx_init+0x28>)
   141b0:	781a      	ldrb	r2, [r3, #0]
   141b2:	b96a      	cbnz	r2, 141d0 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   141b4:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   141b6:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   141b8:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   141ba:	2105      	movs	r1, #5
   141bc:	f7ff fa66 	bl	1368c <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   141c0:	2031      	movs	r0, #49	; 0x31
   141c2:	f7ff fa53 	bl	1366c <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   141c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   141ca:	4b03      	ldr	r3, [pc, #12]	; (141d8 <gpio_nrfx_init+0x2c>)
   141cc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   141d0:	2000      	movs	r0, #0
   141d2:	bd08      	pop	{r3, pc}
   141d4:	20027122 	.word	0x20027122
   141d8:	40031000 	.word	0x40031000

000141dc <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   141dc:	4b29      	ldr	r3, [pc, #164]	; (14284 <gpio_nrfx_config+0xa8>)
{
   141de:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   141e0:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   141e2:	4829      	ldr	r0, [pc, #164]	; (14288 <gpio_nrfx_config+0xac>)
   141e4:	4013      	ands	r3, r2
   141e6:	4283      	cmp	r3, r0
   141e8:	d03d      	beq.n	14266 <gpio_nrfx_config+0x8a>
   141ea:	d80d      	bhi.n	14208 <gpio_nrfx_config+0x2c>
   141ec:	2b06      	cmp	r3, #6
   141ee:	d015      	beq.n	1421c <gpio_nrfx_config+0x40>
   141f0:	d805      	bhi.n	141fe <gpio_nrfx_config+0x22>
   141f2:	b19b      	cbz	r3, 1421c <gpio_nrfx_config+0x40>
   141f4:	2b02      	cmp	r3, #2
   141f6:	d038      	beq.n	1426a <gpio_nrfx_config+0x8e>
   141f8:	f06f 0015 	mvn.w	r0, #21
   141fc:	e032      	b.n	14264 <gpio_nrfx_config+0x88>
   141fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   14202:	d1f9      	bne.n	141f8 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   14204:	2301      	movs	r3, #1
   14206:	e009      	b.n	1421c <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   14208:	4820      	ldr	r0, [pc, #128]	; (1428c <gpio_nrfx_config+0xb0>)
   1420a:	4283      	cmp	r3, r0
   1420c:	d02f      	beq.n	1426e <gpio_nrfx_config+0x92>
   1420e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   14212:	d02e      	beq.n	14272 <gpio_nrfx_config+0x96>
   14214:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   14218:	d1ee      	bne.n	141f8 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   1421a:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   1421c:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_PULLUP;
   1421e:	bf4c      	ite	mi
   14220:	2503      	movmi	r5, #3
		pull = NRF_GPIO_PIN_NOPULL;
   14222:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   14226:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   1422a:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   1422c:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   14230:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   14234:	d506      	bpl.n	14244 <gpio_nrfx_config+0x68>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   14236:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1423a:	6877      	ldr	r7, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1423c:	d01b      	beq.n	14276 <gpio_nrfx_config+0x9a>
			nrf_gpio_port_out_set(reg, BIT(pin));
   1423e:	2201      	movs	r2, #1
   14240:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   14242:	60ba      	str	r2, [r7, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   14244:	7a32      	ldrb	r2, [r6, #8]
   14246:	f001 011f 	and.w	r1, r1, #31
   1424a:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1424e:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
	return 0;
   14252:	2000      	movs	r0, #0
   14254:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   14258:	4a0d      	ldr	r2, [pc, #52]	; (14290 <gpio_nrfx_config+0xb4>)
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1425a:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1425e:	3180      	adds	r1, #128	; 0x80
   14260:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   14264:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   14266:	2307      	movs	r3, #7
   14268:	e7d8      	b.n	1421c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   1426a:	2304      	movs	r3, #4
   1426c:	e7d6      	b.n	1421c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   1426e:	2305      	movs	r3, #5
   14270:	e7d4      	b.n	1421c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   14272:	2303      	movs	r3, #3
   14274:	e7d2      	b.n	1421c <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   14276:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   14278:	bf42      	ittt	mi
   1427a:	2201      	movmi	r2, #1
   1427c:	408a      	lslmi	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   1427e:	60fa      	strmi	r2, [r7, #12]
}
   14280:	e7e0      	b.n	14244 <gpio_nrfx_config+0x68>
   14282:	bf00      	nop
   14284:	00f00006 	.word	0x00f00006
   14288:	00100006 	.word	0x00100006
   1428c:	00400002 	.word	0x00400002
   14290:	40842500 	.word	0x40842500

00014294 <gpiote_pin_int_cfg>:
{
   14294:	b570      	push	{r4, r5, r6, lr}
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   14296:	6843      	ldr	r3, [r0, #4]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   14298:	4c4c      	ldr	r4, [pc, #304]	; (143cc <gpiote_pin_int_cfg+0x138>)
   1429a:	7a1a      	ldrb	r2, [r3, #8]
   1429c:	f001 031f 	and.w	r3, r1, #31
   142a0:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   142a4:	2200      	movs	r2, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   142a6:	68c6      	ldr	r6, [r0, #12]
   142a8:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
   142ac:	b2c0      	uxtb	r0, r0
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   142ae:	f502 75a2 	add.w	r5, r2, #324	; 0x144
   142b2:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   142b6:	f3c5 2504 	ubfx	r5, r5, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   142ba:	42ab      	cmp	r3, r5
   142bc:	d16c      	bne.n	14398 <gpiote_pin_int_cfg+0x104>
		    && (intenset & BIT(i))) {
   142be:	fa20 f502 	lsr.w	r5, r0, r2
   142c2:	07ed      	lsls	r5, r5, #31
   142c4:	d568      	bpl.n	14398 <gpiote_pin_int_cfg+0x104>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   142c6:	0090      	lsls	r0, r2, #2
   142c8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   142cc:	f500 3044 	add.w	r0, r0, #200704	; 0x31000
   142d0:	f8d0 5510 	ldr.w	r5, [r0, #1296]	; 0x510
   142d4:	f025 0501 	bic.w	r5, r5, #1
   142d8:	f8c0 5510 	str.w	r5, [r0, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   142dc:	2001      	movs	r0, #1
   142de:	fa00 f202 	lsl.w	r2, r0, r2
    p_reg->INTENCLR = mask;
   142e2:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   142e6:	4d3a      	ldr	r5, [pc, #232]	; (143d0 <gpiote_pin_int_cfg+0x13c>)
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   142e8:	68f0      	ldr	r0, [r6, #12]
   142ea:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   142ee:	f8d5 2200 	ldr.w	r2, [r5, #512]	; 0x200
   142f2:	40c8      	lsrs	r0, r1
   142f4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
   142f8:	f010 0001 	ands.w	r0, r0, #1
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   142fc:	f8c5 2200 	str.w	r2, [r5, #512]	; 0x200
   14300:	d049      	beq.n	14396 <gpiote_pin_int_cfg+0x102>
   14302:	6930      	ldr	r0, [r6, #16]
   14304:	40c8      	lsrs	r0, r1
   14306:	f010 0001 	ands.w	r0, r0, #1
   1430a:	d044      	beq.n	14396 <gpiote_pin_int_cfg+0x102>
		if (data->trig_edge & BIT(pin)) {
   1430c:	69b0      	ldr	r0, [r6, #24]
   1430e:	40c8      	lsrs	r0, r1
   14310:	f010 0001 	ands.w	r0, r0, #1
   14314:	d04a      	beq.n	143ac <gpiote_pin_int_cfg+0x118>
			if (data->double_edge & BIT(pin)) {
   14316:	69f2      	ldr	r2, [r6, #28]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   14318:	2500      	movs	r5, #0
			if (data->double_edge & BIT(pin)) {
   1431a:	40ca      	lsrs	r2, r1
   1431c:	07d2      	lsls	r2, r2, #31
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1431e:	bf4f      	iteee	mi
   14320:	2203      	movmi	r2, #3
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   14322:	6972      	ldrpl	r2, [r6, #20]
   14324:	40ca      	lsrpl	r2, r1
   14326:	f002 0201 	andpl.w	r2, r2, #1
   1432a:	bf5c      	itt	pl
   1432c:	f1c2 0202 	rsbpl	r2, r2, #2
   14330:	b2d2      	uxtbpl	r2, r2
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   14332:	f505 71a2 	add.w	r1, r5, #324	; 0x144
   14336:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
   1433a:	f010 0003 	ands.w	r0, r0, #3
   1433e:	d12f      	bne.n	143a0 <gpiote_pin_int_cfg+0x10c>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   14340:	00a9      	lsls	r1, r5, #2
   14342:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   14346:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   1434a:	f8d1 6510 	ldr.w	r6, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1434e:	021b      	lsls	r3, r3, #8
   14350:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   14354:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
   14358:	f426 7640 	bic.w	r6, r6, #768	; 0x300
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1435c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
			nrf_gpiote_event_t evt =
   14360:	f105 0340 	add.w	r3, r5, #64	; 0x40
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   14364:	f8c1 6510 	str.w	r6, [r1, #1296]	; 0x510
   14368:	009b      	lsls	r3, r3, #2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1436a:	f8d1 6510 	ldr.w	r6, [r1, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   1436e:	b29b      	uxth	r3, r3
   14370:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   14374:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14378:	4332      	orrs	r2, r6
   1437a:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1437e:	6018      	str	r0, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   14380:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
   14384:	f043 0301 	orr.w	r3, r3, #1
   14388:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   1438c:	2301      	movs	r3, #1
   1438e:	fa03 f505 	lsl.w	r5, r3, r5
    p_reg->INTENSET = mask;
   14392:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
}
   14396:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   14398:	3201      	adds	r2, #1
   1439a:	2a08      	cmp	r2, #8
   1439c:	d187      	bne.n	142ae <gpiote_pin_int_cfg+0x1a>
   1439e:	e7a2      	b.n	142e6 <gpiote_pin_int_cfg+0x52>
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   143a0:	3501      	adds	r5, #1
   143a2:	2d08      	cmp	r5, #8
   143a4:	d1c5      	bne.n	14332 <gpiote_pin_int_cfg+0x9e>
	return -ENODEV;
   143a6:	f06f 0012 	mvn.w	r0, #18
   143aa:	e7f4      	b.n	14396 <gpiote_pin_int_cfg+0x102>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   143ac:	6972      	ldr	r2, [r6, #20]
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   143ae:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
   143b2:	40ca      	lsrs	r2, r1
   143b4:	f002 0201 	and.w	r2, r2, #1
   143b8:	f1c2 0203 	rsb	r2, r2, #3
   143bc:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   143c0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
   143c4:	f8c5 2200 	str.w	r2, [r5, #512]	; 0x200
}
   143c8:	e7e5      	b.n	14396 <gpiote_pin_int_cfg+0x102>
   143ca:	bf00      	nop
   143cc:	40031000 	.word	0x40031000
   143d0:	40842500 	.word	0x40842500

000143d4 <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   143d4:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   143d8:	b470      	push	{r4, r5, r6}
	struct gpio_nrfx_data *data = get_port_data(port);
   143da:	68c4      	ldr	r4, [r0, #12]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   143dc:	d10f      	bne.n	143fe <gpio_nrfx_pin_interrupt_configure+0x2a>
	u32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   143de:	6845      	ldr	r5, [r0, #4]
   143e0:	7a2e      	ldrb	r6, [r5, #8]
   143e2:	f001 051f 	and.w	r5, r1, #31
   143e6:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   143ea:	4e1d      	ldr	r6, [pc, #116]	; (14460 <gpio_nrfx_pin_interrupt_configure+0x8c>)
   143ec:	3580      	adds	r5, #128	; 0x80
   143ee:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   143f2:	07ed      	lsls	r5, r5, #31
   143f4:	d507      	bpl.n	14406 <gpio_nrfx_pin_interrupt_configure+0x32>
}
   143f6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   143fa:	bc70      	pop	{r4, r5, r6}
   143fc:	4770      	bx	lr
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   143fe:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   14402:	68e5      	ldr	r5, [r4, #12]
   14404:	d026      	beq.n	14454 <gpio_nrfx_pin_interrupt_configure+0x80>
   14406:	2501      	movs	r5, #1
   14408:	68e6      	ldr	r6, [r4, #12]
   1440a:	408d      	lsls	r5, r1
   1440c:	4335      	orrs	r5, r6
   1440e:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   14410:	2501      	movs	r5, #1
   14412:	6926      	ldr	r6, [r4, #16]
   14414:	408d      	lsls	r5, r1
   14416:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1441a:	bf14      	ite	ne
   1441c:	432e      	orrne	r6, r5
   1441e:	43ae      	biceq	r6, r5
   14420:	6126      	str	r6, [r4, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   14422:	69a6      	ldr	r6, [r4, #24]
   14424:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   14428:	69e2      	ldr	r2, [r4, #28]
   1442a:	bf0c      	ite	eq
   1442c:	432e      	orreq	r6, r5
   1442e:	43ae      	bicne	r6, r5
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   14430:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   14434:	bf0c      	ite	eq
   14436:	432a      	orreq	r2, r5
   14438:	43aa      	bicne	r2, r5
   1443a:	61e2      	str	r2, [r4, #28]
   1443c:	6962      	ldr	r2, [r4, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1443e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   14442:	bf0c      	ite	eq
   14444:	4315      	orreq	r5, r2
   14446:	ea22 0505 	bicne.w	r5, r2, r5
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1444a:	61a6      	str	r6, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1444c:	6165      	str	r5, [r4, #20]
}
   1444e:	bc70      	pop	{r4, r5, r6}
	return gpiote_pin_int_cfg(port, pin);
   14450:	f7ff bf20 	b.w	14294 <gpiote_pin_int_cfg>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   14454:	2601      	movs	r6, #1
   14456:	408e      	lsls	r6, r1
   14458:	ea25 0506 	bic.w	r5, r5, r6
   1445c:	e7d7      	b.n	1440e <gpio_nrfx_pin_interrupt_configure+0x3a>
   1445e:	bf00      	nop
   14460:	40842500 	.word	0x40842500

00014464 <gpiote_event_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14464:	494e      	ldr	r1, [pc, #312]	; (145a0 <gpiote_event_handler+0x13c>)
{
   14466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1446a:	680e      	ldr	r6, [r1, #0]
	if (port_event) {
   1446c:	2e00      	cmp	r6, #0
   1446e:	d05e      	beq.n	1452e <gpiote_event_handler+0xca>
	struct gpio_nrfx_data *data = get_port_data(port);
   14470:	4b4c      	ldr	r3, [pc, #304]	; (145a4 <gpiote_event_handler+0x140>)
	u32_t pin = 0U;
   14472:	2500      	movs	r5, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   14474:	68da      	ldr	r2, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   14476:	f8d3 c004 	ldr.w	ip, [r3, #4]
	u32_t out = data->int_en & data->pin_int_en;
   1447a:	e9d2 0303 	ldrd	r0, r3, [r2, #12]
   1447e:	4003      	ands	r3, r0
	out &= ~data->trig_edge & ~data->double_edge;
   14480:	e9d2 0406 	ldrd	r0, r4, [r2, #24]
   14484:	4320      	orrs	r0, r4
   14486:	ea23 0300 	bic.w	r3, r3, r0
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   1448a:	f8dc 0004 	ldr.w	r0, [ip, #4]
	u32_t pin_states = ~(port_in ^ data->int_active_level);
   1448e:	6952      	ldr	r2, [r2, #20]
    return p_reg->IN;
   14490:	6904      	ldr	r4, [r0, #16]
	u32_t bit = 1U << pin;
   14492:	2001      	movs	r0, #1
	u32_t pin_states = ~(port_in ^ data->int_active_level);
   14494:	4054      	eors	r4, r2
   14496:	f8df e118 	ldr.w	lr, [pc, #280]	; 145b0 <gpiote_event_handler+0x14c>
	u32_t out = pin_states & level_pins;
   1449a:	ea23 0404 	bic.w	r4, r3, r4
	while (level_pins) {
   1449e:	bb8b      	cbnz	r3, 14504 <gpiote_event_handler+0xa0>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   144a0:	600b      	str	r3, [r1, #0]
	u32_t fired_triggers[GPIO_COUNT] = {0};
   144a2:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   144a4:	2001      	movs	r0, #1
   144a6:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   144a8:	493f      	ldr	r1, [pc, #252]	; (145a8 <gpiote_event_handler+0x144>)
   144aa:	4d40      	ldr	r5, [pc, #256]	; (145ac <gpiote_event_handler+0x148>)
   144ac:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
   144b0:	fa00 fc03 	lsl.w	ip, r0, r3
   144b4:	ea1c 0f02 	tst.w	ip, r2
   144b8:	d00d      	beq.n	144d6 <gpiote_event_handler+0x72>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   144ba:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   144be:	b152      	cbz	r2, 144d6 <gpiote_event_handler+0x72>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   144c0:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   144c4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   144c8:	f845 7023 	str.w	r7, [r5, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   144cc:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   144d0:	fa00 f202 	lsl.w	r2, r0, r2
   144d4:	4314      	orrs	r4, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   144d6:	3301      	adds	r3, #1
   144d8:	2b08      	cmp	r3, #8
   144da:	d1e7      	bne.n	144ac <gpiote_event_handler+0x48>
	if (fired_triggers[0]) {
   144dc:	bb4c      	cbnz	r4, 14532 <gpiote_event_handler+0xce>
	if (port_event) {
   144de:	b17e      	cbz	r6, 14500 <gpiote_event_handler+0x9c>
	u32_t bit = 1U << pin;
   144e0:	2401      	movs	r4, #1
	u32_t pin = 0U;
   144e2:	2500      	movs	r5, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
   144e4:	4b2f      	ldr	r3, [pc, #188]	; (145a4 <gpiote_event_handler+0x140>)
   144e6:	4f32      	ldr	r7, [pc, #200]	; (145b0 <gpiote_event_handler+0x14c>)
   144e8:	68d8      	ldr	r0, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   144ea:	685e      	ldr	r6, [r3, #4]
	u32_t out = data->int_en & data->pin_int_en;
   144ec:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
   144f0:	4013      	ands	r3, r2
	out &= ~data->trig_edge & ~data->double_edge;
   144f2:	e9d0 2106 	ldrd	r2, r1, [r0, #24]
   144f6:	430a      	orrs	r2, r1
   144f8:	ea23 0302 	bic.w	r3, r3, r2
	while (level_pins) {
   144fc:	2b00      	cmp	r3, #0
   144fe:	d133      	bne.n	14568 <gpiote_event_handler+0x104>
}
   14500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   14504:	4203      	tst	r3, r0
   14506:	d00f      	beq.n	14528 <gpiote_event_handler+0xc4>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   14508:	f89c 7008 	ldrb.w	r7, [ip, #8]
   1450c:	f005 021f 	and.w	r2, r5, #31
   14510:	ea42 1247 	orr.w	r2, r2, r7, lsl #5
   14514:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   14518:	f8d2 7200 	ldr.w	r7, [r2, #512]	; 0x200
			level_pins &= ~bit;
   1451c:	ea23 0300 	bic.w	r3, r3, r0
   14520:	f427 3740 	bic.w	r7, r7, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   14524:	f8c2 7200 	str.w	r7, [r2, #512]	; 0x200
		++pin;
   14528:	3501      	adds	r5, #1
		bit <<= 1;
   1452a:	0040      	lsls	r0, r0, #1
   1452c:	e7b7      	b.n	1449e <gpiote_event_handler+0x3a>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   1452e:	4634      	mov	r4, r6
   14530:	e7b7      	b.n	144a2 <gpiote_event_handler+0x3e>
	struct gpio_nrfx_data *data = get_port_data(port);
   14532:	481c      	ldr	r0, [pc, #112]	; (145a4 <gpiote_event_handler+0x140>)
   14534:	68c7      	ldr	r7, [r0, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   14536:	6879      	ldr	r1, [r7, #4]
   14538:	2900      	cmp	r1, #0
   1453a:	d0d0      	beq.n	144de <gpiote_event_handler+0x7a>
	return node->next;
   1453c:	680d      	ldr	r5, [r1, #0]
			cb->handler(port, cb, cb->pin_mask & pins);
   1453e:	4680      	mov	r8, r0
   14540:	2d00      	cmp	r5, #0
   14542:	bf38      	it	cc
   14544:	2500      	movcc	r5, #0
		if ((cb->pin_mask & pins) & data->int_en) {
   14546:	688a      	ldr	r2, [r1, #8]
   14548:	693b      	ldr	r3, [r7, #16]
   1454a:	4022      	ands	r2, r4
   1454c:	421a      	tst	r2, r3
   1454e:	d002      	beq.n	14556 <gpiote_event_handler+0xf2>
			cb->handler(port, cb, cb->pin_mask & pins);
   14550:	4640      	mov	r0, r8
   14552:	684b      	ldr	r3, [r1, #4]
   14554:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   14556:	2d00      	cmp	r5, #0
   14558:	d0c1      	beq.n	144de <gpiote_event_handler+0x7a>
   1455a:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1455c:	4629      	mov	r1, r5
   1455e:	2b00      	cmp	r3, #0
   14560:	bf38      	it	cc
   14562:	2300      	movcc	r3, #0
   14564:	461d      	mov	r5, r3
   14566:	e7ee      	b.n	14546 <gpiote_event_handler+0xe2>
		if (level_pins & bit) {
   14568:	421c      	tst	r4, r3
   1456a:	d016      	beq.n	1459a <gpiote_event_handler+0x136>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1456c:	7a32      	ldrb	r2, [r6, #8]
   1456e:	f005 011f 	and.w	r1, r5, #31
   14572:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
	if ((BIT(pin) & data->int_active_level) != 0U) {
   14576:	6942      	ldr	r2, [r0, #20]
   14578:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1457c:	f8d1 c200 	ldr.w	ip, [r1, #512]	; 0x200
   14580:	40ea      	lsrs	r2, r5
   14582:	f002 0201 	and.w	r2, r2, #1
   14586:	f1c2 0203 	rsb	r2, r2, #3
   1458a:	f42c 3c40 	bic.w	ip, ip, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1458e:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
   14592:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
			level_pins &= ~bit;
   14596:	ea23 0304 	bic.w	r3, r3, r4
		++pin;
   1459a:	3501      	adds	r5, #1
		bit <<= 1;
   1459c:	0064      	lsls	r4, r4, #1
   1459e:	e7ad      	b.n	144fc <gpiote_event_handler+0x98>
   145a0:	4003117c 	.word	0x4003117c
   145a4:	20020100 	.word	0x20020100
   145a8:	40031000 	.word	0x40031000
   145ac:	40031100 	.word	0x40031100
   145b0:	40842500 	.word	0x40842500

000145b4 <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
   145b4:	2100      	movs	r1, #0
   145b6:	4802      	ldr	r0, [pc, #8]	; (145c0 <pwm_nrfx_get_cycles_per_sec+0xc>)
   145b8:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
   145bc:	2000      	movs	r0, #0
   145be:	4770      	bx	lr
   145c0:	00f42400 	.word	0x00f42400

000145c4 <pwm_nrfx_init>:

static int pwm_nrfx_init(struct device *dev)
{
	const struct pwm_nrfx_config *config = dev->config_info;

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
   145c4:	2300      	movs	r3, #0
{
   145c6:	b510      	push	{r4, lr}
   145c8:	4604      	mov	r4, r0
	const struct pwm_nrfx_config *config = dev->config_info;
   145ca:	6840      	ldr	r0, [r0, #4]
	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
   145cc:	461a      	mov	r2, r3
   145ce:	f100 0108 	add.w	r1, r0, #8
   145d2:	f000 fa8d 	bl	14af0 <nrfx_pwm_init>
					  &config->initial_config,
					  NULL,
					  NULL);
	if (result != NRFX_SUCCESS) {
   145d6:	4b09      	ldr	r3, [pc, #36]	; (145fc <pwm_nrfx_init+0x38>)
   145d8:	4298      	cmp	r0, r3
   145da:	d00d      	beq.n	145f8 <pwm_nrfx_init+0x34>
   145dc:	4b08      	ldr	r3, [pc, #32]	; (14600 <pwm_nrfx_init+0x3c>)
   145de:	4a09      	ldr	r2, [pc, #36]	; (14604 <pwm_nrfx_init+0x40>)
		LOG_ERR("Failed to initialize device: %s", dev->name);
   145e0:	4809      	ldr	r0, [pc, #36]	; (14608 <pwm_nrfx_init+0x44>)
   145e2:	1ad2      	subs	r2, r2, r3
   145e4:	08d2      	lsrs	r2, r2, #3
   145e6:	0192      	lsls	r2, r2, #6
   145e8:	6821      	ldr	r1, [r4, #0]
   145ea:	f042 0201 	orr.w	r2, r2, #1
   145ee:	f012 f846 	bl	2667e <log_1>
		return -EBUSY;
   145f2:	f06f 000f 	mvn.w	r0, #15
	}

	return 0;
}
   145f6:	bd10      	pop	{r4, pc}
	return 0;
   145f8:	2000      	movs	r0, #0
   145fa:	e7fc      	b.n	145f6 <pwm_nrfx_init+0x32>
   145fc:	0bad0000 	.word	0x0bad0000
   14600:	000317c8 	.word	0x000317c8
   14604:	000317f8 	.word	0x000317f8
   14608:	00033df7 	.word	0x00033df7

0001460c <pwm_nrfx_pin_set>:
{
   1460c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14610:	f89d 4020 	ldrb.w	r4, [sp, #32]
   14614:	460f      	mov	r7, r1
   14616:	4615      	mov	r5, r2
   14618:	4698      	mov	r8, r3
	const struct pwm_nrfx_config *config = dev->config_info;
   1461a:	6846      	ldr	r6, [r0, #4]
	struct pwm_nrfx_data *data = dev->driver_data;
   1461c:	68c1      	ldr	r1, [r0, #12]
	if (flags) {
   1461e:	2c00      	cmp	r4, #0
   14620:	d17f      	bne.n	14722 <pwm_nrfx_pin_set+0x116>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
   14622:	1df2      	adds	r2, r6, #7
		if (output_pins[i] != NRFX_PWM_PIN_NOT_USED
   14624:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   14628:	2bff      	cmp	r3, #255	; 0xff
   1462a:	d003      	beq.n	14634 <pwm_nrfx_pin_set+0x28>
		    && (pwm == (output_pins[i] & PWM_NRFX_CH_PIN_MASK))) {
   1462c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   14630:	429f      	cmp	r7, r3
   14632:	d079      	beq.n	14728 <pwm_nrfx_pin_set+0x11c>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
   14634:	3401      	adds	r4, #1
   14636:	b2e4      	uxtb	r4, r4
   14638:	2c04      	cmp	r4, #4
   1463a:	d1f3      	bne.n	14624 <pwm_nrfx_pin_set+0x18>
   1463c:	4a59      	ldr	r2, [pc, #356]	; (147a4 <pwm_nrfx_pin_set+0x198>)
   1463e:	4b5a      	ldr	r3, [pc, #360]	; (147a8 <pwm_nrfx_pin_set+0x19c>)
		LOG_ERR("PWM pin %d not enabled through DTS configuration.",
   14640:	4639      	mov	r1, r7
   14642:	1ad2      	subs	r2, r2, r3
   14644:	08d2      	lsrs	r2, r2, #3
   14646:	0192      	lsls	r2, r2, #6
   14648:	4858      	ldr	r0, [pc, #352]	; (147ac <pwm_nrfx_pin_set+0x1a0>)
   1464a:	f042 0201 	orr.w	r2, r2, #1
   1464e:	e045      	b.n	146dc <pwm_nrfx_pin_set+0xd0>
	was_stopped = !pwm_channel_is_active(channel, data) &&
   14650:	2000      	movs	r0, #0
   14652:	e079      	b.n	14748 <pwm_nrfx_pin_set+0x13c>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
   14654:	3301      	adds	r3, #1
   14656:	2b04      	cmp	r3, #4
   14658:	f040 8084 	bne.w	14764 <pwm_nrfx_pin_set+0x158>
   1465c:	462a      	mov	r2, r5
   1465e:	2300      	movs	r3, #0
		if (countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
   14660:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   14664:	fa5f fe83 	uxtb.w	lr, r3
   14668:	d22a      	bcs.n	146c0 <pwm_nrfx_pin_set+0xb4>
			data->prescaler     = prescaler;
   1466a:	f881 e00e 	strb.w	lr, [r1, #14]
			nrf_pwm_configure(config->pwm.p_registers,
   1466e:	f8d6 e000 	ldr.w	lr, [r6]
			data->period_cycles = period_cycles;
   14672:	600d      	str	r5, [r1, #0]
			data->countertop    = (u16_t)countertop;
   14674:	818a      	strh	r2, [r1, #12]
                                         nrf_pwm_mode_t mode,
                                         uint16_t       top_value)
{
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);

    p_reg->PRESCALER  = base_clock;
   14676:	f8ce 350c 	str.w	r3, [lr, #1292]	; 0x50c
    p_reg->MODE       = mode;
   1467a:	f8ce c504 	str.w	ip, [lr, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
   1467e:	f8ce 2508 	str.w	r2, [lr, #1288]	; 0x508
	pulse_cycles = MIN(pulse_cycles, period_cycles);
   14682:	4545      	cmp	r5, r8
   14684:	462b      	mov	r3, r5
   14686:	bf28      	it	cs
   14688:	4643      	movcs	r3, r8
		| (pulse_cycles >> data->prescaler));
   1468a:	7b8a      	ldrb	r2, [r1, #14]
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
   1468c:	f40a 4a00 	and.w	sl, sl, #32768	; 0x8000
		| (pulse_cycles >> data->prescaler));
   14690:	fa23 f202 	lsr.w	r2, r3, r2
   14694:	ea42 020a 	orr.w	r2, r2, sl
   14698:	b292      	uxth	r2, r2
	data->current[channel] = (
   1469a:	f8a9 2004 	strh.w	r2, [r9, #4]
	u16_t pulse_cycle =
   1469e:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
   146a2:	b11a      	cbz	r2, 146ac <pwm_nrfx_pin_set+0xa0>
   146a4:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   146a8:	4594      	cmp	ip, r2
   146aa:	d81a      	bhi.n	146e2 <pwm_nrfx_pin_set+0xd6>
			config->initial_config.output_pins[channel]
   146ac:	1932      	adds	r2, r6, r4
   146ae:	f992 0008 	ldrsb.w	r0, [r2, #8]
		bool pulse_0_and_not_inverted =
   146b2:	4a3f      	ldr	r2, [pc, #252]	; (147b0 <pwm_nrfx_pin_set+0x1a4>)
			&& !channel_inverted_state;
   146b4:	b1c3      	cbz	r3, 146e8 <pwm_nrfx_pin_set+0xdc>
			&& channel_inverted_state;
   146b6:	4545      	cmp	r5, r8
   146b8:	d86f      	bhi.n	1479a <pwm_nrfx_pin_set+0x18e>
   146ba:	2800      	cmp	r0, #0
   146bc:	db16      	blt.n	146ec <pwm_nrfx_pin_set+0xe0>
   146be:	e06c      	b.n	1479a <pwm_nrfx_pin_set+0x18e>
		countertop >>= 1;
   146c0:	3301      	adds	r3, #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
   146c2:	2b08      	cmp	r3, #8
		countertop >>= 1;
   146c4:	ea4f 0252 	mov.w	r2, r2, lsr #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
   146c8:	d1ca      	bne.n	14660 <pwm_nrfx_pin_set+0x54>
	LOG_ERR("Prescaler for period_cycles %u not found.", period_cycles);
   146ca:	4629      	mov	r1, r5
   146cc:	4a35      	ldr	r2, [pc, #212]	; (147a4 <pwm_nrfx_pin_set+0x198>)
   146ce:	4b36      	ldr	r3, [pc, #216]	; (147a8 <pwm_nrfx_pin_set+0x19c>)
   146d0:	4838      	ldr	r0, [pc, #224]	; (147b4 <pwm_nrfx_pin_set+0x1a8>)
   146d2:	1ad2      	subs	r2, r2, r3
   146d4:	08d2      	lsrs	r2, r2, #3
   146d6:	0192      	lsls	r2, r2, #6
   146d8:	f042 0201 	orr.w	r2, r2, #1
   146dc:	f011 ffcf 	bl	2667e <log_1>
   146e0:	e055      	b.n	1478e <pwm_nrfx_pin_set+0x182>
		if (was_stopped) {
   146e2:	b988      	cbnz	r0, 14708 <pwm_nrfx_pin_set+0xfc>
	return 0;
   146e4:	2000      	movs	r0, #0
   146e6:	e054      	b.n	14792 <pwm_nrfx_pin_set+0x186>
			&& channel_inverted_state;
   146e8:	4545      	cmp	r5, r8
   146ea:	d854      	bhi.n	14796 <pwm_nrfx_pin_set+0x18a>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   146ec:	2301      	movs	r3, #1
   146ee:	fa03 f707 	lsl.w	r7, r3, r7
    p_reg->OUTCLR = clr_mask;
   146f2:	60d7      	str	r7, [r2, #12]
		if (!any_other_channel_is_active(channel, data)) {
   146f4:	4620      	mov	r0, r4
   146f6:	f012 fbfc 	bl	26ef2 <any_other_channel_is_active>
   146fa:	2800      	cmp	r0, #0
   146fc:	d1f2      	bne.n	146e4 <pwm_nrfx_pin_set+0xd8>
			nrfx_pwm_stop(&config->pwm, false);
   146fe:	4601      	mov	r1, r0
   14700:	4630      	mov	r0, r6
   14702:	f012 fc8d 	bl	27020 <nrfx_pwm_stop>
   14706:	e7ed      	b.n	146e4 <pwm_nrfx_pin_set+0xd8>
			while (!nrfx_pwm_is_stopped(&config->pwm)) {
   14708:	4630      	mov	r0, r6
   1470a:	f000 faab 	bl	14c64 <nrfx_pwm_is_stopped>
   1470e:	2800      	cmp	r0, #0
   14710:	d0fa      	beq.n	14708 <pwm_nrfx_pin_set+0xfc>
			nrfx_pwm_simple_playback(&config->pwm,
   14712:	2302      	movs	r3, #2
   14714:	2201      	movs	r2, #1
   14716:	4630      	mov	r0, r6
   14718:	f106 0118 	add.w	r1, r6, #24
   1471c:	f000 fa64 	bl	14be8 <nrfx_pwm_simple_playback>
   14720:	e7e0      	b.n	146e4 <pwm_nrfx_pin_set+0xd8>
		return -ENOTSUP;
   14722:	f06f 0085 	mvn.w	r0, #133	; 0x85
   14726:	e034      	b.n	14792 <pwm_nrfx_pin_set+0x186>
	u16_t pulse_cycle =
   14728:	eb01 0944 	add.w	r9, r1, r4, lsl #1
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
   1472c:	f8b9 a004 	ldrh.w	sl, [r9, #4]
	u16_t pulse_cycle =
   14730:	f3ca 030e 	ubfx	r3, sl, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
   14734:	b113      	cbz	r3, 1473c <pwm_nrfx_pin_set+0x130>
   14736:	898a      	ldrh	r2, [r1, #12]
   14738:	429a      	cmp	r2, r3
   1473a:	d889      	bhi.n	14650 <pwm_nrfx_pin_set+0x44>
		      !any_other_channel_is_active(channel, data);
   1473c:	4620      	mov	r0, r4
   1473e:	f012 fbd8 	bl	26ef2 <any_other_channel_is_active>
	was_stopped = !pwm_channel_is_active(channel, data) &&
   14742:	f080 0001 	eor.w	r0, r0, #1
   14746:	b2c0      	uxtb	r0, r0
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
   14748:	f896 c00e 	ldrb.w	ip, [r6, #14]
	if (period_cycles != data->period_cycles) {
   1474c:	680b      	ldr	r3, [r1, #0]
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
   1474e:	f1bc 0f01 	cmp.w	ip, #1
		period_cycles /= 2;
   14752:	bf04      	itt	eq
   14754:	086d      	lsreq	r5, r5, #1
		pulse_cycles /= 2;
   14756:	ea4f 0858 	moveq.w	r8, r8, lsr #1
	if (period_cycles != data->period_cycles) {
   1475a:	42ab      	cmp	r3, r5
   1475c:	d091      	beq.n	14682 <pwm_nrfx_pin_set+0x76>
   1475e:	2300      	movs	r3, #0
				data->current[i]
   14760:	f101 0e04 	add.w	lr, r1, #4
		if (i != channel) {
   14764:	b2da      	uxtb	r2, r3
   14766:	42a2      	cmp	r2, r4
   14768:	f43f af74 	beq.w	14654 <pwm_nrfx_pin_set+0x48>
			u16_t channel_pulse_cycle =
   1476c:	f83e 2013 	ldrh.w	r2, [lr, r3, lsl #1]
			if (channel_pulse_cycle > 0) {
   14770:	f3c2 020e 	ubfx	r2, r2, #0, #15
   14774:	2a00      	cmp	r2, #0
   14776:	f43f af6d 	beq.w	14654 <pwm_nrfx_pin_set+0x48>
   1477a:	490a      	ldr	r1, [pc, #40]	; (147a4 <pwm_nrfx_pin_set+0x198>)
   1477c:	4b0a      	ldr	r3, [pc, #40]	; (147a8 <pwm_nrfx_pin_set+0x19c>)
				LOG_ERR("Incompatible period.");
   1477e:	480e      	ldr	r0, [pc, #56]	; (147b8 <pwm_nrfx_pin_set+0x1ac>)
   14780:	1ac9      	subs	r1, r1, r3
   14782:	08c9      	lsrs	r1, r1, #3
   14784:	0189      	lsls	r1, r1, #6
   14786:	f041 0101 	orr.w	r1, r1, #1
   1478a:	f011 ff69 	bl	26660 <log_0>
	return -EINVAL;
   1478e:	f06f 0015 	mvn.w	r0, #21
}
   14792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (pulse_0_and_not_inverted || pulse_100_and_inverted) {
   14796:	2800      	cmp	r0, #0
   14798:	daa8      	bge.n	146ec <pwm_nrfx_pin_set+0xe0>
    p_reg->OUTSET = set_mask;
   1479a:	2301      	movs	r3, #1
   1479c:	fa03 f707 	lsl.w	r7, r3, r7
   147a0:	6097      	str	r7, [r2, #8]
}
   147a2:	e7a7      	b.n	146f4 <pwm_nrfx_pin_set+0xe8>
   147a4:	000317f8 	.word	0x000317f8
   147a8:	000317c8 	.word	0x000317c8
   147ac:	00033e56 	.word	0x00033e56
   147b0:	40842500 	.word	0x40842500
   147b4:	00033e2c 	.word	0x00033e2c
   147b8:	00033e17 	.word	0x00033e17

000147bc <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
   147bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   147be:	794b      	ldrb	r3, [r1, #5]
   147c0:	2b01      	cmp	r3, #1
   147c2:	d029      	beq.n	14818 <uarte_nrfx_configure+0x5c>
   147c4:	2b03      	cmp	r3, #3
   147c6:	d124      	bne.n	14812 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   147c8:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   147ca:	798b      	ldrb	r3, [r1, #6]
   147cc:	2b03      	cmp	r3, #3
   147ce:	d120      	bne.n	14812 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   147d0:	79cc      	ldrb	r4, [r1, #7]
   147d2:	b124      	cbz	r4, 147de <uarte_nrfx_configure+0x22>
   147d4:	2c01      	cmp	r4, #1
   147d6:	d11c      	bne.n	14812 <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   147d8:	6843      	ldr	r3, [r0, #4]
   147da:	791b      	ldrb	r3, [r3, #4]
   147dc:	b1cb      	cbz	r3, 14812 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   147de:	790a      	ldrb	r2, [r1, #4]
   147e0:	b112      	cbz	r2, 147e8 <uarte_nrfx_configure+0x2c>
   147e2:	2a02      	cmp	r2, #2
   147e4:	d115      	bne.n	14812 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   147e6:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   147e8:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   147ea:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   147ec:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   147f0:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   147f2:	d064      	beq.n	148be <uarte_nrfx_configure+0x102>
   147f4:	d82d      	bhi.n	14852 <uarte_nrfx_configure+0x96>
   147f6:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   147fa:	d063      	beq.n	148c4 <uarte_nrfx_configure+0x108>
   147fc:	d816      	bhi.n	1482c <uarte_nrfx_configure+0x70>
   147fe:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   14802:	d061      	beq.n	148c8 <uarte_nrfx_configure+0x10c>
   14804:	d80a      	bhi.n	1481c <uarte_nrfx_configure+0x60>
   14806:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1480a:	d060      	beq.n	148ce <uarte_nrfx_configure+0x112>
   1480c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   14810:	d060      	beq.n	148d4 <uarte_nrfx_configure+0x118>
   14812:	f06f 0085 	mvn.w	r0, #133	; 0x85
   14816:	e051      	b.n	148bc <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
   14818:	2600      	movs	r6, #0
   1481a:	e7d6      	b.n	147ca <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1481c:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   14820:	d05b      	beq.n	148da <uarte_nrfx_configure+0x11e>
   14822:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   14826:	d1f4      	bne.n	14812 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   14828:	4b36      	ldr	r3, [pc, #216]	; (14904 <uarte_nrfx_configure+0x148>)
   1482a:	e03c      	b.n	148a6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1482c:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   14830:	d056      	beq.n	148e0 <uarte_nrfx_configure+0x124>
   14832:	d807      	bhi.n	14844 <uarte_nrfx_configure+0x88>
   14834:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   14838:	d054      	beq.n	148e4 <uarte_nrfx_configure+0x128>
   1483a:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1483e:	d1e8      	bne.n	14812 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   14840:	4b31      	ldr	r3, [pc, #196]	; (14908 <uarte_nrfx_configure+0x14c>)
   14842:	e030      	b.n	148a6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   14844:	f647 2712 	movw	r7, #31250	; 0x7a12
   14848:	42bb      	cmp	r3, r7
   1484a:	d1e2      	bne.n	14812 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1484c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   14850:	e029      	b.n	148a6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   14852:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   14856:	d047      	beq.n	148e8 <uarte_nrfx_configure+0x12c>
   14858:	d813      	bhi.n	14882 <uarte_nrfx_configure+0xc6>
   1485a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1485e:	d046      	beq.n	148ee <uarte_nrfx_configure+0x132>
   14860:	d809      	bhi.n	14876 <uarte_nrfx_configure+0xba>
   14862:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   14866:	42bb      	cmp	r3, r7
   14868:	d043      	beq.n	148f2 <uarte_nrfx_configure+0x136>
   1486a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1486e:	d1d0      	bne.n	14812 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   14870:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   14874:	e017      	b.n	148a6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   14876:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1487a:	d1ca      	bne.n	14812 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1487c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   14880:	e011      	b.n	148a6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   14882:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   14886:	d037      	beq.n	148f8 <uarte_nrfx_configure+0x13c>
   14888:	d808      	bhi.n	1489c <uarte_nrfx_configure+0xe0>
   1488a:	4f20      	ldr	r7, [pc, #128]	; (1490c <uarte_nrfx_configure+0x150>)
   1488c:	42bb      	cmp	r3, r7
   1488e:	d036      	beq.n	148fe <uarte_nrfx_configure+0x142>
   14890:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   14894:	d1bd      	bne.n	14812 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   14896:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1489a:	e004      	b.n	148a6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1489c:	4f1c      	ldr	r7, [pc, #112]	; (14910 <uarte_nrfx_configure+0x154>)
   1489e:	42bb      	cmp	r3, r7
   148a0:	d1b7      	bne.n	14812 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   148a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   148a6:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   148aa:	4334      	orrs	r4, r6
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   148ac:	68c3      	ldr	r3, [r0, #12]
   148ae:	4322      	orrs	r2, r4
   148b0:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   148b2:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   148b6:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   148ba:	2000      	movs	r0, #0
}
   148bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   148be:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   148c2:	e7f0      	b.n	148a6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   148c4:	4b13      	ldr	r3, [pc, #76]	; (14914 <uarte_nrfx_configure+0x158>)
   148c6:	e7ee      	b.n	148a6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   148c8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   148cc:	e7eb      	b.n	148a6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
   148ce:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   148d2:	e7e8      	b.n	148a6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   148d4:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   148d8:	e7e5      	b.n	148a6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   148da:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   148de:	e7e2      	b.n	148a6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   148e0:	4b0d      	ldr	r3, [pc, #52]	; (14918 <uarte_nrfx_configure+0x15c>)
   148e2:	e7e0      	b.n	148a6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   148e4:	4b0d      	ldr	r3, [pc, #52]	; (1491c <uarte_nrfx_configure+0x160>)
   148e6:	e7de      	b.n	148a6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   148e8:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   148ec:	e7db      	b.n	148a6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   148ee:	4b0c      	ldr	r3, [pc, #48]	; (14920 <uarte_nrfx_configure+0x164>)
   148f0:	e7d9      	b.n	148a6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   148f2:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   148f6:	e7d6      	b.n	148a6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   148f8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   148fc:	e7d3      	b.n	148a6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   148fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   14902:	e7d0      	b.n	148a6 <uarte_nrfx_configure+0xea>
   14904:	0013b000 	.word	0x0013b000
   14908:	004ea000 	.word	0x004ea000
   1490c:	0003d090 	.word	0x0003d090
   14910:	000f4240 	.word	0x000f4240
   14914:	00275000 	.word	0x00275000
   14918:	0075c000 	.word	0x0075c000
   1491c:	003af000 	.word	0x003af000
   14920:	013a9000 	.word	0x013a9000

00014924 <uarte_instance_init.isra.0>:
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   14924:	2201      	movs	r2, #1
	.irq_update		= uarte_nrfx_irq_update,
	.irq_callback_set	= uarte_nrfx_irq_callback_set,
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int uarte_instance_init(struct device *dev,
   14926:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   14928:	2703      	movs	r7, #3
   1492a:	460d      	mov	r5, r1
	return config->uarte_regs;
   1492c:	6843      	ldr	r3, [r0, #4]
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	nrf_gpio_pin_write(config->pseltxd, 1);
   1492e:	6809      	ldr	r1, [r1, #0]
	return config->uarte_regs;
   14930:	681c      	ldr	r4, [r3, #0]
    p_reg->OUTSET = set_mask;
   14932:	4b21      	ldr	r3, [pc, #132]	; (149b8 <uarte_instance_init.isra.0+0x94>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   14934:	408a      	lsls	r2, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
   14936:	68c6      	ldr	r6, [r0, #12]
    p_reg->OUTSET = set_mask;
   14938:	609a      	str	r2, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1493a:	f101 0280 	add.w	r2, r1, #128	; 0x80
   1493e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   14942:	686a      	ldr	r2, [r5, #4]
   14944:	1c57      	adds	r7, r2, #1
   14946:	bf1e      	ittt	ne
   14948:	f04f 0c00 	movne.w	ip, #0
   1494c:	f102 0780 	addne.w	r7, r2, #128	; 0x80
   14950:	f843 c027 	strne.w	ip, [r3, r7, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
   14954:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
   14958:	68a9      	ldr	r1, [r5, #8]
    p_reg->PSEL.RXD = pselrxd;
   1495a:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
   1495e:	1c4a      	adds	r2, r1, #1
   14960:	d015      	beq.n	1498e <uarte_instance_init.isra.0+0x6a>
	    config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   14962:	68ea      	ldr	r2, [r5, #12]
	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
   14964:	1c57      	adds	r7, r2, #1
   14966:	d012      	beq.n	1498e <uarte_instance_init.isra.0+0x6a>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   14968:	2701      	movs	r7, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1496a:	f04f 0c03 	mov.w	ip, #3
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1496e:	4097      	lsls	r7, r2
    p_reg->OUTSET = set_mask;
   14970:	609f      	str	r7, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   14972:	f102 0780 	add.w	r7, r2, #128	; 0x80
   14976:	f843 c027 	str.w	ip, [r3, r7, lsl #2]
   1497a:	f04f 0c00 	mov.w	ip, #0
   1497e:	f101 0780 	add.w	r7, r1, #128	; 0x80
   14982:	f843 c027 	str.w	ip, [r3, r7, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   14986:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   1498a:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
		nrf_uarte_hwfc_pins_set(uarte,
					config->pselrts,
					config->pselcts);
	}

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1498e:	4631      	mov	r1, r6
   14990:	f7ff ff14 	bl	147bc <uarte_nrfx_configure>
	if (err) {
   14994:	b970      	cbnz	r0, 149b4 <uarte_instance_init.isra.0+0x90>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   14996:	2308      	movs	r3, #8
   14998:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	}
#endif
	/* Enable receiver and transmitter */
	nrf_uarte_enable(uarte);

	if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   1499c:	686b      	ldr	r3, [r5, #4]
   1499e:	3301      	adds	r3, #1
   149a0:	d008      	beq.n	149b4 <uarte_instance_init.isra.0+0x90>
NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    p_reg->RXD.MAXCNT = length;
   149a2:	2301      	movs	r3, #1
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   149a4:	360c      	adds	r6, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   149a6:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   149aa:	f8c4 6534 	str.w	r6, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   149ae:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   149b2:	6023      	str	r3, [r4, #0]
		/* switch off transmitter to save an energy */
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
	}
#endif
	return 0;
}
   149b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   149b6:	bf00      	nop
   149b8:	40842500 	.word	0x40842500

000149bc <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   149bc:	b530      	push	{r4, r5, lr}
   149be:	b085      	sub	sp, #20
   149c0:	4605      	mov	r5, r0
   149c2:	466c      	mov	r4, sp
   149c4:	4b04      	ldr	r3, [pc, #16]	; (149d8 <uarte_0_init+0x1c>)
   149c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   149c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   149cc:	4621      	mov	r1, r4
   149ce:	4628      	mov	r0, r5
   149d0:	f7ff ffa8 	bl	14924 <uarte_instance_init.isra.0>
   149d4:	b005      	add	sp, #20
   149d6:	bd30      	pop	{r4, r5, pc}
   149d8:	00031820 	.word	0x00031820

000149dc <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   149dc:	b530      	push	{r4, r5, lr}
   149de:	b085      	sub	sp, #20
   149e0:	4605      	mov	r5, r0
   149e2:	466c      	mov	r4, sp
   149e4:	4b04      	ldr	r3, [pc, #16]	; (149f8 <uarte_1_init+0x1c>)
   149e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   149e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   149ec:	4621      	mov	r1, r4
   149ee:	4628      	mov	r0, r5
   149f0:	f7ff ff98 	bl	14924 <uarte_instance_init.isra.0>
   149f4:	b005      	add	sp, #20
   149f6:	bd30      	pop	{r4, r5, pc}
   149f8:	00031830 	.word	0x00031830

000149fc <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   149fc:	b508      	push	{r3, lr}
	z_impl_log_panic();
   149fe:	f7fd ffe5 	bl	129cc <z_impl_log_panic>
   14a02:	4b06      	ldr	r3, [pc, #24]	; (14a1c <k_sys_fatal_error_handler+0x20>)
   14a04:	4906      	ldr	r1, [pc, #24]	; (14a20 <k_sys_fatal_error_handler+0x24>)
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   14a06:	4807      	ldr	r0, [pc, #28]	; (14a24 <k_sys_fatal_error_handler+0x28>)
   14a08:	1ac9      	subs	r1, r1, r3
   14a0a:	08c9      	lsrs	r1, r1, #3
   14a0c:	0189      	lsls	r1, r1, #6
   14a0e:	f041 0101 	orr.w	r1, r1, #1
   14a12:	f011 fe25 	bl	26660 <log_0>
	sys_arch_reboot(0);
   14a16:	2000      	movs	r0, #0
   14a18:	f7ff f97a 	bl	13d10 <sys_arch_reboot>

	CODE_UNREACHABLE;
   14a1c:	000317c8 	.word	0x000317c8
   14a20:	000317d0 	.word	0x000317d0
   14a24:	00033eb5 	.word	0x00033eb5

00014a28 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(struct device *dev)
{
   14a28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   14a2c:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   14a2e:	4c21      	ldr	r4, [pc, #132]	; (14ab4 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							u32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const u32_t ext_api_magic[] = {EXT_API_MAGIC};
   14a30:	4e21      	ldr	r6, [pc, #132]	; (14ab8 <check_ext_api_requests+0x90>)
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   14a32:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   14a36:	f8df 9088 	ldr.w	r9, [pc, #136]	; 14ac0 <check_ext_api_requests+0x98>
{
   14a3a:	b085      	sub	sp, #20
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   14a3c:	45a8      	cmp	r8, r5
   14a3e:	d803      	bhi.n	14a48 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   14a40:	2000      	movs	r0, #0
   14a42:	b005      	add	sp, #20
   14a44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((u32_t)*(ext_api_req->ext_api))
   14a48:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14a4a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   14a4e:	681f      	ldr	r7, [r3, #0]
   14a50:	ab01      	add	r3, sp, #4
   14a52:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   14a56:	220c      	movs	r2, #12
   14a58:	4619      	mov	r1, r3
   14a5a:	4638      	mov	r0, r7
   14a5c:	f01c f9c2 	bl	30de4 <memcmp>
   14a60:	b990      	cbnz	r0, 14a88 <check_ext_api_requests+0x60>
   14a62:	b18f      	cbz	r7, 14a88 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   14a64:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const u32_t req_id = ext_api_req->request.ext_api_id;
   14a66:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   14a68:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   14a6a:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   14a6c:	4291      	cmp	r1, r2
   14a6e:	d10b      	bne.n	14a88 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   14a70:	699a      	ldr	r2, [r3, #24]
	const u32_t req_min_version = ext_api_req->request.ext_api_version;
   14a72:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   14a74:	4291      	cmp	r1, r2
   14a76:	d807      	bhi.n	14a88 <check_ext_api_requests+0x60>
	const u32_t req_max_version = ext_api_req->ext_api_max_version;
   14a78:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   14a7a:	4291      	cmp	r1, r2
   14a7c:	d904      	bls.n	14a88 <check_ext_api_requests+0x60>
	const u32_t req_flags = ext_api_req->request.ext_api_flags;
   14a7e:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   14a80:	695b      	ldr	r3, [r3, #20]
   14a82:	ea32 0303 	bics.w	r3, r2, r3
   14a86:	d00a      	beq.n	14a9e <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   14a88:	6a27      	ldr	r7, [r4, #32]
   14a8a:	b167      	cbz	r7, 14aa6 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   14a8c:	480b      	ldr	r0, [pc, #44]	; (14abc <check_ext_api_requests+0x94>)
   14a8e:	f011 fcdf 	bl	26450 <printk>
			k_panic();
   14a92:	4040      	eors	r0, r0
   14a94:	f380 8811 	msr	BASEPRI, r0
   14a98:	f04f 0004 	mov.w	r0, #4
   14a9c:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   14a9e:	68e3      	ldr	r3, [r4, #12]
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   14aa0:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   14aa2:	441c      	add	r4, r3
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   14aa4:	e7ca      	b.n	14a3c <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   14aa6:	4648      	mov	r0, r9
   14aa8:	f011 fcd2 	bl	26450 <printk>
			*ext_api_req->ext_api = NULL;
   14aac:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14aae:	601f      	str	r7, [r3, #0]
   14ab0:	e7f5      	b.n	14a9e <check_ext_api_requests+0x76>
   14ab2:	bf00      	nop
   14ab4:	0000c23c 	.word	0x0000c23c
   14ab8:	00031840 	.word	0x00031840
   14abc:	00033ed2 	.word	0x00033ed2
   14ac0:	00033efb 	.word	0x00033efb

00014ac4 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   14ac4:	4a07      	ldr	r2, [pc, #28]	; (14ae4 <SystemInit+0x20>)
   14ac6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   14aca:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   14ace:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   14ad2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14ad6:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   14ada:	4b03      	ldr	r3, [pc, #12]	; (14ae8 <SystemInit+0x24>)
   14adc:	4a03      	ldr	r2, [pc, #12]	; (14aec <SystemInit+0x28>)
   14ade:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   14ae0:	4770      	bx	lr
   14ae2:	bf00      	nop
   14ae4:	e000ed00 	.word	0xe000ed00
   14ae8:	20020044 	.word	0x20020044
   14aec:	03d09000 	.word	0x03d09000

00014af0 <nrfx_pwm_init>:

nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const *        p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler,
                         void *                    p_context)
{
   14af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   14af4:	260c      	movs	r6, #12
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   14af6:	7905      	ldrb	r5, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   14af8:	4c37      	ldr	r4, [pc, #220]	; (14bd8 <nrfx_pwm_init+0xe8>)
   14afa:	436e      	muls	r6, r5
   14afc:	19a7      	adds	r7, r4, r6
   14afe:	f897 c008 	ldrb.w	ip, [r7, #8]
{
   14b02:	b085      	sub	sp, #20
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   14b04:	f1bc 0f00 	cmp.w	ip, #0
   14b08:	d164      	bne.n	14bd4 <nrfx_pwm_init+0xe4>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    p_cb->handler = handler;
   14b0a:	51a2      	str	r2, [r4, r6]
    p_cb->p_context = p_context;
   14b0c:	f04f 0a01 	mov.w	sl, #1
   14b10:	466e      	mov	r6, sp
   14b12:	f04f 0b03 	mov.w	fp, #3
   14b16:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 14be4 <nrfx_pwm_init+0xf4>
   14b1a:	607b      	str	r3, [r7, #4]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
   14b1c:	f101 0903 	add.w	r9, r1, #3
   14b20:	1e4f      	subs	r7, r1, #1
        uint8_t output_pin = p_config->output_pins[i];
   14b22:	f817 ef01 	ldrb.w	lr, [r7, #1]!
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
   14b26:	f1be 0fff 	cmp.w	lr, #255	; 0xff
   14b2a:	d04f      	beq.n	14bcc <nrfx_pwm_init+0xdc>
            if (!p_config->skip_gpio_cfg)
   14b2c:	f891 800c 	ldrb.w	r8, [r1, #12]
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
   14b30:	f02e 0380 	bic.w	r3, lr, #128	; 0x80
   14b34:	6033      	str	r3, [r6, #0]
            if (!p_config->skip_gpio_cfg)
   14b36:	f1b8 0f00 	cmp.w	r8, #0
   14b3a:	d10c      	bne.n	14b56 <nrfx_pwm_init+0x66>
                if (inverted)
   14b3c:	fa0a f803 	lsl.w	r8, sl, r3
   14b40:	f01e 0f80 	tst.w	lr, #128	; 0x80
   14b44:	f103 0380 	add.w	r3, r3, #128	; 0x80
    p_reg->OUTSET = set_mask;
   14b48:	bf14      	ite	ne
   14b4a:	f8cc 8008 	strne.w	r8, [ip, #8]
    p_reg->OUTCLR = clr_mask;
   14b4e:	f8cc 800c 	streq.w	r8, [ip, #12]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   14b52:	f84c b023 	str.w	fp, [ip, r3, lsl #2]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
   14b56:	454f      	cmp	r7, r9
   14b58:	f106 0604 	add.w	r6, r6, #4
   14b5c:	d1e1      	bne.n	14b22 <nrfx_pwm_init+0x32>
    nrf_pwm_pins_set(p_instance->p_registers, out_pins);
   14b5e:	6800      	ldr	r0, [r0, #0]
        p_reg->PSEL.OUT[i] = out_pins[i];
   14b60:	9b00      	ldr	r3, [sp, #0]
   14b62:	f8c0 3560 	str.w	r3, [r0, #1376]	; 0x560
   14b66:	9b01      	ldr	r3, [sp, #4]
   14b68:	f8c0 3564 	str.w	r3, [r0, #1380]	; 0x564
   14b6c:	9b02      	ldr	r3, [sp, #8]
   14b6e:	f8c0 3568 	str.w	r3, [r0, #1384]	; 0x568
   14b72:	9b03      	ldr	r3, [sp, #12]
   14b74:	f8c0 356c 	str.w	r3, [r0, #1388]	; 0x56c
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
   14b78:	2301      	movs	r3, #1
   14b7a:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500

    configure_pins(p_instance, p_config);

    nrf_pwm_enable(p_instance->p_registers);
    nrf_pwm_configure(p_instance->p_registers,
   14b7e:	798e      	ldrb	r6, [r1, #6]
   14b80:	890b      	ldrh	r3, [r1, #8]
    p_reg->PRESCALER  = base_clock;
   14b82:	794f      	ldrb	r7, [r1, #5]
   14b84:	f8c0 750c 	str.w	r7, [r0, #1292]	; 0x50c
    p_reg->MODE       = mode;
   14b88:	f8c0 6504 	str.w	r6, [r0, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
   14b8c:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type *     p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
   14b90:	894b      	ldrh	r3, [r1, #10]
   14b92:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    p_reg->SHORTS = mask;
   14b96:	2300      	movs	r3, #0
   14b98:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_reg->INTEN = mask;
   14b9c:	f8c0 3300 	str.w	r3, [r0, #768]	; 0x300
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14ba0:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   14ba4:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
   14ba8:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   14bac:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    // handler is not used.
#if defined(USE_DMA_ISSUE_WORKAROUND)
    NRFX_IRQ_PRIORITY_SET(DMA_ISSUE_EGU_IRQn, p_config->irq_priority);
    NRFX_IRQ_ENABLE(DMA_ISSUE_EGU_IRQn);
#else
    if (p_cb->handler)
   14bb0:	b11a      	cbz	r2, 14bba <nrfx_pwm_init+0xca>
#endif
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_registers),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
   14bb2:	f340 3007 	sbfx	r0, r0, #12, #8
   14bb6:	f7fe fd59 	bl	1366c <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   14bba:	230c      	movs	r3, #12
   14bbc:	fb03 4405 	mla	r4, r3, r5, r4
   14bc0:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   14bc2:	4806      	ldr	r0, [pc, #24]	; (14bdc <nrfx_pwm_init+0xec>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   14bc4:	7223      	strb	r3, [r4, #8]
}
   14bc6:	b005      	add	sp, #20
   14bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
   14bcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14bd0:	6033      	str	r3, [r6, #0]
   14bd2:	e7c0      	b.n	14b56 <nrfx_pwm_init+0x66>
        return err_code;
   14bd4:	4802      	ldr	r0, [pc, #8]	; (14be0 <nrfx_pwm_init+0xf0>)
   14bd6:	e7f6      	b.n	14bc6 <nrfx_pwm_init+0xd6>
   14bd8:	200216cc 	.word	0x200216cc
   14bdc:	0bad0000 	.word	0x0bad0000
   14be0:	0bad0005 	.word	0x0bad0005
   14be4:	40842500 	.word	0x40842500

00014be8 <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const *         p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
   14be8:	b4f0      	push	{r4, r5, r6, r7}
   14bea:	460d      	mov	r5, r1
   14bec:	461c      	mov	r4, r3
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   14bee:	7901      	ldrb	r1, [r0, #4]
   14bf0:	4b1b      	ldr	r3, [pc, #108]	; (14c60 <nrfx_pwm_simple_playback+0x78>)
   14bf2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    NRFX_ASSERT(playback_count > 0);
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
   14bf6:	6800      	ldr	r0, [r0, #0]
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
   14bf8:	f8d5 c000 	ldr.w	ip, [r5]
    p_reg->SEQ[seq_id].CNT = length;
   14bfc:	88af      	ldrh	r7, [r5, #4]
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
   14bfe:	68ae      	ldr	r6, [r5, #8]
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   14c00:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
   14c04:	68eb      	ldr	r3, [r5, #12]
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
   14c06:	f8c0 c520 	str.w	ip, [r0, #1312]	; 0x520
    p_reg->SEQ[seq_id].CNT = length;
   14c0a:	f8c0 7524 	str.w	r7, [r0, #1316]	; 0x524
    p_reg->SEQ[seq_id].REFRESH  = refresh;
   14c0e:	f8c0 6528 	str.w	r6, [r0, #1320]	; 0x528
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
   14c12:	f8c0 352c 	str.w	r3, [r0, #1324]	; 0x52c
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
   14c16:	f8c0 c540 	str.w	ip, [r0, #1344]	; 0x540
    p_reg->SEQ[seq_id].CNT = length;
   14c1a:	f8c0 7544 	str.w	r7, [r0, #1348]	; 0x544
    p_reg->SEQ[seq_id].REFRESH  = refresh;
   14c1e:	f8c0 6548 	str.w	r6, [r0, #1352]	; 0x548
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
   14c22:	f8c0 354c 	str.w	r3, [r0, #1356]	; 0x54c
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
    bool odd = (playback_count & 1);
   14c26:	f002 0301 	and.w	r3, r2, #1
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
   14c2a:	eb03 0252 	add.w	r2, r3, r2, lsr #1
   14c2e:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    nrf_pwm_loop_set(p_instance->p_registers,
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
   14c32:	07e2      	lsls	r2, r4, #31
   14c34:	d411      	bmi.n	14c5a <nrfx_pwm_simple_playback+0x72>
    {
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    }
    else if (flags & NRFX_PWM_FLAG_LOOP)
   14c36:	f014 0202 	ands.w	r2, r4, #2
   14c3a:	d003      	beq.n	14c44 <nrfx_pwm_simple_playback+0x5c>
    {
        shorts_mask = odd ? NRF_PWM_SHORT_LOOPSDONE_SEQSTART1_MASK
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
   14c3c:	2b00      	cmp	r3, #0
   14c3e:	bf14      	ite	ne
   14c40:	2208      	movne	r2, #8
   14c42:	2204      	moveq	r2, #4
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
   14c44:	2b00      	cmp	r3, #0
    p_reg->SHORTS = mask;
   14c46:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
   14c4a:	bf18      	it	ne
   14c4c:	230c      	movne	r3, #12
   14c4e:	b2e2      	uxtb	r2, r4
   14c50:	bf08      	it	eq
   14c52:	2308      	moveq	r3, #8
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
   14c54:	bcf0      	pop	{r4, r5, r6, r7}
    return start_playback(p_instance, p_cb, flags,
   14c56:	f012 b9c2 	b.w	26fde <start_playback.isra.0>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
   14c5a:	2210      	movs	r2, #16
   14c5c:	e7f2      	b.n	14c44 <nrfx_pwm_simple_playback+0x5c>
   14c5e:	bf00      	nop
   14c60:	200216cc 	.word	0x200216cc

00014c64 <nrfx_pwm_is_stopped>:

    bool ret_val = false;

    // If the event handler is used (interrupts are enabled), the state will
    // be changed in interrupt handler when the STOPPED event occurs.
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   14c64:	210c      	movs	r1, #12
   14c66:	4b08      	ldr	r3, [pc, #32]	; (14c88 <nrfx_pwm_is_stopped+0x24>)
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   14c68:	7902      	ldrb	r2, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   14c6a:	fb01 3202 	mla	r2, r1, r2, r3
    {
        ret_val = true;
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
   14c6e:	6801      	ldr	r1, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   14c70:	7a13      	ldrb	r3, [r2, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14c72:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
   14c76:	b2db      	uxtb	r3, r3
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
   14c78:	b919      	cbnz	r1, 14c82 <nrfx_pwm_is_stopped+0x1e>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   14c7a:	1e98      	subs	r0, r3, #2
   14c7c:	bf18      	it	ne
   14c7e:	2001      	movne	r0, #1
   14c80:	4770      	bx	lr
    {
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   14c82:	2001      	movs	r0, #1
   14c84:	7210      	strb	r0, [r2, #8]
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
   14c86:	4770      	bx	lr
   14c88:	200216cc 	.word	0x200216cc

00014c8c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(s32_t level)
{
   14c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			if (dev) {
				/* Initialization failed. Clear the API struct
				 * so that device_get_binding() will not succeed
				 * for it.
				 */
				dev->driver_api = NULL;
   14c8e:	2700      	movs	r7, #0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   14c90:	4b08      	ldr	r3, [pc, #32]	; (14cb4 <z_sys_init_run_level+0x28>)
   14c92:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   14c96:	3001      	adds	r0, #1
   14c98:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   14c9c:	42a6      	cmp	r6, r4
   14c9e:	d800      	bhi.n	14ca2 <z_sys_init_run_level+0x16>
			}
		}
	}
}
   14ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		retval = entry->init(dev);
   14ca2:	e9d4 3500 	ldrd	r3, r5, [r4]
   14ca6:	4628      	mov	r0, r5
   14ca8:	4798      	blx	r3
		if (retval != 0) {
   14caa:	b108      	cbz	r0, 14cb0 <z_sys_init_run_level+0x24>
			if (dev) {
   14cac:	b105      	cbz	r5, 14cb0 <z_sys_init_run_level+0x24>
				dev->driver_api = NULL;
   14cae:	60af      	str	r7, [r5, #8]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   14cb0:	3408      	adds	r4, #8
   14cb2:	e7f3      	b.n	14c9c <z_sys_init_run_level+0x10>
   14cb4:	00032f24 	.word	0x00032f24

00014cb8 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
   14cb8:	4b0f      	ldr	r3, [pc, #60]	; (14cf8 <z_impl_device_get_binding+0x40>)
{
   14cba:	b570      	push	{r4, r5, r6, lr}
   14cbc:	4605      	mov	r5, r0
   14cbe:	461e      	mov	r6, r3
	for (dev = __device_start; dev != __device_end; dev++) {
   14cc0:	4c0e      	ldr	r4, [pc, #56]	; (14cfc <z_impl_device_get_binding+0x44>)
   14cc2:	429c      	cmp	r4, r3
   14cc4:	d104      	bne.n	14cd0 <z_impl_device_get_binding+0x18>
		    (dev->name == name)) {
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
   14cc6:	4c0d      	ldr	r4, [pc, #52]	; (14cfc <z_impl_device_get_binding+0x44>)
   14cc8:	42b4      	cmp	r4, r6
   14cca:	d108      	bne.n	14cde <z_impl_device_get_binding+0x26>
		    (strcmp(name, dev->name) == 0)) {
			return dev;
		}
	}

	return NULL;
   14ccc:	2400      	movs	r4, #0
   14cce:	e010      	b.n	14cf2 <z_impl_device_get_binding+0x3a>
		if ((dev->driver_api != NULL) &&
   14cd0:	68a2      	ldr	r2, [r4, #8]
   14cd2:	b112      	cbz	r2, 14cda <z_impl_device_get_binding+0x22>
   14cd4:	6822      	ldr	r2, [r4, #0]
   14cd6:	42aa      	cmp	r2, r5
   14cd8:	d00b      	beq.n	14cf2 <z_impl_device_get_binding+0x3a>
	for (dev = __device_start; dev != __device_end; dev++) {
   14cda:	3410      	adds	r4, #16
   14cdc:	e7f1      	b.n	14cc2 <z_impl_device_get_binding+0xa>
		if ((dev->driver_api != NULL) &&
   14cde:	68a3      	ldr	r3, [r4, #8]
   14ce0:	b90b      	cbnz	r3, 14ce6 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   14ce2:	3410      	adds	r4, #16
   14ce4:	e7f0      	b.n	14cc8 <z_impl_device_get_binding+0x10>
		    (strcmp(name, dev->name) == 0)) {
   14ce6:	4628      	mov	r0, r5
   14ce8:	6821      	ldr	r1, [r4, #0]
   14cea:	f7fc ff0b 	bl	11b04 <strcmp>
		if ((dev->driver_api != NULL) &&
   14cee:	2800      	cmp	r0, #0
   14cf0:	d1f7      	bne.n	14ce2 <z_impl_device_get_binding+0x2a>
}
   14cf2:	4620      	mov	r0, r4
   14cf4:	bd70      	pop	{r4, r5, r6, pc}
   14cf6:	bf00      	nop
   14cf8:	20020120 	.word	0x20020120
   14cfc:	200200c0 	.word	0x200200c0

00014d00 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   14d00:	4b01      	ldr	r3, [pc, #4]	; (14d08 <z_impl_z_errno+0x8>)
   14d02:	6898      	ldr	r0, [r3, #8]
}
   14d04:	305c      	adds	r0, #92	; 0x5c
   14d06:	4770      	bx	lr
   14d08:	200217c0 	.word	0x200217c0

00014d0c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   14d0c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   14d10:	4605      	mov	r5, r0
   14d12:	460f      	mov	r7, r1
   14d14:	f04f 0320 	mov.w	r3, #32
   14d18:	f3ef 8811 	mrs	r8, BASEPRI
   14d1c:	f383 8811 	msr	BASEPRI, r3
   14d20:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   14d24:	f000 fdc4 	bl	158b0 <z_impl_k_current_get>
   14d28:	4c22      	ldr	r4, [pc, #136]	; (14db4 <z_fatal_error+0xa8>)
   14d2a:	4b23      	ldr	r3, [pc, #140]	; (14db8 <z_fatal_error+0xac>)
   14d2c:	2d04      	cmp	r5, #4
   14d2e:	eba4 0403 	sub.w	r4, r4, r3
   14d32:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   14d36:	bf98      	it	ls
   14d38:	4a20      	ldrls	r2, [pc, #128]	; (14dbc <z_fatal_error+0xb0>)
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   14d3a:	ea4f 1484 	mov.w	r4, r4, lsl #6
   14d3e:	f044 0301 	orr.w	r3, r4, #1
   14d42:	4606      	mov	r6, r0
	switch (reason) {
   14d44:	bf94      	ite	ls
   14d46:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   14d4a:	4a1d      	ldrhi	r2, [pc, #116]	; (14dc0 <z_fatal_error+0xb4>)
   14d4c:	f8ad 3000 	strh.w	r3, [sp]
   14d50:	4629      	mov	r1, r5
   14d52:	2300      	movs	r3, #0
   14d54:	481b      	ldr	r0, [pc, #108]	; (14dc4 <z_fatal_error+0xb8>)
   14d56:	f011 fcc2 	bl	266de <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   14d5a:	b147      	cbz	r7, 14d6e <z_fatal_error+0x62>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   14d5c:	69fb      	ldr	r3, [r7, #28]
   14d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   14d62:	b123      	cbz	r3, 14d6e <z_fatal_error+0x62>
		LOG_ERR("Fault during interrupt handling\n");
   14d64:	4818      	ldr	r0, [pc, #96]	; (14dc8 <z_fatal_error+0xbc>)
   14d66:	f044 0101 	orr.w	r1, r4, #1
   14d6a:	f011 fc79 	bl	26660 <log_0>
	const char *thread_name = k_thread_name_get(thread);
   14d6e:	4630      	mov	r0, r6
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   14d70:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = k_thread_name_get(thread);
   14d74:	f012 fa89 	bl	2728a <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   14d78:	b1d0      	cbz	r0, 14db0 <z_fatal_error+0xa4>
   14d7a:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   14d7c:	4b13      	ldr	r3, [pc, #76]	; (14dcc <z_fatal_error+0xc0>)
   14d7e:	2a00      	cmp	r2, #0
   14d80:	bf08      	it	eq
   14d82:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   14d84:	f7fd fcac 	bl	126e0 <log_strdup>
   14d88:	4623      	mov	r3, r4
   14d8a:	4602      	mov	r2, r0
   14d8c:	4631      	mov	r1, r6
   14d8e:	4810      	ldr	r0, [pc, #64]	; (14dd0 <z_fatal_error+0xc4>)
   14d90:	f011 fc8c 	bl	266ac <log_2>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   14d94:	4639      	mov	r1, r7
   14d96:	4628      	mov	r0, r5
   14d98:	f7ff fe30 	bl	149fc <k_sys_fatal_error_handler>
	__asm__ volatile(
   14d9c:	f388 8811 	msr	BASEPRI, r8
   14da0:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   14da4:	4630      	mov	r0, r6
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   14da6:	b002      	add	sp, #8
   14da8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   14dac:	f7fe bfce 	b.w	13d4c <z_impl_k_thread_abort>
		thread_name = "unknown";
   14db0:	4806      	ldr	r0, [pc, #24]	; (14dcc <z_fatal_error+0xc0>)
   14db2:	e7e7      	b.n	14d84 <z_fatal_error+0x78>
   14db4:	000317e8 	.word	0x000317e8
   14db8:	000317c8 	.word	0x000317c8
   14dbc:	00032f3c 	.word	0x00032f3c
   14dc0:	00033f2e 	.word	0x00033f2e
   14dc4:	00033f44 	.word	0x00033f44
   14dc8:	00033f6c 	.word	0x00033f6c
   14dcc:	00033f3c 	.word	0x00033f3c
   14dd0:	00033f8d 	.word	0x00033f8d

00014dd4 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   14dd4:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   14dd6:	4d0b      	ldr	r5, [pc, #44]	; (14e04 <idle+0x30>)
	__asm__ volatile(
   14dd8:	f04f 0220 	mov.w	r2, #32
   14ddc:	f3ef 8311 	mrs	r3, BASEPRI
   14de0:	f382 8811 	msr	BASEPRI, r2
   14de4:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   14de8:	f012 fa67 	bl	272ba <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   14dec:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   14dee:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   14df0:	2802      	cmp	r0, #2
   14df2:	bfd8      	it	le
   14df4:	4608      	movle	r0, r1
   14df6:	f012 fa70 	bl	272da <z_set_timeout_expiry>
	_kernel.idle = ticks;
   14dfa:	622c      	str	r4, [r5, #32]
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   14dfc:	f7fe fc9a 	bl	13734 <arch_cpu_idle>
}
   14e00:	e7ea      	b.n	14dd8 <idle+0x4>
   14e02:	bf00      	nop
   14e04:	200217c0 	.word	0x200217c0

00014e08 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   14e08:	4802      	ldr	r0, [pc, #8]	; (14e14 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   14e0a:	4a03      	ldr	r2, [pc, #12]	; (14e18 <z_bss_zero+0x10>)
   14e0c:	2100      	movs	r1, #0
   14e0e:	1a12      	subs	r2, r2, r0
   14e10:	f01c b81d 	b.w	30e4e <memset>
   14e14:	20020180 	.word	0x20020180
   14e18:	20027130 	.word	0x20027130

00014e1c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   14e1c:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   14e1e:	4806      	ldr	r0, [pc, #24]	; (14e38 <z_data_copy+0x1c>)
   14e20:	4a06      	ldr	r2, [pc, #24]	; (14e3c <z_data_copy+0x20>)
   14e22:	4907      	ldr	r1, [pc, #28]	; (14e40 <z_data_copy+0x24>)
   14e24:	1a12      	subs	r2, r2, r0
   14e26:	f01b ffeb 	bl	30e00 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   14e2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   14e2e:	4a05      	ldr	r2, [pc, #20]	; (14e44 <z_data_copy+0x28>)
   14e30:	4905      	ldr	r1, [pc, #20]	; (14e48 <z_data_copy+0x2c>)
   14e32:	4806      	ldr	r0, [pc, #24]	; (14e4c <z_data_copy+0x30>)
   14e34:	f01b bfe4 	b.w	30e00 <memcpy>
   14e38:	20020000 	.word	0x20020000
   14e3c:	20020180 	.word	0x20020180
   14e40:	000376ac 	.word	0x000376ac
   14e44:	00000000 	.word	0x00000000
   14e48:	000376ac 	.word	0x000376ac
   14e4c:	20020000 	.word	0x20020000

00014e50 <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   14e50:	2201      	movs	r2, #1
{
   14e52:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   14e54:	4b0d      	ldr	r3, [pc, #52]	; (14e8c <bg_thread_main+0x3c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   14e56:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   14e58:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   14e5a:	f7ff ff17 	bl	14c8c <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   14e5e:	4a0c      	ldr	r2, [pc, #48]	; (14e90 <bg_thread_main+0x40>)
   14e60:	490c      	ldr	r1, [pc, #48]	; (14e94 <bg_thread_main+0x44>)
   14e62:	480d      	ldr	r0, [pc, #52]	; (14e98 <bg_thread_main+0x48>)
   14e64:	f011 faf4 	bl	26450 <printk>

#ifdef CONFIG_CPLUSPLUS
	/* Process the .ctors and .init_array sections */
	extern void __do_global_ctors_aux(void);
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
   14e68:	f7fe f8e0 	bl	1302c <__do_global_ctors_aux>
	__do_init_array_aux();
   14e6c:	f7fe f8d0 	bl	13010 <__do_init_array_aux>
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   14e70:	2003      	movs	r0, #3
   14e72:	f7ff ff0b 	bl	14c8c <z_sys_init_run_level>

	z_init_static_threads();
   14e76:	f000 fdbd 	bl	159f4 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   14e7a:	f011 fab1 	bl	263e0 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   14e7e:	4a07      	ldr	r2, [pc, #28]	; (14e9c <bg_thread_main+0x4c>)
   14e80:	7b13      	ldrb	r3, [r2, #12]
   14e82:	f023 0301 	bic.w	r3, r3, #1
   14e86:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   14e88:	bd08      	pop	{r3, pc}
   14e8a:	bf00      	nop
   14e8c:	20027123 	.word	0x20027123
   14e90:	00033f2d 	.word	0x00033f2d
   14e94:	00033fef 	.word	0x00033fef
   14e98:	00033fff 	.word	0x00033fff
   14e9c:	2002174c 	.word	0x2002174c

00014ea0 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   14ea0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   14ea4:	b0a5      	sub	sp, #148	; 0x94
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   14ea6:	f7fd fb6f 	bl	12588 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(z_interrupt_stacks[0])) +
   14eaa:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 14f98 <z_cstart+0xf8>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   14eae:	f389 8808 	msr	MSP, r9
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14eb2:	2400      	movs	r4, #0
   14eb4:	23e0      	movs	r3, #224	; 0xe0
   14eb6:	4d31      	ldr	r5, [pc, #196]	; (14f7c <z_cstart+0xdc>)
	z_setup_new_thread(&z_main_thread, z_main_stack,
   14eb8:	f04f 0b01 	mov.w	fp, #1
   14ebc:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   14ec0:	77ec      	strb	r4, [r5, #31]
   14ec2:	762c      	strb	r4, [r5, #24]
   14ec4:	766c      	strb	r4, [r5, #25]
   14ec6:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   14ec8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   14eca:	4e2d      	ldr	r6, [pc, #180]	; (14f80 <z_cstart+0xe0>)
   14ecc:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   14ed0:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   14ed2:	f7fe ff07 	bl	13ce4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   14ed6:	f7fe fc27 	bl	13728 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   14eda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14ede:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   14ee0:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   14ee2:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = 0;
#endif

	_current_cpu->current = dummy_thread;
   14ee6:	4d27      	ldr	r5, [pc, #156]	; (14f84 <z_cstart+0xe4>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   14ee8:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	_current_cpu->current = dummy_thread;
   14eec:	ab07      	add	r3, sp, #28
   14eee:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   14ef0:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   14ef2:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
   14ef6:	f7ff fec9 	bl	14c8c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   14efa:	2001      	movs	r0, #1
   14efc:	f7ff fec6 	bl	14c8c <z_sys_init_run_level>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   14f00:	f8df a098 	ldr.w	sl, [pc, #152]	; 14f9c <z_cstart+0xfc>
	z_sched_init();
   14f04:	f000 fc5a 	bl	157bc <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   14f08:	f8df 8094 	ldr.w	r8, [pc, #148]	; 14fa0 <z_cstart+0x100>
   14f0c:	4b1e      	ldr	r3, [pc, #120]	; (14f88 <z_cstart+0xe8>)
	_kernel.ready_q.cache = &z_main_thread;
   14f0e:	626e      	str	r6, [r5, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   14f10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   14f14:	4641      	mov	r1, r8
   14f16:	4630      	mov	r0, r6
   14f18:	9305      	str	r3, [sp, #20]
   14f1a:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   14f1e:	4653      	mov	r3, sl
   14f20:	e9cd 4401 	strd	r4, r4, [sp, #4]
   14f24:	9400      	str	r4, [sp, #0]
   14f26:	f000 fd13 	bl	15950 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14f2a:	7b73      	ldrb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
   14f2c:	4630      	mov	r0, r6
   14f2e:	f023 0304 	bic.w	r3, r3, #4
   14f32:	7373      	strb	r3, [r6, #13]
   14f34:	f012 f8fb 	bl	2712e <z_ready_thread>
	z_setup_new_thread(thread, stack,
   14f38:	230f      	movs	r3, #15
   14f3a:	4f14      	ldr	r7, [pc, #80]	; (14f8c <z_cstart+0xec>)
   14f3c:	f44f 72a0 	mov.w	r2, #320	; 0x140
   14f40:	4638      	mov	r0, r7
   14f42:	e9cd 4302 	strd	r4, r3, [sp, #8]
   14f46:	4912      	ldr	r1, [pc, #72]	; (14f90 <z_cstart+0xf0>)
   14f48:	4b12      	ldr	r3, [pc, #72]	; (14f94 <z_cstart+0xf4>)
   14f4a:	e9cd b404 	strd	fp, r4, [sp, #16]
   14f4e:	e9cd 4400 	strd	r4, r4, [sp]
   14f52:	f000 fcfd 	bl	15950 <z_setup_new_thread>
   14f56:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   14f58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   14f5c:	f023 0304 	bic.w	r3, r3, #4
   14f60:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   14f62:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
   14f66:	e9c5 3306 	strd	r3, r3, [r5, #24]
   14f6a:	4641      	mov	r1, r8
   14f6c:	4653      	mov	r3, sl
   14f6e:	4630      	mov	r0, r6
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   14f70:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   14f72:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   14f74:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   14f78:	f7fe fbb8 	bl	136ec <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   14f7c:	e000ed00 	.word	0xe000ed00
   14f80:	2002174c 	.word	0x2002174c
   14f84:	200217c0 	.word	0x200217c0
   14f88:	00034026 	.word	0x00034026
   14f8c:	200216d8 	.word	0x200216d8
   14f90:	20029430 	.word	0x20029430
   14f94:	00014dd5 	.word	0x00014dd5
   14f98:	20029d70 	.word	0x20029d70
   14f9c:	00014e51 	.word	0x00014e51
   14fa0:	20027430 	.word	0x20027430

00014fa4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   14fa4:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   14fa6:	4b0e      	ldr	r3, [pc, #56]	; (14fe0 <init_mem_slab_module+0x3c>)
   14fa8:	4c0e      	ldr	r4, [pc, #56]	; (14fe4 <init_mem_slab_module+0x40>)
   14faa:	42a3      	cmp	r3, r4
   14fac:	d301      	bcc.n	14fb2 <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   14fae:	2000      	movs	r0, #0
	return rc;
}
   14fb0:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   14fb2:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   14fb6:	ea41 0200 	orr.w	r2, r1, r0
   14fba:	f012 0203 	ands.w	r2, r2, #3
   14fbe:	d10b      	bne.n	14fd8 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   14fc0:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   14fc2:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   14fc4:	42aa      	cmp	r2, r5
   14fc6:	d101      	bne.n	14fcc <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   14fc8:	331c      	adds	r3, #28
   14fca:	e7ee      	b.n	14faa <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   14fcc:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   14fce:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
   14fd0:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
   14fd2:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   14fd4:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   14fd6:	e7f5      	b.n	14fc4 <init_mem_slab_module+0x20>
		return -EINVAL;
   14fd8:	f06f 0015 	mvn.w	r0, #21
	return rc;
   14fdc:	e7e8      	b.n	14fb0 <init_mem_slab_module+0xc>
   14fde:	bf00      	nop
   14fe0:	20020120 	.word	0x20020120
   14fe4:	20020120 	.word	0x20020120

00014fe8 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   14fe8:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   14fea:	460c      	mov	r4, r1
   14fec:	4616      	mov	r6, r2
   14fee:	461f      	mov	r7, r3
   14ff0:	f04f 0320 	mov.w	r3, #32
   14ff4:	f3ef 8111 	mrs	r1, BASEPRI
   14ff8:	f383 8811 	msr	BASEPRI, r3
   14ffc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   15000:	6943      	ldr	r3, [r0, #20]
   15002:	b15b      	cbz	r3, 1501c <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   15004:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   15006:	681b      	ldr	r3, [r3, #0]
   15008:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1500a:	6983      	ldr	r3, [r0, #24]
   1500c:	3301      	adds	r3, #1
   1500e:	6183      	str	r3, [r0, #24]
		result = 0;
   15010:	2000      	movs	r0, #0
	__asm__ volatile(
   15012:	f381 8811 	msr	BASEPRI, r1
   15016:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1501a:	e011      	b.n	15040 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1501c:	ea56 0207 	orrs.w	r2, r6, r7
   15020:	d103      	bne.n	1502a <k_mem_slab_alloc+0x42>
		result = -ENOMEM;
   15022:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
   15026:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   15028:	e7f3      	b.n	15012 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1502a:	4602      	mov	r2, r0
   1502c:	e9cd 6700 	strd	r6, r7, [sp]
   15030:	4804      	ldr	r0, [pc, #16]	; (15044 <k_mem_slab_alloc+0x5c>)
   15032:	f000 fb6b 	bl	1570c <z_pend_curr>
		if (result == 0) {
   15036:	b918      	cbnz	r0, 15040 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   15038:	4b03      	ldr	r3, [pc, #12]	; (15048 <k_mem_slab_alloc+0x60>)
   1503a:	689b      	ldr	r3, [r3, #8]
   1503c:	695b      	ldr	r3, [r3, #20]
   1503e:	6023      	str	r3, [r4, #0]
}
   15040:	b002      	add	sp, #8
   15042:	bdd0      	pop	{r4, r6, r7, pc}
   15044:	20027124 	.word	0x20027124
   15048:	200217c0 	.word	0x200217c0

0001504c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1504c:	b570      	push	{r4, r5, r6, lr}
   1504e:	4604      	mov	r4, r0
   15050:	460d      	mov	r5, r1
	__asm__ volatile(
   15052:	f04f 0320 	mov.w	r3, #32
   15056:	f3ef 8611 	mrs	r6, BASEPRI
   1505a:	f383 8811 	msr	BASEPRI, r3
   1505e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   15062:	f012 f8da 	bl	2721a <z_unpend_first_thread>

	if (pending_thread != NULL) {
   15066:	b158      	cbz	r0, 15080 <k_mem_slab_free+0x34>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   15068:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1506a:	682a      	ldr	r2, [r5, #0]
   1506c:	6701      	str	r1, [r0, #112]	; 0x70
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1506e:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
   15070:	f012 f85d 	bl	2712e <z_ready_thread>
		z_reschedule(&lock, key);
   15074:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   15076:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1507a:	4808      	ldr	r0, [pc, #32]	; (1509c <k_mem_slab_free+0x50>)
   1507c:	f012 b82c 	b.w	270d8 <z_reschedule>
		**(char ***)mem = slab->free_list;
   15080:	682b      	ldr	r3, [r5, #0]
   15082:	6962      	ldr	r2, [r4, #20]
   15084:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   15086:	682b      	ldr	r3, [r5, #0]
   15088:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   1508a:	69a3      	ldr	r3, [r4, #24]
   1508c:	3b01      	subs	r3, #1
   1508e:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   15090:	f386 8811 	msr	BASEPRI, r6
   15094:	f3bf 8f6f 	isb	sy
}
   15098:	bd70      	pop	{r4, r5, r6, pc}
   1509a:	bf00      	nop
   1509c:	20027124 	.word	0x20027124

000150a0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   150a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   150a4:	4604      	mov	r4, r0
   150a6:	4616      	mov	r6, r2
   150a8:	461f      	mov	r7, r3
	__asm__ volatile(
   150aa:	f04f 0320 	mov.w	r3, #32
   150ae:	f3ef 8811 	mrs	r8, BASEPRI
   150b2:	f383 8811 	msr	BASEPRI, r3
   150b6:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   150ba:	68c3      	ldr	r3, [r0, #12]
   150bc:	4a32      	ldr	r2, [pc, #200]	; (15188 <z_impl_k_mutex_lock+0xe8>)
   150be:	b16b      	cbz	r3, 150dc <z_impl_k_mutex_lock+0x3c>
   150c0:	6880      	ldr	r0, [r0, #8]
   150c2:	6891      	ldr	r1, [r2, #8]
   150c4:	4288      	cmp	r0, r1
   150c6:	d019      	beq.n	150fc <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   150c8:	ea56 0307 	orrs.w	r3, r6, r7
   150cc:	d118      	bne.n	15100 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   150ce:	f388 8811 	msr	BASEPRI, r8
   150d2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   150d6:	f06f 000f 	mvn.w	r0, #15
   150da:	e00c      	b.n	150f6 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   150dc:	6891      	ldr	r1, [r2, #8]
   150de:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   150e2:	3301      	adds	r3, #1
   150e4:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   150e6:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   150e8:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   150ea:	60a3      	str	r3, [r4, #8]
   150ec:	f388 8811 	msr	BASEPRI, r8
   150f0:	f3bf 8f6f 	isb	sy
		return 0;
   150f4:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   150f6:	b002      	add	sp, #8
   150f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   150fc:	6921      	ldr	r1, [r4, #16]
   150fe:	e7f0      	b.n	150e2 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   15100:	f990 300e 	ldrsb.w	r3, [r0, #14]
   15104:	f991 100e 	ldrsb.w	r1, [r1, #14]
   15108:	4299      	cmp	r1, r3
   1510a:	bfa8      	it	ge
   1510c:	4619      	movge	r1, r3
   1510e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   15112:	428b      	cmp	r3, r1
   15114:	dd2c      	ble.n	15170 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   15116:	f000 fb0d 	bl	15734 <z_set_prio>
   1511a:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1511c:	4622      	mov	r2, r4
   1511e:	4641      	mov	r1, r8
   15120:	e9cd 6700 	strd	r6, r7, [sp]
   15124:	4819      	ldr	r0, [pc, #100]	; (1518c <z_impl_k_mutex_lock+0xec>)
   15126:	f000 faf1 	bl	1570c <z_pend_curr>
	if (got_mutex == 0) {
   1512a:	2800      	cmp	r0, #0
   1512c:	d0e3      	beq.n	150f6 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1512e:	f04f 0320 	mov.w	r3, #32
   15132:	f3ef 8611 	mrs	r6, BASEPRI
   15136:	f383 8811 	msr	BASEPRI, r3
   1513a:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1513e:	6823      	ldr	r3, [r4, #0]
   15140:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15142:	429c      	cmp	r4, r3
   15144:	d007      	beq.n	15156 <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   15146:	b133      	cbz	r3, 15156 <z_impl_k_mutex_lock+0xb6>
   15148:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1514c:	4299      	cmp	r1, r3
   1514e:	bfa8      	it	ge
   15150:	4619      	movge	r1, r3
   15152:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   15156:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   15158:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1515c:	4299      	cmp	r1, r3
   1515e:	d109      	bne.n	15174 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   15160:	b16d      	cbz	r5, 1517e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   15162:	4631      	mov	r1, r6
   15164:	4809      	ldr	r0, [pc, #36]	; (1518c <z_impl_k_mutex_lock+0xec>)
   15166:	f011 ffb7 	bl	270d8 <z_reschedule>
	return -EAGAIN;
   1516a:	f06f 000a 	mvn.w	r0, #10
   1516e:	e7c2      	b.n	150f6 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   15170:	2500      	movs	r5, #0
   15172:	e7d3      	b.n	1511c <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   15174:	f000 fade 	bl	15734 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   15178:	2800      	cmp	r0, #0
   1517a:	d1f2      	bne.n	15162 <z_impl_k_mutex_lock+0xc2>
   1517c:	e7f0      	b.n	15160 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   1517e:	f386 8811 	msr	BASEPRI, r6
   15182:	f3bf 8f6f 	isb	sy
   15186:	e7f0      	b.n	1516a <z_impl_k_mutex_lock+0xca>
   15188:	200217c0 	.word	0x200217c0
   1518c:	20027125 	.word	0x20027125

00015190 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   15190:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	CHECKIF(mutex->owner == NULL) {
   15192:	6883      	ldr	r3, [r0, #8]
{
   15194:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   15196:	2b00      	cmp	r3, #0
   15198:	d036      	beq.n	15208 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1519a:	4a1e      	ldr	r2, [pc, #120]	; (15214 <z_impl_k_mutex_unlock+0x84>)
   1519c:	6892      	ldr	r2, [r2, #8]
   1519e:	4293      	cmp	r3, r2
   151a0:	d135      	bne.n	1520e <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   151a2:	7bda      	ldrb	r2, [r3, #15]
   151a4:	3a01      	subs	r2, #1
   151a6:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   151a8:	68c3      	ldr	r3, [r0, #12]
   151aa:	2b01      	cmp	r3, #1
   151ac:	d005      	beq.n	151ba <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   151ae:	3b01      	subs	r3, #1
   151b0:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   151b2:	f000 f8c3 	bl	1533c <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   151b6:	2000      	movs	r0, #0
}
   151b8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   151ba:	f04f 0320 	mov.w	r3, #32
   151be:	f3ef 8511 	mrs	r5, BASEPRI
   151c2:	f383 8811 	msr	BASEPRI, r3
   151c6:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   151ca:	6901      	ldr	r1, [r0, #16]
   151cc:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   151ce:	f990 300e 	ldrsb.w	r3, [r0, #14]
   151d2:	4299      	cmp	r1, r3
   151d4:	d001      	beq.n	151da <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   151d6:	f000 faad 	bl	15734 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   151da:	4620      	mov	r0, r4
   151dc:	f012 f81d 	bl	2721a <z_unpend_first_thread>
	mutex->owner = new_owner;
   151e0:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   151e2:	b158      	cbz	r0, 151fc <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   151e4:	f990 200e 	ldrsb.w	r2, [r0, #14]
   151e8:	6122      	str	r2, [r4, #16]
   151ea:	2200      	movs	r2, #0
   151ec:	6702      	str	r2, [r0, #112]	; 0x70
		z_ready_thread(new_owner);
   151ee:	f011 ff9e 	bl	2712e <z_ready_thread>
		z_reschedule(&lock, key);
   151f2:	4629      	mov	r1, r5
   151f4:	4808      	ldr	r0, [pc, #32]	; (15218 <z_impl_k_mutex_unlock+0x88>)
   151f6:	f011 ff6f 	bl	270d8 <z_reschedule>
   151fa:	e7da      	b.n	151b2 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   151fc:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   151fe:	f385 8811 	msr	BASEPRI, r5
   15202:	f3bf 8f6f 	isb	sy
   15206:	e7d4      	b.n	151b2 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   15208:	f06f 0015 	mvn.w	r0, #21
   1520c:	e7d4      	b.n	151b8 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1520e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15212:	e7d1      	b.n	151b8 <z_impl_k_mutex_unlock+0x28>
   15214:	200217c0 	.word	0x200217c0
   15218:	20027125 	.word	0x20027125

0001521c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1521c:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1521e:	4c08      	ldr	r4, [pc, #32]	; (15240 <z_reset_time_slice+0x24>)
   15220:	6823      	ldr	r3, [r4, #0]
   15222:	b15b      	cbz	r3, 1523c <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   15224:	f7fe f8e6 	bl	133f4 <z_clock_elapsed>
   15228:	6822      	ldr	r2, [r4, #0]
   1522a:	4906      	ldr	r1, [pc, #24]	; (15244 <z_reset_time_slice+0x28>)
   1522c:	4410      	add	r0, r2
   1522e:	6108      	str	r0, [r1, #16]
		z_set_timeout_expiry(slice_time, false);
	}
}
   15230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   15234:	2100      	movs	r1, #0
   15236:	4610      	mov	r0, r2
   15238:	f012 b84f 	b.w	272da <z_set_timeout_expiry>
}
   1523c:	bd10      	pop	{r4, pc}
   1523e:	bf00      	nop
   15240:	200217f8 	.word	0x200217f8
   15244:	200217c0 	.word	0x200217c0

00015248 <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
   15248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1524a:	460c      	mov	r4, r1
	__asm__ volatile(
   1524c:	f04f 0320 	mov.w	r3, #32
   15250:	f3ef 8511 	mrs	r5, BASEPRI
   15254:	f383 8811 	msr	BASEPRI, r3
   15258:	f3bf 8f6f 	isb	sy
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
   1525c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   15260:	f240 36e7 	movw	r6, #999	; 0x3e7
   15264:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   15266:	2200      	movs	r2, #0
   15268:	fbe1 6700 	umlal	r6, r7, r1, r0
   1526c:	4b09      	ldr	r3, [pc, #36]	; (15294 <k_sched_time_slice_set+0x4c>)
   1526e:	4630      	mov	r0, r6
   15270:	611a      	str	r2, [r3, #16]
   15272:	4639      	mov	r1, r7
   15274:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15278:	2300      	movs	r3, #0
   1527a:	f7f7 f99d 	bl	c5b8 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1527e:	4b06      	ldr	r3, [pc, #24]	; (15298 <k_sched_time_slice_set+0x50>)
   15280:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   15282:	4b06      	ldr	r3, [pc, #24]	; (1529c <k_sched_time_slice_set+0x54>)
   15284:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   15286:	f7ff ffc9 	bl	1521c <z_reset_time_slice>
	__asm__ volatile(
   1528a:	f385 8811 	msr	BASEPRI, r5
   1528e:	f3bf 8f6f 	isb	sy
	}
}
   15292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15294:	200217c0 	.word	0x200217c0
   15298:	200217f8 	.word	0x200217f8
   1529c:	200217f4 	.word	0x200217f4

000152a0 <k_sched_lock>:
	__asm__ volatile(
   152a0:	f04f 0320 	mov.w	r3, #32
   152a4:	f3ef 8111 	mrs	r1, BASEPRI
   152a8:	f383 8811 	msr	BASEPRI, r3
   152ac:	f3bf 8f6f 	isb	sy
   152b0:	4b04      	ldr	r3, [pc, #16]	; (152c4 <k_sched_lock+0x24>)
   152b2:	689a      	ldr	r2, [r3, #8]
   152b4:	7bd3      	ldrb	r3, [r2, #15]
   152b6:	3b01      	subs	r3, #1
   152b8:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   152ba:	f381 8811 	msr	BASEPRI, r1
   152be:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   152c2:	4770      	bx	lr
   152c4:	200217c0 	.word	0x200217c0

000152c8 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   152c8:	4b09      	ldr	r3, [pc, #36]	; (152f0 <z_priq_dumb_remove+0x28>)
   152ca:	f103 0228 	add.w	r2, r3, #40	; 0x28
   152ce:	4282      	cmp	r2, r0
   152d0:	d105      	bne.n	152de <z_priq_dumb_remove+0x16>
   152d2:	689b      	ldr	r3, [r3, #8]
   152d4:	428b      	cmp	r3, r1
   152d6:	d102      	bne.n	152de <z_priq_dumb_remove+0x16>
   152d8:	7b4b      	ldrb	r3, [r1, #13]
   152da:	06db      	lsls	r3, r3, #27
   152dc:	d106      	bne.n	152ec <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   152de:	e9d1 3200 	ldrd	r3, r2, [r1]
   152e2:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   152e4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   152e6:	2300      	movs	r3, #0
	node->prev = NULL;
   152e8:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   152ec:	4770      	bx	lr
   152ee:	bf00      	nop
   152f0:	200217c0 	.word	0x200217c0

000152f4 <update_cache>:
{
   152f4:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   152f6:	4c10      	ldr	r4, [pc, #64]	; (15338 <update_cache+0x44>)
{
   152f8:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   152fa:	f104 0028 	add.w	r0, r4, #40	; 0x28
   152fe:	f011 ff0c 	bl	2711a <z_priq_dumb_best>
   15302:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   15304:	68a3      	ldr	r3, [r4, #8]
   15306:	7b59      	ldrb	r1, [r3, #13]
   15308:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
   1530a:	bf44      	itt	mi
   1530c:	f041 0108 	orrmi.w	r1, r1, #8
   15310:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
   15312:	b905      	cbnz	r5, 15316 <update_cache+0x22>
   15314:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   15316:	b94e      	cbnz	r6, 1532c <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
   15318:	7b5a      	ldrb	r2, [r3, #13]
   1531a:	06d2      	lsls	r2, r2, #27
   1531c:	d106      	bne.n	1532c <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1531e:	69aa      	ldr	r2, [r5, #24]
   15320:	b922      	cbnz	r2, 1532c <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
   15322:	89da      	ldrh	r2, [r3, #14]
   15324:	2a7f      	cmp	r2, #127	; 0x7f
   15326:	d901      	bls.n	1532c <update_cache+0x38>
		_kernel.ready_q.cache = _current;
   15328:	6263      	str	r3, [r4, #36]	; 0x24
}
   1532a:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
   1532c:	42ab      	cmp	r3, r5
   1532e:	d001      	beq.n	15334 <update_cache+0x40>
			z_reset_time_slice();
   15330:	f7ff ff74 	bl	1521c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   15334:	6265      	str	r5, [r4, #36]	; 0x24
}
   15336:	e7f8      	b.n	1532a <update_cache+0x36>
   15338:	200217c0 	.word	0x200217c0

0001533c <k_sched_unlock>:
{
   1533c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1533e:	f04f 0320 	mov.w	r3, #32
   15342:	f3ef 8411 	mrs	r4, BASEPRI
   15346:	f383 8811 	msr	BASEPRI, r3
   1534a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1534e:	4b08      	ldr	r3, [pc, #32]	; (15370 <k_sched_unlock+0x34>)
		update_cache(0);
   15350:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   15352:	689a      	ldr	r2, [r3, #8]
   15354:	7bd3      	ldrb	r3, [r2, #15]
   15356:	3301      	adds	r3, #1
   15358:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1535a:	f7ff ffcb 	bl	152f4 <update_cache>
	__asm__ volatile(
   1535e:	f384 8811 	msr	BASEPRI, r4
   15362:	f3bf 8f6f 	isb	sy
}
   15366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1536a:	f011 becc 	b.w	27106 <z_reschedule_unlocked>
   1536e:	bf00      	nop
   15370:	200217c0 	.word	0x200217c0

00015374 <ready_thread>:
{
   15374:	b470      	push	{r4, r5, r6}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   15376:	7b43      	ldrb	r3, [r0, #13]
   15378:	06db      	lsls	r3, r3, #27
   1537a:	d12a      	bne.n	153d2 <ready_thread+0x5e>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
   1537c:	6983      	ldr	r3, [r0, #24]
	if (z_is_thread_ready(thread)) {
   1537e:	bb43      	cbnz	r3, 153d2 <ready_thread+0x5e>
	return list->head == list;
   15380:	4a15      	ldr	r2, [pc, #84]	; (153d8 <ready_thread+0x64>)
   15382:	4611      	mov	r1, r2
   15384:	f851 4f28 	ldr.w	r4, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15388:	428c      	cmp	r4, r1
   1538a:	bf18      	it	ne
   1538c:	4623      	movne	r3, r4
   1538e:	2b00      	cmp	r3, #0
   15390:	bf38      	it	cc
   15392:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   15394:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15396:	b1b3      	cbz	r3, 153c6 <ready_thread+0x52>
	if (thread_1->base.prio < thread_2->base.prio) {
   15398:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1539c:	f993 500e 	ldrsb.w	r5, [r3, #14]
   153a0:	42ae      	cmp	r6, r5
   153a2:	db03      	blt.n	153ac <ready_thread+0x38>
	return (node == list->tail) ? NULL : node->next;
   153a4:	42a3      	cmp	r3, r4
   153a6:	d00e      	beq.n	153c6 <ready_thread+0x52>
   153a8:	681b      	ldr	r3, [r3, #0]
   153aa:	e7f4      	b.n	15396 <ready_thread+0x22>
	node->prev = successor->prev;
   153ac:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   153ae:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   153b2:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   153b4:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   153b6:	7b43      	ldrb	r3, [r0, #13]
   153b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   153bc:	7343      	strb	r3, [r0, #13]
}
   153be:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   153c0:	2000      	movs	r0, #0
   153c2:	f7ff bf97 	b.w	152f4 <update_cache>
	node->prev = list->tail;
   153c6:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   153ca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   153cc:	6018      	str	r0, [r3, #0]
	list->tail = node;
   153ce:	62d0      	str	r0, [r2, #44]	; 0x2c
}
   153d0:	e7f1      	b.n	153b6 <ready_thread+0x42>
}
   153d2:	bc70      	pop	{r4, r5, r6}
   153d4:	4770      	bx	lr
   153d6:	bf00      	nop
   153d8:	200217c0 	.word	0x200217c0

000153dc <z_sched_start>:
{
   153dc:	b510      	push	{r4, lr}
	__asm__ volatile(
   153de:	f04f 0220 	mov.w	r2, #32
   153e2:	f3ef 8411 	mrs	r4, BASEPRI
   153e6:	f382 8811 	msr	BASEPRI, r2
   153ea:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   153ee:	7b42      	ldrb	r2, [r0, #13]
   153f0:	0751      	lsls	r1, r2, #29
   153f2:	d404      	bmi.n	153fe <z_sched_start+0x22>
	__asm__ volatile(
   153f4:	f384 8811 	msr	BASEPRI, r4
   153f8:	f3bf 8f6f 	isb	sy
}
   153fc:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   153fe:	f022 0204 	bic.w	r2, r2, #4
   15402:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   15404:	f7ff ffb6 	bl	15374 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   15408:	4621      	mov	r1, r4
}
   1540a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1540e:	4801      	ldr	r0, [pc, #4]	; (15414 <z_sched_start+0x38>)
   15410:	f011 be62 	b.w	270d8 <z_reschedule>
   15414:	20027126 	.word	0x20027126

00015418 <z_move_thread_to_end_of_prio_q>:
{
   15418:	4601      	mov	r1, r0
   1541a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1541c:	f04f 0320 	mov.w	r3, #32
   15420:	f3ef 8411 	mrs	r4, BASEPRI
   15424:	f383 8811 	msr	BASEPRI, r3
   15428:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1542c:	f990 300d 	ldrsb.w	r3, [r0, #13]
   15430:	2b00      	cmp	r3, #0
   15432:	da02      	bge.n	1543a <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   15434:	4819      	ldr	r0, [pc, #100]	; (1549c <z_move_thread_to_end_of_prio_q+0x84>)
   15436:	f7ff ff47 	bl	152c8 <z_priq_dumb_remove>
	return list->head == list;
   1543a:	4a19      	ldr	r2, [pc, #100]	; (154a0 <z_move_thread_to_end_of_prio_q+0x88>)
   1543c:	4610      	mov	r0, r2
   1543e:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   15442:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15444:	4283      	cmp	r3, r0
   15446:	bf08      	it	eq
   15448:	2300      	moveq	r3, #0
   1544a:	2b00      	cmp	r3, #0
   1544c:	bf38      	it	cc
   1544e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15450:	b1eb      	cbz	r3, 1548e <z_move_thread_to_end_of_prio_q+0x76>
	if (thread_1->base.prio < thread_2->base.prio) {
   15452:	f991 700e 	ldrsb.w	r7, [r1, #14]
   15456:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1545a:	42b7      	cmp	r7, r6
   1545c:	db03      	blt.n	15466 <z_move_thread_to_end_of_prio_q+0x4e>
	return (node == list->tail) ? NULL : node->next;
   1545e:	429d      	cmp	r5, r3
   15460:	d015      	beq.n	1548e <z_move_thread_to_end_of_prio_q+0x76>
   15462:	681b      	ldr	r3, [r3, #0]
   15464:	e7f4      	b.n	15450 <z_move_thread_to_end_of_prio_q+0x38>
	node->prev = successor->prev;
   15466:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   15468:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   1546c:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1546e:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   15470:	7b4b      	ldrb	r3, [r1, #13]
		update_cache(thread == _current);
   15472:	6890      	ldr	r0, [r2, #8]
   15474:	f063 037f 	orn	r3, r3, #127	; 0x7f
   15478:	734b      	strb	r3, [r1, #13]
   1547a:	1a43      	subs	r3, r0, r1
   1547c:	4258      	negs	r0, r3
   1547e:	4158      	adcs	r0, r3
   15480:	f7ff ff38 	bl	152f4 <update_cache>
	__asm__ volatile(
   15484:	f384 8811 	msr	BASEPRI, r4
   15488:	f3bf 8f6f 	isb	sy
}
   1548c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
   1548e:	e9c1 0500 	strd	r0, r5, [r1]
	list->tail->next = node;
   15492:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   15494:	6019      	str	r1, [r3, #0]
	list->tail = node;
   15496:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   15498:	e7ea      	b.n	15470 <z_move_thread_to_end_of_prio_q+0x58>
   1549a:	bf00      	nop
   1549c:	200217e8 	.word	0x200217e8
   154a0:	200217c0 	.word	0x200217c0

000154a4 <z_time_slice>:
{
   154a4:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   154a6:	4a15      	ldr	r2, [pc, #84]	; (154fc <z_time_slice+0x58>)
   154a8:	4b15      	ldr	r3, [pc, #84]	; (15500 <z_time_slice+0x5c>)
   154aa:	6814      	ldr	r4, [r2, #0]
{
   154ac:	4601      	mov	r1, r0
	if (pending_current == _current) {
   154ae:	6898      	ldr	r0, [r3, #8]
   154b0:	42a0      	cmp	r0, r4
   154b2:	461c      	mov	r4, r3
   154b4:	d103      	bne.n	154be <z_time_slice+0x1a>
}
   154b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   154ba:	f7ff beaf 	b.w	1521c <z_reset_time_slice>
	pending_current = NULL;
   154be:	2500      	movs	r5, #0
   154c0:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   154c2:	4a10      	ldr	r2, [pc, #64]	; (15504 <z_time_slice+0x60>)
   154c4:	6812      	ldr	r2, [r2, #0]
   154c6:	b1b2      	cbz	r2, 154f6 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   154c8:	89c2      	ldrh	r2, [r0, #14]
   154ca:	2a7f      	cmp	r2, #127	; 0x7f
   154cc:	d813      	bhi.n	154f6 <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   154ce:	4a0e      	ldr	r2, [pc, #56]	; (15508 <z_time_slice+0x64>)
   154d0:	f990 500e 	ldrsb.w	r5, [r0, #14]
   154d4:	6812      	ldr	r2, [r2, #0]
   154d6:	4295      	cmp	r5, r2
   154d8:	db0d      	blt.n	154f6 <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
   154da:	4a0c      	ldr	r2, [pc, #48]	; (1550c <z_time_slice+0x68>)
   154dc:	4290      	cmp	r0, r2
   154de:	d00a      	beq.n	154f6 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   154e0:	6982      	ldr	r2, [r0, #24]
   154e2:	b942      	cbnz	r2, 154f6 <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   154e4:	691a      	ldr	r2, [r3, #16]
   154e6:	428a      	cmp	r2, r1
   154e8:	dc02      	bgt.n	154f0 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   154ea:	f7ff ff95 	bl	15418 <z_move_thread_to_end_of_prio_q>
   154ee:	e7e2      	b.n	154b6 <z_time_slice+0x12>
			_current_cpu->slice_ticks -= ticks;
   154f0:	1a52      	subs	r2, r2, r1
   154f2:	611a      	str	r2, [r3, #16]
}
   154f4:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   154f6:	2300      	movs	r3, #0
   154f8:	6123      	str	r3, [r4, #16]
   154fa:	e7fb      	b.n	154f4 <z_time_slice+0x50>
   154fc:	200217f0 	.word	0x200217f0
   15500:	200217c0 	.word	0x200217c0
   15504:	200217f8 	.word	0x200217f8
   15508:	200217f4 	.word	0x200217f4
   1550c:	200216d8 	.word	0x200216d8

00015510 <z_impl_k_thread_suspend>:
{
   15510:	b570      	push	{r4, r5, r6, lr}
   15512:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   15514:	3018      	adds	r0, #24
   15516:	f011 feba 	bl	2728e <z_abort_timeout>
	__asm__ volatile(
   1551a:	f04f 0320 	mov.w	r3, #32
   1551e:	f3ef 8611 	mrs	r6, BASEPRI
   15522:	f383 8811 	msr	BASEPRI, r3
   15526:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1552a:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1552e:	2b00      	cmp	r3, #0
   15530:	da07      	bge.n	15542 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   15532:	4621      	mov	r1, r4
   15534:	480e      	ldr	r0, [pc, #56]	; (15570 <z_impl_k_thread_suspend+0x60>)
   15536:	f7ff fec7 	bl	152c8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1553a:	7b63      	ldrb	r3, [r4, #13]
   1553c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   15540:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   15542:	4d0c      	ldr	r5, [pc, #48]	; (15574 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   15544:	7b63      	ldrb	r3, [r4, #13]
   15546:	68a8      	ldr	r0, [r5, #8]
   15548:	f043 0310 	orr.w	r3, r3, #16
   1554c:	7363      	strb	r3, [r4, #13]
   1554e:	1b03      	subs	r3, r0, r4
   15550:	4258      	negs	r0, r3
   15552:	4158      	adcs	r0, r3
   15554:	f7ff fece 	bl	152f4 <update_cache>
	__asm__ volatile(
   15558:	f386 8811 	msr	BASEPRI, r6
   1555c:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   15560:	68ab      	ldr	r3, [r5, #8]
   15562:	42a3      	cmp	r3, r4
   15564:	d103      	bne.n	1556e <z_impl_k_thread_suspend+0x5e>
}
   15566:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1556a:	f011 bdcc 	b.w	27106 <z_reschedule_unlocked>
}
   1556e:	bd70      	pop	{r4, r5, r6, pc}
   15570:	200217e8 	.word	0x200217e8
   15574:	200217c0 	.word	0x200217c0

00015578 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   15578:	6d83      	ldr	r3, [r0, #88]	; 0x58
{
   1557a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1557e:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   15580:	b103      	cbz	r3, 15584 <z_thread_single_abort+0xc>
		thread->fn_abort();
   15582:	4798      	blx	r3
   15584:	f104 0018 	add.w	r0, r4, #24
   15588:	f011 fe81 	bl	2728e <z_abort_timeout>
	__asm__ volatile(
   1558c:	f04f 0320 	mov.w	r3, #32
   15590:	f3ef 8611 	mrs	r6, BASEPRI
   15594:	f383 8811 	msr	BASEPRI, r3
   15598:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1559c:	7b63      	ldrb	r3, [r4, #13]
   1559e:	06d8      	lsls	r0, r3, #27
   155a0:	d123      	bne.n	155ea <z_thread_single_abort+0x72>
		if (z_is_thread_ready(thread)) {
   155a2:	69a2      	ldr	r2, [r4, #24]
   155a4:	bb0a      	cbnz	r2, 155ea <z_thread_single_abort+0x72>
			if (z_is_thread_queued(thread)) {
   155a6:	0619      	lsls	r1, r3, #24
   155a8:	d507      	bpl.n	155ba <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
   155aa:	4621      	mov	r1, r4
   155ac:	481e      	ldr	r0, [pc, #120]	; (15628 <z_thread_single_abort+0xb0>)
   155ae:	f7ff fe8b 	bl	152c8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   155b2:	7b63      	ldrb	r3, [r4, #13]
   155b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   155b8:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   155ba:	4b1c      	ldr	r3, [pc, #112]	; (1562c <z_thread_single_abort+0xb4>)
   155bc:	6898      	ldr	r0, [r3, #8]
   155be:	1b02      	subs	r2, r0, r4
   155c0:	4250      	negs	r0, r2
   155c2:	4150      	adcs	r0, r2
   155c4:	f7ff fe96 	bl	152f4 <update_cache>
			waiter->base.pended_on = NULL;
   155c8:	2700      	movs	r7, #0
		thread->base.thread_state |= mask;
   155ca:	7b63      	ldrb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   155cc:	f104 0828 	add.w	r8, r4, #40	; 0x28
   155d0:	f043 0308 	orr.w	r3, r3, #8
   155d4:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   155d6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   155d8:	4545      	cmp	r5, r8
   155da:	d000      	beq.n	155de <z_thread_single_abort+0x66>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   155dc:	b995      	cbnz	r5, 15604 <z_thread_single_abort+0x8c>
	__asm__ volatile(
   155de:	f386 8811 	msr	BASEPRI, r6
   155e2:	f3bf 8f6f 	isb	sy
}
   155e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
   155ea:	079b      	lsls	r3, r3, #30
   155ec:	d5ec      	bpl.n	155c8 <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
   155ee:	4621      	mov	r1, r4
   155f0:	68a0      	ldr	r0, [r4, #8]
   155f2:	f7ff fe69 	bl	152c8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   155f6:	7b63      	ldrb	r3, [r4, #13]
   155f8:	f023 0302 	bic.w	r3, r3, #2
   155fc:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   155fe:	2300      	movs	r3, #0
   15600:	60a3      	str	r3, [r4, #8]
   15602:	e7e1      	b.n	155c8 <z_thread_single_abort+0x50>
   15604:	f105 0018 	add.w	r0, r5, #24
   15608:	f011 fe41 	bl	2728e <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   1560c:	68a8      	ldr	r0, [r5, #8]
   1560e:	4629      	mov	r1, r5
   15610:	f7ff fe5a 	bl	152c8 <z_priq_dumb_remove>
   15614:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   15616:	4628      	mov	r0, r5
   15618:	f023 0302 	bic.w	r3, r3, #2
   1561c:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   1561e:	60af      	str	r7, [r5, #8]
   15620:	672f      	str	r7, [r5, #112]	; 0x70
			ready_thread(waiter);
   15622:	f7ff fea7 	bl	15374 <ready_thread>
   15626:	e7d6      	b.n	155d6 <z_thread_single_abort+0x5e>
   15628:	200217e8 	.word	0x200217e8
   1562c:	200217c0 	.word	0x200217c0

00015630 <unready_thread>:
{
   15630:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   15632:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   15636:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   15638:	2b00      	cmp	r3, #0
   1563a:	da06      	bge.n	1564a <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1563c:	4807      	ldr	r0, [pc, #28]	; (1565c <unready_thread+0x2c>)
   1563e:	f7ff fe43 	bl	152c8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   15642:	7b4b      	ldrb	r3, [r1, #13]
   15644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   15648:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   1564a:	4b05      	ldr	r3, [pc, #20]	; (15660 <unready_thread+0x30>)
   1564c:	6898      	ldr	r0, [r3, #8]
   1564e:	1a43      	subs	r3, r0, r1
   15650:	4258      	negs	r0, r3
   15652:	4158      	adcs	r0, r3
}
   15654:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   15658:	f7ff be4c 	b.w	152f4 <update_cache>
   1565c:	200217e8 	.word	0x200217e8
   15660:	200217c0 	.word	0x200217c0

00015664 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
   15664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15666:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
   15668:	f011 fe52 	bl	27310 <z_tick_get_32>
   1566c:	182c      	adds	r4, r5, r0
	__asm__ volatile(
   1566e:	f04f 0320 	mov.w	r3, #32
   15672:	f3ef 8711 	mrs	r7, BASEPRI
   15676:	f383 8811 	msr	BASEPRI, r3
   1567a:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1567e:	4e0d      	ldr	r6, [pc, #52]	; (156b4 <z_tick_sleep.part.0+0x50>)
   15680:	4b0d      	ldr	r3, [pc, #52]	; (156b8 <z_tick_sleep.part.0+0x54>)
   15682:	68b0      	ldr	r0, [r6, #8]
   15684:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
   15686:	f011 fd8d 	bl	271a4 <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, timeout);
   1568a:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1568c:	490b      	ldr	r1, [pc, #44]	; (156bc <z_tick_sleep.part.0+0x58>)
   1568e:	462a      	mov	r2, r5
   15690:	17eb      	asrs	r3, r5, #31
   15692:	3018      	adds	r0, #24
   15694:	f000 fa4a 	bl	15b2c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   15698:	68b2      	ldr	r2, [r6, #8]
	ret = arch_swap(key);
   1569a:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1569c:	7b53      	ldrb	r3, [r2, #13]
   1569e:	f043 0310 	orr.w	r3, r3, #16
   156a2:	7353      	strb	r3, [r2, #13]
   156a4:	f7fd ff94 	bl	135d0 <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   156a8:	f011 fe32 	bl	27310 <z_tick_get_32>
   156ac:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   156ae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   156b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   156b4:	200217c0 	.word	0x200217c0
   156b8:	200217f0 	.word	0x200217f0
   156bc:	0002714f 	.word	0x0002714f

000156c0 <pend>:
{
   156c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   156c4:	4606      	mov	r6, r0
   156c6:	4614      	mov	r4, r2
   156c8:	461d      	mov	r5, r3
   156ca:	f04f 0320 	mov.w	r3, #32
   156ce:	f3ef 8711 	mrs	r7, BASEPRI
   156d2:	f383 8811 	msr	BASEPRI, r3
   156d6:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   156da:	f011 fd73 	bl	271c4 <add_to_waitq_locked>
	__asm__ volatile(
   156de:	f387 8811 	msr	BASEPRI, r7
   156e2:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   156e6:	1c6b      	adds	r3, r5, #1
   156e8:	bf08      	it	eq
   156ea:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   156ee:	d008      	beq.n	15702 <pend+0x42>
   156f0:	4622      	mov	r2, r4
   156f2:	462b      	mov	r3, r5
   156f4:	f106 0018 	add.w	r0, r6, #24
   156f8:	4903      	ldr	r1, [pc, #12]	; (15708 <pend+0x48>)
}
   156fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   156fe:	f000 ba15 	b.w	15b2c <z_add_timeout>
   15702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15706:	bf00      	nop
   15708:	0002714f 	.word	0x0002714f

0001570c <z_pend_curr>:
{
   1570c:	b510      	push	{r4, lr}
   1570e:	460c      	mov	r4, r1
	pending_current = _current;
   15710:	4b06      	ldr	r3, [pc, #24]	; (1572c <z_pend_curr+0x20>)
{
   15712:	4611      	mov	r1, r2
	pending_current = _current;
   15714:	6898      	ldr	r0, [r3, #8]
   15716:	4b06      	ldr	r3, [pc, #24]	; (15730 <z_pend_curr+0x24>)
   15718:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   1571a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1571e:	f7ff ffcf 	bl	156c0 <pend>
   15722:	4620      	mov	r0, r4
}
   15724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15728:	f7fd bf52 	b.w	135d0 <arch_swap>
   1572c:	200217c0 	.word	0x200217c0
   15730:	200217f0 	.word	0x200217f0

00015734 <z_set_prio>:
{
   15734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15738:	4604      	mov	r4, r0
	__asm__ volatile(
   1573a:	f04f 0320 	mov.w	r3, #32
   1573e:	f3ef 8811 	mrs	r8, BASEPRI
   15742:	f383 8811 	msr	BASEPRI, r3
   15746:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1574a:	7b43      	ldrb	r3, [r0, #13]
   1574c:	b24e      	sxtb	r6, r1
   1574e:	06db      	lsls	r3, r3, #27
   15750:	d12e      	bne.n	157b0 <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
   15752:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   15754:	bb65      	cbnz	r5, 157b0 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   15756:	4f18      	ldr	r7, [pc, #96]	; (157b8 <z_set_prio+0x84>)
   15758:	4621      	mov	r1, r4
   1575a:	f107 0028 	add.w	r0, r7, #40	; 0x28
   1575e:	f7ff fdb3 	bl	152c8 <z_priq_dumb_remove>
	return list->head == list;
   15762:	6abb      	ldr	r3, [r7, #40]	; 0x28
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   15764:	6afa      	ldr	r2, [r7, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15766:	4283      	cmp	r3, r0
   15768:	bf18      	it	ne
   1576a:	461d      	movne	r5, r3
   1576c:	2d00      	cmp	r5, #0
   1576e:	bf38      	it	cc
   15770:	2500      	movcc	r5, #0
				thread->base.prio = prio;
   15772:	73a6      	strb	r6, [r4, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15774:	b1b5      	cbz	r5, 157a4 <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
   15776:	f995 100e 	ldrsb.w	r1, [r5, #14]
   1577a:	42b1      	cmp	r1, r6
   1577c:	dc03      	bgt.n	15786 <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
   1577e:	42aa      	cmp	r2, r5
   15780:	d010      	beq.n	157a4 <z_set_prio+0x70>
   15782:	682d      	ldr	r5, [r5, #0]
   15784:	e7f6      	b.n	15774 <z_set_prio+0x40>
	node->prev = successor->prev;
   15786:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
   15788:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
   1578c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1578e:	606c      	str	r4, [r5, #4]
			update_cache(1);
   15790:	2001      	movs	r0, #1
   15792:	f7ff fdaf 	bl	152f4 <update_cache>
   15796:	2001      	movs	r0, #1
	__asm__ volatile(
   15798:	f388 8811 	msr	BASEPRI, r8
   1579c:	f3bf 8f6f 	isb	sy
}
   157a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
   157a4:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
   157a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   157aa:	601c      	str	r4, [r3, #0]
	list->tail = node;
   157ac:	62fc      	str	r4, [r7, #44]	; 0x2c
}
   157ae:	e7ef      	b.n	15790 <z_set_prio+0x5c>
			thread->base.prio = prio;
   157b0:	2000      	movs	r0, #0
   157b2:	73a6      	strb	r6, [r4, #14]
   157b4:	e7f0      	b.n	15798 <z_set_prio+0x64>
   157b6:	bf00      	nop
   157b8:	200217c0 	.word	0x200217c0

000157bc <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   157bc:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   157be:	4b04      	ldr	r3, [pc, #16]	; (157d0 <z_sched_init+0x14>)
   157c0:	4608      	mov	r0, r1
   157c2:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   157c6:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   157ca:	f7ff bd3d 	b.w	15248 <k_sched_time_slice_set>
   157ce:	bf00      	nop
   157d0:	200217c0 	.word	0x200217c0

000157d4 <z_impl_k_yield>:
{
   157d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   157d6:	4c24      	ldr	r4, [pc, #144]	; (15868 <z_impl_k_yield+0x94>)
   157d8:	4b24      	ldr	r3, [pc, #144]	; (1586c <z_impl_k_yield+0x98>)
   157da:	68a2      	ldr	r2, [r4, #8]
   157dc:	429a      	cmp	r2, r3
   157de:	d030      	beq.n	15842 <z_impl_k_yield+0x6e>
	__asm__ volatile(
   157e0:	f04f 0320 	mov.w	r3, #32
   157e4:	f3ef 8511 	mrs	r5, BASEPRI
   157e8:	f383 8811 	msr	BASEPRI, r3
   157ec:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   157f0:	68a1      	ldr	r1, [r4, #8]
   157f2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   157f6:	f7ff fd67 	bl	152c8 <z_priq_dumb_remove>
	return list->head == list;
   157fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
   157fc:	68a2      	ldr	r2, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   157fe:	4283      	cmp	r3, r0
   15800:	bf08      	it	eq
   15802:	2300      	moveq	r3, #0
   15804:	2b00      	cmp	r3, #0
   15806:	bf38      	it	cc
   15808:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1580a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1580c:	b32b      	cbz	r3, 1585a <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
   1580e:	f992 700e 	ldrsb.w	r7, [r2, #14]
   15812:	f993 600e 	ldrsb.w	r6, [r3, #14]
   15816:	42b7      	cmp	r7, r6
   15818:	db03      	blt.n	15822 <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
   1581a:	428b      	cmp	r3, r1
   1581c:	d01d      	beq.n	1585a <z_impl_k_yield+0x86>
   1581e:	681b      	ldr	r3, [r3, #0]
   15820:	e7f4      	b.n	1580c <z_impl_k_yield+0x38>
	node->prev = successor->prev;
   15822:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   15824:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
   15828:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   1582a:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
   1582c:	7b53      	ldrb	r3, [r2, #13]
			update_cache(1);
   1582e:	2001      	movs	r0, #1
   15830:	f063 037f 	orn	r3, r3, #127	; 0x7f
   15834:	7353      	strb	r3, [r2, #13]
   15836:	f7ff fd5d 	bl	152f4 <update_cache>
	__asm__ volatile(
   1583a:	f385 8811 	msr	BASEPRI, r5
   1583e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   15842:	f04f 0320 	mov.w	r3, #32
   15846:	f3ef 8011 	mrs	r0, BASEPRI
   1584a:	f383 8811 	msr	BASEPRI, r3
   1584e:	f3bf 8f6f 	isb	sy
}
   15852:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   15856:	f7fd bebb 	b.w	135d0 <arch_swap>
	node->prev = list->tail;
   1585a:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
   1585e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   15860:	601a      	str	r2, [r3, #0]
	list->tail = node;
   15862:	62e2      	str	r2, [r4, #44]	; 0x2c
}
   15864:	e7e2      	b.n	1582c <z_impl_k_yield+0x58>
   15866:	bf00      	nop
   15868:	200217c0 	.word	0x200217c0
   1586c:	200216d8 	.word	0x200216d8

00015870 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(k_timeout_t timeout)
{
   15870:	460b      	mov	r3, r1
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   15872:	3301      	adds	r3, #1
   15874:	bf08      	it	eq
   15876:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1587a:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1587c:	d106      	bne.n	1588c <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1587e:	4b0b      	ldr	r3, [pc, #44]	; (158ac <z_impl_k_sleep+0x3c>)
   15880:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   15882:	f7ff fe45 	bl	15510 <z_impl_k_thread_suspend>
		return (s32_t) K_TICKS_FOREVER;
   15886:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   1588a:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
   1588c:	4604      	mov	r4, r0
	if (ticks == 0) {
   1588e:	b948      	cbnz	r0, 158a4 <z_impl_k_sleep+0x34>
	z_impl_k_yield();
   15890:	f7ff ffa0 	bl	157d4 <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
   15894:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   15898:	fb84 3400 	smull	r3, r4, r4, r0
   1589c:	0bd8      	lsrs	r0, r3, #15
   1589e:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   158a2:	e7f2      	b.n	1588a <z_impl_k_sleep+0x1a>
   158a4:	f7ff fede 	bl	15664 <z_tick_sleep.part.0>
   158a8:	4604      	mov	r4, r0
   158aa:	e7f3      	b.n	15894 <z_impl_k_sleep+0x24>
   158ac:	200217c0 	.word	0x200217c0

000158b0 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   158b0:	4b01      	ldr	r3, [pc, #4]	; (158b8 <z_impl_k_current_get+0x8>)
   158b2:	6898      	ldr	r0, [r3, #8]
   158b4:	4770      	bx	lr
   158b6:	bf00      	nop
   158b8:	200217c0 	.word	0x200217c0

000158bc <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   158bc:	b538      	push	{r3, r4, r5, lr}
   158be:	4604      	mov	r4, r0
   158c0:	f04f 0320 	mov.w	r3, #32
   158c4:	f3ef 8511 	mrs	r5, BASEPRI
   158c8:	f383 8811 	msr	BASEPRI, r3
   158cc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   158d0:	f011 fca3 	bl	2721a <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
   158d4:	b148      	cbz	r0, 158ea <z_impl_k_sem_give+0x2e>
   158d6:	2200      	movs	r2, #0
   158d8:	6702      	str	r2, [r0, #112]	; 0x70
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   158da:	f011 fc28 	bl	2712e <z_ready_thread>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   158de:	4629      	mov	r1, r5
}
   158e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   158e4:	4804      	ldr	r0, [pc, #16]	; (158f8 <z_impl_k_sem_give+0x3c>)
   158e6:	f011 bbf7 	b.w	270d8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   158ea:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   158ee:	429a      	cmp	r2, r3
   158f0:	bf18      	it	ne
   158f2:	3301      	addne	r3, #1
   158f4:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
   158f6:	e7f2      	b.n	158de <z_impl_k_sem_give+0x22>
   158f8:	20027127 	.word	0x20027127

000158fc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   158fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   158fe:	4614      	mov	r4, r2
   15900:	461d      	mov	r5, r3
   15902:	f04f 0320 	mov.w	r3, #32
   15906:	f3ef 8111 	mrs	r1, BASEPRI
   1590a:	f383 8811 	msr	BASEPRI, r3
   1590e:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   15912:	6883      	ldr	r3, [r0, #8]
   15914:	b143      	cbz	r3, 15928 <z_impl_k_sem_take+0x2c>
		sem->count--;
   15916:	3b01      	subs	r3, #1
   15918:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1591a:	f381 8811 	msr	BASEPRI, r1
   1591e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   15922:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   15924:	b003      	add	sp, #12
   15926:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   15928:	ea54 0305 	orrs.w	r3, r4, r5
   1592c:	d106      	bne.n	1593c <z_impl_k_sem_take+0x40>
   1592e:	f381 8811 	msr	BASEPRI, r1
   15932:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   15936:	f06f 000f 	mvn.w	r0, #15
   1593a:	e7f3      	b.n	15924 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1593c:	4602      	mov	r2, r0
   1593e:	e9cd 4500 	strd	r4, r5, [sp]
   15942:	4802      	ldr	r0, [pc, #8]	; (1594c <z_impl_k_sem_take+0x50>)
   15944:	f7ff fee2 	bl	1570c <z_pend_curr>
	return ret;
   15948:	e7ec      	b.n	15924 <z_impl_k_sem_take+0x28>
   1594a:	bf00      	nop
   1594c:	20027127 	.word	0x20027127

00015950 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   15950:	b5f0      	push	{r4, r5, r6, r7, lr}
	sys_dlist_init(&w->waitq);
   15952:	f100 0528 	add.w	r5, r0, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   15956:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;
   1595a:	2504      	movs	r5, #4
   1595c:	7345      	strb	r5, [r0, #13]

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
   1595e:	2500      	movs	r5, #0
{
   15960:	4604      	mov	r4, r0
   15962:	b087      	sub	sp, #28
   15964:	e9dd 670f 	ldrd	r6, r7, [sp, #60]	; 0x3c
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   15968:	e9cd 6703 	strd	r6, r7, [sp, #12]
	thread_base->prio = priority;
   1596c:	7386      	strb	r6, [r0, #14]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1596e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	node->prev = NULL;
   15970:	e9c0 5506 	strd	r5, r5, [r0, #24]
   15974:	9602      	str	r6, [sp, #8]
   15976:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	thread_base->user_options = (u8_t)options;
   15978:	7307      	strb	r7, [r0, #12]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1597a:	9601      	str	r6, [sp, #4]
   1597c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	thread_base->sched_locked = 0U;
   1597e:	73c5      	strb	r5, [r0, #15]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   15980:	9600      	str	r6, [sp, #0]
   15982:	f7fd fe99 	bl	136b8 <arch_new_thread>
	if (!_current) {
   15986:	4b04      	ldr	r3, [pc, #16]	; (15998 <z_setup_new_thread+0x48>)
	new_thread->fn_abort = NULL;
   15988:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
	if (!_current) {
   1598c:	689b      	ldr	r3, [r3, #8]
   1598e:	b103      	cbz	r3, 15992 <z_setup_new_thread+0x42>
	new_thread->resource_pool = _current->resource_pool;
   15990:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   15992:	66a3      	str	r3, [r4, #104]	; 0x68
}
   15994:	b007      	add	sp, #28
   15996:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15998:	200217c0 	.word	0x200217c0

0001599c <z_impl_k_thread_create>:
{
   1599c:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1599e:	2500      	movs	r5, #0
{
   159a0:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   159a2:	9505      	str	r5, [sp, #20]
   159a4:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
   159a6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   159aa:	9504      	str	r5, [sp, #16]
   159ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
   159ae:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   159b0:	9503      	str	r5, [sp, #12]
   159b2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   159b4:	9502      	str	r5, [sp, #8]
   159b6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   159b8:	9501      	str	r5, [sp, #4]
   159ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   159bc:	9500      	str	r5, [sp, #0]
   159be:	f7ff ffc7 	bl	15950 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   159c2:	1c7b      	adds	r3, r7, #1
   159c4:	bf08      	it	eq
   159c6:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   159ca:	d005      	beq.n	159d8 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   159cc:	ea56 0307 	orrs.w	r3, r6, r7
   159d0:	d105      	bne.n	159de <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   159d2:	4620      	mov	r0, r4
   159d4:	f7ff fd02 	bl	153dc <z_sched_start>
}
   159d8:	4620      	mov	r0, r4
   159da:	b007      	add	sp, #28
   159dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   159de:	4632      	mov	r2, r6
   159e0:	463b      	mov	r3, r7
   159e2:	4903      	ldr	r1, [pc, #12]	; (159f0 <z_impl_k_thread_create+0x54>)
   159e4:	f104 0018 	add.w	r0, r4, #24
   159e8:	f000 f8a0 	bl	15b2c <z_add_timeout>
   159ec:	e7f4      	b.n	159d8 <z_impl_k_thread_create+0x3c>
   159ee:	bf00      	nop
   159f0:	0002714f 	.word	0x0002714f

000159f4 <z_init_static_threads>:
{
   159f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   159f8:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 15ab0 <z_init_static_threads+0xbc>
   159fc:	4d2b      	ldr	r5, [pc, #172]	; (15aac <z_init_static_threads+0xb8>)
   159fe:	46c8      	mov	r8, r9
{
   15a00:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   15a02:	454d      	cmp	r5, r9
   15a04:	f105 0430 	add.w	r4, r5, #48	; 0x30
   15a08:	d30d      	bcc.n	15a26 <z_init_static_threads+0x32>
	k_sched_lock();
   15a0a:	f7ff fc49 	bl	152a0 <k_sched_lock>
			return (u32_t)((t * to_hz + off) / from_hz);
   15a0e:	f44f 4900 	mov.w	r9, #32768	; 0x8000
	_FOREACH_STATIC_THREAD(thread_data) {
   15a12:	4c26      	ldr	r4, [pc, #152]	; (15aac <z_init_static_threads+0xb8>)
   15a14:	f8df a09c 	ldr.w	sl, [pc, #156]	; 15ab4 <z_init_static_threads+0xc0>
   15a18:	4544      	cmp	r4, r8
   15a1a:	d321      	bcc.n	15a60 <z_init_static_threads+0x6c>
}
   15a1c:	b007      	add	sp, #28
   15a1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
   15a22:	f7ff bc8b 	b.w	1533c <k_sched_unlock>
		z_setup_new_thread(
   15a26:	f854 3c04 	ldr.w	r3, [r4, #-4]
   15a2a:	9305      	str	r3, [sp, #20]
   15a2c:	f854 3c10 	ldr.w	r3, [r4, #-16]
   15a30:	9304      	str	r3, [sp, #16]
   15a32:	f854 3c14 	ldr.w	r3, [r4, #-20]
   15a36:	9303      	str	r3, [sp, #12]
   15a38:	f854 3c18 	ldr.w	r3, [r4, #-24]
   15a3c:	9302      	str	r3, [sp, #8]
   15a3e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   15a42:	9301      	str	r3, [sp, #4]
   15a44:	f854 3c20 	ldr.w	r3, [r4, #-32]
   15a48:	9300      	str	r3, [sp, #0]
   15a4a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   15a4e:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   15a52:	f7ff ff7d 	bl	15950 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   15a56:	f854 3c30 	ldr.w	r3, [r4, #-48]
   15a5a:	655d      	str	r5, [r3, #84]	; 0x54
   15a5c:	4625      	mov	r5, r4
   15a5e:	e7d0      	b.n	15a02 <z_init_static_threads+0xe>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   15a60:	6a61      	ldr	r1, [r4, #36]	; 0x24
   15a62:	1c4b      	adds	r3, r1, #1
   15a64:	d017      	beq.n	15a96 <z_init_static_threads+0xa2>
   15a66:	f240 3be7 	movw	fp, #999	; 0x3e7
   15a6a:	f04f 0c00 	mov.w	ip, #0
					    K_MSEC(thread_data->init_delay));
   15a6e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   15a72:	fbc9 bc01 	smlal	fp, ip, r9, r1
   15a76:	2300      	movs	r3, #0
   15a78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15a7c:	4658      	mov	r0, fp
   15a7e:	4661      	mov	r1, ip
   15a80:	f7f6 fd9a 	bl	c5b8 <__aeabi_uldivmod>
   15a84:	2700      	movs	r7, #0
   15a86:	4606      	mov	r6, r0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   15a88:	ea56 0307 	orrs.w	r3, r6, r7
			schedule_new_thread(thread_data->init_thread,
   15a8c:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   15a8e:	d104      	bne.n	15a9a <z_init_static_threads+0xa6>
	z_sched_start(thread);
   15a90:	4628      	mov	r0, r5
   15a92:	f7ff fca3 	bl	153dc <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   15a96:	3430      	adds	r4, #48	; 0x30
   15a98:	e7be      	b.n	15a18 <z_init_static_threads+0x24>
   15a9a:	4602      	mov	r2, r0
   15a9c:	463b      	mov	r3, r7
   15a9e:	4651      	mov	r1, sl
   15aa0:	f105 0018 	add.w	r0, r5, #24
   15aa4:	f000 f842 	bl	15b2c <z_add_timeout>
   15aa8:	e7f5      	b.n	15a96 <z_init_static_threads+0xa2>
   15aaa:	bf00      	nop
   15aac:	20020120 	.word	0x20020120
   15ab0:	20020120 	.word	0x20020120
   15ab4:	0002714f 	.word	0x0002714f

00015ab8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   15ab8:	4b03      	ldr	r3, [pc, #12]	; (15ac8 <elapsed+0x10>)
   15aba:	681b      	ldr	r3, [r3, #0]
   15abc:	b90b      	cbnz	r3, 15ac2 <elapsed+0xa>
   15abe:	f7fd bc99 	b.w	133f4 <z_clock_elapsed>
}
   15ac2:	2000      	movs	r0, #0
   15ac4:	4770      	bx	lr
   15ac6:	bf00      	nop
   15ac8:	200217fc 	.word	0x200217fc

00015acc <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   15acc:	6803      	ldr	r3, [r0, #0]
   15ace:	b140      	cbz	r0, 15ae2 <remove_timeout+0x16>
   15ad0:	4a07      	ldr	r2, [pc, #28]	; (15af0 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   15ad2:	6852      	ldr	r2, [r2, #4]
   15ad4:	4290      	cmp	r0, r2
   15ad6:	d004      	beq.n	15ae2 <remove_timeout+0x16>
	if (next(t) != NULL) {
   15ad8:	b11b      	cbz	r3, 15ae2 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   15ada:	689a      	ldr	r2, [r3, #8]
   15adc:	6881      	ldr	r1, [r0, #8]
   15ade:	440a      	add	r2, r1
   15ae0:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   15ae2:	6842      	ldr	r2, [r0, #4]
   15ae4:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   15ae6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   15ae8:	2300      	movs	r3, #0
	node->prev = NULL;
   15aea:	e9c0 3300 	strd	r3, r3, [r0]
}
   15aee:	4770      	bx	lr
   15af0:	20020048 	.word	0x20020048

00015af4 <next_timeout>:
	return list->head == list;
   15af4:	4b0b      	ldr	r3, [pc, #44]	; (15b24 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   15af6:	b510      	push	{r4, lr}
   15af8:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15afa:	429c      	cmp	r4, r3
   15afc:	bf08      	it	eq
   15afe:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   15b00:	f7ff ffda 	bl	15ab8 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   15b04:	b154      	cbz	r4, 15b1c <next_timeout+0x28>
   15b06:	68a3      	ldr	r3, [r4, #8]
   15b08:	1a18      	subs	r0, r3, r0
   15b0a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   15b0e:	4b06      	ldr	r3, [pc, #24]	; (15b28 <next_timeout+0x34>)
   15b10:	691b      	ldr	r3, [r3, #16]
   15b12:	b113      	cbz	r3, 15b1a <next_timeout+0x26>
   15b14:	4298      	cmp	r0, r3
   15b16:	bfa8      	it	ge
   15b18:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   15b1a:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   15b1c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   15b20:	e7f5      	b.n	15b0e <next_timeout+0x1a>
   15b22:	bf00      	nop
   15b24:	20020048 	.word	0x20020048
   15b28:	200217c0 	.word	0x200217c0

00015b2c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   15b2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b30:	9101      	str	r1, [sp, #4]
   15b32:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   15b34:	1c4b      	adds	r3, r1, #1
   15b36:	bf08      	it	eq
   15b38:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   15b3c:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   15b3e:	d061      	beq.n	15c04 <z_add_timeout+0xd8>
#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   15b40:	f06f 0301 	mvn.w	r3, #1
   15b44:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
	k_ticks_t ticks = timeout.ticks + 1;
   15b48:	1c54      	adds	r4, r2, #1
   15b4a:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   15b4e:	ebb3 0804 	subs.w	r8, r3, r4
   15b52:	eb6b 0905 	sbc.w	r9, fp, r5
   15b56:	f1b8 0f00 	cmp.w	r8, #0
   15b5a:	f179 0300 	sbcs.w	r3, r9, #0
   15b5e:	db0f      	blt.n	15b80 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   15b60:	f7ff ffaa 	bl	15ab8 <elapsed>
   15b64:	f06f 0301 	mvn.w	r3, #1
   15b68:	4a2b      	ldr	r2, [pc, #172]	; (15c18 <z_add_timeout+0xec>)
   15b6a:	e9d2 1c00 	ldrd	r1, ip, [r2]
   15b6e:	1a5b      	subs	r3, r3, r1
   15b70:	eb6b 020c 	sbc.w	r2, fp, ip
   15b74:	1b1e      	subs	r6, r3, r4
   15b76:	eb62 0705 	sbc.w	r7, r2, r5
   15b7a:	1a34      	subs	r4, r6, r0
   15b7c:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   15b80:	9b01      	ldr	r3, [sp, #4]
   15b82:	f8ca 300c 	str.w	r3, [sl, #12]
	__asm__ volatile(
   15b86:	f04f 0320 	mov.w	r3, #32
   15b8a:	f3ef 8611 	mrs	r6, BASEPRI
   15b8e:	f383 8811 	msr	BASEPRI, r3
   15b92:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   15b96:	f7ff ff8f 	bl	15ab8 <elapsed>
	ticks = MAX(1, ticks);
   15b9a:	2c01      	cmp	r4, #1
   15b9c:	f175 0300 	sbcs.w	r3, r5, #0
   15ba0:	bfb8      	it	lt
   15ba2:	2401      	movlt	r4, #1
	return list->head == list;
   15ba4:	4b1d      	ldr	r3, [pc, #116]	; (15c1c <z_add_timeout+0xf0>)
		to->dticks = ticks + elapsed();
   15ba6:	4420      	add	r0, r4
   15ba8:	681a      	ldr	r2, [r3, #0]
   15baa:	f8ca 0008 	str.w	r0, [sl, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15bae:	429a      	cmp	r2, r3
   15bb0:	d001      	beq.n	15bb6 <z_add_timeout+0x8a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   15bb2:	685c      	ldr	r4, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   15bb4:	b952      	cbnz	r2, 15bcc <z_add_timeout+0xa0>
	node->prev = list->tail;
   15bb6:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   15bb8:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
   15bbc:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   15bc0:	685a      	ldr	r2, [r3, #4]
   15bc2:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   15bc6:	f8c3 a004 	str.w	sl, [r3, #4]
}
   15bca:	e00d      	b.n	15be8 <z_add_timeout+0xbc>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
   15bcc:	6890      	ldr	r0, [r2, #8]
   15bce:	f8da 1008 	ldr.w	r1, [sl, #8]
   15bd2:	4288      	cmp	r0, r1
   15bd4:	dd19      	ble.n	15c0a <z_add_timeout+0xde>
				t->dticks -= to->dticks;
   15bd6:	1a41      	subs	r1, r0, r1
   15bd8:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
   15bda:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   15bdc:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   15be0:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   15be4:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   15be8:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15bea:	429a      	cmp	r2, r3
   15bec:	d006      	beq.n	15bfc <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   15bee:	4592      	cmp	sl, r2
   15bf0:	d104      	bne.n	15bfc <z_add_timeout+0xd0>
			z_clock_set_timeout(next_timeout(), false);
   15bf2:	f7ff ff7f 	bl	15af4 <next_timeout>
   15bf6:	2100      	movs	r1, #0
   15bf8:	f7fd fb98 	bl	1332c <z_clock_set_timeout>
	__asm__ volatile(
   15bfc:	f386 8811 	msr	BASEPRI, r6
   15c00:	f3bf 8f6f 	isb	sy
		}
	}
}
   15c04:	b003      	add	sp, #12
   15c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   15c0a:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   15c0c:	4294      	cmp	r4, r2
   15c0e:	f8ca 1008 	str.w	r1, [sl, #8]
   15c12:	d0d0      	beq.n	15bb6 <z_add_timeout+0x8a>
   15c14:	6812      	ldr	r2, [r2, #0]
   15c16:	e7cd      	b.n	15bb4 <z_add_timeout+0x88>
   15c18:	200201b0 	.word	0x200201b0
   15c1c:	20020048 	.word	0x20020048

00015c20 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
   15c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15c24:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   15c26:	f7ff fc3d 	bl	154a4 <z_time_slice>
	__asm__ volatile(
   15c2a:	f04f 0320 	mov.w	r3, #32
   15c2e:	f3ef 8411 	mrs	r4, BASEPRI
   15c32:	f383 8811 	msr	BASEPRI, r3
   15c36:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   15c3a:	f8df 8084 	ldr.w	r8, [pc, #132]	; 15cc0 <z_clock_announce+0xa0>
   15c3e:	4d1f      	ldr	r5, [pc, #124]	; (15cbc <z_clock_announce+0x9c>)
   15c40:	46c1      	mov	r9, r8
	return list->head == list;
   15c42:	f8df a080 	ldr.w	sl, [pc, #128]	; 15cc4 <z_clock_announce+0xa4>
   15c46:	602e      	str	r6, [r5, #0]
   15c48:	f8da 0000 	ldr.w	r0, [sl]
   15c4c:	682a      	ldr	r2, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15c4e:	4550      	cmp	r0, sl
   15c50:	e9d8 6700 	ldrd	r6, r7, [r8]
   15c54:	d005      	beq.n	15c62 <z_clock_announce+0x42>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   15c56:	b120      	cbz	r0, 15c62 <z_clock_announce+0x42>
   15c58:	6883      	ldr	r3, [r0, #8]
   15c5a:	4293      	cmp	r3, r2
   15c5c:	dd13      	ble.n	15c86 <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   15c5e:	1a9b      	subs	r3, r3, r2
   15c60:	6083      	str	r3, [r0, #8]
	}

	curr_tick += announce_remaining;
   15c62:	18b6      	adds	r6, r6, r2
   15c64:	eb47 77e2 	adc.w	r7, r7, r2, asr #31
   15c68:	e9c9 6700 	strd	r6, r7, [r9]
	announce_remaining = 0;
   15c6c:	2600      	movs	r6, #0
   15c6e:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
   15c70:	f7ff ff40 	bl	15af4 <next_timeout>
   15c74:	4631      	mov	r1, r6
   15c76:	f7fd fb59 	bl	1332c <z_clock_set_timeout>
	__asm__ volatile(
   15c7a:	f384 8811 	msr	BASEPRI, r4
   15c7e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   15c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_tick += dt;
   15c86:	18f6      	adds	r6, r6, r3
   15c88:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
		announce_remaining -= dt;
   15c8c:	1ad3      	subs	r3, r2, r3
   15c8e:	602b      	str	r3, [r5, #0]
		t->dticks = 0;
   15c90:	2300      	movs	r3, #0
   15c92:	6083      	str	r3, [r0, #8]
		curr_tick += dt;
   15c94:	e9c8 6700 	strd	r6, r7, [r8]
		remove_timeout(t);
   15c98:	f7ff ff18 	bl	15acc <remove_timeout>
   15c9c:	f384 8811 	msr	BASEPRI, r4
   15ca0:	f3bf 8f6f 	isb	sy
		t->fn(t);
   15ca4:	68c3      	ldr	r3, [r0, #12]
   15ca6:	4798      	blx	r3
	__asm__ volatile(
   15ca8:	f04f 0320 	mov.w	r3, #32
   15cac:	f3ef 8411 	mrs	r4, BASEPRI
   15cb0:	f383 8811 	msr	BASEPRI, r3
   15cb4:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   15cb8:	e7c6      	b.n	15c48 <z_clock_announce+0x28>
   15cba:	bf00      	nop
   15cbc:	200217fc 	.word	0x200217fc
   15cc0:	200201b0 	.word	0x200201b0
   15cc4:	20020048 	.word	0x20020048

00015cc8 <z_tick_get>:

s64_t z_tick_get(void)
{
   15cc8:	b510      	push	{r4, lr}
   15cca:	f04f 0320 	mov.w	r3, #32
   15cce:	f3ef 8411 	mrs	r4, BASEPRI
   15cd2:	f383 8811 	msr	BASEPRI, r3
   15cd6:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   15cda:	f7fd fb8b 	bl	133f4 <z_clock_elapsed>
   15cde:	4b06      	ldr	r3, [pc, #24]	; (15cf8 <z_tick_get+0x30>)
   15ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
   15ce4:	1812      	adds	r2, r2, r0
   15ce6:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   15cea:	f384 8811 	msr	BASEPRI, r4
   15cee:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   15cf2:	4610      	mov	r0, r2
   15cf4:	4619      	mov	r1, r3
   15cf6:	bd10      	pop	{r4, pc}
   15cf8:	200201b0 	.word	0x200201b0

00015cfc <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   15cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   15cfe:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
   15d02:	1c56      	adds	r6, r2, #1
   15d04:	f143 0700 	adc.w	r7, r3, #0
   15d08:	2f00      	cmp	r7, #0
   15d0a:	bf08      	it	eq
   15d0c:	2e02      	cmpeq	r6, #2
{
   15d0e:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   15d10:	d302      	bcc.n	15d18 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   15d12:	490c      	ldr	r1, [pc, #48]	; (15d44 <z_timer_expiration_handler+0x48>)
   15d14:	f7ff ff0a 	bl	15b2c <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   15d18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   15d1a:	3301      	adds	r3, #1
   15d1c:	62a3      	str	r3, [r4, #40]	; 0x28

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   15d1e:	69a3      	ldr	r3, [r4, #24]
   15d20:	b10b      	cbz	r3, 15d26 <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   15d22:	4620      	mov	r0, r4
   15d24:	4798      	blx	r3
	return list->head == list;
   15d26:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15d2a:	42a5      	cmp	r5, r4
   15d2c:	d008      	beq.n	15d40 <z_timer_expiration_handler+0x44>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   15d2e:	b13d      	cbz	r5, 15d40 <z_timer_expiration_handler+0x44>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   15d30:	4628      	mov	r0, r5
   15d32:	f011 f9b8 	bl	270a6 <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   15d36:	4628      	mov	r0, r5
   15d38:	f011 f9f9 	bl	2712e <z_ready_thread>
   15d3c:	2300      	movs	r3, #0
   15d3e:	672b      	str	r3, [r5, #112]	; 0x70

	arch_thread_return_value_set(thread, 0);
}
   15d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15d42:	bf00      	nop
   15d44:	00015cfd 	.word	0x00015cfd

00015d48 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   15d48:	e92d 4df3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, sl, fp, lr}
   15d4c:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   15d50:	ea54 0105 	orrs.w	r1, r4, r5
{
   15d54:	4680      	mov	r8, r0
   15d56:	4616      	mov	r6, r2
   15d58:	461f      	mov	r7, r3
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   15d5a:	d016      	beq.n	15d8a <z_impl_k_timer_start+0x42>
   15d5c:	f06f 0101 	mvn.w	r1, #1
   15d60:	ebb1 0a04 	subs.w	sl, r1, r4
   15d64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   15d68:	eb61 0b05 	sbc.w	fp, r1, r5
   15d6c:	f1ba 0f00 	cmp.w	sl, #0
   15d70:	f17b 0100 	sbcs.w	r1, fp, #0
   15d74:	da09      	bge.n	15d8a <z_impl_k_timer_start+0x42>
		period.ticks = MAX(period.ticks - 1, 1);
   15d76:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
   15d7a:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
   15d7e:	2c01      	cmp	r4, #1
   15d80:	f175 0100 	sbcs.w	r1, r5, #0
   15d84:	bfbc      	itt	lt
   15d86:	2401      	movlt	r4, #1
   15d88:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   15d8a:	f06f 0101 	mvn.w	r1, #1
   15d8e:	1a89      	subs	r1, r1, r2
   15d90:	9100      	str	r1, [sp, #0]
   15d92:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   15d96:	eb61 0103 	sbc.w	r1, r1, r3
   15d9a:	9101      	str	r1, [sp, #4]
   15d9c:	e9dd 0100 	ldrd	r0, r1, [sp]
   15da0:	2800      	cmp	r0, #0
   15da2:	f171 0100 	sbcs.w	r1, r1, #0
   15da6:	da09      	bge.n	15dbc <z_impl_k_timer_start+0x74>
		duration.ticks = MAX(duration.ticks - 1, 0);
   15da8:	f112 36ff 	adds.w	r6, r2, #4294967295	; 0xffffffff
   15dac:	f143 37ff 	adc.w	r7, r3, #4294967295	; 0xffffffff
   15db0:	2e00      	cmp	r6, #0
   15db2:	f177 0300 	sbcs.w	r3, r7, #0
   15db6:	bfbc      	itt	lt
   15db8:	2600      	movlt	r6, #0
   15dba:	2700      	movlt	r7, #0
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
   15dbc:	4640      	mov	r0, r8
   15dbe:	f011 fa66 	bl	2728e <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   15dc2:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   15dc4:	4632      	mov	r2, r6
	timer->status = 0U;
   15dc6:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   15dca:	4640      	mov	r0, r8
   15dcc:	463b      	mov	r3, r7
   15dce:	4904      	ldr	r1, [pc, #16]	; (15de0 <z_impl_k_timer_start+0x98>)
	timer->period = period;
   15dd0:	e9c8 4508 	strd	r4, r5, [r8, #32]
		     duration);
}
   15dd4:	b002      	add	sp, #8
   15dd6:	e8bd 4df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   15dda:	f7ff bea7 	b.w	15b2c <z_add_timeout>
   15dde:	bf00      	nop
   15de0:	00015cfd 	.word	0x00015cfd

00015de4 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(struct device *unused)
{
   15de4:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   15de6:	4c06      	ldr	r4, [pc, #24]	; (15e00 <statics_init+0x1c>)
   15de8:	4d06      	ldr	r5, [pc, #24]	; (15e04 <statics_init+0x20>)
   15dea:	42ac      	cmp	r4, r5
   15dec:	d301      	bcc.n	15df2 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   15dee:	2000      	movs	r0, #0
   15df0:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   15df2:	4620      	mov	r0, r4
   15df4:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   15df8:	f011 fabc 	bl	27374 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   15dfc:	3418      	adds	r4, #24
   15dfe:	e7f4      	b.n	15dea <statics_init+0x6>
   15e00:	20020120 	.word	0x20020120
   15e04:	20020138 	.word	0x20020138

00015e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>:

 private:
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
                          const TfLiteRegistration& registration,
                          MicroOpResolver::BuiltinParseFunction parser) {
    if (op == BuiltinOperator_CUSTOM) {
   15e08:	2920      	cmp	r1, #32
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
   15e0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15e0e:	4605      	mov	r5, r0
   15e10:	4688      	mov	r8, r1
   15e12:	4614      	mov	r4, r2
   15e14:	4699      	mov	r9, r3
    if (op == BuiltinOperator_CUSTOM) {
   15e16:	d10a      	bne.n	15e2e <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x26>
      if (error_reporter_ != nullptr) {
   15e18:	f241 238c 	movw	r3, #4748	; 0x128c
   15e1c:	58c0      	ldr	r0, [r0, r3]
   15e1e:	b910      	cbnz	r0, 15e26 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x1e>
        TF_LITE_REPORT_ERROR(error_reporter_,
                             "Invalid parameter BuiltinOperator_CUSTOM to the "
                             "AddBuiltin function.");
      }
      return kTfLiteError;
   15e20:	2001      	movs	r0, #1
    builtin_codes_[num_buitin_ops_] = op;
    builtin_parsers_[num_buitin_ops_] = parser;
    num_buitin_ops_++;

    return kTfLiteOk;
  }
   15e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        TF_LITE_REPORT_ERROR(error_reporter_,
   15e26:	4922      	ldr	r1, [pc, #136]	; (15eb0 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xa8>)
   15e28:	f01a f856 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   15e2c:	e7f8      	b.n	15e20 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x18>
    if (FindOp(op) != nullptr) {
   15e2e:	6803      	ldr	r3, [r0, #0]
   15e30:	691b      	ldr	r3, [r3, #16]
   15e32:	4798      	blx	r3
   15e34:	4607      	mov	r7, r0
   15e36:	b148      	cbz	r0, 15e4c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x44>
      if (error_reporter_ != nullptr) {
   15e38:	f241 238c 	movw	r3, #4748	; 0x128c
   15e3c:	58e8      	ldr	r0, [r5, r3]
   15e3e:	2800      	cmp	r0, #0
   15e40:	d0ee      	beq.n	15e20 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x18>
        TF_LITE_REPORT_ERROR(error_reporter_,
   15e42:	4642      	mov	r2, r8
   15e44:	491b      	ldr	r1, [pc, #108]	; (15eb4 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xac>)
   15e46:	f01a f847 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   15e4a:	e7e9      	b.n	15e20 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x18>
    if (registrations_len_ >= tOpCount) {
   15e4c:	f241 0e04 	movw	lr, #4100	; 0x1004
   15e50:	f855 c00e 	ldr.w	ip, [r5, lr]
   15e54:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   15e58:	d90a      	bls.n	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x68>
      if (error_reporter_) {
   15e5a:	f241 238c 	movw	r3, #4748	; 0x128c
   15e5e:	58e8      	ldr	r0, [r5, r3]
   15e60:	2800      	cmp	r0, #0
   15e62:	d0dd      	beq.n	15e20 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x18>
        TF_LITE_REPORT_ERROR(error_reporter_,
   15e64:	2380      	movs	r3, #128	; 0x80
   15e66:	4642      	mov	r2, r8
   15e68:	4913      	ldr	r1, [pc, #76]	; (15eb8 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xb0>)
   15e6a:	f01a f835 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   15e6e:	e7d7      	b.n	15e20 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x18>
    registrations_[registrations_len_] = registration;
   15e70:	eb05 1a4c 	add.w	sl, r5, ip, lsl #5
   15e74:	f10a 0604 	add.w	r6, sl, #4
   15e78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   15e7a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   15e7c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   15e80:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    registrations_len_++;
   15e84:	f10c 0301 	add.w	r3, ip, #1
    registrations_[registrations_len_].builtin_code = op;
   15e88:	f8ca 8018 	str.w	r8, [sl, #24]
    registrations_len_++;
   15e8c:	f845 300e 	str.w	r3, [r5, lr]
    builtin_codes_[num_buitin_ops_] = op;
   15e90:	f241 2388 	movw	r3, #4744	; 0x1288
   15e94:	f241 0108 	movw	r1, #4104	; 0x1008
   15e98:	58ea      	ldr	r2, [r5, r3]
   15e9a:	18a8      	adds	r0, r5, r2
   15e9c:	f800 8001 	strb.w	r8, [r0, r1]
    builtin_parsers_[num_buitin_ops_] = parser;
   15ea0:	f202 4122 	addw	r1, r2, #1058	; 0x422
    num_buitin_ops_++;
   15ea4:	3201      	adds	r2, #1
    builtin_parsers_[num_buitin_ops_] = parser;
   15ea6:	f845 9021 	str.w	r9, [r5, r1, lsl #2]
    return kTfLiteOk;
   15eaa:	4638      	mov	r0, r7
    num_buitin_ops_++;
   15eac:	50ea      	str	r2, [r5, r3]
    return kTfLiteOk;
   15eae:	e7b8      	b.n	15e22 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x1a>
   15eb0:	0003402e 	.word	0x0003402e
   15eb4:	00034073 	.word	0x00034073
   15eb8:	000340c2 	.word	0x000340c2

00015ebc <_ZN6tflite14AllOpsResolverC1Ev>:
const char* GetString_ETHOSU();
}  // namespace custom
}  // namespace micro
}  // namespace ops

AllOpsResolver::AllOpsResolver() {
   15ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      : error_reporter_(error_reporter) {}
   15ec0:	f241 2388 	movw	r3, #4744	; 0x1288
   15ec4:	2500      	movs	r5, #0
   15ec6:	f241 0604 	movw	r6, #4100	; 0x1004
   15eca:	f241 278c 	movw	r7, #4748	; 0x128c
   15ece:	4604      	mov	r4, r0
   15ed0:	5185      	str	r5, [r0, r6]
   15ed2:	50c5      	str	r5, [r0, r3]
   15ed4:	4be3      	ldr	r3, [pc, #908]	; (16264 <_ZN6tflite14AllOpsResolverC1Ev+0x3a8>)
   15ed6:	b088      	sub	sp, #32
   15ed8:	51c5      	str	r5, [r0, r7]
   15eda:	6003      	str	r3, [r0, #0]
    return AddBuiltin(BuiltinOperator_ABS, tflite::ops::micro::Register_ABS(),
   15edc:	4668      	mov	r0, sp
   15ede:	f004 fc7b 	bl	1a7d8 <_ZN6tflite3ops5micro12Register_ABSEv>
                      ParseAbs);
   15ee2:	466a      	mov	r2, sp
   15ee4:	2165      	movs	r1, #101	; 0x65
   15ee6:	4be0      	ldr	r3, [pc, #896]	; (16268 <_ZN6tflite14AllOpsResolverC1Ev+0x3ac>)
   15ee8:	4620      	mov	r0, r4
   15eea:	f7ff ff8d 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_ADD, tflite::ops::micro::Register_ADD(),
   15eee:	4668      	mov	r0, sp
   15ef0:	f000 ff50 	bl	16d94 <_ZN6tflite3ops5micro12Register_ADDEv>
                      ParseAdd);
   15ef4:	4629      	mov	r1, r5
   15ef6:	466a      	mov	r2, sp
   15ef8:	4bdc      	ldr	r3, [pc, #880]	; (1626c <_ZN6tflite14AllOpsResolverC1Ev+0x3b0>)
   15efa:	4620      	mov	r0, r4
   15efc:	f7ff ff84 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_ARG_MAX(), ParseArgMax);
   15f00:	4668      	mov	r0, sp
   15f02:	f001 f82b 	bl	16f5c <_ZN6tflite3ops5micro16Register_ARG_MAXEv>
   15f06:	466a      	mov	r2, sp
   15f08:	2138      	movs	r1, #56	; 0x38
   15f0a:	4bd9      	ldr	r3, [pc, #868]	; (16270 <_ZN6tflite14AllOpsResolverC1Ev+0x3b4>)
   15f0c:	4620      	mov	r0, r4
   15f0e:	f7ff ff7b 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_ARG_MIN(), ParseArgMin);
   15f12:	4668      	mov	r0, sp
   15f14:	f001 f82e 	bl	16f74 <_ZN6tflite3ops5micro16Register_ARG_MINEv>
   15f18:	466a      	mov	r2, sp
   15f1a:	214f      	movs	r1, #79	; 0x4f
   15f1c:	4bd5      	ldr	r3, [pc, #852]	; (16274 <_ZN6tflite14AllOpsResolverC1Ev+0x3b8>)
   15f1e:	4620      	mov	r0, r4
   15f20:	f7ff ff72 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_AVERAGE_POOL_2D(),
   15f24:	4668      	mov	r0, sp
   15f26:	f006 ff2f 	bl	1cd88 <_ZN6tflite3ops5micro24Register_AVERAGE_POOL_2DEv>
                      ParsePool);
   15f2a:	466a      	mov	r2, sp
   15f2c:	2101      	movs	r1, #1
   15f2e:	4bd2      	ldr	r3, [pc, #840]	; (16278 <_ZN6tflite14AllOpsResolverC1Ev+0x3bc>)
   15f30:	4620      	mov	r0, r4
   15f32:	f7ff ff69 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_CEIL, tflite::ops::micro::Register_CEIL(),
   15f36:	4668      	mov	r0, sp
   15f38:	f001 f976 	bl	17228 <_ZN6tflite3ops5micro13Register_CEILEv>
                      ParseCeil);
   15f3c:	466a      	mov	r2, sp
   15f3e:	2168      	movs	r1, #104	; 0x68
   15f40:	4bce      	ldr	r3, [pc, #824]	; (1627c <_ZN6tflite14AllOpsResolverC1Ev+0x3c0>)
   15f42:	4620      	mov	r0, r4
   15f44:	f7ff ff60 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_CONCATENATION(),
   15f48:	4668      	mov	r0, sp
   15f4a:	f003 f9a1 	bl	19290 <_ZN6tflite3ops5micro22Register_CONCATENATIONEv>
                      ParseConcatenation);
   15f4e:	466a      	mov	r2, sp
   15f50:	2102      	movs	r1, #2
   15f52:	4bcb      	ldr	r3, [pc, #812]	; (16280 <_ZN6tflite14AllOpsResolverC1Ev+0x3c4>)
   15f54:	4620      	mov	r0, r4
   15f56:	f7ff ff57 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_CONV_2D(), ParseConv2D);
   15f5a:	4668      	mov	r0, sp
   15f5c:	f003 fd94 	bl	19a88 <_ZN6tflite3ops5micro16Register_CONV_2DEv>
   15f60:	466a      	mov	r2, sp
   15f62:	2103      	movs	r1, #3
   15f64:	4bc7      	ldr	r3, [pc, #796]	; (16284 <_ZN6tflite14AllOpsResolverC1Ev+0x3c8>)
   15f66:	4620      	mov	r0, r4
   15f68:	f7ff ff4e 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_COS, tflite::ops::micro::Register_COS(),
   15f6c:	4668      	mov	r0, sp
   15f6e:	f004 fc4f 	bl	1a810 <_ZN6tflite3ops5micro12Register_COSEv>
                      ParseCos);
   15f72:	466a      	mov	r2, sp
   15f74:	216c      	movs	r1, #108	; 0x6c
   15f76:	4bc4      	ldr	r3, [pc, #784]	; (16288 <_ZN6tflite14AllOpsResolverC1Ev+0x3cc>)
   15f78:	4620      	mov	r0, r4
   15f7a:	f7ff ff45 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_DEPTHWISE_CONV_2D(),
   15f7e:	4668      	mov	r0, sp
   15f80:	f003 ffdc 	bl	19f3c <_ZN6tflite3ops5micro26Register_DEPTHWISE_CONV_2DEv>
                      ParseDepthwiseConv2D);
   15f84:	466a      	mov	r2, sp
   15f86:	2104      	movs	r1, #4
   15f88:	4bc0      	ldr	r3, [pc, #768]	; (1628c <_ZN6tflite14AllOpsResolverC1Ev+0x3d0>)
   15f8a:	4620      	mov	r0, r4
   15f8c:	f7ff ff3c 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_DEQUANTIZE(),
   15f90:	4668      	mov	r0, sp
   15f92:	f004 facb 	bl	1a52c <_ZN6tflite3ops5micro19Register_DEQUANTIZEEv>
                      ParseDequantize);
   15f96:	466a      	mov	r2, sp
   15f98:	2106      	movs	r1, #6
   15f9a:	4bbd      	ldr	r3, [pc, #756]	; (16290 <_ZN6tflite14AllOpsResolverC1Ev+0x3d4>)
   15f9c:	4620      	mov	r0, r4
   15f9e:	f7ff ff33 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_EQUAL(), ParseEqual);
   15fa2:	4668      	mov	r0, sp
   15fa4:	f001 f94e 	bl	17244 <_ZN6tflite3ops5micro14Register_EQUALEv>
   15fa8:	466a      	mov	r2, sp
   15faa:	2147      	movs	r1, #71	; 0x47
   15fac:	4bb9      	ldr	r3, [pc, #740]	; (16294 <_ZN6tflite14AllOpsResolverC1Ev+0x3d8>)
   15fae:	4620      	mov	r0, r4
   15fb0:	f7ff ff2a 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_FLOOR(), ParseFloor);
   15fb4:	4668      	mov	r0, sp
   15fb6:	f004 fcf5 	bl	1a9a4 <_ZN6tflite3ops5micro14Register_FLOOREv>
   15fba:	466a      	mov	r2, sp
   15fbc:	2108      	movs	r1, #8
   15fbe:	4bb6      	ldr	r3, [pc, #728]	; (16298 <_ZN6tflite14AllOpsResolverC1Ev+0x3dc>)
   15fc0:	4620      	mov	r0, r4
   15fc2:	f7ff ff21 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_FULLY_CONNECTED(),
   15fc6:	4668      	mov	r0, sp
   15fc8:	f004 ff94 	bl	1aef4 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>
                      ParseFullyConnected);
   15fcc:	466a      	mov	r2, sp
   15fce:	2109      	movs	r1, #9
   15fd0:	4bb2      	ldr	r3, [pc, #712]	; (1629c <_ZN6tflite14AllOpsResolverC1Ev+0x3e0>)
   15fd2:	4620      	mov	r0, r4
   15fd4:	f7ff ff18 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_GREATER(), ParseGreater);
   15fd8:	4668      	mov	r0, sp
   15fda:	f001 f94b 	bl	17274 <_ZN6tflite3ops5micro16Register_GREATEREv>
   15fde:	466a      	mov	r2, sp
   15fe0:	213d      	movs	r1, #61	; 0x3d
   15fe2:	4baf      	ldr	r3, [pc, #700]	; (162a0 <_ZN6tflite14AllOpsResolverC1Ev+0x3e4>)
   15fe4:	4620      	mov	r0, r4
   15fe6:	f7ff ff0f 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_GREATER_EQUAL(),
   15fea:	4668      	mov	r0, sp
   15fec:	f001 f94e 	bl	1728c <_ZN6tflite3ops5micro22Register_GREATER_EQUALEv>
                      ParseGreaterEqual);
   15ff0:	466a      	mov	r2, sp
   15ff2:	213e      	movs	r1, #62	; 0x3e
   15ff4:	4bab      	ldr	r3, [pc, #684]	; (162a4 <_ZN6tflite14AllOpsResolverC1Ev+0x3e8>)
   15ff6:	4620      	mov	r0, r4
   15ff8:	f7ff ff06 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_HARD_SWISH(),
   15ffc:	4668      	mov	r0, sp
   15ffe:	f005 f82f 	bl	1b060 <_ZN6tflite3ops5micro19Register_HARD_SWISHEv>
                      ParseHardSwish);
   16002:	466a      	mov	r2, sp
   16004:	2175      	movs	r1, #117	; 0x75
   16006:	4ba8      	ldr	r3, [pc, #672]	; (162a8 <_ZN6tflite14AllOpsResolverC1Ev+0x3ec>)
   16008:	4620      	mov	r0, r4
   1600a:	f7ff fefd 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_L2_NORMALIZATION(),
   1600e:	4668      	mov	r0, sp
   16010:	f015 fe81 	bl	2bd16 <_ZN6tflite3ops5micro25Register_L2_NORMALIZATIONEv>
                      ParseL2Normalization);
   16014:	466a      	mov	r2, sp
   16016:	210b      	movs	r1, #11
   16018:	4ba4      	ldr	r3, [pc, #656]	; (162ac <_ZN6tflite14AllOpsResolverC1Ev+0x3f0>)
   1601a:	4620      	mov	r0, r4
   1601c:	f7ff fef4 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_LESS, tflite::ops::micro::Register_LESS(),
   16020:	4668      	mov	r0, sp
   16022:	f001 f93f 	bl	172a4 <_ZN6tflite3ops5micro13Register_LESSEv>
                      ParseLess);
   16026:	466a      	mov	r2, sp
   16028:	213a      	movs	r1, #58	; 0x3a
   1602a:	4ba1      	ldr	r3, [pc, #644]	; (162b0 <_ZN6tflite14AllOpsResolverC1Ev+0x3f4>)
   1602c:	4620      	mov	r0, r4
   1602e:	f7ff feeb 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_LESS_EQUAL(),
   16032:	4668      	mov	r0, sp
   16034:	f001 f942 	bl	172bc <_ZN6tflite3ops5micro19Register_LESS_EQUALEv>
                      ParseLessEqual);
   16038:	466a      	mov	r2, sp
   1603a:	213f      	movs	r1, #63	; 0x3f
   1603c:	4b9d      	ldr	r3, [pc, #628]	; (162b4 <_ZN6tflite14AllOpsResolverC1Ev+0x3f8>)
   1603e:	4620      	mov	r0, r4
   16040:	f7ff fee2 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_LOG, tflite::ops::micro::Register_LOG(),
   16044:	4668      	mov	r0, sp
   16046:	f004 fbf1 	bl	1a82c <_ZN6tflite3ops5micro12Register_LOGEv>
                      ParseLog);
   1604a:	466a      	mov	r2, sp
   1604c:	2149      	movs	r1, #73	; 0x49
   1604e:	4b9a      	ldr	r3, [pc, #616]	; (162b8 <_ZN6tflite14AllOpsResolverC1Ev+0x3fc>)
   16050:	4620      	mov	r0, r4
   16052:	f7ff fed9 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_LOGICAL_AND(),
   16056:	4668      	mov	r0, sp
   16058:	f005 faa2 	bl	1b5a0 <_ZN6tflite3ops5micro20Register_LOGICAL_ANDEv>
                      ParseLogicalAnd);
   1605c:	466a      	mov	r2, sp
   1605e:	2156      	movs	r1, #86	; 0x56
   16060:	4b96      	ldr	r3, [pc, #600]	; (162bc <_ZN6tflite14AllOpsResolverC1Ev+0x400>)
   16062:	4620      	mov	r0, r4
   16064:	f7ff fed0 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_LOGICAL_NOT(),
   16068:	4668      	mov	r0, sp
   1606a:	f004 fc17 	bl	1a89c <_ZN6tflite3ops5micro20Register_LOGICAL_NOTEv>
                      ParseLogicalNot);
   1606e:	466a      	mov	r2, sp
   16070:	2157      	movs	r1, #87	; 0x57
   16072:	4b93      	ldr	r3, [pc, #588]	; (162c0 <_ZN6tflite14AllOpsResolverC1Ev+0x404>)
   16074:	4620      	mov	r0, r4
   16076:	f7ff fec7 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_LOGICAL_OR(),
   1607a:	4668      	mov	r0, sp
   1607c:	f005 fa84 	bl	1b588 <_ZN6tflite3ops5micro19Register_LOGICAL_OREv>
                      ParseLogicalOr);
   16080:	466a      	mov	r2, sp
   16082:	2154      	movs	r1, #84	; 0x54
   16084:	4b8f      	ldr	r3, [pc, #572]	; (162c4 <_ZN6tflite14AllOpsResolverC1Ev+0x408>)
   16086:	4620      	mov	r0, r4
   16088:	f7ff febe 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_LOGISTIC(), ParseLogistic);
   1608c:	4668      	mov	r0, sp
   1608e:	f005 fb05 	bl	1b69c <_ZN6tflite3ops5micro17Register_LOGISTICEv>
   16092:	466a      	mov	r2, sp
   16094:	210e      	movs	r1, #14
   16096:	4b8c      	ldr	r3, [pc, #560]	; (162c8 <_ZN6tflite14AllOpsResolverC1Ev+0x40c>)
   16098:	4620      	mov	r0, r4
   1609a:	f7ff feb5 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_MAXIMUM(), ParseMaximum);
   1609e:	4668      	mov	r0, sp
   160a0:	f005 fd3a 	bl	1bb18 <_ZN6tflite3ops5micro16Register_MAXIMUMEv>
   160a4:	466a      	mov	r2, sp
   160a6:	2137      	movs	r1, #55	; 0x37
   160a8:	4b88      	ldr	r3, [pc, #544]	; (162cc <_ZN6tflite14AllOpsResolverC1Ev+0x410>)
   160aa:	4620      	mov	r0, r4
   160ac:	f7ff feac 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_MAX_POOL_2D(), ParsePool);
   160b0:	4668      	mov	r0, sp
   160b2:	f006 fe75 	bl	1cda0 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>
   160b6:	466a      	mov	r2, sp
   160b8:	2111      	movs	r1, #17
   160ba:	4b6f      	ldr	r3, [pc, #444]	; (16278 <_ZN6tflite14AllOpsResolverC1Ev+0x3bc>)
   160bc:	4620      	mov	r0, r4
   160be:	f7ff fea3 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_MEAN, tflite::ops::micro::Register_MEAN(),
   160c2:	4668      	mov	r0, sp
   160c4:	f007 faea 	bl	1d69c <_ZN6tflite3ops5micro13Register_MEANEv>
                      ParseReducer);
   160c8:	466a      	mov	r2, sp
   160ca:	2128      	movs	r1, #40	; 0x28
   160cc:	4b80      	ldr	r3, [pc, #512]	; (162d0 <_ZN6tflite14AllOpsResolverC1Ev+0x414>)
   160ce:	4620      	mov	r0, r4
   160d0:	f7ff fe9a 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_MINIMUM(), ParseMinimum);
   160d4:	4668      	mov	r0, sp
   160d6:	f005 fd2b 	bl	1bb30 <_ZN6tflite3ops5micro16Register_MINIMUMEv>
   160da:	466a      	mov	r2, sp
   160dc:	2139      	movs	r1, #57	; 0x39
   160de:	4b7d      	ldr	r3, [pc, #500]	; (162d4 <_ZN6tflite14AllOpsResolverC1Ev+0x418>)
   160e0:	4620      	mov	r0, r4
   160e2:	f7ff fe91 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_MUL, tflite::ops::micro::Register_MUL(),
   160e6:	4668      	mov	r0, sp
   160e8:	f005 ff72 	bl	1bfd0 <_ZN6tflite3ops5micro12Register_MULEv>
                      ParseMul);
   160ec:	466a      	mov	r2, sp
   160ee:	2112      	movs	r1, #18
   160f0:	4b79      	ldr	r3, [pc, #484]	; (162d8 <_ZN6tflite14AllOpsResolverC1Ev+0x41c>)
   160f2:	4620      	mov	r0, r4
   160f4:	f7ff fe88 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_NEG, tflite::ops::micro::Register_NEG(),
   160f8:	4668      	mov	r0, sp
   160fa:	f006 f8bd 	bl	1c278 <_ZN6tflite3ops5micro12Register_NEGEv>
                      ParseNeg);
   160fe:	466a      	mov	r2, sp
   16100:	213b      	movs	r1, #59	; 0x3b
   16102:	4b76      	ldr	r3, [pc, #472]	; (162dc <_ZN6tflite14AllOpsResolverC1Ev+0x420>)
   16104:	4620      	mov	r0, r4
   16106:	f7ff fe7f 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_NOT_EQUAL(), ParseNotEqual);
   1610a:	4668      	mov	r0, sp
   1610c:	f001 f8a6 	bl	1725c <_ZN6tflite3ops5micro18Register_NOT_EQUALEv>
   16110:	466a      	mov	r2, sp
   16112:	2148      	movs	r1, #72	; 0x48
   16114:	4b72      	ldr	r3, [pc, #456]	; (162e0 <_ZN6tflite14AllOpsResolverC1Ev+0x424>)
   16116:	4620      	mov	r0, r4
   16118:	f7ff fe76 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_PACK, tflite::ops::micro::Register_PACK(),
   1611c:	4668      	mov	r0, sp
   1611e:	f006 fae9 	bl	1c6f4 <_ZN6tflite3ops5micro13Register_PACKEv>
                      ParsePack);
   16122:	466a      	mov	r2, sp
   16124:	2153      	movs	r1, #83	; 0x53
   16126:	4b6f      	ldr	r3, [pc, #444]	; (162e4 <_ZN6tflite14AllOpsResolverC1Ev+0x428>)
   16128:	4620      	mov	r0, r4
   1612a:	f7ff fe6d 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_PAD, tflite::ops::micro::Register_PAD(),
   1612e:	4668      	mov	r0, sp
   16130:	f006 fbc6 	bl	1c8c0 <_ZN6tflite3ops5micro12Register_PADEv>
                      ParsePad);
   16134:	466a      	mov	r2, sp
   16136:	2122      	movs	r1, #34	; 0x22
   16138:	4b6b      	ldr	r3, [pc, #428]	; (162e8 <_ZN6tflite14AllOpsResolverC1Ev+0x42c>)
   1613a:	4620      	mov	r0, r4
   1613c:	f7ff fe64 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_PADV2(), ParsePadV2);
   16140:	4668      	mov	r0, sp
   16142:	f016 ff83 	bl	2d04c <_ZN6tflite3ops5micro14Register_PADV2Ev>
   16146:	466a      	mov	r2, sp
   16148:	213c      	movs	r1, #60	; 0x3c
   1614a:	4b68      	ldr	r3, [pc, #416]	; (162ec <_ZN6tflite14AllOpsResolverC1Ev+0x430>)
   1614c:	4620      	mov	r0, r4
   1614e:	f7ff fe5b 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_PRELU(), ParsePrelu);
   16152:	4668      	mov	r0, sp
   16154:	f006 ff9a 	bl	1d08c <_ZN6tflite3ops5micro14Register_PRELUEv>
   16158:	466a      	mov	r2, sp
   1615a:	2136      	movs	r1, #54	; 0x36
   1615c:	4b64      	ldr	r3, [pc, #400]	; (162f0 <_ZN6tflite14AllOpsResolverC1Ev+0x434>)
   1615e:	4620      	mov	r0, r4
   16160:	f7ff fe52 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_QUANTIZE(), ParseQuantize);
   16164:	4668      	mov	r0, sp
   16166:	f007 fa37 	bl	1d5d8 <_ZN6tflite3ops5micro17Register_QUANTIZEEv>
   1616a:	466a      	mov	r2, sp
   1616c:	2172      	movs	r1, #114	; 0x72
   1616e:	4b61      	ldr	r3, [pc, #388]	; (162f4 <_ZN6tflite14AllOpsResolverC1Ev+0x438>)
   16170:	4620      	mov	r0, r4
   16172:	f7ff fe49 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_RELU, tflite::ops::micro::Register_RELU(),
   16176:	4668      	mov	r0, sp
   16178:	f000 fd18 	bl	16bac <_ZN6tflite3ops5micro13Register_RELUEv>
                      ParseRelu);
   1617c:	466a      	mov	r2, sp
   1617e:	2113      	movs	r1, #19
   16180:	4b5d      	ldr	r3, [pc, #372]	; (162f8 <_ZN6tflite14AllOpsResolverC1Ev+0x43c>)
   16182:	4620      	mov	r0, r4
   16184:	f7ff fe40 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_RELU6(), ParseRelu6);
   16188:	4668      	mov	r0, sp
   1618a:	f000 fd1d 	bl	16bc8 <_ZN6tflite3ops5micro14Register_RELU6Ev>
   1618e:	466a      	mov	r2, sp
   16190:	2115      	movs	r1, #21
   16192:	4b5a      	ldr	r3, [pc, #360]	; (162fc <_ZN6tflite14AllOpsResolverC1Ev+0x440>)
   16194:	4620      	mov	r0, r4
   16196:	f7ff fe37 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_RESHAPE(), ParseReshape);
   1619a:	4668      	mov	r0, sp
   1619c:	f007 fd96 	bl	1dccc <_ZN6tflite3ops5micro16Register_RESHAPEEv>
   161a0:	466a      	mov	r2, sp
   161a2:	2116      	movs	r1, #22
   161a4:	4b56      	ldr	r3, [pc, #344]	; (16300 <_ZN6tflite14AllOpsResolverC1Ev+0x444>)
   161a6:	4620      	mov	r0, r4
   161a8:	f7ff fe2e 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_RESIZE_NEAREST_NEIGHBOR(),
   161ac:	4668      	mov	r0, sp
   161ae:	f007 fded 	bl	1dd8c <_ZN6tflite3ops5micro32Register_RESIZE_NEAREST_NEIGHBOREv>
                      ParseResizeNearestNeighbor);
   161b2:	466a      	mov	r2, sp
   161b4:	2161      	movs	r1, #97	; 0x61
   161b6:	4b53      	ldr	r3, [pc, #332]	; (16304 <_ZN6tflite14AllOpsResolverC1Ev+0x448>)
   161b8:	4620      	mov	r0, r4
   161ba:	f7ff fe25 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_ROUND(), ParseRound);
   161be:	4668      	mov	r0, sp
   161c0:	f007 ff32 	bl	1e028 <_ZN6tflite3ops5micro14Register_ROUNDEv>
   161c4:	466a      	mov	r2, sp
   161c6:	2174      	movs	r1, #116	; 0x74
   161c8:	4b4f      	ldr	r3, [pc, #316]	; (16308 <_ZN6tflite14AllOpsResolverC1Ev+0x44c>)
   161ca:	4620      	mov	r0, r4
   161cc:	f7ff fe1c 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_RSQRT(), ParseRsqrt);
   161d0:	4668      	mov	r0, sp
   161d2:	f004 fb47 	bl	1a864 <_ZN6tflite3ops5micro14Register_RSQRTEv>
   161d6:	466a      	mov	r2, sp
   161d8:	214c      	movs	r1, #76	; 0x4c
   161da:	4b4c      	ldr	r3, [pc, #304]	; (1630c <_ZN6tflite14AllOpsResolverC1Ev+0x450>)
   161dc:	4620      	mov	r0, r4
   161de:	f7ff fe13 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_SIN, tflite::ops::micro::Register_SIN(),
   161e2:	4668      	mov	r0, sp
   161e4:	f004 fb06 	bl	1a7f4 <_ZN6tflite3ops5micro12Register_SINEv>
                      ParseSin);
   161e8:	466a      	mov	r2, sp
   161ea:	2142      	movs	r1, #66	; 0x42
   161ec:	4b48      	ldr	r3, [pc, #288]	; (16310 <_ZN6tflite14AllOpsResolverC1Ev+0x454>)
   161ee:	4620      	mov	r0, r4
   161f0:	f7ff fe0a 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_SOFTMAX(), ParseSoftmax);
   161f4:	4668      	mov	r0, sp
   161f6:	f007 fff9 	bl	1e1ec <_ZN6tflite3ops5micro16Register_SOFTMAXEv>
   161fa:	466a      	mov	r2, sp
   161fc:	2119      	movs	r1, #25
   161fe:	4b45      	ldr	r3, [pc, #276]	; (16314 <_ZN6tflite14AllOpsResolverC1Ev+0x458>)
   16200:	4620      	mov	r0, r4
   16202:	f7ff fe01 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_SPLIT(), ParseSplit);
   16206:	4668      	mov	r0, sp
   16208:	f008 fa5a 	bl	1e6c0 <_ZN6tflite3ops5micro14Register_SPLITEv>
   1620c:	466a      	mov	r2, sp
   1620e:	2131      	movs	r1, #49	; 0x31
   16210:	4b41      	ldr	r3, [pc, #260]	; (16318 <_ZN6tflite14AllOpsResolverC1Ev+0x45c>)
   16212:	4620      	mov	r0, r4
   16214:	f7ff fdf8 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_SQRT, tflite::ops::micro::Register_SQRT(),
   16218:	4668      	mov	r0, sp
   1621a:	f004 fb15 	bl	1a848 <_ZN6tflite3ops5micro13Register_SQRTEv>
                      ParseSqrt);
   1621e:	466a      	mov	r2, sp
   16220:	214b      	movs	r1, #75	; 0x4b
   16222:	4b3e      	ldr	r3, [pc, #248]	; (1631c <_ZN6tflite14AllOpsResolverC1Ev+0x460>)
   16224:	4620      	mov	r0, r4
   16226:	f7ff fdef 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_SQUARE(), ParseSquare);
   1622a:	4668      	mov	r0, sp
   1622c:	f004 fb28 	bl	1a880 <_ZN6tflite3ops5micro15Register_SQUAREEv>
   16230:	466a      	mov	r2, sp
   16232:	215c      	movs	r1, #92	; 0x5c
   16234:	4b3a      	ldr	r3, [pc, #232]	; (16320 <_ZN6tflite14AllOpsResolverC1Ev+0x464>)
   16236:	4620      	mov	r0, r4
   16238:	f7ff fde6 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_STRIDED_SLICE(),
   1623c:	4668      	mov	r0, sp
   1623e:	f008 fb75 	bl	1e92c <_ZN6tflite3ops5micro22Register_STRIDED_SLICEEv>
                      ParseStridedSlice);
   16242:	466a      	mov	r2, sp
   16244:	212d      	movs	r1, #45	; 0x2d
   16246:	4b37      	ldr	r3, [pc, #220]	; (16324 <_ZN6tflite14AllOpsResolverC1Ev+0x468>)
   16248:	4620      	mov	r0, r4
   1624a:	f7ff fddd 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_SUB, tflite::ops::micro::Register_SUB(),
   1624e:	4668      	mov	r0, sp
   16250:	f008 fc60 	bl	1eb14 <_ZN6tflite3ops5micro12Register_SUBEv>
                      ParseSub);
   16254:	466a      	mov	r2, sp
   16256:	2129      	movs	r1, #41	; 0x29
   16258:	4b33      	ldr	r3, [pc, #204]	; (16328 <_ZN6tflite14AllOpsResolverC1Ev+0x46c>)
   1625a:	4620      	mov	r0, r4
   1625c:	f7ff fdd4 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
   16260:	e064      	b.n	1632c <_ZN6tflite14AllOpsResolverC1Ev+0x470>
   16262:	bf00      	nop
   16264:	00032f58 	.word	0x00032f58
   16268:	0002ff51 	.word	0x0002ff51
   1626c:	0002075d 	.word	0x0002075d
   16270:	000207cd 	.word	0x000207cd
   16274:	00020855 	.word	0x00020855
   16278:	00020c89 	.word	0x00020c89
   1627c:	0002ff55 	.word	0x0002ff55
   16280:	000208dd 	.word	0x000208dd
   16284:	0002095d 	.word	0x0002095d
   16288:	0002ff59 	.word	0x0002ff59
   1628c:	00020a15 	.word	0x00020a15
   16290:	0002ff5d 	.word	0x0002ff5d
   16294:	0002ff61 	.word	0x0002ff61
   16298:	0002ff65 	.word	0x0002ff65
   1629c:	00020ad9 	.word	0x00020ad9
   162a0:	0002ff69 	.word	0x0002ff69
   162a4:	0002ff6d 	.word	0x0002ff6d
   162a8:	0002ff71 	.word	0x0002ff71
   162ac:	00020ba1 	.word	0x00020ba1
   162b0:	0002ff75 	.word	0x0002ff75
   162b4:	0002ff79 	.word	0x0002ff79
   162b8:	0002ff7d 	.word	0x0002ff7d
   162bc:	0002ff81 	.word	0x0002ff81
   162c0:	0002ff85 	.word	0x0002ff85
   162c4:	0002ff89 	.word	0x0002ff89
   162c8:	0002ff8d 	.word	0x0002ff8d
   162cc:	0002ff91 	.word	0x0002ff91
   162d0:	000204d5 	.word	0x000204d5
   162d4:	0002ff95 	.word	0x0002ff95
   162d8:	00020c15 	.word	0x00020c15
   162dc:	0002ff99 	.word	0x0002ff99
   162e0:	0002ff9d 	.word	0x0002ff9d
   162e4:	000205d1 	.word	0x000205d1
   162e8:	0002ffa1 	.word	0x0002ffa1
   162ec:	0002ffa5 	.word	0x0002ffa5
   162f0:	0002ffa9 	.word	0x0002ffa9
   162f4:	0002ffad 	.word	0x0002ffad
   162f8:	0002ffb1 	.word	0x0002ffb1
   162fc:	0002ffb5 	.word	0x0002ffb5
   16300:	00020435 	.word	0x00020435
   16304:	00020545 	.word	0x00020545
   16308:	0002ffb9 	.word	0x0002ffb9
   1630c:	0002ffbd 	.word	0x0002ffbd
   16310:	0002ffc1 	.word	0x0002ffc1
   16314:	00020e49 	.word	0x00020e49
   16318:	00020eb1 	.word	0x00020eb1
   1631c:	0002ffc5 	.word	0x0002ffc5
   16320:	0002ffc9 	.word	0x0002ffc9
   16324:	00020649 	.word	0x00020649
   16328:	00020d41 	.word	0x00020d41
    return AddBuiltin(BuiltinOperator_SVDF, tflite::ops::micro::Register_SVDF(),
   1632c:	4668      	mov	r0, sp
   1632e:	f009 fadf 	bl	1f8f0 <_ZN6tflite3ops5micro13Register_SVDFEv>
                      ParseSvdf);
   16332:	466a      	mov	r2, sp
   16334:	211b      	movs	r1, #27
   16336:	4b24      	ldr	r3, [pc, #144]	; (163c8 <_ZN6tflite14AllOpsResolverC1Ev+0x50c>)
   16338:	4620      	mov	r0, r4
   1633a:	f7ff fd65 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_TANH, tflite::ops::micro::Register_TANH(),
   1633e:	4668      	mov	r0, sp
   16340:	f009 fae4 	bl	1f90c <_ZN6tflite3ops5micro13Register_TANHEv>
                      ParseTanh);
   16344:	466a      	mov	r2, sp
   16346:	211c      	movs	r1, #28
   16348:	4b20      	ldr	r3, [pc, #128]	; (163cc <_ZN6tflite14AllOpsResolverC1Ev+0x510>)
   1634a:	4620      	mov	r0, r4
   1634c:	f7ff fd5c 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_UNPACK(), ParseUnpack);
   16350:	4668      	mov	r0, sp
   16352:	f00a f801 	bl	20358 <_ZN6tflite3ops5micro15Register_UNPACKEv>
   16356:	466a      	mov	r2, sp
   16358:	2158      	movs	r1, #88	; 0x58
   1635a:	4b1d      	ldr	r3, [pc, #116]	; (163d0 <_ZN6tflite14AllOpsResolverC1Ev+0x514>)
   1635c:	4620      	mov	r0, r4
   1635e:	f7ff fd53 	bl	15e08 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
  AddTanh();
  AddUnpack();

  // TODO(b/159644355): Figure out if custom Ops belong in AllOpsResolver.
  TfLiteRegistration* registration =
      tflite::ops::micro::custom::Register_ETHOSU();
   16362:	f015 faa8 	bl	2b8b6 <_ZN6tflite3ops5micro6custom15Register_ETHOSUEv>
  if (registration) {
   16366:	4605      	mov	r5, r0
   16368:	b160      	cbz	r0, 16384 <_ZN6tflite14AllOpsResolverC1Ev+0x4c8>
    AddCustom(tflite::ops::micro::custom::GetString_ETHOSU(), registration);
   1636a:	f004 faa5 	bl	1a8b8 <_ZN6tflite3ops5micro6custom16GetString_ETHOSUEv>
    if (registrations_len_ >= tOpCount) {
   1636e:	59a3      	ldr	r3, [r4, r6]
   16370:	4680      	mov	r8, r0
   16372:	2b7f      	cmp	r3, #127	; 0x7f
   16374:	d90a      	bls.n	1638c <_ZN6tflite14AllOpsResolverC1Ev+0x4d0>
      if (error_reporter_) {
   16376:	59e0      	ldr	r0, [r4, r7]
   16378:	b120      	cbz	r0, 16384 <_ZN6tflite14AllOpsResolverC1Ev+0x4c8>
        TF_LITE_REPORT_ERROR(
   1637a:	2380      	movs	r3, #128	; 0x80
   1637c:	4642      	mov	r2, r8
   1637e:	4915      	ldr	r1, [pc, #84]	; (163d4 <_ZN6tflite14AllOpsResolverC1Ev+0x518>)
   16380:	f019 fdaa 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  }
}
   16384:	4620      	mov	r0, r4
   16386:	b008      	add	sp, #32
   16388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (FindOp(name) != nullptr) {
   1638c:	4601      	mov	r1, r0
   1638e:	4620      	mov	r0, r4
   16390:	f011 f831 	bl	273f6 <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpEPKc>
   16394:	b138      	cbz	r0, 163a6 <_ZN6tflite14AllOpsResolverC1Ev+0x4ea>
      if (error_reporter_ != nullptr) {
   16396:	59e0      	ldr	r0, [r4, r7]
   16398:	2800      	cmp	r0, #0
   1639a:	d0f3      	beq.n	16384 <_ZN6tflite14AllOpsResolverC1Ev+0x4c8>
        TF_LITE_REPORT_ERROR(error_reporter_,
   1639c:	4642      	mov	r2, r8
   1639e:	490e      	ldr	r1, [pc, #56]	; (163d8 <_ZN6tflite14AllOpsResolverC1Ev+0x51c>)
   163a0:	f019 fd9a 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   163a4:	e7ee      	b.n	16384 <_ZN6tflite14AllOpsResolverC1Ev+0x4c8>
    TfLiteRegistration* new_registration = &registrations_[registrations_len_];
   163a6:	59a7      	ldr	r7, [r4, r6]
    registrations_len_ += 1;
   163a8:	1c7b      	adds	r3, r7, #1
    *new_registration = *registration;
   163aa:	eb04 1747 	add.w	r7, r4, r7, lsl #5
    registrations_len_ += 1;
   163ae:	51a3      	str	r3, [r4, r6]
    *new_registration = *registration;
   163b0:	1d3e      	adds	r6, r7, #4
   163b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   163b4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   163b6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   163ba:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    new_registration->builtin_code = BuiltinOperator_CUSTOM;
   163be:	2320      	movs	r3, #32
    new_registration->custom_name = name;
   163c0:	e9c7 3806 	strd	r3, r8, [r7, #24]
   163c4:	e7de      	b.n	16384 <_ZN6tflite14AllOpsResolverC1Ev+0x4c8>
   163c6:	bf00      	nop
   163c8:	00020db5 	.word	0x00020db5
   163cc:	0002ffcd 	.word	0x0002ffcd
   163d0:	000206e5 	.word	0x000206e5
   163d4:	00034105 	.word	0x00034105
   163d8:	00034147 	.word	0x00034147

000163dc <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
#include "tensorflow/lite/micro/micro_string.h"
#endif

namespace tflite {

int MicroErrorReporter::Report(const char* format, va_list args) {
   163dc:	b500      	push	{lr}
   163de:	b0c1      	sub	sp, #260	; 0x104
   163e0:	4613      	mov	r3, r2
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
   163e2:	4668      	mov	r0, sp
   163e4:	460a      	mov	r2, r1
   163e6:	f44f 7180 	mov.w	r1, #256	; 0x100
   163ea:	f000 f983 	bl	166f4 <MicroVsnprintf>
  DebugLog(log_buffer);
   163ee:	4668      	mov	r0, sp
   163f0:	f00a ffac 	bl	2134c <DebugLog>
  DebugLog("\r\n");
   163f4:	4803      	ldr	r0, [pc, #12]	; (16404 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x28>)
   163f6:	f00a ffa9 	bl	2134c <DebugLog>
#endif
  return 0;
}
   163fa:	2000      	movs	r0, #0
   163fc:	b041      	add	sp, #260	; 0x104
   163fe:	f85d fb04 	ldr.w	pc, [sp], #4
   16402:	bf00      	nop
   16404:	00033f2b 	.word	0x00033f2b

00016408 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:

namespace tflite {
namespace {

const char* OpNameFromRegistration(const TfLiteRegistration* registration) {
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
   16408:	6943      	ldr	r3, [r0, #20]
   1640a:	2b20      	cmp	r3, #32
   1640c:	d101      	bne.n	16412 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0xa>
    return registration->custom_name;
   1640e:	6980      	ldr	r0, [r0, #24]
   16410:	4770      	bx	lr
  return (v < low) || (high < v);
   16412:	b2db      	uxtb	r3, r3
   16414:	2b7e      	cmp	r3, #126	; 0x7e
}

inline const char *EnumNameBuiltinOperator(BuiltinOperator e) {
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesBuiltinOperator()[index];
   16416:	bf9a      	itte	ls
   16418:	4a02      	ldrls	r2, [pc, #8]	; (16424 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x1c>)
   1641a:	f852 0023 	ldrls.w	r0, [r2, r3, lsl #2]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
   1641e:	4802      	ldrhi	r0, [pc, #8]	; (16428 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x20>)
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
  }
}
   16420:	4770      	bx	lr
   16422:	bf00      	nop
   16424:	00032f88 	.word	0x00032f88
   16428:	00033f2d 	.word	0x00033f2d

0001642c <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE>:
      }
    }
  }
}

void MicroInterpreter::Init(tflite::Profiler* profiler) {
   1642c:	b570      	push	{r4, r5, r6, lr}
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *operator_codes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *subgraphs() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
   1642e:	6846      	ldr	r6, [r0, #4]
   16430:	4604      	mov	r4, r0
   16432:	460d      	mov	r5, r1
  }

  template<typename P> P GetPointer(voffset_t field) {
    auto field_offset = GetOptionalFieldOffset(field);
   16434:	4630      	mov	r0, r6
   16436:	2108      	movs	r1, #8
   16438:	f011 f81b 	bl	27472 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    auto p = data_ + field_offset;
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1643c:	b1d0      	cbz	r0, 16474 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x48>
   1643e:	5833      	ldr	r3, [r6, r0]
    auto p = data_ + field_offset;
   16440:	1832      	adds	r2, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   16442:	18d1      	adds	r1, r2, r3
  const flatbuffers::Vector<flatbuffers::Offset<SubGraph>>* subgraphs =
      model_->subgraphs();
  if (subgraphs->size() != 1) {
   16444:	58d2      	ldr	r2, [r2, r3]
   16446:	2a01      	cmp	r2, #1
   16448:	d007      	beq.n	1645a <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x2e>
    TF_LITE_REPORT_ERROR(error_reporter_,
   1644a:	490b      	ldr	r1, [pc, #44]	; (16478 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x4c>)
   1644c:	68e0      	ldr	r0, [r4, #12]
   1644e:	f019 fd43 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Only 1 subgraph is currently supported.\n");
    initialization_status_ = kTfLiteError;
   16452:	2301      	movs	r3, #1
  context_.impl_ = static_cast<void*>(&context_helper_);
  context_.ReportError = context_helper_.ReportOpError;
  context_.recommended_num_threads = 1;
  context_.profiler = profiler;

  initialization_status_ = kTfLiteOk;
   16454:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
}
   16458:	bd70      	pop	{r4, r5, r6, pc}
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   1645a:	1d0b      	adds	r3, r1, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
   1645c:	6849      	ldr	r1, [r1, #4]
  context_.recommended_num_threads = 1;
   1645e:	6362      	str	r2, [r4, #52]	; 0x34
   16460:	440b      	add	r3, r1
  subgraph_ = (*subgraphs)[0];
   16462:	66a3      	str	r3, [r4, #104]	; 0x68
  context_.impl_ = static_cast<void*>(&context_helper_);
   16464:	f104 036c 	add.w	r3, r4, #108	; 0x6c
   16468:	61e3      	str	r3, [r4, #28]
  context_.ReportError = context_helper_.ReportOpError;
   1646a:	4b04      	ldr	r3, [pc, #16]	; (1647c <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x50>)
  context_.profiler = profiler;
   1646c:	6465      	str	r5, [r4, #68]	; 0x44
  context_.ReportError = context_helper_.ReportOpError;
   1646e:	6263      	str	r3, [r4, #36]	; 0x24
  initialization_status_ = kTfLiteOk;
   16470:	2300      	movs	r3, #0
   16472:	e7ef      	b.n	16454 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x28>
  if (subgraphs->size() != 1) {
   16474:	6803      	ldr	r3, [r0, #0]
   16476:	deff      	udf	#255	; 0xff
   16478:	00034193 	.word	0x00034193
   1647c:	00027453 	.word	0x00027453

00016480 <_ZNK11flatbuffers6VectorIiE3GetEj>:
  return_type Get(uoffset_t i) const {
   16480:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
   16482:	6803      	ldr	r3, [r0, #0]
   16484:	4299      	cmp	r1, r3
   16486:	d306      	bcc.n	16496 <_ZNK11flatbuffers6VectorIiE3GetEj+0x16>
   16488:	f240 1101 	movw	r1, #257	; 0x101
   1648c:	4b04      	ldr	r3, [pc, #16]	; (164a0 <_ZNK11flatbuffers6VectorIiE3GetEj+0x20>)
   1648e:	4a05      	ldr	r2, [pc, #20]	; (164a4 <_ZNK11flatbuffers6VectorIiE3GetEj+0x24>)
   16490:	4805      	ldr	r0, [pc, #20]	; (164a8 <_ZNK11flatbuffers6VectorIiE3GetEj+0x28>)
   16492:	f00f ffb9 	bl	26408 <__assert_func>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
   16496:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  }
   1649a:	6848      	ldr	r0, [r1, #4]
   1649c:	bd08      	pop	{r3, pc}
   1649e:	bf00      	nop
   164a0:	000341bc 	.word	0x000341bc
   164a4:	000341c7 	.word	0x000341c7
   164a8:	00034286 	.word	0x00034286

000164ac <_ZN6tflite16MicroInterpreter5inputEj>:
    }
  }
  return kTfLiteOk;
}

TfLiteTensor* MicroInterpreter::input(size_t index) {
   164ac:	b513      	push	{r0, r1, r4, lr}
   164ae:	4604      	mov	r4, r0
   164b0:	9101      	str	r1, [sp, #4]
                        : nullptr;
  }
  template<typename P> P GetPointer(voffset_t field) const {
    return const_cast<Table *>(this)->GetPointer<P>(field);
   164b2:	6e80      	ldr	r0, [r0, #104]	; 0x68
   164b4:	2106      	movs	r1, #6
   164b6:	f011 f812 	bl	274de <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  const size_t length = inputs_size();
  if ((index < 0) || (index >= length)) {
   164ba:	9a01      	ldr	r2, [sp, #4]
  uoffset_t Length() const { return size(); }
   164bc:	6803      	ldr	r3, [r0, #0]
   164be:	429a      	cmp	r2, r3
   164c0:	d306      	bcc.n	164d0 <_ZN6tflite16MicroInterpreter5inputEj+0x24>
    TF_LITE_REPORT_ERROR(error_reporter_,
   164c2:	4907      	ldr	r1, [pc, #28]	; (164e0 <_ZN6tflite16MicroInterpreter5inputEj+0x34>)
   164c4:	68e0      	ldr	r0, [r4, #12]
   164c6:	f019 fd07 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input index %d out of range (length is %d)", index,
                         length);
    return nullptr;
   164ca:	2000      	movs	r0, #0
  }
  return &(context_.tensors[inputs().Get(index)]);
}
   164cc:	b002      	add	sp, #8
   164ce:	bd10      	pop	{r4, pc}
  return &(context_.tensors[inputs().Get(index)]);
   164d0:	4611      	mov	r1, r2
   164d2:	f7ff ffd5 	bl	16480 <_ZNK11flatbuffers6VectorIiE3GetEj>
   164d6:	69a3      	ldr	r3, [r4, #24]
   164d8:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   164dc:	e7f6      	b.n	164cc <_ZN6tflite16MicroInterpreter5inputEj+0x20>
   164de:	bf00      	nop
   164e0:	000342df 	.word	0x000342df

000164e4 <_ZN6tflite16MicroInterpreter6outputEj>:

TfLiteTensor* MicroInterpreter::output(size_t index) {
   164e4:	b513      	push	{r0, r1, r4, lr}
   164e6:	4604      	mov	r4, r0
   164e8:	9101      	str	r1, [sp, #4]
    return const_cast<Table *>(this)->GetPointer<P>(field);
   164ea:	6e80      	ldr	r0, [r0, #104]	; 0x68
   164ec:	2108      	movs	r1, #8
   164ee:	f010 fff6 	bl	274de <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  const size_t length = outputs_size();
  if ((index < 0) || (index >= length)) {
   164f2:	9a01      	ldr	r2, [sp, #4]
  uoffset_t Length() const { return size(); }
   164f4:	6803      	ldr	r3, [r0, #0]
   164f6:	429a      	cmp	r2, r3
   164f8:	d306      	bcc.n	16508 <_ZN6tflite16MicroInterpreter6outputEj+0x24>
    TF_LITE_REPORT_ERROR(error_reporter_,
   164fa:	4907      	ldr	r1, [pc, #28]	; (16518 <_ZN6tflite16MicroInterpreter6outputEj+0x34>)
   164fc:	68e0      	ldr	r0, [r4, #12]
   164fe:	f019 fceb 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Output index %d out of range (length is %d)", index,
                         length);
    return nullptr;
   16502:	2000      	movs	r0, #0
  }
  return &(context_.tensors[outputs().Get(index)]);
}
   16504:	b002      	add	sp, #8
   16506:	bd10      	pop	{r4, pc}
  return &(context_.tensors[outputs().Get(index)]);
   16508:	4611      	mov	r1, r2
   1650a:	f7ff ffb9 	bl	16480 <_ZNK11flatbuffers6VectorIiE3GetEj>
   1650e:	69a3      	ldr	r3, [r4, #24]
   16510:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   16514:	e7f6      	b.n	16504 <_ZN6tflite16MicroInterpreter6outputEj+0x20>
   16516:	bf00      	nop
   16518:	0003430a 	.word	0x0003430a

0001651c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:
TfLiteStatus MicroInterpreter::AllocateTensors() {
   1651c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (allocator_.StartModelAllocation(model_, &context_, op_resolver_,
   16520:	f100 0710 	add.w	r7, r0, #16
   16524:	9000      	str	r0, [sp, #0]
TfLiteStatus MicroInterpreter::AllocateTensors() {
   16526:	4604      	mov	r4, r0
  if (allocator_.StartModelAllocation(model_, &context_, op_resolver_,
   16528:	6883      	ldr	r3, [r0, #8]
   1652a:	6841      	ldr	r1, [r0, #4]
   1652c:	463a      	mov	r2, r7
   1652e:	6e00      	ldr	r0, [r0, #96]	; 0x60
   16530:	f00a ffc8 	bl	214c4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE>
   16534:	b148      	cbz	r0, 1654a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2e>
    TF_LITE_REPORT_ERROR(error_reporter_,
   16536:	4933      	ldr	r1, [pc, #204]	; (16604 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xe8>)
   16538:	68e0      	ldr	r0, [r4, #12]
   1653a:	f019 fccd 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    initialization_status_ = kTfLiteError;
   1653e:	2001      	movs	r0, #1
   16540:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
}
   16544:	b002      	add	sp, #8
   16546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
   1654a:	4605      	mov	r5, r0
    auto* node = &(node_and_registrations_[i].node);
   1654c:	f04f 0828 	mov.w	r8, #40	; 0x28
  context_.AllocatePersistentBuffer = context_helper_.AllocatePersistentBuffer;
   16550:	4b2d      	ldr	r3, [pc, #180]	; (16608 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xec>)
  context_.GetScratchBuffer = nullptr;
   16552:	e9c4 0014 	strd	r0, r0, [r4, #80]	; 0x50
  context_.AllocatePersistentBuffer = context_helper_.AllocatePersistentBuffer;
   16556:	64a3      	str	r3, [r4, #72]	; 0x48
    return const_cast<Table *>(this)->GetPointer<P>(field);
   16558:	210a      	movs	r1, #10
   1655a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   1655c:	f010 ffc8 	bl	274f0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
   16560:	6803      	ldr	r3, [r0, #0]
   16562:	429d      	cmp	r5, r3
   16564:	d212      	bcs.n	1658c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x70>
    auto* node = &(node_and_registrations_[i].node);
   16566:	6826      	ldr	r6, [r4, #0]
  static void* GetScratchBuffer(TfLiteContext* ctx, int buffer_idx);

  static void ReportOpError(struct TfLiteContext* context, const char* format,
                            ...);

  void SetNodeIndex(int idx) { current_node_idx_ = idx; }
   16568:	6765      	str	r5, [r4, #116]	; 0x74
   1656a:	fb08 6605 	mla	r6, r8, r5, r6
    auto* registration = node_and_registrations_[i].registration;
   1656e:	6a73      	ldr	r3, [r6, #36]	; 0x24
      init_data = reinterpret_cast<const char*>(node->builtin_data);
   16570:	6971      	ldr	r1, [r6, #20]
    if (registration->builtin_code == BuiltinOperator_CUSTOM) {
   16572:	695a      	ldr	r2, [r3, #20]
    if (registration->init) {
   16574:	681b      	ldr	r3, [r3, #0]
    if (registration->builtin_code == BuiltinOperator_CUSTOM) {
   16576:	2a20      	cmp	r2, #32
      init_data_size = 0;
   16578:	bf14      	ite	ne
   1657a:	2200      	movne	r2, #0
      init_data_size = node->custom_initial_data_size;
   1657c:	e9d6 1206 	ldrdeq	r1, r2, [r6, #24]
    if (registration->init) {
   16580:	b113      	cbz	r3, 16588 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x6c>
          registration->init(&context_, init_data, init_data_size);
   16582:	4638      	mov	r0, r7
   16584:	4798      	blx	r3
      node->user_data =
   16586:	6130      	str	r0, [r6, #16]
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
   16588:	3501      	adds	r5, #1
   1658a:	e7e5      	b.n	16558 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3c>
   1658c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
   16590:	2500      	movs	r5, #0
    auto* node = &(node_and_registrations_[i].node);
   16592:	2628      	movs	r6, #40	; 0x28
   16594:	6763      	str	r3, [r4, #116]	; 0x74
  context_.RequestScratchBufferInArena =
   16596:	4b1d      	ldr	r3, [pc, #116]	; (1660c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf0>)
   16598:	6523      	str	r3, [r4, #80]	; 0x50
   1659a:	210a      	movs	r1, #10
   1659c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   1659e:	f010 ffa7 	bl	274f0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
   165a2:	6803      	ldr	r3, [r0, #0]
   165a4:	429d      	cmp	r5, r3
   165a6:	d21a      	bcs.n	165de <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xc2>
    auto* node = &(node_and_registrations_[i].node);
   165a8:	6821      	ldr	r1, [r4, #0]
   165aa:	6765      	str	r5, [r4, #116]	; 0x74
   165ac:	fb06 1105 	mla	r1, r6, r5, r1
    auto* registration = node_and_registrations_[i].registration;
   165b0:	f8d1 8024 	ldr.w	r8, [r1, #36]	; 0x24
    if (registration->prepare) {
   165b4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   165b8:	b17b      	cbz	r3, 165da <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xbe>
      TfLiteStatus prepare_status = registration->prepare(&context_, node);
   165ba:	4638      	mov	r0, r7
   165bc:	4798      	blx	r3
      if (prepare_status != kTfLiteOk) {
   165be:	4601      	mov	r1, r0
   165c0:	b158      	cbz	r0, 165da <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xbe>
        TF_LITE_REPORT_ERROR(
   165c2:	4640      	mov	r0, r8
   165c4:	f7ff ff20 	bl	16408 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
   165c8:	462b      	mov	r3, r5
   165ca:	4602      	mov	r2, r0
   165cc:	9100      	str	r1, [sp, #0]
   165ce:	68e0      	ldr	r0, [r4, #12]
   165d0:	490f      	ldr	r1, [pc, #60]	; (16610 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf4>)
   165d2:	f019 fc81 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
   165d6:	2001      	movs	r0, #1
   165d8:	e7b4      	b.n	16544 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
   165da:	3501      	adds	r5, #1
   165dc:	e7dd      	b.n	1659a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x7e>
   165de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   165e2:	6763      	str	r3, [r4, #116]	; 0x74
  context_.AllocatePersistentBuffer = nullptr;
   165e4:	2300      	movs	r3, #0
   165e6:	64a3      	str	r3, [r4, #72]	; 0x48
  context_.RequestScratchBufferInArena = nullptr;
   165e8:	6523      	str	r3, [r4, #80]	; 0x50
  context_.GetScratchBuffer = context_helper_.GetScratchBuffer;
   165ea:	4b0a      	ldr	r3, [pc, #40]	; (16614 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf8>)
  TF_LITE_ENSURE_OK(&context_,
   165ec:	463a      	mov	r2, r7
   165ee:	6861      	ldr	r1, [r4, #4]
   165f0:	6e20      	ldr	r0, [r4, #96]	; 0x60
  context_.GetScratchBuffer = context_helper_.GetScratchBuffer;
   165f2:	6563      	str	r3, [r4, #84]	; 0x54
  TF_LITE_ENSURE_OK(&context_,
   165f4:	f00a ffae 	bl	21554 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext>
   165f8:	2800      	cmp	r0, #0
   165fa:	d1a3      	bne.n	16544 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
  tensors_allocated_ = true;
   165fc:	2301      	movs	r3, #1
   165fe:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
  return kTfLiteOk;
   16602:	e79f      	b.n	16544 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
   16604:	00034336 	.word	0x00034336
   16608:	00027435 	.word	0x00027435
   1660c:	0002743d 	.word	0x0002743d
   16610:	00034359 	.word	0x00034359
   16614:	0002744b 	.word	0x0002744b

00016618 <_ZN6tflite16MicroInterpreter6InvokeEv>:
TfLiteStatus MicroInterpreter::Invoke() {
   16618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (initialization_status_ != kTfLiteOk) {
   1661c:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
TfLiteStatus MicroInterpreter::Invoke() {
   16620:	4605      	mov	r5, r0
   16622:	b087      	sub	sp, #28
  if (initialization_status_ != kTfLiteOk) {
   16624:	b143      	cbz	r3, 16638 <_ZN6tflite16MicroInterpreter6InvokeEv+0x20>
    TF_LITE_REPORT_ERROR(error_reporter_,
   16626:	4931      	ldr	r1, [pc, #196]	; (166ec <_ZN6tflite16MicroInterpreter6InvokeEv+0xd4>)
   16628:	68c0      	ldr	r0, [r0, #12]
   1662a:	f019 fc55 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
   1662e:	2401      	movs	r4, #1
}
   16630:	4620      	mov	r0, r4
   16632:	b007      	add	sp, #28
   16634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!tensors_allocated_) {
   16638:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
   1663c:	2b00      	cmp	r3, #0
   1663e:	d044      	beq.n	166ca <_ZN6tflite16MicroInterpreter6InvokeEv+0xb2>
TfLiteStatus MicroInterpreter::Invoke() {
   16640:	f04f 0800 	mov.w	r8, #0
    auto* node = &(node_and_registrations_[i].node);
   16644:	f04f 0a28 	mov.w	sl, #40	; 0x28
                              int64_t event_metadata1,
                              int64_t event_metadata2) = 0;
  // Similar w/ the above, but `event_metadata2` defaults to 0.
  uint32_t BeginEvent(const char* tag, EventType event_type,
                      int64_t event_metadata) {
    return BeginEvent(tag, event_type, event_metadata, /*event_metadata2*/ 0);
   16648:	2600      	movs	r6, #0
   1664a:	2700      	movs	r7, #0
   1664c:	210a      	movs	r1, #10
   1664e:	6ea8      	ldr	r0, [r5, #104]	; 0x68
   16650:	f010 ff4e 	bl	274f0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
   16654:	6803      	ldr	r3, [r0, #0]
   16656:	4598      	cmp	r8, r3
   16658:	d245      	bcs.n	166e6 <_ZN6tflite16MicroInterpreter6InvokeEv+0xce>
    auto* node = &(node_and_registrations_[i].node);
   1665a:	682c      	ldr	r4, [r5, #0]
   1665c:	fb0a 4408 	mla	r4, sl, r8, r4
    auto* registration = node_and_registrations_[i].registration;
   16660:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
    if (registration->invoke) {
   16664:	f8d9 300c 	ldr.w	r3, [r9, #12]
   16668:	2b00      	cmp	r3, #0
   1666a:	d039      	beq.n	166e0 <_ZN6tflite16MicroInterpreter6InvokeEv+0xc8>
          profiler, OpNameFromRegistration(registration), i);
   1666c:	4648      	mov	r0, r9
   1666e:	f7ff fecb 	bl	16408 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
class ScopedProfile {
 public:
  ScopedProfile(Profiler* profiler, const char* tag,
                Profiler::EventType event_type = Profiler::EventType::DEFAULT,
                int64_t event_metadata = 0)
      : profiler_(profiler), event_handle_(0) {
   16672:	2300      	movs	r3, #0
      tflite::Profiler* profiler =
   16674:	f8d5 b044 	ldr.w	fp, [r5, #68]	; 0x44
          profiler, OpNameFromRegistration(registration), i);
   16678:	4601      	mov	r1, r0
   1667a:	f8cd b010 	str.w	fp, [sp, #16]
   1667e:	9305      	str	r3, [sp, #20]
    if (profiler) {
   16680:	f1bb 0f00 	cmp.w	fp, #0
   16684:	d00a      	beq.n	1669c <_ZN6tflite16MicroInterpreter6InvokeEv+0x84>
    return BeginEvent(tag, event_type, event_metadata, /*event_metadata2*/ 0);
   16686:	f8db 2000 	ldr.w	r2, [fp]
   1668a:	e9cd 6702 	strd	r6, r7, [sp, #8]

class ScopedOperatorProfile : public ScopedProfile {
 public:
  ScopedOperatorProfile(Profiler* profiler, const char* tag, int node_index)
      : ScopedProfile(profiler, tag, Profiler::EventType::OPERATOR_INVOKE_EVENT,
                      static_cast<uint32_t>(node_index)) {}
   1668e:	e9cd 8300 	strd	r8, r3, [sp]
    return BeginEvent(tag, event_type, event_metadata, /*event_metadata2*/ 0);
   16692:	4658      	mov	r0, fp
   16694:	6893      	ldr	r3, [r2, #8]
   16696:	2202      	movs	r2, #2
   16698:	4798      	blx	r3
      event_handle_ = profiler_->BeginEvent(tag, event_type, event_metadata);
   1669a:	9005      	str	r0, [sp, #20]
      invoke_status = registration->invoke(&context_, node);
   1669c:	4621      	mov	r1, r4
   1669e:	f8d9 300c 	ldr.w	r3, [r9, #12]
   166a2:	f105 0010 	add.w	r0, r5, #16
   166a6:	4798      	blx	r3
      if (invoke_status == kTfLiteError) {
   166a8:	2801      	cmp	r0, #1
      invoke_status = registration->invoke(&context_, node);
   166aa:	4604      	mov	r4, r0
      if (invoke_status == kTfLiteError) {
   166ac:	d113      	bne.n	166d6 <_ZN6tflite16MicroInterpreter6InvokeEv+0xbe>
        TF_LITE_REPORT_ERROR(
   166ae:	4648      	mov	r0, r9
   166b0:	f7ff feaa 	bl	16408 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
   166b4:	4643      	mov	r3, r8
   166b6:	4602      	mov	r2, r0
   166b8:	490d      	ldr	r1, [pc, #52]	; (166f0 <_ZN6tflite16MicroInterpreter6InvokeEv+0xd8>)
   166ba:	68e8      	ldr	r0, [r5, #12]
   166bc:	9400      	str	r4, [sp, #0]
   166be:	f019 fc0b 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
class ScopedOperatorProfile : public ScopedProfile {
   166c2:	a804      	add	r0, sp, #16
   166c4:	f010 fedd 	bl	27482 <_ZN6tflite13ScopedProfileD1Ev>
   166c8:	e7b2      	b.n	16630 <_ZN6tflite16MicroInterpreter6InvokeEv+0x18>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
   166ca:	f7ff ff27 	bl	1651c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
   166ce:	4604      	mov	r4, r0
   166d0:	2800      	cmp	r0, #0
   166d2:	d0b5      	beq.n	16640 <_ZN6tflite16MicroInterpreter6InvokeEv+0x28>
   166d4:	e7ac      	b.n	16630 <_ZN6tflite16MicroInterpreter6InvokeEv+0x18>
      } else if (invoke_status != kTfLiteOk) {
   166d6:	2800      	cmp	r0, #0
   166d8:	d1f3      	bne.n	166c2 <_ZN6tflite16MicroInterpreter6InvokeEv+0xaa>
   166da:	a804      	add	r0, sp, #16
   166dc:	f010 fed1 	bl	27482 <_ZN6tflite13ScopedProfileD1Ev>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
   166e0:	f108 0801 	add.w	r8, r8, #1
   166e4:	e7b2      	b.n	1664c <_ZN6tflite16MicroInterpreter6InvokeEv+0x34>
  return kTfLiteOk;
   166e6:	2400      	movs	r4, #0
   166e8:	e7a2      	b.n	16630 <_ZN6tflite16MicroInterpreter6InvokeEv+0x18>
   166ea:	bf00      	nop
   166ec:	0003438f 	.word	0x0003438f
   166f0:	000343bc 	.word	0x000343bc

000166f4 <MicroVsnprintf>:
}

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
   166f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166f8:	4690      	mov	r8, r2
   166fa:	461c      	mov	r4, r3
  int output_index = 0;
   166fc:	2500      	movs	r5, #0
                              va_list args) {
   166fe:	b095      	sub	sp, #84	; 0x54
   16700:	9002      	str	r0, [sp, #8]
  const char* current = format;
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
   16702:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
  while (*current != '\0' && output_index < usable_length) {
   16706:	9a02      	ldr	r2, [sp, #8]
   16708:	f898 3000 	ldrb.w	r3, [r8]
   1670c:	4629      	mov	r1, r5
   1670e:	1956      	adds	r6, r2, r5
   16710:	b343      	cbz	r3, 16764 <MicroVsnprintf+0x70>
   16712:	454d      	cmp	r5, r9
   16714:	da26      	bge.n	16764 <MicroVsnprintf+0x70>
    if (*current == '%') {
   16716:	2b25      	cmp	r3, #37	; 0x25
   16718:	f108 0201 	add.w	r2, r8, #1
   1671c:	f040 8109 	bne.w	16932 <MicroVsnprintf+0x23e>
      current++;
      switch (*current) {
   16720:	f898 3001 	ldrb.w	r3, [r8, #1]
   16724:	2b73      	cmp	r3, #115	; 0x73
   16726:	f000 8107 	beq.w	16938 <MicroVsnprintf+0x244>
   1672a:	d808      	bhi.n	1673e <MicroVsnprintf+0x4a>
   1672c:	2b64      	cmp	r3, #100	; 0x64
   1672e:	d015      	beq.n	1675c <MicroVsnprintf+0x68>
   16730:	2b66      	cmp	r3, #102	; 0x66
   16732:	d045      	beq.n	167c0 <MicroVsnprintf+0xcc>
   16734:	2b25      	cmp	r3, #37	; 0x25
   16736:	f000 80fa 	beq.w	1692e <MicroVsnprintf+0x23a>
            return output_index;
          }
          output[output_index++] = '0';
          output[output_index++] = 'x';
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
   1673a:	4690      	mov	r8, r2
   1673c:	e7e3      	b.n	16706 <MicroVsnprintf+0x12>
      switch (*current) {
   1673e:	2b75      	cmp	r3, #117	; 0x75
   16740:	d025      	beq.n	1678e <MicroVsnprintf+0x9a>
   16742:	2b78      	cmp	r3, #120	; 0x78
   16744:	d1f9      	bne.n	1673a <MicroVsnprintf+0x46>
          if (usable_length - output_index < kMaxHexCharsNeeded) {
   16746:	eba9 0205 	sub.w	r2, r9, r5
   1674a:	2a09      	cmp	r2, #9
   1674c:	f105 0001 	add.w	r0, r5, #1
   16750:	dc26      	bgt.n	167a0 <MicroVsnprintf+0xac>
      }
    } else {
      output[output_index++] = *current++;
    }
  }
  output[output_index++] = '\0';
   16752:	2300      	movs	r3, #0
   16754:	7033      	strb	r3, [r6, #0]
  return output_index;
}
   16756:	b015      	add	sp, #84	; 0x54
   16758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (usable_length - output_index < kMaxIntCharsNeeded) {
   1675c:	eba9 0305 	sub.w	r3, r9, r5
   16760:	2b0a      	cmp	r3, #10
   16762:	dc01      	bgt.n	16768 <MicroVsnprintf+0x74>
  output[output_index++] = '\0';
   16764:	1c68      	adds	r0, r5, #1
   16766:	e7f4      	b.n	16752 <MicroVsnprintf+0x5e>
              FormatInt32(&output[output_index], va_arg(args, int32_t));
   16768:	f854 0b04 	ldr.w	r0, [r4], #4
    *buffer++ = '-';
   1676c:	4631      	mov	r1, r6
  if (i < 0) {
   1676e:	2800      	cmp	r0, #0
    *buffer++ = '-';
   16770:	bfb8      	it	lt
   16772:	232d      	movlt	r3, #45	; 0x2d
  return FastUInt32ToBufferLeft(u, buffer, 10);
   16774:	f04f 020a 	mov.w	r2, #10
    *buffer++ = '-';
   16778:	bfbc      	itt	lt
   1677a:	f801 3b01 	strblt.w	r3, [r1], #1
    u = -u;
   1677e:	4240      	neglt	r0, r0
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
   16780:	f010 fef2 	bl	27568 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
   16784:	1b80      	subs	r0, r0, r6
          output_index +=
   16786:	4405      	add	r5, r0
          current++;
   16788:	f108 0202 	add.w	r2, r8, #2
   1678c:	e7d5      	b.n	1673a <MicroVsnprintf+0x46>
          if (usable_length - output_index < kMaxIntCharsNeeded) {
   1678e:	eba9 0305 	sub.w	r3, r9, r5
   16792:	2b0a      	cmp	r3, #10
   16794:	dde6      	ble.n	16764 <MicroVsnprintf+0x70>
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
   16796:	220a      	movs	r2, #10
   16798:	4631      	mov	r1, r6
   1679a:	f854 0b04 	ldr.w	r0, [r4], #4
   1679e:	e7ef      	b.n	16780 <MicroVsnprintf+0x8c>
          output[output_index++] = '0';
   167a0:	f04f 0230 	mov.w	r2, #48	; 0x30
   167a4:	7032      	strb	r2, [r6, #0]
          output[output_index++] = 'x';
   167a6:	9a02      	ldr	r2, [sp, #8]
   167a8:	1cae      	adds	r6, r5, #2
              FormatHex(&output[output_index], va_arg(args, uint32_t));
   167aa:	1995      	adds	r5, r2, r6
          output[output_index++] = 'x';
   167ac:	5413      	strb	r3, [r2, r0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
   167ae:	4629      	mov	r1, r5
   167b0:	2210      	movs	r2, #16
   167b2:	f854 0b04 	ldr.w	r0, [r4], #4
   167b6:	f010 fed7 	bl	27568 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
   167ba:	1b40      	subs	r0, r0, r5
          output_index +=
   167bc:	1985      	adds	r5, r0, r6
          current++;
   167be:	e7e3      	b.n	16788 <MicroVsnprintf+0x94>
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
   167c0:	eba9 0305 	sub.w	r3, r9, r5
   167c4:	ee07 3a90 	vmov	s15, r3
   167c8:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
   167cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   167d0:	eef4 7ac7 	vcmpe.f32	s15, s14
   167d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   167d8:	d4c4      	bmi.n	16764 <MicroVsnprintf+0x70>
              FormatFloat(&output[output_index], va_arg(args, double));
   167da:	3407      	adds	r4, #7
   167dc:	f024 0407 	bic.w	r4, r4, #7
  char* current_end = buffer + (kFastToBufferSize - 1);
   167e0:	f106 032f 	add.w	r3, r6, #47	; 0x2f
              FormatFloat(&output[output_index], va_arg(args, double));
   167e4:	e8f4 0102 	ldrd	r0, r1, [r4], #8
  char* current_end = buffer + (kFastToBufferSize - 1);
   167e8:	9301      	str	r3, [sp, #4]
              FormatFloat(&output[output_index], va_arg(args, double));
   167ea:	f7fa f921 	bl	10a30 <__aeabi_d2f>
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
   167ee:	f3c0 53c7 	ubfx	r3, r0, #23, #8
  if (u & sign_mask) {
   167f2:	2800      	cmp	r0, #0
    *current = '-';
   167f4:	bfb8      	it	lt
   167f6:	222d      	movlt	r2, #45	; 0x2d
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
   167f8:	f1a3 0a7f 	sub.w	sl, r3, #127	; 0x7f
   167fc:	9303      	str	r3, [sp, #12]
    *current = '-';
   167fe:	4633      	mov	r3, r6
   16800:	bfb8      	it	lt
   16802:	f803 2b01 	strblt.w	r2, [r3], #1
  *current = 0;
   16806:	2200      	movs	r2, #0
  if (exponent == 128) {
   16808:	f1ba 0f80 	cmp.w	sl, #128	; 0x80
  const uint32_t fraction = (u & fraction_mask);
   1680c:	f3c0 0e16 	ubfx	lr, r0, #0, #23
  *current = 0;
   16810:	701a      	strb	r2, [r3, #0]
  if (exponent == 128) {
   16812:	d10e      	bne.n	16832 <MicroVsnprintf+0x13e>
    if (fraction == 0) {
   16814:	9a01      	ldr	r2, [sp, #4]
   16816:	1ad1      	subs	r1, r2, r3
   16818:	f1be 0f00 	cmp.w	lr, #0
   1681c:	d107      	bne.n	1682e <MicroVsnprintf+0x13a>
      current = StrCatStr(current, (current_end - current), "Inf");
   1681e:	4a4e      	ldr	r2, [pc, #312]	; (16958 <MicroVsnprintf+0x264>)
      current = StrCatStr(current, (current_end - current), "NaN");
   16820:	4618      	mov	r0, r3
  return StrCatStr(main, main_max_length, number_string);
   16822:	f010 fe8b 	bl	2753c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
   16826:	4607      	mov	r7, r0
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
   16828:	1bbe      	subs	r6, r7, r6
          output_index +=
   1682a:	4435      	add	r5, r6
          current++;
   1682c:	e7ac      	b.n	16788 <MicroVsnprintf+0x94>
      current = StrCatStr(current, (current_end - current), "NaN");
   1682e:	4a4b      	ldr	r2, [pc, #300]	; (1695c <MicroVsnprintf+0x268>)
   16830:	e7f6      	b.n	16820 <MicroVsnprintf+0x12c>
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
   16832:	4a4b      	ldr	r2, [pc, #300]	; (16960 <MicroVsnprintf+0x26c>)
   16834:	af04      	add	r7, sp, #16
   16836:	f102 0b08 	add.w	fp, r2, #8
   1683a:	46bc      	mov	ip, r7
   1683c:	6810      	ldr	r0, [r2, #0]
   1683e:	6851      	ldr	r1, [r2, #4]
   16840:	3208      	adds	r2, #8
   16842:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   16846:	455a      	cmp	r2, fp
   16848:	4667      	mov	r7, ip
   1684a:	d1f6      	bne.n	1683a <MicroVsnprintf+0x146>
   1684c:	6810      	ldr	r0, [r2, #0]
   1684e:	7912      	ldrb	r2, [r2, #4]
   16850:	f8cc 0000 	str.w	r0, [ip]
   16854:	f88c 2004 	strb.w	r2, [ip, #4]
  uint32_t scaled_fraction = fraction;
   16858:	4670      	mov	r0, lr
  for (int i = 0; i < scale_shifts_size; ++i) {
   1685a:	2200      	movs	r2, #0
   1685c:	af04      	add	r7, sp, #16
    scaled_fraction += (fraction >> scale_shifts[i]);
   1685e:	f917 1b01 	ldrsb.w	r1, [r7], #1
  for (int i = 0; i < scale_shifts_size; ++i) {
   16862:	3201      	adds	r2, #1
    scaled_fraction += (fraction >> scale_shifts[i]);
   16864:	fa2e f101 	lsr.w	r1, lr, r1
  for (int i = 0; i < scale_shifts_size; ++i) {
   16868:	2a0d      	cmp	r2, #13
    scaled_fraction += (fraction >> scale_shifts[i]);
   1686a:	4408      	add	r0, r1
  for (int i = 0; i < scale_shifts_size; ++i) {
   1686c:	d1f7      	bne.n	1685e <MicroVsnprintf+0x16a>
  *current = '1';
   1686e:	2231      	movs	r2, #49	; 0x31
   16870:	701a      	strb	r2, [r3, #0]
  *current = '.';
   16872:	222e      	movs	r2, #46	; 0x2e
   16874:	705a      	strb	r2, [r3, #1]
  *current = 0;
   16876:	2200      	movs	r2, #0
   16878:	709a      	strb	r2, [r3, #2]
  if (current_end - current <= kMaxFractionalDigits) {
   1687a:	9a01      	ldr	r2, [sp, #4]
  current += 1;
   1687c:	1c9f      	adds	r7, r3, #2
  if (current_end - current <= kMaxFractionalDigits) {
   1687e:	eba2 0b07 	sub.w	fp, r2, r7
   16882:	f1bb 0f07 	cmp.w	fp, #7
   16886:	ddcf      	ble.n	16828 <MicroVsnprintf+0x134>
   16888:	463a      	mov	r2, r7
   1688a:	3308      	adds	r3, #8
    *(current + i) = '0';
   1688c:	f04f 0130 	mov.w	r1, #48	; 0x30
   16890:	f802 1f01 	strb.w	r1, [r2, #1]!
  for (int i = 1; i < kMaxFractionalDigits; i++) {
   16894:	4293      	cmp	r3, r2
   16896:	d1f9      	bne.n	1688c <MicroVsnprintf+0x198>
  FastUInt32ToBufferLeft(number, number_string, base);
   16898:	220a      	movs	r2, #10
   1689a:	a908      	add	r1, sp, #32
   1689c:	f010 fe64 	bl	27568 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
  return StrCatStr(main, main_max_length, number_string);
   168a0:	4659      	mov	r1, fp
   168a2:	aa08      	add	r2, sp, #32
   168a4:	4638      	mov	r0, r7
   168a6:	f010 fe49 	bl	2753c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
  *current = '0';
   168aa:	f04f 0230 	mov.w	r2, #48	; 0x30
   168ae:	7002      	strb	r2, [r0, #0]
   168b0:	4602      	mov	r2, r0
  int fraction_digits = current - previous;
   168b2:	1bc3      	subs	r3, r0, r7
  int leading_zeros = kMaxFractionalDigits - fraction_digits;
   168b4:	f1c3 0107 	rsb	r1, r3, #7
  for (int i = 0; i < fraction_digits; i++) {
   168b8:	eba0 0c02 	sub.w	ip, r0, r2
   168bc:	4563      	cmp	r3, ip
   168be:	dd08      	ble.n	168d2 <MicroVsnprintf+0x1de>
    *(current + leading_zeros) = *current;
   168c0:	f812 cd01 	ldrb.w	ip, [r2, #-1]!
   168c4:	f802 c001 	strb.w	ip, [r2, r1]
    *current = '0';
   168c8:	f04f 0c30 	mov.w	ip, #48	; 0x30
   168cc:	f882 c000 	strb.w	ip, [r2]
  for (int i = 0; i < fraction_digits; i++) {
   168d0:	e7f2      	b.n	168b8 <MicroVsnprintf+0x1c4>
  current += kMaxFractionalDigits;
   168d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   168d6:	f1c3 0307 	rsb	r3, r3, #7
   168da:	4403      	add	r3, r0
   168dc:	4618      	mov	r0, r3
  while (*(current - 1) == '0' && (current - 1) > previous) {
   168de:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   168e2:	2a30      	cmp	r2, #48	; 0x30
   168e4:	d101      	bne.n	168ea <MicroVsnprintf+0x1f6>
   168e6:	42bb      	cmp	r3, r7
   168e8:	d8f8      	bhi.n	168dc <MicroVsnprintf+0x1e8>
  *current = 0;
   168ea:	2300      	movs	r3, #0
   168ec:	7003      	strb	r3, [r0, #0]
  current = StrCatStr(current, (current_end - current), "*2^");
   168ee:	9b01      	ldr	r3, [sp, #4]
   168f0:	4a1c      	ldr	r2, [pc, #112]	; (16964 <MicroVsnprintf+0x270>)
   168f2:	1a19      	subs	r1, r3, r0
   168f4:	f010 fe22 	bl	2753c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
  current = StrCatInt32(current, (current_end - current), exponent);
   168f8:	9b01      	ldr	r3, [sp, #4]
  if (i < 0) {
   168fa:	f1ba 0f00 	cmp.w	sl, #0
  current = StrCatInt32(current, (current_end - current), exponent);
   168fe:	eba3 0b00 	sub.w	fp, r3, r0
    *buffer++ = '-';
   16902:	bfb8      	it	lt
   16904:	232d      	movlt	r3, #45	; 0x2d
  current = StrCatStr(current, (current_end - current), "*2^");
   16906:	4607      	mov	r7, r0
    *buffer++ = '-';
   16908:	bfbc      	itt	lt
   1690a:	f88d 3020 	strblt.w	r3, [sp, #32]
    u = -u;
   1690e:	9b03      	ldrlt	r3, [sp, #12]
  return FastUInt32ToBufferLeft(u, buffer, 10);
   16910:	f04f 020a 	mov.w	r2, #10
    u = -u;
   16914:	bfba      	itte	lt
   16916:	f1c3 0a7f 	rsblt	sl, r3, #127	; 0x7f
    *buffer++ = '-';
   1691a:	f10d 0121 	addlt.w	r1, sp, #33	; 0x21
   1691e:	a908      	addge	r1, sp, #32
  return FastUInt32ToBufferLeft(u, buffer, 10);
   16920:	4650      	mov	r0, sl
   16922:	f010 fe21 	bl	27568 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
  return StrCatStr(main, main_max_length, number_string);
   16926:	4659      	mov	r1, fp
   16928:	4638      	mov	r0, r7
   1692a:	aa08      	add	r2, sp, #32
   1692c:	e779      	b.n	16822 <MicroVsnprintf+0x12e>
          output[output_index++] = *current++;
   1692e:	f108 0202 	add.w	r2, r8, #2
      output[output_index++] = *current++;
   16932:	3501      	adds	r5, #1
   16934:	7033      	strb	r3, [r6, #0]
   16936:	e700      	b.n	1673a <MicroVsnprintf+0x46>
          while (string_idx + output_index < usable_length &&
   16938:	f854 2b04 	ldr.w	r2, [r4], #4
   1693c:	3a01      	subs	r2, #1
                 string[string_idx] != '\0') {
   1693e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
          while (string_idx + output_index < usable_length &&
   16942:	2b00      	cmp	r3, #0
   16944:	f43f af20 	beq.w	16788 <MicroVsnprintf+0x94>
            output[output_index++] = string[string_idx++];
   16948:	3102      	adds	r1, #2
          while (string_idx + output_index < usable_length &&
   1694a:	4549      	cmp	r1, r9
            output[output_index++] = string[string_idx++];
   1694c:	f105 0501 	add.w	r5, r5, #1
   16950:	f806 3b01 	strb.w	r3, [r6], #1
          while (string_idx + output_index < usable_length &&
   16954:	dbf3      	blt.n	1693e <MicroVsnprintf+0x24a>
   16956:	e717      	b.n	16788 <MicroVsnprintf+0x94>
   16958:	000348cc 	.word	0x000348cc
   1695c:	000348d0 	.word	0x000348d0
   16960:	000348d8 	.word	0x000348d8
   16964:	000348d4 	.word	0x000348d4

00016968 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode>:
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
  return t->dims->data[dim];
}
inline const TfLiteTensor* GetInput(const TfLiteContext* context,
                                    const TfLiteNode* node, int index) {
  return &context->tensors[node->inputs->data[index]];
   16968:	680a      	ldr	r2, [r1, #0]

TfLiteStatus ReluPrepare(TfLiteContext* context, TfLiteNode* node) {
  return kTfLiteOk;
}

TfLiteStatus ReluEval(TfLiteContext* context, TfLiteNode* node) {
   1696a:	b570      	push	{r4, r5, r6, lr}
   1696c:	6855      	ldr	r5, [r2, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1696e:	6883      	ldr	r3, [r0, #8]
   16970:	01aa      	lsls	r2, r5, #6
  TfLiteTensor* tensor = &context->tensors[node->inputs->data[index]];
  return (tensor->is_variable) ? tensor : nullptr;
}
inline TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                               int index) {
  return &context->tensors[node->outputs->data[index]];
   16972:	6849      	ldr	r1, [r1, #4]
TfLiteStatus ReluEval(TfLiteContext* context, TfLiteNode* node) {
   16974:	4606      	mov	r6, r0
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  switch (input->type) {
   16976:	5c98      	ldrb	r0, [r3, r2]
   16978:	684c      	ldr	r4, [r1, #4]
   1697a:	2803      	cmp	r0, #3
TfLiteStatus ReluEval(TfLiteContext* context, TfLiteNode* node) {
   1697c:	b08c      	sub	sp, #48	; 0x30
  return &context->tensors[node->inputs->data[index]];
   1697e:	eb03 1585 	add.w	r5, r3, r5, lsl #6
  return &context->tensors[node->outputs->data[index]];
   16982:	eb03 1484 	add.w	r4, r3, r4, lsl #6
  switch (input->type) {
   16986:	d03f      	beq.n	16a08 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xa0>
   16988:	2809      	cmp	r0, #9
   1698a:	d023      	beq.n	169d4 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x6c>
   1698c:	2801      	cmp	r0, #1
   1698e:	d15e      	bne.n	16a4e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xe6>
    case kTfLiteFloat32: {
      ReluFloat(GetTensorShape(input), GetTensorData<float>(input),
   16990:	4629      	mov	r1, r5
   16992:	4668      	mov	r0, sp
   16994:	f010 fe52 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                GetTensorShape(output), GetTensorData<float>(output));
   16998:	4621      	mov	r1, r4
   1699a:	a806      	add	r0, sp, #24
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

template <typename T>
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1699c:	686d      	ldr	r5, [r5, #4]
   1699e:	f010 fe4d 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   169a2:	b104      	cbz	r4, 169a6 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x3e>
   169a4:	6864      	ldr	r4, [r4, #4]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   169a6:	4668      	mov	r0, sp
   169a8:	a906      	add	r1, sp, #24
   169aa:	f010 fe1e 	bl	275ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
  for (int i = 0; i < flat_size; ++i) {
   169ae:	462b      	mov	r3, r5
   169b0:	2200      	movs	r2, #0
    const float clamped = val < lower ? lower : val;
   169b2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 16a60 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xf8>
  for (int i = 0; i < flat_size; ++i) {
   169b6:	4290      	cmp	r0, r2
   169b8:	dd40      	ble.n	16a3c <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xd4>
    const float val = input_data[i];
   169ba:	ecf3 7a01 	vldmia	r3!, {s15}
    const float clamped = val < lower ? lower : val;
   169be:	eef5 7a40 	vcmp.f32	s15, #0.0
   169c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   169c6:	bf48      	it	mi
   169c8:	eef0 7a47 	vmovmi.f32	s15, s14
  for (int i = 0; i < flat_size; ++i) {
   169cc:	3201      	adds	r2, #1
    output_data[i] = clamped;
   169ce:	ece4 7a01 	vstmia	r4!, {s15}
  for (int i = 0; i < flat_size; ++i) {
   169d2:	e7f0      	b.n	169b6 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x4e>

      return kTfLiteOk;
    }
    case kTfLiteInt8: {
      ReluQuantized<int8_t>(input->params.zero_point, GetTensorShape(input),
   169d4:	4629      	mov	r1, r5
   169d6:	4668      	mov	r0, sp
   169d8:	692e      	ldr	r6, [r5, #16]
   169da:	f010 fe2f 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                            GetTensorData<int8_t>(input),
                            GetTensorShape(output),
   169de:	4621      	mov	r1, r4
   169e0:	a806      	add	r0, sp, #24
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   169e2:	686d      	ldr	r5, [r5, #4]
   169e4:	f010 fe2a 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   169e8:	b104      	cbz	r4, 169ec <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x84>
   169ea:	6864      	ldr	r4, [r4, #4]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   169ec:	4668      	mov	r0, sp
   169ee:	a906      	add	r1, sp, #24
   169f0:	f010 fdfb 	bl	275ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
  for (int i = 0; i < flat_size; ++i) {
   169f4:	2300      	movs	r3, #0
   169f6:	4298      	cmp	r0, r3
   169f8:	dd20      	ble.n	16a3c <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xd4>
    const Q clamped = val < lower ? lower : val;
   169fa:	56ea      	ldrsb	r2, [r5, r3]
   169fc:	42b2      	cmp	r2, r6
   169fe:	bfb8      	it	lt
   16a00:	4632      	movlt	r2, r6
   16a02:	54e2      	strb	r2, [r4, r3]
  for (int i = 0; i < flat_size; ++i) {
   16a04:	3301      	adds	r3, #1
   16a06:	e7f6      	b.n	169f6 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x8e>
                            GetTensorData<int8_t>(output));
      return kTfLiteOk;
    }
    case kTfLiteUInt8: {
      ReluQuantized<uint8_t>(input->params.zero_point, GetTensorShape(input),
   16a08:	4629      	mov	r1, r5
   16a0a:	4668      	mov	r0, sp
   16a0c:	692e      	ldr	r6, [r5, #16]
   16a0e:	f010 fe15 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                             GetTensorData<uint8_t>(input),
                             GetTensorShape(output),
   16a12:	4621      	mov	r1, r4
   16a14:	a806      	add	r0, sp, #24
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   16a16:	686d      	ldr	r5, [r5, #4]
   16a18:	f010 fe10 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   16a1c:	b104      	cbz	r4, 16a20 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xb8>
   16a1e:	6864      	ldr	r4, [r4, #4]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   16a20:	4668      	mov	r0, sp
   16a22:	a906      	add	r1, sp, #24
   16a24:	f010 fde1 	bl	275ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
  for (int i = 0; i < flat_size; ++i) {
   16a28:	2300      	movs	r3, #0
   16a2a:	4298      	cmp	r0, r3
   16a2c:	dd06      	ble.n	16a3c <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xd4>
    const Q clamped = val < lower ? lower : val;
   16a2e:	5cea      	ldrb	r2, [r5, r3]
   16a30:	42b2      	cmp	r2, r6
   16a32:	bfb8      	it	lt
   16a34:	4632      	movlt	r2, r6
   16a36:	54e2      	strb	r2, [r4, r3]
  for (int i = 0; i < flat_size; ++i) {
   16a38:	3301      	adds	r3, #1
   16a3a:	e7f6      	b.n	16a2a <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xc2>
                             GetTensorShape(output),
   16a3c:	a806      	add	r0, sp, #24
   16a3e:	f010 fdb8 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<uint8_t>(input->params.zero_point, GetTensorShape(input),
   16a42:	4668      	mov	r0, sp
   16a44:	f010 fdb5 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
                             GetTensorData<uint8_t>(output));
      return kTfLiteOk;
   16a48:	2000      	movs	r0, #0
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
    }
  }
}
   16a4a:	b00c      	add	sp, #48	; 0x30
   16a4c:	bd70      	pop	{r4, r5, r6, pc}
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
   16a4e:	6974      	ldr	r4, [r6, #20]
   16a50:	f7f6 f938 	bl	ccc4 <TfLiteTypeGetName>
   16a54:	4903      	ldr	r1, [pc, #12]	; (16a64 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xfc>)
   16a56:	4602      	mov	r2, r0
   16a58:	4630      	mov	r0, r6
   16a5a:	47a0      	blx	r4
      return kTfLiteError;
   16a5c:	2001      	movs	r0, #1
   16a5e:	e7f4      	b.n	16a4a <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xe2>
   16a60:	00000000 	.word	0x00000000
   16a64:	000348e6 	.word	0x000348e6

00016a68 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->inputs->data[index]];
   16a68:	680a      	ldr	r2, [r1, #0]

TfLiteStatus Relu6Prepare(TfLiteContext* context, TfLiteNode* node) {
  return kTfLiteOk;
}

TfLiteStatus Relu6Eval(TfLiteContext* context, TfLiteNode* node) {
   16a6a:	b5f0      	push	{r4, r5, r6, r7, lr}
   16a6c:	6855      	ldr	r5, [r2, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   16a6e:	6883      	ldr	r3, [r0, #8]
   16a70:	01aa      	lsls	r2, r5, #6
  return &context->tensors[node->outputs->data[index]];
   16a72:	6849      	ldr	r1, [r1, #4]
TfLiteStatus Relu6Eval(TfLiteContext* context, TfLiteNode* node) {
   16a74:	4606      	mov	r6, r0
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  switch (input->type) {
   16a76:	5c98      	ldrb	r0, [r3, r2]
   16a78:	684c      	ldr	r4, [r1, #4]
   16a7a:	2803      	cmp	r0, #3
TfLiteStatus Relu6Eval(TfLiteContext* context, TfLiteNode* node) {
   16a7c:	b08d      	sub	sp, #52	; 0x34
  return &context->tensors[node->inputs->data[index]];
   16a7e:	eb03 1585 	add.w	r5, r3, r5, lsl #6
  return &context->tensors[node->outputs->data[index]];
   16a82:	eb03 1484 	add.w	r4, r3, r4, lsl #6
  switch (input->type) {
   16a86:	d054      	beq.n	16b32 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xca>
   16a88:	2809      	cmp	r0, #9
   16a8a:	d02d      	beq.n	16ae8 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x80>
   16a8c:	2801      	cmp	r0, #1
   16a8e:	d17d      	bne.n	16b8c <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x124>
    case kTfLiteFloat32: {
      Relu6Float(GetTensorShape(input), GetTensorData<float>(input),
   16a90:	4629      	mov	r1, r5
   16a92:	4668      	mov	r0, sp
   16a94:	f010 fdd2 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                 GetTensorShape(output), GetTensorData<float>(output));
   16a98:	4621      	mov	r1, r4
   16a9a:	a806      	add	r0, sp, #24
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   16a9c:	686d      	ldr	r5, [r5, #4]
   16a9e:	f010 fdcd 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   16aa2:	b104      	cbz	r4, 16aa6 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x3e>
   16aa4:	6864      	ldr	r4, [r4, #4]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   16aa6:	4668      	mov	r0, sp
   16aa8:	a906      	add	r1, sp, #24
   16aaa:	f010 fd9e 	bl	275ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
  for (int i = 0; i < flat_size; ++i) {
   16aae:	462b      	mov	r3, r5
   16ab0:	2200      	movs	r2, #0
    const float clamped = val > upper ? upper : val < lower ? lower : val;
   16ab2:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
   16ab6:	eddf 6a3a 	vldr	s13, [pc, #232]	; 16ba0 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x138>
  for (int i = 0; i < flat_size; ++i) {
   16aba:	4290      	cmp	r0, r2
   16abc:	dd5d      	ble.n	16b7a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x112>
    const float val = input_data[i];
   16abe:	ecf3 7a01 	vldmia	r3!, {s15}
    const float clamped = val > upper ? upper : val < lower ? lower : val;
   16ac2:	eef4 7ac7 	vcmpe.f32	s15, s14
   16ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16aca:	dc0a      	bgt.n	16ae2 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x7a>
   16acc:	eef5 7a40 	vcmp.f32	s15, #0.0
   16ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16ad4:	bf48      	it	mi
   16ad6:	eef0 7a66 	vmovmi.f32	s15, s13
    output_data[i] = clamped;
   16ada:	ece4 7a01 	vstmia	r4!, {s15}
  for (int i = 0; i < flat_size; ++i) {
   16ade:	3201      	adds	r2, #1
   16ae0:	e7eb      	b.n	16aba <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x52>
    const float clamped = val > upper ? upper : val < lower ? lower : val;
   16ae2:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
   16ae6:	e7f8      	b.n	16ada <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x72>

      return kTfLiteOk;
    }
    case kTfLiteInt8: {
      const int8_t six = FloatToAsymmetricQuantizedInt8(
   16ae8:	692a      	ldr	r2, [r5, #16]
   16aea:	68e9      	ldr	r1, [r5, #12]
   16aec:	482d      	ldr	r0, [pc, #180]	; (16ba4 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x13c>)
   16aee:	f019 fbdb 	bl	302a8 <_ZN6tflite30FloatToAsymmetricQuantizedInt8Effi>
          6.0f, input->params.scale, input->params.zero_point);
      const int8_t zero = input->params.zero_point;
      Relu6Quantized<int8_t>(
          zero, six, GetTensorShape(input), GetTensorData<int8_t>(input),
   16af2:	4629      	mov	r1, r5
      const int8_t six = FloatToAsymmetricQuantizedInt8(
   16af4:	4606      	mov	r6, r0
          zero, six, GetTensorShape(input), GetTensorData<int8_t>(input),
   16af6:	4668      	mov	r0, sp
      const int8_t zero = input->params.zero_point;
   16af8:	f995 7010 	ldrsb.w	r7, [r5, #16]
          zero, six, GetTensorShape(input), GetTensorData<int8_t>(input),
   16afc:	f010 fd9e 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
          GetTensorShape(output), GetTensorData<int8_t>(output));
   16b00:	4621      	mov	r1, r4
   16b02:	a806      	add	r0, sp, #24
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   16b04:	686d      	ldr	r5, [r5, #4]
   16b06:	f010 fd99 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   16b0a:	b104      	cbz	r4, 16b0e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xa6>
   16b0c:	6864      	ldr	r4, [r4, #4]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   16b0e:	4668      	mov	r0, sp
   16b10:	a906      	add	r1, sp, #24
   16b12:	f010 fd6a 	bl	275ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
  for (int i = 0; i < flat_size; ++i) {
   16b16:	2300      	movs	r3, #0
   16b18:	4298      	cmp	r0, r3
   16b1a:	dd2e      	ble.n	16b7a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x112>
    const Q val = input_data[i];
   16b1c:	56ea      	ldrsb	r2, [r5, r3]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
   16b1e:	4296      	cmp	r6, r2
   16b20:	db05      	blt.n	16b2e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xc6>
   16b22:	42ba      	cmp	r2, r7
   16b24:	bfb8      	it	lt
   16b26:	463a      	movlt	r2, r7
    output_data[i] = clamped;
   16b28:	54e2      	strb	r2, [r4, r3]
  for (int i = 0; i < flat_size; ++i) {
   16b2a:	3301      	adds	r3, #1
   16b2c:	e7f4      	b.n	16b18 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xb0>
   16b2e:	4632      	mov	r2, r6
   16b30:	e7fa      	b.n	16b28 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xc0>
      return kTfLiteOk;
    }
    case kTfLiteUInt8: {
      const uint8_t six = FloatToAsymmetricQuantizedUInt8(
   16b32:	692a      	ldr	r2, [r5, #16]
   16b34:	68e9      	ldr	r1, [r5, #12]
   16b36:	481b      	ldr	r0, [pc, #108]	; (16ba4 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x13c>)
   16b38:	f019 fba0 	bl	3027c <_ZN6tflite31FloatToAsymmetricQuantizedUInt8Effi>
          6.0f, input->params.scale, input->params.zero_point);
      const uint8_t zero = input->params.zero_point;
      Relu6Quantized<uint8_t>(
          zero, six, GetTensorShape(input), GetTensorData<uint8_t>(input),
   16b3c:	4629      	mov	r1, r5
      const uint8_t six = FloatToAsymmetricQuantizedUInt8(
   16b3e:	4606      	mov	r6, r0
          zero, six, GetTensorShape(input), GetTensorData<uint8_t>(input),
   16b40:	4668      	mov	r0, sp
      const uint8_t zero = input->params.zero_point;
   16b42:	7c2f      	ldrb	r7, [r5, #16]
          zero, six, GetTensorShape(input), GetTensorData<uint8_t>(input),
   16b44:	f010 fd7a 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
          GetTensorShape(output), GetTensorData<uint8_t>(output));
   16b48:	4621      	mov	r1, r4
   16b4a:	a806      	add	r0, sp, #24
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   16b4c:	686d      	ldr	r5, [r5, #4]
   16b4e:	f010 fd75 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   16b52:	b104      	cbz	r4, 16b56 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xee>
   16b54:	6864      	ldr	r4, [r4, #4]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   16b56:	4668      	mov	r0, sp
   16b58:	a906      	add	r1, sp, #24
   16b5a:	f010 fd46 	bl	275ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
  for (int i = 0; i < flat_size; ++i) {
   16b5e:	2300      	movs	r3, #0
   16b60:	4298      	cmp	r0, r3
   16b62:	dd0a      	ble.n	16b7a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x112>
    const Q val = input_data[i];
   16b64:	5cea      	ldrb	r2, [r5, r3]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
   16b66:	4296      	cmp	r6, r2
   16b68:	d305      	bcc.n	16b76 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x10e>
   16b6a:	42ba      	cmp	r2, r7
   16b6c:	bf38      	it	cc
   16b6e:	463a      	movcc	r2, r7
    output_data[i] = clamped;
   16b70:	54e2      	strb	r2, [r4, r3]
  for (int i = 0; i < flat_size; ++i) {
   16b72:	3301      	adds	r3, #1
   16b74:	e7f4      	b.n	16b60 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xf8>
   16b76:	4632      	mov	r2, r6
   16b78:	e7fa      	b.n	16b70 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x108>
          GetTensorShape(output), GetTensorData<uint8_t>(output));
   16b7a:	a806      	add	r0, sp, #24
   16b7c:	f010 fd19 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
          zero, six, GetTensorShape(input), GetTensorData<uint8_t>(input),
   16b80:	4668      	mov	r0, sp
   16b82:	f010 fd16 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
      return kTfLiteOk;
   16b86:	2000      	movs	r0, #0
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
    }
  }
}
   16b88:	b00d      	add	sp, #52	; 0x34
   16b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
   16b8c:	6974      	ldr	r4, [r6, #20]
   16b8e:	f7f6 f899 	bl	ccc4 <TfLiteTypeGetName>
   16b92:	4905      	ldr	r1, [pc, #20]	; (16ba8 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x140>)
   16b94:	4602      	mov	r2, r0
   16b96:	4630      	mov	r0, r6
   16b98:	47a0      	blx	r4
      return kTfLiteError;
   16b9a:	2001      	movs	r0, #1
   16b9c:	e7f4      	b.n	16b88 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x120>
   16b9e:	bf00      	nop
   16ba0:	00000000 	.word	0x00000000
   16ba4:	40c00000 	.word	0x40c00000
   16ba8:	000348e6 	.word	0x000348e6

00016bac <_ZN6tflite3ops5micro13Register_RELUEv>:

}  // namespace activations

TfLiteRegistration Register_RELU() {
   16bac:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/activations::ReluPrepare,
          /*invoke=*/activations::ReluEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   16bae:	4604      	mov	r4, r0
TfLiteRegistration Register_RELU() {
   16bb0:	4606      	mov	r6, r0
          /*version=*/0};
   16bb2:	4d04      	ldr	r5, [pc, #16]	; (16bc4 <_ZN6tflite3ops5micro13Register_RELUEv+0x18>)
   16bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   16bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   16bb8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   16bbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   16bc0:	4630      	mov	r0, r6
   16bc2:	bd70      	pop	{r4, r5, r6, pc}
   16bc4:	00031858 	.word	0x00031858

00016bc8 <_ZN6tflite3ops5micro14Register_RELU6Ev>:

TfLiteRegistration Register_RELU6() {
   16bc8:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/activations::Relu6Prepare,
          /*invoke=*/activations::Relu6Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   16bca:	4604      	mov	r4, r0
TfLiteRegistration Register_RELU6() {
   16bcc:	4606      	mov	r6, r0
          /*version=*/0};
   16bce:	4d04      	ldr	r5, [pc, #16]	; (16be0 <_ZN6tflite3ops5micro14Register_RELU6Ev+0x18>)
   16bd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   16bd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   16bd4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   16bd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   16bdc:	4630      	mov	r0, r6
   16bde:	bd70      	pop	{r4, r5, r6, pc}
   16be0:	00031878 	.word	0x00031878

00016be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>:
// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   16be4:	4288      	cmp	r0, r1
  }
#endif
}

inline int32 MultiplyByQuantizedMultiplierSmallerThanOneExp(
    int32 x, int32 quantized_multiplier, int left_shift) {
   16be6:	b570      	push	{r4, r5, r6, lr}
   16be8:	d128      	bne.n	16c3c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x58>
   16bea:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   16bee:	425e      	negs	r6, r3
   16bf0:	415e      	adcs	r6, r3
  std::int64_t a_64(a);
  std::int64_t b_64(b);
  std::int64_t ab_64 = a_64 * b_64;
   16bf2:	fb80 4501 	smull	r4, r5, r0, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   16bf6:	2c00      	cmp	r4, #0
   16bf8:	f175 0300 	sbcs.w	r3, r5, #0
   16bfc:	4b1c      	ldr	r3, [pc, #112]	; (16c70 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x8c>)
   16bfe:	bfa8      	it	ge
   16c00:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   16c04:	b9e6      	cbnz	r6, 16c40 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x5c>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   16c06:	18e4      	adds	r4, r4, r3
   16c08:	eb45 75e3 	adc.w	r5, r5, r3, asr #31
   16c0c:	2c00      	cmp	r4, #0
   16c0e:	f175 0300 	sbcs.w	r3, r5, #0
   16c12:	da06      	bge.n	16c22 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x3e>
   16c14:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   16c18:	18e4      	adds	r4, r4, r3
   16c1a:	f04f 0300 	mov.w	r3, #0
   16c1e:	eb43 0505 	adc.w	r5, r3, r5
   16c22:	0fe0      	lsrs	r0, r4, #31
   16c24:	ea40 0145 	orr.w	r1, r0, r5, lsl #1
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  return RoundingDivideByPOT(
   16c28:	4252      	negs	r2, r2

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
  assert(exponent >= 0);
   16c2a:	2a00      	cmp	r2, #0
   16c2c:	da0b      	bge.n	16c46 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x62>
   16c2e:	f44f 71b3 	mov.w	r1, #358	; 0x166
   16c32:	4b10      	ldr	r3, [pc, #64]	; (16c74 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x90>)
   16c34:	4a10      	ldr	r2, [pc, #64]	; (16c78 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x94>)
  assert(exponent <= 31);
   16c36:	4811      	ldr	r0, [pc, #68]	; (16c7c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x98>)
   16c38:	f00f fbe6 	bl	26408 <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   16c3c:	2600      	movs	r6, #0
   16c3e:	e7d8      	b.n	16bf2 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0xe>
   16c40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   16c44:	e7f0      	b.n	16c28 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x44>
  assert(exponent <= 31);
   16c46:	2a1f      	cmp	r2, #31
   16c48:	dd04      	ble.n	16c54 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x70>
   16c4a:	f240 1167 	movw	r1, #359	; 0x167
   16c4e:	4b0c      	ldr	r3, [pc, #48]	; (16c80 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x9c>)
   16c50:	4a09      	ldr	r2, [pc, #36]	; (16c78 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x94>)
   16c52:	e7f0      	b.n	16c36 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x52>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   16c54:	2301      	movs	r3, #1
   16c56:	4093      	lsls	r3, r2
   16c58:	3b01      	subs	r3, #1
  return a & b;
   16c5a:	ea03 0001 	and.w	r0, r3, r1
  return a >> offset;
   16c5e:	105b      	asrs	r3, r3, #1
  return a + b;
   16c60:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
  return a >> offset;
   16c64:	4111      	asrs	r1, r2
      SaturatingRoundingDoublingHighMul(x, quantized_multiplier), -left_shift);
}
   16c66:	4298      	cmp	r0, r3
   16c68:	bfd4      	ite	le
   16c6a:	4608      	movle	r0, r1
   16c6c:	1c48      	addgt	r0, r1, #1
   16c6e:	bd70      	pop	{r4, r5, r6, pc}
   16c70:	c0000001 	.word	0xc0000001
   16c74:	00034912 	.word	0x00034912
   16c78:	00034920 	.word	0x00034920
   16c7c:	00034975 	.word	0x00034975
   16c80:	000349c1 	.word	0x000349c1

00016c84 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE>:
};

TfLiteStatus CalculateOpData(TfLiteContext* context, TfLiteAddParams* params,
                             const TfLiteTensor* input1,
                             const TfLiteTensor* input2, TfLiteTensor* output,
                             OpData* data) {
   16c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c88:	ed2d 8b06 	vpush	{d8-d10}
   16c8c:	4680      	mov	r8, r0
   16c8e:	b081      	sub	sp, #4
   16c90:	4689      	mov	r9, r1
   16c92:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
  data->requires_broadcast = !HaveSameShapes(input1, input2);
   16c96:	4619      	mov	r1, r3
   16c98:	4610      	mov	r0, r2
                             OpData* data) {
   16c9a:	461e      	mov	r6, r3
   16c9c:	4617      	mov	r7, r2
  data->requires_broadcast = !HaveSameShapes(input1, input2);
   16c9e:	f019 fa30 	bl	30102 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>

  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
   16ca2:	782b      	ldrb	r3, [r5, #0]
  data->requires_broadcast = !HaveSameShapes(input1, input2);
   16ca4:	f080 0001 	eor.w	r0, r0, #1
  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
   16ca8:	2b03      	cmp	r3, #3
  data->requires_broadcast = !HaveSameShapes(input1, input2);
   16caa:	7020      	strb	r0, [r4, #0]
  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
   16cac:	d001      	beq.n	16cb2 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x2e>
   16cae:	2b09      	cmp	r3, #9
   16cb0:	d168      	bne.n	16d84 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x100>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
   16cb2:	ed97 8a03 	vldr	s16, [r7, #12]
   16cb6:	edd6 8a03 	vldr	s17, [r6, #12]
    data->input2_offset = -input2->params.zero_point;
    data->output_offset = output->params.zero_point;
    data->left_shift = 20;
    const double twice_max_input_scale =
        2 * static_cast<double>(
                std::max(input1->params.scale, input2->params.scale));
   16cba:	eeb4 8ae8 	vcmpe.f32	s16, s17
    data->input1_offset = -input1->params.zero_point;
   16cbe:	693b      	ldr	r3, [r7, #16]
                std::max(input1->params.scale, input2->params.scale));
   16cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    data->input1_offset = -input1->params.zero_point;
   16cc4:	f1c3 0300 	rsb	r3, r3, #0
   16cc8:	62a3      	str	r3, [r4, #40]	; 0x28
    data->input2_offset = -input2->params.zero_point;
   16cca:	6933      	ldr	r3, [r6, #16]
        2 * static_cast<double>(
   16ccc:	bf54      	ite	pl
   16cce:	ee18 0a10 	vmovpl	r0, s16
   16cd2:	ee18 0a90 	vmovmi	r0, s17
    data->input2_offset = -input2->params.zero_point;
   16cd6:	425b      	negs	r3, r3
   16cd8:	62e3      	str	r3, [r4, #44]	; 0x2c
    data->output_offset = output->params.zero_point;
   16cda:	692b      	ldr	r3, [r5, #16]
        static_cast<double>(input2->params.scale) / twice_max_input_scale;
    const double real_output_multiplier =
        twice_max_input_scale /
        ((1 << data->left_shift) * static_cast<double>(output->params.scale));

    QuantizeMultiplierSmallerThanOneExp(
   16cdc:	f104 0b04 	add.w	fp, r4, #4
    data->output_offset = output->params.zero_point;
   16ce0:	6323      	str	r3, [r4, #48]	; 0x30
    data->left_shift = 20;
   16ce2:	2314      	movs	r3, #20
   16ce4:	6263      	str	r3, [r4, #36]	; 0x24
        2 * static_cast<double>(
   16ce6:	f7f5 fc0f 	bl	c508 <__aeabi_f2d>
   16cea:	4602      	mov	r2, r0
   16cec:	460b      	mov	r3, r1
                std::max(input1->params.scale, input2->params.scale));
   16cee:	f7f5 faad 	bl	c24c <__adddf3>
   16cf2:	4606      	mov	r6, r0
   16cf4:	460f      	mov	r7, r1
        static_cast<double>(input2->params.scale) / twice_max_input_scale;
   16cf6:	ee18 0a90 	vmov	r0, s17
   16cfa:	f7f5 fc05 	bl	c508 <__aeabi_f2d>
    const double real_input2_multiplier =
   16cfe:	4632      	mov	r2, r6
   16d00:	463b      	mov	r3, r7
   16d02:	f7f9 fcfd 	bl	10700 <__aeabi_ddiv>
   16d06:	ec41 0b19 	vmov	d9, r0, r1
        ((1 << data->left_shift) * static_cast<double>(output->params.scale));
   16d0a:	68e8      	ldr	r0, [r5, #12]
   16d0c:	f7f5 fbfc 	bl	c508 <__aeabi_f2d>
   16d10:	2200      	movs	r2, #0
   16d12:	4b1f      	ldr	r3, [pc, #124]	; (16d90 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x10c>)
   16d14:	f7f9 fbca 	bl	104ac <__aeabi_dmul>
   16d18:	4602      	mov	r2, r0
   16d1a:	460b      	mov	r3, r1
    const double real_output_multiplier =
   16d1c:	4630      	mov	r0, r6
   16d1e:	4639      	mov	r1, r7
   16d20:	f7f9 fcee 	bl	10700 <__aeabi_ddiv>
   16d24:	ec41 0b1a 	vmov	d10, r0, r1
        static_cast<double>(input1->params.scale) / twice_max_input_scale;
   16d28:	ee18 0a10 	vmov	r0, s16
   16d2c:	f7f5 fbec 	bl	c508 <__aeabi_f2d>
    QuantizeMultiplierSmallerThanOneExp(
   16d30:	f104 0a14 	add.w	sl, r4, #20
    const double real_input1_multiplier =
   16d34:	4632      	mov	r2, r6
   16d36:	463b      	mov	r3, r7
   16d38:	f7f9 fce2 	bl	10700 <__aeabi_ddiv>
    QuantizeMultiplierSmallerThanOneExp(
   16d3c:	465b      	mov	r3, fp
   16d3e:	4652      	mov	r2, sl
   16d40:	f00a f93a 	bl	20fb8 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
        real_input1_multiplier, &data->input1_multiplier, &data->input1_shift);

    QuantizeMultiplierSmallerThanOneExp(
   16d44:	ec51 0b19 	vmov	r0, r1, d9
   16d48:	f104 0308 	add.w	r3, r4, #8
   16d4c:	f104 0218 	add.w	r2, r4, #24
   16d50:	f00a f932 	bl	20fb8 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
        real_input2_multiplier, &data->input2_multiplier, &data->input2_shift);

    QuantizeMultiplierSmallerThanOneExp(
   16d54:	ec51 0b1a 	vmov	r0, r1, d10
   16d58:	f104 0320 	add.w	r3, r4, #32
   16d5c:	f104 021c 	add.w	r2, r4, #28
   16d60:	f00a f92a 	bl	20fb8 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
        real_output_multiplier, &data->output_multiplier, &data->output_shift);

    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   16d64:	462a      	mov	r2, r5
   16d66:	4640      	mov	r0, r8
   16d68:	f104 0310 	add.w	r3, r4, #16
   16d6c:	f899 1000 	ldrb.w	r1, [r9]
   16d70:	9310      	str	r3, [sp, #64]	; 0x40
   16d72:	f104 030c 	add.w	r3, r4, #12
        context, params->activation, output, &data->output_activation_min,
        &data->output_activation_max));
  }

  return kTfLiteOk;
}
   16d76:	b001      	add	sp, #4
   16d78:	ecbd 8b06 	vpop	{d8-d10}
   16d7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   16d80:	f00a b96e 	b.w	21060 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
}
   16d84:	2000      	movs	r0, #0
   16d86:	b001      	add	sp, #4
   16d88:	ecbd 8b06 	vpop	{d8-d10}
   16d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d90:	41300000 	.word	0x41300000

00016d94 <_ZN6tflite3ops5micro12Register_ADDEv>:
  return kTfLiteOk;
}

}  // namespace add

TfLiteRegistration Register_ADD() {
   16d94:	b510      	push	{r4, lr}
   16d96:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/add::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   16d98:	2220      	movs	r2, #32
   16d9a:	2100      	movs	r1, #0
   16d9c:	f01a f857 	bl	30e4e <memset>
   16da0:	4b01      	ldr	r3, [pc, #4]	; (16da8 <_ZN6tflite3ops5micro12Register_ADDEv+0x14>)
}
   16da2:	4620      	mov	r0, r4
          /*version=*/0};
   16da4:	60e3      	str	r3, [r4, #12]
}
   16da6:	bd10      	pop	{r4, pc}
   16da8:	00016eb9 	.word	0x00016eb9

00016dac <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>:
             const TfLiteTensor* input2, TfLiteTensor* output) {
   16dac:	b5f0      	push	{r4, r5, r6, r7, lr}
  CalculateActivationRange(params->activation, &output_activation_min,
   16dae:	7812      	ldrb	r2, [r2, #0]
             const TfLiteTensor* input2, TfLiteTensor* output) {
   16db0:	b0b1      	sub	sp, #196	; 0xc4
// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
   16db2:	2a01      	cmp	r2, #1
   16db4:	9c38      	ldr	r4, [sp, #224]	; 0xe0
   16db6:	e9dd 6536 	ldrd	r6, r5, [sp, #216]	; 0xd8
   16dba:	d03b      	beq.n	16e34 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x88>
    *activation_min = 0;
    *activation_max = std::numeric_limits<T>::max();
  } else if (activation == kTfLiteActRelu6) {
   16dbc:	2a03      	cmp	r2, #3
   16dbe:	d03e      	beq.n	16e3e <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x92>
  } else if (activation == kTfLiteActReluN1To1) {
    *activation_min = -1;
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
   16dc0:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 16eac <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x100>
   16dc4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   16dc8:	2a02      	cmp	r2, #2
   16dca:	eddf 6a39 	vldr	s13, [pc, #228]	; 16eb0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x104>
   16dce:	fe47 7a87 	vseleq.f32	s15, s15, s14
   16dd2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   16dd6:	fe07 7a26 	vseleq.f32	s14, s14, s13
  if (data->requires_broadcast) {
   16dda:	781b      	ldrb	r3, [r3, #0]
  int32 output_shift_identity;
};

template <typename P>
inline void SetActivationParams(float min, float max, P* params) {
  params->float_activation_min = min;
   16ddc:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
  params->float_activation_max = max;
   16de0:	edcd 7a24 	vstr	s15, [sp, #144]	; 0x90
    TF_LITE_ADD(BroadcastAdd4DSlow);
   16de4:	4631      	mov	r1, r6
   16de6:	af10      	add	r7, sp, #64	; 0x40
   16de8:	a804      	add	r0, sp, #16
  if (data->requires_broadcast) {
   16dea:	b35b      	cbz	r3, 16e44 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x98>
    TF_LITE_ADD(BroadcastAdd4DSlow);
   16dec:	f010 fc26 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   16df0:	b106      	cbz	r6, 16df4 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x48>
   16df2:	6876      	ldr	r6, [r6, #4]
   16df4:	4629      	mov	r1, r5
   16df6:	a80a      	add	r0, sp, #40	; 0x28
   16df8:	f010 fc20 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   16dfc:	b105      	cbz	r5, 16e00 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x54>
   16dfe:	686d      	ldr	r5, [r5, #4]
   16e00:	4621      	mov	r1, r4
   16e02:	4638      	mov	r0, r7
   16e04:	f010 fc1a 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   16e08:	b104      	cbz	r4, 16e0c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x60>
   16e0a:	6864      	ldr	r4, [r4, #4]
   16e0c:	4632      	mov	r2, r6
   16e0e:	e9cd 7401 	strd	r7, r4, [sp, #4]
   16e12:	9500      	str	r5, [sp, #0]
   16e14:	ab0a      	add	r3, sp, #40	; 0x28
   16e16:	a904      	add	r1, sp, #16
   16e18:	a816      	add	r0, sp, #88	; 0x58
   16e1a:	f010 feb7 	bl	27b8c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf>
    TF_LITE_ADD(Add);
   16e1e:	4638      	mov	r0, r7
   16e20:	f010 fbc7 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   16e24:	a80a      	add	r0, sp, #40	; 0x28
   16e26:	f010 fbc4 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   16e2a:	a804      	add	r0, sp, #16
   16e2c:	f010 fbc1 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   16e30:	b031      	add	sp, #196	; 0xc4
   16e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *activation_max = std::numeric_limits<T>::max();
   16e34:	eddf 7a1d 	vldr	s15, [pc, #116]	; 16eac <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x100>
    *activation_min = 0;
   16e38:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 16eb4 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x108>
   16e3c:	e7cd      	b.n	16dda <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x2e>
    *activation_max = 6;
   16e3e:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
   16e42:	e7f9      	b.n	16e38 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x8c>
    TF_LITE_ADD(Add);
   16e44:	f010 fbfa 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   16e48:	b106      	cbz	r6, 16e4c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0xa0>
   16e4a:	6876      	ldr	r6, [r6, #4]
   16e4c:	4629      	mov	r1, r5
   16e4e:	a80a      	add	r0, sp, #40	; 0x28
   16e50:	f010 fbf4 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   16e54:	b105      	cbz	r5, 16e58 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0xac>
   16e56:	686d      	ldr	r5, [r5, #4]
   16e58:	4621      	mov	r1, r4
   16e5a:	4638      	mov	r0, r7
   16e5c:	f010 fbee 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   16e60:	b104      	cbz	r4, 16e64 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0xb8>
   16e62:	6864      	ldr	r4, [r4, #4]
inline void Add(const ArithmeticParams& params,
                const RuntimeShape& input1_shape, const float* input1_data,
                const RuntimeShape& input2_shape, const float* input2_data,
                const RuntimeShape& output_shape, float* output_data) {
  const int flat_size =
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
   16e64:	463a      	mov	r2, r7
   16e66:	a90a      	add	r1, sp, #40	; 0x28
   16e68:	a804      	add	r0, sp, #16
   16e6a:	f010 fc91 	bl	27790 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
  for (int i = 0; i < flat_size; i++) {
   16e6e:	2300      	movs	r3, #0
   16e70:	4298      	cmp	r0, r3
   16e72:	ddd4      	ble.n	16e1e <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x72>
    auto x = input1_data[i] + input2_data[i];
   16e74:	ecf5 7a01 	vldmia	r5!, {s15}
   16e78:	ecb6 7a01 	vldmia	r6!, {s14}
   16e7c:	ee37 7a27 	vadd.f32	s14, s14, s15
    output_data[i] = ActivationFunctionWithMinMax(
        x, params.float_activation_min, params.float_activation_max);
   16e80:	eddd 7a23 	vldr	s15, [sp, #140]	; 0x8c
	return __b;
      return __a;
   16e84:	eeb4 7ae7 	vcmpe.f32	s14, s15
   16e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16e8c:	eddd 6a24 	vldr	s13, [sp, #144]	; 0x90
   16e90:	bf58      	it	pl
   16e92:	eef0 7a47 	vmovpl.f32	s15, s14
	return __b;
   16e96:	eef4 6a67 	vcmp.f32	s13, s15
   16e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16e9e:	bf48      	it	mi
   16ea0:	eef0 7a66 	vmovmi.f32	s15, s13
  for (int i = 0; i < flat_size; i++) {
   16ea4:	3301      	adds	r3, #1
    output_data[i] = ActivationFunctionWithMinMax(
   16ea6:	ece4 7a01 	vstmia	r4!, {s15}
  for (int i = 0; i < flat_size; i++) {
   16eaa:	e7e1      	b.n	16e70 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0xc4>
   16eac:	7f7fffff 	.word	0x7f7fffff
   16eb0:	ff7fffff 	.word	0xff7fffff
   16eb4:	00000000 	.word	0x00000000

00016eb8 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   16eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ebc:	460e      	mov	r6, r1
  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
   16ebe:	6833      	ldr	r3, [r6, #0]
   16ec0:	f8d0 8008 	ldr.w	r8, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
   16ec4:	685a      	ldr	r2, [r3, #4]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   16ec6:	b095      	sub	sp, #84	; 0x54
   16ec8:	eb08 1982 	add.w	r9, r8, r2, lsl #6
  return &context->tensors[node->outputs->data[index]];
   16ecc:	6872      	ldr	r2, [r6, #4]
  return &context->tensors[node->inputs->data[index]];
   16ece:	689b      	ldr	r3, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
   16ed0:	6857      	ldr	r7, [r2, #4]
  auto* params = reinterpret_cast<TfLiteAddParams*>(node->builtin_data);
   16ed2:	6949      	ldr	r1, [r1, #20]
   16ed4:	ea4f 1b87 	mov.w	fp, r7, lsl #6
  TF_LITE_ENSURE_STATUS(
   16ed8:	f10d 0a1c 	add.w	sl, sp, #28
   16edc:	eb08 1787 	add.w	r7, r8, r7, lsl #6
  return &context->tensors[node->inputs->data[index]];
   16ee0:	eb08 1383 	add.w	r3, r8, r3, lsl #6
   16ee4:	464a      	mov	r2, r9
   16ee6:	e9cd 7a00 	strd	r7, sl, [sp]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   16eea:	4605      	mov	r5, r0
  TF_LITE_ENSURE_STATUS(
   16eec:	9305      	str	r3, [sp, #20]
   16eee:	9104      	str	r1, [sp, #16]
   16ef0:	f7ff fec8 	bl	16c84 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE>
   16ef4:	4604      	mov	r4, r0
   16ef6:	b978      	cbnz	r0, 16f18 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x60>
  if (output->type == kTfLiteFloat32) {
   16ef8:	e9dd 1304 	ldrd	r1, r3, [sp, #16]
   16efc:	f818 000b 	ldrb.w	r0, [r8, fp]
   16f00:	2801      	cmp	r0, #1
   16f02:	d10d      	bne.n	16f20 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x68>
    EvalAdd(context, node, params, &data, input1, input2, output);
   16f04:	460a      	mov	r2, r1
   16f06:	e9cd 3701 	strd	r3, r7, [sp, #4]
   16f0a:	4631      	mov	r1, r6
   16f0c:	4653      	mov	r3, sl
   16f0e:	4628      	mov	r0, r5
   16f10:	f8cd 9000 	str.w	r9, [sp]
   16f14:	f7ff ff4a 	bl	16dac <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>
}
   16f18:	4620      	mov	r0, r4
   16f1a:	b015      	add	sp, #84	; 0x54
   16f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
   16f20:	2803      	cmp	r0, #3
   16f22:	d001      	beq.n	16f28 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x70>
   16f24:	2809      	cmp	r0, #9
   16f26:	d10b      	bne.n	16f40 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x88>
    TF_LITE_ENSURE_OK(context, EvalAddQuantized(context, node, params, &data,
   16f28:	460a      	mov	r2, r1
   16f2a:	e9cd 3701 	strd	r3, r7, [sp, #4]
   16f2e:	4631      	mov	r1, r6
   16f30:	4653      	mov	r3, sl
   16f32:	4628      	mov	r0, r5
   16f34:	f8cd 9000 	str.w	r9, [sp]
   16f38:	f011 f85d 	bl	27ff6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>
   16f3c:	4604      	mov	r4, r0
   16f3e:	e7eb      	b.n	16f18 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x60>
    TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   16f40:	696c      	ldr	r4, [r5, #20]
   16f42:	f7f5 febf 	bl	ccc4 <TfLiteTypeGetName>
   16f46:	f818 300b 	ldrb.w	r3, [r8, fp]
   16f4a:	4602      	mov	r2, r0
   16f4c:	4902      	ldr	r1, [pc, #8]	; (16f58 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0xa0>)
   16f4e:	4628      	mov	r0, r5
   16f50:	47a0      	blx	r4
    return kTfLiteError;
   16f52:	2401      	movs	r4, #1
   16f54:	e7e0      	b.n	16f18 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x60>
   16f56:	bf00      	nop
   16f58:	000349d0 	.word	0x000349d0

00016f5c <_ZN6tflite3ops5micro16Register_ARG_MAXEv>:
  return Eval(context, node, true);
}

}  // namespace arg_min_max

TfLiteRegistration Register_ARG_MAX() {
   16f5c:	b510      	push	{r4, lr}
   16f5e:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/arg_min_max::ArgMaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   16f60:	2220      	movs	r2, #32
   16f62:	2100      	movs	r1, #0
   16f64:	f019 ff73 	bl	30e4e <memset>
   16f68:	4b01      	ldr	r3, [pc, #4]	; (16f70 <_ZN6tflite3ops5micro16Register_ARG_MAXEv+0x14>)
}
   16f6a:	4620      	mov	r0, r4
          /*version=*/0};
   16f6c:	60e3      	str	r3, [r4, #12]
}
   16f6e:	bd10      	pop	{r4, pc}
   16f70:	000285b9 	.word	0x000285b9

00016f74 <_ZN6tflite3ops5micro16Register_ARG_MINEv>:

TfLiteRegistration Register_ARG_MIN() {
   16f74:	b510      	push	{r4, lr}
   16f76:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/arg_min_max::ArgMinEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   16f78:	2220      	movs	r2, #32
   16f7a:	2100      	movs	r1, #0
   16f7c:	f019 ff67 	bl	30e4e <memset>
   16f80:	4b01      	ldr	r3, [pc, #4]	; (16f88 <_ZN6tflite3ops5micro16Register_ARG_MINEv+0x14>)
}
   16f82:	4620      	mov	r0, r4
          /*version=*/0};
   16f84:	60e3      	str	r3, [r4, #12]
}
   16f86:	bd10      	pop	{r4, pc}
   16f88:	000285b3 	.word	0x000285b3

00016f8c <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node, bool is_arg_max) {
   16f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16f90:	4690      	mov	r8, r2
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   16f92:	680a      	ldr	r2, [r1, #0]
   16f94:	6883      	ldr	r3, [r0, #8]
   16f96:	6897      	ldr	r7, [r2, #8]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node, bool is_arg_max) {
   16f98:	4604      	mov	r4, r0
   16f9a:	01b8      	lsls	r0, r7, #6
  if (axis->type == kTfLiteInt32) {
   16f9c:	5c18      	ldrb	r0, [r3, r0]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node, bool is_arg_max) {
   16f9e:	b092      	sub	sp, #72	; 0x48
  if (axis->type == kTfLiteInt32) {
   16fa0:	2802      	cmp	r0, #2
   16fa2:	eb03 1787 	add.w	r7, r3, r7, lsl #6
   16fa6:	d178      	bne.n	1709a <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x10e>
  return &context->tensors[node->outputs->data[index]];
   16fa8:	6849      	ldr	r1, [r1, #4]
   16faa:	684d      	ldr	r5, [r1, #4]
   16fac:	01a9      	lsls	r1, r5, #6
    if (output->type == kTfLiteInt32) {
   16fae:	5c58      	ldrb	r0, [r3, r1]
   16fb0:	eb03 1585 	add.w	r5, r3, r5, lsl #6
   16fb4:	2802      	cmp	r0, #2
   16fb6:	d170      	bne.n	1709a <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x10e>
  return &context->tensors[node->inputs->data[index]];
   16fb8:	6856      	ldr	r6, [r2, #4]
   16fba:	01b2      	lsls	r2, r6, #6
      switch (input->type) {
   16fbc:	5c98      	ldrb	r0, [r3, r2]
   16fbe:	eb03 1686 	add.w	r6, r3, r6, lsl #6
   16fc2:	2803      	cmp	r0, #3
   16fc4:	d028      	beq.n	17018 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x8c>
   16fc6:	2809      	cmp	r0, #9
   16fc8:	d042      	beq.n	17050 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0xc4>
   16fca:	2801      	cmp	r0, #1
   16fcc:	d15c      	bne.n	17088 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0xfc>
          TF_LITE_ARG_MIN_MAX(float, int32_t, int32_t);
   16fce:	4631      	mov	r1, r6
   16fd0:	a806      	add	r0, sp, #24
   16fd2:	f010 fb33 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   16fd6:	687a      	ldr	r2, [r7, #4]
   16fd8:	4629      	mov	r1, r5
   16fda:	a80c      	add	r0, sp, #48	; 0x30
   16fdc:	6874      	ldr	r4, [r6, #4]
   16fde:	9203      	str	r2, [sp, #12]
   16fe0:	f010 fb2c 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   16fe4:	686b      	ldr	r3, [r5, #4]
inline void ArgMinMaxHelper(const RuntimeShape& input1_shape,
   16fe6:	a905      	add	r1, sp, #20
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
   16fe8:	e9cd 3100 	strd	r3, r1, [sp]
  if (is_arg_max) {
   16fec:	9a03      	ldr	r2, [sp, #12]
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
   16fee:	4621      	mov	r1, r4
   16ff0:	ab0c      	add	r3, sp, #48	; 0x30
   16ff2:	a806      	add	r0, sp, #24
  if (is_arg_max) {
   16ff4:	f1b8 0f00 	cmp.w	r8, #0
   16ff8:	d00b      	beq.n	17012 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x86>
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
   16ffa:	f011 f80a 	bl	28012 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>
          TF_LITE_ARG_MIN_MAX(int8_t, int32_t, int32_t);
   16ffe:	a80c      	add	r0, sp, #48	; 0x30
   17000:	f010 fad7 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   17004:	a806      	add	r0, sp, #24
   17006:	f010 fad4 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   1700a:	2000      	movs	r0, #0
}
   1700c:	b012      	add	sp, #72	; 0x48
   1700e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
   17012:	f011 f87e 	bl	28112 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>
   17016:	e7f2      	b.n	16ffe <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x72>
          TF_LITE_ARG_MIN_MAX(uint8_t, int32_t, int32_t);
   17018:	4631      	mov	r1, r6
   1701a:	a806      	add	r0, sp, #24
   1701c:	f010 fb0e 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17020:	687a      	ldr	r2, [r7, #4]
   17022:	4629      	mov	r1, r5
   17024:	a80c      	add	r0, sp, #48	; 0x30
   17026:	6874      	ldr	r4, [r6, #4]
   17028:	9203      	str	r2, [sp, #12]
   1702a:	f010 fb07 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1702e:	686b      	ldr	r3, [r5, #4]
inline void ArgMinMaxHelper(const RuntimeShape& input1_shape,
   17030:	a905      	add	r1, sp, #20
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
   17032:	e9cd 3100 	strd	r3, r1, [sp]
  if (is_arg_max) {
   17036:	9a03      	ldr	r2, [sp, #12]
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
   17038:	4621      	mov	r1, r4
   1703a:	ab0c      	add	r3, sp, #48	; 0x30
   1703c:	a806      	add	r0, sp, #24
  if (is_arg_max) {
   1703e:	f1b8 0f00 	cmp.w	r8, #0
   17042:	d002      	beq.n	1704a <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0xbe>
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
   17044:	f011 f8e5 	bl	28212 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>
   17048:	e7d9      	b.n	16ffe <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x72>
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
   1704a:	f011 f956 	bl	282fa <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>
   1704e:	e7d6      	b.n	16ffe <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x72>
          TF_LITE_ARG_MIN_MAX(int8_t, int32_t, int32_t);
   17050:	4631      	mov	r1, r6
   17052:	a806      	add	r0, sp, #24
   17054:	f010 faf2 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17058:	687a      	ldr	r2, [r7, #4]
   1705a:	4629      	mov	r1, r5
   1705c:	a80c      	add	r0, sp, #48	; 0x30
   1705e:	6874      	ldr	r4, [r6, #4]
   17060:	9203      	str	r2, [sp, #12]
   17062:	f010 faeb 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   17066:	686b      	ldr	r3, [r5, #4]
inline void ArgMinMaxHelper(const RuntimeShape& input1_shape,
   17068:	a905      	add	r1, sp, #20
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
   1706a:	e9cd 3100 	strd	r3, r1, [sp]
  if (is_arg_max) {
   1706e:	9a03      	ldr	r2, [sp, #12]
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
   17070:	4621      	mov	r1, r4
   17072:	ab0c      	add	r3, sp, #48	; 0x30
   17074:	a806      	add	r0, sp, #24
  if (is_arg_max) {
   17076:	f1b8 0f00 	cmp.w	r8, #0
   1707a:	d002      	beq.n	17082 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0xf6>
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
   1707c:	f011 f9b1 	bl	283e2 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>
   17080:	e7bd      	b.n	16ffe <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x72>
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
   17082:	f011 fa22 	bl	284ca <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>
   17086:	e7ba      	b.n	16ffe <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x72>
          TF_LITE_KERNEL_LOG(context,
   17088:	6965      	ldr	r5, [r4, #20]
   1708a:	f7f5 fe1b 	bl	ccc4 <TfLiteTypeGetName>
   1708e:	4602      	mov	r2, r0
   17090:	4905      	ldr	r1, [pc, #20]	; (170a8 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x11c>)
    TF_LITE_KERNEL_LOG(context, "Only int32 are supported currently, got %s.",
   17092:	4620      	mov	r0, r4
   17094:	47a8      	blx	r5
    return kTfLiteError;
   17096:	2001      	movs	r0, #1
   17098:	e7b8      	b.n	1700c <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x80>
    TF_LITE_KERNEL_LOG(context, "Only int32 are supported currently, got %s.",
   1709a:	6965      	ldr	r5, [r4, #20]
   1709c:	f7f5 fe12 	bl	ccc4 <TfLiteTypeGetName>
   170a0:	4902      	ldr	r1, [pc, #8]	; (170ac <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x120>)
   170a2:	4602      	mov	r2, r0
   170a4:	e7f5      	b.n	17092 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x106>
   170a6:	bf00      	nop
   170a8:	000349ec 	.word	0x000349ec
   170ac:	00034a2a 	.word	0x00034a2a

000170b0 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode>:
namespace ceil {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   170b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   170b4:	680b      	ldr	r3, [r1, #0]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   170b6:	4605      	mov	r5, r0
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   170b8:	681e      	ldr	r6, [r3, #0]
   170ba:	b085      	sub	sp, #20
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   170bc:	2e01      	cmp	r6, #1
   170be:	d00c      	beq.n	170da <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x2a>
   170c0:	2401      	movs	r4, #1
   170c2:	4b4a      	ldr	r3, [pc, #296]	; (171ec <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x13c>)
   170c4:	e9cd 6402 	strd	r6, r4, [sp, #8]
   170c8:	9301      	str	r3, [sp, #4]
   170ca:	4b49      	ldr	r3, [pc, #292]	; (171f0 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x140>)
   170cc:	9300      	str	r3, [sp, #0]
   170ce:	2321      	movs	r3, #33	; 0x21
   170d0:	6945      	ldr	r5, [r0, #20]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
  TF_LITE_ENSURE_TYPES_EQ(context, output->type, input->type);
  TF_LITE_ENSURE_EQ(context, output->bytes, input->bytes);
  TF_LITE_ENSURE_EQ(context, output->dims->size, input->dims->size);
   170d2:	4a48      	ldr	r2, [pc, #288]	; (171f4 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
   170d4:	4948      	ldr	r1, [pc, #288]	; (171f8 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
   170d6:	47a8      	blx	r5
   170d8:	e00f      	b.n	170fa <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
   170da:	684a      	ldr	r2, [r1, #4]
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   170dc:	6814      	ldr	r4, [r2, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   170de:	2c01      	cmp	r4, #1
   170e0:	d00f      	beq.n	17102 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x52>
   170e2:	4b42      	ldr	r3, [pc, #264]	; (171ec <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x13c>)
   170e4:	e9cd 4602 	strd	r4, r6, [sp, #8]
   170e8:	9301      	str	r3, [sp, #4]
   170ea:	4b44      	ldr	r3, [pc, #272]	; (171fc <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
   170ec:	4a41      	ldr	r2, [pc, #260]	; (171f4 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
   170ee:	9300      	str	r3, [sp, #0]
   170f0:	6944      	ldr	r4, [r0, #20]
   170f2:	2322      	movs	r3, #34	; 0x22
   170f4:	4940      	ldr	r1, [pc, #256]	; (171f8 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
   170f6:	47a0      	blx	r4
   170f8:	4634      	mov	r4, r6
  for (int i = 0; i < output->dims->size; ++i) {
    TF_LITE_ENSURE_EQ(context, output->dims->data[i], input->dims->data[i]);
  }
  return kTfLiteOk;
}
   170fa:	4620      	mov	r0, r4
   170fc:	b005      	add	sp, #20
   170fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return &context->tensors[node->inputs->data[index]];
   17102:	685b      	ldr	r3, [r3, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   17104:	6886      	ldr	r6, [r0, #8]
   17106:	ea4f 1883 	mov.w	r8, r3, lsl #6
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
   1710a:	f816 7008 	ldrb.w	r7, [r6, r8]
   1710e:	eb06 1383 	add.w	r3, r6, r3, lsl #6
   17112:	2f01      	cmp	r7, #1
   17114:	d014      	beq.n	17140 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x90>
   17116:	f8d0 8014 	ldr.w	r8, [r0, #20]
   1711a:	4638      	mov	r0, r7
   1711c:	f7f5 fdd2 	bl	ccc4 <TfLiteTypeGetName>
   17120:	4606      	mov	r6, r0
   17122:	4620      	mov	r0, r4
   17124:	f7f5 fdce 	bl	ccc4 <TfLiteTypeGetName>
   17128:	4b35      	ldr	r3, [pc, #212]	; (17200 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x150>)
   1712a:	e9cd 6002 	strd	r6, r0, [sp, #8]
   1712e:	9301      	str	r3, [sp, #4]
   17130:	4b34      	ldr	r3, [pc, #208]	; (17204 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
   17132:	4628      	mov	r0, r5
   17134:	9300      	str	r3, [sp, #0]
   17136:	4a2f      	ldr	r2, [pc, #188]	; (171f4 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
   17138:	2323      	movs	r3, #35	; 0x23
   1713a:	4933      	ldr	r1, [pc, #204]	; (17208 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
   1713c:	47c0      	blx	r8
   1713e:	e7dc      	b.n	170fa <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
  return &context->tensors[node->outputs->data[index]];
   17140:	6852      	ldr	r2, [r2, #4]
   17142:	0191      	lsls	r1, r2, #6
  TF_LITE_ENSURE_TYPES_EQ(context, output->type, input->type);
   17144:	5c74      	ldrb	r4, [r6, r1]
   17146:	eb06 1282 	add.w	r2, r6, r2, lsl #6
   1714a:	2c01      	cmp	r4, #1
   1714c:	d016      	beq.n	1717c <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0xcc>
   1714e:	f8d0 9014 	ldr.w	r9, [r0, #20]
   17152:	4620      	mov	r0, r4
   17154:	f7f5 fdb6 	bl	ccc4 <TfLiteTypeGetName>
   17158:	4604      	mov	r4, r0
   1715a:	f816 0008 	ldrb.w	r0, [r6, r8]
   1715e:	f7f5 fdb1 	bl	ccc4 <TfLiteTypeGetName>
   17162:	4b28      	ldr	r3, [pc, #160]	; (17204 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
   17164:	e9cd 4002 	strd	r4, r0, [sp, #8]
   17168:	9301      	str	r3, [sp, #4]
   1716a:	4b28      	ldr	r3, [pc, #160]	; (1720c <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x15c>)
   1716c:	4628      	mov	r0, r5
   1716e:	9300      	str	r3, [sp, #0]
   17170:	4a20      	ldr	r2, [pc, #128]	; (171f4 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
   17172:	2324      	movs	r3, #36	; 0x24
   17174:	4924      	ldr	r1, [pc, #144]	; (17208 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
   17176:	47c8      	blx	r9
   17178:	463c      	mov	r4, r7
   1717a:	e7be      	b.n	170fa <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
  TF_LITE_ENSURE_EQ(context, output->bytes, input->bytes);
   1717c:	6991      	ldr	r1, [r2, #24]
   1717e:	699e      	ldr	r6, [r3, #24]
   17180:	42b1      	cmp	r1, r6
   17182:	d008      	beq.n	17196 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0xe6>
   17184:	4b22      	ldr	r3, [pc, #136]	; (17210 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x160>)
   17186:	e9cd 1602 	strd	r1, r6, [sp, #8]
   1718a:	9301      	str	r3, [sp, #4]
   1718c:	4b21      	ldr	r3, [pc, #132]	; (17214 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x164>)
   1718e:	9300      	str	r3, [sp, #0]
   17190:	6945      	ldr	r5, [r0, #20]
   17192:	2325      	movs	r3, #37	; 0x25
   17194:	e79d      	b.n	170d2 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
  TF_LITE_ENSURE_EQ(context, output->dims->size, input->dims->size);
   17196:	6897      	ldr	r7, [r2, #8]
   17198:	689a      	ldr	r2, [r3, #8]
   1719a:	6839      	ldr	r1, [r7, #0]
   1719c:	6813      	ldr	r3, [r2, #0]
   1719e:	4299      	cmp	r1, r3
   171a0:	d008      	beq.n	171b4 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x104>
   171a2:	e9cd 1302 	strd	r1, r3, [sp, #8]
   171a6:	4b1c      	ldr	r3, [pc, #112]	; (17218 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x168>)
   171a8:	9301      	str	r3, [sp, #4]
   171aa:	4b1c      	ldr	r3, [pc, #112]	; (1721c <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x16c>)
   171ac:	9300      	str	r3, [sp, #0]
   171ae:	6945      	ldr	r5, [r0, #20]
   171b0:	2326      	movs	r3, #38	; 0x26
   171b2:	e78e      	b.n	170d2 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
   171b4:	4623      	mov	r3, r4
    TF_LITE_ENSURE_EQ(context, output->dims->data[i], input->dims->data[i]);
   171b6:	3a04      	subs	r2, #4
  for (int i = 0; i < output->dims->size; ++i) {
   171b8:	1e58      	subs	r0, r3, #1
   171ba:	4281      	cmp	r1, r0
   171bc:	dd13      	ble.n	171e6 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x136>
    TF_LITE_ENSURE_EQ(context, output->dims->data[i], input->dims->data[i]);
   171be:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
   171c2:	3301      	adds	r3, #1
   171c4:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
   171c8:	42b0      	cmp	r0, r6
   171ca:	d0f5      	beq.n	171b8 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x108>
   171cc:	4b14      	ldr	r3, [pc, #80]	; (17220 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x170>)
   171ce:	e9cd 0602 	strd	r0, r6, [sp, #8]
   171d2:	9301      	str	r3, [sp, #4]
   171d4:	4b13      	ldr	r3, [pc, #76]	; (17224 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x174>)
   171d6:	4628      	mov	r0, r5
   171d8:	9300      	str	r3, [sp, #0]
   171da:	696e      	ldr	r6, [r5, #20]
   171dc:	2328      	movs	r3, #40	; 0x28
   171de:	4a05      	ldr	r2, [pc, #20]	; (171f4 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
   171e0:	4905      	ldr	r1, [pc, #20]	; (171f8 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
   171e2:	47b0      	blx	r6
   171e4:	e789      	b.n	170fa <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
  return kTfLiteOk;
   171e6:	2400      	movs	r4, #0
   171e8:	e787      	b.n	170fa <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
   171ea:	bf00      	nop
   171ec:	00035814 	.word	0x00035814
   171f0:	00034a96 	.word	0x00034a96
   171f4:	00034a56 	.word	0x00034a56
   171f8:	00034a7c 	.word	0x00034a7c
   171fc:	00034aa6 	.word	0x00034aa6
   17200:	00034ad1 	.word	0x00034ad1
   17204:	0003539f 	.word	0x0003539f
   17208:	00034ab7 	.word	0x00034ab7
   1720c:	00035387 	.word	0x00035387
   17210:	00034ae0 	.word	0x00034ae0
   17214:	00034aed 	.word	0x00034aed
   17218:	00034afb 	.word	0x00034afb
   1721c:	00034b0d 	.word	0x00034b0d
   17220:	00034b20 	.word	0x00034b20
   17224:	00034b35 	.word	0x00034b35

00017228 <_ZN6tflite3ops5micro13Register_CEILEv>:

  return kTfLiteOk;
}
}  // namespace ceil

TfLiteRegistration Register_CEIL() {
   17228:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/ceil::Prepare,
          /*invoke=*/ceil::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1722a:	4604      	mov	r4, r0
TfLiteRegistration Register_CEIL() {
   1722c:	4606      	mov	r6, r0
          /*version=*/0};
   1722e:	4d04      	ldr	r5, [pc, #16]	; (17240 <_ZN6tflite3ops5micro13Register_CEILEv+0x18>)
   17230:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   17232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   17234:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   17238:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1723c:	4630      	mov	r0, r6
   1723e:	bd70      	pop	{r4, r5, r6, pc}
   17240:	00031898 	.word	0x00031898

00017244 <_ZN6tflite3ops5micro14Register_EQUALEv>:
}

}  // namespace
}  // namespace comparisons

TfLiteRegistration Register_EQUAL() {
   17244:	b510      	push	{r4, lr}
   17246:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/comparisons::EqualEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   17248:	2220      	movs	r2, #32
   1724a:	2100      	movs	r1, #0
   1724c:	f019 fdff 	bl	30e4e <memset>
   17250:	4b01      	ldr	r3, [pc, #4]	; (17258 <_ZN6tflite3ops5micro14Register_EQUALEv+0x14>)
}
   17252:	4620      	mov	r0, r4
          /*version=*/0};
   17254:	60e3      	str	r3, [r4, #12]
}
   17256:	bd10      	pop	{r4, pc}
   17258:	000172d5 	.word	0x000172d5

0001725c <_ZN6tflite3ops5micro18Register_NOT_EQUALEv>:

TfLiteRegistration Register_NOT_EQUAL() {
   1725c:	b510      	push	{r4, lr}
   1725e:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/comparisons::NotEqualEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   17260:	2220      	movs	r2, #32
   17262:	2100      	movs	r1, #0
   17264:	f019 fdf3 	bl	30e4e <memset>
   17268:	4b01      	ldr	r3, [pc, #4]	; (17270 <_ZN6tflite3ops5micro18Register_NOT_EQUALEv+0x14>)
}
   1726a:	4620      	mov	r0, r4
          /*version=*/0};
   1726c:	60e3      	str	r3, [r4, #12]
}
   1726e:	bd10      	pop	{r4, pc}
   17270:	00017861 	.word	0x00017861

00017274 <_ZN6tflite3ops5micro16Register_GREATEREv>:

TfLiteRegistration Register_GREATER() {
   17274:	b510      	push	{r4, lr}
   17276:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/comparisons::GreaterEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   17278:	2220      	movs	r2, #32
   1727a:	2100      	movs	r1, #0
   1727c:	f019 fde7 	bl	30e4e <memset>
   17280:	4b01      	ldr	r3, [pc, #4]	; (17288 <_ZN6tflite3ops5micro16Register_GREATEREv+0x14>)
}
   17282:	4620      	mov	r0, r4
          /*version=*/0};
   17284:	60e3      	str	r3, [r4, #12]
}
   17286:	bd10      	pop	{r4, pc}
   17288:	00017de5 	.word	0x00017de5

0001728c <_ZN6tflite3ops5micro22Register_GREATER_EQUALEv>:

TfLiteRegistration Register_GREATER_EQUAL() {
   1728c:	b510      	push	{r4, lr}
   1728e:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/comparisons::GreaterEqualEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   17290:	2220      	movs	r2, #32
   17292:	2100      	movs	r1, #0
   17294:	f019 fddb 	bl	30e4e <memset>
   17298:	4b01      	ldr	r3, [pc, #4]	; (172a0 <_ZN6tflite3ops5micro22Register_GREATER_EQUALEv+0x14>)
}
   1729a:	4620      	mov	r0, r4
          /*version=*/0};
   1729c:	60e3      	str	r3, [r4, #12]
}
   1729e:	bd10      	pop	{r4, pc}
   172a0:	000182d9 	.word	0x000182d9

000172a4 <_ZN6tflite3ops5micro13Register_LESSEv>:

TfLiteRegistration Register_LESS() {
   172a4:	b510      	push	{r4, lr}
   172a6:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/comparisons::LessEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   172a8:	2220      	movs	r2, #32
   172aa:	2100      	movs	r1, #0
   172ac:	f019 fdcf 	bl	30e4e <memset>
   172b0:	4b01      	ldr	r3, [pc, #4]	; (172b8 <_ZN6tflite3ops5micro13Register_LESSEv+0x14>)
}
   172b2:	4620      	mov	r0, r4
          /*version=*/0};
   172b4:	60e3      	str	r3, [r4, #12]
}
   172b6:	bd10      	pop	{r4, pc}
   172b8:	000187cd 	.word	0x000187cd

000172bc <_ZN6tflite3ops5micro19Register_LESS_EQUALEv>:

TfLiteRegistration Register_LESS_EQUAL() {
   172bc:	b510      	push	{r4, lr}
   172be:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/comparisons::LessEqualEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   172c0:	2220      	movs	r2, #32
   172c2:	2100      	movs	r1, #0
   172c4:	f019 fdc3 	bl	30e4e <memset>
   172c8:	4b01      	ldr	r3, [pc, #4]	; (172d0 <_ZN6tflite3ops5micro19Register_LESS_EQUALEv+0x14>)
}
   172ca:	4620      	mov	r0, r4
          /*version=*/0};
   172cc:	60e3      	str	r3, [r4, #12]
}
   172ce:	bd10      	pop	{r4, pc}
   172d0:	00018cc1 	.word	0x00018cc1

000172d4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus EqualEval(TfLiteContext* context, TfLiteNode* node) {
   172d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   172d8:	ed2d 8b02 	vpush	{d8}
  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
   172dc:	680b      	ldr	r3, [r1, #0]
   172de:	f8d0 8008 	ldr.w	r8, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
   172e2:	685e      	ldr	r6, [r3, #4]
   172e4:	689c      	ldr	r4, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
   172e6:	684b      	ldr	r3, [r1, #4]
  return &context->tensors[node->inputs->data[index]];
   172e8:	ea4f 1986 	mov.w	r9, r6, lsl #6
  return &context->tensors[node->outputs->data[index]];
   172ec:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->inputs->data[index]];
   172ee:	eb08 1686 	add.w	r6, r8, r6, lsl #6
   172f2:	eb08 1484 	add.w	r4, r8, r4, lsl #6
TfLiteStatus EqualEval(TfLiteContext* context, TfLiteNode* node) {
   172f6:	4605      	mov	r5, r0
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   172f8:	4621      	mov	r1, r4
   172fa:	4630      	mov	r0, r6
TfLiteStatus EqualEval(TfLiteContext* context, TfLiteNode* node) {
   172fc:	b0ab      	sub	sp, #172	; 0xac
  return &context->tensors[node->outputs->data[index]];
   172fe:	eb08 1a83 	add.w	sl, r8, r3, lsl #6
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   17302:	f018 fefe 	bl	30102 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
   17306:	f080 0001 	eor.w	r0, r0, #1
   1730a:	b2c7      	uxtb	r7, r0
  switch (input1->type) {
   1730c:	f818 0009 	ldrb.w	r0, [r8, r9]
   17310:	1e43      	subs	r3, r0, #1
   17312:	2b08      	cmp	r3, #8
   17314:	f200 8297 	bhi.w	17846 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x572>
   17318:	e8df f013 	tbh	[pc, r3, lsl #1]
   1731c:	00b80060 	.word	0x00b80060
   17320:	01060168 	.word	0x01060168
   17324:	00090295 	.word	0x00090295
   17328:	02950295 	.word	0x02950295
   1732c:	01fe      	.short	0x01fe
      TF_LITE_COMPARISON(bool, Equal, requires_broadcast);
   1732e:	4631      	mov	r1, r6
   17330:	ad1c      	add	r5, sp, #112	; 0x70
   17332:	b31f      	cbz	r7, 1737c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0xa8>
   17334:	a810      	add	r0, sp, #64	; 0x40
   17336:	f010 f981 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1733a:	4621      	mov	r1, r4
   1733c:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1733e:	6876      	ldr	r6, [r6, #4]
   17340:	f010 f97c 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17344:	b104      	cbz	r4, 17348 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x74>
   17346:	6864      	ldr	r4, [r4, #4]
   17348:	4651      	mov	r1, sl
   1734a:	4628      	mov	r0, r5
   1734c:	f010 f976 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   17350:	f1ba 0f00 	cmp.w	sl, #0
   17354:	d001      	beq.n	1735a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x86>
   17356:	f8da a004 	ldr.w	sl, [sl, #4]
      bool* output_data) {                                                     \
    BroadcastComparison4DSlowWithScaling<T, name##Fn>(                         \
        op_params, input1_shape, input1_data, input2_shape, input2_data,       \
        output_shape, output_data);                                            \
  }
TFLITE_COMPARISON_OP(Equal);
   1735a:	4632      	mov	r2, r6
   1735c:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   17360:	9400      	str	r4, [sp, #0]
   17362:	ab16      	add	r3, sp, #88	; 0x58
   17364:	a910      	add	r1, sp, #64	; 0x40
   17366:	a822      	add	r0, sp, #136	; 0x88
   17368:	f011 fc7c 	bl	28c64 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_7EqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
TF_LITE_QUANTIZE_COMPARISON(Equal);
   1736c:	4628      	mov	r0, r5
   1736e:	f010 f920 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   17372:	a816      	add	r0, sp, #88	; 0x58
   17374:	f010 f91d 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   17378:	a810      	add	r0, sp, #64	; 0x40
   1737a:	e12f      	b.n	175dc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x308>
      TF_LITE_COMPARISON(bool, Equal, requires_broadcast);
   1737c:	a816      	add	r0, sp, #88	; 0x58
   1737e:	f010 f95d 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17382:	4621      	mov	r1, r4
   17384:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17386:	6876      	ldr	r6, [r6, #4]
   17388:	f010 f958 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1738c:	b104      	cbz	r4, 17390 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0xbc>
   1738e:	6864      	ldr	r4, [r4, #4]
   17390:	4651      	mov	r1, sl
   17392:	a822      	add	r0, sp, #136	; 0x88
   17394:	f010 f952 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   17398:	f1ba 0f00 	cmp.w	sl, #0
   1739c:	d001      	beq.n	173a2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0xce>
   1739e:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   173a2:	4629      	mov	r1, r5
   173a4:	aa22      	add	r2, sp, #136	; 0x88
   173a6:	a816      	add	r0, sp, #88	; 0x58
   173a8:	f011 f98b 	bl	286c2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   173ac:	2200      	movs	r2, #0
   173ae:	2300      	movs	r3, #0
  const int64_t flatsize =
   173b0:	17c1      	asrs	r1, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
   173b2:	4282      	cmp	r2, r0
   173b4:	eb73 0701 	sbcs.w	r7, r3, r1
   173b8:	f280 8109 	bge.w	175ce <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x2fa>
  return lhs == rhs;
   173bc:	f816 c002 	ldrb.w	ip, [r6, r2]
   173c0:	f814 e002 	ldrb.w	lr, [r4, r2]
   173c4:	ebac 0e0e 	sub.w	lr, ip, lr
   173c8:	f1de 0c00 	rsbs	ip, lr, #0
   173cc:	eb4c 0c0e 	adc.w	ip, ip, lr
   173d0:	f80a c002 	strb.w	ip, [sl, r2]
  for (int64_t i = 0; i < flatsize; ++i) {
   173d4:	3201      	adds	r2, #1
   173d6:	f143 0300 	adc.w	r3, r3, #0
   173da:	e7ea      	b.n	173b2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0xde>
      TF_LITE_COMPARISON(float, Equal, requires_broadcast);
   173dc:	4631      	mov	r1, r6
   173de:	ad1c      	add	r5, sp, #112	; 0x70
   173e0:	b1e7      	cbz	r7, 1741c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x148>
   173e2:	a810      	add	r0, sp, #64	; 0x40
   173e4:	f010 f92a 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   173e8:	4621      	mov	r1, r4
   173ea:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   173ec:	6876      	ldr	r6, [r6, #4]
   173ee:	f010 f925 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   173f2:	b104      	cbz	r4, 173f6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x122>
   173f4:	6864      	ldr	r4, [r4, #4]
   173f6:	4651      	mov	r1, sl
   173f8:	4628      	mov	r0, r5
   173fa:	f010 f91f 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   173fe:	f1ba 0f00 	cmp.w	sl, #0
   17402:	d001      	beq.n	17408 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x134>
   17404:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Equal);
   17408:	4632      	mov	r2, r6
   1740a:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   1740e:	9400      	str	r4, [sp, #0]
   17410:	ab16      	add	r3, sp, #88	; 0x58
   17412:	a910      	add	r1, sp, #64	; 0x40
   17414:	a822      	add	r0, sp, #136	; 0x88
   17416:	f011 f9fd 	bl	28814 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_7EqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   1741a:	e7a7      	b.n	1736c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
   1741c:	a816      	add	r0, sp, #88	; 0x58
   1741e:	f010 f90d 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17422:	4621      	mov	r1, r4
   17424:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17426:	f8d6 8004 	ldr.w	r8, [r6, #4]
   1742a:	f010 f907 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1742e:	b104      	cbz	r4, 17432 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x15e>
   17430:	6864      	ldr	r4, [r4, #4]
   17432:	4651      	mov	r1, sl
   17434:	a822      	add	r0, sp, #136	; 0x88
   17436:	f010 f901 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1743a:	f1ba 0f00 	cmp.w	sl, #0
   1743e:	d001      	beq.n	17444 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x170>
   17440:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   17444:	4629      	mov	r1, r5
   17446:	aa22      	add	r2, sp, #136	; 0x88
   17448:	a816      	add	r0, sp, #88	; 0x58
   1744a:	f011 f93a 	bl	286c2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
   1744e:	4641      	mov	r1, r8
  const int64_t flatsize =
   17450:	4606      	mov	r6, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   17452:	2200      	movs	r2, #0
   17454:	2300      	movs	r3, #0
  const int64_t flatsize =
   17456:	17c7      	asrs	r7, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
   17458:	42b2      	cmp	r2, r6
   1745a:	eb73 0007 	sbcs.w	r0, r3, r7
   1745e:	f280 80b6 	bge.w	175ce <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x2fa>
    output_data[i] = F(input1_data[i], input2_data[i]);
   17462:	ecb1 7a01 	vldmia	r1!, {s14}
   17466:	ecf4 7a01 	vldmia	r4!, {s15}
  return lhs == rhs;
   1746a:	eeb4 7a67 	vcmp.f32	s14, s15
   1746e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17472:	bf0c      	ite	eq
   17474:	f04f 0c01 	moveq.w	ip, #1
   17478:	f04f 0c00 	movne.w	ip, #0
    output_data[i] = F(input1_data[i], input2_data[i]);
   1747c:	eb0a 0002 	add.w	r0, sl, r2
  for (int64_t i = 0; i < flatsize; ++i) {
   17480:	3201      	adds	r2, #1
  return lhs == rhs;
   17482:	f880 c000 	strb.w	ip, [r0]
  for (int64_t i = 0; i < flatsize; ++i) {
   17486:	f143 0300 	adc.w	r3, r3, #0
   1748a:	e7e5      	b.n	17458 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x184>
      TF_LITE_COMPARISON(int32_t, Equal, requires_broadcast);
   1748c:	4631      	mov	r1, r6
   1748e:	ad1c      	add	r5, sp, #112	; 0x70
   17490:	b1e7      	cbz	r7, 174cc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x1f8>
   17492:	a810      	add	r0, sp, #64	; 0x40
   17494:	f010 f8d2 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17498:	4621      	mov	r1, r4
   1749a:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1749c:	6876      	ldr	r6, [r6, #4]
   1749e:	f010 f8cd 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   174a2:	b104      	cbz	r4, 174a6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x1d2>
   174a4:	6864      	ldr	r4, [r4, #4]
   174a6:	4651      	mov	r1, sl
   174a8:	4628      	mov	r0, r5
   174aa:	f010 f8c7 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   174ae:	f1ba 0f00 	cmp.w	sl, #0
   174b2:	d001      	beq.n	174b8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x1e4>
   174b4:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Equal);
   174b8:	4632      	mov	r2, r6
   174ba:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   174be:	9400      	str	r4, [sp, #0]
   174c0:	ab16      	add	r3, sp, #88	; 0x58
   174c2:	a910      	add	r1, sp, #64	; 0x40
   174c4:	a822      	add	r0, sp, #136	; 0x88
   174c6:	f011 fc21 	bl	28d0c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   174ca:	e74f      	b.n	1736c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
   174cc:	a816      	add	r0, sp, #88	; 0x58
   174ce:	f010 f8b5 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   174d2:	4621      	mov	r1, r4
   174d4:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   174d6:	6876      	ldr	r6, [r6, #4]
   174d8:	f010 f8b0 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   174dc:	b104      	cbz	r4, 174e0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x20c>
   174de:	6864      	ldr	r4, [r4, #4]
   174e0:	4651      	mov	r1, sl
   174e2:	a822      	add	r0, sp, #136	; 0x88
   174e4:	f010 f8aa 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   174e8:	f1ba 0f00 	cmp.w	sl, #0
   174ec:	d001      	beq.n	174f2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x21e>
   174ee:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   174f2:	aa22      	add	r2, sp, #136	; 0x88
   174f4:	4629      	mov	r1, r5
   174f6:	a816      	add	r0, sp, #88	; 0x58
   174f8:	f011 f8e3 	bl	286c2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   174fc:	2200      	movs	r2, #0
  const int64_t flatsize =
   174fe:	4680      	mov	r8, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   17500:	2300      	movs	r3, #0
  const int64_t flatsize =
   17502:	ea4f 79e0 	mov.w	r9, r0, asr #31
  for (int64_t i = 0; i < flatsize; ++i) {
   17506:	4542      	cmp	r2, r8
   17508:	eb73 0109 	sbcs.w	r1, r3, r9
   1750c:	da5f      	bge.n	175ce <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x2fa>
  return lhs == rhs;
   1750e:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
   17512:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
   17516:	1a08      	subs	r0, r1, r0
   17518:	4241      	negs	r1, r0
   1751a:	4141      	adcs	r1, r0
   1751c:	f80a 1002 	strb.w	r1, [sl, r2]
  for (int64_t i = 0; i < flatsize; ++i) {
   17520:	3201      	adds	r2, #1
   17522:	f143 0300 	adc.w	r3, r3, #0
   17526:	e7ee      	b.n	17506 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x232>
      TF_LITE_COMPARISON(int64_t, Equal, requires_broadcast);
   17528:	4631      	mov	r1, r6
   1752a:	ad1c      	add	r5, sp, #112	; 0x70
   1752c:	b1e7      	cbz	r7, 17568 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x294>
   1752e:	a810      	add	r0, sp, #64	; 0x40
   17530:	f010 f884 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17534:	4621      	mov	r1, r4
   17536:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17538:	6876      	ldr	r6, [r6, #4]
   1753a:	f010 f87f 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1753e:	b104      	cbz	r4, 17542 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x26e>
   17540:	6864      	ldr	r4, [r4, #4]
   17542:	4651      	mov	r1, sl
   17544:	4628      	mov	r0, r5
   17546:	f010 f879 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1754a:	f1ba 0f00 	cmp.w	sl, #0
   1754e:	d001      	beq.n	17554 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x280>
   17550:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Equal);
   17554:	4632      	mov	r2, r6
   17556:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   1755a:	9400      	str	r4, [sp, #0]
   1755c:	ab16      	add	r3, sp, #88	; 0x58
   1755e:	a910      	add	r1, sp, #64	; 0x40
   17560:	a822      	add	r0, sp, #136	; 0x88
   17562:	f011 fc27 	bl	28db4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_7EqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   17566:	e701      	b.n	1736c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
   17568:	a816      	add	r0, sp, #88	; 0x58
   1756a:	f010 f867 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1756e:	4621      	mov	r1, r4
   17570:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17572:	6876      	ldr	r6, [r6, #4]
   17574:	f010 f862 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17578:	b104      	cbz	r4, 1757c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x2a8>
   1757a:	6864      	ldr	r4, [r4, #4]
   1757c:	4651      	mov	r1, sl
   1757e:	a822      	add	r0, sp, #136	; 0x88
   17580:	f010 f85c 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   17584:	f1ba 0f00 	cmp.w	sl, #0
   17588:	d001      	beq.n	1758e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x2ba>
   1758a:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   1758e:	4629      	mov	r1, r5
   17590:	aa22      	add	r2, sp, #136	; 0x88
   17592:	a816      	add	r0, sp, #88	; 0x58
   17594:	f011 f895 	bl	286c2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   17598:	2200      	movs	r2, #0
   1759a:	2300      	movs	r3, #0
  const int64_t flatsize =
   1759c:	17c1      	asrs	r1, r0, #31
   1759e:	f1a6 0c08 	sub.w	ip, r6, #8
   175a2:	3c08      	subs	r4, #8
  for (int64_t i = 0; i < flatsize; ++i) {
   175a4:	4282      	cmp	r2, r0
   175a6:	eb73 0601 	sbcs.w	r6, r3, r1
   175aa:	da10      	bge.n	175ce <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x2fa>
  return lhs == rhs;
   175ac:	e9f4 6702 	ldrd	r6, r7, [r4, #8]!
   175b0:	e9fc 8902 	ldrd	r8, r9, [ip, #8]!
   175b4:	45b9      	cmp	r9, r7
   175b6:	bf06      	itte	eq
   175b8:	45b0      	cmpeq	r8, r6
   175ba:	2601      	moveq	r6, #1
   175bc:	2600      	movne	r6, #0
    output_data[i] = F(input1_data[i], input2_data[i]);
   175be:	eb0a 0e02 	add.w	lr, sl, r2
  for (int64_t i = 0; i < flatsize; ++i) {
   175c2:	3201      	adds	r2, #1
  return lhs == rhs;
   175c4:	f88e 6000 	strb.w	r6, [lr]
  for (int64_t i = 0; i < flatsize; ++i) {
   175c8:	f143 0300 	adc.w	r3, r3, #0
   175cc:	e7ea      	b.n	175a4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x2d0>
   175ce:	a822      	add	r0, sp, #136	; 0x88
   175d0:	f00f ffef 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   175d4:	4628      	mov	r0, r5
   175d6:	f00f ffec 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   175da:	a816      	add	r0, sp, #88	; 0x58
TF_LITE_QUANTIZE_COMPARISON(Equal);
   175dc:	f00f ffe9 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   175e0:	2000      	movs	r0, #0
}
   175e2:	b02b      	add	sp, #172	; 0xac
   175e4:	ecbd 8b02 	vpop	{d8}
   175e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
TF_LITE_QUANTIZE_COMPARISON(Equal);
   175ec:	6933      	ldr	r3, [r6, #16]
   175ee:	68f0      	ldr	r0, [r6, #12]
   175f0:	f1c3 0800 	rsb	r8, r3, #0
   175f4:	f7f4 ff88 	bl	c508 <__aeabi_f2d>
   175f8:	ab0d      	add	r3, sp, #52	; 0x34
   175fa:	aa0c      	add	r2, sp, #48	; 0x30
   175fc:	6925      	ldr	r5, [r4, #16]
   175fe:	f009 fcdb 	bl	20fb8 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   17602:	68e0      	ldr	r0, [r4, #12]
   17604:	f7f4 ff80 	bl	c508 <__aeabi_f2d>
   17608:	ab0f      	add	r3, sp, #60	; 0x3c
   1760a:	aa0e      	add	r2, sp, #56	; 0x38
   1760c:	f009 fcd4 	bl	20fb8 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   17610:	2308      	movs	r3, #8
   17612:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
   17616:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   17618:	426d      	negs	r5, r5
   1761a:	9324      	str	r3, [sp, #144]	; 0x90
   1761c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1761e:	4631      	mov	r1, r6
   17620:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
   17624:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   17626:	ad1c      	add	r5, sp, #112	; 0x70
   17628:	9327      	str	r3, [sp, #156]	; 0x9c
   1762a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1762c:	a810      	add	r0, sp, #64	; 0x40
   1762e:	9328      	str	r3, [sp, #160]	; 0xa0
   17630:	b1df      	cbz	r7, 1766a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x396>
   17632:	f010 f803 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17636:	6872      	ldr	r2, [r6, #4]
   17638:	4621      	mov	r1, r4
   1763a:	a816      	add	r0, sp, #88	; 0x58
   1763c:	9204      	str	r2, [sp, #16]
   1763e:	f00f fffd 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17642:	4651      	mov	r1, sl
   17644:	4628      	mov	r0, r5
   17646:	6864      	ldr	r4, [r4, #4]
   17648:	f00f fff8 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1764c:	9a04      	ldr	r2, [sp, #16]
   1764e:	f1ba 0f00 	cmp.w	sl, #0
   17652:	d001      	beq.n	17658 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x384>
   17654:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Equal);
   17658:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   1765c:	9400      	str	r4, [sp, #0]
   1765e:	ab16      	add	r3, sp, #88	; 0x58
   17660:	a910      	add	r1, sp, #64	; 0x40
   17662:	a822      	add	r0, sp, #136	; 0x88
   17664:	f011 ffcc 	bl	29600 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   17668:	e680      	b.n	1736c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
   1766a:	f00f ffe7 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1766e:	6873      	ldr	r3, [r6, #4]
   17670:	4621      	mov	r1, r4
   17672:	a816      	add	r0, sp, #88	; 0x58
   17674:	9304      	str	r3, [sp, #16]
   17676:	f00f ffe1 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1767a:	6863      	ldr	r3, [r4, #4]
   1767c:	4651      	mov	r1, sl
   1767e:	4628      	mov	r0, r5
   17680:	9305      	str	r3, [sp, #20]
   17682:	f00f ffdb 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   17686:	f1ba 0f00 	cmp.w	sl, #0
   1768a:	d001      	beq.n	17690 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x3bc>
   1768c:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
   17690:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
   17694:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   17696:	9b24      	ldr	r3, [sp, #144]	; 0x90
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   17698:	aa1c      	add	r2, sp, #112	; 0x70
   1769a:	a916      	add	r1, sp, #88	; 0x58
   1769c:	a810      	add	r0, sp, #64	; 0x40
  int32 input1_multiplier = op_params.input1_multiplier;
   1769e:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
   176a2:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
  int input2_shift = op_params.input2_shift;
   176a6:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  int32 input2_offset = op_params.input2_offset;
   176aa:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   176ac:	f011 f809 	bl	286c2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
   176b0:	4602      	mov	r2, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   176b2:	f04f 0800 	mov.w	r8, #0
   176b6:	f04f 0900 	mov.w	r9, #0
  const int64_t flatsize =
   176ba:	17c3      	asrs	r3, r0, #31
   176bc:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
   176c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   176c4:	4590      	cmp	r8, r2
   176c6:	eb79 0303 	sbcs.w	r3, r9, r3
   176ca:	f280 80ba 	bge.w	17842 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x56e>
    const int32 input2_val = input2_offset + input2_data[i];
   176ce:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
   176d0:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
   176d2:	f812 5008 	ldrb.w	r5, [r2, r8]
   176d6:	9a07      	ldr	r2, [sp, #28]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   176d8:	ee18 1a10 	vmov	r1, s16
    const int32 input2_val = input2_offset + input2_data[i];
   176dc:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
   176de:	9a04      	ldr	r2, [sp, #16]
   176e0:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   176e4:	f812 0008 	ldrb.w	r0, [r2, r8]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   176e8:	465a      	mov	r2, fp
    const int32 input1_val = input1_offset + input1_data[i];
   176ea:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   176ec:	40b0      	lsls	r0, r6
   176ee:	f7ff fa79 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   176f2:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   176f4:	4622      	mov	r2, r4
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   176f6:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   176f8:	4639      	mov	r1, r7
   176fa:	4628      	mov	r0, r5
   176fc:	f7ff fa72 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs == rhs;
   17700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17702:	1a1a      	subs	r2, r3, r0
   17704:	4250      	negs	r0, r2
   17706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17708:	4150      	adcs	r0, r2
  for (int64_t i = 0; i < flatsize; ++i) {
   1770a:	f118 0801 	adds.w	r8, r8, #1
  return lhs == rhs;
   1770e:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   17712:	f149 0900 	adc.w	r9, r9, #0
   17716:	e7d3      	b.n	176c0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x3ec>
   17718:	6933      	ldr	r3, [r6, #16]
   1771a:	68f0      	ldr	r0, [r6, #12]
   1771c:	f1c3 0800 	rsb	r8, r3, #0
   17720:	f7f4 fef2 	bl	c508 <__aeabi_f2d>
   17724:	ab0d      	add	r3, sp, #52	; 0x34
   17726:	aa0c      	add	r2, sp, #48	; 0x30
   17728:	6925      	ldr	r5, [r4, #16]
   1772a:	f009 fc45 	bl	20fb8 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   1772e:	68e0      	ldr	r0, [r4, #12]
   17730:	f7f4 feea 	bl	c508 <__aeabi_f2d>
   17734:	ab0f      	add	r3, sp, #60	; 0x3c
   17736:	aa0e      	add	r2, sp, #56	; 0x38
   17738:	f009 fc3e 	bl	20fb8 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   1773c:	2308      	movs	r3, #8
   1773e:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
   17742:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   17744:	426d      	negs	r5, r5
   17746:	9324      	str	r3, [sp, #144]	; 0x90
   17748:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1774a:	4631      	mov	r1, r6
   1774c:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
   17750:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   17752:	ad1c      	add	r5, sp, #112	; 0x70
   17754:	9327      	str	r3, [sp, #156]	; 0x9c
   17756:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   17758:	a810      	add	r0, sp, #64	; 0x40
   1775a:	9328      	str	r3, [sp, #160]	; 0xa0
   1775c:	b1df      	cbz	r7, 17796 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x4c2>
   1775e:	f00f ff6d 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17762:	6872      	ldr	r2, [r6, #4]
   17764:	4621      	mov	r1, r4
   17766:	a816      	add	r0, sp, #88	; 0x58
   17768:	9204      	str	r2, [sp, #16]
   1776a:	f00f ff67 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1776e:	4651      	mov	r1, sl
   17770:	4628      	mov	r0, r5
   17772:	6864      	ldr	r4, [r4, #4]
   17774:	f00f ff62 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   17778:	9a04      	ldr	r2, [sp, #16]
   1777a:	f1ba 0f00 	cmp.w	sl, #0
   1777e:	d001      	beq.n	17784 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x4b0>
   17780:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Equal);
   17784:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   17788:	9400      	str	r4, [sp, #0]
   1778a:	ab16      	add	r3, sp, #88	; 0x58
   1778c:	a910      	add	r1, sp, #64	; 0x40
   1778e:	a822      	add	r0, sp, #136	; 0x88
   17790:	f011 ffc2 	bl	29718 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   17794:	e5ea      	b.n	1736c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
   17796:	f00f ff51 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1779a:	6873      	ldr	r3, [r6, #4]
   1779c:	4621      	mov	r1, r4
   1779e:	a816      	add	r0, sp, #88	; 0x58
   177a0:	9304      	str	r3, [sp, #16]
   177a2:	f00f ff4b 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   177a6:	6863      	ldr	r3, [r4, #4]
   177a8:	4651      	mov	r1, sl
   177aa:	4628      	mov	r0, r5
   177ac:	9305      	str	r3, [sp, #20]
   177ae:	f00f ff45 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   177b2:	f1ba 0f00 	cmp.w	sl, #0
   177b6:	d001      	beq.n	177bc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x4e8>
   177b8:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
   177bc:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
   177c0:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   177c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   177c4:	aa1c      	add	r2, sp, #112	; 0x70
   177c6:	a916      	add	r1, sp, #88	; 0x58
   177c8:	a810      	add	r0, sp, #64	; 0x40
  int32 input1_multiplier = op_params.input1_multiplier;
   177ca:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
   177ce:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
  int input2_shift = op_params.input2_shift;
   177d2:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  int32 input2_offset = op_params.input2_offset;
   177d6:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   177d8:	f010 ff73 	bl	286c2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
   177dc:	4602      	mov	r2, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   177de:	f04f 0800 	mov.w	r8, #0
   177e2:	f04f 0900 	mov.w	r9, #0
  const int64_t flatsize =
   177e6:	17c3      	asrs	r3, r0, #31
   177e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
   177ec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   177f0:	4590      	cmp	r8, r2
   177f2:	eb79 0303 	sbcs.w	r3, r9, r3
   177f6:	da24      	bge.n	17842 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x56e>
    const int32 input2_val = input2_offset + input2_data[i];
   177f8:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
   177fa:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
   177fc:	f912 5008 	ldrsb.w	r5, [r2, r8]
   17800:	9a07      	ldr	r2, [sp, #28]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17802:	ee18 1a10 	vmov	r1, s16
    const int32 input2_val = input2_offset + input2_data[i];
   17806:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
   17808:	9a04      	ldr	r2, [sp, #16]
   1780a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   1780e:	f912 0008 	ldrsb.w	r0, [r2, r8]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17812:	465a      	mov	r2, fp
    const int32 input1_val = input1_offset + input1_data[i];
   17814:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17816:	40b0      	lsls	r0, r6
   17818:	f7ff f9e4 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   1781c:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1781e:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17820:	4622      	mov	r2, r4
   17822:	4639      	mov	r1, r7
   17824:	4628      	mov	r0, r5
   17826:	f7ff f9dd 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs == rhs;
   1782a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1782c:	1a1b      	subs	r3, r3, r0
   1782e:	4258      	negs	r0, r3
   17830:	4158      	adcs	r0, r3
   17832:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  for (int64_t i = 0; i < flatsize; ++i) {
   17834:	f118 0801 	adds.w	r8, r8, #1
  return lhs == rhs;
   17838:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   1783c:	f149 0900 	adc.w	r9, r9, #0
   17840:	e7d4      	b.n	177ec <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x518>
   17842:	a81c      	add	r0, sp, #112	; 0x70
   17844:	e593      	b.n	1736e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x9a>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   17846:	696c      	ldr	r4, [r5, #20]
   17848:	f7f5 fa3c 	bl	ccc4 <TfLiteTypeGetName>
   1784c:	f818 3009 	ldrb.w	r3, [r8, r9]
   17850:	4602      	mov	r2, r0
   17852:	4902      	ldr	r1, [pc, #8]	; (1785c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x588>)
   17854:	4628      	mov	r0, r5
   17856:	47a0      	blx	r4
      return kTfLiteError;
   17858:	2001      	movs	r0, #1
   1785a:	e6c2      	b.n	175e2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x30e>
   1785c:	000349d0 	.word	0x000349d0

00017860 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus NotEqualEval(TfLiteContext* context, TfLiteNode* node) {
   17860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17864:	ed2d 8b02 	vpush	{d8}
  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
   17868:	680b      	ldr	r3, [r1, #0]
   1786a:	f8d0 8008 	ldr.w	r8, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
   1786e:	685e      	ldr	r6, [r3, #4]
   17870:	689c      	ldr	r4, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
   17872:	684b      	ldr	r3, [r1, #4]
  return &context->tensors[node->inputs->data[index]];
   17874:	ea4f 1986 	mov.w	r9, r6, lsl #6
  return &context->tensors[node->outputs->data[index]];
   17878:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->inputs->data[index]];
   1787a:	eb08 1686 	add.w	r6, r8, r6, lsl #6
   1787e:	eb08 1484 	add.w	r4, r8, r4, lsl #6
TfLiteStatus NotEqualEval(TfLiteContext* context, TfLiteNode* node) {
   17882:	4605      	mov	r5, r0
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   17884:	4621      	mov	r1, r4
   17886:	4630      	mov	r0, r6
TfLiteStatus NotEqualEval(TfLiteContext* context, TfLiteNode* node) {
   17888:	b0ab      	sub	sp, #172	; 0xac
  return &context->tensors[node->outputs->data[index]];
   1788a:	eb08 1a83 	add.w	sl, r8, r3, lsl #6
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   1788e:	f018 fc38 	bl	30102 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
   17892:	f080 0001 	eor.w	r0, r0, #1
   17896:	b2c7      	uxtb	r7, r0
  switch (input1->type) {
   17898:	f818 0009 	ldrb.w	r0, [r8, r9]
   1789c:	1e43      	subs	r3, r0, #1
   1789e:	2b08      	cmp	r3, #8
   178a0:	f200 8293 	bhi.w	17dca <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x56a>
   178a4:	e8df f013 	tbh	[pc, r3, lsl #1]
   178a8:	00b4005c 	.word	0x00b4005c
   178ac:	01020164 	.word	0x01020164
   178b0:	00090291 	.word	0x00090291
   178b4:	02910291 	.word	0x02910291
   178b8:	01fa      	.short	0x01fa
      TF_LITE_COMPARISON(bool, NotEqual, requires_broadcast);
   178ba:	4631      	mov	r1, r6
   178bc:	ad1c      	add	r5, sp, #112	; 0x70
   178be:	b31f      	cbz	r7, 17908 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0xa8>
   178c0:	a810      	add	r0, sp, #64	; 0x40
   178c2:	f00f febb 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   178c6:	4621      	mov	r1, r4
   178c8:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   178ca:	6876      	ldr	r6, [r6, #4]
   178cc:	f00f feb6 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   178d0:	b104      	cbz	r4, 178d4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x74>
   178d2:	6864      	ldr	r4, [r4, #4]
   178d4:	4651      	mov	r1, sl
   178d6:	4628      	mov	r0, r5
   178d8:	f00f feb0 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   178dc:	f1ba 0f00 	cmp.w	sl, #0
   178e0:	d001      	beq.n	178e6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x86>
   178e2:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(NotEqual);
   178e6:	4632      	mov	r2, r6
   178e8:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   178ec:	9400      	str	r4, [sp, #0]
   178ee:	ab16      	add	r3, sp, #88	; 0x58
   178f0:	a910      	add	r1, sp, #64	; 0x40
   178f2:	a822      	add	r0, sp, #136	; 0x88
   178f4:	f011 faba 	bl	28e6c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_10NotEqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
TF_LITE_QUANTIZE_COMPARISON(NotEqual);
   178f8:	4628      	mov	r0, r5
   178fa:	f00f fe5a 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   178fe:	a816      	add	r0, sp, #88	; 0x58
   17900:	f00f fe57 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   17904:	a810      	add	r0, sp, #64	; 0x40
   17906:	e12b      	b.n	17b60 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x300>
      TF_LITE_COMPARISON(bool, NotEqual, requires_broadcast);
   17908:	a816      	add	r0, sp, #88	; 0x58
   1790a:	f00f fe97 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1790e:	4621      	mov	r1, r4
   17910:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17912:	6876      	ldr	r6, [r6, #4]
   17914:	f00f fe92 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17918:	b104      	cbz	r4, 1791c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0xbc>
   1791a:	6864      	ldr	r4, [r4, #4]
   1791c:	4651      	mov	r1, sl
   1791e:	a822      	add	r0, sp, #136	; 0x88
   17920:	f00f fe8c 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   17924:	f1ba 0f00 	cmp.w	sl, #0
   17928:	d001      	beq.n	1792e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0xce>
   1792a:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   1792e:	4629      	mov	r1, r5
   17930:	aa22      	add	r2, sp, #136	; 0x88
   17932:	a816      	add	r0, sp, #88	; 0x58
   17934:	f010 fec5 	bl	286c2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   17938:	2200      	movs	r2, #0
   1793a:	2300      	movs	r3, #0
  const int64_t flatsize =
   1793c:	17c1      	asrs	r1, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
   1793e:	4282      	cmp	r2, r0
   17940:	eb73 0701 	sbcs.w	r7, r3, r1
   17944:	f280 8105 	bge.w	17b52 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x2f2>
  return lhs != rhs;
   17948:	f816 c002 	ldrb.w	ip, [r6, r2]
   1794c:	f814 e002 	ldrb.w	lr, [r4, r2]
   17950:	ea8c 0c0e 	eor.w	ip, ip, lr
    output_data[i] = F(input1_data[i], input2_data[i]);
   17954:	f80a c002 	strb.w	ip, [sl, r2]
  for (int64_t i = 0; i < flatsize; ++i) {
   17958:	3201      	adds	r2, #1
   1795a:	f143 0300 	adc.w	r3, r3, #0
   1795e:	e7ee      	b.n	1793e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0xde>
      TF_LITE_COMPARISON(float, NotEqual, requires_broadcast);
   17960:	4631      	mov	r1, r6
   17962:	ad1c      	add	r5, sp, #112	; 0x70
   17964:	b1e7      	cbz	r7, 179a0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x140>
   17966:	a810      	add	r0, sp, #64	; 0x40
   17968:	f00f fe68 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1796c:	4621      	mov	r1, r4
   1796e:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17970:	6876      	ldr	r6, [r6, #4]
   17972:	f00f fe63 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17976:	b104      	cbz	r4, 1797a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x11a>
   17978:	6864      	ldr	r4, [r4, #4]
   1797a:	4651      	mov	r1, sl
   1797c:	4628      	mov	r0, r5
   1797e:	f00f fe5d 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   17982:	f1ba 0f00 	cmp.w	sl, #0
   17986:	d001      	beq.n	1798c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x12c>
   17988:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(NotEqual);
   1798c:	4632      	mov	r2, r6
   1798e:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   17992:	9400      	str	r4, [sp, #0]
   17994:	ab16      	add	r3, sp, #88	; 0x58
   17996:	a910      	add	r1, sp, #64	; 0x40
   17998:	a822      	add	r0, sp, #136	; 0x88
   1799a:	f010 ff97 	bl	288cc <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_10NotEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   1799e:	e7ab      	b.n	178f8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
   179a0:	a816      	add	r0, sp, #88	; 0x58
   179a2:	f00f fe4b 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   179a6:	4621      	mov	r1, r4
   179a8:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   179aa:	f8d6 8004 	ldr.w	r8, [r6, #4]
   179ae:	f00f fe45 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   179b2:	b104      	cbz	r4, 179b6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x156>
   179b4:	6864      	ldr	r4, [r4, #4]
   179b6:	4651      	mov	r1, sl
   179b8:	a822      	add	r0, sp, #136	; 0x88
   179ba:	f00f fe3f 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   179be:	f1ba 0f00 	cmp.w	sl, #0
   179c2:	d001      	beq.n	179c8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x168>
   179c4:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   179c8:	4629      	mov	r1, r5
   179ca:	aa22      	add	r2, sp, #136	; 0x88
   179cc:	a816      	add	r0, sp, #88	; 0x58
   179ce:	f010 fe78 	bl	286c2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
   179d2:	4641      	mov	r1, r8
  const int64_t flatsize =
   179d4:	4606      	mov	r6, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   179d6:	2200      	movs	r2, #0
   179d8:	2300      	movs	r3, #0
  const int64_t flatsize =
   179da:	17c7      	asrs	r7, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
   179dc:	42b2      	cmp	r2, r6
   179de:	eb73 0007 	sbcs.w	r0, r3, r7
   179e2:	f280 80b6 	bge.w	17b52 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x2f2>
    output_data[i] = F(input1_data[i], input2_data[i]);
   179e6:	ecb1 7a01 	vldmia	r1!, {s14}
   179ea:	ecf4 7a01 	vldmia	r4!, {s15}
  return lhs != rhs;
   179ee:	eeb4 7a67 	vcmp.f32	s14, s15
   179f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   179f6:	bf14      	ite	ne
   179f8:	f04f 0c01 	movne.w	ip, #1
   179fc:	f04f 0c00 	moveq.w	ip, #0
    output_data[i] = F(input1_data[i], input2_data[i]);
   17a00:	eb0a 0002 	add.w	r0, sl, r2
  for (int64_t i = 0; i < flatsize; ++i) {
   17a04:	3201      	adds	r2, #1
  return lhs != rhs;
   17a06:	f880 c000 	strb.w	ip, [r0]
  for (int64_t i = 0; i < flatsize; ++i) {
   17a0a:	f143 0300 	adc.w	r3, r3, #0
   17a0e:	e7e5      	b.n	179dc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x17c>
      TF_LITE_COMPARISON(int32_t, NotEqual, requires_broadcast);
   17a10:	4631      	mov	r1, r6
   17a12:	ad1c      	add	r5, sp, #112	; 0x70
   17a14:	b1e7      	cbz	r7, 17a50 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x1f0>
   17a16:	a810      	add	r0, sp, #64	; 0x40
   17a18:	f00f fe10 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17a1c:	4621      	mov	r1, r4
   17a1e:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17a20:	6876      	ldr	r6, [r6, #4]
   17a22:	f00f fe0b 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17a26:	b104      	cbz	r4, 17a2a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x1ca>
   17a28:	6864      	ldr	r4, [r4, #4]
   17a2a:	4651      	mov	r1, sl
   17a2c:	4628      	mov	r0, r5
   17a2e:	f00f fe05 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   17a32:	f1ba 0f00 	cmp.w	sl, #0
   17a36:	d001      	beq.n	17a3c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x1dc>
   17a38:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(NotEqual);
   17a3c:	4632      	mov	r2, r6
   17a3e:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   17a42:	9400      	str	r4, [sp, #0]
   17a44:	ab16      	add	r3, sp, #88	; 0x58
   17a46:	a910      	add	r1, sp, #64	; 0x40
   17a48:	a822      	add	r0, sp, #136	; 0x88
   17a4a:	f011 fa61 	bl	28f10 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   17a4e:	e753      	b.n	178f8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
   17a50:	a816      	add	r0, sp, #88	; 0x58
   17a52:	f00f fdf3 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17a56:	4621      	mov	r1, r4
   17a58:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17a5a:	6876      	ldr	r6, [r6, #4]
   17a5c:	f00f fdee 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17a60:	b104      	cbz	r4, 17a64 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x204>
   17a62:	6864      	ldr	r4, [r4, #4]
   17a64:	4651      	mov	r1, sl
   17a66:	a822      	add	r0, sp, #136	; 0x88
   17a68:	f00f fde8 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   17a6c:	f1ba 0f00 	cmp.w	sl, #0
   17a70:	d001      	beq.n	17a76 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x216>
   17a72:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   17a76:	aa22      	add	r2, sp, #136	; 0x88
   17a78:	4629      	mov	r1, r5
   17a7a:	a816      	add	r0, sp, #88	; 0x58
   17a7c:	f010 fe21 	bl	286c2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   17a80:	2200      	movs	r2, #0
  const int64_t flatsize =
   17a82:	4680      	mov	r8, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   17a84:	2300      	movs	r3, #0
  const int64_t flatsize =
   17a86:	ea4f 79e0 	mov.w	r9, r0, asr #31
  for (int64_t i = 0; i < flatsize; ++i) {
   17a8a:	4542      	cmp	r2, r8
   17a8c:	eb73 0109 	sbcs.w	r1, r3, r9
   17a90:	da5f      	bge.n	17b52 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x2f2>
  return lhs != rhs;
   17a92:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
   17a96:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
   17a9a:	1a09      	subs	r1, r1, r0
   17a9c:	bf18      	it	ne
   17a9e:	2101      	movne	r1, #1
   17aa0:	f80a 1002 	strb.w	r1, [sl, r2]
  for (int64_t i = 0; i < flatsize; ++i) {
   17aa4:	3201      	adds	r2, #1
   17aa6:	f143 0300 	adc.w	r3, r3, #0
   17aaa:	e7ee      	b.n	17a8a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x22a>
      TF_LITE_COMPARISON(int64_t, NotEqual, requires_broadcast);
   17aac:	4631      	mov	r1, r6
   17aae:	ad1c      	add	r5, sp, #112	; 0x70
   17ab0:	b1e7      	cbz	r7, 17aec <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x28c>
   17ab2:	a810      	add	r0, sp, #64	; 0x40
   17ab4:	f00f fdc2 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17ab8:	4621      	mov	r1, r4
   17aba:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17abc:	6876      	ldr	r6, [r6, #4]
   17abe:	f00f fdbd 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17ac2:	b104      	cbz	r4, 17ac6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x266>
   17ac4:	6864      	ldr	r4, [r4, #4]
   17ac6:	4651      	mov	r1, sl
   17ac8:	4628      	mov	r0, r5
   17aca:	f00f fdb7 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   17ace:	f1ba 0f00 	cmp.w	sl, #0
   17ad2:	d001      	beq.n	17ad8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x278>
   17ad4:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(NotEqual);
   17ad8:	4632      	mov	r2, r6
   17ada:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   17ade:	9400      	str	r4, [sp, #0]
   17ae0:	ab16      	add	r3, sp, #88	; 0x58
   17ae2:	a910      	add	r1, sp, #64	; 0x40
   17ae4:	a822      	add	r0, sp, #136	; 0x88
   17ae6:	f011 fa67 	bl	28fb8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_10NotEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   17aea:	e705      	b.n	178f8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
   17aec:	a816      	add	r0, sp, #88	; 0x58
   17aee:	f00f fda5 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17af2:	4621      	mov	r1, r4
   17af4:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17af6:	6876      	ldr	r6, [r6, #4]
   17af8:	f00f fda0 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17afc:	b104      	cbz	r4, 17b00 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x2a0>
   17afe:	6864      	ldr	r4, [r4, #4]
   17b00:	4651      	mov	r1, sl
   17b02:	a822      	add	r0, sp, #136	; 0x88
   17b04:	f00f fd9a 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   17b08:	f1ba 0f00 	cmp.w	sl, #0
   17b0c:	d001      	beq.n	17b12 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x2b2>
   17b0e:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   17b12:	4629      	mov	r1, r5
   17b14:	aa22      	add	r2, sp, #136	; 0x88
   17b16:	a816      	add	r0, sp, #88	; 0x58
   17b18:	f010 fdd3 	bl	286c2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   17b1c:	2200      	movs	r2, #0
   17b1e:	2300      	movs	r3, #0
  const int64_t flatsize =
   17b20:	17c1      	asrs	r1, r0, #31
   17b22:	f1a6 0c08 	sub.w	ip, r6, #8
   17b26:	3c08      	subs	r4, #8
  for (int64_t i = 0; i < flatsize; ++i) {
   17b28:	4282      	cmp	r2, r0
   17b2a:	eb73 0601 	sbcs.w	r6, r3, r1
   17b2e:	da10      	bge.n	17b52 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x2f2>
  return lhs != rhs;
   17b30:	e9f4 6702 	ldrd	r6, r7, [r4, #8]!
   17b34:	e9fc 8902 	ldrd	r8, r9, [ip, #8]!
   17b38:	45b9      	cmp	r9, r7
   17b3a:	bf0a      	itet	eq
   17b3c:	45b0      	cmpeq	r8, r6
   17b3e:	2601      	movne	r6, #1
   17b40:	2600      	moveq	r6, #0
    output_data[i] = F(input1_data[i], input2_data[i]);
   17b42:	eb0a 0e02 	add.w	lr, sl, r2
  for (int64_t i = 0; i < flatsize; ++i) {
   17b46:	3201      	adds	r2, #1
  return lhs != rhs;
   17b48:	f88e 6000 	strb.w	r6, [lr]
  for (int64_t i = 0; i < flatsize; ++i) {
   17b4c:	f143 0300 	adc.w	r3, r3, #0
   17b50:	e7ea      	b.n	17b28 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x2c8>
   17b52:	a822      	add	r0, sp, #136	; 0x88
   17b54:	f00f fd2d 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   17b58:	4628      	mov	r0, r5
   17b5a:	f00f fd2a 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   17b5e:	a816      	add	r0, sp, #88	; 0x58
TF_LITE_QUANTIZE_COMPARISON(NotEqual);
   17b60:	f00f fd27 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   17b64:	2000      	movs	r0, #0
}
   17b66:	b02b      	add	sp, #172	; 0xac
   17b68:	ecbd 8b02 	vpop	{d8}
   17b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
TF_LITE_QUANTIZE_COMPARISON(NotEqual);
   17b70:	6933      	ldr	r3, [r6, #16]
   17b72:	68f0      	ldr	r0, [r6, #12]
   17b74:	f1c3 0800 	rsb	r8, r3, #0
   17b78:	f7f4 fcc6 	bl	c508 <__aeabi_f2d>
   17b7c:	ab0d      	add	r3, sp, #52	; 0x34
   17b7e:	aa0c      	add	r2, sp, #48	; 0x30
   17b80:	6925      	ldr	r5, [r4, #16]
   17b82:	f009 fa19 	bl	20fb8 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   17b86:	68e0      	ldr	r0, [r4, #12]
   17b88:	f7f4 fcbe 	bl	c508 <__aeabi_f2d>
   17b8c:	ab0f      	add	r3, sp, #60	; 0x3c
   17b8e:	aa0e      	add	r2, sp, #56	; 0x38
   17b90:	f009 fa12 	bl	20fb8 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   17b94:	2308      	movs	r3, #8
   17b96:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
   17b9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   17b9c:	426d      	negs	r5, r5
   17b9e:	9324      	str	r3, [sp, #144]	; 0x90
   17ba0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   17ba2:	4631      	mov	r1, r6
   17ba4:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
   17ba8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   17baa:	ad1c      	add	r5, sp, #112	; 0x70
   17bac:	9327      	str	r3, [sp, #156]	; 0x9c
   17bae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   17bb0:	a810      	add	r0, sp, #64	; 0x40
   17bb2:	9328      	str	r3, [sp, #160]	; 0xa0
   17bb4:	b1df      	cbz	r7, 17bee <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x38e>
   17bb6:	f00f fd41 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17bba:	6872      	ldr	r2, [r6, #4]
   17bbc:	4621      	mov	r1, r4
   17bbe:	a816      	add	r0, sp, #88	; 0x58
   17bc0:	9204      	str	r2, [sp, #16]
   17bc2:	f00f fd3b 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17bc6:	4651      	mov	r1, sl
   17bc8:	4628      	mov	r0, r5
   17bca:	6864      	ldr	r4, [r4, #4]
   17bcc:	f00f fd36 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   17bd0:	9a04      	ldr	r2, [sp, #16]
   17bd2:	f1ba 0f00 	cmp.w	sl, #0
   17bd6:	d001      	beq.n	17bdc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x37c>
   17bd8:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(NotEqual);
   17bdc:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   17be0:	9400      	str	r4, [sp, #0]
   17be2:	ab16      	add	r3, sp, #88	; 0x58
   17be4:	a910      	add	r1, sp, #64	; 0x40
   17be6:	a822      	add	r0, sp, #136	; 0x88
   17be8:	f011 fe22 	bl	29830 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   17bec:	e684      	b.n	178f8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
   17bee:	f00f fd25 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17bf2:	6873      	ldr	r3, [r6, #4]
   17bf4:	4621      	mov	r1, r4
   17bf6:	a816      	add	r0, sp, #88	; 0x58
   17bf8:	9304      	str	r3, [sp, #16]
   17bfa:	f00f fd1f 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17bfe:	6863      	ldr	r3, [r4, #4]
   17c00:	4651      	mov	r1, sl
   17c02:	4628      	mov	r0, r5
   17c04:	9305      	str	r3, [sp, #20]
   17c06:	f00f fd19 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   17c0a:	f1ba 0f00 	cmp.w	sl, #0
   17c0e:	d001      	beq.n	17c14 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x3b4>
   17c10:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
   17c14:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
   17c18:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   17c1a:	9b24      	ldr	r3, [sp, #144]	; 0x90
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   17c1c:	aa1c      	add	r2, sp, #112	; 0x70
   17c1e:	a916      	add	r1, sp, #88	; 0x58
   17c20:	a810      	add	r0, sp, #64	; 0x40
  int32 input1_multiplier = op_params.input1_multiplier;
   17c22:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
   17c26:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
  int input2_shift = op_params.input2_shift;
   17c2a:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  int32 input2_offset = op_params.input2_offset;
   17c2e:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   17c30:	f010 fd47 	bl	286c2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
   17c34:	4602      	mov	r2, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   17c36:	f04f 0800 	mov.w	r8, #0
   17c3a:	f04f 0900 	mov.w	r9, #0
  const int64_t flatsize =
   17c3e:	17c3      	asrs	r3, r0, #31
   17c40:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
   17c44:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   17c48:	4590      	cmp	r8, r2
   17c4a:	eb79 0303 	sbcs.w	r3, r9, r3
   17c4e:	f280 80ba 	bge.w	17dc6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x566>
    const int32 input2_val = input2_offset + input2_data[i];
   17c52:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
   17c54:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
   17c56:	f812 5008 	ldrb.w	r5, [r2, r8]
   17c5a:	9a07      	ldr	r2, [sp, #28]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17c5c:	ee18 1a10 	vmov	r1, s16
    const int32 input2_val = input2_offset + input2_data[i];
   17c60:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
   17c62:	9a04      	ldr	r2, [sp, #16]
   17c64:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   17c68:	f812 0008 	ldrb.w	r0, [r2, r8]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17c6c:	465a      	mov	r2, fp
    const int32 input1_val = input1_offset + input1_data[i];
   17c6e:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17c70:	40b0      	lsls	r0, r6
   17c72:	f7fe ffb7 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   17c76:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17c78:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17c7a:	4622      	mov	r2, r4
   17c7c:	4639      	mov	r1, r7
   17c7e:	4628      	mov	r0, r5
   17c80:	f7fe ffb0 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs != rhs;
   17c84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17c86:	1a18      	subs	r0, r3, r0
   17c88:	bf18      	it	ne
   17c8a:	2001      	movne	r0, #1
   17c8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  for (int64_t i = 0; i < flatsize; ++i) {
   17c8e:	f118 0801 	adds.w	r8, r8, #1
  return lhs != rhs;
   17c92:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   17c96:	f149 0900 	adc.w	r9, r9, #0
   17c9a:	e7d3      	b.n	17c44 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x3e4>
   17c9c:	6933      	ldr	r3, [r6, #16]
   17c9e:	68f0      	ldr	r0, [r6, #12]
   17ca0:	f1c3 0800 	rsb	r8, r3, #0
   17ca4:	f7f4 fc30 	bl	c508 <__aeabi_f2d>
   17ca8:	ab0d      	add	r3, sp, #52	; 0x34
   17caa:	aa0c      	add	r2, sp, #48	; 0x30
   17cac:	6925      	ldr	r5, [r4, #16]
   17cae:	f009 f983 	bl	20fb8 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   17cb2:	68e0      	ldr	r0, [r4, #12]
   17cb4:	f7f4 fc28 	bl	c508 <__aeabi_f2d>
   17cb8:	ab0f      	add	r3, sp, #60	; 0x3c
   17cba:	aa0e      	add	r2, sp, #56	; 0x38
   17cbc:	f009 f97c 	bl	20fb8 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   17cc0:	2308      	movs	r3, #8
   17cc2:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
   17cc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   17cc8:	426d      	negs	r5, r5
   17cca:	9324      	str	r3, [sp, #144]	; 0x90
   17ccc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   17cce:	4631      	mov	r1, r6
   17cd0:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
   17cd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   17cd6:	ad1c      	add	r5, sp, #112	; 0x70
   17cd8:	9327      	str	r3, [sp, #156]	; 0x9c
   17cda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   17cdc:	a810      	add	r0, sp, #64	; 0x40
   17cde:	9328      	str	r3, [sp, #160]	; 0xa0
   17ce0:	b1df      	cbz	r7, 17d1a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x4ba>
   17ce2:	f00f fcab 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17ce6:	6872      	ldr	r2, [r6, #4]
   17ce8:	4621      	mov	r1, r4
   17cea:	a816      	add	r0, sp, #88	; 0x58
   17cec:	9204      	str	r2, [sp, #16]
   17cee:	f00f fca5 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17cf2:	4651      	mov	r1, sl
   17cf4:	4628      	mov	r0, r5
   17cf6:	6864      	ldr	r4, [r4, #4]
   17cf8:	f00f fca0 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   17cfc:	9a04      	ldr	r2, [sp, #16]
   17cfe:	f1ba 0f00 	cmp.w	sl, #0
   17d02:	d001      	beq.n	17d08 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x4a8>
   17d04:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(NotEqual);
   17d08:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   17d0c:	9400      	str	r4, [sp, #0]
   17d0e:	ab16      	add	r3, sp, #88	; 0x58
   17d10:	a910      	add	r1, sp, #64	; 0x40
   17d12:	a822      	add	r0, sp, #136	; 0x88
   17d14:	f011 fe17 	bl	29946 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   17d18:	e5ee      	b.n	178f8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
   17d1a:	f00f fc8f 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17d1e:	6873      	ldr	r3, [r6, #4]
   17d20:	4621      	mov	r1, r4
   17d22:	a816      	add	r0, sp, #88	; 0x58
   17d24:	9304      	str	r3, [sp, #16]
   17d26:	f00f fc89 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17d2a:	6863      	ldr	r3, [r4, #4]
   17d2c:	4651      	mov	r1, sl
   17d2e:	4628      	mov	r0, r5
   17d30:	9305      	str	r3, [sp, #20]
   17d32:	f00f fc83 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   17d36:	f1ba 0f00 	cmp.w	sl, #0
   17d3a:	d001      	beq.n	17d40 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x4e0>
   17d3c:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
   17d40:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
   17d44:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   17d46:	9b24      	ldr	r3, [sp, #144]	; 0x90
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   17d48:	aa1c      	add	r2, sp, #112	; 0x70
   17d4a:	a916      	add	r1, sp, #88	; 0x58
   17d4c:	a810      	add	r0, sp, #64	; 0x40
  int32 input1_multiplier = op_params.input1_multiplier;
   17d4e:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
   17d52:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
  int input2_shift = op_params.input2_shift;
   17d56:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  int32 input2_offset = op_params.input2_offset;
   17d5a:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   17d5c:	f010 fcb1 	bl	286c2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
   17d60:	4602      	mov	r2, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   17d62:	f04f 0800 	mov.w	r8, #0
   17d66:	f04f 0900 	mov.w	r9, #0
  const int64_t flatsize =
   17d6a:	17c3      	asrs	r3, r0, #31
   17d6c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
   17d70:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   17d74:	4590      	cmp	r8, r2
   17d76:	eb79 0303 	sbcs.w	r3, r9, r3
   17d7a:	da24      	bge.n	17dc6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x566>
    const int32 input2_val = input2_offset + input2_data[i];
   17d7c:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
   17d7e:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
   17d80:	f912 5008 	ldrsb.w	r5, [r2, r8]
   17d84:	9a07      	ldr	r2, [sp, #28]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17d86:	ee18 1a10 	vmov	r1, s16
    const int32 input2_val = input2_offset + input2_data[i];
   17d8a:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
   17d8c:	9a04      	ldr	r2, [sp, #16]
   17d8e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   17d92:	f912 0008 	ldrsb.w	r0, [r2, r8]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17d96:	465a      	mov	r2, fp
    const int32 input1_val = input1_offset + input1_data[i];
   17d98:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17d9a:	40b0      	lsls	r0, r6
   17d9c:	f7fe ff22 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   17da0:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17da2:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17da4:	4622      	mov	r2, r4
   17da6:	4639      	mov	r1, r7
   17da8:	4628      	mov	r0, r5
   17daa:	f7fe ff1b 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs != rhs;
   17dae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17db0:	1a18      	subs	r0, r3, r0
   17db2:	bf18      	it	ne
   17db4:	2001      	movne	r0, #1
   17db6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  for (int64_t i = 0; i < flatsize; ++i) {
   17db8:	f118 0801 	adds.w	r8, r8, #1
  return lhs != rhs;
   17dbc:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   17dc0:	f149 0900 	adc.w	r9, r9, #0
   17dc4:	e7d4      	b.n	17d70 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x510>
   17dc6:	a81c      	add	r0, sp, #112	; 0x70
   17dc8:	e597      	b.n	178fa <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x9a>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   17dca:	696c      	ldr	r4, [r5, #20]
   17dcc:	f7f4 ff7a 	bl	ccc4 <TfLiteTypeGetName>
   17dd0:	f818 3009 	ldrb.w	r3, [r8, r9]
   17dd4:	4602      	mov	r2, r0
   17dd6:	4902      	ldr	r1, [pc, #8]	; (17de0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x580>)
   17dd8:	4628      	mov	r0, r5
   17dda:	47a0      	blx	r4
      return kTfLiteError;
   17ddc:	2001      	movs	r0, #1
   17dde:	e6c2      	b.n	17b66 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x306>
   17de0:	000349d0 	.word	0x000349d0

00017de4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus GreaterEval(TfLiteContext* context, TfLiteNode* node) {
   17de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17de8:	ed2d 8b02 	vpush	{d8}
  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
   17dec:	680b      	ldr	r3, [r1, #0]
   17dee:	f8d0 8008 	ldr.w	r8, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
   17df2:	685e      	ldr	r6, [r3, #4]
   17df4:	689c      	ldr	r4, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
   17df6:	684b      	ldr	r3, [r1, #4]
  return &context->tensors[node->inputs->data[index]];
   17df8:	ea4f 1986 	mov.w	r9, r6, lsl #6
  return &context->tensors[node->outputs->data[index]];
   17dfc:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->inputs->data[index]];
   17dfe:	eb08 1686 	add.w	r6, r8, r6, lsl #6
   17e02:	eb08 1484 	add.w	r4, r8, r4, lsl #6
TfLiteStatus GreaterEval(TfLiteContext* context, TfLiteNode* node) {
   17e06:	4605      	mov	r5, r0
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   17e08:	4621      	mov	r1, r4
   17e0a:	4630      	mov	r0, r6
TfLiteStatus GreaterEval(TfLiteContext* context, TfLiteNode* node) {
   17e0c:	b0ab      	sub	sp, #172	; 0xac
  return &context->tensors[node->outputs->data[index]];
   17e0e:	eb08 1a83 	add.w	sl, r8, r3, lsl #6
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   17e12:	f018 f976 	bl	30102 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
   17e16:	f080 0001 	eor.w	r0, r0, #1
   17e1a:	b2c7      	uxtb	r7, r0
  switch (input1->type) {
   17e1c:	f818 0009 	ldrb.w	r0, [r8, r9]
   17e20:	1e43      	subs	r3, r0, #1
   17e22:	2b08      	cmp	r3, #8
   17e24:	f200 824b 	bhi.w	182be <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x4da>
   17e28:	e8df f013 	tbh	[pc, r3, lsl #1]
   17e2c:	00680009 	.word	0x00680009
   17e30:	00b7011a 	.word	0x00b7011a
   17e34:	02490249 	.word	0x02490249
   17e38:	02490249 	.word	0x02490249
   17e3c:	01b1      	.short	0x01b1
      TF_LITE_COMPARISON(float, Greater, requires_broadcast);
   17e3e:	4631      	mov	r1, r6
   17e40:	ad1c      	add	r5, sp, #112	; 0x70
   17e42:	b31f      	cbz	r7, 17e8c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0xa8>
   17e44:	a810      	add	r0, sp, #64	; 0x40
   17e46:	f00f fbf9 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17e4a:	4621      	mov	r1, r4
   17e4c:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17e4e:	6876      	ldr	r6, [r6, #4]
   17e50:	f00f fbf4 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17e54:	b104      	cbz	r4, 17e58 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x74>
   17e56:	6864      	ldr	r4, [r4, #4]
   17e58:	4651      	mov	r1, sl
   17e5a:	4628      	mov	r0, r5
   17e5c:	f00f fbee 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   17e60:	f1ba 0f00 	cmp.w	sl, #0
   17e64:	d001      	beq.n	17e6a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x86>
   17e66:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Greater);
   17e6a:	4632      	mov	r2, r6
   17e6c:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   17e70:	9400      	str	r4, [sp, #0]
   17e72:	ab16      	add	r3, sp, #88	; 0x58
   17e74:	a910      	add	r1, sp, #64	; 0x40
   17e76:	a822      	add	r0, sp, #136	; 0x88
   17e78:	f010 fd84 	bl	28984 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_9GreaterFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
TF_LITE_QUANTIZE_COMPARISON(Greater);
   17e7c:	4628      	mov	r0, r5
   17e7e:	f00f fb98 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   17e82:	a816      	add	r0, sp, #88	; 0x58
   17e84:	f00f fb95 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   17e88:	a810      	add	r0, sp, #64	; 0x40
   17e8a:	e0e1      	b.n	18050 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x26c>
      TF_LITE_COMPARISON(float, Greater, requires_broadcast);
   17e8c:	a816      	add	r0, sp, #88	; 0x58
   17e8e:	f00f fbd5 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17e92:	4621      	mov	r1, r4
   17e94:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17e96:	f8d6 8004 	ldr.w	r8, [r6, #4]
   17e9a:	f00f fbcf 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17e9e:	b104      	cbz	r4, 17ea2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0xbe>
   17ea0:	6864      	ldr	r4, [r4, #4]
   17ea2:	4651      	mov	r1, sl
   17ea4:	a822      	add	r0, sp, #136	; 0x88
   17ea6:	f00f fbc9 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   17eaa:	f1ba 0f00 	cmp.w	sl, #0
   17eae:	d001      	beq.n	17eb4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0xd0>
   17eb0:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   17eb4:	4629      	mov	r1, r5
   17eb6:	aa22      	add	r2, sp, #136	; 0x88
   17eb8:	a816      	add	r0, sp, #88	; 0x58
   17eba:	f010 fc02 	bl	286c2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
   17ebe:	4641      	mov	r1, r8
  const int64_t flatsize =
   17ec0:	4606      	mov	r6, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   17ec2:	2200      	movs	r2, #0
   17ec4:	2300      	movs	r3, #0
  const int64_t flatsize =
   17ec6:	17c7      	asrs	r7, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
   17ec8:	42b2      	cmp	r2, r6
   17eca:	eb73 0007 	sbcs.w	r0, r3, r7
   17ece:	f280 80b8 	bge.w	18042 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x25e>
    output_data[i] = F(input1_data[i], input2_data[i]);
   17ed2:	ecb1 7a01 	vldmia	r1!, {s14}
   17ed6:	ecf4 7a01 	vldmia	r4!, {s15}
  return lhs > rhs;
   17eda:	eeb4 7ae7 	vcmpe.f32	s14, s15
   17ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17ee2:	bfcc      	ite	gt
   17ee4:	f04f 0c01 	movgt.w	ip, #1
   17ee8:	f04f 0c00 	movle.w	ip, #0
    output_data[i] = F(input1_data[i], input2_data[i]);
   17eec:	eb0a 0002 	add.w	r0, sl, r2
  for (int64_t i = 0; i < flatsize; ++i) {
   17ef0:	3201      	adds	r2, #1
  return lhs > rhs;
   17ef2:	f880 c000 	strb.w	ip, [r0]
  for (int64_t i = 0; i < flatsize; ++i) {
   17ef6:	f143 0300 	adc.w	r3, r3, #0
   17efa:	e7e5      	b.n	17ec8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0xe4>
      TF_LITE_COMPARISON(int32_t, Greater, requires_broadcast);
   17efc:	4631      	mov	r1, r6
   17efe:	ad1c      	add	r5, sp, #112	; 0x70
   17f00:	b1e7      	cbz	r7, 17f3c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x158>
   17f02:	a810      	add	r0, sp, #64	; 0x40
   17f04:	f00f fb9a 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17f08:	4621      	mov	r1, r4
   17f0a:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17f0c:	6876      	ldr	r6, [r6, #4]
   17f0e:	f00f fb95 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17f12:	b104      	cbz	r4, 17f16 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x132>
   17f14:	6864      	ldr	r4, [r4, #4]
   17f16:	4651      	mov	r1, sl
   17f18:	4628      	mov	r0, r5
   17f1a:	f00f fb8f 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   17f1e:	f1ba 0f00 	cmp.w	sl, #0
   17f22:	d001      	beq.n	17f28 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x144>
   17f24:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Greater);
   17f28:	4632      	mov	r2, r6
   17f2a:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   17f2e:	9400      	str	r4, [sp, #0]
   17f30:	ab16      	add	r3, sp, #88	; 0x58
   17f32:	a910      	add	r1, sp, #64	; 0x40
   17f34:	a822      	add	r0, sp, #136	; 0x88
   17f36:	f011 f89b 	bl	29070 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   17f3a:	e79f      	b.n	17e7c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x98>
   17f3c:	a816      	add	r0, sp, #88	; 0x58
   17f3e:	f00f fb7d 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17f42:	4621      	mov	r1, r4
   17f44:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17f46:	6876      	ldr	r6, [r6, #4]
   17f48:	f00f fb78 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17f4c:	b104      	cbz	r4, 17f50 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x16c>
   17f4e:	6864      	ldr	r4, [r4, #4]
   17f50:	4651      	mov	r1, sl
   17f52:	a822      	add	r0, sp, #136	; 0x88
   17f54:	f00f fb72 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   17f58:	f1ba 0f00 	cmp.w	sl, #0
   17f5c:	d001      	beq.n	17f62 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x17e>
   17f5e:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   17f62:	aa22      	add	r2, sp, #136	; 0x88
   17f64:	4629      	mov	r1, r5
   17f66:	a816      	add	r0, sp, #88	; 0x58
   17f68:	f010 fbab 	bl	286c2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   17f6c:	2200      	movs	r2, #0
  const int64_t flatsize =
   17f6e:	4680      	mov	r8, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   17f70:	2300      	movs	r3, #0
  const int64_t flatsize =
   17f72:	ea4f 79e0 	mov.w	r9, r0, asr #31
  for (int64_t i = 0; i < flatsize; ++i) {
   17f76:	4542      	cmp	r2, r8
   17f78:	eb73 0109 	sbcs.w	r1, r3, r9
   17f7c:	da61      	bge.n	18042 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x25e>
  return lhs > rhs;
   17f7e:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
   17f82:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
   17f86:	4281      	cmp	r1, r0
   17f88:	bfd4      	ite	le
   17f8a:	2100      	movle	r1, #0
   17f8c:	2101      	movgt	r1, #1
   17f8e:	f80a 1002 	strb.w	r1, [sl, r2]
  for (int64_t i = 0; i < flatsize; ++i) {
   17f92:	3201      	adds	r2, #1
   17f94:	f143 0300 	adc.w	r3, r3, #0
   17f98:	e7ed      	b.n	17f76 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x192>
      TF_LITE_COMPARISON(int64_t, Greater, requires_broadcast);
   17f9a:	4631      	mov	r1, r6
   17f9c:	ad1c      	add	r5, sp, #112	; 0x70
   17f9e:	b1e7      	cbz	r7, 17fda <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x1f6>
   17fa0:	a810      	add	r0, sp, #64	; 0x40
   17fa2:	f00f fb4b 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17fa6:	4621      	mov	r1, r4
   17fa8:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17faa:	6876      	ldr	r6, [r6, #4]
   17fac:	f00f fb46 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17fb0:	b104      	cbz	r4, 17fb4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x1d0>
   17fb2:	6864      	ldr	r4, [r4, #4]
   17fb4:	4651      	mov	r1, sl
   17fb6:	4628      	mov	r0, r5
   17fb8:	f00f fb40 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   17fbc:	f1ba 0f00 	cmp.w	sl, #0
   17fc0:	d001      	beq.n	17fc6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x1e2>
   17fc2:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Greater);
   17fc6:	4632      	mov	r2, r6
   17fc8:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   17fcc:	9400      	str	r4, [sp, #0]
   17fce:	ab16      	add	r3, sp, #88	; 0x58
   17fd0:	a910      	add	r1, sp, #64	; 0x40
   17fd2:	a822      	add	r0, sp, #136	; 0x88
   17fd4:	f011 f8a1 	bl	2911a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_9GreaterFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   17fd8:	e750      	b.n	17e7c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x98>
   17fda:	a816      	add	r0, sp, #88	; 0x58
   17fdc:	f00f fb2e 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17fe0:	4621      	mov	r1, r4
   17fe2:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17fe4:	6876      	ldr	r6, [r6, #4]
   17fe6:	f00f fb29 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17fea:	b104      	cbz	r4, 17fee <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x20a>
   17fec:	6864      	ldr	r4, [r4, #4]
   17fee:	4651      	mov	r1, sl
   17ff0:	a822      	add	r0, sp, #136	; 0x88
   17ff2:	f00f fb23 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   17ff6:	f1ba 0f00 	cmp.w	sl, #0
   17ffa:	d001      	beq.n	18000 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x21c>
   17ffc:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   18000:	4629      	mov	r1, r5
   18002:	aa22      	add	r2, sp, #136	; 0x88
   18004:	a816      	add	r0, sp, #88	; 0x58
   18006:	f010 fb5c 	bl	286c2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   1800a:	2200      	movs	r2, #0
   1800c:	2300      	movs	r3, #0
  const int64_t flatsize =
   1800e:	17c1      	asrs	r1, r0, #31
   18010:	f1a6 0c08 	sub.w	ip, r6, #8
   18014:	3c08      	subs	r4, #8
  for (int64_t i = 0; i < flatsize; ++i) {
   18016:	4282      	cmp	r2, r0
   18018:	eb73 0601 	sbcs.w	r6, r3, r1
   1801c:	da11      	bge.n	18042 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x25e>
  return lhs > rhs;
   1801e:	e9fc 6702 	ldrd	r6, r7, [ip, #8]!
   18022:	e9f4 8902 	ldrd	r8, r9, [r4, #8]!
   18026:	45b0      	cmp	r8, r6
   18028:	eb79 0607 	sbcs.w	r6, r9, r7
   1802c:	bfb4      	ite	lt
   1802e:	2601      	movlt	r6, #1
   18030:	2600      	movge	r6, #0
    output_data[i] = F(input1_data[i], input2_data[i]);
   18032:	eb0a 0e02 	add.w	lr, sl, r2
  for (int64_t i = 0; i < flatsize; ++i) {
   18036:	3201      	adds	r2, #1
  return lhs > rhs;
   18038:	f88e 6000 	strb.w	r6, [lr]
  for (int64_t i = 0; i < flatsize; ++i) {
   1803c:	f143 0300 	adc.w	r3, r3, #0
   18040:	e7e9      	b.n	18016 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x232>
   18042:	a822      	add	r0, sp, #136	; 0x88
   18044:	f00f fab5 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   18048:	4628      	mov	r0, r5
   1804a:	f00f fab2 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   1804e:	a816      	add	r0, sp, #88	; 0x58
TF_LITE_QUANTIZE_COMPARISON(Greater);
   18050:	f00f faaf 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   18054:	2000      	movs	r0, #0
}
   18056:	b02b      	add	sp, #172	; 0xac
   18058:	ecbd 8b02 	vpop	{d8}
   1805c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
TF_LITE_QUANTIZE_COMPARISON(Greater);
   18060:	6933      	ldr	r3, [r6, #16]
   18062:	68f0      	ldr	r0, [r6, #12]
   18064:	f1c3 0800 	rsb	r8, r3, #0
   18068:	f7f4 fa4e 	bl	c508 <__aeabi_f2d>
   1806c:	ab0d      	add	r3, sp, #52	; 0x34
   1806e:	aa0c      	add	r2, sp, #48	; 0x30
   18070:	6925      	ldr	r5, [r4, #16]
   18072:	f008 ffa1 	bl	20fb8 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   18076:	68e0      	ldr	r0, [r4, #12]
   18078:	f7f4 fa46 	bl	c508 <__aeabi_f2d>
   1807c:	ab0f      	add	r3, sp, #60	; 0x3c
   1807e:	aa0e      	add	r2, sp, #56	; 0x38
   18080:	f008 ff9a 	bl	20fb8 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   18084:	2308      	movs	r3, #8
   18086:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
   1808a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1808c:	426d      	negs	r5, r5
   1808e:	9324      	str	r3, [sp, #144]	; 0x90
   18090:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18092:	4631      	mov	r1, r6
   18094:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
   18098:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1809a:	ad1c      	add	r5, sp, #112	; 0x70
   1809c:	9327      	str	r3, [sp, #156]	; 0x9c
   1809e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   180a0:	a810      	add	r0, sp, #64	; 0x40
   180a2:	9328      	str	r3, [sp, #160]	; 0xa0
   180a4:	b1df      	cbz	r7, 180de <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x2fa>
   180a6:	f00f fac9 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   180aa:	6872      	ldr	r2, [r6, #4]
   180ac:	4621      	mov	r1, r4
   180ae:	a816      	add	r0, sp, #88	; 0x58
   180b0:	9204      	str	r2, [sp, #16]
   180b2:	f00f fac3 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   180b6:	4651      	mov	r1, sl
   180b8:	4628      	mov	r0, r5
   180ba:	6864      	ldr	r4, [r4, #4]
   180bc:	f00f fabe 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   180c0:	9a04      	ldr	r2, [sp, #16]
   180c2:	f1ba 0f00 	cmp.w	sl, #0
   180c6:	d001      	beq.n	180cc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x2e8>
   180c8:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Greater);
   180cc:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   180d0:	9400      	str	r4, [sp, #0]
   180d2:	ab16      	add	r3, sp, #88	; 0x58
   180d4:	a910      	add	r1, sp, #64	; 0x40
   180d6:	a822      	add	r0, sp, #136	; 0x88
   180d8:	f011 fcc0 	bl	29a5c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   180dc:	e6ce      	b.n	17e7c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x98>
   180de:	f00f faad 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   180e2:	6873      	ldr	r3, [r6, #4]
   180e4:	4621      	mov	r1, r4
   180e6:	a816      	add	r0, sp, #88	; 0x58
   180e8:	9304      	str	r3, [sp, #16]
   180ea:	f00f faa7 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   180ee:	6863      	ldr	r3, [r4, #4]
   180f0:	4651      	mov	r1, sl
   180f2:	4628      	mov	r0, r5
   180f4:	9305      	str	r3, [sp, #20]
   180f6:	f00f faa1 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   180fa:	f1ba 0f00 	cmp.w	sl, #0
   180fe:	d001      	beq.n	18104 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x320>
   18100:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
   18104:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
   18108:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   1810a:	9b24      	ldr	r3, [sp, #144]	; 0x90
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   1810c:	aa1c      	add	r2, sp, #112	; 0x70
   1810e:	a916      	add	r1, sp, #88	; 0x58
   18110:	a810      	add	r0, sp, #64	; 0x40
  int32 input1_multiplier = op_params.input1_multiplier;
   18112:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
   18116:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
  int input2_shift = op_params.input2_shift;
   1811a:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  int32 input2_offset = op_params.input2_offset;
   1811e:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   18120:	f010 facf 	bl	286c2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
   18124:	4602      	mov	r2, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   18126:	f04f 0800 	mov.w	r8, #0
   1812a:	f04f 0900 	mov.w	r9, #0
  const int64_t flatsize =
   1812e:	17c3      	asrs	r3, r0, #31
   18130:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
   18134:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   18138:	4590      	cmp	r8, r2
   1813a:	eb79 0303 	sbcs.w	r3, r9, r3
   1813e:	f280 80bc 	bge.w	182ba <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x4d6>
    const int32 input2_val = input2_offset + input2_data[i];
   18142:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
   18144:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
   18146:	f812 5008 	ldrb.w	r5, [r2, r8]
   1814a:	9a07      	ldr	r2, [sp, #28]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1814c:	ee18 1a10 	vmov	r1, s16
    const int32 input2_val = input2_offset + input2_data[i];
   18150:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
   18152:	9a04      	ldr	r2, [sp, #16]
   18154:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   18158:	f812 0008 	ldrb.w	r0, [r2, r8]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1815c:	465a      	mov	r2, fp
    const int32 input1_val = input1_offset + input1_data[i];
   1815e:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18160:	40b0      	lsls	r0, r6
   18162:	f7fe fd3f 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   18166:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18168:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1816a:	4622      	mov	r2, r4
   1816c:	4639      	mov	r1, r7
   1816e:	4628      	mov	r0, r5
   18170:	f7fe fd38 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs > rhs;
   18174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18176:	4283      	cmp	r3, r0
   18178:	bfd4      	ite	le
   1817a:	2000      	movle	r0, #0
   1817c:	2001      	movgt	r0, #1
   1817e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  for (int64_t i = 0; i < flatsize; ++i) {
   18180:	f118 0801 	adds.w	r8, r8, #1
  return lhs > rhs;
   18184:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   18188:	f149 0900 	adc.w	r9, r9, #0
   1818c:	e7d2      	b.n	18134 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x350>
   1818e:	6933      	ldr	r3, [r6, #16]
   18190:	68f0      	ldr	r0, [r6, #12]
   18192:	f1c3 0800 	rsb	r8, r3, #0
   18196:	f7f4 f9b7 	bl	c508 <__aeabi_f2d>
   1819a:	ab0d      	add	r3, sp, #52	; 0x34
   1819c:	aa0c      	add	r2, sp, #48	; 0x30
   1819e:	6925      	ldr	r5, [r4, #16]
   181a0:	f008 ff0a 	bl	20fb8 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   181a4:	68e0      	ldr	r0, [r4, #12]
   181a6:	f7f4 f9af 	bl	c508 <__aeabi_f2d>
   181aa:	ab0f      	add	r3, sp, #60	; 0x3c
   181ac:	aa0e      	add	r2, sp, #56	; 0x38
   181ae:	f008 ff03 	bl	20fb8 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   181b2:	2308      	movs	r3, #8
   181b4:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
   181b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   181ba:	426d      	negs	r5, r5
   181bc:	9324      	str	r3, [sp, #144]	; 0x90
   181be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   181c0:	4631      	mov	r1, r6
   181c2:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
   181c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   181c8:	ad1c      	add	r5, sp, #112	; 0x70
   181ca:	9327      	str	r3, [sp, #156]	; 0x9c
   181cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   181ce:	a810      	add	r0, sp, #64	; 0x40
   181d0:	9328      	str	r3, [sp, #160]	; 0xa0
   181d2:	b1df      	cbz	r7, 1820c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x428>
   181d4:	f00f fa32 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   181d8:	6872      	ldr	r2, [r6, #4]
   181da:	4621      	mov	r1, r4
   181dc:	a816      	add	r0, sp, #88	; 0x58
   181de:	9204      	str	r2, [sp, #16]
   181e0:	f00f fa2c 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   181e4:	4651      	mov	r1, sl
   181e6:	4628      	mov	r0, r5
   181e8:	6864      	ldr	r4, [r4, #4]
   181ea:	f00f fa27 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   181ee:	9a04      	ldr	r2, [sp, #16]
   181f0:	f1ba 0f00 	cmp.w	sl, #0
   181f4:	d001      	beq.n	181fa <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x416>
   181f6:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Greater);
   181fa:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   181fe:	9400      	str	r4, [sp, #0]
   18200:	ab16      	add	r3, sp, #88	; 0x58
   18202:	a910      	add	r1, sp, #64	; 0x40
   18204:	a822      	add	r0, sp, #136	; 0x88
   18206:	f011 fcb5 	bl	29b74 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   1820a:	e637      	b.n	17e7c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x98>
   1820c:	f00f fa16 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18210:	6873      	ldr	r3, [r6, #4]
   18212:	4621      	mov	r1, r4
   18214:	a816      	add	r0, sp, #88	; 0x58
   18216:	9304      	str	r3, [sp, #16]
   18218:	f00f fa10 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1821c:	6863      	ldr	r3, [r4, #4]
   1821e:	4651      	mov	r1, sl
   18220:	4628      	mov	r0, r5
   18222:	9305      	str	r3, [sp, #20]
   18224:	f00f fa0a 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18228:	f1ba 0f00 	cmp.w	sl, #0
   1822c:	d001      	beq.n	18232 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x44e>
   1822e:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
   18232:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
   18236:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   18238:	9b24      	ldr	r3, [sp, #144]	; 0x90
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   1823a:	aa1c      	add	r2, sp, #112	; 0x70
   1823c:	a916      	add	r1, sp, #88	; 0x58
   1823e:	a810      	add	r0, sp, #64	; 0x40
  int32 input1_multiplier = op_params.input1_multiplier;
   18240:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
   18244:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
  int input2_shift = op_params.input2_shift;
   18248:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  int32 input2_offset = op_params.input2_offset;
   1824c:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   1824e:	f010 fa38 	bl	286c2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
   18252:	4602      	mov	r2, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   18254:	f04f 0800 	mov.w	r8, #0
   18258:	f04f 0900 	mov.w	r9, #0
  const int64_t flatsize =
   1825c:	17c3      	asrs	r3, r0, #31
   1825e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
   18262:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   18266:	4590      	cmp	r8, r2
   18268:	eb79 0303 	sbcs.w	r3, r9, r3
   1826c:	da25      	bge.n	182ba <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x4d6>
    const int32 input2_val = input2_offset + input2_data[i];
   1826e:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
   18270:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
   18272:	f912 5008 	ldrsb.w	r5, [r2, r8]
   18276:	9a07      	ldr	r2, [sp, #28]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18278:	ee18 1a10 	vmov	r1, s16
    const int32 input2_val = input2_offset + input2_data[i];
   1827c:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
   1827e:	9a04      	ldr	r2, [sp, #16]
   18280:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   18284:	f912 0008 	ldrsb.w	r0, [r2, r8]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18288:	465a      	mov	r2, fp
    const int32 input1_val = input1_offset + input1_data[i];
   1828a:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1828c:	40b0      	lsls	r0, r6
   1828e:	f7fe fca9 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   18292:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18294:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18296:	4622      	mov	r2, r4
   18298:	4639      	mov	r1, r7
   1829a:	4628      	mov	r0, r5
   1829c:	f7fe fca2 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs > rhs;
   182a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   182a2:	4283      	cmp	r3, r0
   182a4:	bfd4      	ite	le
   182a6:	2000      	movle	r0, #0
   182a8:	2001      	movgt	r0, #1
   182aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  for (int64_t i = 0; i < flatsize; ++i) {
   182ac:	f118 0801 	adds.w	r8, r8, #1
  return lhs > rhs;
   182b0:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   182b4:	f149 0900 	adc.w	r9, r9, #0
   182b8:	e7d3      	b.n	18262 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x47e>
   182ba:	a81c      	add	r0, sp, #112	; 0x70
   182bc:	e5df      	b.n	17e7e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x9a>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   182be:	696c      	ldr	r4, [r5, #20]
   182c0:	f7f4 fd00 	bl	ccc4 <TfLiteTypeGetName>
   182c4:	f818 3009 	ldrb.w	r3, [r8, r9]
   182c8:	4602      	mov	r2, r0
   182ca:	4902      	ldr	r1, [pc, #8]	; (182d4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x4f0>)
   182cc:	4628      	mov	r0, r5
   182ce:	47a0      	blx	r4
      return kTfLiteError;
   182d0:	2001      	movs	r0, #1
   182d2:	e6c0      	b.n	18056 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x272>
   182d4:	000349d0 	.word	0x000349d0

000182d8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus GreaterEqualEval(TfLiteContext* context, TfLiteNode* node) {
   182d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   182dc:	ed2d 8b02 	vpush	{d8}
  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
   182e0:	680b      	ldr	r3, [r1, #0]
   182e2:	f8d0 8008 	ldr.w	r8, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
   182e6:	685e      	ldr	r6, [r3, #4]
   182e8:	689c      	ldr	r4, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
   182ea:	684b      	ldr	r3, [r1, #4]
  return &context->tensors[node->inputs->data[index]];
   182ec:	ea4f 1986 	mov.w	r9, r6, lsl #6
  return &context->tensors[node->outputs->data[index]];
   182f0:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->inputs->data[index]];
   182f2:	eb08 1686 	add.w	r6, r8, r6, lsl #6
   182f6:	eb08 1484 	add.w	r4, r8, r4, lsl #6
TfLiteStatus GreaterEqualEval(TfLiteContext* context, TfLiteNode* node) {
   182fa:	4605      	mov	r5, r0
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   182fc:	4621      	mov	r1, r4
   182fe:	4630      	mov	r0, r6
TfLiteStatus GreaterEqualEval(TfLiteContext* context, TfLiteNode* node) {
   18300:	b0ab      	sub	sp, #172	; 0xac
  return &context->tensors[node->outputs->data[index]];
   18302:	eb08 1a83 	add.w	sl, r8, r3, lsl #6
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   18306:	f017 fefc 	bl	30102 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
   1830a:	f080 0001 	eor.w	r0, r0, #1
   1830e:	b2c7      	uxtb	r7, r0
  switch (input1->type) {
   18310:	f818 0009 	ldrb.w	r0, [r8, r9]
   18314:	1e43      	subs	r3, r0, #1
   18316:	2b08      	cmp	r3, #8
   18318:	f200 824b 	bhi.w	187b2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x4da>
   1831c:	e8df f013 	tbh	[pc, r3, lsl #1]
   18320:	00680009 	.word	0x00680009
   18324:	00b7011a 	.word	0x00b7011a
   18328:	02490249 	.word	0x02490249
   1832c:	02490249 	.word	0x02490249
   18330:	01b1      	.short	0x01b1
      TF_LITE_COMPARISON(float, GreaterEqual, requires_broadcast);
   18332:	4631      	mov	r1, r6
   18334:	ad1c      	add	r5, sp, #112	; 0x70
   18336:	b31f      	cbz	r7, 18380 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0xa8>
   18338:	a810      	add	r0, sp, #64	; 0x40
   1833a:	f00f f97f 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1833e:	4621      	mov	r1, r4
   18340:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18342:	6876      	ldr	r6, [r6, #4]
   18344:	f00f f97a 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18348:	b104      	cbz	r4, 1834c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x74>
   1834a:	6864      	ldr	r4, [r4, #4]
   1834c:	4651      	mov	r1, sl
   1834e:	4628      	mov	r0, r5
   18350:	f00f f974 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18354:	f1ba 0f00 	cmp.w	sl, #0
   18358:	d001      	beq.n	1835e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x86>
   1835a:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(GreaterEqual);
   1835e:	4632      	mov	r2, r6
   18360:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   18364:	9400      	str	r4, [sp, #0]
   18366:	ab16      	add	r3, sp, #88	; 0x58
   18368:	a910      	add	r1, sp, #64	; 0x40
   1836a:	a822      	add	r0, sp, #136	; 0x88
   1836c:	f010 fb66 	bl	28a3c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_14GreaterEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
TF_LITE_QUANTIZE_COMPARISON(GreaterEqual);
   18370:	4628      	mov	r0, r5
   18372:	f00f f91e 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   18376:	a816      	add	r0, sp, #88	; 0x58
   18378:	f00f f91b 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   1837c:	a810      	add	r0, sp, #64	; 0x40
   1837e:	e0e1      	b.n	18544 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x26c>
      TF_LITE_COMPARISON(float, GreaterEqual, requires_broadcast);
   18380:	a816      	add	r0, sp, #88	; 0x58
   18382:	f00f f95b 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18386:	4621      	mov	r1, r4
   18388:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1838a:	f8d6 8004 	ldr.w	r8, [r6, #4]
   1838e:	f00f f955 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18392:	b104      	cbz	r4, 18396 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0xbe>
   18394:	6864      	ldr	r4, [r4, #4]
   18396:	4651      	mov	r1, sl
   18398:	a822      	add	r0, sp, #136	; 0x88
   1839a:	f00f f94f 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1839e:	f1ba 0f00 	cmp.w	sl, #0
   183a2:	d001      	beq.n	183a8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0xd0>
   183a4:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   183a8:	4629      	mov	r1, r5
   183aa:	aa22      	add	r2, sp, #136	; 0x88
   183ac:	a816      	add	r0, sp, #88	; 0x58
   183ae:	f010 f988 	bl	286c2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
   183b2:	4641      	mov	r1, r8
  const int64_t flatsize =
   183b4:	4606      	mov	r6, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   183b6:	2200      	movs	r2, #0
   183b8:	2300      	movs	r3, #0
  const int64_t flatsize =
   183ba:	17c7      	asrs	r7, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
   183bc:	42b2      	cmp	r2, r6
   183be:	eb73 0007 	sbcs.w	r0, r3, r7
   183c2:	f280 80b8 	bge.w	18536 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x25e>
    output_data[i] = F(input1_data[i], input2_data[i]);
   183c6:	ecb1 7a01 	vldmia	r1!, {s14}
   183ca:	ecf4 7a01 	vldmia	r4!, {s15}
  return lhs >= rhs;
   183ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
   183d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   183d6:	bfac      	ite	ge
   183d8:	f04f 0c01 	movge.w	ip, #1
   183dc:	f04f 0c00 	movlt.w	ip, #0
    output_data[i] = F(input1_data[i], input2_data[i]);
   183e0:	eb0a 0002 	add.w	r0, sl, r2
  for (int64_t i = 0; i < flatsize; ++i) {
   183e4:	3201      	adds	r2, #1
  return lhs >= rhs;
   183e6:	f880 c000 	strb.w	ip, [r0]
  for (int64_t i = 0; i < flatsize; ++i) {
   183ea:	f143 0300 	adc.w	r3, r3, #0
   183ee:	e7e5      	b.n	183bc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0xe4>
      TF_LITE_COMPARISON(int32_t, GreaterEqual, requires_broadcast);
   183f0:	4631      	mov	r1, r6
   183f2:	ad1c      	add	r5, sp, #112	; 0x70
   183f4:	b1e7      	cbz	r7, 18430 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x158>
   183f6:	a810      	add	r0, sp, #64	; 0x40
   183f8:	f00f f920 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   183fc:	4621      	mov	r1, r4
   183fe:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18400:	6876      	ldr	r6, [r6, #4]
   18402:	f00f f91b 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18406:	b104      	cbz	r4, 1840a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x132>
   18408:	6864      	ldr	r4, [r4, #4]
   1840a:	4651      	mov	r1, sl
   1840c:	4628      	mov	r0, r5
   1840e:	f00f f915 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18412:	f1ba 0f00 	cmp.w	sl, #0
   18416:	d001      	beq.n	1841c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x144>
   18418:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(GreaterEqual);
   1841c:	4632      	mov	r2, r6
   1841e:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   18422:	9400      	str	r4, [sp, #0]
   18424:	ab16      	add	r3, sp, #88	; 0x58
   18426:	a910      	add	r1, sp, #64	; 0x40
   18428:	a822      	add	r0, sp, #136	; 0x88
   1842a:	f010 fed3 	bl	291d4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   1842e:	e79f      	b.n	18370 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
   18430:	a816      	add	r0, sp, #88	; 0x58
   18432:	f00f f903 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18436:	4621      	mov	r1, r4
   18438:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1843a:	6876      	ldr	r6, [r6, #4]
   1843c:	f00f f8fe 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18440:	b104      	cbz	r4, 18444 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x16c>
   18442:	6864      	ldr	r4, [r4, #4]
   18444:	4651      	mov	r1, sl
   18446:	a822      	add	r0, sp, #136	; 0x88
   18448:	f00f f8f8 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1844c:	f1ba 0f00 	cmp.w	sl, #0
   18450:	d001      	beq.n	18456 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x17e>
   18452:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   18456:	aa22      	add	r2, sp, #136	; 0x88
   18458:	4629      	mov	r1, r5
   1845a:	a816      	add	r0, sp, #88	; 0x58
   1845c:	f010 f931 	bl	286c2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   18460:	2200      	movs	r2, #0
  const int64_t flatsize =
   18462:	4680      	mov	r8, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   18464:	2300      	movs	r3, #0
  const int64_t flatsize =
   18466:	ea4f 79e0 	mov.w	r9, r0, asr #31
  for (int64_t i = 0; i < flatsize; ++i) {
   1846a:	4542      	cmp	r2, r8
   1846c:	eb73 0109 	sbcs.w	r1, r3, r9
   18470:	da61      	bge.n	18536 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x25e>
  return lhs >= rhs;
   18472:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
   18476:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
   1847a:	4281      	cmp	r1, r0
   1847c:	bfb4      	ite	lt
   1847e:	2100      	movlt	r1, #0
   18480:	2101      	movge	r1, #1
   18482:	f80a 1002 	strb.w	r1, [sl, r2]
  for (int64_t i = 0; i < flatsize; ++i) {
   18486:	3201      	adds	r2, #1
   18488:	f143 0300 	adc.w	r3, r3, #0
   1848c:	e7ed      	b.n	1846a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x192>
      TF_LITE_COMPARISON(int64_t, GreaterEqual, requires_broadcast);
   1848e:	4631      	mov	r1, r6
   18490:	ad1c      	add	r5, sp, #112	; 0x70
   18492:	b1e7      	cbz	r7, 184ce <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x1f6>
   18494:	a810      	add	r0, sp, #64	; 0x40
   18496:	f00f f8d1 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1849a:	4621      	mov	r1, r4
   1849c:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1849e:	6876      	ldr	r6, [r6, #4]
   184a0:	f00f f8cc 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   184a4:	b104      	cbz	r4, 184a8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x1d0>
   184a6:	6864      	ldr	r4, [r4, #4]
   184a8:	4651      	mov	r1, sl
   184aa:	4628      	mov	r0, r5
   184ac:	f00f f8c6 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   184b0:	f1ba 0f00 	cmp.w	sl, #0
   184b4:	d001      	beq.n	184ba <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x1e2>
   184b6:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(GreaterEqual);
   184ba:	4632      	mov	r2, r6
   184bc:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   184c0:	9400      	str	r4, [sp, #0]
   184c2:	ab16      	add	r3, sp, #88	; 0x58
   184c4:	a910      	add	r1, sp, #64	; 0x40
   184c6:	a822      	add	r0, sp, #136	; 0x88
   184c8:	f010 fed9 	bl	2927e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_14GreaterEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   184cc:	e750      	b.n	18370 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
   184ce:	a816      	add	r0, sp, #88	; 0x58
   184d0:	f00f f8b4 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   184d4:	4621      	mov	r1, r4
   184d6:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   184d8:	6876      	ldr	r6, [r6, #4]
   184da:	f00f f8af 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   184de:	b104      	cbz	r4, 184e2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x20a>
   184e0:	6864      	ldr	r4, [r4, #4]
   184e2:	4651      	mov	r1, sl
   184e4:	a822      	add	r0, sp, #136	; 0x88
   184e6:	f00f f8a9 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   184ea:	f1ba 0f00 	cmp.w	sl, #0
   184ee:	d001      	beq.n	184f4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x21c>
   184f0:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   184f4:	4629      	mov	r1, r5
   184f6:	aa22      	add	r2, sp, #136	; 0x88
   184f8:	a816      	add	r0, sp, #88	; 0x58
   184fa:	f010 f8e2 	bl	286c2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   184fe:	2200      	movs	r2, #0
   18500:	2300      	movs	r3, #0
  const int64_t flatsize =
   18502:	17c1      	asrs	r1, r0, #31
   18504:	f1a6 0c08 	sub.w	ip, r6, #8
   18508:	3c08      	subs	r4, #8
  for (int64_t i = 0; i < flatsize; ++i) {
   1850a:	4282      	cmp	r2, r0
   1850c:	eb73 0601 	sbcs.w	r6, r3, r1
   18510:	da11      	bge.n	18536 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x25e>
  return lhs >= rhs;
   18512:	e9fc 8902 	ldrd	r8, r9, [ip, #8]!
   18516:	e9f4 6702 	ldrd	r6, r7, [r4, #8]!
   1851a:	45b0      	cmp	r8, r6
   1851c:	eb79 0607 	sbcs.w	r6, r9, r7
   18520:	bfac      	ite	ge
   18522:	2601      	movge	r6, #1
   18524:	2600      	movlt	r6, #0
    output_data[i] = F(input1_data[i], input2_data[i]);
   18526:	eb0a 0e02 	add.w	lr, sl, r2
  for (int64_t i = 0; i < flatsize; ++i) {
   1852a:	3201      	adds	r2, #1
  return lhs >= rhs;
   1852c:	f88e 6000 	strb.w	r6, [lr]
  for (int64_t i = 0; i < flatsize; ++i) {
   18530:	f143 0300 	adc.w	r3, r3, #0
   18534:	e7e9      	b.n	1850a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x232>
   18536:	a822      	add	r0, sp, #136	; 0x88
   18538:	f00f f83b 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   1853c:	4628      	mov	r0, r5
   1853e:	f00f f838 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   18542:	a816      	add	r0, sp, #88	; 0x58
TF_LITE_QUANTIZE_COMPARISON(GreaterEqual);
   18544:	f00f f835 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   18548:	2000      	movs	r0, #0
}
   1854a:	b02b      	add	sp, #172	; 0xac
   1854c:	ecbd 8b02 	vpop	{d8}
   18550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
TF_LITE_QUANTIZE_COMPARISON(GreaterEqual);
   18554:	6933      	ldr	r3, [r6, #16]
   18556:	68f0      	ldr	r0, [r6, #12]
   18558:	f1c3 0800 	rsb	r8, r3, #0
   1855c:	f7f3 ffd4 	bl	c508 <__aeabi_f2d>
   18560:	ab0d      	add	r3, sp, #52	; 0x34
   18562:	aa0c      	add	r2, sp, #48	; 0x30
   18564:	6925      	ldr	r5, [r4, #16]
   18566:	f008 fd27 	bl	20fb8 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   1856a:	68e0      	ldr	r0, [r4, #12]
   1856c:	f7f3 ffcc 	bl	c508 <__aeabi_f2d>
   18570:	ab0f      	add	r3, sp, #60	; 0x3c
   18572:	aa0e      	add	r2, sp, #56	; 0x38
   18574:	f008 fd20 	bl	20fb8 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   18578:	2308      	movs	r3, #8
   1857a:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
   1857e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   18580:	426d      	negs	r5, r5
   18582:	9324      	str	r3, [sp, #144]	; 0x90
   18584:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18586:	4631      	mov	r1, r6
   18588:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
   1858c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1858e:	ad1c      	add	r5, sp, #112	; 0x70
   18590:	9327      	str	r3, [sp, #156]	; 0x9c
   18592:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18594:	a810      	add	r0, sp, #64	; 0x40
   18596:	9328      	str	r3, [sp, #160]	; 0xa0
   18598:	b1df      	cbz	r7, 185d2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x2fa>
   1859a:	f00f f84f 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1859e:	6872      	ldr	r2, [r6, #4]
   185a0:	4621      	mov	r1, r4
   185a2:	a816      	add	r0, sp, #88	; 0x58
   185a4:	9204      	str	r2, [sp, #16]
   185a6:	f00f f849 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   185aa:	4651      	mov	r1, sl
   185ac:	4628      	mov	r0, r5
   185ae:	6864      	ldr	r4, [r4, #4]
   185b0:	f00f f844 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   185b4:	9a04      	ldr	r2, [sp, #16]
   185b6:	f1ba 0f00 	cmp.w	sl, #0
   185ba:	d001      	beq.n	185c0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x2e8>
   185bc:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(GreaterEqual);
   185c0:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   185c4:	9400      	str	r4, [sp, #0]
   185c6:	ab16      	add	r3, sp, #88	; 0x58
   185c8:	a910      	add	r1, sp, #64	; 0x40
   185ca:	a822      	add	r0, sp, #136	; 0x88
   185cc:	f011 fb5e 	bl	29c8c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   185d0:	e6ce      	b.n	18370 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
   185d2:	f00f f833 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   185d6:	6873      	ldr	r3, [r6, #4]
   185d8:	4621      	mov	r1, r4
   185da:	a816      	add	r0, sp, #88	; 0x58
   185dc:	9304      	str	r3, [sp, #16]
   185de:	f00f f82d 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   185e2:	6863      	ldr	r3, [r4, #4]
   185e4:	4651      	mov	r1, sl
   185e6:	4628      	mov	r0, r5
   185e8:	9305      	str	r3, [sp, #20]
   185ea:	f00f f827 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   185ee:	f1ba 0f00 	cmp.w	sl, #0
   185f2:	d001      	beq.n	185f8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x320>
   185f4:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
   185f8:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
   185fc:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   185fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   18600:	aa1c      	add	r2, sp, #112	; 0x70
   18602:	a916      	add	r1, sp, #88	; 0x58
   18604:	a810      	add	r0, sp, #64	; 0x40
  int32 input1_multiplier = op_params.input1_multiplier;
   18606:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
   1860a:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
  int input2_shift = op_params.input2_shift;
   1860e:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  int32 input2_offset = op_params.input2_offset;
   18612:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   18614:	f010 f855 	bl	286c2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
   18618:	4602      	mov	r2, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   1861a:	f04f 0800 	mov.w	r8, #0
   1861e:	f04f 0900 	mov.w	r9, #0
  const int64_t flatsize =
   18622:	17c3      	asrs	r3, r0, #31
   18624:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
   18628:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   1862c:	4590      	cmp	r8, r2
   1862e:	eb79 0303 	sbcs.w	r3, r9, r3
   18632:	f280 80bc 	bge.w	187ae <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x4d6>
    const int32 input2_val = input2_offset + input2_data[i];
   18636:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
   18638:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
   1863a:	f812 5008 	ldrb.w	r5, [r2, r8]
   1863e:	9a07      	ldr	r2, [sp, #28]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18640:	ee18 1a10 	vmov	r1, s16
    const int32 input2_val = input2_offset + input2_data[i];
   18644:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
   18646:	9a04      	ldr	r2, [sp, #16]
   18648:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   1864c:	f812 0008 	ldrb.w	r0, [r2, r8]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18650:	465a      	mov	r2, fp
    const int32 input1_val = input1_offset + input1_data[i];
   18652:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18654:	40b0      	lsls	r0, r6
   18656:	f7fe fac5 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   1865a:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1865c:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1865e:	4622      	mov	r2, r4
   18660:	4639      	mov	r1, r7
   18662:	4628      	mov	r0, r5
   18664:	f7fe fabe 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs >= rhs;
   18668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1866a:	4283      	cmp	r3, r0
   1866c:	bfb4      	ite	lt
   1866e:	2000      	movlt	r0, #0
   18670:	2001      	movge	r0, #1
   18672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  for (int64_t i = 0; i < flatsize; ++i) {
   18674:	f118 0801 	adds.w	r8, r8, #1
  return lhs >= rhs;
   18678:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   1867c:	f149 0900 	adc.w	r9, r9, #0
   18680:	e7d2      	b.n	18628 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x350>
   18682:	6933      	ldr	r3, [r6, #16]
   18684:	68f0      	ldr	r0, [r6, #12]
   18686:	f1c3 0800 	rsb	r8, r3, #0
   1868a:	f7f3 ff3d 	bl	c508 <__aeabi_f2d>
   1868e:	ab0d      	add	r3, sp, #52	; 0x34
   18690:	aa0c      	add	r2, sp, #48	; 0x30
   18692:	6925      	ldr	r5, [r4, #16]
   18694:	f008 fc90 	bl	20fb8 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   18698:	68e0      	ldr	r0, [r4, #12]
   1869a:	f7f3 ff35 	bl	c508 <__aeabi_f2d>
   1869e:	ab0f      	add	r3, sp, #60	; 0x3c
   186a0:	aa0e      	add	r2, sp, #56	; 0x38
   186a2:	f008 fc89 	bl	20fb8 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   186a6:	2308      	movs	r3, #8
   186a8:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
   186ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   186ae:	426d      	negs	r5, r5
   186b0:	9324      	str	r3, [sp, #144]	; 0x90
   186b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   186b4:	4631      	mov	r1, r6
   186b6:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
   186ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   186bc:	ad1c      	add	r5, sp, #112	; 0x70
   186be:	9327      	str	r3, [sp, #156]	; 0x9c
   186c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   186c2:	a810      	add	r0, sp, #64	; 0x40
   186c4:	9328      	str	r3, [sp, #160]	; 0xa0
   186c6:	b1df      	cbz	r7, 18700 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x428>
   186c8:	f00e ffb8 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   186cc:	6872      	ldr	r2, [r6, #4]
   186ce:	4621      	mov	r1, r4
   186d0:	a816      	add	r0, sp, #88	; 0x58
   186d2:	9204      	str	r2, [sp, #16]
   186d4:	f00e ffb2 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   186d8:	4651      	mov	r1, sl
   186da:	4628      	mov	r0, r5
   186dc:	6864      	ldr	r4, [r4, #4]
   186de:	f00e ffad 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   186e2:	9a04      	ldr	r2, [sp, #16]
   186e4:	f1ba 0f00 	cmp.w	sl, #0
   186e8:	d001      	beq.n	186ee <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x416>
   186ea:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(GreaterEqual);
   186ee:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   186f2:	9400      	str	r4, [sp, #0]
   186f4:	ab16      	add	r3, sp, #88	; 0x58
   186f6:	a910      	add	r1, sp, #64	; 0x40
   186f8:	a822      	add	r0, sp, #136	; 0x88
   186fa:	f011 fb53 	bl	29da4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   186fe:	e637      	b.n	18370 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
   18700:	f00e ff9c 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18704:	6873      	ldr	r3, [r6, #4]
   18706:	4621      	mov	r1, r4
   18708:	a816      	add	r0, sp, #88	; 0x58
   1870a:	9304      	str	r3, [sp, #16]
   1870c:	f00e ff96 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18710:	6863      	ldr	r3, [r4, #4]
   18712:	4651      	mov	r1, sl
   18714:	4628      	mov	r0, r5
   18716:	9305      	str	r3, [sp, #20]
   18718:	f00e ff90 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1871c:	f1ba 0f00 	cmp.w	sl, #0
   18720:	d001      	beq.n	18726 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x44e>
   18722:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
   18726:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
   1872a:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   1872c:	9b24      	ldr	r3, [sp, #144]	; 0x90
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   1872e:	aa1c      	add	r2, sp, #112	; 0x70
   18730:	a916      	add	r1, sp, #88	; 0x58
   18732:	a810      	add	r0, sp, #64	; 0x40
  int32 input1_multiplier = op_params.input1_multiplier;
   18734:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
   18738:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
  int input2_shift = op_params.input2_shift;
   1873c:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  int32 input2_offset = op_params.input2_offset;
   18740:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   18742:	f00f ffbe 	bl	286c2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
   18746:	4602      	mov	r2, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   18748:	f04f 0800 	mov.w	r8, #0
   1874c:	f04f 0900 	mov.w	r9, #0
  const int64_t flatsize =
   18750:	17c3      	asrs	r3, r0, #31
   18752:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
   18756:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   1875a:	4590      	cmp	r8, r2
   1875c:	eb79 0303 	sbcs.w	r3, r9, r3
   18760:	da25      	bge.n	187ae <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x4d6>
    const int32 input2_val = input2_offset + input2_data[i];
   18762:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
   18764:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
   18766:	f912 5008 	ldrsb.w	r5, [r2, r8]
   1876a:	9a07      	ldr	r2, [sp, #28]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1876c:	ee18 1a10 	vmov	r1, s16
    const int32 input2_val = input2_offset + input2_data[i];
   18770:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
   18772:	9a04      	ldr	r2, [sp, #16]
   18774:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   18778:	f912 0008 	ldrsb.w	r0, [r2, r8]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1877c:	465a      	mov	r2, fp
    const int32 input1_val = input1_offset + input1_data[i];
   1877e:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18780:	40b0      	lsls	r0, r6
   18782:	f7fe fa2f 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   18786:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18788:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1878a:	4622      	mov	r2, r4
   1878c:	4639      	mov	r1, r7
   1878e:	4628      	mov	r0, r5
   18790:	f7fe fa28 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs >= rhs;
   18794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18796:	4283      	cmp	r3, r0
   18798:	bfb4      	ite	lt
   1879a:	2000      	movlt	r0, #0
   1879c:	2001      	movge	r0, #1
   1879e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  for (int64_t i = 0; i < flatsize; ++i) {
   187a0:	f118 0801 	adds.w	r8, r8, #1
  return lhs >= rhs;
   187a4:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   187a8:	f149 0900 	adc.w	r9, r9, #0
   187ac:	e7d3      	b.n	18756 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x47e>
   187ae:	a81c      	add	r0, sp, #112	; 0x70
   187b0:	e5df      	b.n	18372 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x9a>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   187b2:	696c      	ldr	r4, [r5, #20]
   187b4:	f7f4 fa86 	bl	ccc4 <TfLiteTypeGetName>
   187b8:	f818 3009 	ldrb.w	r3, [r8, r9]
   187bc:	4602      	mov	r2, r0
   187be:	4902      	ldr	r1, [pc, #8]	; (187c8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x4f0>)
   187c0:	4628      	mov	r0, r5
   187c2:	47a0      	blx	r4
      return kTfLiteError;
   187c4:	2001      	movs	r0, #1
   187c6:	e6c0      	b.n	1854a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x272>
   187c8:	000349d0 	.word	0x000349d0

000187cc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus LessEval(TfLiteContext* context, TfLiteNode* node) {
   187cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187d0:	ed2d 8b02 	vpush	{d8}
  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
   187d4:	680b      	ldr	r3, [r1, #0]
   187d6:	f8d0 8008 	ldr.w	r8, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
   187da:	685e      	ldr	r6, [r3, #4]
   187dc:	689c      	ldr	r4, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
   187de:	684b      	ldr	r3, [r1, #4]
  return &context->tensors[node->inputs->data[index]];
   187e0:	ea4f 1986 	mov.w	r9, r6, lsl #6
  return &context->tensors[node->outputs->data[index]];
   187e4:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->inputs->data[index]];
   187e6:	eb08 1686 	add.w	r6, r8, r6, lsl #6
   187ea:	eb08 1484 	add.w	r4, r8, r4, lsl #6
TfLiteStatus LessEval(TfLiteContext* context, TfLiteNode* node) {
   187ee:	4605      	mov	r5, r0
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   187f0:	4621      	mov	r1, r4
   187f2:	4630      	mov	r0, r6
TfLiteStatus LessEval(TfLiteContext* context, TfLiteNode* node) {
   187f4:	b0ab      	sub	sp, #172	; 0xac
  return &context->tensors[node->outputs->data[index]];
   187f6:	eb08 1a83 	add.w	sl, r8, r3, lsl #6
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   187fa:	f017 fc82 	bl	30102 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
   187fe:	f080 0001 	eor.w	r0, r0, #1
   18802:	b2c7      	uxtb	r7, r0
  switch (input1->type) {
   18804:	f818 0009 	ldrb.w	r0, [r8, r9]
   18808:	1e43      	subs	r3, r0, #1
   1880a:	2b08      	cmp	r3, #8
   1880c:	f200 824b 	bhi.w	18ca6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x4da>
   18810:	e8df f013 	tbh	[pc, r3, lsl #1]
   18814:	00680009 	.word	0x00680009
   18818:	00b7011a 	.word	0x00b7011a
   1881c:	02490249 	.word	0x02490249
   18820:	02490249 	.word	0x02490249
   18824:	01b1      	.short	0x01b1
      TF_LITE_COMPARISON(float, Less, requires_broadcast);
   18826:	4631      	mov	r1, r6
   18828:	ad1c      	add	r5, sp, #112	; 0x70
   1882a:	b31f      	cbz	r7, 18874 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0xa8>
   1882c:	a810      	add	r0, sp, #64	; 0x40
   1882e:	f00e ff05 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18832:	4621      	mov	r1, r4
   18834:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18836:	6876      	ldr	r6, [r6, #4]
   18838:	f00e ff00 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1883c:	b104      	cbz	r4, 18840 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x74>
   1883e:	6864      	ldr	r4, [r4, #4]
   18840:	4651      	mov	r1, sl
   18842:	4628      	mov	r0, r5
   18844:	f00e fefa 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18848:	f1ba 0f00 	cmp.w	sl, #0
   1884c:	d001      	beq.n	18852 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x86>
   1884e:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Less);
   18852:	4632      	mov	r2, r6
   18854:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   18858:	9400      	str	r4, [sp, #0]
   1885a:	ab16      	add	r3, sp, #88	; 0x58
   1885c:	a910      	add	r1, sp, #64	; 0x40
   1885e:	a822      	add	r0, sp, #136	; 0x88
   18860:	f010 f948 	bl	28af4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_6LessFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
TF_LITE_QUANTIZE_COMPARISON(Less);
   18864:	4628      	mov	r0, r5
   18866:	f00e fea4 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   1886a:	a816      	add	r0, sp, #88	; 0x58
   1886c:	f00e fea1 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   18870:	a810      	add	r0, sp, #64	; 0x40
   18872:	e0e1      	b.n	18a38 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x26c>
      TF_LITE_COMPARISON(float, Less, requires_broadcast);
   18874:	a816      	add	r0, sp, #88	; 0x58
   18876:	f00e fee1 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1887a:	4621      	mov	r1, r4
   1887c:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1887e:	f8d6 8004 	ldr.w	r8, [r6, #4]
   18882:	f00e fedb 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18886:	b104      	cbz	r4, 1888a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0xbe>
   18888:	6864      	ldr	r4, [r4, #4]
   1888a:	4651      	mov	r1, sl
   1888c:	a822      	add	r0, sp, #136	; 0x88
   1888e:	f00e fed5 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18892:	f1ba 0f00 	cmp.w	sl, #0
   18896:	d001      	beq.n	1889c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0xd0>
   18898:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   1889c:	4629      	mov	r1, r5
   1889e:	aa22      	add	r2, sp, #136	; 0x88
   188a0:	a816      	add	r0, sp, #88	; 0x58
   188a2:	f00f ff0e 	bl	286c2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
   188a6:	4641      	mov	r1, r8
  const int64_t flatsize =
   188a8:	4606      	mov	r6, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   188aa:	2200      	movs	r2, #0
   188ac:	2300      	movs	r3, #0
  const int64_t flatsize =
   188ae:	17c7      	asrs	r7, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
   188b0:	42b2      	cmp	r2, r6
   188b2:	eb73 0007 	sbcs.w	r0, r3, r7
   188b6:	f280 80b8 	bge.w	18a2a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x25e>
    output_data[i] = F(input1_data[i], input2_data[i]);
   188ba:	ecb1 7a01 	vldmia	r1!, {s14}
   188be:	ecf4 7a01 	vldmia	r4!, {s15}
  return lhs < rhs;
   188c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
   188c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   188ca:	bf4c      	ite	mi
   188cc:	f04f 0c01 	movmi.w	ip, #1
   188d0:	f04f 0c00 	movpl.w	ip, #0
    output_data[i] = F(input1_data[i], input2_data[i]);
   188d4:	eb0a 0002 	add.w	r0, sl, r2
  for (int64_t i = 0; i < flatsize; ++i) {
   188d8:	3201      	adds	r2, #1
  return lhs < rhs;
   188da:	f880 c000 	strb.w	ip, [r0]
  for (int64_t i = 0; i < flatsize; ++i) {
   188de:	f143 0300 	adc.w	r3, r3, #0
   188e2:	e7e5      	b.n	188b0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0xe4>
      TF_LITE_COMPARISON(int32_t, Less, requires_broadcast);
   188e4:	4631      	mov	r1, r6
   188e6:	ad1c      	add	r5, sp, #112	; 0x70
   188e8:	b1e7      	cbz	r7, 18924 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x158>
   188ea:	a810      	add	r0, sp, #64	; 0x40
   188ec:	f00e fea6 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   188f0:	4621      	mov	r1, r4
   188f2:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   188f4:	6876      	ldr	r6, [r6, #4]
   188f6:	f00e fea1 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   188fa:	b104      	cbz	r4, 188fe <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x132>
   188fc:	6864      	ldr	r4, [r4, #4]
   188fe:	4651      	mov	r1, sl
   18900:	4628      	mov	r0, r5
   18902:	f00e fe9b 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18906:	f1ba 0f00 	cmp.w	sl, #0
   1890a:	d001      	beq.n	18910 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x144>
   1890c:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Less);
   18910:	4632      	mov	r2, r6
   18912:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   18916:	9400      	str	r4, [sp, #0]
   18918:	ab16      	add	r3, sp, #88	; 0x58
   1891a:	a910      	add	r1, sp, #64	; 0x40
   1891c:	a822      	add	r0, sp, #136	; 0x88
   1891e:	f010 fd0b 	bl	29338 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   18922:	e79f      	b.n	18864 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x98>
   18924:	a816      	add	r0, sp, #88	; 0x58
   18926:	f00e fe89 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1892a:	4621      	mov	r1, r4
   1892c:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1892e:	6876      	ldr	r6, [r6, #4]
   18930:	f00e fe84 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18934:	b104      	cbz	r4, 18938 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x16c>
   18936:	6864      	ldr	r4, [r4, #4]
   18938:	4651      	mov	r1, sl
   1893a:	a822      	add	r0, sp, #136	; 0x88
   1893c:	f00e fe7e 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18940:	f1ba 0f00 	cmp.w	sl, #0
   18944:	d001      	beq.n	1894a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x17e>
   18946:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   1894a:	aa22      	add	r2, sp, #136	; 0x88
   1894c:	4629      	mov	r1, r5
   1894e:	a816      	add	r0, sp, #88	; 0x58
   18950:	f00f feb7 	bl	286c2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   18954:	2200      	movs	r2, #0
  const int64_t flatsize =
   18956:	4680      	mov	r8, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   18958:	2300      	movs	r3, #0
  const int64_t flatsize =
   1895a:	ea4f 79e0 	mov.w	r9, r0, asr #31
  for (int64_t i = 0; i < flatsize; ++i) {
   1895e:	4542      	cmp	r2, r8
   18960:	eb73 0109 	sbcs.w	r1, r3, r9
   18964:	da61      	bge.n	18a2a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x25e>
  return lhs < rhs;
   18966:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
   1896a:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
   1896e:	4281      	cmp	r1, r0
   18970:	bfac      	ite	ge
   18972:	2100      	movge	r1, #0
   18974:	2101      	movlt	r1, #1
   18976:	f80a 1002 	strb.w	r1, [sl, r2]
  for (int64_t i = 0; i < flatsize; ++i) {
   1897a:	3201      	adds	r2, #1
   1897c:	f143 0300 	adc.w	r3, r3, #0
   18980:	e7ed      	b.n	1895e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x192>
      TF_LITE_COMPARISON(int64_t, Less, requires_broadcast);
   18982:	4631      	mov	r1, r6
   18984:	ad1c      	add	r5, sp, #112	; 0x70
   18986:	b1e7      	cbz	r7, 189c2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x1f6>
   18988:	a810      	add	r0, sp, #64	; 0x40
   1898a:	f00e fe57 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1898e:	4621      	mov	r1, r4
   18990:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18992:	6876      	ldr	r6, [r6, #4]
   18994:	f00e fe52 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18998:	b104      	cbz	r4, 1899c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x1d0>
   1899a:	6864      	ldr	r4, [r4, #4]
   1899c:	4651      	mov	r1, sl
   1899e:	4628      	mov	r0, r5
   189a0:	f00e fe4c 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   189a4:	f1ba 0f00 	cmp.w	sl, #0
   189a8:	d001      	beq.n	189ae <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x1e2>
   189aa:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Less);
   189ae:	4632      	mov	r2, r6
   189b0:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   189b4:	9400      	str	r4, [sp, #0]
   189b6:	ab16      	add	r3, sp, #88	; 0x58
   189b8:	a910      	add	r1, sp, #64	; 0x40
   189ba:	a822      	add	r0, sp, #136	; 0x88
   189bc:	f010 fd11 	bl	293e2 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_6LessFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   189c0:	e750      	b.n	18864 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x98>
   189c2:	a816      	add	r0, sp, #88	; 0x58
   189c4:	f00e fe3a 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   189c8:	4621      	mov	r1, r4
   189ca:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   189cc:	6876      	ldr	r6, [r6, #4]
   189ce:	f00e fe35 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   189d2:	b104      	cbz	r4, 189d6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x20a>
   189d4:	6864      	ldr	r4, [r4, #4]
   189d6:	4651      	mov	r1, sl
   189d8:	a822      	add	r0, sp, #136	; 0x88
   189da:	f00e fe2f 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   189de:	f1ba 0f00 	cmp.w	sl, #0
   189e2:	d001      	beq.n	189e8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x21c>
   189e4:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   189e8:	4629      	mov	r1, r5
   189ea:	aa22      	add	r2, sp, #136	; 0x88
   189ec:	a816      	add	r0, sp, #88	; 0x58
   189ee:	f00f fe68 	bl	286c2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   189f2:	2200      	movs	r2, #0
   189f4:	2300      	movs	r3, #0
  const int64_t flatsize =
   189f6:	17c1      	asrs	r1, r0, #31
   189f8:	f1a6 0c08 	sub.w	ip, r6, #8
   189fc:	3c08      	subs	r4, #8
  for (int64_t i = 0; i < flatsize; ++i) {
   189fe:	4282      	cmp	r2, r0
   18a00:	eb73 0601 	sbcs.w	r6, r3, r1
   18a04:	da11      	bge.n	18a2a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x25e>
  return lhs < rhs;
   18a06:	e9fc 8902 	ldrd	r8, r9, [ip, #8]!
   18a0a:	e9f4 6702 	ldrd	r6, r7, [r4, #8]!
   18a0e:	45b0      	cmp	r8, r6
   18a10:	eb79 0607 	sbcs.w	r6, r9, r7
   18a14:	bfb4      	ite	lt
   18a16:	2601      	movlt	r6, #1
   18a18:	2600      	movge	r6, #0
    output_data[i] = F(input1_data[i], input2_data[i]);
   18a1a:	eb0a 0e02 	add.w	lr, sl, r2
  for (int64_t i = 0; i < flatsize; ++i) {
   18a1e:	3201      	adds	r2, #1
  return lhs < rhs;
   18a20:	f88e 6000 	strb.w	r6, [lr]
  for (int64_t i = 0; i < flatsize; ++i) {
   18a24:	f143 0300 	adc.w	r3, r3, #0
   18a28:	e7e9      	b.n	189fe <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x232>
   18a2a:	a822      	add	r0, sp, #136	; 0x88
   18a2c:	f00e fdc1 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   18a30:	4628      	mov	r0, r5
   18a32:	f00e fdbe 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   18a36:	a816      	add	r0, sp, #88	; 0x58
TF_LITE_QUANTIZE_COMPARISON(Less);
   18a38:	f00e fdbb 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   18a3c:	2000      	movs	r0, #0
}
   18a3e:	b02b      	add	sp, #172	; 0xac
   18a40:	ecbd 8b02 	vpop	{d8}
   18a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
TF_LITE_QUANTIZE_COMPARISON(Less);
   18a48:	6933      	ldr	r3, [r6, #16]
   18a4a:	68f0      	ldr	r0, [r6, #12]
   18a4c:	f1c3 0800 	rsb	r8, r3, #0
   18a50:	f7f3 fd5a 	bl	c508 <__aeabi_f2d>
   18a54:	ab0d      	add	r3, sp, #52	; 0x34
   18a56:	aa0c      	add	r2, sp, #48	; 0x30
   18a58:	6925      	ldr	r5, [r4, #16]
   18a5a:	f008 faad 	bl	20fb8 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   18a5e:	68e0      	ldr	r0, [r4, #12]
   18a60:	f7f3 fd52 	bl	c508 <__aeabi_f2d>
   18a64:	ab0f      	add	r3, sp, #60	; 0x3c
   18a66:	aa0e      	add	r2, sp, #56	; 0x38
   18a68:	f008 faa6 	bl	20fb8 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   18a6c:	2308      	movs	r3, #8
   18a6e:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
   18a72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   18a74:	426d      	negs	r5, r5
   18a76:	9324      	str	r3, [sp, #144]	; 0x90
   18a78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18a7a:	4631      	mov	r1, r6
   18a7c:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
   18a80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18a82:	ad1c      	add	r5, sp, #112	; 0x70
   18a84:	9327      	str	r3, [sp, #156]	; 0x9c
   18a86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18a88:	a810      	add	r0, sp, #64	; 0x40
   18a8a:	9328      	str	r3, [sp, #160]	; 0xa0
   18a8c:	b1df      	cbz	r7, 18ac6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x2fa>
   18a8e:	f00e fdd5 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18a92:	6872      	ldr	r2, [r6, #4]
   18a94:	4621      	mov	r1, r4
   18a96:	a816      	add	r0, sp, #88	; 0x58
   18a98:	9204      	str	r2, [sp, #16]
   18a9a:	f00e fdcf 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18a9e:	4651      	mov	r1, sl
   18aa0:	4628      	mov	r0, r5
   18aa2:	6864      	ldr	r4, [r4, #4]
   18aa4:	f00e fdca 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18aa8:	9a04      	ldr	r2, [sp, #16]
   18aaa:	f1ba 0f00 	cmp.w	sl, #0
   18aae:	d001      	beq.n	18ab4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x2e8>
   18ab0:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Less);
   18ab4:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   18ab8:	9400      	str	r4, [sp, #0]
   18aba:	ab16      	add	r3, sp, #88	; 0x58
   18abc:	a910      	add	r1, sp, #64	; 0x40
   18abe:	a822      	add	r0, sp, #136	; 0x88
   18ac0:	f011 f9fc 	bl	29ebc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   18ac4:	e6ce      	b.n	18864 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x98>
   18ac6:	f00e fdb9 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18aca:	6873      	ldr	r3, [r6, #4]
   18acc:	4621      	mov	r1, r4
   18ace:	a816      	add	r0, sp, #88	; 0x58
   18ad0:	9304      	str	r3, [sp, #16]
   18ad2:	f00e fdb3 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18ad6:	6863      	ldr	r3, [r4, #4]
   18ad8:	4651      	mov	r1, sl
   18ada:	4628      	mov	r0, r5
   18adc:	9305      	str	r3, [sp, #20]
   18ade:	f00e fdad 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18ae2:	f1ba 0f00 	cmp.w	sl, #0
   18ae6:	d001      	beq.n	18aec <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x320>
   18ae8:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
   18aec:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
   18af0:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   18af2:	9b24      	ldr	r3, [sp, #144]	; 0x90
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   18af4:	aa1c      	add	r2, sp, #112	; 0x70
   18af6:	a916      	add	r1, sp, #88	; 0x58
   18af8:	a810      	add	r0, sp, #64	; 0x40
  int32 input1_multiplier = op_params.input1_multiplier;
   18afa:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
   18afe:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
  int input2_shift = op_params.input2_shift;
   18b02:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  int32 input2_offset = op_params.input2_offset;
   18b06:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   18b08:	f00f fddb 	bl	286c2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
   18b0c:	4602      	mov	r2, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   18b0e:	f04f 0800 	mov.w	r8, #0
   18b12:	f04f 0900 	mov.w	r9, #0
  const int64_t flatsize =
   18b16:	17c3      	asrs	r3, r0, #31
   18b18:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
   18b1c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   18b20:	4590      	cmp	r8, r2
   18b22:	eb79 0303 	sbcs.w	r3, r9, r3
   18b26:	f280 80bc 	bge.w	18ca2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x4d6>
    const int32 input2_val = input2_offset + input2_data[i];
   18b2a:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
   18b2c:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
   18b2e:	f812 5008 	ldrb.w	r5, [r2, r8]
   18b32:	9a07      	ldr	r2, [sp, #28]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18b34:	ee18 1a10 	vmov	r1, s16
    const int32 input2_val = input2_offset + input2_data[i];
   18b38:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
   18b3a:	9a04      	ldr	r2, [sp, #16]
   18b3c:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   18b40:	f812 0008 	ldrb.w	r0, [r2, r8]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18b44:	465a      	mov	r2, fp
    const int32 input1_val = input1_offset + input1_data[i];
   18b46:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18b48:	40b0      	lsls	r0, r6
   18b4a:	f7fe f84b 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   18b4e:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18b50:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18b52:	4622      	mov	r2, r4
   18b54:	4639      	mov	r1, r7
   18b56:	4628      	mov	r0, r5
   18b58:	f7fe f844 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs < rhs;
   18b5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18b5e:	4283      	cmp	r3, r0
   18b60:	bfac      	ite	ge
   18b62:	2000      	movge	r0, #0
   18b64:	2001      	movlt	r0, #1
   18b66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  for (int64_t i = 0; i < flatsize; ++i) {
   18b68:	f118 0801 	adds.w	r8, r8, #1
  return lhs < rhs;
   18b6c:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   18b70:	f149 0900 	adc.w	r9, r9, #0
   18b74:	e7d2      	b.n	18b1c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x350>
   18b76:	6933      	ldr	r3, [r6, #16]
   18b78:	68f0      	ldr	r0, [r6, #12]
   18b7a:	f1c3 0800 	rsb	r8, r3, #0
   18b7e:	f7f3 fcc3 	bl	c508 <__aeabi_f2d>
   18b82:	ab0d      	add	r3, sp, #52	; 0x34
   18b84:	aa0c      	add	r2, sp, #48	; 0x30
   18b86:	6925      	ldr	r5, [r4, #16]
   18b88:	f008 fa16 	bl	20fb8 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   18b8c:	68e0      	ldr	r0, [r4, #12]
   18b8e:	f7f3 fcbb 	bl	c508 <__aeabi_f2d>
   18b92:	ab0f      	add	r3, sp, #60	; 0x3c
   18b94:	aa0e      	add	r2, sp, #56	; 0x38
   18b96:	f008 fa0f 	bl	20fb8 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   18b9a:	2308      	movs	r3, #8
   18b9c:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
   18ba0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   18ba2:	426d      	negs	r5, r5
   18ba4:	9324      	str	r3, [sp, #144]	; 0x90
   18ba6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18ba8:	4631      	mov	r1, r6
   18baa:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
   18bae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18bb0:	ad1c      	add	r5, sp, #112	; 0x70
   18bb2:	9327      	str	r3, [sp, #156]	; 0x9c
   18bb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18bb6:	a810      	add	r0, sp, #64	; 0x40
   18bb8:	9328      	str	r3, [sp, #160]	; 0xa0
   18bba:	b1df      	cbz	r7, 18bf4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x428>
   18bbc:	f00e fd3e 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18bc0:	6872      	ldr	r2, [r6, #4]
   18bc2:	4621      	mov	r1, r4
   18bc4:	a816      	add	r0, sp, #88	; 0x58
   18bc6:	9204      	str	r2, [sp, #16]
   18bc8:	f00e fd38 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18bcc:	4651      	mov	r1, sl
   18bce:	4628      	mov	r0, r5
   18bd0:	6864      	ldr	r4, [r4, #4]
   18bd2:	f00e fd33 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18bd6:	9a04      	ldr	r2, [sp, #16]
   18bd8:	f1ba 0f00 	cmp.w	sl, #0
   18bdc:	d001      	beq.n	18be2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x416>
   18bde:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Less);
   18be2:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   18be6:	9400      	str	r4, [sp, #0]
   18be8:	ab16      	add	r3, sp, #88	; 0x58
   18bea:	a910      	add	r1, sp, #64	; 0x40
   18bec:	a822      	add	r0, sp, #136	; 0x88
   18bee:	f011 f9f1 	bl	29fd4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   18bf2:	e637      	b.n	18864 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x98>
   18bf4:	f00e fd22 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18bf8:	6873      	ldr	r3, [r6, #4]
   18bfa:	4621      	mov	r1, r4
   18bfc:	a816      	add	r0, sp, #88	; 0x58
   18bfe:	9304      	str	r3, [sp, #16]
   18c00:	f00e fd1c 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18c04:	6863      	ldr	r3, [r4, #4]
   18c06:	4651      	mov	r1, sl
   18c08:	4628      	mov	r0, r5
   18c0a:	9305      	str	r3, [sp, #20]
   18c0c:	f00e fd16 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18c10:	f1ba 0f00 	cmp.w	sl, #0
   18c14:	d001      	beq.n	18c1a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x44e>
   18c16:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
   18c1a:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
   18c1e:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   18c20:	9b24      	ldr	r3, [sp, #144]	; 0x90
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   18c22:	aa1c      	add	r2, sp, #112	; 0x70
   18c24:	a916      	add	r1, sp, #88	; 0x58
   18c26:	a810      	add	r0, sp, #64	; 0x40
  int32 input1_multiplier = op_params.input1_multiplier;
   18c28:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
   18c2c:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
  int input2_shift = op_params.input2_shift;
   18c30:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  int32 input2_offset = op_params.input2_offset;
   18c34:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   18c36:	f00f fd44 	bl	286c2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
   18c3a:	4602      	mov	r2, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   18c3c:	f04f 0800 	mov.w	r8, #0
   18c40:	f04f 0900 	mov.w	r9, #0
  const int64_t flatsize =
   18c44:	17c3      	asrs	r3, r0, #31
   18c46:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
   18c4a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   18c4e:	4590      	cmp	r8, r2
   18c50:	eb79 0303 	sbcs.w	r3, r9, r3
   18c54:	da25      	bge.n	18ca2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x4d6>
    const int32 input2_val = input2_offset + input2_data[i];
   18c56:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
   18c58:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
   18c5a:	f912 5008 	ldrsb.w	r5, [r2, r8]
   18c5e:	9a07      	ldr	r2, [sp, #28]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18c60:	ee18 1a10 	vmov	r1, s16
    const int32 input2_val = input2_offset + input2_data[i];
   18c64:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
   18c66:	9a04      	ldr	r2, [sp, #16]
   18c68:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   18c6c:	f912 0008 	ldrsb.w	r0, [r2, r8]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18c70:	465a      	mov	r2, fp
    const int32 input1_val = input1_offset + input1_data[i];
   18c72:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18c74:	40b0      	lsls	r0, r6
   18c76:	f7fd ffb5 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   18c7a:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18c7c:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18c7e:	4622      	mov	r2, r4
   18c80:	4639      	mov	r1, r7
   18c82:	4628      	mov	r0, r5
   18c84:	f7fd ffae 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs < rhs;
   18c88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18c8a:	4283      	cmp	r3, r0
   18c8c:	bfac      	ite	ge
   18c8e:	2000      	movge	r0, #0
   18c90:	2001      	movlt	r0, #1
   18c92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  for (int64_t i = 0; i < flatsize; ++i) {
   18c94:	f118 0801 	adds.w	r8, r8, #1
  return lhs < rhs;
   18c98:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   18c9c:	f149 0900 	adc.w	r9, r9, #0
   18ca0:	e7d3      	b.n	18c4a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x47e>
   18ca2:	a81c      	add	r0, sp, #112	; 0x70
   18ca4:	e5df      	b.n	18866 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x9a>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   18ca6:	696c      	ldr	r4, [r5, #20]
   18ca8:	f7f4 f80c 	bl	ccc4 <TfLiteTypeGetName>
   18cac:	f818 3009 	ldrb.w	r3, [r8, r9]
   18cb0:	4602      	mov	r2, r0
   18cb2:	4902      	ldr	r1, [pc, #8]	; (18cbc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x4f0>)
   18cb4:	4628      	mov	r0, r5
   18cb6:	47a0      	blx	r4
      return kTfLiteError;
   18cb8:	2001      	movs	r0, #1
   18cba:	e6c0      	b.n	18a3e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x272>
   18cbc:	000349d0 	.word	0x000349d0

00018cc0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus LessEqualEval(TfLiteContext* context, TfLiteNode* node) {
   18cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18cc4:	ed2d 8b02 	vpush	{d8}
  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
   18cc8:	680b      	ldr	r3, [r1, #0]
   18cca:	f8d0 8008 	ldr.w	r8, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
   18cce:	685e      	ldr	r6, [r3, #4]
   18cd0:	689c      	ldr	r4, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
   18cd2:	684b      	ldr	r3, [r1, #4]
  return &context->tensors[node->inputs->data[index]];
   18cd4:	ea4f 1986 	mov.w	r9, r6, lsl #6
  return &context->tensors[node->outputs->data[index]];
   18cd8:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->inputs->data[index]];
   18cda:	eb08 1686 	add.w	r6, r8, r6, lsl #6
   18cde:	eb08 1484 	add.w	r4, r8, r4, lsl #6
TfLiteStatus LessEqualEval(TfLiteContext* context, TfLiteNode* node) {
   18ce2:	4605      	mov	r5, r0
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   18ce4:	4621      	mov	r1, r4
   18ce6:	4630      	mov	r0, r6
TfLiteStatus LessEqualEval(TfLiteContext* context, TfLiteNode* node) {
   18ce8:	b0ab      	sub	sp, #172	; 0xac
  return &context->tensors[node->outputs->data[index]];
   18cea:	eb08 1a83 	add.w	sl, r8, r3, lsl #6
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   18cee:	f017 fa08 	bl	30102 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
   18cf2:	f080 0001 	eor.w	r0, r0, #1
   18cf6:	b2c7      	uxtb	r7, r0
  switch (input1->type) {
   18cf8:	f818 0009 	ldrb.w	r0, [r8, r9]
   18cfc:	1e43      	subs	r3, r0, #1
   18cfe:	2b08      	cmp	r3, #8
   18d00:	f200 824b 	bhi.w	1919a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x4da>
   18d04:	e8df f013 	tbh	[pc, r3, lsl #1]
   18d08:	00680009 	.word	0x00680009
   18d0c:	00b7011a 	.word	0x00b7011a
   18d10:	02490249 	.word	0x02490249
   18d14:	02490249 	.word	0x02490249
   18d18:	01b1      	.short	0x01b1
      TF_LITE_COMPARISON(float, LessEqual, requires_broadcast);
   18d1a:	4631      	mov	r1, r6
   18d1c:	ad1c      	add	r5, sp, #112	; 0x70
   18d1e:	b31f      	cbz	r7, 18d68 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0xa8>
   18d20:	a810      	add	r0, sp, #64	; 0x40
   18d22:	f00e fc8b 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18d26:	4621      	mov	r1, r4
   18d28:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18d2a:	6876      	ldr	r6, [r6, #4]
   18d2c:	f00e fc86 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18d30:	b104      	cbz	r4, 18d34 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x74>
   18d32:	6864      	ldr	r4, [r4, #4]
   18d34:	4651      	mov	r1, sl
   18d36:	4628      	mov	r0, r5
   18d38:	f00e fc80 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18d3c:	f1ba 0f00 	cmp.w	sl, #0
   18d40:	d001      	beq.n	18d46 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x86>
   18d42:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(LessEqual);
   18d46:	4632      	mov	r2, r6
   18d48:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   18d4c:	9400      	str	r4, [sp, #0]
   18d4e:	ab16      	add	r3, sp, #88	; 0x58
   18d50:	a910      	add	r1, sp, #64	; 0x40
   18d52:	a822      	add	r0, sp, #136	; 0x88
   18d54:	f00f ff2a 	bl	28bac <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_11LessEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
TF_LITE_QUANTIZE_COMPARISON(LessEqual);
   18d58:	4628      	mov	r0, r5
   18d5a:	f00e fc2a 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   18d5e:	a816      	add	r0, sp, #88	; 0x58
   18d60:	f00e fc27 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   18d64:	a810      	add	r0, sp, #64	; 0x40
   18d66:	e0e1      	b.n	18f2c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x26c>
      TF_LITE_COMPARISON(float, LessEqual, requires_broadcast);
   18d68:	a816      	add	r0, sp, #88	; 0x58
   18d6a:	f00e fc67 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18d6e:	4621      	mov	r1, r4
   18d70:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18d72:	f8d6 8004 	ldr.w	r8, [r6, #4]
   18d76:	f00e fc61 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18d7a:	b104      	cbz	r4, 18d7e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0xbe>
   18d7c:	6864      	ldr	r4, [r4, #4]
   18d7e:	4651      	mov	r1, sl
   18d80:	a822      	add	r0, sp, #136	; 0x88
   18d82:	f00e fc5b 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18d86:	f1ba 0f00 	cmp.w	sl, #0
   18d8a:	d001      	beq.n	18d90 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0xd0>
   18d8c:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   18d90:	4629      	mov	r1, r5
   18d92:	aa22      	add	r2, sp, #136	; 0x88
   18d94:	a816      	add	r0, sp, #88	; 0x58
   18d96:	f00f fc94 	bl	286c2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
   18d9a:	4641      	mov	r1, r8
  const int64_t flatsize =
   18d9c:	4606      	mov	r6, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   18d9e:	2200      	movs	r2, #0
   18da0:	2300      	movs	r3, #0
  const int64_t flatsize =
   18da2:	17c7      	asrs	r7, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
   18da4:	42b2      	cmp	r2, r6
   18da6:	eb73 0007 	sbcs.w	r0, r3, r7
   18daa:	f280 80b8 	bge.w	18f1e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x25e>
    output_data[i] = F(input1_data[i], input2_data[i]);
   18dae:	ecb1 7a01 	vldmia	r1!, {s14}
   18db2:	ecf4 7a01 	vldmia	r4!, {s15}
  return lhs <= rhs;
   18db6:	eeb4 7ae7 	vcmpe.f32	s14, s15
   18dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18dbe:	bf94      	ite	ls
   18dc0:	f04f 0c01 	movls.w	ip, #1
   18dc4:	f04f 0c00 	movhi.w	ip, #0
    output_data[i] = F(input1_data[i], input2_data[i]);
   18dc8:	eb0a 0002 	add.w	r0, sl, r2
  for (int64_t i = 0; i < flatsize; ++i) {
   18dcc:	3201      	adds	r2, #1
  return lhs <= rhs;
   18dce:	f880 c000 	strb.w	ip, [r0]
  for (int64_t i = 0; i < flatsize; ++i) {
   18dd2:	f143 0300 	adc.w	r3, r3, #0
   18dd6:	e7e5      	b.n	18da4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0xe4>
      TF_LITE_COMPARISON(int32_t, LessEqual, requires_broadcast);
   18dd8:	4631      	mov	r1, r6
   18dda:	ad1c      	add	r5, sp, #112	; 0x70
   18ddc:	b1e7      	cbz	r7, 18e18 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x158>
   18dde:	a810      	add	r0, sp, #64	; 0x40
   18de0:	f00e fc2c 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18de4:	4621      	mov	r1, r4
   18de6:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18de8:	6876      	ldr	r6, [r6, #4]
   18dea:	f00e fc27 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18dee:	b104      	cbz	r4, 18df2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x132>
   18df0:	6864      	ldr	r4, [r4, #4]
   18df2:	4651      	mov	r1, sl
   18df4:	4628      	mov	r0, r5
   18df6:	f00e fc21 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18dfa:	f1ba 0f00 	cmp.w	sl, #0
   18dfe:	d001      	beq.n	18e04 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x144>
   18e00:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(LessEqual);
   18e04:	4632      	mov	r2, r6
   18e06:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   18e0a:	9400      	str	r4, [sp, #0]
   18e0c:	ab16      	add	r3, sp, #88	; 0x58
   18e0e:	a910      	add	r1, sp, #64	; 0x40
   18e10:	a822      	add	r0, sp, #136	; 0x88
   18e12:	f010 fb43 	bl	2949c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   18e16:	e79f      	b.n	18d58 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
   18e18:	a816      	add	r0, sp, #88	; 0x58
   18e1a:	f00e fc0f 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18e1e:	4621      	mov	r1, r4
   18e20:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18e22:	6876      	ldr	r6, [r6, #4]
   18e24:	f00e fc0a 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18e28:	b104      	cbz	r4, 18e2c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x16c>
   18e2a:	6864      	ldr	r4, [r4, #4]
   18e2c:	4651      	mov	r1, sl
   18e2e:	a822      	add	r0, sp, #136	; 0x88
   18e30:	f00e fc04 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18e34:	f1ba 0f00 	cmp.w	sl, #0
   18e38:	d001      	beq.n	18e3e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x17e>
   18e3a:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   18e3e:	aa22      	add	r2, sp, #136	; 0x88
   18e40:	4629      	mov	r1, r5
   18e42:	a816      	add	r0, sp, #88	; 0x58
   18e44:	f00f fc3d 	bl	286c2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   18e48:	2200      	movs	r2, #0
  const int64_t flatsize =
   18e4a:	4680      	mov	r8, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   18e4c:	2300      	movs	r3, #0
  const int64_t flatsize =
   18e4e:	ea4f 79e0 	mov.w	r9, r0, asr #31
  for (int64_t i = 0; i < flatsize; ++i) {
   18e52:	4542      	cmp	r2, r8
   18e54:	eb73 0109 	sbcs.w	r1, r3, r9
   18e58:	da61      	bge.n	18f1e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x25e>
  return lhs <= rhs;
   18e5a:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
   18e5e:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
   18e62:	4281      	cmp	r1, r0
   18e64:	bfcc      	ite	gt
   18e66:	2100      	movgt	r1, #0
   18e68:	2101      	movle	r1, #1
   18e6a:	f80a 1002 	strb.w	r1, [sl, r2]
  for (int64_t i = 0; i < flatsize; ++i) {
   18e6e:	3201      	adds	r2, #1
   18e70:	f143 0300 	adc.w	r3, r3, #0
   18e74:	e7ed      	b.n	18e52 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x192>
      TF_LITE_COMPARISON(int64_t, LessEqual, requires_broadcast);
   18e76:	4631      	mov	r1, r6
   18e78:	ad1c      	add	r5, sp, #112	; 0x70
   18e7a:	b1e7      	cbz	r7, 18eb6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x1f6>
   18e7c:	a810      	add	r0, sp, #64	; 0x40
   18e7e:	f00e fbdd 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18e82:	4621      	mov	r1, r4
   18e84:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18e86:	6876      	ldr	r6, [r6, #4]
   18e88:	f00e fbd8 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18e8c:	b104      	cbz	r4, 18e90 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x1d0>
   18e8e:	6864      	ldr	r4, [r4, #4]
   18e90:	4651      	mov	r1, sl
   18e92:	4628      	mov	r0, r5
   18e94:	f00e fbd2 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18e98:	f1ba 0f00 	cmp.w	sl, #0
   18e9c:	d001      	beq.n	18ea2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x1e2>
   18e9e:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(LessEqual);
   18ea2:	4632      	mov	r2, r6
   18ea4:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   18ea8:	9400      	str	r4, [sp, #0]
   18eaa:	ab16      	add	r3, sp, #88	; 0x58
   18eac:	a910      	add	r1, sp, #64	; 0x40
   18eae:	a822      	add	r0, sp, #136	; 0x88
   18eb0:	f010 fb49 	bl	29546 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_11LessEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   18eb4:	e750      	b.n	18d58 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
   18eb6:	a816      	add	r0, sp, #88	; 0x58
   18eb8:	f00e fbc0 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18ebc:	4621      	mov	r1, r4
   18ebe:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18ec0:	6876      	ldr	r6, [r6, #4]
   18ec2:	f00e fbbb 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18ec6:	b104      	cbz	r4, 18eca <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x20a>
   18ec8:	6864      	ldr	r4, [r4, #4]
   18eca:	4651      	mov	r1, sl
   18ecc:	a822      	add	r0, sp, #136	; 0x88
   18ece:	f00e fbb5 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18ed2:	f1ba 0f00 	cmp.w	sl, #0
   18ed6:	d001      	beq.n	18edc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x21c>
   18ed8:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   18edc:	4629      	mov	r1, r5
   18ede:	aa22      	add	r2, sp, #136	; 0x88
   18ee0:	a816      	add	r0, sp, #88	; 0x58
   18ee2:	f00f fbee 	bl	286c2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   18ee6:	2200      	movs	r2, #0
   18ee8:	2300      	movs	r3, #0
  const int64_t flatsize =
   18eea:	17c1      	asrs	r1, r0, #31
   18eec:	f1a6 0c08 	sub.w	ip, r6, #8
   18ef0:	3c08      	subs	r4, #8
  for (int64_t i = 0; i < flatsize; ++i) {
   18ef2:	4282      	cmp	r2, r0
   18ef4:	eb73 0601 	sbcs.w	r6, r3, r1
   18ef8:	da11      	bge.n	18f1e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x25e>
  return lhs <= rhs;
   18efa:	e9fc 6702 	ldrd	r6, r7, [ip, #8]!
   18efe:	e9f4 8902 	ldrd	r8, r9, [r4, #8]!
   18f02:	45b0      	cmp	r8, r6
   18f04:	eb79 0607 	sbcs.w	r6, r9, r7
   18f08:	bfac      	ite	ge
   18f0a:	2601      	movge	r6, #1
   18f0c:	2600      	movlt	r6, #0
    output_data[i] = F(input1_data[i], input2_data[i]);
   18f0e:	eb0a 0e02 	add.w	lr, sl, r2
  for (int64_t i = 0; i < flatsize; ++i) {
   18f12:	3201      	adds	r2, #1
  return lhs <= rhs;
   18f14:	f88e 6000 	strb.w	r6, [lr]
  for (int64_t i = 0; i < flatsize; ++i) {
   18f18:	f143 0300 	adc.w	r3, r3, #0
   18f1c:	e7e9      	b.n	18ef2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x232>
   18f1e:	a822      	add	r0, sp, #136	; 0x88
   18f20:	f00e fb47 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   18f24:	4628      	mov	r0, r5
   18f26:	f00e fb44 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   18f2a:	a816      	add	r0, sp, #88	; 0x58
TF_LITE_QUANTIZE_COMPARISON(LessEqual);
   18f2c:	f00e fb41 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   18f30:	2000      	movs	r0, #0
}
   18f32:	b02b      	add	sp, #172	; 0xac
   18f34:	ecbd 8b02 	vpop	{d8}
   18f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
TF_LITE_QUANTIZE_COMPARISON(LessEqual);
   18f3c:	6933      	ldr	r3, [r6, #16]
   18f3e:	68f0      	ldr	r0, [r6, #12]
   18f40:	f1c3 0800 	rsb	r8, r3, #0
   18f44:	f7f3 fae0 	bl	c508 <__aeabi_f2d>
   18f48:	ab0d      	add	r3, sp, #52	; 0x34
   18f4a:	aa0c      	add	r2, sp, #48	; 0x30
   18f4c:	6925      	ldr	r5, [r4, #16]
   18f4e:	f008 f833 	bl	20fb8 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   18f52:	68e0      	ldr	r0, [r4, #12]
   18f54:	f7f3 fad8 	bl	c508 <__aeabi_f2d>
   18f58:	ab0f      	add	r3, sp, #60	; 0x3c
   18f5a:	aa0e      	add	r2, sp, #56	; 0x38
   18f5c:	f008 f82c 	bl	20fb8 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   18f60:	2308      	movs	r3, #8
   18f62:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
   18f66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   18f68:	426d      	negs	r5, r5
   18f6a:	9324      	str	r3, [sp, #144]	; 0x90
   18f6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18f6e:	4631      	mov	r1, r6
   18f70:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
   18f74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18f76:	ad1c      	add	r5, sp, #112	; 0x70
   18f78:	9327      	str	r3, [sp, #156]	; 0x9c
   18f7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18f7c:	a810      	add	r0, sp, #64	; 0x40
   18f7e:	9328      	str	r3, [sp, #160]	; 0xa0
   18f80:	b1df      	cbz	r7, 18fba <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x2fa>
   18f82:	f00e fb5b 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18f86:	6872      	ldr	r2, [r6, #4]
   18f88:	4621      	mov	r1, r4
   18f8a:	a816      	add	r0, sp, #88	; 0x58
   18f8c:	9204      	str	r2, [sp, #16]
   18f8e:	f00e fb55 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18f92:	4651      	mov	r1, sl
   18f94:	4628      	mov	r0, r5
   18f96:	6864      	ldr	r4, [r4, #4]
   18f98:	f00e fb50 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18f9c:	9a04      	ldr	r2, [sp, #16]
   18f9e:	f1ba 0f00 	cmp.w	sl, #0
   18fa2:	d001      	beq.n	18fa8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x2e8>
   18fa4:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(LessEqual);
   18fa8:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   18fac:	9400      	str	r4, [sp, #0]
   18fae:	ab16      	add	r3, sp, #88	; 0x58
   18fb0:	a910      	add	r1, sp, #64	; 0x40
   18fb2:	a822      	add	r0, sp, #136	; 0x88
   18fb4:	f011 f89a 	bl	2a0ec <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   18fb8:	e6ce      	b.n	18d58 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
   18fba:	f00e fb3f 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18fbe:	6873      	ldr	r3, [r6, #4]
   18fc0:	4621      	mov	r1, r4
   18fc2:	a816      	add	r0, sp, #88	; 0x58
   18fc4:	9304      	str	r3, [sp, #16]
   18fc6:	f00e fb39 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18fca:	6863      	ldr	r3, [r4, #4]
   18fcc:	4651      	mov	r1, sl
   18fce:	4628      	mov	r0, r5
   18fd0:	9305      	str	r3, [sp, #20]
   18fd2:	f00e fb33 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18fd6:	f1ba 0f00 	cmp.w	sl, #0
   18fda:	d001      	beq.n	18fe0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x320>
   18fdc:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
   18fe0:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
   18fe4:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   18fe6:	9b24      	ldr	r3, [sp, #144]	; 0x90
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   18fe8:	aa1c      	add	r2, sp, #112	; 0x70
   18fea:	a916      	add	r1, sp, #88	; 0x58
   18fec:	a810      	add	r0, sp, #64	; 0x40
  int32 input1_multiplier = op_params.input1_multiplier;
   18fee:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
   18ff2:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
  int input2_shift = op_params.input2_shift;
   18ff6:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  int32 input2_offset = op_params.input2_offset;
   18ffa:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   18ffc:	f00f fb61 	bl	286c2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
   19000:	4602      	mov	r2, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   19002:	f04f 0800 	mov.w	r8, #0
   19006:	f04f 0900 	mov.w	r9, #0
  const int64_t flatsize =
   1900a:	17c3      	asrs	r3, r0, #31
   1900c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
   19010:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   19014:	4590      	cmp	r8, r2
   19016:	eb79 0303 	sbcs.w	r3, r9, r3
   1901a:	f280 80bc 	bge.w	19196 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x4d6>
    const int32 input2_val = input2_offset + input2_data[i];
   1901e:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
   19020:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
   19022:	f812 5008 	ldrb.w	r5, [r2, r8]
   19026:	9a07      	ldr	r2, [sp, #28]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   19028:	ee18 1a10 	vmov	r1, s16
    const int32 input2_val = input2_offset + input2_data[i];
   1902c:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
   1902e:	9a04      	ldr	r2, [sp, #16]
   19030:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   19034:	f812 0008 	ldrb.w	r0, [r2, r8]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   19038:	465a      	mov	r2, fp
    const int32 input1_val = input1_offset + input1_data[i];
   1903a:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1903c:	40b0      	lsls	r0, r6
   1903e:	f7fd fdd1 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   19042:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   19044:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   19046:	4622      	mov	r2, r4
   19048:	4639      	mov	r1, r7
   1904a:	4628      	mov	r0, r5
   1904c:	f7fd fdca 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs <= rhs;
   19050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19052:	4283      	cmp	r3, r0
   19054:	bfcc      	ite	gt
   19056:	2000      	movgt	r0, #0
   19058:	2001      	movle	r0, #1
   1905a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  for (int64_t i = 0; i < flatsize; ++i) {
   1905c:	f118 0801 	adds.w	r8, r8, #1
  return lhs <= rhs;
   19060:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   19064:	f149 0900 	adc.w	r9, r9, #0
   19068:	e7d2      	b.n	19010 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x350>
   1906a:	6933      	ldr	r3, [r6, #16]
   1906c:	68f0      	ldr	r0, [r6, #12]
   1906e:	f1c3 0800 	rsb	r8, r3, #0
   19072:	f7f3 fa49 	bl	c508 <__aeabi_f2d>
   19076:	ab0d      	add	r3, sp, #52	; 0x34
   19078:	aa0c      	add	r2, sp, #48	; 0x30
   1907a:	6925      	ldr	r5, [r4, #16]
   1907c:	f007 ff9c 	bl	20fb8 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   19080:	68e0      	ldr	r0, [r4, #12]
   19082:	f7f3 fa41 	bl	c508 <__aeabi_f2d>
   19086:	ab0f      	add	r3, sp, #60	; 0x3c
   19088:	aa0e      	add	r2, sp, #56	; 0x38
   1908a:	f007 ff95 	bl	20fb8 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   1908e:	2308      	movs	r3, #8
   19090:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
   19094:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19096:	426d      	negs	r5, r5
   19098:	9324      	str	r3, [sp, #144]	; 0x90
   1909a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1909c:	4631      	mov	r1, r6
   1909e:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
   190a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   190a4:	ad1c      	add	r5, sp, #112	; 0x70
   190a6:	9327      	str	r3, [sp, #156]	; 0x9c
   190a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   190aa:	a810      	add	r0, sp, #64	; 0x40
   190ac:	9328      	str	r3, [sp, #160]	; 0xa0
   190ae:	b1df      	cbz	r7, 190e8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x428>
   190b0:	f00e fac4 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   190b4:	6872      	ldr	r2, [r6, #4]
   190b6:	4621      	mov	r1, r4
   190b8:	a816      	add	r0, sp, #88	; 0x58
   190ba:	9204      	str	r2, [sp, #16]
   190bc:	f00e fabe 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   190c0:	4651      	mov	r1, sl
   190c2:	4628      	mov	r0, r5
   190c4:	6864      	ldr	r4, [r4, #4]
   190c6:	f00e fab9 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   190ca:	9a04      	ldr	r2, [sp, #16]
   190cc:	f1ba 0f00 	cmp.w	sl, #0
   190d0:	d001      	beq.n	190d6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x416>
   190d2:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(LessEqual);
   190d6:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   190da:	9400      	str	r4, [sp, #0]
   190dc:	ab16      	add	r3, sp, #88	; 0x58
   190de:	a910      	add	r1, sp, #64	; 0x40
   190e0:	a822      	add	r0, sp, #136	; 0x88
   190e2:	f011 f88f 	bl	2a204 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   190e6:	e637      	b.n	18d58 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
   190e8:	f00e faa8 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   190ec:	6873      	ldr	r3, [r6, #4]
   190ee:	4621      	mov	r1, r4
   190f0:	a816      	add	r0, sp, #88	; 0x58
   190f2:	9304      	str	r3, [sp, #16]
   190f4:	f00e faa2 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   190f8:	6863      	ldr	r3, [r4, #4]
   190fa:	4651      	mov	r1, sl
   190fc:	4628      	mov	r0, r5
   190fe:	9305      	str	r3, [sp, #20]
   19100:	f00e fa9c 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   19104:	f1ba 0f00 	cmp.w	sl, #0
   19108:	d001      	beq.n	1910e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x44e>
   1910a:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
   1910e:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
   19112:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   19114:	9b24      	ldr	r3, [sp, #144]	; 0x90
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   19116:	aa1c      	add	r2, sp, #112	; 0x70
   19118:	a916      	add	r1, sp, #88	; 0x58
   1911a:	a810      	add	r0, sp, #64	; 0x40
  int32 input1_multiplier = op_params.input1_multiplier;
   1911c:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
   19120:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
  int input2_shift = op_params.input2_shift;
   19124:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  int32 input2_offset = op_params.input2_offset;
   19128:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   1912a:	f00f faca 	bl	286c2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
   1912e:	4602      	mov	r2, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   19130:	f04f 0800 	mov.w	r8, #0
   19134:	f04f 0900 	mov.w	r9, #0
  const int64_t flatsize =
   19138:	17c3      	asrs	r3, r0, #31
   1913a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
   1913e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   19142:	4590      	cmp	r8, r2
   19144:	eb79 0303 	sbcs.w	r3, r9, r3
   19148:	da25      	bge.n	19196 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x4d6>
    const int32 input2_val = input2_offset + input2_data[i];
   1914a:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
   1914c:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
   1914e:	f912 5008 	ldrsb.w	r5, [r2, r8]
   19152:	9a07      	ldr	r2, [sp, #28]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   19154:	ee18 1a10 	vmov	r1, s16
    const int32 input2_val = input2_offset + input2_data[i];
   19158:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
   1915a:	9a04      	ldr	r2, [sp, #16]
   1915c:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   19160:	f912 0008 	ldrsb.w	r0, [r2, r8]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   19164:	465a      	mov	r2, fp
    const int32 input1_val = input1_offset + input1_data[i];
   19166:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   19168:	40b0      	lsls	r0, r6
   1916a:	f7fd fd3b 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   1916e:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   19170:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   19172:	4622      	mov	r2, r4
   19174:	4639      	mov	r1, r7
   19176:	4628      	mov	r0, r5
   19178:	f7fd fd34 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs <= rhs;
   1917c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1917e:	4283      	cmp	r3, r0
   19180:	bfcc      	ite	gt
   19182:	2000      	movgt	r0, #0
   19184:	2001      	movle	r0, #1
   19186:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  for (int64_t i = 0; i < flatsize; ++i) {
   19188:	f118 0801 	adds.w	r8, r8, #1
  return lhs <= rhs;
   1918c:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   19190:	f149 0900 	adc.w	r9, r9, #0
   19194:	e7d3      	b.n	1913e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x47e>
   19196:	a81c      	add	r0, sp, #112	; 0x70
   19198:	e5df      	b.n	18d5a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x9a>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   1919a:	696c      	ldr	r4, [r5, #20]
   1919c:	f7f3 fd92 	bl	ccc4 <TfLiteTypeGetName>
   191a0:	f818 3009 	ldrb.w	r3, [r8, r9]
   191a4:	4602      	mov	r2, r0
   191a6:	4902      	ldr	r1, [pc, #8]	; (191b0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x4f0>)
   191a8:	4628      	mov	r0, r5
   191aa:	47a0      	blx	r4
      return kTfLiteError;
   191ac:	2001      	movs	r0, #1
   191ae:	e6c0      	b.n	18f32 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x272>
   191b0:	000349d0 	.word	0x000349d0

000191b4 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode>:
namespace concatenation {

constexpr int kMaxInputNum = 10;  // Maximum number of input tensors
constexpr int kOutputTensor = 0;

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   191b4:	b5f0      	push	{r4, r5, r6, r7, lr}

  TfLiteType input_type = GetInput(context, node, 0)->type;
  TfLiteType output_type = GetOutput(context, node, kOutputTensor)->type;

  // Check activation and input type
  TF_LITE_ENSURE_EQ(context, params->activation, kTfLiteActNone);
   191b6:	694b      	ldr	r3, [r1, #20]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   191b8:	4604      	mov	r4, r0
  TF_LITE_ENSURE_EQ(context, params->activation, kTfLiteActNone);
   191ba:	791b      	ldrb	r3, [r3, #4]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   191bc:	b085      	sub	sp, #20
  TF_LITE_ENSURE_EQ(context, params->activation, kTfLiteActNone);
   191be:	b17b      	cbz	r3, 191e0 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x2c>
   191c0:	2200      	movs	r2, #0
   191c2:	e9cd 3202 	strd	r3, r2, [sp, #8]
   191c6:	4b28      	ldr	r3, [pc, #160]	; (19268 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xb4>)
   191c8:	4a28      	ldr	r2, [pc, #160]	; (1926c <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xb8>)
   191ca:	9301      	str	r3, [sp, #4]
   191cc:	4b28      	ldr	r3, [pc, #160]	; (19270 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xbc>)
   191ce:	4929      	ldr	r1, [pc, #164]	; (19274 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xc0>)
   191d0:	9300      	str	r3, [sp, #0]
   191d2:	6944      	ldr	r4, [r0, #20]
   191d4:	232c      	movs	r3, #44	; 0x2c
   191d6:	47a0      	blx	r4
  TF_LITE_ENSURE(context,
   191d8:	2301      	movs	r3, #1
      return kTfLiteError;
    }
  }

  return kTfLiteOk;
}
   191da:	4618      	mov	r0, r3
   191dc:	b005      	add	sp, #20
   191de:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TfLiteType input_type = GetInput(context, node, 0)->type;
   191e0:	680a      	ldr	r2, [r1, #0]
   191e2:	6886      	ldr	r6, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
   191e4:	6855      	ldr	r5, [r2, #4]
   191e6:	01ad      	lsls	r5, r5, #6
   191e8:	5d75      	ldrb	r5, [r6, r5]
  TF_LITE_ENSURE(context,
   191ea:	1e6f      	subs	r7, r5, #1
   191ec:	2f03      	cmp	r7, #3
   191ee:	d909      	bls.n	19204 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x50>
   191f0:	2d09      	cmp	r5, #9
   191f2:	d007      	beq.n	19204 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x50>
   191f4:	4b20      	ldr	r3, [pc, #128]	; (19278 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xc4>)
   191f6:	4a1d      	ldr	r2, [pc, #116]	; (1926c <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xb8>)
   191f8:	9300      	str	r3, [sp, #0]
   191fa:	6944      	ldr	r4, [r0, #20]
   191fc:	232d      	movs	r3, #45	; 0x2d
   191fe:	491f      	ldr	r1, [pc, #124]	; (1927c <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>)
   19200:	47a0      	blx	r4
   19202:	e7e9      	b.n	191d8 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x24>
  return &context->tensors[node->outputs->data[index]];
   19204:	6849      	ldr	r1, [r1, #4]
   19206:	6849      	ldr	r1, [r1, #4]
  TfLiteType output_type = GetOutput(context, node, kOutputTensor)->type;
   19208:	0189      	lsls	r1, r1, #6
   1920a:	5c71      	ldrb	r1, [r6, r1]
  TF_LITE_ENSURE_EQ(context, output_type, input_type);
   1920c:	428d      	cmp	r5, r1
   1920e:	d00c      	beq.n	1922a <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x76>
   19210:	4b1b      	ldr	r3, [pc, #108]	; (19280 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xcc>)
   19212:	e9cd 1502 	strd	r1, r5, [sp, #8]
   19216:	9301      	str	r3, [sp, #4]
   19218:	4b1a      	ldr	r3, [pc, #104]	; (19284 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
   1921a:	4620      	mov	r0, r4
   1921c:	9300      	str	r3, [sp, #0]
   1921e:	6965      	ldr	r5, [r4, #20]
   19220:	2333      	movs	r3, #51	; 0x33
   19222:	4a12      	ldr	r2, [pc, #72]	; (1926c <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xb8>)
   19224:	4913      	ldr	r1, [pc, #76]	; (19274 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xc0>)
   19226:	47a8      	blx	r5
   19228:	e7d6      	b.n	191d8 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x24>
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   1922a:	6815      	ldr	r5, [r2, #0]
  TF_LITE_ENSURE(context, num_inputs <= kMaxInputNum);
   1922c:	2d0a      	cmp	r5, #10
   1922e:	dc10      	bgt.n	19252 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x9e>
  for (int i = 0; i < num_inputs; ++i) {
   19230:	2000      	movs	r0, #0
   19232:	1d11      	adds	r1, r2, #4
   19234:	42a8      	cmp	r0, r5
   19236:	dad0      	bge.n	191da <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
  return &context->tensors[node->inputs->data[index]];
   19238:	f851 2b04 	ldr.w	r2, [r1], #4
    int num_dimensions = NumDimensions(input);
   1923c:	eb06 1282 	add.w	r2, r6, r2, lsl #6
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   19240:	6892      	ldr	r2, [r2, #8]
   19242:	6812      	ldr	r2, [r2, #0]
    if (num_dimensions > 4) {
   19244:	2a04      	cmp	r2, #4
   19246:	dd0d      	ble.n	19264 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xb0>
      TF_LITE_KERNEL_LOG(
   19248:	4620      	mov	r0, r4
   1924a:	6963      	ldr	r3, [r4, #20]
   1924c:	490e      	ldr	r1, [pc, #56]	; (19288 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
   1924e:	4798      	blx	r3
      return kTfLiteError;
   19250:	e7c2      	b.n	191d8 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x24>
  TF_LITE_ENSURE(context, num_inputs <= kMaxInputNum);
   19252:	4b0e      	ldr	r3, [pc, #56]	; (1928c <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
   19254:	4620      	mov	r0, r4
   19256:	9300      	str	r3, [sp, #0]
   19258:	6965      	ldr	r5, [r4, #20]
   1925a:	2337      	movs	r3, #55	; 0x37
   1925c:	4a03      	ldr	r2, [pc, #12]	; (1926c <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xb8>)
   1925e:	4907      	ldr	r1, [pc, #28]	; (1927c <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>)
   19260:	47a8      	blx	r5
   19262:	e7b9      	b.n	191d8 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x24>
  for (int i = 0; i < num_inputs; ++i) {
   19264:	3001      	adds	r0, #1
   19266:	e7e5      	b.n	19234 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
   19268:	00034b7a 	.word	0x00034b7a
   1926c:	00034b4b 	.word	0x00034b4b
   19270:	00034b89 	.word	0x00034b89
   19274:	00034a7c 	.word	0x00034a7c
   19278:	00034bb3 	.word	0x00034bb3
   1927c:	00034b9c 	.word	0x00034b9c
   19280:	00034c47 	.word	0x00034c47
   19284:	00034c52 	.word	0x00034c52
   19288:	00034c79 	.word	0x00034c79
   1928c:	00034c5e 	.word	0x00034c5e

00019290 <_ZN6tflite3ops5micro22Register_CONCATENATIONEv>:
  return kTfLiteOk;
}

}  // namespace concatenation

TfLiteRegistration Register_CONCATENATION() {
   19290:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/concatenation::Prepare,
          /*invoke=*/concatenation::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   19292:	4604      	mov	r4, r0
TfLiteRegistration Register_CONCATENATION() {
   19294:	4606      	mov	r6, r0
          /*version=*/0};
   19296:	4d04      	ldr	r5, [pc, #16]	; (192a8 <_ZN6tflite3ops5micro22Register_CONCATENATIONEv+0x18>)
   19298:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1929a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1929c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   192a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   192a4:	4630      	mov	r0, r6
   192a6:	bd70      	pop	{r4, r5, r6, pc}
   192a8:	000318b8 	.word	0x000318b8

000192ac <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   192ac:	b538      	push	{r3, r4, r5, lr}
  return &context->tensors[node->outputs->data[index]];
   192ae:	684b      	ldr	r3, [r1, #4]
  TfLiteType output_type = GetOutput(context, node, kOutputTensor)->type;
   192b0:	6882      	ldr	r2, [r0, #8]
   192b2:	685b      	ldr	r3, [r3, #4]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   192b4:	4604      	mov	r4, r0
  TfLiteType output_type = GetOutput(context, node, kOutputTensor)->type;
   192b6:	019b      	lsls	r3, r3, #6
   192b8:	5cd0      	ldrb	r0, [r2, r3]
  switch (output_type) {  // Already know in/outtypes are same.
   192ba:	1e43      	subs	r3, r0, #1
   192bc:	2b08      	cmp	r3, #8
   192be:	d81b      	bhi.n	192f8 <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode+0x4c>
   192c0:	e8df f003 	tbb	[pc, r3]
   192c4:	160e0a05 	.word	0x160e0a05
   192c8:	1a1a1a1a 	.word	0x1a1a1a1a
   192cc:	12          	.byte	0x12
   192cd:	00          	.byte	0x00
      EvalUnquantized<float>(context, node);
   192ce:	4620      	mov	r0, r4
   192d0:	f011 fa54 	bl	2a77c <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode>
  return kTfLiteOk;
   192d4:	2000      	movs	r0, #0
}
   192d6:	bd38      	pop	{r3, r4, r5, pc}
      EvalUnquantized<int32_t>(context, node);
   192d8:	4620      	mov	r0, r4
   192da:	f011 fb33 	bl	2a944 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIiEEvP13TfLiteContextP10TfLiteNode>
   192de:	e7f9      	b.n	192d4 <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode+0x28>
      EvalQuantizedUInt8(context, node);
   192e0:	4620      	mov	r0, r4
   192e2:	f011 f94c 	bl	2a57e <_ZN6tflite3ops5micro13concatenation18EvalQuantizedUInt8EP13TfLiteContextP10TfLiteNode>
      break;
   192e6:	e7f5      	b.n	192d4 <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode+0x28>
      EvalUnquantized<int8_t>(context, node);
   192e8:	4620      	mov	r0, r4
   192ea:	f011 fc0d 	bl	2ab08 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode>
      break;
   192ee:	e7f1      	b.n	192d4 <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode+0x28>
      EvalUnquantized<int64_t>(context, node);
   192f0:	4620      	mov	r0, r4
   192f2:	f011 fced 	bl	2acd0 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode>
      break;
   192f6:	e7ed      	b.n	192d4 <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode+0x28>
      TF_LITE_KERNEL_LOG(
   192f8:	6965      	ldr	r5, [r4, #20]
   192fa:	f7f3 fce3 	bl	ccc4 <TfLiteTypeGetName>
   192fe:	4903      	ldr	r1, [pc, #12]	; (1930c <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode+0x60>)
   19300:	4602      	mov	r2, r0
   19302:	4620      	mov	r0, r4
   19304:	47a8      	blx	r5
      return kTfLiteError;
   19306:	2001      	movs	r0, #1
   19308:	e7e5      	b.n	192d6 <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode+0x2a>
   1930a:	bf00      	nop
   1930c:	00034cd1 	.word	0x00034cd1

00019310 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>:
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
                                           quantized_multiplier);
}

inline int32 MultiplyByQuantizedMultiplier(int32 x, int32 quantized_multiplier,
                                           int shift) {
   19310:	b570      	push	{r4, r5, r6, lr}
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
   19312:	ea22 74e2 	bic.w	r4, r2, r2, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
   19316:	2a00      	cmp	r2, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
   19318:	fa00 f004 	lsl.w	r0, r0, r4
  int right_shift = shift > 0 ? 0 : -shift;
   1931c:	bfcc      	ite	gt
   1931e:	2200      	movgt	r2, #0
   19320:	4252      	negle	r2, r2
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   19322:	4288      	cmp	r0, r1
   19324:	d127      	bne.n	19376 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x66>
   19326:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1932a:	425e      	negs	r6, r3
   1932c:	415e      	adcs	r6, r3
  std::int64_t ab_64 = a_64 * b_64;
   1932e:	fb80 4501 	smull	r4, r5, r0, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   19332:	2c00      	cmp	r4, #0
   19334:	f175 0300 	sbcs.w	r3, r5, #0
   19338:	4b1c      	ldr	r3, [pc, #112]	; (193ac <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x9c>)
   1933a:	bfa8      	it	ge
   1933c:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   19340:	b9de      	cbnz	r6, 1937a <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x6a>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   19342:	18e4      	adds	r4, r4, r3
   19344:	eb45 75e3 	adc.w	r5, r5, r3, asr #31
   19348:	2c00      	cmp	r4, #0
   1934a:	f175 0300 	sbcs.w	r3, r5, #0
   1934e:	da06      	bge.n	1935e <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x4e>
   19350:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   19354:	18e4      	adds	r4, r4, r3
   19356:	f04f 0300 	mov.w	r3, #0
   1935a:	eb43 0505 	adc.w	r5, r3, r5
   1935e:	0fe1      	lsrs	r1, r4, #31
   19360:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
  assert(exponent >= 0);
   19364:	2a00      	cmp	r2, #0
   19366:	da0b      	bge.n	19380 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x70>
   19368:	f44f 71b3 	mov.w	r1, #358	; 0x166
   1936c:	4b10      	ldr	r3, [pc, #64]	; (193b0 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0xa0>)
   1936e:	4a11      	ldr	r2, [pc, #68]	; (193b4 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0xa4>)
  assert(exponent <= 31);
   19370:	4811      	ldr	r0, [pc, #68]	; (193b8 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0xa8>)
   19372:	f00d f849 	bl	26408 <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   19376:	2600      	movs	r6, #0
   19378:	e7d9      	b.n	1932e <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x1e>
   1937a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1937e:	e7f1      	b.n	19364 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x54>
  assert(exponent <= 31);
   19380:	2a1f      	cmp	r2, #31
   19382:	dd04      	ble.n	1938e <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x7e>
   19384:	f240 1167 	movw	r1, #359	; 0x167
   19388:	4b0c      	ldr	r3, [pc, #48]	; (193bc <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0xac>)
   1938a:	4a0a      	ldr	r2, [pc, #40]	; (193b4 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0xa4>)
   1938c:	e7f0      	b.n	19370 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x60>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   1938e:	2301      	movs	r3, #1
   19390:	4093      	lsls	r3, r2
   19392:	3b01      	subs	r3, #1
  return a & b;
   19394:	ea03 0001 	and.w	r0, r3, r1
  return a >> offset;
   19398:	105b      	asrs	r3, r3, #1
  return a + b;
   1939a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
  return a >> offset;
   1939e:	fa41 f202 	asr.w	r2, r1, r2
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
   193a2:	4298      	cmp	r0, r3
   193a4:	bfd4      	ite	le
   193a6:	4610      	movle	r0, r2
   193a8:	1c50      	addgt	r0, r2, #1
   193aa:	bd70      	pop	{r4, r5, r6, pc}
   193ac:	c0000001 	.word	0xc0000001
   193b0:	00034912 	.word	0x00034912
   193b4:	00034920 	.word	0x00034920
   193b8:	00034975 	.word	0x00034975
   193bc:	000349c1 	.word	0x000349c1

000193c0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>:
inline void Conv(const ConvParams& params, const RuntimeShape& input_shape,
                 const float* input_data, const RuntimeShape& filter_shape,
                 const float* filter_data, const RuntimeShape& bias_shape,
                 const float* bias_data, const RuntimeShape& output_shape,
                 float* output_data, const RuntimeShape& im2col_shape,
                 float* im2col_data) {
   193c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   193c4:	ed2d 8b04 	vpush	{d8-d9}
   193c8:	461c      	mov	r4, r3
  const int stride_width = params.stride_width;
   193ca:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
                 float* im2col_data) {
   193ce:	b09b      	sub	sp, #108	; 0x6c
  const int stride_width = params.stride_width;
   193d0:	930a      	str	r3, [sp, #40]	; 0x28
  const int stride_height = params.stride_height;
   193d2:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
                 float* im2col_data) {
   193d6:	4688      	mov	r8, r1
  const int stride_height = params.stride_height;
   193d8:	930b      	str	r3, [sp, #44]	; 0x2c
  const int dilation_width_factor = params.dilation_width_factor;
   193da:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
  const int dilation_height_factor = params.dilation_height_factor;
  const int pad_width = params.padding_values.width;
  const int pad_height = params.padding_values.height;
  const float output_activation_min = params.float_activation_min;
   193de:	edd0 8a0c 	vldr	s17, [r0, #48]	; 0x30
  const int dilation_width_factor = params.dilation_width_factor;
   193e2:	930c      	str	r3, [sp, #48]	; 0x30
  const int dilation_height_factor = params.dilation_height_factor;
   193e4:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
  const float output_activation_max = params.float_activation_max;
   193e8:	ed90 9a0d 	vldr	s18, [r0, #52]	; 0x34
  const int dilation_height_factor = params.dilation_height_factor;
   193ec:	930d      	str	r3, [sp, #52]	; 0x34
  const int pad_width = params.padding_values.width;
   193ee:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
                 float* im2col_data) {
   193f2:	9e2b      	ldr	r6, [sp, #172]	; 0xac
  const int pad_width = params.padding_values.width;
   193f4:	930f      	str	r3, [sp, #60]	; 0x3c
  const int pad_height = params.padding_values.height;
   193f6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
                 float* im2col_data) {
   193fa:	9219      	str	r2, [sp, #100]	; 0x64
  const int pad_height = params.padding_values.height;
   193fc:	9310      	str	r3, [sp, #64]	; 0x40
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   193fe:	680b      	ldr	r3, [r1, #0]
   19400:	2b04      	cmp	r3, #4
   19402:	d001      	beq.n	19408 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x48>
   19404:	f017 fcd9 	bl	30dba <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   19408:	6823      	ldr	r3, [r4, #0]
   1940a:	2b04      	cmp	r3, #4
   1940c:	d1fa      	bne.n	19404 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x44>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   1940e:	6833      	ldr	r3, [r6, #0]
   19410:	2b04      	cmp	r3, #4
   19412:	d1f7      	bne.n	19404 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x44>

  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   19414:	2300      	movs	r3, #0
   19416:	4632      	mov	r2, r6
   19418:	4619      	mov	r1, r3
   1941a:	4640      	mov	r0, r8
   1941c:	f010 ff7e 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   19420:	2303      	movs	r3, #3
   19422:	4622      	mov	r2, r4
   19424:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   19426:	9011      	str	r0, [sp, #68]	; 0x44
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   19428:	4640      	mov	r0, r8
   1942a:	f010 ff77 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   1942e:	2303      	movs	r3, #3
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   19430:	9012      	str	r0, [sp, #72]	; 0x48
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   19432:	4632      	mov	r2, r6
   19434:	2100      	movs	r1, #0
   19436:	4620      	mov	r0, r4
   19438:	f010 ff70 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  if (bias_data) {
   1943c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   1943e:	9009      	str	r0, [sp, #36]	; 0x24
  if (bias_data) {
   19440:	b12b      	cbz	r3, 1944e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x8e>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   19442:	9829      	ldr	r0, [sp, #164]	; 0xa4
   19444:	f00e f945 	bl	276d2 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   19448:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1944a:	4298      	cmp	r0, r3
   1944c:	d1da      	bne.n	19404 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x44>
  }
  const int input_height = input_shape.Dims(1);
   1944e:	2101      	movs	r1, #1
   19450:	4640      	mov	r0, r8
   19452:	f00e f8b9 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   19456:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   19458:	9013      	str	r0, [sp, #76]	; 0x4c
  const int input_width = input_shape.Dims(2);
   1945a:	4640      	mov	r0, r8
   1945c:	f00e f8b4 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
   19460:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   19462:	9014      	str	r0, [sp, #80]	; 0x50
  const int filter_height = filter_shape.Dims(1);
   19464:	4620      	mov	r0, r4
   19466:	f00e f8af 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
   1946a:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
   1946c:	9015      	str	r0, [sp, #84]	; 0x54
  const int filter_width = filter_shape.Dims(2);
   1946e:	4620      	mov	r0, r4
   19470:	f00e f8aa 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   19474:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
   19476:	9016      	str	r0, [sp, #88]	; 0x58
  const int output_height = output_shape.Dims(1);
   19478:	4630      	mov	r0, r6
   1947a:	f00e f8a5 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   1947e:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   19480:	9017      	str	r0, [sp, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
   19482:	4630      	mov	r0, r6
   19484:	f00e f8a0 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int batch = 0; batch < batches; ++batch) {
   19488:	f04f 0900 	mov.w	r9, #0
                  total += (input_value * filter_value);
                }
              }
            }
          }
          float bias_value = 0.0f;
   1948c:	eddf 9a54 	vldr	s19, [pc, #336]	; 195e0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x220>
  const int output_width = output_shape.Dims(2);
   19490:	9018      	str	r0, [sp, #96]	; 0x60
  for (int batch = 0; batch < batches; ++batch) {
   19492:	9b11      	ldr	r3, [sp, #68]	; 0x44
   19494:	4599      	cmp	r9, r3
   19496:	f280 809e 	bge.w	195d6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x216>
   1949a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1949c:	425b      	negs	r3, r3
   1949e:	9308      	str	r3, [sp, #32]
    for (int out_y = 0; out_y < output_height; ++out_y) {
   194a0:	2300      	movs	r3, #0
   194a2:	9304      	str	r3, [sp, #16]
   194a4:	9b04      	ldr	r3, [sp, #16]
   194a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   194a8:	4293      	cmp	r3, r2
   194aa:	f280 8091 	bge.w	195d0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x210>
   194ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   194b0:	425b      	negs	r3, r3
   194b2:	9307      	str	r3, [sp, #28]
      for (int out_x = 0; out_x < output_width; ++out_x) {
   194b4:	2300      	movs	r3, #0
   194b6:	9305      	str	r3, [sp, #20]
   194b8:	9b05      	ldr	r3, [sp, #20]
   194ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
   194bc:	4293      	cmp	r3, r2
   194be:	da7f      	bge.n	195c0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x200>
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   194c0:	2500      	movs	r5, #0
   194c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   194c4:	429d      	cmp	r5, r3
   194c6:	da73      	bge.n	195b0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1f0>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   194c8:	2300      	movs	r3, #0
          float total = 0.f;
   194ca:	ed9f 8a45 	vldr	s16, [pc, #276]	; 195e0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x220>
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   194ce:	f8dd a020 	ldr.w	sl, [sp, #32]
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   194d2:	9306      	str	r3, [sp, #24]
   194d4:	9b06      	ldr	r3, [sp, #24]
   194d6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   194d8:	4293      	cmp	r3, r2
   194da:	da42      	bge.n	19562 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1a2>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   194dc:	f04f 0b00 	mov.w	fp, #0
                const int in_y =
   194e0:	9f07      	ldr	r7, [sp, #28]
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   194e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   194e4:	459b      	cmp	fp, r3
   194e6:	da36      	bge.n	19556 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x196>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   194e8:	2300      	movs	r3, #0
   194ea:	9303      	str	r3, [sp, #12]
   194ec:	9b03      	ldr	r3, [sp, #12]
   194ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
   194f0:	4293      	cmp	r3, r2
   194f2:	da2b      	bge.n	1954c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x18c>
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   194f4:	2f00      	cmp	r7, #0
   194f6:	db26      	blt.n	19546 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x186>
   194f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   194fa:	42bb      	cmp	r3, r7
   194fc:	dd23      	ble.n	19546 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x186>
   194fe:	f1ba 0f00 	cmp.w	sl, #0
   19502:	db20      	blt.n	19546 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x186>
   19504:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   19506:	4553      	cmp	r3, sl
   19508:	dd1d      	ble.n	19546 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x186>
                  float input_value = input_data[Offset(
   1950a:	9b03      	ldr	r3, [sp, #12]
   1950c:	4652      	mov	r2, sl
   1950e:	4649      	mov	r1, r9
   19510:	9300      	str	r3, [sp, #0]
   19512:	4640      	mov	r0, r8
   19514:	463b      	mov	r3, r7
   19516:	f00e f919 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                      filter_data[Offset(filter_shape, out_channel, filter_y,
   1951a:	9b03      	ldr	r3, [sp, #12]
   1951c:	9a06      	ldr	r2, [sp, #24]
                  float input_value = input_data[Offset(
   1951e:	900e      	str	r0, [sp, #56]	; 0x38
                      filter_data[Offset(filter_shape, out_channel, filter_y,
   19520:	9300      	str	r3, [sp, #0]
   19522:	4629      	mov	r1, r5
   19524:	465b      	mov	r3, fp
   19526:	4620      	mov	r0, r4
   19528:	f00e f910 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                      input_shape, batch, in_y, in_x, in_channel)];
   1952c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1952e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   19530:	eb03 0382 	add.w	r3, r3, r2, lsl #2
                                         filter_x, in_channel)];
   19534:	9a28      	ldr	r2, [sp, #160]	; 0xa0
                  total += (input_value * filter_value);
   19536:	ed93 7a00 	vldr	s14, [r3]
                                         filter_x, in_channel)];
   1953a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
                  total += (input_value * filter_value);
   1953e:	edd0 7a00 	vldr	s15, [r0]
   19542:	eea7 8a27 	vfma.f32	s16, s14, s15
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   19546:	9b03      	ldr	r3, [sp, #12]
   19548:	3301      	adds	r3, #1
   1954a:	e7ce      	b.n	194ea <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x12a>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   1954c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1954e:	f10b 0b01 	add.w	fp, fp, #1
   19552:	441f      	add	r7, r3
   19554:	e7c5      	b.n	194e2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x122>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   19556:	9b06      	ldr	r3, [sp, #24]
   19558:	3301      	adds	r3, #1
   1955a:	9306      	str	r3, [sp, #24]
   1955c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1955e:	449a      	add	sl, r3
   19560:	e7b8      	b.n	194d4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x114>
          if (bias_data) {
   19562:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   19564:	b30b      	cbz	r3, 195aa <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1ea>
            bias_value = bias_data[out_channel];
   19566:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   1956a:	edd3 7a00 	vldr	s15, [r3]
          }
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   1956e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
              ActivationFunctionWithMinMax(total + bias_value,
   19572:	ee38 8a27 	vadd.f32	s16, s16, s15
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   19576:	9500      	str	r5, [sp, #0]
   19578:	4649      	mov	r1, r9
   1957a:	4630      	mov	r0, r6
   1957c:	f00e f8e6 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
	return __b;
   19580:	eeb4 8a68 	vcmp.f32	s16, s17
   19584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   19588:	bf48      	it	mi
   1958a:	eeb0 8a68 	vmovmi.f32	s16, s17
	return __b;
   1958e:	eeb4 9a48 	vcmp.f32	s18, s16
   19592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   19596:	bf48      	it	mi
   19598:	eeb0 8a49 	vmovmi.f32	s16, s18
   1959c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   1959e:	3501      	adds	r5, #1
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   195a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   195a4:	ed80 8a00 	vstr	s16, [r0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   195a8:	e78b      	b.n	194c2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x102>
          float bias_value = 0.0f;
   195aa:	eef0 7a69 	vmov.f32	s15, s19
   195ae:	e7de      	b.n	1956e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1ae>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   195b0:	9b05      	ldr	r3, [sp, #20]
   195b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   195b4:	3301      	adds	r3, #1
   195b6:	9305      	str	r3, [sp, #20]
   195b8:	9b07      	ldr	r3, [sp, #28]
   195ba:	4413      	add	r3, r2
   195bc:	9307      	str	r3, [sp, #28]
   195be:	e77b      	b.n	194b8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xf8>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   195c0:	9b04      	ldr	r3, [sp, #16]
   195c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   195c4:	3301      	adds	r3, #1
   195c6:	9304      	str	r3, [sp, #16]
   195c8:	9b08      	ldr	r3, [sp, #32]
   195ca:	4413      	add	r3, r2
   195cc:	9308      	str	r3, [sp, #32]
   195ce:	e769      	b.n	194a4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xe4>
  for (int batch = 0; batch < batches; ++batch) {
   195d0:	f109 0901 	add.w	r9, r9, #1
   195d4:	e75d      	b.n	19492 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xd2>
                                           output_activation_max);
        }
      }
    }
  }
}
   195d6:	b01b      	add	sp, #108	; 0x6c
   195d8:	ecbd 8b04 	vpop	{d8-d9}
   195dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   195e0:	00000000 	.word	0x00000000

000195e4 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE>:

TfLiteStatus CalculateOpData(TfLiteContext* context, TfLiteNode* node,
                             const TfLiteConvParams* params, int width,
                             int height, int filter_width, int filter_height,
                             int out_width, int out_height,
                             const TfLiteType data_type, OpData* data) {
   195e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bool has_bias = node->inputs->size == 3;
   195e8:	f8d1 8000 	ldr.w	r8, [r1]
                             const TfLiteType data_type, OpData* data) {
   195ec:	461f      	mov	r7, r3
  bool has_bias = node->inputs->size == 3;
   195ee:	f8d8 3000 	ldr.w	r3, [r8]
                             const TfLiteType data_type, OpData* data) {
   195f2:	b091      	sub	sp, #68	; 0x44
  bool has_bias = node->inputs->size == 3;
   195f4:	930b      	str	r3, [sp, #44]	; 0x2c
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   195f6:	3b02      	subs	r3, #2
   195f8:	2b01      	cmp	r3, #1
                             const TfLiteType data_type, OpData* data) {
   195fa:	4606      	mov	r6, r0
   195fc:	4615      	mov	r5, r2
   195fe:	9c20      	ldr	r4, [sp, #128]	; 0x80
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   19600:	d90a      	bls.n	19618 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x34>
   19602:	4b49      	ldr	r3, [pc, #292]	; (19728 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x144>)
   19604:	4a49      	ldr	r2, [pc, #292]	; (1972c <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x148>)
   19606:	9300      	str	r3, [sp, #0]
   19608:	6944      	ldr	r4, [r0, #20]
   1960a:	234f      	movs	r3, #79	; 0x4f
   1960c:	4948      	ldr	r1, [pc, #288]	; (19730 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x14c>)
   1960e:	47a0      	blx	r4
   19610:	2001      	movs	r0, #1
        data->per_channel_output_multiplier,
        reinterpret_cast<int*>(data->per_channel_output_shift),
        output_channels));
  }
  return kTfLiteOk;
}
   19612:	b011      	add	sp, #68	; 0x44
   19614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
   19618:	684b      	ldr	r3, [r1, #4]
   1961a:	930c      	str	r3, [sp, #48]	; 0x30
   1961c:	681b      	ldr	r3, [r3, #0]
   1961e:	2b01      	cmp	r3, #1
   19620:	d00c      	beq.n	1963c <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x58>
   19622:	2401      	movs	r4, #1
   19624:	e9cd 3402 	strd	r3, r4, [sp, #8]
   19628:	4b42      	ldr	r3, [pc, #264]	; (19734 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x150>)
   1962a:	4a40      	ldr	r2, [pc, #256]	; (1972c <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x148>)
   1962c:	9301      	str	r3, [sp, #4]
   1962e:	4b42      	ldr	r3, [pc, #264]	; (19738 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x154>)
   19630:	4942      	ldr	r1, [pc, #264]	; (1973c <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x158>)
   19632:	9300      	str	r3, [sp, #0]
   19634:	6945      	ldr	r5, [r0, #20]
   19636:	2350      	movs	r3, #80	; 0x50
   19638:	47a8      	blx	r5
   1963a:	e7e9      	b.n	19610 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x2c>
      params->dilation_height_factor, params->dilation_width_factor, height,
   1963c:	6953      	ldr	r3, [r2, #20]
  auto padding = params->padding;
   1963e:	f892 b000 	ldrb.w	fp, [r2]
      params->dilation_height_factor, params->dilation_width_factor, height,
   19642:	930d      	str	r3, [sp, #52]	; 0x34
   19644:	6913      	ldr	r3, [r2, #16]
      params->stride_height, params->stride_width,
   19646:	e9d2 9a01 	ldrd	r9, sl, [r2, #4]

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   1964a:	4639      	mov	r1, r7
   1964c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
      params->dilation_height_factor, params->dilation_width_factor, height,
   1964e:	930e      	str	r3, [sp, #56]	; 0x38
   19650:	9300      	str	r3, [sp, #0]
   19652:	4658      	mov	r0, fp
   19654:	464b      	mov	r3, r9
   19656:	f011 fdc3 	bl	2b1e0 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   1965a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1965c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1965e:	991a      	ldr	r1, [sp, #104]	; 0x68
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   19660:	900f      	str	r0, [sp, #60]	; 0x3c
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   19662:	9300      	str	r3, [sp, #0]
   19664:	4658      	mov	r0, fp
   19666:	4653      	mov	r3, sl
   19668:	f011 fdba 	bl	2b1e0 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   1966c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  int total_padding =
   1966e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   19670:	990d      	ldr	r1, [sp, #52]	; 0x34
   19672:	f1c2 0201 	rsb	r2, r2, #1
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   19676:	3b01      	subs	r3, #1
  int total_padding =
   19678:	fb01 2303 	mla	r3, r1, r3, r2
      ((out_size - 1) * stride + effective_filter_size - in_size);
   1967c:	3801      	subs	r0, #1
  int total_padding =
   1967e:	fb0a 3a00 	mla	sl, sl, r0, r3
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   19682:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  int total_padding =
   19684:	f1c7 0701 	rsb	r7, r7, #1
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   19688:	1e5a      	subs	r2, r3, #1
  int total_padding =
   1968a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  total_padding = total_padding > 0 ? total_padding : 0;
   1968c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  int total_padding =
   19690:	fb03 7702 	mla	r7, r3, r2, r7
      ((out_size - 1) * stride + effective_filter_size - in_size);
   19694:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19696:	1e58      	subs	r0, r3, #1
  int total_padding =
   19698:	fb09 7900 	mla	r9, r9, r0, r7
  total_padding = total_padding > 0 ? total_padding : 0;
   1969c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
  return total_padding / 2;
   196a0:	ea4f 0369 	mov.w	r3, r9, asr #1
      width, filter_height, filter_width, padding, &out_height, &out_width);
   196a4:	6023      	str	r3, [r4, #0]
   196a6:	ea4f 036a 	mov.w	r3, sl, asr #1
   196aa:	6063      	str	r3, [r4, #4]
  if (data_type != kTfLiteFloat32) {
   196ac:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
  *offset = total_padding % 2;
   196b0:	f009 0701 	and.w	r7, r9, #1
   196b4:	f00a 0001 	and.w	r0, sl, #1
   196b8:	2b01      	cmp	r3, #1
      width, filter_height, filter_width, padding, &out_height, &out_width);
   196ba:	60a7      	str	r7, [r4, #8]
   196bc:	60e0      	str	r0, [r4, #12]
  if (data_type != kTfLiteFloat32) {
   196be:	d030      	beq.n	19722 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x13e>
  const bool use_tensor = index < node->inputs->size &&
   196c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   196c2:	68b0      	ldr	r0, [r6, #8]
  return &context->tensors[node->inputs->data[index]];
   196c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
   196c8:	f8d8 2008 	ldr.w	r2, [r8, #8]
  const bool use_tensor = index < node->inputs->size &&
   196cc:	2b02      	cmp	r3, #2
  return &context->tensors[node->inputs->data[index]];
   196ce:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   196d2:	eb00 1282 	add.w	r2, r0, r2, lsl #6
  const bool use_tensor = index < node->inputs->size &&
   196d6:	dd22      	ble.n	1971e <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x13a>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
   196d8:	f8d8 300c 	ldr.w	r3, [r8, #12]
  const bool use_tensor = index < node->inputs->size &&
   196dc:	1c5f      	adds	r7, r3, #1
   196de:	d01e      	beq.n	1971e <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x13a>
    return &context->tensors[node->inputs->data[index]];
   196e0:	eb00 1383 	add.w	r3, r0, r3, lsl #6
    int output_channels = filter->dims->data[kConvQuantizedDimension];
   196e4:	6897      	ldr	r7, [r2, #8]
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
   196e6:	350c      	adds	r5, #12
   196e8:	687f      	ldr	r7, [r7, #4]
   196ea:	9708      	str	r7, [sp, #32]
   196ec:	69e7      	ldr	r7, [r4, #28]
   196ee:	9707      	str	r7, [sp, #28]
   196f0:	69a7      	ldr	r7, [r4, #24]
   196f2:	9501      	str	r5, [sp, #4]
   196f4:	9706      	str	r7, [sp, #24]
   196f6:	f104 0724 	add.w	r7, r4, #36	; 0x24
   196fa:	9705      	str	r7, [sp, #20]
   196fc:	f104 0720 	add.w	r7, r4, #32
   19700:	9704      	str	r7, [sp, #16]
   19702:	f104 0714 	add.w	r7, r4, #20
   19706:	3410      	adds	r4, #16
   19708:	9402      	str	r4, [sp, #8]
  return &context->tensors[node->outputs->data[index]];
   1970a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1970c:	9703      	str	r7, [sp, #12]
   1970e:	6864      	ldr	r4, [r4, #4]
   19710:	eb00 1084 	add.w	r0, r0, r4, lsl #6
   19714:	9000      	str	r0, [sp, #0]
   19716:	4630      	mov	r0, r6
   19718:	f007 fd02 	bl	21120 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>
   1971c:	e779      	b.n	19612 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x2e>
  return nullptr;
   1971e:	2300      	movs	r3, #0
   19720:	e7e0      	b.n	196e4 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x100>
  return kTfLiteOk;
   19722:	2000      	movs	r0, #0
   19724:	e775      	b.n	19612 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x2e>
   19726:	bf00      	nop
   19728:	00034d2e 	.word	0x00034d2e
   1972c:	00034d08 	.word	0x00034d08
   19730:	00034b9c 	.word	0x00034b9c
   19734:	00035814 	.word	0x00035814
   19738:	00034d52 	.word	0x00034d52
   1973c:	00034a7c 	.word	0x00034a7c

00019740 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode>:
    return nullptr;
  }
  return data;
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   19740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
   19744:	690f      	ldr	r7, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   19746:	4604      	mov	r4, r0
   19748:	460d      	mov	r5, r1
   1974a:	b091      	sub	sp, #68	; 0x44
  TFLITE_DCHECK(node->user_data != nullptr);
   1974c:	b90f      	cbnz	r7, 19752 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x12>
   1974e:	f017 fb34 	bl	30dba <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
   19752:	f8d1 8014 	ldr.w	r8, [r1, #20]
   19756:	f1b8 0f00 	cmp.w	r8, #0
   1975a:	d0f8      	beq.n	1974e <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xe>

  OpData* data = static_cast<OpData*>(node->user_data);
  const auto params = static_cast<const TfLiteConvParams*>(node->builtin_data);

  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1975c:	680a      	ldr	r2, [r1, #0]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
   1975e:	f8d0 a008 	ldr.w	sl, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
   19762:	6853      	ldr	r3, [r2, #4]
   19764:	6896      	ldr	r6, [r2, #8]
   19766:	0199      	lsls	r1, r3, #6
   19768:	eb0a 1383 	add.w	r3, sl, r3, lsl #6
  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);

  int input_width = input->dims->data[2];
   1976c:	689b      	ldr	r3, [r3, #8]
   1976e:	eb0a 1686 	add.w	r6, sl, r6, lsl #6
  int input_height = input->dims->data[1];
   19772:	e9d3 3902 	ldrd	r3, r9, [r3, #8]
   19776:	9309      	str	r3, [sp, #36]	; 0x24
  int filter_width = filter->dims->data[2];
   19778:	68b3      	ldr	r3, [r6, #8]
   1977a:	910e      	str	r1, [sp, #56]	; 0x38
   1977c:	68da      	ldr	r2, [r3, #12]
   1977e:	920a      	str	r2, [sp, #40]	; 0x28
  int filter_height = filter->dims->data[1];
   19780:	689a      	ldr	r2, [r3, #8]
   19782:	920b      	str	r2, [sp, #44]	; 0x2c
  return &context->tensors[node->outputs->data[index]];
   19784:	686a      	ldr	r2, [r5, #4]
   19786:	6852      	ldr	r2, [r2, #4]
  int output_width = output->dims->data[2];
   19788:	eb0a 1282 	add.w	r2, sl, r2, lsl #6
   1978c:	6892      	ldr	r2, [r2, #8]
   1978e:	68d1      	ldr	r1, [r2, #12]
  int output_height = output->dims->data[1];
   19790:	6892      	ldr	r2, [r2, #8]
  int output_width = output->dims->data[2];
   19792:	910c      	str	r1, [sp, #48]	; 0x30

  // Dynimically allocate per-channel quantization parameters.
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
  TF_LITE_ENSURE_STATUS(context->AllocatePersistentBuffer(
   19794:	6859      	ldr	r1, [r3, #4]
  int output_height = output->dims->data[1];
   19796:	920d      	str	r2, [sp, #52]	; 0x34
  TF_LITE_ENSURE_STATUS(context->AllocatePersistentBuffer(
   19798:	0089      	lsls	r1, r1, #2
   1979a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1979c:	f107 0218 	add.w	r2, r7, #24
   197a0:	910f      	str	r1, [sp, #60]	; 0x3c
   197a2:	4798      	blx	r3
   197a4:	4683      	mov	fp, r0
   197a6:	b9f8      	cbnz	r0, 197e8 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xa8>
      context, num_channels * sizeof(int32_t),
      reinterpret_cast<void**>(&data->per_channel_output_multiplier)));
  TF_LITE_ENSURE_STATUS(context->AllocatePersistentBuffer(
   197a8:	4620      	mov	r0, r4
   197aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   197ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
   197ae:	f107 021c 	add.w	r2, r7, #28
   197b2:	4798      	blx	r3
   197b4:	4683      	mov	fp, r0
   197b6:	b9b8      	cbnz	r0, 197e8 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xa8>
      context, num_channels * sizeof(int32_t),
      reinterpret_cast<void**>(&data->per_channel_output_shift)));

  // All per-channel quantized tensors need valid zero point and scale arrays.
  if (input->type == kTfLiteInt8) {
   197b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   197ba:	f81a 2003 	ldrb.w	r2, [sl, r3]
   197be:	2a09      	cmp	r2, #9
   197c0:	d14b      	bne.n	1985a <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x11a>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
   197c2:	f896 b030 	ldrb.w	fp, [r6, #48]	; 0x30
   197c6:	f1bb 0f01 	cmp.w	fp, #1
   197ca:	d011      	beq.n	197f0 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xb0>
   197cc:	2501      	movs	r5, #1
   197ce:	4b2d      	ldr	r3, [pc, #180]	; (19884 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
   197d0:	e9cd b502 	strd	fp, r5, [sp, #8]
   197d4:	9301      	str	r3, [sp, #4]
   197d6:	4b2c      	ldr	r3, [pc, #176]	; (19888 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
   197d8:	4620      	mov	r0, r4
   197da:	9300      	str	r3, [sp, #0]
   197dc:	6966      	ldr	r6, [r4, #20]
   197de:	2395      	movs	r3, #149	; 0x95
   197e0:	4a2a      	ldr	r2, [pc, #168]	; (1988c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
   197e2:	492b      	ldr	r1, [pc, #172]	; (19890 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x150>)
   197e4:	47b0      	blx	r6
   197e6:	46ab      	mov	fp, r5
  }

  return CalculateOpData(context, node, params, input_width, input_height,
                         filter_width, filter_height, output_width,
                         output_height, input->type, data);
}  // namespace conv
   197e8:	4658      	mov	r0, fp
   197ea:	b011      	add	sp, #68	; 0x44
   197ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const auto* affine_quantization =
   197f0:	6b73      	ldr	r3, [r6, #52]	; 0x34
    TF_LITE_ENSURE(context, affine_quantization);
   197f2:	b943      	cbnz	r3, 19806 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
   197f4:	4b27      	ldr	r3, [pc, #156]	; (19894 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
   197f6:	6965      	ldr	r5, [r4, #20]
   197f8:	9300      	str	r3, [sp, #0]
   197fa:	239a      	movs	r3, #154	; 0x9a
    TF_LITE_ENSURE(context, affine_quantization->scale);
   197fc:	4620      	mov	r0, r4
   197fe:	4a23      	ldr	r2, [pc, #140]	; (1988c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
   19800:	4925      	ldr	r1, [pc, #148]	; (19898 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
   19802:	47a8      	blx	r5
   19804:	e7f0      	b.n	197e8 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xa8>
   19806:	6818      	ldr	r0, [r3, #0]
   19808:	b920      	cbnz	r0, 19814 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>
   1980a:	4b24      	ldr	r3, [pc, #144]	; (1989c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x15c>)
   1980c:	6965      	ldr	r5, [r4, #20]
   1980e:	9300      	str	r3, [sp, #0]
   19810:	239b      	movs	r3, #155	; 0x9b
   19812:	e7f3      	b.n	197fc <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xbc>
    TF_LITE_ENSURE(context, affine_quantization->zero_point);
   19814:	6859      	ldr	r1, [r3, #4]
   19816:	b921      	cbnz	r1, 19822 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xe2>
   19818:	4b21      	ldr	r3, [pc, #132]	; (198a0 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x160>)
   1981a:	6965      	ldr	r5, [r4, #20]
   1981c:	9300      	str	r3, [sp, #0]
   1981e:	239c      	movs	r3, #156	; 0x9c
   19820:	e7ec      	b.n	197fc <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xbc>
    TF_LITE_ENSURE(context,
   19822:	6803      	ldr	r3, [r0, #0]
   19824:	2b01      	cmp	r3, #1
   19826:	d008      	beq.n	1983a <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xfa>
   19828:	68b0      	ldr	r0, [r6, #8]
   1982a:	6840      	ldr	r0, [r0, #4]
   1982c:	4283      	cmp	r3, r0
   1982e:	d004      	beq.n	1983a <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xfa>
   19830:	4b1c      	ldr	r3, [pc, #112]	; (198a4 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x164>)
   19832:	6965      	ldr	r5, [r4, #20]
   19834:	9300      	str	r3, [sp, #0]
   19836:	239e      	movs	r3, #158	; 0x9e
   19838:	e7e0      	b.n	197fc <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xbc>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
   1983a:	6809      	ldr	r1, [r1, #0]
   1983c:	428b      	cmp	r3, r1
   1983e:	d00c      	beq.n	1985a <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x11a>
   19840:	e9cd 3102 	strd	r3, r1, [sp, #8]
   19844:	4b18      	ldr	r3, [pc, #96]	; (198a8 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x168>)
   19846:	4620      	mov	r0, r4
   19848:	9301      	str	r3, [sp, #4]
   1984a:	4b18      	ldr	r3, [pc, #96]	; (198ac <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x16c>)
   1984c:	6965      	ldr	r5, [r4, #20]
   1984e:	9300      	str	r3, [sp, #0]
   19850:	4a0e      	ldr	r2, [pc, #56]	; (1988c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
   19852:	23a2      	movs	r3, #162	; 0xa2
   19854:	490e      	ldr	r1, [pc, #56]	; (19890 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x150>)
   19856:	47a8      	blx	r5
   19858:	e7c6      	b.n	197e8 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xa8>
  return CalculateOpData(context, node, params, input_width, input_height,
   1985a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1985c:	e9cd 2705 	strd	r2, r7, [sp, #20]
   19860:	9304      	str	r3, [sp, #16]
   19862:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19864:	4642      	mov	r2, r8
   19866:	9303      	str	r3, [sp, #12]
   19868:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1986a:	4629      	mov	r1, r5
   1986c:	9302      	str	r3, [sp, #8]
   1986e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19870:	4620      	mov	r0, r4
   19872:	9301      	str	r3, [sp, #4]
   19874:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19876:	9300      	str	r3, [sp, #0]
   19878:	464b      	mov	r3, r9
   1987a:	f7ff feb3 	bl	195e4 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE>
   1987e:	4683      	mov	fp, r0
                         output_height, input->type, data);
   19880:	e7b2      	b.n	197e8 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xa8>
   19882:	bf00      	nop
   19884:	00034d66 	.word	0x00034d66
   19888:	00034d80 	.word	0x00034d80
   1988c:	00034d08 	.word	0x00034d08
   19890:	00034a7c 	.word	0x00034a7c
   19894:	00034d9a 	.word	0x00034d9a
   19898:	00034b9c 	.word	0x00034b9c
   1989c:	00034dae 	.word	0x00034dae
   198a0:	00034dc9 	.word	0x00034dc9
   198a4:	00034de9 	.word	0x00034de9
   198a8:	00034e62 	.word	0x00034e62
   198ac:	00034e88 	.word	0x00034e88

000198b0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_>:

void EvalFloat(TfLiteContext* context, TfLiteNode* node,
               TfLiteConvParams* params, const OpData& data,
               const TfLiteTensor* input, const TfLiteTensor* filter,
               const TfLiteTensor* bias, TfLiteTensor* im2col,
               TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
   198b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  float output_activation_min, output_activation_max;
  CalculateActivationRange(params->activation, &output_activation_min,
   198b4:	7b11      	ldrb	r1, [r2, #12]
               TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
   198b6:	b0b5      	sub	sp, #212	; 0xd4
  if (activation == kTfLiteActRelu) {
   198b8:	2901      	cmp	r1, #1
   198ba:	9f43      	ldr	r7, [sp, #268]	; 0x10c
   198bc:	e9dd 453e 	ldrd	r4, r5, [sp, #248]	; 0xf8
   198c0:	e9dd 6840 	ldrd	r6, r8, [sp, #256]	; 0x100
   198c4:	d072      	beq.n	199ac <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0xfc>
  } else if (activation == kTfLiteActRelu6) {
   198c6:	2903      	cmp	r1, #3
   198c8:	d075      	beq.n	199b6 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x106>
    *activation_max = std::numeric_limits<T>::max();
   198ca:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 199bc <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x10c>
   198ce:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   198d2:	2902      	cmp	r1, #2
   198d4:	eddf 6a3a 	vldr	s13, [pc, #232]	; 199c0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x110>
   198d8:	fe47 7a87 	vseleq.f32	s15, s15, s14
   198dc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   198e0:	fe07 7a26 	vseleq.f32	s14, s14, s13
                           &output_activation_max);
  // TODO(b/154032858): Investigate removing extra copies.
  ConvParams op_params;
  op_params.padding_type = RuntimePaddingType(params->padding);
   198e4:	7811      	ldrb	r1, [r2, #0]
  switch (padding) {
   198e6:	2901      	cmp	r1, #1
   198e8:	d002      	beq.n	198f0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x40>
      return PaddingType::kNone;
   198ea:	2902      	cmp	r1, #2
   198ec:	bf18      	it	ne
   198ee:	2100      	movne	r1, #0
  op_params.padding_type = RuntimePaddingType(params->padding);
   198f0:	f88d 1098 	strb.w	r1, [sp, #152]	; 0x98
  op_params.padding_values.width = data.padding.width;
   198f4:	6819      	ldr	r1, [r3, #0]
  op_params.padding_values.height = data.padding.height;
   198f6:	685b      	ldr	r3, [r3, #4]
  op_params.padding_values.width = data.padding.width;
   198f8:	f8ad 109a 	strh.w	r1, [sp, #154]	; 0x9a
  op_params.padding_values.height = data.padding.height;
   198fc:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
  op_params.stride_width = params->stride_width;
   19900:	6853      	ldr	r3, [r2, #4]
  op_params.dilation_width_factor = params->dilation_width_factor;
  op_params.dilation_height_factor = params->dilation_height_factor;
  op_params.float_activation_min = output_activation_min;
  op_params.float_activation_max = output_activation_max;

  reference_ops::Conv(op_params, GetTensorShape(input),
   19902:	4621      	mov	r1, r4
  op_params.stride_width = params->stride_width;
   19904:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
  op_params.stride_height = params->stride_height;
   19908:	6893      	ldr	r3, [r2, #8]
  reference_ops::Conv(op_params, GetTensorShape(input),
   1990a:	a808      	add	r0, sp, #32
  op_params.stride_height = params->stride_height;
   1990c:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
  op_params.dilation_width_factor = params->dilation_width_factor;
   19910:	6913      	ldr	r3, [r2, #16]
  op_params.float_activation_min = output_activation_min;
   19912:	ed8d 7a32 	vstr	s14, [sp, #200]	; 0xc8
  op_params.dilation_width_factor = params->dilation_width_factor;
   19916:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
  op_params.dilation_height_factor = params->dilation_height_factor;
   1991a:	6953      	ldr	r3, [r2, #20]
  op_params.float_activation_max = output_activation_max;
   1991c:	edcd 7a33 	vstr	s15, [sp, #204]	; 0xcc
  op_params.dilation_height_factor = params->dilation_height_factor;
   19920:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
  reference_ops::Conv(op_params, GetTensorShape(input),
   19924:	f00d fe8a 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   19928:	b104      	cbz	r4, 1992c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x7c>
   1992a:	6864      	ldr	r4, [r4, #4]
                      GetTensorData<float>(input), GetTensorShape(filter),
   1992c:	4629      	mov	r1, r5
   1992e:	a80e      	add	r0, sp, #56	; 0x38
   19930:	f00d fe84 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   19934:	b105      	cbz	r5, 19938 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x88>
   19936:	686d      	ldr	r5, [r5, #4]
                      GetTensorData<float>(filter), GetTensorShape(bias),
   19938:	f10d 0950 	add.w	r9, sp, #80	; 0x50
   1993c:	4631      	mov	r1, r6
   1993e:	4648      	mov	r0, r9
   19940:	f00d fe7c 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   19944:	b106      	cbz	r6, 19948 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x98>
   19946:	6876      	ldr	r6, [r6, #4]
                      GetTensorData<float>(bias), GetTensorShape(output),
   19948:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
   1994c:	4639      	mov	r1, r7
   1994e:	4650      	mov	r0, sl
   19950:	f00d fe74 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   19954:	b107      	cbz	r7, 19958 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0xa8>
   19956:	687f      	ldr	r7, [r7, #4]
                      GetTensorData<float>(output), GetTensorShape(im2col),
   19958:	f10d 0b80 	add.w	fp, sp, #128	; 0x80
   1995c:	4641      	mov	r1, r8
   1995e:	4658      	mov	r0, fp
   19960:	f00d fe6c 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   19964:	f1b8 0f00 	cmp.w	r8, #0
   19968:	d001      	beq.n	1996e <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0xbe>
   1996a:	f8d8 8004 	ldr.w	r8, [r8, #4]
  reference_ops::Conv(op_params, GetTensorShape(input),
   1996e:	4622      	mov	r2, r4
   19970:	ab0e      	add	r3, sp, #56	; 0x38
   19972:	a908      	add	r1, sp, #32
   19974:	a826      	add	r0, sp, #152	; 0x98
   19976:	e9cd b805 	strd	fp, r8, [sp, #20]
   1997a:	e9cd a703 	strd	sl, r7, [sp, #12]
   1997e:	e9cd 9601 	strd	r9, r6, [sp, #4]
   19982:	9500      	str	r5, [sp, #0]
   19984:	f7ff fd1c 	bl	193c0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>
                      GetTensorData<float>(output), GetTensorShape(im2col),
   19988:	4658      	mov	r0, fp
   1998a:	f00d fe12 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(bias), GetTensorShape(output),
   1998e:	4650      	mov	r0, sl
   19990:	f00d fe0f 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(filter), GetTensorShape(bias),
   19994:	4648      	mov	r0, r9
   19996:	f00d fe0c 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(input), GetTensorShape(filter),
   1999a:	a80e      	add	r0, sp, #56	; 0x38
   1999c:	f00d fe09 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Conv(op_params, GetTensorShape(input),
   199a0:	a808      	add	r0, sp, #32
   199a2:	f00d fe06 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(im2col));
}
   199a6:	b035      	add	sp, #212	; 0xd4
   199a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *activation_max = std::numeric_limits<T>::max();
   199ac:	eddf 7a03 	vldr	s15, [pc, #12]	; 199bc <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x10c>
    *activation_min = 0;
   199b0:	ed9f 7a04 	vldr	s14, [pc, #16]	; 199c4 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x114>
   199b4:	e796      	b.n	198e4 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x34>
    *activation_max = 6;
   199b6:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
   199ba:	e7f9      	b.n	199b0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x100>
   199bc:	7f7fffff 	.word	0x7f7fffff
   199c0:	ff7fffff 	.word	0xff7fffff
   199c4:	00000000 	.word	0x00000000

000199c8 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->outputs->data[index]];
   199c8:	684b      	ldr	r3, [r1, #4]

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   199ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   199ce:	685b      	ldr	r3, [r3, #4]
  auto* params = reinterpret_cast<TfLiteConvParams*>(node->builtin_data);

  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
   199d0:	6884      	ldr	r4, [r0, #8]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   199d2:	680e      	ldr	r6, [r1, #0]
   199d4:	eb04 1c83 	add.w	ip, r4, r3, lsl #6
  const bool use_tensor = index < node->inputs->size &&
   199d8:	6833      	ldr	r3, [r6, #0]
  return &context->tensors[node->inputs->data[index]];
   199da:	6877      	ldr	r7, [r6, #4]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   199dc:	4605      	mov	r5, r0
   199de:	68b0      	ldr	r0, [r6, #8]
  const bool use_tensor = index < node->inputs->size &&
   199e0:	2b02      	cmp	r3, #2
  return &context->tensors[node->inputs->data[index]];
   199e2:	ea4f 1887 	mov.w	r8, r7, lsl #6
  auto* params = reinterpret_cast<TfLiteConvParams*>(node->builtin_data);
   199e6:	694a      	ldr	r2, [r1, #20]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   199e8:	b086      	sub	sp, #24
   199ea:	eb04 1787 	add.w	r7, r4, r7, lsl #6
   199ee:	eb04 1080 	add.w	r0, r4, r0, lsl #6
  const bool use_tensor = index < node->inputs->size &&
   199f2:	dd08      	ble.n	19a06 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x3e>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
   199f4:	68f6      	ldr	r6, [r6, #12]
  const bool use_tensor = index < node->inputs->size &&
   199f6:	1c73      	adds	r3, r6, #1
   199f8:	d005      	beq.n	19a06 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x3e>
    return &context->tensors[node->inputs->data[index]];
   199fa:	eb04 1686 	add.w	r6, r4, r6, lsl #6
  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);

  TFLITE_DCHECK(node->user_data != nullptr);
   199fe:	690b      	ldr	r3, [r1, #16]
   19a00:	b91b      	cbnz	r3, 19a0a <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x42>
   19a02:	f017 f9da 	bl	30dba <abort>
  return nullptr;
   19a06:	2600      	movs	r6, #0
   19a08:	e7f9      	b.n	199fe <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x36>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  switch (input->type) {  // Already know in/out types are same.
   19a0a:	f814 e008 	ldrb.w	lr, [r4, r8]
   19a0e:	f1be 0f03 	cmp.w	lr, #3
   19a12:	d01e      	beq.n	19a52 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x8a>
   19a14:	f1be 0f09 	cmp.w	lr, #9
   19a18:	d011      	beq.n	19a3e <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x76>
   19a1a:	f1be 0f01 	cmp.w	lr, #1
   19a1e:	d124      	bne.n	19a6a <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xa2>
    case kTfLiteFloat32:
      EvalFloat(context, node, params, data, input, filter, bias, nullptr,
   19a20:	2400      	movs	r4, #0
   19a22:	e9cd 0601 	strd	r0, r6, [sp, #4]
   19a26:	e9cd 4403 	strd	r4, r4, [sp, #12]
   19a2a:	4628      	mov	r0, r5
   19a2c:	f8cd c014 	str.w	ip, [sp, #20]
   19a30:	9700      	str	r7, [sp, #0]
   19a32:	f7ff ff3d 	bl	198b0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
  }
  return kTfLiteOk;
}
   19a36:	4620      	mov	r0, r4
   19a38:	b006      	add	sp, #24
   19a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      EvalQuantizedPerChannel(context, node, params, data, input, filter, bias,
   19a3e:	2400      	movs	r4, #0
   19a40:	e9cd 0601 	strd	r0, r6, [sp, #4]
   19a44:	e9cd c403 	strd	ip, r4, [sp, #12]
   19a48:	4628      	mov	r0, r5
   19a4a:	9700      	str	r7, [sp, #0]
   19a4c:	f011 fc55 	bl	2b2fa <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_>
      break;
   19a50:	e7f1      	b.n	19a36 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x6e>
      EvalQuantized(context, node, params, data, input, filter, bias, nullptr,
   19a52:	2400      	movs	r4, #0
   19a54:	e9cd 0601 	strd	r0, r6, [sp, #4]
   19a58:	e9cd 4403 	strd	r4, r4, [sp, #12]
   19a5c:	4628      	mov	r0, r5
   19a5e:	f8cd c014 	str.w	ip, [sp, #20]
   19a62:	9700      	str	r7, [sp, #0]
   19a64:	f011 fbce 	bl	2b204 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_>
      break;
   19a68:	e7e5      	b.n	19a36 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x6e>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   19a6a:	4670      	mov	r0, lr
   19a6c:	696e      	ldr	r6, [r5, #20]
   19a6e:	f7f3 f929 	bl	ccc4 <TfLiteTypeGetName>
   19a72:	f814 3008 	ldrb.w	r3, [r4, r8]
   19a76:	4602      	mov	r2, r0
   19a78:	4902      	ldr	r1, [pc, #8]	; (19a84 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xbc>)
   19a7a:	4628      	mov	r0, r5
   19a7c:	47b0      	blx	r6
      return kTfLiteError;
   19a7e:	2401      	movs	r4, #1
   19a80:	e7d9      	b.n	19a36 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x6e>
   19a82:	bf00      	nop
   19a84:	000349d0 	.word	0x000349d0

00019a88 <_ZN6tflite3ops5micro16Register_CONV_2DEv>:

}  // namespace conv

TfLiteRegistration Register_CONV_2D() {
   19a88:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/conv::Prepare,
          /*invoke=*/conv::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   19a8a:	4604      	mov	r4, r0
TfLiteRegistration Register_CONV_2D() {
   19a8c:	4606      	mov	r6, r0
          /*version=*/0};
   19a8e:	4d04      	ldr	r5, [pc, #16]	; (19aa0 <_ZN6tflite3ops5micro16Register_CONV_2DEv+0x18>)
   19a90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   19a92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   19a94:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   19a98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   19a9c:	4630      	mov	r0, r6
   19a9e:	bd70      	pop	{r4, r5, r6, pc}
   19aa0:	000318d8 	.word	0x000318d8

00019aa4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void DepthwiseConv(
    const DepthwiseParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& filter_shape,
    const float* filter_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
   19aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19aa8:	ed2d 8b04 	vpush	{d8-d9}
   19aac:	469a      	mov	sl, r3
  const int stride_width = params.stride_width;
   19aae:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    float* output_data) {
   19ab2:	b09b      	sub	sp, #108	; 0x6c
  const int stride_width = params.stride_width;
   19ab4:	930b      	str	r3, [sp, #44]	; 0x2c
  const int stride_height = params.stride_height;
   19ab6:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    float* output_data) {
   19aba:	460c      	mov	r4, r1
  const int stride_height = params.stride_height;
   19abc:	930c      	str	r3, [sp, #48]	; 0x30
  const int dilation_width_factor = params.dilation_width_factor;
   19abe:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
  const int dilation_height_factor = params.dilation_height_factor;
  const int pad_width = params.padding_values.width;
  const int pad_height = params.padding_values.height;
  const int depth_multiplier = params.depth_multiplier;
  const float output_activation_min = params.float_activation_min;
   19ac2:	edd0 8a0c 	vldr	s17, [r0, #48]	; 0x30
  const int dilation_width_factor = params.dilation_width_factor;
   19ac6:	930d      	str	r3, [sp, #52]	; 0x34
  const int dilation_height_factor = params.dilation_height_factor;
   19ac8:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
  const float output_activation_max = params.float_activation_max;
   19acc:	ed90 9a0d 	vldr	s18, [r0, #52]	; 0x34
  const int dilation_height_factor = params.dilation_height_factor;
   19ad0:	930e      	str	r3, [sp, #56]	; 0x38
  const int pad_width = params.padding_values.width;
   19ad2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
    float* output_data) {
   19ad6:	9f2b      	ldr	r7, [sp, #172]	; 0xac
  const int pad_width = params.padding_values.width;
   19ad8:	9310      	str	r3, [sp, #64]	; 0x40
  const int pad_height = params.padding_values.height;
   19ada:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
    float* output_data) {
   19ade:	9219      	str	r2, [sp, #100]	; 0x64
  const int pad_height = params.padding_values.height;
   19ae0:	9311      	str	r3, [sp, #68]	; 0x44
  const int depth_multiplier = params.depth_multiplier;
   19ae2:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
   19ae6:	9307      	str	r3, [sp, #28]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   19ae8:	680b      	ldr	r3, [r1, #0]
   19aea:	2b04      	cmp	r3, #4
   19aec:	d001      	beq.n	19af2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4e>
   19aee:	f017 f964 	bl	30dba <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   19af2:	f8da 3000 	ldr.w	r3, [sl]
   19af6:	2b04      	cmp	r3, #4
   19af8:	d1f9      	bne.n	19aee <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4a>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   19afa:	683b      	ldr	r3, [r7, #0]
   19afc:	2b04      	cmp	r3, #4
   19afe:	d1f6      	bne.n	19aee <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4a>

  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   19b00:	2300      	movs	r3, #0
   19b02:	463a      	mov	r2, r7
   19b04:	4619      	mov	r1, r3
   19b06:	4620      	mov	r0, r4
   19b08:	f010 fc08 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   19b0c:	2303      	movs	r3, #3
   19b0e:	463a      	mov	r2, r7
   19b10:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   19b12:	9012      	str	r0, [sp, #72]	; 0x48
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   19b14:	4650      	mov	r0, sl
   19b16:	f010 fc01 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   19b1a:	2101      	movs	r1, #1
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   19b1c:	4605      	mov	r5, r0
  const int input_height = input_shape.Dims(1);
   19b1e:	4620      	mov	r0, r4
   19b20:	f00d fd52 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   19b24:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   19b26:	9013      	str	r0, [sp, #76]	; 0x4c
  const int input_width = input_shape.Dims(2);
   19b28:	4620      	mov	r0, r4
   19b2a:	f00d fd4d 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_depth = input_shape.Dims(3);
   19b2e:	2103      	movs	r1, #3
  const int input_width = input_shape.Dims(2);
   19b30:	9014      	str	r0, [sp, #80]	; 0x50
  const int input_depth = input_shape.Dims(3);
   19b32:	4620      	mov	r0, r4
   19b34:	f00d fd48 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
   19b38:	2101      	movs	r1, #1
  const int input_depth = input_shape.Dims(3);
   19b3a:	900a      	str	r0, [sp, #40]	; 0x28
  const int filter_height = filter_shape.Dims(1);
   19b3c:	4650      	mov	r0, sl
   19b3e:	f00d fd43 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
   19b42:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
   19b44:	9015      	str	r0, [sp, #84]	; 0x54
  const int filter_width = filter_shape.Dims(2);
   19b46:	4650      	mov	r0, sl
   19b48:	f00d fd3e 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   19b4c:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
   19b4e:	9016      	str	r0, [sp, #88]	; 0x58
  const int output_height = output_shape.Dims(1);
   19b50:	4638      	mov	r0, r7
   19b52:	f00d fd39 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   19b56:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   19b58:	9017      	str	r0, [sp, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
   19b5a:	4638      	mov	r0, r7
   19b5c:	f00d fd34 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   19b60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19b62:	9a07      	ldr	r2, [sp, #28]
  const int output_width = output_shape.Dims(2);
   19b64:	9018      	str	r0, [sp, #96]	; 0x60
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   19b66:	fb03 f602 	mul.w	r6, r3, r2
   19b6a:	42ae      	cmp	r6, r5
   19b6c:	d1bf      	bne.n	19aee <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4a>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   19b6e:	9829      	ldr	r0, [sp, #164]	; 0xa4
   19b70:	f00d fdaf 	bl	276d2 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   19b74:	42b0      	cmp	r0, r6
   19b76:	d1ba      	bne.n	19aee <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4a>

  for (int b = 0; b < batches; ++b) {
   19b78:	f04f 0900 	mov.w	r9, #0
                      filter_shape, 0, filter_y, filter_x, oc)];
                  total += (input_value * filter_value);
                }
              }
            }
            float bias_value = 0.0f;
   19b7c:	eddf 9a58 	vldr	s19, [pc, #352]	; 19ce0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x23c>
  for (int b = 0; b < batches; ++b) {
   19b80:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19b82:	4599      	cmp	r9, r3
   19b84:	f280 80a6 	bge.w	19cd4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x230>
   19b88:	9b11      	ldr	r3, [sp, #68]	; 0x44
   19b8a:	425b      	negs	r3, r3
   19b8c:	9309      	str	r3, [sp, #36]	; 0x24
    for (int out_y = 0; out_y < output_height; ++out_y) {
   19b8e:	2300      	movs	r3, #0
   19b90:	9302      	str	r3, [sp, #8]
   19b92:	9b02      	ldr	r3, [sp, #8]
   19b94:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   19b96:	4293      	cmp	r3, r2
   19b98:	f280 8099 	bge.w	19cce <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x22a>
   19b9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   19b9e:	425b      	negs	r3, r3
   19ba0:	9308      	str	r3, [sp, #32]
      for (int out_x = 0; out_x < output_width; ++out_x) {
   19ba2:	2300      	movs	r3, #0
   19ba4:	9303      	str	r3, [sp, #12]
   19ba6:	9b03      	ldr	r3, [sp, #12]
   19ba8:	9a18      	ldr	r2, [sp, #96]	; 0x60
   19baa:	4293      	cmp	r3, r2
   19bac:	f280 8087 	bge.w	19cbe <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x21a>
   19bb0:	2600      	movs	r6, #0
        for (int ic = 0; ic < input_depth; ++ic) {
   19bb2:	9604      	str	r6, [sp, #16]
   19bb4:	9b04      	ldr	r3, [sp, #16]
   19bb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   19bb8:	4293      	cmp	r3, r2
   19bba:	da78      	bge.n	19cae <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x20a>
   19bbc:	4635      	mov	r5, r6
          for (int m = 0; m < depth_multiplier; m++) {
   19bbe:	9a07      	ldr	r2, [sp, #28]
   19bc0:	1bab      	subs	r3, r5, r6
   19bc2:	429a      	cmp	r2, r3
   19bc4:	dd6d      	ble.n	19ca2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1fe>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   19bc6:	2300      	movs	r3, #0
            float total = 0.f;
   19bc8:	ed9f 8a45 	vldr	s16, [pc, #276]	; 19ce0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x23c>
            const int oc = m + ic * depth_multiplier;
   19bcc:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   19bd0:	9305      	str	r3, [sp, #20]
   19bd2:	9b05      	ldr	r3, [sp, #20]
   19bd4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   19bd6:	4293      	cmp	r3, r2
   19bd8:	da3c      	bge.n	19c54 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1b0>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   19bda:	2300      	movs	r3, #0
                const int in_y =
   19bdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   19be0:	9306      	str	r3, [sp, #24]
   19be2:	9b06      	ldr	r3, [sp, #24]
   19be4:	9a16      	ldr	r2, [sp, #88]	; 0x58
   19be6:	4293      	cmp	r3, r2
   19be8:	da2e      	bge.n	19c48 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1a4>
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   19bea:	f1b8 0f00 	cmp.w	r8, #0
   19bee:	db25      	blt.n	19c3c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x198>
   19bf0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   19bf2:	4543      	cmp	r3, r8
   19bf4:	dd22      	ble.n	19c3c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x198>
   19bf6:	f1bb 0f00 	cmp.w	fp, #0
   19bfa:	db1f      	blt.n	19c3c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x198>
   19bfc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   19bfe:	455b      	cmp	r3, fp
   19c00:	dd1c      	ble.n	19c3c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x198>
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
   19c02:	9b04      	ldr	r3, [sp, #16]
   19c04:	465a      	mov	r2, fp
   19c06:	4649      	mov	r1, r9
   19c08:	9300      	str	r3, [sp, #0]
   19c0a:	4620      	mov	r0, r4
   19c0c:	4643      	mov	r3, r8
   19c0e:	f00d fd9d 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                  float filter_value = filter_data[Offset(
   19c12:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
   19c16:	900f      	str	r0, [sp, #60]	; 0x3c
                  float filter_value = filter_data[Offset(
   19c18:	2100      	movs	r1, #0
   19c1a:	4650      	mov	r0, sl
   19c1c:	9500      	str	r5, [sp, #0]
   19c1e:	f00d fd95 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
   19c22:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   19c24:	9b19      	ldr	r3, [sp, #100]	; 0x64
   19c26:	eb03 0382 	add.w	r3, r3, r2, lsl #2
                      filter_shape, 0, filter_y, filter_x, oc)];
   19c2a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
                  total += (input_value * filter_value);
   19c2c:	ed93 7a00 	vldr	s14, [r3]
                      filter_shape, 0, filter_y, filter_x, oc)];
   19c30:	eb02 0080 	add.w	r0, r2, r0, lsl #2
                  total += (input_value * filter_value);
   19c34:	edd0 7a00 	vldr	s15, [r0]
   19c38:	eea7 8a27 	vfma.f32	s16, s14, s15
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   19c3c:	9b06      	ldr	r3, [sp, #24]
   19c3e:	3301      	adds	r3, #1
   19c40:	9306      	str	r3, [sp, #24]
   19c42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19c44:	4498      	add	r8, r3
   19c46:	e7cc      	b.n	19be2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x13e>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   19c48:	9b05      	ldr	r3, [sp, #20]
   19c4a:	3301      	adds	r3, #1
   19c4c:	9305      	str	r3, [sp, #20]
   19c4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   19c50:	449b      	add	fp, r3
   19c52:	e7be      	b.n	19bd2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x12e>
            if (bias_data) {
   19c54:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   19c56:	b30b      	cbz	r3, 19c9c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1f8>
              bias_value = bias_data[oc];
   19c58:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   19c5c:	edd3 7a00 	vldr	s15, [r3]
            }
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
   19c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
                ActivationFunctionWithMinMax(total + bias_value,
   19c64:	ee38 8a27 	vadd.f32	s16, s16, s15
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
   19c68:	9500      	str	r5, [sp, #0]
   19c6a:	4649      	mov	r1, r9
   19c6c:	4638      	mov	r0, r7
   19c6e:	f00d fd6d 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
	return __b;
   19c72:	eeb4 8a68 	vcmp.f32	s16, s17
   19c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   19c7a:	bf48      	it	mi
   19c7c:	eeb0 8a68 	vmovmi.f32	s16, s17
	return __b;
   19c80:	eeb4 9a48 	vcmp.f32	s18, s16
   19c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   19c88:	bf48      	it	mi
   19c8a:	eeb0 8a49 	vmovmi.f32	s16, s18
   19c8e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   19c90:	3501      	adds	r5, #1
   19c92:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   19c96:	ed80 8a00 	vstr	s16, [r0]
          for (int m = 0; m < depth_multiplier; m++) {
   19c9a:	e790      	b.n	19bbe <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11a>
            float bias_value = 0.0f;
   19c9c:	eef0 7a69 	vmov.f32	s15, s19
   19ca0:	e7de      	b.n	19c60 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1bc>
        for (int ic = 0; ic < input_depth; ++ic) {
   19ca2:	9b04      	ldr	r3, [sp, #16]
   19ca4:	3301      	adds	r3, #1
   19ca6:	9304      	str	r3, [sp, #16]
   19ca8:	9b07      	ldr	r3, [sp, #28]
   19caa:	441e      	add	r6, r3
   19cac:	e782      	b.n	19bb4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x110>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   19cae:	9b03      	ldr	r3, [sp, #12]
   19cb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   19cb2:	3301      	adds	r3, #1
   19cb4:	9303      	str	r3, [sp, #12]
   19cb6:	9b08      	ldr	r3, [sp, #32]
   19cb8:	4413      	add	r3, r2
   19cba:	9308      	str	r3, [sp, #32]
   19cbc:	e773      	b.n	19ba6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x102>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   19cbe:	9b02      	ldr	r3, [sp, #8]
   19cc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   19cc2:	3301      	adds	r3, #1
   19cc4:	9302      	str	r3, [sp, #8]
   19cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19cc8:	4413      	add	r3, r2
   19cca:	9309      	str	r3, [sp, #36]	; 0x24
   19ccc:	e761      	b.n	19b92 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xee>
  for (int b = 0; b < batches; ++b) {
   19cce:	f109 0901 	add.w	r9, r9, #1
   19cd2:	e755      	b.n	19b80 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xdc>
          }
        }
      }
    }
  }
}
   19cd4:	b01b      	add	sp, #108	; 0x6c
   19cd6:	ecbd 8b04 	vpop	{d8-d9}
   19cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19cde:	bf00      	nop
   19ce0:	00000000 	.word	0x00000000

00019ce4 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode>:
    return nullptr;
  }
  return data;
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   19ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
   19ce8:	690d      	ldr	r5, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   19cea:	4604      	mov	r4, r0
   19cec:	4688      	mov	r8, r1
   19cee:	b093      	sub	sp, #76	; 0x4c
  TFLITE_DCHECK(node->user_data != nullptr);
   19cf0:	b90d      	cbnz	r5, 19cf6 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x12>
   19cf2:	f017 f862 	bl	30dba <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
   19cf6:	694e      	ldr	r6, [r1, #20]
   19cf8:	2e00      	cmp	r6, #0
   19cfa:	d0fa      	beq.n	19cf2 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xe>

  auto* params =
      reinterpret_cast<TfLiteDepthwiseConvParams*>(node->builtin_data);
  OpData* data = static_cast<OpData*>(node->user_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   19cfc:	680a      	ldr	r2, [r1, #0]
   19cfe:	f8d0 a008 	ldr.w	sl, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
   19d02:	6853      	ldr	r3, [r2, #4]
   19d04:	6897      	ldr	r7, [r2, #8]
   19d06:	ea4f 1983 	mov.w	r9, r3, lsl #6
   19d0a:	eb0a 1383 	add.w	r3, sl, r3, lsl #6
  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);

  const TfLiteType data_type = input->type;
   19d0e:	f81a 2009 	ldrb.w	r2, [sl, r9]
  int width = SizeOfDimension(input, 2);
   19d12:	689b      	ldr	r3, [r3, #8]
  const TfLiteType data_type = input->type;
   19d14:	9210      	str	r2, [sp, #64]	; 0x40
  return t->dims->data[dim];
   19d16:	68da      	ldr	r2, [r3, #12]
   19d18:	689b      	ldr	r3, [r3, #8]
  return &context->tensors[node->inputs->data[index]];
   19d1a:	eb0a 1787 	add.w	r7, sl, r7, lsl #6
  return t->dims->data[dim];
   19d1e:	930a      	str	r3, [sp, #40]	; 0x28
  int height = SizeOfDimension(input, 1);
  int filter_width = SizeOfDimension(filter, 2);
   19d20:	68bb      	ldr	r3, [r7, #8]
   19d22:	920d      	str	r2, [sp, #52]	; 0x34
   19d24:	68da      	ldr	r2, [r3, #12]

  // Per channel quantization is only needed for int8 inference. For other
  // quantized types, only a single scale and zero point is needed.
  const int num_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
  // Dynimically allocate per-channel quantization parameters.
  TF_LITE_ENSURE_STATUS(context->AllocatePersistentBuffer(
   19d26:	6919      	ldr	r1, [r3, #16]
   19d28:	920b      	str	r2, [sp, #44]	; 0x2c
   19d2a:	689a      	ldr	r2, [r3, #8]
   19d2c:	0089      	lsls	r1, r1, #2
   19d2e:	920c      	str	r2, [sp, #48]	; 0x30
   19d30:	6b83      	ldr	r3, [r0, #56]	; 0x38
   19d32:	f105 0218 	add.w	r2, r5, #24
   19d36:	910e      	str	r1, [sp, #56]	; 0x38
   19d38:	4798      	blx	r3
   19d3a:	4683      	mov	fp, r0
   19d3c:	bb48      	cbnz	r0, 19d92 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xae>
      context, num_channels * sizeof(int32_t),
      reinterpret_cast<void**>(&data->per_channel_output_multiplier)));
  TF_LITE_ENSURE_STATUS(context->AllocatePersistentBuffer(
   19d3e:	4620      	mov	r0, r4
   19d40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   19d42:	990e      	ldr	r1, [sp, #56]	; 0x38
   19d44:	f105 021c 	add.w	r2, r5, #28
   19d48:	4798      	blx	r3
   19d4a:	2800      	cmp	r0, #0
   19d4c:	f040 80d3 	bne.w	19ef6 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x212>
      context, num_channels * sizeof(int32_t),
      reinterpret_cast<void**>(&data->per_channel_output_shift)));

  // All per-channel quantized tensors need valid zero point and scale arrays.
  if (input->type == kTfLiteInt8) {
   19d50:	f81a 3009 	ldrb.w	r3, [sl, r9]
   19d54:	2b09      	cmp	r3, #9
   19d56:	d14a      	bne.n	19dee <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x10a>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
   19d58:	f897 b030 	ldrb.w	fp, [r7, #48]	; 0x30
   19d5c:	f1bb 0f01 	cmp.w	fp, #1
   19d60:	d00d      	beq.n	19d7e <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x9a>
   19d62:	4b68      	ldr	r3, [pc, #416]	; (19f04 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x220>)
   19d64:	2501      	movs	r5, #1
   19d66:	9301      	str	r3, [sp, #4]
   19d68:	4b67      	ldr	r3, [pc, #412]	; (19f08 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x224>)
   19d6a:	e9cd b502 	strd	fp, r5, [sp, #8]
   19d6e:	9300      	str	r3, [sp, #0]
   19d70:	2388      	movs	r3, #136	; 0x88
   19d72:	6966      	ldr	r6, [r4, #20]
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
   19d74:	4620      	mov	r0, r4
   19d76:	4a65      	ldr	r2, [pc, #404]	; (19f0c <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x228>)
   19d78:	4965      	ldr	r1, [pc, #404]	; (19f10 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
   19d7a:	47b0      	blx	r6
   19d7c:	e046      	b.n	19e0c <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x128>
                      kTfLiteAffineQuantization);

    const auto* affine_quantization =
   19d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        reinterpret_cast<TfLiteAffineQuantization*>(
            filter->quantization.params);
    TF_LITE_ENSURE(context, affine_quantization);
   19d80:	b95b      	cbnz	r3, 19d9a <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xb6>
   19d82:	4b64      	ldr	r3, [pc, #400]	; (19f14 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x230>)
   19d84:	6965      	ldr	r5, [r4, #20]
   19d86:	9300      	str	r3, [sp, #0]
   19d88:	238e      	movs	r3, #142	; 0x8e
    TF_LITE_ENSURE(context, affine_quantization->scale);
   19d8a:	4620      	mov	r0, r4
   19d8c:	4a5f      	ldr	r2, [pc, #380]	; (19f0c <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x228>)
   19d8e:	4962      	ldr	r1, [pc, #392]	; (19f18 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x234>)
   19d90:	47a8      	blx	r5
                      affine_quantization->zero_point->size);
  }

  return CalculateOpData(context, node, params, width, height, filter_width,
                         filter_height, data_type, data);
}
   19d92:	4658      	mov	r0, fp
   19d94:	b013      	add	sp, #76	; 0x4c
   19d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TF_LITE_ENSURE(context, affine_quantization->scale);
   19d9a:	6819      	ldr	r1, [r3, #0]
   19d9c:	b921      	cbnz	r1, 19da8 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
   19d9e:	4b5f      	ldr	r3, [pc, #380]	; (19f1c <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x238>)
   19da0:	6965      	ldr	r5, [r4, #20]
   19da2:	9300      	str	r3, [sp, #0]
   19da4:	238f      	movs	r3, #143	; 0x8f
   19da6:	e7f0      	b.n	19d8a <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xa6>
    TF_LITE_ENSURE(context, affine_quantization->zero_point);
   19da8:	685a      	ldr	r2, [r3, #4]
   19daa:	b922      	cbnz	r2, 19db6 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xd2>
   19dac:	4b5c      	ldr	r3, [pc, #368]	; (19f20 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
   19dae:	6965      	ldr	r5, [r4, #20]
   19db0:	9300      	str	r3, [sp, #0]
   19db2:	2390      	movs	r3, #144	; 0x90
   19db4:	e7e9      	b.n	19d8a <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xa6>
    TF_LITE_ENSURE(
   19db6:	680b      	ldr	r3, [r1, #0]
   19db8:	2b01      	cmp	r3, #1
   19dba:	d008      	beq.n	19dce <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xea>
   19dbc:	68b9      	ldr	r1, [r7, #8]
   19dbe:	6909      	ldr	r1, [r1, #16]
   19dc0:	428b      	cmp	r3, r1
   19dc2:	d004      	beq.n	19dce <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xea>
   19dc4:	4b57      	ldr	r3, [pc, #348]	; (19f24 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
   19dc6:	6965      	ldr	r5, [r4, #20]
   19dc8:	9300      	str	r3, [sp, #0]
   19dca:	2391      	movs	r3, #145	; 0x91
   19dcc:	e7dd      	b.n	19d8a <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xa6>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
   19dce:	6812      	ldr	r2, [r2, #0]
   19dd0:	4293      	cmp	r3, r2
   19dd2:	d00c      	beq.n	19dee <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x10a>
   19dd4:	e9cd 3202 	strd	r3, r2, [sp, #8]
   19dd8:	4b53      	ldr	r3, [pc, #332]	; (19f28 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
   19dda:	4620      	mov	r0, r4
   19ddc:	9301      	str	r3, [sp, #4]
   19dde:	4b53      	ldr	r3, [pc, #332]	; (19f2c <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x248>)
   19de0:	6965      	ldr	r5, [r4, #20]
   19de2:	9300      	str	r3, [sp, #0]
   19de4:	4a49      	ldr	r2, [pc, #292]	; (19f0c <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x228>)
   19de6:	2395      	movs	r3, #149	; 0x95
   19de8:	4949      	ldr	r1, [pc, #292]	; (19f10 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
   19dea:	47a8      	blx	r5
   19dec:	e7d1      	b.n	19d92 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xae>
  bool has_bias = node->inputs->size == 3;
   19dee:	f8d8 7000 	ldr.w	r7, [r8]
   19df2:	683b      	ldr	r3, [r7, #0]
   19df4:	930e      	str	r3, [sp, #56]	; 0x38
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   19df6:	3b02      	subs	r3, #2
   19df8:	2b01      	cmp	r3, #1
   19dfa:	d90a      	bls.n	19e12 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x12e>
   19dfc:	4b4c      	ldr	r3, [pc, #304]	; (19f30 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
   19dfe:	4620      	mov	r0, r4
   19e00:	9300      	str	r3, [sp, #0]
   19e02:	6965      	ldr	r5, [r4, #20]
   19e04:	2341      	movs	r3, #65	; 0x41
   19e06:	4a41      	ldr	r2, [pc, #260]	; (19f0c <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x228>)
   19e08:	4943      	ldr	r1, [pc, #268]	; (19f18 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x234>)
   19e0a:	47a8      	blx	r5
   19e0c:	f04f 0b01 	mov.w	fp, #1
   19e10:	e7bf      	b.n	19d92 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xae>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
   19e12:	f8d8 3004 	ldr.w	r3, [r8, #4]
   19e16:	f8d3 8000 	ldr.w	r8, [r3]
   19e1a:	930f      	str	r3, [sp, #60]	; 0x3c
   19e1c:	f1b8 0f01 	cmp.w	r8, #1
   19e20:	d009      	beq.n	19e36 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x152>
   19e22:	2501      	movs	r5, #1
   19e24:	4b43      	ldr	r3, [pc, #268]	; (19f34 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x250>)
   19e26:	e9cd 8502 	strd	r8, r5, [sp, #8]
   19e2a:	9301      	str	r3, [sp, #4]
   19e2c:	4b42      	ldr	r3, [pc, #264]	; (19f38 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x254>)
   19e2e:	6966      	ldr	r6, [r4, #20]
   19e30:	9300      	str	r3, [sp, #0]
   19e32:	2342      	movs	r3, #66	; 0x42
   19e34:	e79e      	b.n	19d74 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x90>
      &unused_output_width);
   19e36:	f896 b000 	ldrb.w	fp, [r6]
   19e3a:	e9d6 9a01 	ldrd	r9, sl, [r6, #4]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   19e3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   19e40:	464b      	mov	r3, r9
   19e42:	990d      	ldr	r1, [sp, #52]	; 0x34
   19e44:	4658      	mov	r0, fp
   19e46:	f8cd 8000 	str.w	r8, [sp]
   19e4a:	f011 f9c9 	bl	2b1e0 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   19e4e:	4653      	mov	r3, sl
   19e50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   19e52:	9011      	str	r0, [sp, #68]	; 0x44
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   19e54:	990a      	ldr	r1, [sp, #40]	; 0x28
   19e56:	4658      	mov	r0, fp
   19e58:	f8cd 8000 	str.w	r8, [sp]
   19e5c:	f011 f9c0 	bl	2b1e0 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  int total_padding =
   19e60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   19e62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
      ((out_size - 1) * stride + effective_filter_size - in_size);
   19e64:	3801      	subs	r0, #1
  int total_padding =
   19e66:	1a9b      	subs	r3, r3, r2
   19e68:	fb0a 3a00 	mla	sl, sl, r0, r3
      ((out_size - 1) * stride + effective_filter_size - in_size);
   19e6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  int total_padding =
   19e6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      ((out_size - 1) * stride + effective_filter_size - in_size);
   19e70:	1e58      	subs	r0, r3, #1
  int total_padding =
   19e72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  total_padding = total_padding > 0 ? total_padding : 0;
   19e74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  int total_padding =
   19e78:	1a9b      	subs	r3, r3, r2
   19e7a:	fb09 3900 	mla	r9, r9, r0, r3
  total_padding = total_padding > 0 ? total_padding : 0;
   19e7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
  return total_padding / 2;
   19e82:	ea4f 0369 	mov.w	r3, r9, asr #1
   19e86:	602b      	str	r3, [r5, #0]
   19e88:	ea4f 036a 	mov.w	r3, sl, asr #1
   19e8c:	606b      	str	r3, [r5, #4]
  *offset = total_padding % 2;
   19e8e:	f009 0301 	and.w	r3, r9, #1
   19e92:	60ab      	str	r3, [r5, #8]
  if (data_type != kTfLiteFloat32) {
   19e94:	9b10      	ldr	r3, [sp, #64]	; 0x40
   19e96:	f00a 0001 	and.w	r0, sl, #1
   19e9a:	2b01      	cmp	r3, #1
      &unused_output_width);
   19e9c:	60e8      	str	r0, [r5, #12]
  if (data_type != kTfLiteFloat32) {
   19e9e:	d02e      	beq.n	19efe <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x21a>
  const bool use_tensor = index < node->inputs->size &&
   19ea0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   19ea2:	68a0      	ldr	r0, [r4, #8]
  return &context->tensors[node->inputs->data[index]];
   19ea4:	6879      	ldr	r1, [r7, #4]
   19ea6:	68ba      	ldr	r2, [r7, #8]
  const bool use_tensor = index < node->inputs->size &&
   19ea8:	2b02      	cmp	r3, #2
  return &context->tensors[node->inputs->data[index]];
   19eaa:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   19eae:	eb00 1282 	add.w	r2, r0, r2, lsl #6
  const bool use_tensor = index < node->inputs->size &&
   19eb2:	dd22      	ble.n	19efa <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x216>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
   19eb4:	68fb      	ldr	r3, [r7, #12]
  const bool use_tensor = index < node->inputs->size &&
   19eb6:	1c5f      	adds	r7, r3, #1
   19eb8:	d01f      	beq.n	19efa <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x216>
    return &context->tensors[node->inputs->data[index]];
   19eba:	eb00 1383 	add.w	r3, r0, r3, lsl #6
    int num_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
   19ebe:	6897      	ldr	r7, [r2, #8]
        context, input, filter, bias, output, params->activation,
   19ec0:	3610      	adds	r6, #16
    return tflite::PopulateConvolutionQuantizationParams(
   19ec2:	693f      	ldr	r7, [r7, #16]
   19ec4:	9708      	str	r7, [sp, #32]
   19ec6:	69ef      	ldr	r7, [r5, #28]
   19ec8:	9707      	str	r7, [sp, #28]
   19eca:	69af      	ldr	r7, [r5, #24]
   19ecc:	9601      	str	r6, [sp, #4]
   19ece:	9706      	str	r7, [sp, #24]
   19ed0:	f105 0724 	add.w	r7, r5, #36	; 0x24
   19ed4:	9705      	str	r7, [sp, #20]
   19ed6:	f105 0720 	add.w	r7, r5, #32
   19eda:	9704      	str	r7, [sp, #16]
   19edc:	f105 0714 	add.w	r7, r5, #20
   19ee0:	3510      	adds	r5, #16
   19ee2:	9502      	str	r5, [sp, #8]
  return &context->tensors[node->outputs->data[index]];
   19ee4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   19ee6:	9703      	str	r7, [sp, #12]
   19ee8:	686d      	ldr	r5, [r5, #4]
   19eea:	eb00 1085 	add.w	r0, r0, r5, lsl #6
   19eee:	9000      	str	r0, [sp, #0]
   19ef0:	4620      	mov	r0, r4
   19ef2:	f007 f915 	bl	21120 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>
   19ef6:	4683      	mov	fp, r0
   19ef8:	e74b      	b.n	19d92 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xae>
  return nullptr;
   19efa:	2300      	movs	r3, #0
   19efc:	e7df      	b.n	19ebe <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x1da>
  return kTfLiteOk;
   19efe:	f04f 0b00 	mov.w	fp, #0
   19f02:	e746      	b.n	19d92 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xae>
   19f04:	00034d66 	.word	0x00034d66
   19f08:	00034d80 	.word	0x00034d80
   19f0c:	00034ea9 	.word	0x00034ea9
   19f10:	00034a7c 	.word	0x00034a7c
   19f14:	00034d9a 	.word	0x00034d9a
   19f18:	00034b9c 	.word	0x00034b9c
   19f1c:	00034dae 	.word	0x00034dae
   19f20:	00034dc9 	.word	0x00034dc9
   19f24:	00034ed9 	.word	0x00034ed9
   19f28:	00034e62 	.word	0x00034e62
   19f2c:	00034e88 	.word	0x00034e88
   19f30:	00034d2e 	.word	0x00034d2e
   19f34:	00035814 	.word	0x00035814
   19f38:	00034d52 	.word	0x00034d52

00019f3c <_ZN6tflite3ops5micro26Register_DEPTHWISE_CONV_2DEv>:
  return kTfLiteOk;
}

}  // namespace depthwise_conv

TfLiteRegistration Register_DEPTHWISE_CONV_2D() {
   19f3c:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/depthwise_conv::Prepare,
          /*invoke=*/depthwise_conv::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   19f3e:	4604      	mov	r4, r0
TfLiteRegistration Register_DEPTHWISE_CONV_2D() {
   19f40:	4606      	mov	r6, r0
          /*version=*/0};
   19f42:	4d04      	ldr	r5, [pc, #16]	; (19f54 <_ZN6tflite3ops5micro26Register_DEPTHWISE_CONV_2DEv+0x18>)
   19f44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   19f46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   19f48:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   19f4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   19f50:	4630      	mov	r0, r6
   19f52:	bd70      	pop	{r4, r5, r6, pc}
   19f54:	000318f8 	.word	0x000318f8

00019f58 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   19f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
   19f5c:	690a      	ldr	r2, [r1, #16]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   19f5e:	4680      	mov	r8, r0
   19f60:	b0b3      	sub	sp, #204	; 0xcc
  TFLITE_DCHECK(node->user_data != nullptr);
   19f62:	b90a      	cbnz	r2, 19f68 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x10>
   19f64:	f016 ff29 	bl	30dba <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
   19f68:	694b      	ldr	r3, [r1, #20]
   19f6a:	2b00      	cmp	r3, #0
   19f6c:	d0fa      	beq.n	19f64 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xc>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
   19f6e:	6887      	ldr	r7, [r0, #8]
  return &context->tensors[node->outputs->data[index]];
   19f70:	6848      	ldr	r0, [r1, #4]
   19f72:	6840      	ldr	r0, [r0, #4]
   19f74:	eb07 1b80 	add.w	fp, r7, r0, lsl #6
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   19f78:	6808      	ldr	r0, [r1, #0]
  return &context->tensors[node->inputs->data[index]];
   19f7a:	6846      	ldr	r6, [r0, #4]
      (NumInputs(node) == 3) ? GetInput(context, node, kBiasTensor) : nullptr;
   19f7c:	6801      	ldr	r1, [r0, #0]
   19f7e:	ea4f 1986 	mov.w	r9, r6, lsl #6
   19f82:	2903      	cmp	r1, #3
   19f84:	bf08      	it	eq
   19f86:	68c4      	ldreq	r4, [r0, #12]
   19f88:	6885      	ldr	r5, [r0, #8]
  switch (input->type) {  // Already know in/out types are same.
   19f8a:	f817 0009 	ldrb.w	r0, [r7, r9]
      (NumInputs(node) == 3) ? GetInput(context, node, kBiasTensor) : nullptr;
   19f8e:	bf14      	ite	ne
   19f90:	2400      	movne	r4, #0
   19f92:	eb07 1484 	addeq.w	r4, r7, r4, lsl #6
  switch (input->type) {  // Already know in/out types are same.
   19f96:	2803      	cmp	r0, #3
   19f98:	eb07 1686 	add.w	r6, r7, r6, lsl #6
   19f9c:	eb07 1585 	add.w	r5, r7, r5, lsl #6
   19fa0:	f000 80cc 	beq.w	1a13c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1e4>
   19fa4:	2809      	cmp	r0, #9
   19fa6:	d068      	beq.n	1a07a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x122>
   19fa8:	2801      	cmp	r0, #1
   19faa:	f040 811c 	bne.w	1a1e6 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x28e>
  CalculateActivationRange(params->activation, &output_activation_min,
   19fae:	7c19      	ldrb	r1, [r3, #16]
  if (activation == kTfLiteActRelu) {
   19fb0:	2901      	cmp	r1, #1
   19fb2:	d05a      	beq.n	1a06a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x112>
  } else if (activation == kTfLiteActRelu6) {
   19fb4:	2903      	cmp	r1, #3
   19fb6:	d05d      	beq.n	1a074 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x11c>
    *activation_max = std::numeric_limits<T>::max();
   19fb8:	ed9f 7a91 	vldr	s14, [pc, #580]	; 1a200 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2a8>
   19fbc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   19fc0:	2902      	cmp	r1, #2
   19fc2:	eddf 6a90 	vldr	s13, [pc, #576]	; 1a204 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2ac>
   19fc6:	fe47 7a87 	vseleq.f32	s15, s15, s14
   19fca:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   19fce:	fe07 7a26 	vseleq.f32	s14, s14, s13
  op_params.padding_type = PaddingType::kSame;
   19fd2:	2101      	movs	r1, #1
   19fd4:	f88d 1088 	strb.w	r1, [sp, #136]	; 0x88
  op_params.padding_values.width = data->padding.width;
   19fd8:	6811      	ldr	r1, [r2, #0]
  op_params.padding_values.height = data->padding.height;
   19fda:	6852      	ldr	r2, [r2, #4]
  op_params.padding_values.width = data->padding.width;
   19fdc:	f8ad 108a 	strh.w	r1, [sp, #138]	; 0x8a
  op_params.padding_values.height = data->padding.height;
   19fe0:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
  op_params.stride_width = params->stride_width;
   19fe4:	685a      	ldr	r2, [r3, #4]
      op_params, GetTensorShape(input), GetTensorData<float>(input),
   19fe6:	4631      	mov	r1, r6
  op_params.stride_width = params->stride_width;
   19fe8:	f8ad 2092 	strh.w	r2, [sp, #146]	; 0x92
  op_params.stride_height = params->stride_height;
   19fec:	689a      	ldr	r2, [r3, #8]
      op_params, GetTensorShape(input), GetTensorData<float>(input),
   19fee:	a80a      	add	r0, sp, #40	; 0x28
  op_params.stride_height = params->stride_height;
   19ff0:	f8ad 2094 	strh.w	r2, [sp, #148]	; 0x94
  op_params.dilation_width_factor = params->dilation_width_factor;
   19ff4:	695a      	ldr	r2, [r3, #20]
   19ff6:	f8ad 2096 	strh.w	r2, [sp, #150]	; 0x96
  op_params.dilation_height_factor = params->dilation_height_factor;
   19ffa:	699a      	ldr	r2, [r3, #24]
  op_params.depth_multiplier = params->depth_multiplier;
   19ffc:	68db      	ldr	r3, [r3, #12]
  op_params.dilation_height_factor = params->dilation_height_factor;
   19ffe:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
  op_params.float_activation_min = output_activation_min;
   1a002:	ed8d 7a2e 	vstr	s14, [sp, #184]	; 0xb8
  op_params.float_activation_max = output_activation_max;
   1a006:	edcd 7a2f 	vstr	s15, [sp, #188]	; 0xbc
  op_params.depth_multiplier = params->depth_multiplier;
   1a00a:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
      op_params, GetTensorShape(input), GetTensorData<float>(input),
   1a00e:	f00d fb15 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      GetTensorShape(filter), GetTensorData<float>(filter),
   1a012:	4629      	mov	r1, r5
   1a014:	a810      	add	r0, sp, #64	; 0x40
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1a016:	f8d6 8004 	ldr.w	r8, [r6, #4]
   1a01a:	f00d fb0f 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1a01e:	b105      	cbz	r5, 1a022 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xca>
   1a020:	686d      	ldr	r5, [r5, #4]
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
   1a022:	ae16      	add	r6, sp, #88	; 0x58
   1a024:	4621      	mov	r1, r4
   1a026:	4630      	mov	r0, r6
   1a028:	f00d fb08 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1a02c:	b104      	cbz	r4, 1a030 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xd8>
   1a02e:	6864      	ldr	r4, [r4, #4]
   1a030:	af1c      	add	r7, sp, #112	; 0x70
   1a032:	4659      	mov	r1, fp
   1a034:	4638      	mov	r0, r7
   1a036:	f00d fb01 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1a03a:	f1bb 0f00 	cmp.w	fp, #0
   1a03e:	d001      	beq.n	1a044 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xec>
   1a040:	f8db b004 	ldr.w	fp, [fp, #4]
  tflite::reference_ops::DepthwiseConv(
   1a044:	4642      	mov	r2, r8
   1a046:	ab10      	add	r3, sp, #64	; 0x40
   1a048:	a90a      	add	r1, sp, #40	; 0x28
   1a04a:	a822      	add	r0, sp, #136	; 0x88
   1a04c:	e9cd 7b03 	strd	r7, fp, [sp, #12]
   1a050:	e9cd 6401 	strd	r6, r4, [sp, #4]
   1a054:	9500      	str	r5, [sp, #0]
   1a056:	f7ff fd25 	bl	19aa4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
   1a05a:	4638      	mov	r0, r7
   1a05c:	f00d faa9 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   1a060:	4630      	mov	r0, r6
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
   1a062:	f00d faa6 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(filter), GetTensorData<uint8_t>(filter),
   1a066:	a810      	add	r0, sp, #64	; 0x40
   1a068:	e05f      	b.n	1a12a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1d2>
    *activation_max = std::numeric_limits<T>::max();
   1a06a:	eddf 7a65 	vldr	s15, [pc, #404]	; 1a200 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2a8>
    *activation_min = 0;
   1a06e:	ed9f 7a66 	vldr	s14, [pc, #408]	; 1a208 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2b0>
   1a072:	e7ae      	b.n	19fd2 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x7a>
    *activation_max = 6;
   1a074:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
   1a078:	e7f9      	b.n	1a06e <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x116>
  op_params.padding_type = PaddingType::kSame;
   1a07a:	2101      	movs	r1, #1
      data->per_channel_output_shift, GetTensorShape(input),
   1a07c:	e9d2 9a06 	ldrd	r9, sl, [r2, #24]
  op_params.padding_type = PaddingType::kSame;
   1a080:	f88d 1088 	strb.w	r1, [sp, #136]	; 0x88
  op_params.padding_values.width = data->padding.width;
   1a084:	6811      	ldr	r1, [r2, #0]
      data->per_channel_output_shift, GetTensorShape(input),
   1a086:	a80a      	add	r0, sp, #40	; 0x28
  op_params.padding_values.width = data->padding.width;
   1a088:	f8ad 108a 	strh.w	r1, [sp, #138]	; 0x8a
  op_params.padding_values.height = data->padding.height;
   1a08c:	6851      	ldr	r1, [r2, #4]
   1a08e:	f8ad 108c 	strh.w	r1, [sp, #140]	; 0x8c
  op_params.stride_width = params->stride_width;
   1a092:	6859      	ldr	r1, [r3, #4]
   1a094:	f8ad 1092 	strh.w	r1, [sp, #146]	; 0x92
  op_params.stride_height = params->stride_height;
   1a098:	6899      	ldr	r1, [r3, #8]
   1a09a:	f8ad 1094 	strh.w	r1, [sp, #148]	; 0x94
  op_params.dilation_width_factor = params->dilation_width_factor;
   1a09e:	6959      	ldr	r1, [r3, #20]
   1a0a0:	f8ad 1096 	strh.w	r1, [sp, #150]	; 0x96
  op_params.dilation_height_factor = params->dilation_height_factor;
   1a0a4:	6999      	ldr	r1, [r3, #24]
  op_params.depth_multiplier = params->depth_multiplier;
   1a0a6:	68db      	ldr	r3, [r3, #12]
  op_params.dilation_height_factor = params->dilation_height_factor;
   1a0a8:	f8ad 1098 	strh.w	r1, [sp, #152]	; 0x98
  op_params.depth_multiplier = params->depth_multiplier;
   1a0ac:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
  op_params.input_offset = -input->params.zero_point;
   1a0b0:	6933      	ldr	r3, [r6, #16]
  op_params.quantized_activation_max = std::numeric_limits<int8_t>::max();
   1a0b2:	f06f 017f 	mvn.w	r1, #127	; 0x7f
  op_params.input_offset = -input->params.zero_point;
   1a0b6:	425b      	negs	r3, r3
   1a0b8:	9327      	str	r3, [sp, #156]	; 0x9c
  op_params.weights_offset = 0;
   1a0ba:	2300      	movs	r3, #0
   1a0bc:	9328      	str	r3, [sp, #160]	; 0xa0
  op_params.output_offset = output->params.zero_point;
   1a0be:	f8db 3010 	ldr.w	r3, [fp, #16]
   1a0c2:	9329      	str	r3, [sp, #164]	; 0xa4
  op_params.quantized_activation_max = std::numeric_limits<int8_t>::max();
   1a0c4:	237f      	movs	r3, #127	; 0x7f
   1a0c6:	e9cd 132c 	strd	r1, r3, [sp, #176]	; 0xb0
      data->per_channel_output_shift, GetTensorShape(input),
   1a0ca:	4631      	mov	r1, r6
   1a0cc:	f00d fab6 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1a0d0:	6873      	ldr	r3, [r6, #4]
      GetTensorData<int8>(input), GetTensorShape(filter),
   1a0d2:	ae10      	add	r6, sp, #64	; 0x40
   1a0d4:	4629      	mov	r1, r5
   1a0d6:	4630      	mov	r0, r6
   1a0d8:	9309      	str	r3, [sp, #36]	; 0x24
   1a0da:	f00d faaf 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1a0de:	b105      	cbz	r5, 1a0e2 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x18a>
   1a0e0:	686d      	ldr	r5, [r5, #4]
      GetTensorData<int8>(filter), GetTensorShape(bias),
   1a0e2:	af16      	add	r7, sp, #88	; 0x58
   1a0e4:	4621      	mov	r1, r4
   1a0e6:	4638      	mov	r0, r7
   1a0e8:	f00d faa8 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1a0ec:	b104      	cbz	r4, 1a0f0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x198>
   1a0ee:	6864      	ldr	r4, [r4, #4]
      GetTensorData<int32>(bias), GetTensorShape(output),
   1a0f0:	f10d 0870 	add.w	r8, sp, #112	; 0x70
   1a0f4:	4659      	mov	r1, fp
   1a0f6:	4640      	mov	r0, r8
   1a0f8:	f00d faa0 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::DepthwiseConvPerChannel(
   1a0fc:	f8db 3004 	ldr.w	r3, [fp, #4]
   1a100:	4652      	mov	r2, sl
   1a102:	e9cd 8305 	strd	r8, r3, [sp, #20]
   1a106:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a108:	4649      	mov	r1, r9
   1a10a:	9300      	str	r3, [sp, #0]
   1a10c:	a822      	add	r0, sp, #136	; 0x88
   1a10e:	ab0a      	add	r3, sp, #40	; 0x28
   1a110:	e9cd 7403 	strd	r7, r4, [sp, #12]
   1a114:	e9cd 6501 	strd	r6, r5, [sp, #4]
   1a118:	f011 f95d 	bl	2b3d6 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
      GetTensorData<int32>(bias), GetTensorShape(output),
   1a11c:	4640      	mov	r0, r8
   1a11e:	f00d fa48 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(filter), GetTensorShape(bias),
   1a122:	4638      	mov	r0, r7
   1a124:	f00d fa45 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(input), GetTensorShape(filter),
   1a128:	4630      	mov	r0, r6
   1a12a:	f00d fa42 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
      data->per_channel_output_shift, GetTensorShape(input),
   1a12e:	a80a      	add	r0, sp, #40	; 0x28
   1a130:	f00d fa3f 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   1a134:	2000      	movs	r0, #0
}
   1a136:	b033      	add	sp, #204	; 0xcc
   1a138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  op_params.padding_type = PaddingType::kSame;
   1a13c:	2001      	movs	r0, #1
  const int32_t filter_offset = -filter->params.zero_point;
   1a13e:	6929      	ldr	r1, [r5, #16]
  const int32_t input_offset = -input->params.zero_point;
   1a140:	6937      	ldr	r7, [r6, #16]
  const int32_t output_offset = output->params.zero_point;
   1a142:	f8db c010 	ldr.w	ip, [fp, #16]
  op_params.padding_type = PaddingType::kSame;
   1a146:	f88d 0088 	strb.w	r0, [sp, #136]	; 0x88
  op_params.padding_values.width = data->padding.width;
   1a14a:	6810      	ldr	r0, [r2, #0]
  const int32_t input_offset = -input->params.zero_point;
   1a14c:	427f      	negs	r7, r7
  op_params.padding_values.width = data->padding.width;
   1a14e:	f8ad 008a 	strh.w	r0, [sp, #138]	; 0x8a
  op_params.padding_values.height = data->padding.height;
   1a152:	6850      	ldr	r0, [r2, #4]
  const int32_t filter_offset = -filter->params.zero_point;
   1a154:	4249      	negs	r1, r1
  op_params.padding_values.height = data->padding.height;
   1a156:	f8ad 008c 	strh.w	r0, [sp, #140]	; 0x8c
  op_params.stride_width = params->stride_width;
   1a15a:	6858      	ldr	r0, [r3, #4]
   1a15c:	f8ad 0092 	strh.w	r0, [sp, #146]	; 0x92
  op_params.stride_height = params->stride_height;
   1a160:	6898      	ldr	r0, [r3, #8]
   1a162:	f8ad 0094 	strh.w	r0, [sp, #148]	; 0x94
  op_params.dilation_width_factor = params->dilation_width_factor;
   1a166:	6958      	ldr	r0, [r3, #20]
   1a168:	f8ad 0096 	strh.w	r0, [sp, #150]	; 0x96
  op_params.dilation_height_factor = params->dilation_height_factor;
   1a16c:	6998      	ldr	r0, [r3, #24]
  op_params.depth_multiplier = params->depth_multiplier;
   1a16e:	68db      	ldr	r3, [r3, #12]
  op_params.dilation_height_factor = params->dilation_height_factor;
   1a170:	f8ad 0098 	strh.w	r0, [sp, #152]	; 0x98
  op_params.depth_multiplier = params->depth_multiplier;
   1a174:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
  op_params.quantized_activation_min = data->output_activation_min;
   1a178:	6a13      	ldr	r3, [r2, #32]
      op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1a17a:	a80a      	add	r0, sp, #40	; 0x28
  op_params.quantized_activation_min = data->output_activation_min;
   1a17c:	932c      	str	r3, [sp, #176]	; 0xb0
  op_params.quantized_activation_max = data->output_activation_max;
   1a17e:	6a53      	ldr	r3, [r2, #36]	; 0x24
  op_params.weights_offset = filter_offset;
   1a180:	e9cd 7127 	strd	r7, r1, [sp, #156]	; 0x9c
  op_params.quantized_activation_max = data->output_activation_max;
   1a184:	932d      	str	r3, [sp, #180]	; 0xb4
  op_params.output_multiplier = data->output_multiplier;
   1a186:	6913      	ldr	r3, [r2, #16]
      op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1a188:	4631      	mov	r1, r6
  op_params.output_multiplier = data->output_multiplier;
   1a18a:	932a      	str	r3, [sp, #168]	; 0xa8
  op_params.output_shift = -data->output_shift;
   1a18c:	6953      	ldr	r3, [r2, #20]
  op_params.output_offset = output_offset;
   1a18e:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
  op_params.output_shift = -data->output_shift;
   1a192:	425b      	negs	r3, r3
   1a194:	932b      	str	r3, [sp, #172]	; 0xac
      op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1a196:	f00d fa51 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      GetTensorShape(filter), GetTensorData<uint8_t>(filter),
   1a19a:	4629      	mov	r1, r5
   1a19c:	a810      	add	r0, sp, #64	; 0x40
   1a19e:	6877      	ldr	r7, [r6, #4]
   1a1a0:	f00d fa4c 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1a1a4:	f8d5 8004 	ldr.w	r8, [r5, #4]
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
   1a1a8:	ad16      	add	r5, sp, #88	; 0x58
   1a1aa:	4621      	mov	r1, r4
   1a1ac:	4628      	mov	r0, r5
   1a1ae:	f00d fa45 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1a1b2:	b104      	cbz	r4, 1a1b6 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x25e>
   1a1b4:	6864      	ldr	r4, [r4, #4]
      GetTensorShape(output), GetTensorData<uint8_t>(output));
   1a1b6:	ae1c      	add	r6, sp, #112	; 0x70
   1a1b8:	4659      	mov	r1, fp
   1a1ba:	4630      	mov	r0, r6
   1a1bc:	f00d fa3e 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    const uint8* input_data, const RuntimeShape& filter_shape,
    const uint8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    uint8* output_data) {
  return depthwise_conv::DepthwiseConvBasicKernel<
      DepthwiseConvOutputRounding::kAwayFromZero>::Run(params, input_shape,
   1a1c0:	f8db 3004 	ldr.w	r3, [fp, #4]
   1a1c4:	463a      	mov	r2, r7
   1a1c6:	e9cd 6303 	strd	r6, r3, [sp, #12]
   1a1ca:	a90a      	add	r1, sp, #40	; 0x28
   1a1cc:	ab10      	add	r3, sp, #64	; 0x40
   1a1ce:	a822      	add	r0, sp, #136	; 0x88
   1a1d0:	e9cd 5401 	strd	r5, r4, [sp, #4]
   1a1d4:	f8cd 8000 	str.w	r8, [sp]
   1a1d8:	f011 fa17 	bl	2b60a <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph>
   1a1dc:	4630      	mov	r0, r6
   1a1de:	f00d f9e8 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
   1a1e2:	4628      	mov	r0, r5
   1a1e4:	e73d      	b.n	1a062 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x10a>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   1a1e6:	f8d8 4014 	ldr.w	r4, [r8, #20]
   1a1ea:	f7f2 fd6b 	bl	ccc4 <TfLiteTypeGetName>
   1a1ee:	f817 3009 	ldrb.w	r3, [r7, r9]
   1a1f2:	4602      	mov	r2, r0
   1a1f4:	4905      	ldr	r1, [pc, #20]	; (1a20c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2b4>)
   1a1f6:	4640      	mov	r0, r8
   1a1f8:	47a0      	blx	r4
      return kTfLiteError;
   1a1fa:	2001      	movs	r0, #1
   1a1fc:	e79b      	b.n	1a136 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1de>
   1a1fe:	bf00      	nop
   1a200:	7f7fffff 	.word	0x7f7fffff
   1a204:	ff7fffff 	.word	0xff7fffff
   1a208:	00000000 	.word	0x00000000
   1a20c:	000349d0 	.word	0x000349d0

0001a210 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode>:
    return nullptr;
  }
  return data;
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1a210:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
   1a214:	690f      	ldr	r7, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1a216:	4605      	mov	r5, r0
  TFLITE_DCHECK(node->user_data != nullptr);
   1a218:	b90f      	cbnz	r7, 1a21e <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xe>
   1a21a:	f016 fdce 	bl	30dba <abort>
  OpData* data = static_cast<OpData*>(node->user_data);

  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   1a21e:	f8d1 c000 	ldr.w	ip, [r1]
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   1a222:	f8dc 6000 	ldr.w	r6, [ip]
   1a226:	2e01      	cmp	r6, #1
   1a228:	d00f      	beq.n	1a24a <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x3a>
   1a22a:	2401      	movs	r4, #1
   1a22c:	4b30      	ldr	r3, [pc, #192]	; (1a2f0 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
   1a22e:	e9cd 6402 	strd	r6, r4, [sp, #8]
   1a232:	9301      	str	r3, [sp, #4]
   1a234:	4b2f      	ldr	r3, [pc, #188]	; (1a2f4 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
   1a236:	4a30      	ldr	r2, [pc, #192]	; (1a2f8 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
   1a238:	9300      	str	r3, [sp, #0]
   1a23a:	6945      	ldr	r5, [r0, #20]
   1a23c:	2334      	movs	r3, #52	; 0x34
   1a23e:	492f      	ldr	r1, [pc, #188]	; (1a2fc <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
   1a240:	47a8      	blx	r5
  TfLiteTensor* output = GetOutput(context, node, 0);

  TF_LITE_ENSURE(context, input->type == kTfLiteUInt8 ||
                              input->type == kTfLiteInt8 ||
                              input->type == kTfLiteInt16);
  TF_LITE_ENSURE(
   1a242:	2001      	movs	r0, #1
        static_cast<double>(output->params.scale);
    QuantizeMultiplier(effective_output_scale, &data->output_multiplier,
                       &data->output_shift);
  }
  return kTfLiteOk;
}
   1a244:	b004      	add	sp, #16
   1a246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   1a24a:	684a      	ldr	r2, [r1, #4]
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   1a24c:	6814      	ldr	r4, [r2, #0]
   1a24e:	2c01      	cmp	r4, #1
   1a250:	d00b      	beq.n	1a26a <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x5a>
   1a252:	4b27      	ldr	r3, [pc, #156]	; (1a2f0 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
   1a254:	e9cd 4602 	strd	r4, r6, [sp, #8]
   1a258:	9301      	str	r3, [sp, #4]
   1a25a:	4b29      	ldr	r3, [pc, #164]	; (1a300 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xf0>)
   1a25c:	4a26      	ldr	r2, [pc, #152]	; (1a2f8 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
   1a25e:	9300      	str	r3, [sp, #0]
   1a260:	6944      	ldr	r4, [r0, #20]
   1a262:	2335      	movs	r3, #53	; 0x35
   1a264:	4925      	ldr	r1, [pc, #148]	; (1a2fc <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
   1a266:	47a0      	blx	r4
   1a268:	e7eb      	b.n	1a242 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x32>
  return &context->tensors[node->inputs->data[index]];
   1a26a:	f8dc 1004 	ldr.w	r1, [ip, #4]
  const TfLiteTensor* input = GetInput(context, node, 0);
   1a26e:	6883      	ldr	r3, [r0, #8]
   1a270:	ea4f 1e81 	mov.w	lr, r1, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1a274:	6856      	ldr	r6, [r2, #4]
  TF_LITE_ENSURE(context, input->type == kTfLiteUInt8 ||
   1a276:	f813 200e 	ldrb.w	r2, [r3, lr]
   1a27a:	ea4f 1c86 	mov.w	ip, r6, lsl #6
   1a27e:	f002 0efb 	and.w	lr, r2, #251	; 0xfb
   1a282:	f1be 0f03 	cmp.w	lr, #3
  return &context->tensors[node->inputs->data[index]];
   1a286:	eb03 1181 	add.w	r1, r3, r1, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1a28a:	eb03 1686 	add.w	r6, r3, r6, lsl #6
   1a28e:	d009      	beq.n	1a2a4 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x94>
   1a290:	2a09      	cmp	r2, #9
   1a292:	d007      	beq.n	1a2a4 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x94>
   1a294:	4b1b      	ldr	r3, [pc, #108]	; (1a304 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
   1a296:	4a18      	ldr	r2, [pc, #96]	; (1a2f8 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
   1a298:	9300      	str	r3, [sp, #0]
   1a29a:	6945      	ldr	r5, [r0, #20]
   1a29c:	233b      	movs	r3, #59	; 0x3b
   1a29e:	491a      	ldr	r1, [pc, #104]	; (1a308 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
   1a2a0:	47a8      	blx	r5
   1a2a2:	e7ce      	b.n	1a242 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x32>
  TF_LITE_ENSURE(
   1a2a4:	f813 300c 	ldrb.w	r3, [r3, ip]
   1a2a8:	1e5a      	subs	r2, r3, #1
   1a2aa:	2a01      	cmp	r2, #1
   1a2ac:	d908      	bls.n	1a2c0 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xb0>
   1a2ae:	4b17      	ldr	r3, [pc, #92]	; (1a30c <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xfc>)
   1a2b0:	4628      	mov	r0, r5
   1a2b2:	9300      	str	r3, [sp, #0]
   1a2b4:	696c      	ldr	r4, [r5, #20]
   1a2b6:	233e      	movs	r3, #62	; 0x3e
   1a2b8:	4a0f      	ldr	r2, [pc, #60]	; (1a2f8 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
   1a2ba:	4913      	ldr	r1, [pc, #76]	; (1a308 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
   1a2bc:	47a0      	blx	r4
   1a2be:	e7c0      	b.n	1a242 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x32>
  if (output->type == kTfLiteInt32) {
   1a2c0:	2b02      	cmp	r3, #2
   1a2c2:	d113      	bne.n	1a2ec <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xdc>
        static_cast<double>(input->params.scale) /
   1a2c4:	68c8      	ldr	r0, [r1, #12]
   1a2c6:	f7f2 f91f 	bl	c508 <__aeabi_f2d>
   1a2ca:	4604      	mov	r4, r0
        static_cast<double>(output->params.scale);
   1a2cc:	68f0      	ldr	r0, [r6, #12]
        static_cast<double>(input->params.scale) /
   1a2ce:	460d      	mov	r5, r1
        static_cast<double>(output->params.scale);
   1a2d0:	f7f2 f91a 	bl	c508 <__aeabi_f2d>
    QuantizeMultiplier(effective_output_scale, &data->output_multiplier,
   1a2d4:	f107 0804 	add.w	r8, r7, #4
        static_cast<double>(output->params.scale);
   1a2d8:	4602      	mov	r2, r0
   1a2da:	460b      	mov	r3, r1
    const double effective_output_scale =
   1a2dc:	4620      	mov	r0, r4
   1a2de:	4629      	mov	r1, r5
   1a2e0:	f7f6 fa0e 	bl	10700 <__aeabi_ddiv>
    QuantizeMultiplier(effective_output_scale, &data->output_multiplier,
   1a2e4:	4643      	mov	r3, r8
   1a2e6:	463a      	mov	r2, r7
   1a2e8:	f006 fe14 	bl	20f14 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
  return kTfLiteOk;
   1a2ec:	2000      	movs	r0, #0
   1a2ee:	e7a9      	b.n	1a244 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x34>
   1a2f0:	00035814 	.word	0x00035814
   1a2f4:	00034a96 	.word	0x00034a96
   1a2f8:	00034f5b 	.word	0x00034f5b
   1a2fc:	00034a7c 	.word	0x00034a7c
   1a300:	00034aa6 	.word	0x00034aa6
   1a304:	00034f87 	.word	0x00034f87
   1a308:	00034b9c 	.word	0x00034b9c
   1a30c:	00034fe0 	.word	0x00034fe0

0001a310 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1a310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
   1a314:	f8d1 8010 	ldr.w	r8, [r1, #16]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1a318:	4606      	mov	r6, r0
   1a31a:	b08f      	sub	sp, #60	; 0x3c
  TFLITE_DCHECK(node->user_data != nullptr);
   1a31c:	f1b8 0f00 	cmp.w	r8, #0
   1a320:	d101      	bne.n	1a326 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x16>
   1a322:	f016 fd4a 	bl	30dba <abort>
  return &context->tensors[node->inputs->data[index]];
   1a326:	680a      	ldr	r2, [r1, #0]
  return &context->tensors[node->outputs->data[index]];
   1a328:	6849      	ldr	r1, [r1, #4]
  OpData* data = static_cast<OpData*>(node->user_data);

  const TfLiteTensor* input = GetInput(context, node, 0);
   1a32a:	f8d0 b008 	ldr.w	fp, [r0, #8]
   1a32e:	684d      	ldr	r5, [r1, #4]
  return &context->tensors[node->inputs->data[index]];
   1a330:	6854      	ldr	r4, [r2, #4]
  return &context->tensors[node->outputs->data[index]];
   1a332:	ea4f 1a85 	mov.w	sl, r5, lsl #6
  TfLiteTensor* output = GetOutput(context, node, 0);

  if (output->type == kTfLiteFloat32) {
   1a336:	f81b 700a 	ldrb.w	r7, [fp, sl]
  return &context->tensors[node->inputs->data[index]];
   1a33a:	01a2      	lsls	r2, r4, #6
   1a33c:	2f01      	cmp	r7, #1
   1a33e:	eb0b 1484 	add.w	r4, fp, r4, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1a342:	eb0b 1585 	add.w	r5, fp, r5, lsl #6
   1a346:	f040 808e 	bne.w	1a466 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x156>
    tflite::DequantizationParams op_params;
    op_params.zero_point = input->params.zero_point;
   1a34a:	6923      	ldr	r3, [r4, #16]
    op_params.scale = static_cast<double>(input->params.scale);
   1a34c:	68e0      	ldr	r0, [r4, #12]
   1a34e:	9201      	str	r2, [sp, #4]
    op_params.zero_point = input->params.zero_point;
   1a350:	9300      	str	r3, [sp, #0]
    op_params.scale = static_cast<double>(input->params.scale);
   1a352:	f7f2 f8d9 	bl	c508 <__aeabi_f2d>
    switch (input->type) {
   1a356:	9a01      	ldr	r2, [sp, #4]
    op_params.scale = static_cast<double>(input->params.scale);
   1a358:	4680      	mov	r8, r0
    switch (input->type) {
   1a35a:	f81b 0002 	ldrb.w	r0, [fp, r2]
    op_params.scale = static_cast<double>(input->params.scale);
   1a35e:	4689      	mov	r9, r1
    switch (input->type) {
   1a360:	2807      	cmp	r0, #7
   1a362:	d045      	beq.n	1a3f0 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0xe0>
   1a364:	2809      	cmp	r0, #9
   1a366:	d022      	beq.n	1a3ae <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x9e>
   1a368:	2803      	cmp	r0, #3
   1a36a:	d16b      	bne.n	1a444 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x134>
      case kTfLiteUInt8:
        reference_ops::Dequantize(
            op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1a36c:	4621      	mov	r1, r4
   1a36e:	a802      	add	r0, sp, #8
   1a370:	f00d f964 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
            GetTensorShape(output), GetTensorData<float>(output));
   1a374:	4629      	mov	r1, r5
   1a376:	a808      	add	r0, sp, #32
   1a378:	6867      	ldr	r7, [r4, #4]
   1a37a:	f00d f95f 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                       const RuntimeShape& input_shape,
                       const InputT* input_data,
                       const RuntimeShape& output_shape, OutputT* output_data) {
  int32 zero_point = op_params.zero_point;
  const double scale = op_params.scale;
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   1a37e:	a908      	add	r1, sp, #32
   1a380:	a802      	add	r0, sp, #8
   1a382:	f00d f932 	bl	275ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>

  for (int i = 0; i < flat_size; i++) {
   1a386:	2400      	movs	r4, #0
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   1a388:	4606      	mov	r6, r0
   1a38a:	686d      	ldr	r5, [r5, #4]
  for (int i = 0; i < flat_size; i++) {
   1a38c:	42a6      	cmp	r6, r4
   1a38e:	dd51      	ble.n	1a434 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x124>
    const int32 val = input_data[i];
   1a390:	5d38      	ldrb	r0, [r7, r4]
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
   1a392:	9b00      	ldr	r3, [sp, #0]
  for (int i = 0; i < flat_size; i++) {
   1a394:	3401      	adds	r4, #1
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
   1a396:	1ac0      	subs	r0, r0, r3
   1a398:	f7f2 f8a4 	bl	c4e4 <__aeabi_i2d>
   1a39c:	4642      	mov	r2, r8
   1a39e:	464b      	mov	r3, r9
   1a3a0:	f7f6 f884 	bl	104ac <__aeabi_dmul>
   1a3a4:	f7f6 fb44 	bl	10a30 <__aeabi_d2f>
   1a3a8:	f845 0b04 	str.w	r0, [r5], #4
  for (int i = 0; i < flat_size; i++) {
   1a3ac:	e7ee      	b.n	1a38c <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x7c>
        break;
      case kTfLiteInt8:
        reference_ops::Dequantize(
            op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
   1a3ae:	4621      	mov	r1, r4
   1a3b0:	a802      	add	r0, sp, #8
   1a3b2:	f00d f943 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
            GetTensorShape(output), GetTensorData<float>(output));
   1a3b6:	4629      	mov	r1, r5
   1a3b8:	a808      	add	r0, sp, #32
   1a3ba:	6867      	ldr	r7, [r4, #4]
   1a3bc:	f00d f93e 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   1a3c0:	a908      	add	r1, sp, #32
   1a3c2:	a802      	add	r0, sp, #8
   1a3c4:	f00d f911 	bl	275ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
  for (int i = 0; i < flat_size; i++) {
   1a3c8:	2400      	movs	r4, #0
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   1a3ca:	4606      	mov	r6, r0
   1a3cc:	686d      	ldr	r5, [r5, #4]
  for (int i = 0; i < flat_size; i++) {
   1a3ce:	42a6      	cmp	r6, r4
   1a3d0:	dd30      	ble.n	1a434 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x124>
    const int32 val = input_data[i];
   1a3d2:	5738      	ldrsb	r0, [r7, r4]
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
   1a3d4:	9b00      	ldr	r3, [sp, #0]
  for (int i = 0; i < flat_size; i++) {
   1a3d6:	3401      	adds	r4, #1
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
   1a3d8:	1ac0      	subs	r0, r0, r3
   1a3da:	f7f2 f883 	bl	c4e4 <__aeabi_i2d>
   1a3de:	4642      	mov	r2, r8
   1a3e0:	464b      	mov	r3, r9
   1a3e2:	f7f6 f863 	bl	104ac <__aeabi_dmul>
   1a3e6:	f7f6 fb23 	bl	10a30 <__aeabi_d2f>
   1a3ea:	f845 0b04 	str.w	r0, [r5], #4
  for (int i = 0; i < flat_size; i++) {
   1a3ee:	e7ee      	b.n	1a3ce <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0xbe>
        break;
      case kTfLiteInt16:
        reference_ops::Dequantize(
            op_params, GetTensorShape(input), GetTensorData<int16_t>(input),
   1a3f0:	4621      	mov	r1, r4
   1a3f2:	a802      	add	r0, sp, #8
   1a3f4:	f00d f922 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
            GetTensorShape(output), GetTensorData<float>(output));
   1a3f8:	4629      	mov	r1, r5
   1a3fa:	a808      	add	r0, sp, #32
   1a3fc:	6867      	ldr	r7, [r4, #4]
   1a3fe:	f00d f91d 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   1a402:	a908      	add	r1, sp, #32
   1a404:	a802      	add	r0, sp, #8
   1a406:	f00d f8f0 	bl	275ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
  for (int i = 0; i < flat_size; i++) {
   1a40a:	2400      	movs	r4, #0
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   1a40c:	4606      	mov	r6, r0
   1a40e:	686d      	ldr	r5, [r5, #4]
  for (int i = 0; i < flat_size; i++) {
   1a410:	42a6      	cmp	r6, r4
   1a412:	dd0f      	ble.n	1a434 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x124>
    const int32 val = input_data[i];
   1a414:	f937 0014 	ldrsh.w	r0, [r7, r4, lsl #1]
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
   1a418:	9b00      	ldr	r3, [sp, #0]
  for (int i = 0; i < flat_size; i++) {
   1a41a:	3401      	adds	r4, #1
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
   1a41c:	1ac0      	subs	r0, r0, r3
   1a41e:	f7f2 f861 	bl	c4e4 <__aeabi_i2d>
   1a422:	4642      	mov	r2, r8
   1a424:	464b      	mov	r3, r9
   1a426:	f7f6 f841 	bl	104ac <__aeabi_dmul>
   1a42a:	f7f6 fb01 	bl	10a30 <__aeabi_d2f>
   1a42e:	f845 0b04 	str.w	r0, [r5], #4
  for (int i = 0; i < flat_size; i++) {
   1a432:	e7ed      	b.n	1a410 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x100>
   1a434:	a808      	add	r0, sp, #32
   1a436:	f00d f8bc 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
            op_params, GetTensorShape(input), GetTensorData<int16_t>(input),
   1a43a:	a802      	add	r0, sp, #8
   1a43c:	f00d f8b9 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
                       TfLiteTypeGetName(input->type),
                       TfLiteTypeGetName(output->type));
    return kTfLiteError;
  }

  return kTfLiteOk;
   1a440:	2700      	movs	r7, #0
   1a442:	e00c      	b.n	1a45e <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x14e>
        TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
   1a444:	6974      	ldr	r4, [r6, #20]
   1a446:	f7f2 fc3d 	bl	ccc4 <TfLiteTypeGetName>
   1a44a:	9000      	str	r0, [sp, #0]
   1a44c:	f81b 000a 	ldrb.w	r0, [fp, sl]
   1a450:	f7f2 fc38 	bl	ccc4 <TfLiteTypeGetName>
   1a454:	9a00      	ldr	r2, [sp, #0]
   1a456:	4603      	mov	r3, r0
   1a458:	4933      	ldr	r1, [pc, #204]	; (1a528 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x218>)
   1a45a:	4630      	mov	r0, r6
   1a45c:	47a0      	blx	r4
}
   1a45e:	4638      	mov	r0, r7
   1a460:	b00f      	add	sp, #60	; 0x3c
   1a462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (output->type == kTfLiteInt32) {
   1a466:	2f02      	cmp	r7, #2
   1a468:	d159      	bne.n	1a51e <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x20e>
        MatchingFlatSize(GetTensorShape(input), GetTensorShape(output));
   1a46a:	4621      	mov	r1, r4
   1a46c:	a802      	add	r0, sp, #8
   1a46e:	9200      	str	r2, [sp, #0]
   1a470:	f00d f8e4 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1a474:	4629      	mov	r1, r5
   1a476:	a808      	add	r0, sp, #32
   1a478:	f00d f8e0 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1a47c:	a908      	add	r1, sp, #32
   1a47e:	a802      	add	r0, sp, #8
   1a480:	f00d f8b3 	bl	275ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
   1a484:	4607      	mov	r7, r0
   1a486:	a808      	add	r0, sp, #32
   1a488:	f00d f893 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   1a48c:	a802      	add	r0, sp, #8
   1a48e:	f00d f890 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
    switch (input->type) {
   1a492:	9a00      	ldr	r2, [sp, #0]
   1a494:	f81b 0002 	ldrb.w	r0, [fp, r2]
   1a498:	2807      	cmp	r0, #7
   1a49a:	d010      	beq.n	1a4be <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x1ae>
   1a49c:	2809      	cmp	r0, #9
   1a49e:	d026      	beq.n	1a4ee <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x1de>
        TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
   1a4a0:	6974      	ldr	r4, [r6, #20]
    TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
   1a4a2:	f7f2 fc0f 	bl	ccc4 <TfLiteTypeGetName>
   1a4a6:	9000      	str	r0, [sp, #0]
   1a4a8:	f81b 000a 	ldrb.w	r0, [fp, sl]
   1a4ac:	f7f2 fc0a 	bl	ccc4 <TfLiteTypeGetName>
   1a4b0:	9a00      	ldr	r2, [sp, #0]
   1a4b2:	4603      	mov	r3, r0
   1a4b4:	491c      	ldr	r1, [pc, #112]	; (1a528 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x218>)
   1a4b6:	4630      	mov	r0, r6
   1a4b8:	47a0      	blx	r4
    return kTfLiteError;
   1a4ba:	2701      	movs	r7, #1
   1a4bc:	e7cf      	b.n	1a45e <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x14e>
   1a4be:	f8d4 9004 	ldr.w	r9, [r4, #4]
        reference_ops::Requantize(
   1a4c2:	e9d8 ab00 	ldrd	sl, fp, [r8]
            data->output_shift, input->params.zero_point,
   1a4c6:	f8d4 8010 	ldr.w	r8, [r4, #16]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1a4ca:	2400      	movs	r4, #0
        reference_ops::Requantize(
   1a4cc:	692e      	ldr	r6, [r5, #16]
   1a4ce:	686d      	ldr	r5, [r5, #4]
      }
    }
  }
  static constexpr int32_t kMinOutput = std::numeric_limits<output_type>::min();
  static constexpr int32_t kMaxOutput = std::numeric_limits<output_type>::max();
  for (int i = 0; i < size; ++i) {
   1a4d0:	42a7      	cmp	r7, r4
   1a4d2:	ddb5      	ble.n	1a440 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x130>
    const int32_t input = input_data[i] - input_zeropoint;
   1a4d4:	f939 0014 	ldrsh.w	r0, [r9, r4, lsl #1]
    const int32_t output =
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
   1a4d8:	465a      	mov	r2, fp
   1a4da:	4651      	mov	r1, sl
   1a4dc:	eba0 0008 	sub.w	r0, r0, r8
   1a4e0:	f7fe ff16 	bl	19310 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
                                      effective_scale_shift) +
   1a4e4:	4430      	add	r0, r6
        output_zeropoint;
    const int32_t clamped_output =
        std::max(std::min(output, kMaxOutput), kMinOutput);
    output_data[i] = static_cast<output_type>(clamped_output);
   1a4e6:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
  for (int i = 0; i < size; ++i) {
   1a4ea:	3401      	adds	r4, #1
   1a4ec:	e7f0      	b.n	1a4d0 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x1c0>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1a4ee:	f8d4 9004 	ldr.w	r9, [r4, #4]
        reference_ops::Requantize(
   1a4f2:	e9d8 ab00 	ldrd	sl, fp, [r8]
            data->output_shift, input->params.zero_point,
   1a4f6:	f8d4 8010 	ldr.w	r8, [r4, #16]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1a4fa:	2400      	movs	r4, #0
        reference_ops::Requantize(
   1a4fc:	692e      	ldr	r6, [r5, #16]
   1a4fe:	686d      	ldr	r5, [r5, #4]
   1a500:	42a7      	cmp	r7, r4
   1a502:	dd9d      	ble.n	1a440 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x130>
    const int32_t input = input_data[i] - input_zeropoint;
   1a504:	f919 0004 	ldrsb.w	r0, [r9, r4]
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
   1a508:	465a      	mov	r2, fp
   1a50a:	4651      	mov	r1, sl
   1a50c:	eba0 0008 	sub.w	r0, r0, r8
   1a510:	f7fe fefe 	bl	19310 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
                                      effective_scale_shift) +
   1a514:	4430      	add	r0, r6
    output_data[i] = static_cast<output_type>(clamped_output);
   1a516:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
  for (int i = 0; i < size; ++i) {
   1a51a:	3401      	adds	r4, #1
   1a51c:	e7f0      	b.n	1a500 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x1f0>
    TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
   1a51e:	6944      	ldr	r4, [r0, #20]
   1a520:	f81b 0002 	ldrb.w	r0, [fp, r2]
   1a524:	e7bd      	b.n	1a4a2 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x192>
   1a526:	bf00      	nop
   1a528:	0003501f 	.word	0x0003501f

0001a52c <_ZN6tflite3ops5micro19Register_DEQUANTIZEEv>:

}  // namespace dequantize

TfLiteRegistration Register_DEQUANTIZE() {
   1a52c:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/dequantize::Prepare,
          /*invoke=*/dequantize::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1a52e:	4604      	mov	r4, r0
TfLiteRegistration Register_DEQUANTIZE() {
   1a530:	4606      	mov	r6, r0
          /*version=*/0};
   1a532:	4d04      	ldr	r5, [pc, #16]	; (1a544 <_ZN6tflite3ops5micro19Register_DEQUANTIZEEv+0x18>)
   1a534:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1a536:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1a538:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1a53c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1a540:	4630      	mov	r0, r6
   1a542:	bd70      	pop	{r4, r5, r6, pc}
   1a544:	00031918 	.word	0x00031918

0001a548 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode>:
  return type == kTfLiteBool;
}

typedef bool (*IsSupportedType)(TfLiteType);
template <IsSupportedType>
TfLiteStatus GenericPrepare(TfLiteContext* context, TfLiteNode* node) {
   1a548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   1a54c:	680a      	ldr	r2, [r1, #0]
TfLiteStatus GenericPrepare(TfLiteContext* context, TfLiteNode* node) {
   1a54e:	4605      	mov	r5, r0
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   1a550:	6816      	ldr	r6, [r2, #0]
   1a552:	b085      	sub	sp, #20
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   1a554:	2e01      	cmp	r6, #1
   1a556:	d00f      	beq.n	1a578 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x30>
   1a558:	2401      	movs	r4, #1
   1a55a:	4b27      	ldr	r3, [pc, #156]	; (1a5f8 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xb0>)
   1a55c:	e9cd 6402 	strd	r6, r4, [sp, #8]
   1a560:	9301      	str	r3, [sp, #4]
   1a562:	4b26      	ldr	r3, [pc, #152]	; (1a5fc <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xb4>)
   1a564:	4a26      	ldr	r2, [pc, #152]	; (1a600 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xb8>)
   1a566:	9300      	str	r3, [sp, #0]
   1a568:	6945      	ldr	r5, [r0, #20]
   1a56a:	2327      	movs	r3, #39	; 0x27
   1a56c:	4925      	ldr	r1, [pc, #148]	; (1a604 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xbc>)
   1a56e:	47a8      	blx	r5
    TF_LITE_KERNEL_LOG(context, "Input data type %s (%d) is not supported.",
                       TfLiteTypeGetName(input->type), input->type);
    return kTfLiteError;
  }
  return kTfLiteOk;
}
   1a570:	4620      	mov	r0, r4
   1a572:	b005      	add	sp, #20
   1a574:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   1a578:	684b      	ldr	r3, [r1, #4]
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   1a57a:	681c      	ldr	r4, [r3, #0]
   1a57c:	2c01      	cmp	r4, #1
   1a57e:	d00c      	beq.n	1a59a <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x52>
   1a580:	4b1d      	ldr	r3, [pc, #116]	; (1a5f8 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xb0>)
   1a582:	e9cd 4602 	strd	r4, r6, [sp, #8]
   1a586:	9301      	str	r3, [sp, #4]
   1a588:	4b1f      	ldr	r3, [pc, #124]	; (1a608 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xc0>)
   1a58a:	4a1d      	ldr	r2, [pc, #116]	; (1a600 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xb8>)
   1a58c:	9300      	str	r3, [sp, #0]
   1a58e:	6944      	ldr	r4, [r0, #20]
   1a590:	2328      	movs	r3, #40	; 0x28
   1a592:	491c      	ldr	r1, [pc, #112]	; (1a604 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xbc>)
   1a594:	47a0      	blx	r4
   1a596:	4634      	mov	r4, r6
   1a598:	e7ea      	b.n	1a570 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x28>
  return &context->tensors[node->outputs->data[index]];
   1a59a:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->inputs->data[index]];
   1a59c:	6856      	ldr	r6, [r2, #4]
  const TfLiteTensor* input = GetInput(context, node, 0);
   1a59e:	6887      	ldr	r7, [r0, #8]
   1a5a0:	01b6      	lsls	r6, r6, #6
  return &context->tensors[node->outputs->data[index]];
   1a5a2:	ea4f 1883 	mov.w	r8, r3, lsl #6
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
   1a5a6:	5db8      	ldrb	r0, [r7, r6]
   1a5a8:	f817 3008 	ldrb.w	r3, [r7, r8]
   1a5ac:	4283      	cmp	r3, r0
   1a5ae:	d014      	beq.n	1a5da <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x92>
   1a5b0:	f8d5 9014 	ldr.w	r9, [r5, #20]
   1a5b4:	f7f2 fb86 	bl	ccc4 <TfLiteTypeGetName>
   1a5b8:	4606      	mov	r6, r0
   1a5ba:	f817 0008 	ldrb.w	r0, [r7, r8]
   1a5be:	f7f2 fb81 	bl	ccc4 <TfLiteTypeGetName>
   1a5c2:	4b12      	ldr	r3, [pc, #72]	; (1a60c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xc4>)
   1a5c4:	e9cd 6002 	strd	r6, r0, [sp, #8]
   1a5c8:	9301      	str	r3, [sp, #4]
   1a5ca:	4b11      	ldr	r3, [pc, #68]	; (1a610 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xc8>)
   1a5cc:	4628      	mov	r0, r5
   1a5ce:	9300      	str	r3, [sp, #0]
   1a5d0:	4a0b      	ldr	r2, [pc, #44]	; (1a600 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xb8>)
   1a5d2:	232b      	movs	r3, #43	; 0x2b
   1a5d4:	490f      	ldr	r1, [pc, #60]	; (1a614 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xcc>)
   1a5d6:	47c8      	blx	r9
   1a5d8:	e7ca      	b.n	1a570 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x28>
  if (!IsSupportedType(input->type)) {
   1a5da:	b953      	cbnz	r3, 1a5f2 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xaa>
    TF_LITE_KERNEL_LOG(context, "Input data type %s (%d) is not supported.",
   1a5dc:	4618      	mov	r0, r3
   1a5de:	f8d5 8014 	ldr.w	r8, [r5, #20]
   1a5e2:	f7f2 fb6f 	bl	ccc4 <TfLiteTypeGetName>
   1a5e6:	5dbb      	ldrb	r3, [r7, r6]
   1a5e8:	4602      	mov	r2, r0
   1a5ea:	490b      	ldr	r1, [pc, #44]	; (1a618 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xd0>)
   1a5ec:	4628      	mov	r0, r5
   1a5ee:	47c0      	blx	r8
    return kTfLiteError;
   1a5f0:	e7be      	b.n	1a570 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x28>
  return kTfLiteOk;
   1a5f2:	2400      	movs	r4, #0
   1a5f4:	e7bc      	b.n	1a570 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x28>
   1a5f6:	bf00      	nop
   1a5f8:	00035814 	.word	0x00035814
   1a5fc:	00034a96 	.word	0x00034a96
   1a600:	00035042 	.word	0x00035042
   1a604:	00034a7c 	.word	0x00034a7c
   1a608:	00034aa6 	.word	0x00034aa6
   1a60c:	00035387 	.word	0x00035387
   1a610:	0003539f 	.word	0x0003539f
   1a614:	00034ab7 	.word	0x00034ab7
   1a618:	0003506f 	.word	0x0003506f

0001a61c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0>:

template <typename T>
inline TfLiteStatus EvalImpl(TfLiteContext* context, TfLiteNode* node,
   1a61c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1a620:	4692      	mov	sl, r2
  return &context->tensors[node->inputs->data[index]];
   1a622:	680a      	ldr	r2, [r1, #0]
                             T func(T), TfLiteType expected_type) {
  const TfLiteTensor* input = GetInput(context, node, 0);
   1a624:	6883      	ldr	r3, [r0, #8]
   1a626:	6854      	ldr	r4, [r2, #4]
inline TfLiteStatus EvalImpl(TfLiteContext* context, TfLiteNode* node,
   1a628:	4605      	mov	r5, r0
   1a62a:	01a2      	lsls	r2, r4, #6
  TfLiteTensor* output = GetOutput(context, node, 0);
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, expected_type);
   1a62c:	5c98      	ldrb	r0, [r3, r2]
   1a62e:	eb03 1484 	add.w	r4, r3, r4, lsl #6
   1a632:	2801      	cmp	r0, #1
   1a634:	d015      	beq.n	1a662 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0+0x46>
   1a636:	696e      	ldr	r6, [r5, #20]
   1a638:	f7f2 fb44 	bl	ccc4 <TfLiteTypeGetName>
   1a63c:	4604      	mov	r4, r0
   1a63e:	2001      	movs	r0, #1
   1a640:	f7f2 fb40 	bl	ccc4 <TfLiteTypeGetName>
   1a644:	4b1e      	ldr	r3, [pc, #120]	; (1a6c0 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0+0xa4>)
   1a646:	e9cd 4002 	strd	r4, r0, [sp, #8]
   1a64a:	9301      	str	r3, [sp, #4]
   1a64c:	4b1d      	ldr	r3, [pc, #116]	; (1a6c4 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0+0xa8>)
   1a64e:	4628      	mov	r0, r5
   1a650:	9300      	str	r3, [sp, #0]
   1a652:	4a1d      	ldr	r2, [pc, #116]	; (1a6c8 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0+0xac>)
   1a654:	2339      	movs	r3, #57	; 0x39
   1a656:	491d      	ldr	r1, [pc, #116]	; (1a6cc <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0+0xb0>)
   1a658:	47b0      	blx	r6
   1a65a:	2001      	movs	r0, #1
  T* out_data = GetTensorData<T>(output);
  for (int64_t i = 0; i < num_elements; ++i) {
    out_data[i] = func(in_data[i]);
  }
  return kTfLiteOk;
}
   1a65c:	b004      	add	sp, #16
   1a65e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  for (int i = 0; i < dims->size; ++i) {
   1a662:	2000      	movs	r0, #0
  int64_t count = 1;
   1a664:	f04f 0801 	mov.w	r8, #1
   1a668:	f04f 0900 	mov.w	r9, #0
  for (int i = 0; i < dims->size; ++i) {
   1a66c:	68a2      	ldr	r2, [r4, #8]
   1a66e:	f852 eb04 	ldr.w	lr, [r2], #4
   1a672:	4586      	cmp	lr, r0
   1a674:	dd0c      	ble.n	1a690 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0+0x74>
    count *= dims->data[i];
   1a676:	f852 cb04 	ldr.w	ip, [r2], #4
  for (int i = 0; i < dims->size; ++i) {
   1a67a:	3001      	adds	r0, #1
    count *= dims->data[i];
   1a67c:	4666      	mov	r6, ip
   1a67e:	17f7      	asrs	r7, r6, #31
   1a680:	fb08 f507 	mul.w	r5, r8, r7
   1a684:	fb0c 5509 	mla	r5, ip, r9, r5
   1a688:	fba8 890c 	umull	r8, r9, r8, ip
   1a68c:	44a9      	add	r9, r5
  for (int i = 0; i < dims->size; ++i) {
   1a68e:	e7f0      	b.n	1a672 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0+0x56>
  for (int64_t i = 0; i < num_elements; ++i) {
   1a690:	2600      	movs	r6, #0
   1a692:	2700      	movs	r7, #0
  return &context->tensors[node->outputs->data[index]];
   1a694:	684a      	ldr	r2, [r1, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1a696:	6865      	ldr	r5, [r4, #4]
   1a698:	6852      	ldr	r2, [r2, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1a69a:	eb13 1482 	adds.w	r4, r3, r2, lsl #6
   1a69e:	bf18      	it	ne
   1a6a0:	6864      	ldrne	r4, [r4, #4]
   1a6a2:	4546      	cmp	r6, r8
   1a6a4:	eb77 0309 	sbcs.w	r3, r7, r9
   1a6a8:	da08      	bge.n	1a6bc <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0+0xa0>
    out_data[i] = func(in_data[i]);
   1a6aa:	f855 0b04 	ldr.w	r0, [r5], #4
   1a6ae:	47d0      	blx	sl
  for (int64_t i = 0; i < num_elements; ++i) {
   1a6b0:	3601      	adds	r6, #1
    out_data[i] = func(in_data[i]);
   1a6b2:	f844 0b04 	str.w	r0, [r4], #4
  for (int64_t i = 0; i < num_elements; ++i) {
   1a6b6:	f147 0700 	adc.w	r7, r7, #0
   1a6ba:	e7f2      	b.n	1a6a2 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0+0x86>
  return kTfLiteOk;
   1a6bc:	2000      	movs	r0, #0
   1a6be:	e7cd      	b.n	1a65c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0+0x40>
   1a6c0:	00035099 	.word	0x00035099
   1a6c4:	0003539f 	.word	0x0003539f
   1a6c8:	00035042 	.word	0x00035042
   1a6cc:	00034ab7 	.word	0x00034ab7

0001a6d0 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_110SquareEvalEP13TfLiteContextP10TfLiteNode>:

inline TfLiteStatus EvalNumeric(TfLiteContext* context, TfLiteNode* node,
                                float float_func(float)) {
  return EvalImpl<float>(context, node, float_func, kTfLiteFloat32);
   1a6d0:	4a01      	ldr	r2, [pc, #4]	; (1a6d8 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_110SquareEvalEP13TfLiteContextP10TfLiteNode+0x8>)
   1a6d2:	f7ff bfa3 	b.w	1a61c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0>
   1a6d6:	bf00      	nop
   1a6d8:	0002b87d 	.word	0x0002b87d

0001a6dc <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17AbsEvalEP13TfLiteContextP10TfLiteNode>:
   1a6dc:	4a01      	ldr	r2, [pc, #4]	; (1a6e4 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17AbsEvalEP13TfLiteContextP10TfLiteNode+0x8>)
   1a6de:	f7ff bf9d 	b.w	1a61c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0>
   1a6e2:	bf00      	nop
   1a6e4:	0002b86f 	.word	0x0002b86f

0001a6e8 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17SinEvalEP13TfLiteContextP10TfLiteNode>:
   1a6e8:	4a01      	ldr	r2, [pc, #4]	; (1a6f0 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17SinEvalEP13TfLiteContextP10TfLiteNode+0x8>)
   1a6ea:	f7ff bf97 	b.w	1a61c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0>
   1a6ee:	bf00      	nop
   1a6f0:	0002b88f 	.word	0x0002b88f

0001a6f4 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17CosEvalEP13TfLiteContextP10TfLiteNode>:
   1a6f4:	4a01      	ldr	r2, [pc, #4]	; (1a6fc <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17CosEvalEP13TfLiteContextP10TfLiteNode+0x8>)
   1a6f6:	f7ff bf91 	b.w	1a61c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0>
   1a6fa:	bf00      	nop
   1a6fc:	0002b893 	.word	0x0002b893

0001a700 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_19RsqrtEvalEP13TfLiteContextP10TfLiteNode>:
   1a700:	4a01      	ldr	r2, [pc, #4]	; (1a708 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_19RsqrtEvalEP13TfLiteContextP10TfLiteNode+0x8>)
   1a702:	f7ff bf8b 	b.w	1a61c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0>
   1a706:	bf00      	nop
   1a708:	0002b89f 	.word	0x0002b89f

0001a70c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17LogEvalEP13TfLiteContextP10TfLiteNode>:
   1a70c:	4a01      	ldr	r2, [pc, #4]	; (1a714 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17LogEvalEP13TfLiteContextP10TfLiteNode+0x8>)
   1a70e:	f7ff bf85 	b.w	1a61c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0>
   1a712:	bf00      	nop
   1a714:	0002b897 	.word	0x0002b897

0001a718 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18SqrtEvalEP13TfLiteContextP10TfLiteNode>:
   1a718:	4a01      	ldr	r2, [pc, #4]	; (1a720 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18SqrtEvalEP13TfLiteContextP10TfLiteNode+0x8>)
   1a71a:	f7ff bf7f 	b.w	1a61c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0>
   1a71e:	bf00      	nop
   1a720:	0002b89b 	.word	0x0002b89b

0001a724 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SquareEval(TfLiteContext* context, TfLiteNode* node) {
  return EvalNumeric(context, node, [](float f) { return f * f; });
}

TfLiteStatus LogicalNotEval(TfLiteContext* context, TfLiteNode* node) {
   1a724:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  return &context->tensors[node->inputs->data[index]];
   1a728:	680a      	ldr	r2, [r1, #0]
  const TfLiteTensor* input = GetInput(context, node, 0);
   1a72a:	6883      	ldr	r3, [r0, #8]
   1a72c:	6852      	ldr	r2, [r2, #4]
TfLiteStatus LogicalNotEval(TfLiteContext* context, TfLiteNode* node) {
   1a72e:	4604      	mov	r4, r0
   1a730:	0190      	lsls	r0, r2, #6
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, expected_type);
   1a732:	5c18      	ldrb	r0, [r3, r0]
   1a734:	eb03 1282 	add.w	r2, r3, r2, lsl #6
   1a738:	2806      	cmp	r0, #6
   1a73a:	d015      	beq.n	1a768 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x44>
   1a73c:	6966      	ldr	r6, [r4, #20]
   1a73e:	f7f2 fac1 	bl	ccc4 <TfLiteTypeGetName>
   1a742:	4605      	mov	r5, r0
   1a744:	2006      	movs	r0, #6
   1a746:	f7f2 fabd 	bl	ccc4 <TfLiteTypeGetName>
   1a74a:	4b1f      	ldr	r3, [pc, #124]	; (1a7c8 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0xa4>)
   1a74c:	e9cd 5002 	strd	r5, r0, [sp, #8]
   1a750:	9301      	str	r3, [sp, #4]
   1a752:	4b1e      	ldr	r3, [pc, #120]	; (1a7cc <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0xa8>)
   1a754:	4620      	mov	r0, r4
   1a756:	9300      	str	r3, [sp, #0]
   1a758:	4a1d      	ldr	r2, [pc, #116]	; (1a7d0 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0xac>)
   1a75a:	2339      	movs	r3, #57	; 0x39
   1a75c:	491d      	ldr	r1, [pc, #116]	; (1a7d4 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0xb0>)
   1a75e:	47b0      	blx	r6
   1a760:	2001      	movs	r0, #1
  return EvalLogical(context, node, [](bool v) { return !v; });
}
   1a762:	b004      	add	sp, #16
   1a764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (int i = 0; i < dims->size; ++i) {
   1a768:	f04f 0c00 	mov.w	ip, #0
  int64_t count = 1;
   1a76c:	2401      	movs	r4, #1
   1a76e:	2500      	movs	r5, #0
  for (int i = 0; i < dims->size; ++i) {
   1a770:	6890      	ldr	r0, [r2, #8]
   1a772:	f850 8b04 	ldr.w	r8, [r0], #4
   1a776:	45e0      	cmp	r8, ip
   1a778:	dd0d      	ble.n	1a796 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x72>
    count *= dims->data[i];
   1a77a:	f850 eb04 	ldr.w	lr, [r0], #4
  for (int i = 0; i < dims->size; ++i) {
   1a77e:	f10c 0c01 	add.w	ip, ip, #1
    count *= dims->data[i];
   1a782:	4676      	mov	r6, lr
   1a784:	17f7      	asrs	r7, r6, #31
   1a786:	fb04 f607 	mul.w	r6, r4, r7
   1a78a:	fb0e 6605 	mla	r6, lr, r5, r6
   1a78e:	fba4 450e 	umull	r4, r5, r4, lr
   1a792:	4435      	add	r5, r6
  for (int i = 0; i < dims->size; ++i) {
   1a794:	e7ef      	b.n	1a776 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x52>
  return &context->tensors[node->outputs->data[index]];
   1a796:	6849      	ldr	r1, [r1, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1a798:	6857      	ldr	r7, [r2, #4]
   1a79a:	6849      	ldr	r1, [r1, #4]
  for (int64_t i = 0; i < num_elements; ++i) {
   1a79c:	2200      	movs	r2, #0
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1a79e:	eb13 1181 	adds.w	r1, r3, r1, lsl #6
   1a7a2:	f04f 0300 	mov.w	r3, #0
   1a7a6:	bf18      	it	ne
   1a7a8:	6849      	ldrne	r1, [r1, #4]
   1a7aa:	42a2      	cmp	r2, r4
   1a7ac:	eb73 0005 	sbcs.w	r0, r3, r5
   1a7b0:	da07      	bge.n	1a7c2 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x9e>
  return EvalLogical(context, node, [](bool v) { return !v; });
   1a7b2:	5cb8      	ldrb	r0, [r7, r2]
   1a7b4:	f080 0001 	eor.w	r0, r0, #1
    out_data[i] = func(in_data[i]);
   1a7b8:	5488      	strb	r0, [r1, r2]
  for (int64_t i = 0; i < num_elements; ++i) {
   1a7ba:	3201      	adds	r2, #1
   1a7bc:	f143 0300 	adc.w	r3, r3, #0
   1a7c0:	e7f3      	b.n	1a7aa <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x86>
  return kTfLiteOk;
   1a7c2:	2000      	movs	r0, #0
   1a7c4:	e7cd      	b.n	1a762 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x3e>
   1a7c6:	bf00      	nop
   1a7c8:	00035099 	.word	0x00035099
   1a7cc:	0003539f 	.word	0x0003539f
   1a7d0:	00035042 	.word	0x00035042
   1a7d4:	00034ab7 	.word	0x00034ab7

0001a7d8 <_ZN6tflite3ops5micro12Register_ABSEv>:


}  // namespace
}  // namespace elementwise

TfLiteRegistration Register_ABS() {
   1a7d8:	b570      	push	{r4, r5, r6, lr}
          elementwise::GenericPrepare<elementwise::IsNumericSupportedType>,
          /*invoke=*/elementwise::AbsEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1a7da:	4604      	mov	r4, r0
TfLiteRegistration Register_ABS() {
   1a7dc:	4606      	mov	r6, r0
          /*version=*/0};
   1a7de:	4d04      	ldr	r5, [pc, #16]	; (1a7f0 <_ZN6tflite3ops5micro12Register_ABSEv+0x18>)
   1a7e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1a7e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1a7e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1a7e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1a7ec:	4630      	mov	r0, r6
   1a7ee:	bd70      	pop	{r4, r5, r6, pc}
   1a7f0:	00031938 	.word	0x00031938

0001a7f4 <_ZN6tflite3ops5micro12Register_SINEv>:

TfLiteRegistration Register_SIN() {
   1a7f4:	b570      	push	{r4, r5, r6, lr}
          elementwise::GenericPrepare<elementwise::IsNumericSupportedType>,
          /*invoke=*/elementwise::SinEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1a7f6:	4604      	mov	r4, r0
TfLiteRegistration Register_SIN() {
   1a7f8:	4606      	mov	r6, r0
          /*version=*/0};
   1a7fa:	4d04      	ldr	r5, [pc, #16]	; (1a80c <_ZN6tflite3ops5micro12Register_SINEv+0x18>)
   1a7fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1a7fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1a800:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1a804:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1a808:	4630      	mov	r0, r6
   1a80a:	bd70      	pop	{r4, r5, r6, pc}
   1a80c:	00031958 	.word	0x00031958

0001a810 <_ZN6tflite3ops5micro12Register_COSEv>:

TfLiteRegistration Register_COS() {
   1a810:	b570      	push	{r4, r5, r6, lr}
          elementwise::GenericPrepare<elementwise::IsNumericSupportedType>,
          /*invoke=*/elementwise::CosEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1a812:	4604      	mov	r4, r0
TfLiteRegistration Register_COS() {
   1a814:	4606      	mov	r6, r0
          /*version=*/0};
   1a816:	4d04      	ldr	r5, [pc, #16]	; (1a828 <_ZN6tflite3ops5micro12Register_COSEv+0x18>)
   1a818:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1a81a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1a81c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1a820:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1a824:	4630      	mov	r0, r6
   1a826:	bd70      	pop	{r4, r5, r6, pc}
   1a828:	00031978 	.word	0x00031978

0001a82c <_ZN6tflite3ops5micro12Register_LOGEv>:

TfLiteRegistration Register_LOG() {
   1a82c:	b570      	push	{r4, r5, r6, lr}
          elementwise::GenericPrepare<elementwise::IsNumericSupportedType>,
          /*invoke=*/elementwise::LogEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1a82e:	4604      	mov	r4, r0
TfLiteRegistration Register_LOG() {
   1a830:	4606      	mov	r6, r0
          /*version=*/0};
   1a832:	4d04      	ldr	r5, [pc, #16]	; (1a844 <_ZN6tflite3ops5micro12Register_LOGEv+0x18>)
   1a834:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1a836:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1a838:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1a83c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1a840:	4630      	mov	r0, r6
   1a842:	bd70      	pop	{r4, r5, r6, pc}
   1a844:	00031998 	.word	0x00031998

0001a848 <_ZN6tflite3ops5micro13Register_SQRTEv>:

TfLiteRegistration Register_SQRT() {
   1a848:	b570      	push	{r4, r5, r6, lr}
          elementwise::GenericPrepare<elementwise::IsNumericSupportedType>,
          /*invoke=*/elementwise::SqrtEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1a84a:	4604      	mov	r4, r0
TfLiteRegistration Register_SQRT() {
   1a84c:	4606      	mov	r6, r0
          /*version=*/0};
   1a84e:	4d04      	ldr	r5, [pc, #16]	; (1a860 <_ZN6tflite3ops5micro13Register_SQRTEv+0x18>)
   1a850:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1a852:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1a854:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1a858:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1a85c:	4630      	mov	r0, r6
   1a85e:	bd70      	pop	{r4, r5, r6, pc}
   1a860:	000319b8 	.word	0x000319b8

0001a864 <_ZN6tflite3ops5micro14Register_RSQRTEv>:

TfLiteRegistration Register_RSQRT() {
   1a864:	b570      	push	{r4, r5, r6, lr}
          elementwise::GenericPrepare<elementwise::IsNumericSupportedType>,
          /*invoke=*/elementwise::RsqrtEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1a866:	4604      	mov	r4, r0
TfLiteRegistration Register_RSQRT() {
   1a868:	4606      	mov	r6, r0
          /*version=*/0};
   1a86a:	4d04      	ldr	r5, [pc, #16]	; (1a87c <_ZN6tflite3ops5micro14Register_RSQRTEv+0x18>)
   1a86c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1a86e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1a870:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1a874:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1a878:	4630      	mov	r0, r6
   1a87a:	bd70      	pop	{r4, r5, r6, pc}
   1a87c:	000319d8 	.word	0x000319d8

0001a880 <_ZN6tflite3ops5micro15Register_SQUAREEv>:

TfLiteRegistration Register_SQUARE() {
   1a880:	b570      	push	{r4, r5, r6, lr}
          elementwise::GenericPrepare<elementwise::IsNumericSupportedType>,
          /*invoke=*/elementwise::SquareEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1a882:	4604      	mov	r4, r0
TfLiteRegistration Register_SQUARE() {
   1a884:	4606      	mov	r6, r0
          /*version=*/0};
   1a886:	4d04      	ldr	r5, [pc, #16]	; (1a898 <_ZN6tflite3ops5micro15Register_SQUAREEv+0x18>)
   1a888:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1a88a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1a88c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1a890:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1a894:	4630      	mov	r0, r6
   1a896:	bd70      	pop	{r4, r5, r6, pc}
   1a898:	000319f8 	.word	0x000319f8

0001a89c <_ZN6tflite3ops5micro20Register_LOGICAL_NOTEv>:

TfLiteRegistration Register_LOGICAL_NOT() {
   1a89c:	b570      	push	{r4, r5, r6, lr}
          elementwise::GenericPrepare<elementwise::IsLogicalSupportedType>,
          /*invoke=*/elementwise::LogicalNotEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1a89e:	4604      	mov	r4, r0
TfLiteRegistration Register_LOGICAL_NOT() {
   1a8a0:	4606      	mov	r6, r0
          /*version=*/0};
   1a8a2:	4d04      	ldr	r5, [pc, #16]	; (1a8b4 <_ZN6tflite3ops5micro20Register_LOGICAL_NOTEv+0x18>)
   1a8a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1a8a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1a8a8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1a8ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1a8b0:	4630      	mov	r0, r6
   1a8b2:	bd70      	pop	{r4, r5, r6, pc}
   1a8b4:	00031a18 	.word	0x00031a18

0001a8b8 <_ZN6tflite3ops5micro6custom16GetString_ETHOSUEv>:
namespace ops {
namespace micro {
namespace custom {
TfLiteRegistration* Register_ETHOSU() { return nullptr; }

const char* GetString_ETHOSU() { return ""; }
   1a8b8:	4800      	ldr	r0, [pc, #0]	; (1a8bc <_ZN6tflite3ops5micro6custom16GetString_ETHOSUEv+0x4>)
   1a8ba:	4770      	bx	lr
   1a8bc:	00033f2d 	.word	0x00033f2d

0001a8c0 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->inputs->data[index]];
   1a8c0:	680b      	ldr	r3, [r1, #0]
namespace floor {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1a8c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a8c6:	685d      	ldr	r5, [r3, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1a8c8:	6884      	ldr	r4, [r0, #8]
   1a8ca:	01ab      	lsls	r3, r5, #6
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1a8cc:	4606      	mov	r6, r0
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
   1a8ce:	5ce0      	ldrb	r0, [r4, r3]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1a8d0:	b090      	sub	sp, #64	; 0x40
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
   1a8d2:	2801      	cmp	r0, #1
   1a8d4:	eb04 1585 	add.w	r5, r4, r5, lsl #6
   1a8d8:	d015      	beq.n	1a906 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x46>
   1a8da:	6975      	ldr	r5, [r6, #20]
   1a8dc:	f7f2 f9f2 	bl	ccc4 <TfLiteTypeGetName>
   1a8e0:	4604      	mov	r4, r0
   1a8e2:	2001      	movs	r0, #1
   1a8e4:	f7f2 f9ee 	bl	ccc4 <TfLiteTypeGetName>
   1a8e8:	4b2a      	ldr	r3, [pc, #168]	; (1a994 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0xd4>)
   1a8ea:	e9cd 4002 	strd	r4, r0, [sp, #8]
   1a8ee:	9301      	str	r3, [sp, #4]
   1a8f0:	4b29      	ldr	r3, [pc, #164]	; (1a998 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0xd8>)
   1a8f2:	4630      	mov	r0, r6
   1a8f4:	9300      	str	r3, [sp, #0]
   1a8f6:	4a29      	ldr	r2, [pc, #164]	; (1a99c <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0xdc>)
   1a8f8:	2320      	movs	r3, #32
   1a8fa:	4929      	ldr	r1, [pc, #164]	; (1a9a0 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0xe0>)
   1a8fc:	47a8      	blx	r5
   1a8fe:	2001      	movs	r0, #1
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  reference_ops::Floor(GetTensorShape(input), GetTensorData<float>(input),
                       GetTensorShape(output), GetTensorData<float>(output));
  return kTfLiteOk;
}
   1a900:	b010      	add	sp, #64	; 0x40
   1a902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return &context->tensors[node->outputs->data[index]];
   1a906:	684b      	ldr	r3, [r1, #4]
  reference_ops::Floor(GetTensorShape(input), GetTensorData<float>(input),
   1a908:	a804      	add	r0, sp, #16
   1a90a:	685b      	ldr	r3, [r3, #4]
   1a90c:	4629      	mov	r1, r5
   1a90e:	eb04 1483 	add.w	r4, r4, r3, lsl #6
   1a912:	f00c fe93 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                       GetTensorShape(output), GetTensorData<float>(output));
   1a916:	4621      	mov	r1, r4
   1a918:	a80a      	add	r0, sp, #40	; 0x28
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1a91a:	f8d5 8004 	ldr.w	r8, [r5, #4]
   1a91e:	f00c fe8d 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1a922:	b104      	cbz	r4, 1a926 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x66>
   1a924:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   1a926:	9e04      	ldr	r6, [sp, #16]
   1a928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a92a:	429e      	cmp	r6, r3
   1a92c:	d001      	beq.n	1a932 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x72>
   1a92e:	f016 fa44 	bl	30dba <abort>
  for (int i = 0; i < dims_count; ++i) {
   1a932:	2500      	movs	r5, #0
   1a934:	42ae      	cmp	r6, r5
   1a936:	dd0c      	ble.n	1a952 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x92>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   1a938:	4629      	mov	r1, r5
   1a93a:	a804      	add	r0, sp, #16
   1a93c:	f00c fe44 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   1a940:	4629      	mov	r1, r5
   1a942:	4607      	mov	r7, r0
   1a944:	a80a      	add	r0, sp, #40	; 0x28
   1a946:	f00c fe3f 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   1a94a:	4287      	cmp	r7, r0
   1a94c:	d1ef      	bne.n	1a92e <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x6e>
  for (int i = 0; i < dims_count; ++i) {
   1a94e:	3501      	adds	r5, #1
   1a950:	e7f0      	b.n	1a934 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x74>
    for (int i = 0; i < size_; i++) {
   1a952:	2300      	movs	r3, #0
    int buffer_size = 1;
   1a954:	2101      	movs	r1, #1
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   1a956:	2e05      	cmp	r6, #5
   1a958:	bfcc      	ite	gt
   1a95a:	9a05      	ldrgt	r2, [sp, #20]
   1a95c:	aa05      	addle	r2, sp, #20
    for (int i = 0; i < size_; i++) {
   1a95e:	429e      	cmp	r6, r3
   1a960:	dc0b      	bgt.n	1a97a <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0xba>
   1a962:	4643      	mov	r3, r8

inline void Floor(const RuntimeShape& input_shape, const float* input_data,
                  const RuntimeShape& output_shape, float* output_data) {
  const int flat_size = MatchingFlatSize(input_shape, output_shape);

  for (int i = 0; i < flat_size; i++) {
   1a964:	2200      	movs	r2, #0
   1a966:	428a      	cmp	r2, r1
   1a968:	da0c      	bge.n	1a984 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0xc4>
    int offset = i;
    output_data[offset] = std::floor(input_data[offset]);
   1a96a:	ecf3 7a01 	vldmia	r3!, {s15}
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
   1a96e:	fefb 7a67 	vrintm.f32	s15, s15
  for (int i = 0; i < flat_size; i++) {
   1a972:	3201      	adds	r2, #1
    output_data[offset] = std::floor(input_data[offset]);
   1a974:	ece4 7a01 	vstmia	r4!, {s15}
  for (int i = 0; i < flat_size; i++) {
   1a978:	e7f5      	b.n	1a966 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0xa6>
      buffer_size *= dims_data[i];
   1a97a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   1a97e:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   1a980:	4341      	muls	r1, r0
    for (int i = 0; i < size_; i++) {
   1a982:	e7ec      	b.n	1a95e <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x9e>
   1a984:	a80a      	add	r0, sp, #40	; 0x28
   1a986:	f00c fe14 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Floor(GetTensorShape(input), GetTensorData<float>(input),
   1a98a:	a804      	add	r0, sp, #16
   1a98c:	f00c fe11 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   1a990:	2000      	movs	r0, #0
   1a992:	e7b5      	b.n	1a900 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x40>
   1a994:	00034ad1 	.word	0x00034ad1
   1a998:	0003539f 	.word	0x0003539f
   1a99c:	000350a7 	.word	0x000350a7
   1a9a0:	00034ab7 	.word	0x00034ab7

0001a9a4 <_ZN6tflite3ops5micro14Register_FLOOREv>:
}  // namespace floor

TfLiteRegistration Register_FLOOR() {
   1a9a4:	b510      	push	{r4, lr}
   1a9a6:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/floor::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1a9a8:	2220      	movs	r2, #32
   1a9aa:	2100      	movs	r1, #0
   1a9ac:	f016 fa4f 	bl	30e4e <memset>
   1a9b0:	4b01      	ldr	r3, [pc, #4]	; (1a9b8 <_ZN6tflite3ops5micro14Register_FLOOREv+0x14>)
}
   1a9b2:	4620      	mov	r0, r4
          /*version=*/0};
   1a9b4:	60e3      	str	r3, [r4, #12]
}
   1a9b6:	bd10      	pop	{r4, pc}
   1a9b8:	0001a8c1 	.word	0x0001a8c1

0001a9bc <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode>:
    return nullptr;
  }
  return data;
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1a9bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
   1a9c0:	690f      	ldr	r7, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1a9c2:	4604      	mov	r4, r0
   1a9c4:	460a      	mov	r2, r1
   1a9c6:	b089      	sub	sp, #36	; 0x24
  TFLITE_DCHECK(node->user_data != nullptr);
   1a9c8:	b90f      	cbnz	r7, 1a9ce <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x12>
   1a9ca:	f016 f9f6 	bl	30dba <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
   1a9ce:	f8d1 9014 	ldr.w	r9, [r1, #20]
   1a9d2:	f1b9 0f00 	cmp.w	r9, #0
   1a9d6:	d0f8      	beq.n	1a9ca <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xe>

  OpData* data = static_cast<OpData*>(node->user_data);
  const auto params =
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1a9d8:	f8d1 e000 	ldr.w	lr, [r1]
   1a9dc:	6885      	ldr	r5, [r0, #8]
  const bool use_tensor = index < node->inputs->size &&
   1a9de:	f8de 3000 	ldr.w	r3, [lr]
  return &context->tensors[node->inputs->data[index]];
   1a9e2:	f8de 1004 	ldr.w	r1, [lr, #4]
  const bool use_tensor = index < node->inputs->size &&
   1a9e6:	2b02      	cmp	r3, #2
  return &context->tensors[node->inputs->data[index]];
   1a9e8:	ea4f 1081 	mov.w	r0, r1, lsl #6
   1a9ec:	eb05 1181 	add.w	r1, r5, r1, lsl #6
  const bool use_tensor = index < node->inputs->size &&
   1a9f0:	dd27      	ble.n	1aa42 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x86>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
   1a9f2:	f8de 300c 	ldr.w	r3, [lr, #12]
  const bool use_tensor = index < node->inputs->size &&
   1a9f6:	1c5e      	adds	r6, r3, #1
   1a9f8:	d023      	beq.n	1aa42 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x86>
    return &context->tensors[node->inputs->data[index]];
   1a9fa:	eb05 1383 	add.w	r3, r5, r3, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1a9fe:	6852      	ldr	r2, [r2, #4]
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
   1aa00:	5c28      	ldrb	r0, [r5, r0]
   1aa02:	6856      	ldr	r6, [r2, #4]
   1aa04:	ea4f 1886 	mov.w	r8, r6, lsl #6
   1aa08:	f815 c008 	ldrb.w	ip, [r5, r8]
   1aa0c:	eb05 1686 	add.w	r6, r5, r6, lsl #6
   1aa10:	4584      	cmp	ip, r0
   1aa12:	d018      	beq.n	1aa46 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x8a>
   1aa14:	6967      	ldr	r7, [r4, #20]
   1aa16:	f7f2 f955 	bl	ccc4 <TfLiteTypeGetName>
   1aa1a:	4606      	mov	r6, r0
   1aa1c:	f815 0008 	ldrb.w	r0, [r5, r8]
   1aa20:	f7f2 f950 	bl	ccc4 <TfLiteTypeGetName>
   1aa24:	4b22      	ldr	r3, [pc, #136]	; (1aab0 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
   1aa26:	e9cd 6002 	strd	r6, r0, [sp, #8]
   1aa2a:	9301      	str	r3, [sp, #4]
   1aa2c:	4b21      	ldr	r3, [pc, #132]	; (1aab4 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
   1aa2e:	4620      	mov	r0, r4
   1aa30:	9300      	str	r3, [sp, #0]
   1aa32:	4a21      	ldr	r2, [pc, #132]	; (1aab8 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xfc>)
   1aa34:	2360      	movs	r3, #96	; 0x60
   1aa36:	4921      	ldr	r1, [pc, #132]	; (1aabc <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x100>)
   1aa38:	47b8      	blx	r7
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
   1aa3a:	2001      	movs	r0, #1
                     "Hybrid models are not supported on TFLite Micro.");

  return CalculateOpData(context, params->activation, input->type, input,
                         filter, bias, output, data);
}
   1aa3c:	b009      	add	sp, #36	; 0x24
   1aa3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return nullptr;
   1aa42:	2300      	movs	r3, #0
   1aa44:	e7db      	b.n	1a9fe <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x42>
  return &context->tensors[node->inputs->data[index]];
   1aa46:	f8de 2008 	ldr.w	r2, [lr, #8]
   1aa4a:	0190      	lsls	r0, r2, #6
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
   1aa4c:	5c28      	ldrb	r0, [r5, r0]
   1aa4e:	eb05 1282 	add.w	r2, r5, r2, lsl #6
   1aa52:	4560      	cmp	r0, ip
   1aa54:	d004      	beq.n	1aa60 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xa4>
   1aa56:	4620      	mov	r0, r4
   1aa58:	6963      	ldr	r3, [r4, #20]
   1aa5a:	4919      	ldr	r1, [pc, #100]	; (1aac0 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x104>)
   1aa5c:	4798      	blx	r3
   1aa5e:	e7ec      	b.n	1aa3a <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x7e>
  if (data_type != kTfLiteFloat32) {
   1aa60:	2801      	cmp	r0, #1
   1aa62:	d023      	beq.n	1aaac <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf0>
  return CalculateOpData(context, params->activation, input->type, input,
   1aa64:	f899 5000 	ldrb.w	r5, [r9]
    double real_multiplier = 0.0;
   1aa68:	f04f 0800 	mov.w	r8, #0
   1aa6c:	f04f 0900 	mov.w	r9, #0
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
   1aa70:	a806      	add	r0, sp, #24
   1aa72:	e9cd 6000 	strd	r6, r0, [sp]
   1aa76:	4620      	mov	r0, r4
    double real_multiplier = 0.0;
   1aa78:	e9cd 8906 	strd	r8, r9, [sp, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
   1aa7c:	f7f7 f888 	bl	11b90 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
   1aa80:	2800      	cmp	r0, #0
   1aa82:	d1db      	bne.n	1aa3c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
    QuantizeMultiplier(real_multiplier, &data->output_multiplier, &exponent);
   1aa84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1aa88:	463a      	mov	r2, r7
   1aa8a:	ab05      	add	r3, sp, #20
   1aa8c:	f006 fa42 	bl	20f14 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    data->output_shift = -exponent;
   1aa90:	9b05      	ldr	r3, [sp, #20]
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   1aa92:	4632      	mov	r2, r6
    data->output_shift = -exponent;
   1aa94:	425b      	negs	r3, r3
   1aa96:	607b      	str	r3, [r7, #4]
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   1aa98:	f107 030c 	add.w	r3, r7, #12
   1aa9c:	9300      	str	r3, [sp, #0]
   1aa9e:	4629      	mov	r1, r5
   1aaa0:	4620      	mov	r0, r4
   1aaa2:	f107 0308 	add.w	r3, r7, #8
   1aaa6:	f006 fadb 	bl	21060 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
   1aaaa:	e7c7      	b.n	1aa3c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
  return status;
   1aaac:	2000      	movs	r0, #0
   1aaae:	e7c5      	b.n	1aa3c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
   1aab0:	00035387 	.word	0x00035387
   1aab4:	0003539f 	.word	0x0003539f
   1aab8:	000350ce 	.word	0x000350ce
   1aabc:	00034ab7 	.word	0x00034ab7
   1aac0:	000350ff 	.word	0x000350ff

0001aac4 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_>:
}

TfLiteStatus EvalFloat(TfLiteContext* context, TfLiteNode* node,
                       TfLiteFusedActivation activation,
                       const TfLiteTensor* input, const TfLiteTensor* filter,
                       const TfLiteTensor* bias, TfLiteTensor* output) {
   1aac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aac8:	ed2d 8b02 	vpush	{d8}
  if (activation == kTfLiteActRelu) {
   1aacc:	2a01      	cmp	r2, #1
   1aace:	b09d      	sub	sp, #116	; 0x74
   1aad0:	461c      	mov	r4, r3
   1aad2:	e9dd 8528 	ldrd	r8, r5, [sp, #160]	; 0xa0
   1aad6:	f8dd 90a8 	ldr.w	r9, [sp, #168]	; 0xa8
   1aada:	d067      	beq.n	1abac <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xe8>
  } else if (activation == kTfLiteActRelu6) {
   1aadc:	2a03      	cmp	r2, #3
   1aade:	d06a      	beq.n	1abb6 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xf2>
    *activation_max = std::numeric_limits<T>::max();
   1aae0:	eddf 7a51 	vldr	s15, [pc, #324]	; 1ac28 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x164>
   1aae4:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
   1aae8:	2a02      	cmp	r2, #2
   1aaea:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
   1aaee:	fe48 8aa7 	vseleq.f32	s17, s17, s15
   1aaf2:	eddf 7a4e 	vldr	s15, [pc, #312]	; 1ac2c <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x168>
   1aaf6:	fe08 8a27 	vseleq.f32	s16, s16, s15
                           &output_activation_max);
  tflite::FullyConnectedParams op_params;
  op_params.float_activation_min = output_activation_min;
  op_params.float_activation_max = output_activation_max;
  tflite::reference_ops::FullyConnected(
      op_params, GetTensorShape(input), GetTensorData<float>(input),
   1aafa:	4621      	mov	r1, r4
   1aafc:	a804      	add	r0, sp, #16
   1aafe:	f00c fd9d 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1ab02:	b104      	cbz	r4, 1ab06 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x42>
   1ab04:	6864      	ldr	r4, [r4, #4]
      GetTensorShape(filter), GetTensorData<float>(filter),
   1ab06:	4641      	mov	r1, r8
   1ab08:	a80a      	add	r0, sp, #40	; 0x28
   1ab0a:	f00c fd97 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1ab0e:	f1b8 0f00 	cmp.w	r8, #0
   1ab12:	d001      	beq.n	1ab18 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x54>
   1ab14:	f8d8 8004 	ldr.w	r8, [r8, #4]
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
   1ab18:	4629      	mov	r1, r5
   1ab1a:	a810      	add	r0, sp, #64	; 0x40
   1ab1c:	f00c fd8e 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1ab20:	b105      	cbz	r5, 1ab24 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x60>
   1ab22:	686d      	ldr	r5, [r5, #4]
   1ab24:	4649      	mov	r1, r9
   1ab26:	a816      	add	r0, sp, #88	; 0x58
   1ab28:	f00c fd88 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1ab2c:	f1b9 0f00 	cmp.w	r9, #0
   1ab30:	d001      	beq.n	1ab36 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x72>
   1ab32:	f8d9 9004 	ldr.w	r9, [r9, #4]
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
  const int weights_dims_count = weights_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
   1ab36:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1ab38:	a816      	add	r0, sp, #88	; 0x58
   1ab3a:	3b01      	subs	r3, #1
   1ab3c:	4619      	mov	r1, r3
   1ab3e:	9300      	str	r3, [sp, #0]
   1ab40:	f010 fecb 	bl	2b8da <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
  const int weights_dims_count = weights_shape.DimensionsCount();
   1ab44:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
   1ab46:	9b00      	ldr	r3, [sp, #0]
   1ab48:	1eb1      	subs	r1, r6, #2
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
   1ab4a:	9002      	str	r0, [sp, #8]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
   1ab4c:	aa16      	add	r2, sp, #88	; 0x58
   1ab4e:	a80a      	add	r0, sp, #40	; 0x28
   1ab50:	f00f fbe4 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
   1ab54:	1e71      	subs	r1, r6, #1
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
   1ab56:	4683      	mov	fp, r0
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
   1ab58:	a80a      	add	r0, sp, #40	; 0x28
   1ab5a:	f00c fd35 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   1ab5e:	2300      	movs	r3, #0
      float total = 0.f;
      for (int d = 0; d < accum_depth; ++d) {
        total += input_data[b * accum_depth + d] *
                 weights_data[out_c * accum_depth + d];
      }
      float bias_value = 0.0f;
   1ab60:	eddf 6a33 	vldr	s13, [pc, #204]	; 1ac30 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x16c>
  for (int b = 0; b < batches; ++b) {
   1ab64:	461e      	mov	r6, r3
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
   1ab66:	9300      	str	r3, [sp, #0]
  for (int b = 0; b < batches; ++b) {
   1ab68:	9a02      	ldr	r2, [sp, #8]
   1ab6a:	42b2      	cmp	r2, r6
   1ab6c:	dd4a      	ble.n	1ac04 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x140>
   1ab6e:	9a00      	ldr	r2, [sp, #0]
   1ab70:	462f      	mov	r7, r5
   1ab72:	eb09 0282 	add.w	r2, r9, r2, lsl #2
   1ab76:	9201      	str	r2, [sp, #4]
   1ab78:	eb04 0283 	add.w	r2, r4, r3, lsl #2
   1ab7c:	9203      	str	r2, [sp, #12]
   1ab7e:	2200      	movs	r2, #0
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   1ab80:	4694      	mov	ip, r2
   1ab82:	45e3      	cmp	fp, ip
   1ab84:	dd38      	ble.n	1abf8 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x134>
      for (int d = 0; d < accum_depth; ++d) {
   1ab86:	f04f 0e00 	mov.w	lr, #0
      float total = 0.f;
   1ab8a:	eddf 7a29 	vldr	s15, [pc, #164]	; 1ac30 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x16c>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   1ab8e:	f8dd a00c 	ldr.w	sl, [sp, #12]
   1ab92:	eb08 0182 	add.w	r1, r8, r2, lsl #2
      for (int d = 0; d < accum_depth; ++d) {
   1ab96:	4570      	cmp	r0, lr
   1ab98:	dd10      	ble.n	1abbc <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xf8>
        total += input_data[b * accum_depth + d] *
   1ab9a:	ecba 6a01 	vldmia	sl!, {s12}
                 weights_data[out_c * accum_depth + d];
   1ab9e:	ecb1 7a01 	vldmia	r1!, {s14}
      for (int d = 0; d < accum_depth; ++d) {
   1aba2:	f10e 0e01 	add.w	lr, lr, #1
        total += input_data[b * accum_depth + d] *
   1aba6:	eee6 7a07 	vfma.f32	s15, s12, s14
      for (int d = 0; d < accum_depth; ++d) {
   1abaa:	e7f4      	b.n	1ab96 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xd2>
    *activation_max = std::numeric_limits<T>::max();
   1abac:	eddf 8a1e 	vldr	s17, [pc, #120]	; 1ac28 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x164>
    *activation_min = 0;
   1abb0:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 1ac30 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x16c>
   1abb4:	e7a1      	b.n	1aafa <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x36>
    *activation_max = 6;
   1abb6:	eef1 8a08 	vmov.f32	s17, #24	; 0x40c00000  6.0
   1abba:	e7f9      	b.n	1abb0 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xec>
      if (bias_data) {
   1abbc:	b1cd      	cbz	r5, 1abf2 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x12e>
        bias_value = bias_data[out_c];
   1abbe:	ed97 7a00 	vldr	s14, [r7]
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
   1abc2:	ee77 7a87 	vadd.f32	s15, s15, s14
	return __b;
   1abc6:	eef4 7a48 	vcmp.f32	s15, s16
   1abca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1abce:	bf48      	it	mi
   1abd0:	eef0 7a48 	vmovmi.f32	s15, s16
	return __b;
   1abd4:	eef4 7a68 	vcmp.f32	s15, s17
   1abd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1abdc:	9901      	ldr	r1, [sp, #4]
   1abde:	fe78 7aa7 	vselgt.f32	s15, s17, s15
   1abe2:	ece1 7a01 	vstmia	r1!, {s15}
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   1abe6:	f10c 0c01 	add.w	ip, ip, #1
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
   1abea:	9101      	str	r1, [sp, #4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   1abec:	3704      	adds	r7, #4
   1abee:	4402      	add	r2, r0
   1abf0:	e7c7      	b.n	1ab82 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xbe>
      float bias_value = 0.0f;
   1abf2:	eeb0 7a66 	vmov.f32	s14, s13
   1abf6:	e7e4      	b.n	1abc2 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xfe>
  for (int b = 0; b < batches; ++b) {
   1abf8:	9a00      	ldr	r2, [sp, #0]
   1abfa:	3601      	adds	r6, #1
   1abfc:	445a      	add	r2, fp
   1abfe:	9200      	str	r2, [sp, #0]
   1ac00:	4403      	add	r3, r0
   1ac02:	e7b1      	b.n	1ab68 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xa4>
   1ac04:	a816      	add	r0, sp, #88	; 0x58
   1ac06:	f00c fcd4 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   1ac0a:	a810      	add	r0, sp, #64	; 0x40
   1ac0c:	f00c fcd1 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(filter), GetTensorData<float>(filter),
   1ac10:	a80a      	add	r0, sp, #40	; 0x28
   1ac12:	f00c fcce 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, GetTensorShape(input), GetTensorData<float>(input),
   1ac16:	a804      	add	r0, sp, #16
   1ac18:	f00c fccb 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<float>(output));
  return kTfLiteOk;
}
   1ac1c:	2000      	movs	r0, #0
   1ac1e:	b01d      	add	sp, #116	; 0x74
   1ac20:	ecbd 8b02 	vpop	{d8}
   1ac24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac28:	7f7fffff 	.word	0x7f7fffff
   1ac2c:	ff7fffff 	.word	0xff7fffff
   1ac30:	00000000 	.word	0x00000000

0001ac34 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1ac34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac38:	ed2d 8b02 	vpush	{d8}
  TFLITE_DCHECK(node->builtin_data != nullptr);
   1ac3c:	694a      	ldr	r2, [r1, #20]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1ac3e:	4680      	mov	r8, r0
   1ac40:	b0b5      	sub	sp, #212	; 0xd4
  TFLITE_DCHECK(node->builtin_data != nullptr);
   1ac42:	b90a      	cbnz	r2, 1ac48 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x14>
   1ac44:	f016 f8b9 	bl	30dba <abort>
  const auto* params =
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1ac48:	f8d0 9008 	ldr.w	r9, [r0, #8]
   1ac4c:	6808      	ldr	r0, [r1, #0]
  const bool use_tensor = index < node->inputs->size &&
   1ac4e:	6803      	ldr	r3, [r0, #0]
  return &context->tensors[node->inputs->data[index]];
   1ac50:	6846      	ldr	r6, [r0, #4]
   1ac52:	6887      	ldr	r7, [r0, #8]
  const bool use_tensor = index < node->inputs->size &&
   1ac54:	2b02      	cmp	r3, #2
  return &context->tensors[node->inputs->data[index]];
   1ac56:	ea4f 1b86 	mov.w	fp, r6, lsl #6
   1ac5a:	eb09 1787 	add.w	r7, r9, r7, lsl #6
   1ac5e:	eb09 1686 	add.w	r6, r9, r6, lsl #6
  const bool use_tensor = index < node->inputs->size &&
   1ac62:	dd23      	ble.n	1acac <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x78>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
   1ac64:	68c4      	ldr	r4, [r0, #12]
  const bool use_tensor = index < node->inputs->size &&
   1ac66:	1c63      	adds	r3, r4, #1
   1ac68:	d020      	beq.n	1acac <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x78>
    return &context->tensors[node->inputs->data[index]];
   1ac6a:	eb09 1484 	add.w	r4, r9, r4, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1ac6e:	684b      	ldr	r3, [r1, #4]
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  TFLITE_DCHECK(node->user_data != nullptr);
   1ac70:	6908      	ldr	r0, [r1, #16]
   1ac72:	685d      	ldr	r5, [r3, #4]
   1ac74:	ea4f 1a85 	mov.w	sl, r5, lsl #6
   1ac78:	eb09 1585 	add.w	r5, r9, r5, lsl #6
   1ac7c:	2800      	cmp	r0, #0
   1ac7e:	d0e1      	beq.n	1ac44 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x10>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
   1ac80:	f819 300b 	ldrb.w	r3, [r9, fp]
   1ac84:	2b03      	cmp	r3, #3
   1ac86:	d057      	beq.n	1ad38 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x104>
   1ac88:	2b09      	cmp	r3, #9
   1ac8a:	d011      	beq.n	1acb0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x7c>
   1ac8c:	2b01      	cmp	r3, #1
   1ac8e:	f040 8126 	bne.w	1aede <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2aa>
    case kTfLiteFloat32:
      return EvalFloat(context, node, params->activation, input, filter, bias,
   1ac92:	7812      	ldrb	r2, [r2, #0]
   1ac94:	4633      	mov	r3, r6
   1ac96:	4640      	mov	r0, r8
   1ac98:	e9cd 4501 	strd	r4, r5, [sp, #4]
   1ac9c:	9700      	str	r7, [sp, #0]
   1ac9e:	f7ff ff11 	bl	1aac4 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
  }
  return kTfLiteOk;
}
   1aca2:	b035      	add	sp, #212	; 0xd4
   1aca4:	ecbd 8b02 	vpop	{d8}
   1aca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return nullptr;
   1acac:	2400      	movs	r4, #0
   1acae:	e7de      	b.n	1ac6e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x3a>
  op_params.input_offset = -input->params.zero_point;
   1acb0:	6933      	ldr	r3, [r6, #16]
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
   1acb2:	4631      	mov	r1, r6
  op_params.input_offset = -input->params.zero_point;
   1acb4:	425b      	negs	r3, r3
   1acb6:	932a      	str	r3, [sp, #168]	; 0xa8
  op_params.weights_offset = -filter->params.zero_point;
   1acb8:	693b      	ldr	r3, [r7, #16]
   1acba:	425b      	negs	r3, r3
   1acbc:	932b      	str	r3, [sp, #172]	; 0xac
  op_params.output_offset = output->params.zero_point;
   1acbe:	692b      	ldr	r3, [r5, #16]
   1acc0:	932c      	str	r3, [sp, #176]	; 0xb0
  op_params.output_multiplier = data.output_multiplier;
   1acc2:	6803      	ldr	r3, [r0, #0]
   1acc4:	932d      	str	r3, [sp, #180]	; 0xb4
  op_params.output_shift = -data.output_shift;
   1acc6:	6843      	ldr	r3, [r0, #4]
   1acc8:	425b      	negs	r3, r3
   1acca:	932e      	str	r3, [sp, #184]	; 0xb8
  op_params.quantized_activation_min = data.output_activation_min;
   1accc:	6883      	ldr	r3, [r0, #8]
   1acce:	932f      	str	r3, [sp, #188]	; 0xbc
  op_params.quantized_activation_max = data.output_activation_max;
   1acd0:	68c3      	ldr	r3, [r0, #12]
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
   1acd2:	a812      	add	r0, sp, #72	; 0x48
  op_params.quantized_activation_max = data.output_activation_max;
   1acd4:	9330      	str	r3, [sp, #192]	; 0xc0
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
   1acd6:	f00c fcb1 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      GetTensorShape(filter), GetTensorData<int8_t>(filter),
   1acda:	4639      	mov	r1, r7
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1acdc:	f8d6 8004 	ldr.w	r8, [r6, #4]
   1ace0:	a818      	add	r0, sp, #96	; 0x60
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
   1ace2:	ae1e      	add	r6, sp, #120	; 0x78
      GetTensorShape(filter), GetTensorData<int8_t>(filter),
   1ace4:	f00c fcaa 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
   1ace8:	4621      	mov	r1, r4
   1acea:	4630      	mov	r0, r6
   1acec:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1acf0:	f00c fca4 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1acf4:	b104      	cbz	r4, 1acf8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xc4>
   1acf6:	6864      	ldr	r4, [r4, #4]
      GetTensorShape(output), GetTensorData<int8_t>(output));
   1acf8:	af24      	add	r7, sp, #144	; 0x90
   1acfa:	4629      	mov	r1, r5
   1acfc:	4638      	mov	r0, r7
   1acfe:	f00c fc9d 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
   1ad02:	686b      	ldr	r3, [r5, #4]
   1ad04:	4642      	mov	r2, r8
   1ad06:	e9cd 7303 	strd	r7, r3, [sp, #12]
   1ad0a:	e9cd 6401 	strd	r6, r4, [sp, #4]
   1ad0e:	f8cd 9000 	str.w	r9, [sp]
   1ad12:	ab18      	add	r3, sp, #96	; 0x60
   1ad14:	a912      	add	r1, sp, #72	; 0x48
   1ad16:	a82a      	add	r0, sp, #168	; 0xa8
   1ad18:	f010 fe7b 	bl	2ba12 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa>
      TF_LITE_FULLY_CONNECTED(uint8_t);
   1ad1c:	4638      	mov	r0, r7
   1ad1e:	f00c fc48 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   1ad22:	4630      	mov	r0, r6
      TF_LITE_FULLY_CONNECTED(int16_t);
   1ad24:	f00c fc45 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   1ad28:	a818      	add	r0, sp, #96	; 0x60
   1ad2a:	f00c fc42 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   1ad2e:	a812      	add	r0, sp, #72	; 0x48
   1ad30:	f00c fc3f 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   1ad34:	2000      	movs	r0, #0
      break;
   1ad36:	e7b4      	b.n	1aca2 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6e>
  const int32_t filter_offset = -filter->params.zero_point;
   1ad38:	693b      	ldr	r3, [r7, #16]
  const int32_t input_offset = -input->params.zero_point;
   1ad3a:	6932      	ldr	r2, [r6, #16]
  const int32_t filter_offset = -filter->params.zero_point;
   1ad3c:	425b      	negs	r3, r3
  const int32_t input_offset = -input->params.zero_point;
   1ad3e:	4252      	negs	r2, r2
  const int32_t output_offset = output->params.zero_point;
   1ad40:	6929      	ldr	r1, [r5, #16]
  op_params.weights_offset = filter_offset;
   1ad42:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8
  op_params.output_multiplier = data.output_multiplier;
   1ad46:	6803      	ldr	r3, [r0, #0]
  op_params.output_offset = output_offset;
   1ad48:	912c      	str	r1, [sp, #176]	; 0xb0
  op_params.output_multiplier = data.output_multiplier;
   1ad4a:	932d      	str	r3, [sp, #180]	; 0xb4
  op_params.output_shift = -data.output_shift;
   1ad4c:	6843      	ldr	r3, [r0, #4]
   1ad4e:	425b      	negs	r3, r3
   1ad50:	932e      	str	r3, [sp, #184]	; 0xb8
  op_params.quantized_activation_min = data.output_activation_min;
   1ad52:	6883      	ldr	r3, [r0, #8]
   1ad54:	932f      	str	r3, [sp, #188]	; 0xbc
  op_params.quantized_activation_max = data.output_activation_max;
   1ad56:	68c3      	ldr	r3, [r0, #12]
  switch (output->type) {
   1ad58:	f819 000a 	ldrb.w	r0, [r9, sl]
  op_params.quantized_activation_max = data.output_activation_max;
   1ad5c:	9330      	str	r3, [sp, #192]	; 0xc0
  switch (output->type) {
   1ad5e:	2803      	cmp	r0, #3
   1ad60:	d00d      	beq.n	1ad7e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x14a>
   1ad62:	2807      	cmp	r0, #7
   1ad64:	d031      	beq.n	1adca <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x196>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   1ad66:	f8d8 4014 	ldr.w	r4, [r8, #20]
   1ad6a:	f7f1 ffab 	bl	ccc4 <TfLiteTypeGetName>
   1ad6e:	4602      	mov	r2, r0
   1ad70:	f819 300a 	ldrb.w	r3, [r9, sl]
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   1ad74:	4640      	mov	r0, r8
   1ad76:	495e      	ldr	r1, [pc, #376]	; (1aef0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2bc>)
   1ad78:	47a0      	blx	r4
      return kTfLiteError;
   1ad7a:	2001      	movs	r0, #1
   1ad7c:	e791      	b.n	1aca2 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6e>
      TF_LITE_FULLY_CONNECTED(uint8_t);
   1ad7e:	4631      	mov	r1, r6
   1ad80:	a812      	add	r0, sp, #72	; 0x48
   1ad82:	f00c fc5b 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1ad86:	4639      	mov	r1, r7
   1ad88:	f8d6 8004 	ldr.w	r8, [r6, #4]
   1ad8c:	a818      	add	r0, sp, #96	; 0x60
   1ad8e:	ae1e      	add	r6, sp, #120	; 0x78
   1ad90:	f00c fc54 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1ad94:	4621      	mov	r1, r4
   1ad96:	4630      	mov	r0, r6
   1ad98:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1ad9c:	f00c fc4e 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1ada0:	b104      	cbz	r4, 1ada4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x170>
   1ada2:	6864      	ldr	r4, [r4, #4]
   1ada4:	af24      	add	r7, sp, #144	; 0x90
   1ada6:	4629      	mov	r1, r5
   1ada8:	4638      	mov	r0, r7
   1adaa:	f00c fc47 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1adae:	686b      	ldr	r3, [r5, #4]
   1adb0:	4642      	mov	r2, r8
   1adb2:	e9cd 7303 	strd	r7, r3, [sp, #12]
   1adb6:	e9cd 6401 	strd	r6, r4, [sp, #4]
   1adba:	f8cd 9000 	str.w	r9, [sp]
   1adbe:	ab18      	add	r3, sp, #96	; 0x60
   1adc0:	a912      	add	r1, sp, #72	; 0x48
   1adc2:	a82a      	add	r0, sp, #168	; 0xa8
   1adc4:	f010 fda2 	bl	2b90c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph>
   1adc8:	e7a8      	b.n	1ad1c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xe8>
      TF_LITE_FULLY_CONNECTED(int16_t);
   1adca:	4631      	mov	r1, r6
   1adcc:	a812      	add	r0, sp, #72	; 0x48
   1adce:	f00c fc35 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1add2:	6873      	ldr	r3, [r6, #4]
   1add4:	4639      	mov	r1, r7
   1add6:	a818      	add	r0, sp, #96	; 0x60
   1add8:	930a      	str	r3, [sp, #40]	; 0x28
   1adda:	f00c fc2f 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1adde:	687b      	ldr	r3, [r7, #4]
   1ade0:	4621      	mov	r1, r4
   1ade2:	a81e      	add	r0, sp, #120	; 0x78
   1ade4:	930b      	str	r3, [sp, #44]	; 0x2c
   1ade6:	f00c fc29 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1adea:	b104      	cbz	r4, 1adee <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x1ba>
   1adec:	6864      	ldr	r4, [r4, #4]
   1adee:	4629      	mov	r1, r5
   1adf0:	a824      	add	r0, sp, #144	; 0x90
   1adf2:	f00c fc23 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1adf6:	686b      	ldr	r3, [r5, #4]
   1adf8:	930c      	str	r3, [sp, #48]	; 0x30
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8* input_data, const RuntimeShape& filter_shape,
    const uint8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int16* output_data) {
  const int32 input_offset = params.input_offset;
   1adfa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   1adfc:	930d      	str	r3, [sp, #52]	; 0x34
  const int32 filter_offset = params.weights_offset;
   1adfe:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   1ae00:	930e      	str	r3, [sp, #56]	; 0x38
  const int32 output_offset = params.output_offset;
  const int32 output_multiplier = params.output_multiplier;
   1ae02:	e9dd 532c 	ldrd	r5, r3, [sp, #176]	; 0xb0
   1ae06:	ee08 3a10 	vmov	s16, r3
  const int output_shift = params.output_shift;
   1ae0a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1ae0c:	ee08 3a90 	vmov	s17, r3
  const int32 output_activation_min = params.quantized_activation_min;
   1ae10:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   1ae12:	9307      	str	r3, [sp, #28]
  const int32 output_activation_max = params.quantized_activation_max;
   1ae14:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   1ae16:	9308      	str	r3, [sp, #32]

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   1ae18:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
   1ae1c:	4293      	cmp	r3, r2
   1ae1e:	f73f af11 	bgt.w	1ac44 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x10>
  TFLITE_DCHECK_EQ(output_offset, 0);
   1ae22:	2d00      	cmp	r5, #0
   1ae24:	f47f af0e 	bne.w	1ac44 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x10>
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
   1ae28:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1ae2a:	a824      	add	r0, sp, #144	; 0x90
   1ae2c:	3b01      	subs	r3, #1
   1ae2e:	4619      	mov	r1, r3
   1ae30:	9309      	str	r3, [sp, #36]	; 0x24
   1ae32:	f010 fd52 	bl	2b8da <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
  const int filter_dim_count = filter_shape.DimensionsCount();
   1ae36:	9e18      	ldr	r6, [sp, #96]	; 0x60
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
   1ae38:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ae3a:	1eb1      	subs	r1, r6, #2
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
   1ae3c:	900f      	str	r0, [sp, #60]	; 0x3c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
   1ae3e:	aa24      	add	r2, sp, #144	; 0x90
   1ae40:	a818      	add	r0, sp, #96	; 0x60
   1ae42:	f00f fa6b 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
   1ae46:	1e71      	subs	r1, r6, #1
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
   1ae48:	9009      	str	r0, [sp, #36]	; 0x24
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
   1ae4a:	a818      	add	r0, sp, #96	; 0x60
   1ae4c:	f00c fbbc 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   1ae50:	46a8      	mov	r8, r5
   1ae52:	4606      	mov	r6, r0
   1ae54:	46a9      	mov	r9, r5
  for (int b = 0; b < batches; ++b) {
   1ae56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ae58:	42ab      	cmp	r3, r5
   1ae5a:	dd3b      	ble.n	1aed4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2a0>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   1ae5c:	2700      	movs	r7, #0
  for (int b = 0; b < batches; ++b) {
   1ae5e:	46ba      	mov	sl, r7
   1ae60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ae62:	eb03 0b49 	add.w	fp, r3, r9, lsl #1
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   1ae66:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ae68:	42bb      	cmp	r3, r7
   1ae6a:	dd2e      	ble.n	1aeca <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x296>
      // Internal accumulation.
      // Initialize accumulator with the bias-value.
      int32 accum = bias_data[out_c];
   1ae6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ae6e:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
      // Accumulation loop.
      for (int d = 0; d < accum_depth; ++d) {
   1ae72:	eb03 0e08 	add.w	lr, r3, r8
   1ae76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ae78:	eb03 0c0a 	add.w	ip, r3, sl
   1ae7c:	2300      	movs	r3, #0
   1ae7e:	429e      	cmp	r6, r3
   1ae80:	dd10      	ble.n	1aea4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x270>
        int16 input_val = input_data[b * accum_depth + d] + input_offset;
   1ae82:	f81e 2b01 	ldrb.w	r2, [lr], #1
        int16 filter_val = filter_data[out_c * accum_depth + d] + filter_offset;
   1ae86:	f81c 1b01 	ldrb.w	r1, [ip], #1
        int16 input_val = input_data[b * accum_depth + d] + input_offset;
   1ae8a:	9210      	str	r2, [sp, #64]	; 0x40
        int16 filter_val = filter_data[out_c * accum_depth + d] + filter_offset;
   1ae8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      for (int d = 0; d < accum_depth; ++d) {
   1ae8e:	3301      	adds	r3, #1
        int16 filter_val = filter_data[out_c * accum_depth + d] + filter_offset;
   1ae90:	188a      	adds	r2, r1, r2
   1ae92:	9211      	str	r2, [sp, #68]	; 0x44
        int16 input_val = input_data[b * accum_depth + d] + input_offset;
   1ae94:	9910      	ldr	r1, [sp, #64]	; 0x40
   1ae96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1ae98:	4411      	add	r1, r2
   1ae9a:	460a      	mov	r2, r1
        accum += filter_val * input_val;
   1ae9c:	9911      	ldr	r1, [sp, #68]	; 0x44
   1ae9e:	fb11 0002 	smlabb	r0, r1, r2, r0
      for (int d = 0; d < accum_depth; ++d) {
   1aea2:	e7ec      	b.n	1ae7e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x24a>
      // Down-scale the final int32 accumulator to the scale used by our
      // (16-bit, typically 3 integer bits) fixed-point format. The quantized
      // multiplier and shift here have been pre-computed offline
      // (e.g. by toco).
      accum =
          MultiplyByQuantizedMultiplier(accum, output_multiplier, output_shift);
   1aea4:	ee18 2a90 	vmov	r2, s17
   1aea8:	ee18 1a10 	vmov	r1, s16
   1aeac:	f7fe fa30 	bl	19310 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
      // Saturate, cast to int16, and store to output array.
      accum = std::max(accum, output_activation_min - output_offset);
      accum = std::min(accum, output_activation_max - output_offset);
      accum += output_offset;
      output_data[out_c + output_depth * b] = accum;
   1aeb0:	9b07      	ldr	r3, [sp, #28]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   1aeb2:	3701      	adds	r7, #1
      output_data[out_c + output_depth * b] = accum;
   1aeb4:	4298      	cmp	r0, r3
   1aeb6:	bfb8      	it	lt
   1aeb8:	4618      	movlt	r0, r3
   1aeba:	9b08      	ldr	r3, [sp, #32]
   1aebc:	44b2      	add	sl, r6
   1aebe:	4298      	cmp	r0, r3
   1aec0:	bfa8      	it	ge
   1aec2:	4618      	movge	r0, r3
   1aec4:	f82b 0b02 	strh.w	r0, [fp], #2
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   1aec8:	e7cd      	b.n	1ae66 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x232>
  for (int b = 0; b < batches; ++b) {
   1aeca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1aecc:	3501      	adds	r5, #1
   1aece:	4499      	add	r9, r3
   1aed0:	44b0      	add	r8, r6
   1aed2:	e7c0      	b.n	1ae56 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x222>
   1aed4:	a824      	add	r0, sp, #144	; 0x90
   1aed6:	f00c fb6c 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   1aeda:	a81e      	add	r0, sp, #120	; 0x78
   1aedc:	e722      	b.n	1ad24 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xf0>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   1aede:	4618      	mov	r0, r3
   1aee0:	f8d8 4014 	ldr.w	r4, [r8, #20]
   1aee4:	f7f1 feee 	bl	ccc4 <TfLiteTypeGetName>
   1aee8:	f819 300b 	ldrb.w	r3, [r9, fp]
   1aeec:	4602      	mov	r2, r0
   1aeee:	e741      	b.n	1ad74 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x140>
   1aef0:	000349d0 	.word	0x000349d0

0001aef4 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>:

}  // namespace fully_connected

TfLiteRegistration Register_FULLY_CONNECTED() {
   1aef4:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/fully_connected::Prepare,
          /*invoke=*/fully_connected::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1aef6:	4604      	mov	r4, r0
TfLiteRegistration Register_FULLY_CONNECTED() {
   1aef8:	4606      	mov	r6, r0
          /*version=*/0};
   1aefa:	4d04      	ldr	r5, [pc, #16]	; (1af0c <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv+0x18>)
   1aefc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1aefe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1af00:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1af04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1af08:	4630      	mov	r0, r6
   1af0a:	bd70      	pop	{r4, r5, r6, pc}
   1af0c:	00031a38 	.word	0x00031a38

0001af10 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIsEET_S1_S1_>:
  bool overflow = a == b && a == std::numeric_limits<std::int16_t>::min();
   1af10:	4288      	cmp	r0, r1
   1af12:	d112      	bne.n	1af3a <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIsEET_S1_S1_+0x2a>
   1af14:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
   1af18:	bf14      	ite	ne
   1af1a:	2200      	movne	r2, #0
   1af1c:	2201      	moveq	r2, #1
  std::int16_t nudge = ab_32 >= 0 ? (1 << 14) : (1 - (1 << 14));
   1af1e:	4348      	muls	r0, r1
   1af20:	4b08      	ldr	r3, [pc, #32]	; (1af44 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIsEET_S1_S1_+0x34>)
   1af22:	bf58      	it	pl
   1af24:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
  return overflow ? std::numeric_limits<std::int16_t>::max() : ab_x2_high16;
   1af28:	b94a      	cbnz	r2, 1af3e <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIsEET_S1_S1_+0x2e>
      static_cast<std::int16_t>((ab_32 + nudge) / (1 << 15));
   1af2a:	1818      	adds	r0, r3, r0
   1af2c:	bf44      	itt	mi
   1af2e:	f500 40ff 	addmi.w	r0, r0, #32640	; 0x7f80
   1af32:	307f      	addmi	r0, #127	; 0x7f
   1af34:	13c0      	asrs	r0, r0, #15
}
   1af36:	b200      	sxth	r0, r0
   1af38:	4770      	bx	lr
  bool overflow = a == b && a == std::numeric_limits<std::int16_t>::min();
   1af3a:	2200      	movs	r2, #0
   1af3c:	e7ef      	b.n	1af1e <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIsEET_S1_S1_+0xe>
   1af3e:	f647 70ff 	movw	r0, #32767	; 0x7fff
   1af42:	e7f8      	b.n	1af36 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIsEET_S1_S1_+0x26>
   1af44:	ffffc001 	.word	0xffffc001

0001af48 <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode>:
    return nullptr;
  }
  return data;
}

TfLiteStatus HardSwishPrepare(TfLiteContext* context, TfLiteNode* node) {
   1af48:	b5f0      	push	{r4, r5, r6, r7, lr}
   1af4a:	ed2d 8b02 	vpush	{d8}
  TFLITE_DCHECK(node->user_data != nullptr);
   1af4e:	690d      	ldr	r5, [r1, #16]
TfLiteStatus HardSwishPrepare(TfLiteContext* context, TfLiteNode* node) {
   1af50:	4606      	mov	r6, r0
   1af52:	b089      	sub	sp, #36	; 0x24
  TFLITE_DCHECK(node->user_data != nullptr);
   1af54:	b90d      	cbnz	r5, 1af5a <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x12>
   1af56:	f015 ff30 	bl	30dba <abort>
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   1af5a:	680f      	ldr	r7, [r1, #0]
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   1af5c:	683c      	ldr	r4, [r7, #0]
   1af5e:	2c01      	cmp	r4, #1
   1af60:	d010      	beq.n	1af84 <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x3c>
   1af62:	2501      	movs	r5, #1
   1af64:	4b35      	ldr	r3, [pc, #212]	; (1b03c <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
   1af66:	e9cd 4502 	strd	r4, r5, [sp, #8]
   1af6a:	9301      	str	r3, [sp, #4]
   1af6c:	4b34      	ldr	r3, [pc, #208]	; (1b040 <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
   1af6e:	4a35      	ldr	r2, [pc, #212]	; (1b044 <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0xfc>)
   1af70:	9300      	str	r3, [sp, #0]
   1af72:	6944      	ldr	r4, [r0, #20]
   1af74:	232f      	movs	r3, #47	; 0x2f
   1af76:	4934      	ldr	r1, [pc, #208]	; (1b048 <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x100>)
   1af78:	47a0      	blx	r4
                       &params->output_multiplier_exponent);
    DownScaleInt32ToInt16Multiplier(
        output_multiplier_fixedpoint_int32,
        &params->output_multiplier_fixedpoint_int16);

    TF_LITE_ENSURE(context, params->output_multiplier_exponent <= 0);
   1af7a:	2001      	movs	r0, #1
        reluish_multiplier_fixedpoint_int32,
        &params->reluish_multiplier_fixedpoint_int16);
  }

  return kTfLiteOk;
}
   1af7c:	b009      	add	sp, #36	; 0x24
   1af7e:	ecbd 8b02 	vpop	{d8}
   1af82:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   1af84:	684a      	ldr	r2, [r1, #4]
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   1af86:	6813      	ldr	r3, [r2, #0]
   1af88:	2b01      	cmp	r3, #1
   1af8a:	d00b      	beq.n	1afa4 <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x5c>
   1af8c:	e9cd 3402 	strd	r3, r4, [sp, #8]
   1af90:	4b2a      	ldr	r3, [pc, #168]	; (1b03c <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
   1af92:	4a2c      	ldr	r2, [pc, #176]	; (1b044 <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0xfc>)
   1af94:	9301      	str	r3, [sp, #4]
   1af96:	4b2d      	ldr	r3, [pc, #180]	; (1b04c <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x104>)
   1af98:	492b      	ldr	r1, [pc, #172]	; (1b048 <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x100>)
   1af9a:	9300      	str	r3, [sp, #0]
   1af9c:	6945      	ldr	r5, [r0, #20]
   1af9e:	2330      	movs	r3, #48	; 0x30
   1afa0:	47a8      	blx	r5
   1afa2:	e7ea      	b.n	1af7a <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x32>
  return &context->tensors[node->inputs->data[index]];
   1afa4:	6879      	ldr	r1, [r7, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1afa6:	6883      	ldr	r3, [r0, #8]
   1afa8:	0188      	lsls	r0, r1, #6
  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8) {
   1afaa:	5c18      	ldrb	r0, [r3, r0]
   1afac:	eb03 1181 	add.w	r1, r3, r1, lsl #6
   1afb0:	2803      	cmp	r0, #3
   1afb2:	d001      	beq.n	1afb8 <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x70>
   1afb4:	2809      	cmp	r0, #9
   1afb6:	d13e      	bne.n	1b036 <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0xee>
    const float hires_input_scale = (1.0f / 128.0f) * input_scale;
   1afb8:	ed91 8a03 	vldr	s16, [r1, #12]
   1afbc:	eddf 7a24 	vldr	s15, [pc, #144]	; 1b050 <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x108>
  return &context->tensors[node->outputs->data[index]];
   1afc0:	6852      	ldr	r2, [r2, #4]
   1afc2:	ee28 8a27 	vmul.f32	s16, s16, s15
   1afc6:	eb03 1282 	add.w	r2, r3, r2, lsl #6
        static_cast<double>(hires_input_scale / output_scale);
   1afca:	edd2 7a03 	vldr	s15, [r2, #12]
    const double output_multiplier =
   1afce:	eec8 7a27 	vdiv.f32	s15, s16, s15
    params->input_zero_point = input->params.zero_point;
   1afd2:	690b      	ldr	r3, [r1, #16]
    const double output_multiplier =
   1afd4:	ee17 0a90 	vmov	r0, s15
    params->input_zero_point = input->params.zero_point;
   1afd8:	802b      	strh	r3, [r5, #0]
    params->output_zero_point = output->params.zero_point;
   1afda:	6913      	ldr	r3, [r2, #16]
    QuantizeMultiplier(output_multiplier, &output_multiplier_fixedpoint_int32,
   1afdc:	f105 0410 	add.w	r4, r5, #16
    params->output_zero_point = output->params.zero_point;
   1afe0:	806b      	strh	r3, [r5, #2]
    const double output_multiplier =
   1afe2:	f7f1 fa91 	bl	c508 <__aeabi_f2d>
    QuantizeMultiplier(output_multiplier, &output_multiplier_fixedpoint_int32,
   1afe6:	4623      	mov	r3, r4
   1afe8:	aa06      	add	r2, sp, #24
   1afea:	f005 ff93 	bl	20f14 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    DownScaleInt32ToInt16Multiplier(
   1afee:	9806      	ldr	r0, [sp, #24]
   1aff0:	f105 010c 	add.w	r1, r5, #12
   1aff4:	f010 fd9f 	bl	2bb36 <_ZN6tflite31DownScaleInt32ToInt16MultiplierEiPs>
    TF_LITE_ENSURE(context, params->output_multiplier_exponent <= 0);
   1aff8:	692b      	ldr	r3, [r5, #16]
   1affa:	2b00      	cmp	r3, #0
   1affc:	dd08      	ble.n	1b010 <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0xc8>
   1affe:	4b15      	ldr	r3, [pc, #84]	; (1b054 <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
   1b000:	4630      	mov	r0, r6
   1b002:	9300      	str	r3, [sp, #0]
   1b004:	6974      	ldr	r4, [r6, #20]
   1b006:	2349      	movs	r3, #73	; 0x49
   1b008:	4a0e      	ldr	r2, [pc, #56]	; (1b044 <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0xfc>)
   1b00a:	4913      	ldr	r1, [pc, #76]	; (1b058 <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x110>)
   1b00c:	47a0      	blx	r4
   1b00e:	e7b4      	b.n	1af7a <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x32>
    const double reluish_multiplier =
   1b010:	eddf 7a12 	vldr	s15, [pc, #72]	; 1b05c <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x114>
   1b014:	eec8 7a27 	vdiv.f32	s15, s16, s15
    QuantizeMultiplier(reluish_multiplier, &reluish_multiplier_fixedpoint_int32,
   1b018:	f105 0308 	add.w	r3, r5, #8
    const double reluish_multiplier =
   1b01c:	ee17 0a90 	vmov	r0, s15
    QuantizeMultiplier(reluish_multiplier, &reluish_multiplier_fixedpoint_int32,
   1b020:	9305      	str	r3, [sp, #20]
    const double reluish_multiplier =
   1b022:	f7f1 fa71 	bl	c508 <__aeabi_f2d>
    QuantizeMultiplier(reluish_multiplier, &reluish_multiplier_fixedpoint_int32,
   1b026:	9b05      	ldr	r3, [sp, #20]
   1b028:	aa07      	add	r2, sp, #28
   1b02a:	f005 ff73 	bl	20f14 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    DownScaleInt32ToInt16Multiplier(
   1b02e:	9807      	ldr	r0, [sp, #28]
   1b030:	1d29      	adds	r1, r5, #4
   1b032:	f010 fd80 	bl	2bb36 <_ZN6tflite31DownScaleInt32ToInt16MultiplierEiPs>
  return kTfLiteOk;
   1b036:	2000      	movs	r0, #0
   1b038:	e7a0      	b.n	1af7c <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x34>
   1b03a:	bf00      	nop
   1b03c:	00035814 	.word	0x00035814
   1b040:	00034a96 	.word	0x00034a96
   1b044:	00035161 	.word	0x00035161
   1b048:	00034a7c 	.word	0x00034a7c
   1b04c:	00034aa6 	.word	0x00034aa6
   1b050:	3c000000 	.word	0x3c000000
   1b054:	0003518d 	.word	0x0003518d
   1b058:	00034b9c 	.word	0x00034b9c
   1b05c:	38c00000 	.word	0x38c00000

0001b060 <_ZN6tflite3ops5micro19Register_HARD_SWISHEv>:
  return kTfLiteOk;
}

}  // namespace hard_swish

TfLiteRegistration Register_HARD_SWISH() {
   1b060:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/hard_swish::HardSwishPrepare,
          /*invoke=*/hard_swish::HardSwishEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1b062:	4604      	mov	r4, r0
TfLiteRegistration Register_HARD_SWISH() {
   1b064:	4606      	mov	r6, r0
          /*version=*/0};
   1b066:	4d04      	ldr	r5, [pc, #16]	; (1b078 <_ZN6tflite3ops5micro19Register_HARD_SWISHEv+0x18>)
   1b068:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1b06a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1b06c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1b070:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1b074:	4630      	mov	r0, r6
   1b076:	bd70      	pop	{r4, r5, r6, pc}
   1b078:	00031a58 	.word	0x00031a58

0001b07c <_ZN8gemmlowp19RoundingDivideByPOTIsEET_S1_i>:
  assert(exponent >= 0);
   1b07c:	2900      	cmp	r1, #0
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
   1b07e:	b508      	push	{r3, lr}
  assert(exponent >= 0);
   1b080:	da06      	bge.n	1b090 <_ZN8gemmlowp19RoundingDivideByPOTIsEET_S1_i+0x14>
   1b082:	f44f 71b3 	mov.w	r1, #358	; 0x166
   1b086:	4b0d      	ldr	r3, [pc, #52]	; (1b0bc <_ZN8gemmlowp19RoundingDivideByPOTIsEET_S1_i+0x40>)
   1b088:	4a0d      	ldr	r2, [pc, #52]	; (1b0c0 <_ZN8gemmlowp19RoundingDivideByPOTIsEET_S1_i+0x44>)
  assert(exponent <= 31);
   1b08a:	480e      	ldr	r0, [pc, #56]	; (1b0c4 <_ZN8gemmlowp19RoundingDivideByPOTIsEET_S1_i+0x48>)
   1b08c:	f00b f9bc 	bl	26408 <__assert_func>
   1b090:	291f      	cmp	r1, #31
   1b092:	dd04      	ble.n	1b09e <_ZN8gemmlowp19RoundingDivideByPOTIsEET_S1_i+0x22>
   1b094:	f240 1167 	movw	r1, #359	; 0x167
   1b098:	4b0b      	ldr	r3, [pc, #44]	; (1b0c8 <_ZN8gemmlowp19RoundingDivideByPOTIsEET_S1_i+0x4c>)
   1b09a:	4a09      	ldr	r2, [pc, #36]	; (1b0c0 <_ZN8gemmlowp19RoundingDivideByPOTIsEET_S1_i+0x44>)
   1b09c:	e7f5      	b.n	1b08a <_ZN8gemmlowp19RoundingDivideByPOTIsEET_S1_i+0xe>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   1b09e:	2301      	movs	r3, #1
   1b0a0:	408b      	lsls	r3, r1
   1b0a2:	3b01      	subs	r3, #1
   1b0a4:	b21a      	sxth	r2, r3
  return a + b;
   1b0a6:	f343 034e 	sbfx	r3, r3, #1, #15
  return a ? BitNot(zero) : zero;
   1b0aa:	eb03 73d0 	add.w	r3, r3, r0, lsr #31
   1b0ae:	4002      	ands	r2, r0
  return a >> offset;
   1b0b0:	4108      	asrs	r0, r1
  return a + b;
   1b0b2:	4293      	cmp	r3, r2
   1b0b4:	bfb8      	it	lt
   1b0b6:	3001      	addlt	r0, #1
  const IntegerType remainder = BitAnd(x, mask);
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
  return Add(ShiftRight(x, exponent),
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
   1b0b8:	b200      	sxth	r0, r0
   1b0ba:	bd08      	pop	{r3, pc}
   1b0bc:	00034912 	.word	0x00034912
   1b0c0:	000351b5 	.word	0x000351b5
   1b0c4:	00034975 	.word	0x00034975
   1b0c8:	000349c1 	.word	0x000349c1

0001b0cc <_ZN6tflite3ops5micro10hard_swish13HardSwishEvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->inputs->data[index]];
   1b0cc:	680a      	ldr	r2, [r1, #0]
TfLiteStatus HardSwishEval(TfLiteContext* context, TfLiteNode* node) {
   1b0ce:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b0d0:	6855      	ldr	r5, [r2, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1b0d2:	6883      	ldr	r3, [r0, #8]
TfLiteStatus HardSwishEval(TfLiteContext* context, TfLiteNode* node) {
   1b0d4:	4606      	mov	r6, r0
  return &context->tensors[node->outputs->data[index]];
   1b0d6:	6848      	ldr	r0, [r1, #4]
  return &context->tensors[node->inputs->data[index]];
   1b0d8:	01aa      	lsls	r2, r5, #6
  return &context->tensors[node->outputs->data[index]];
   1b0da:	6844      	ldr	r4, [r0, #4]
  switch (input->type) {
   1b0dc:	5c98      	ldrb	r0, [r3, r2]
  HardSwishParams* params = static_cast<HardSwishParams*>(node->user_data);
   1b0de:	690f      	ldr	r7, [r1, #16]
  switch (input->type) {
   1b0e0:	2803      	cmp	r0, #3
TfLiteStatus HardSwishEval(TfLiteContext* context, TfLiteNode* node) {
   1b0e2:	b091      	sub	sp, #68	; 0x44
  return &context->tensors[node->inputs->data[index]];
   1b0e4:	eb03 1585 	add.w	r5, r3, r5, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1b0e8:	eb03 1484 	add.w	r4, r3, r4, lsl #6
  switch (input->type) {
   1b0ec:	d035      	beq.n	1b15a <_ZN6tflite3ops5micro10hard_swish13HardSwishEvalEP13TfLiteContextP10TfLiteNode+0x8e>
   1b0ee:	2809      	cmp	r0, #9
   1b0f0:	d04f      	beq.n	1b192 <_ZN6tflite3ops5micro10hard_swish13HardSwishEvalEP13TfLiteContextP10TfLiteNode+0xc6>
   1b0f2:	2801      	cmp	r0, #1
   1b0f4:	d161      	bne.n	1b1ba <_ZN6tflite3ops5micro10hard_swish13HardSwishEvalEP13TfLiteContextP10TfLiteNode+0xee>
          GetTensorShape(input), GetTensorData<float>(input),
   1b0f6:	4629      	mov	r1, r5
   1b0f8:	a804      	add	r0, sp, #16
   1b0fa:	f00c fa9f 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
          GetTensorShape(output), GetTensorData<float>(output));
   1b0fe:	4621      	mov	r1, r4
   1b100:	a80a      	add	r0, sp, #40	; 0x28
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1b102:	686d      	ldr	r5, [r5, #4]
   1b104:	f00c fa9a 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1b108:	b104      	cbz	r4, 1b10c <_ZN6tflite3ops5micro10hard_swish13HardSwishEvalEP13TfLiteContextP10TfLiteNode+0x40>
   1b10a:	6864      	ldr	r4, [r4, #4]

template <typename T>
inline void HardSwish(const RuntimeShape& input_shape, const T* input_data,
                      const RuntimeShape& output_shape, T* output_data) {
  ruy::profiler::ScopeLabel label("ReferenceHardSwish/Float");
  auto matching_size = MatchingFlatSize(input_shape, output_shape);
   1b10c:	a90a      	add	r1, sp, #40	; 0x28
   1b10e:	a804      	add	r0, sp, #16
   1b110:	f00c fa6b 	bl	275ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
   1b114:	462b      	mov	r3, r5
  const T* in_end = input_data + matching_size;
  for (; input_data < in_end; input_data++, output_data++) {
    const float in = *input_data;
    *output_data =
        in * std::min(static_cast<T>(6), std::max(static_cast<T>(0), in + 3)) /
   1b116:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
   1b11a:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
  const T* in_end = input_data + matching_size;
   1b11e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
  for (; input_data < in_end; input_data++, output_data++) {
   1b122:	4298      	cmp	r0, r3
   1b124:	d92c      	bls.n	1b180 <_ZN6tflite3ops5micro10hard_swish13HardSwishEvalEP13TfLiteContextP10TfLiteNode+0xb4>
    const float in = *input_data;
   1b126:	ecb3 7a01 	vldmia	r3!, {s14}
        in * std::min(static_cast<T>(6), std::max(static_cast<T>(0), in + 3)) /
   1b12a:	ee77 7a06 	vadd.f32	s15, s14, s12
      if (__a < __b)
   1b12e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   1b132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b136:	dd0d      	ble.n	1b154 <_ZN6tflite3ops5micro10hard_swish13HardSwishEvalEP13TfLiteContextP10TfLiteNode+0x88>
      return __a;
   1b138:	eef4 7ae6 	vcmpe.f32	s15, s13
   1b13c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b140:	bf58      	it	pl
   1b142:	eef0 7a66 	vmovpl.f32	s15, s13
   1b146:	ee67 7a27 	vmul.f32	s15, s14, s15
   1b14a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    *output_data =
   1b14e:	eca4 7a01 	vstmia	r4!, {s14}
  for (; input_data < in_end; input_data++, output_data++) {
   1b152:	e7e6      	b.n	1b122 <_ZN6tflite3ops5micro10hard_swish13HardSwishEvalEP13TfLiteContextP10TfLiteNode+0x56>
      return __a;
   1b154:	eddf 7a1d 	vldr	s15, [pc, #116]	; 1b1cc <_ZN6tflite3ops5micro10hard_swish13HardSwishEvalEP13TfLiteContextP10TfLiteNode+0x100>
   1b158:	e7f5      	b.n	1b146 <_ZN6tflite3ops5micro10hard_swish13HardSwishEvalEP13TfLiteContextP10TfLiteNode+0x7a>
          *params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1b15a:	4629      	mov	r1, r5
   1b15c:	a804      	add	r0, sp, #16
   1b15e:	f00c fa6d 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1b162:	686a      	ldr	r2, [r5, #4]
          GetTensorShape(output), GetTensorData<uint8_t>(output));
   1b164:	4621      	mov	r1, r4
   1b166:	a80a      	add	r0, sp, #40	; 0x28
   1b168:	9203      	str	r2, [sp, #12]
   1b16a:	f00c fa67 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1b16e:	9a03      	ldr	r2, [sp, #12]
   1b170:	b104      	cbz	r4, 1b174 <_ZN6tflite3ops5micro10hard_swish13HardSwishEvalEP13TfLiteContextP10TfLiteNode+0xa8>
   1b172:	6864      	ldr	r4, [r4, #4]
      tflite::reference_ops::HardSwish<uint8_t>(
   1b174:	4638      	mov	r0, r7
   1b176:	9400      	str	r4, [sp, #0]
   1b178:	ab0a      	add	r3, sp, #40	; 0x28
   1b17a:	a904      	add	r1, sp, #16
   1b17c:	f010 fcfb 	bl	2bb76 <_ZN6tflite13reference_ops9HardSwishIhEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>
          GetTensorShape(output), GetTensorData<uint8_t>(output));
   1b180:	a80a      	add	r0, sp, #40	; 0x28
   1b182:	f00c fa16 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
          *params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1b186:	a804      	add	r0, sp, #16
   1b188:	f00c fa13 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   1b18c:	2000      	movs	r0, #0
}
   1b18e:	b011      	add	sp, #68	; 0x44
   1b190:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *params, GetTensorShape(input), GetTensorData<int8_t>(input),
   1b192:	4629      	mov	r1, r5
   1b194:	a804      	add	r0, sp, #16
   1b196:	f00c fa51 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1b19a:	686a      	ldr	r2, [r5, #4]
          GetTensorShape(output), GetTensorData<int8_t>(output));
   1b19c:	4621      	mov	r1, r4
   1b19e:	a80a      	add	r0, sp, #40	; 0x28
   1b1a0:	9203      	str	r2, [sp, #12]
   1b1a2:	f00c fa4b 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1b1a6:	9a03      	ldr	r2, [sp, #12]
   1b1a8:	b104      	cbz	r4, 1b1ac <_ZN6tflite3ops5micro10hard_swish13HardSwishEvalEP13TfLiteContextP10TfLiteNode+0xe0>
   1b1aa:	6864      	ldr	r4, [r4, #4]
      tflite::reference_ops::HardSwish<int8_t>(
   1b1ac:	4638      	mov	r0, r7
   1b1ae:	9400      	str	r4, [sp, #0]
   1b1b0:	ab0a      	add	r3, sp, #40	; 0x28
   1b1b2:	a904      	add	r1, sp, #16
   1b1b4:	f010 fd2a 	bl	2bc0c <_ZN6tflite13reference_ops9HardSwishIaEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>
   1b1b8:	e7e2      	b.n	1b180 <_ZN6tflite3ops5micro10hard_swish13HardSwishEvalEP13TfLiteContextP10TfLiteNode+0xb4>
      TF_LITE_KERNEL_LOG(
   1b1ba:	6974      	ldr	r4, [r6, #20]
   1b1bc:	f7f1 fd82 	bl	ccc4 <TfLiteTypeGetName>
   1b1c0:	4903      	ldr	r1, [pc, #12]	; (1b1d0 <_ZN6tflite3ops5micro10hard_swish13HardSwishEvalEP13TfLiteContextP10TfLiteNode+0x104>)
   1b1c2:	4602      	mov	r2, r0
   1b1c4:	4630      	mov	r0, r6
   1b1c6:	47a0      	blx	r4
      return kTfLiteError;
   1b1c8:	2001      	movs	r0, #1
   1b1ca:	e7e0      	b.n	1b18e <_ZN6tflite3ops5micro10hard_swish13HardSwishEvalEP13TfLiteContextP10TfLiteNode+0xc2>
   1b1cc:	00000000 	.word	0x00000000
   1b1d0:	00035210 	.word	0x00035210

0001b1d4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>:
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   1b1d4:	4288      	cmp	r0, r1
                                                      std::int32_t b) {
   1b1d6:	b510      	push	{r4, lr}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   1b1d8:	d11f      	bne.n	1b21a <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x46>
   1b1da:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   1b1de:	425c      	negs	r4, r3
   1b1e0:	415c      	adcs	r4, r3
  std::int64_t ab_64 = a_64 * b_64;
   1b1e2:	fb80 2301 	smull	r2, r3, r0, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   1b1e6:	2a00      	cmp	r2, #0
   1b1e8:	f173 0100 	sbcs.w	r1, r3, #0
   1b1ec:	490d      	ldr	r1, [pc, #52]	; (1b224 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x50>)
   1b1ee:	bfa8      	it	ge
   1b1f0:	f04f 4180 	movge.w	r1, #1073741824	; 0x40000000
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   1b1f4:	b99c      	cbnz	r4, 1b21e <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x4a>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   1b1f6:	1852      	adds	r2, r2, r1
   1b1f8:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   1b1fc:	2a00      	cmp	r2, #0
   1b1fe:	f173 0100 	sbcs.w	r1, r3, #0
   1b202:	da06      	bge.n	1b212 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x3e>
   1b204:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1b208:	1852      	adds	r2, r2, r1
   1b20a:	f04f 0100 	mov.w	r1, #0
   1b20e:	eb41 0303 	adc.w	r3, r1, r3
   1b212:	0fd0      	lsrs	r0, r2, #31
   1b214:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
}
   1b218:	bd10      	pop	{r4, pc}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   1b21a:	2400      	movs	r4, #0
   1b21c:	e7e1      	b.n	1b1e2 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0xe>
   1b21e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1b222:	e7f9      	b.n	1b218 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x44>
   1b224:	c0000001 	.word	0xc0000001

0001b228 <_ZN6tflite3ops5micro19Register_L2NORM_REFEv>:
  return kTfLiteOk;
}

}  // namespace l2norm

TfLiteRegistration Register_L2NORM_REF() {
   1b228:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/l2norm::Prepare,
          /*invoke=*/l2norm::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1b22a:	4604      	mov	r4, r0
TfLiteRegistration Register_L2NORM_REF() {
   1b22c:	4606      	mov	r6, r0
          /*version=*/0};
   1b22e:	4d04      	ldr	r5, [pc, #16]	; (1b240 <_ZN6tflite3ops5micro19Register_L2NORM_REFEv+0x18>)
   1b230:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1b232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1b234:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1b238:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1b23c:	4630      	mov	r0, r6
   1b23e:	bd70      	pop	{r4, r5, r6, pc}
   1b240:	00031a78 	.word	0x00031a78

0001b244 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>:
  assert(exponent >= 0);
   1b244:	2900      	cmp	r1, #0
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
   1b246:	b508      	push	{r3, lr}
  assert(exponent >= 0);
   1b248:	da06      	bge.n	1b258 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x14>
   1b24a:	f44f 71b3 	mov.w	r1, #358	; 0x166
   1b24e:	4b0c      	ldr	r3, [pc, #48]	; (1b280 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x3c>)
   1b250:	4a0c      	ldr	r2, [pc, #48]	; (1b284 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x40>)
  assert(exponent <= 31);
   1b252:	480d      	ldr	r0, [pc, #52]	; (1b288 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x44>)
   1b254:	f00b f8d8 	bl	26408 <__assert_func>
   1b258:	291f      	cmp	r1, #31
   1b25a:	dd04      	ble.n	1b266 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x22>
   1b25c:	f240 1167 	movw	r1, #359	; 0x167
   1b260:	4b0a      	ldr	r3, [pc, #40]	; (1b28c <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x48>)
   1b262:	4a08      	ldr	r2, [pc, #32]	; (1b284 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x40>)
   1b264:	e7f5      	b.n	1b252 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0xe>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   1b266:	2301      	movs	r3, #1
   1b268:	408b      	lsls	r3, r1
   1b26a:	3b01      	subs	r3, #1
  return a & b;
   1b26c:	ea03 0200 	and.w	r2, r3, r0
  return a >> offset;
   1b270:	105b      	asrs	r3, r3, #1
  return a + b;
   1b272:	eb03 73d0 	add.w	r3, r3, r0, lsr #31
  return a >> offset;
   1b276:	4108      	asrs	r0, r1
}
   1b278:	429a      	cmp	r2, r3
   1b27a:	bfc8      	it	gt
   1b27c:	3001      	addgt	r0, #1
   1b27e:	bd08      	pop	{r3, pc}
   1b280:	00034912 	.word	0x00034912
   1b284:	00034920 	.word	0x00034920
   1b288:	00034975 	.word	0x00034975
   1b28c:	000349c1 	.word	0x000349c1

0001b290 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_>:
  return shifted_scale.raw();
}

inline void GetInvSqrtQuantizedMultiplierExp(int32 input, int reverse_shift,
                                             int32* output_inv_sqrt,
                                             int* output_shift) {
   1b290:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK_GE(input, 0);
   1b294:	2800      	cmp	r0, #0
                                             int* output_shift) {
   1b296:	4616      	mov	r6, r2
   1b298:	461d      	mov	r5, r3
   1b29a:	9101      	str	r1, [sp, #4]
  TFLITE_DCHECK_GE(input, 0);
   1b29c:	da01      	bge.n	1b2a2 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x12>
   1b29e:	f015 fd8c 	bl	30dba <abort>
  if (input <= 1) {
   1b2a2:	2801      	cmp	r0, #1
   1b2a4:	dc07      	bgt.n	1b2b6 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x26>
    // Handle the input value 1 separately to avoid overflow in that case
    // in the general computation below (b/143972021). Also handle 0 as if it
    // were a 1. 0 is an invalid input here (divide by zero) and 1 is a valid
    // but rare/unrealistic input value. We can expect both to occur in some
    // incompletely trained models, but probably not in fully trained models.
    *output_inv_sqrt = std::numeric_limits<std::int32_t>::max();
   1b2a6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1b2aa:	6013      	str	r3, [r2, #0]
    *output_shift = 0;
   1b2ac:	2300      	movs	r3, #0
   1b2ae:	602b      	str	r3, [r5, #0]
    *output_inv_sqrt <<= -*output_shift;
    *output_shift = 0;
  }
  // Convert right shift (right is positive) to left shift.
  *output_shift *= reverse_shift;
}
   1b2b0:	b003      	add	sp, #12
   1b2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  *output_shift = 11;
   1b2b6:	230b      	movs	r3, #11
   1b2b8:	602b      	str	r3, [r5, #0]
  while (input >= (1 << 29)) {
   1b2ba:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   1b2be:	682a      	ldr	r2, [r5, #0]
   1b2c0:	db03      	blt.n	1b2ca <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x3a>
    ++*output_shift;
   1b2c2:	3201      	adds	r2, #1
    input /= 4;
   1b2c4:	1080      	asrs	r0, r0, #2
    ++*output_shift;
   1b2c6:	602a      	str	r2, [r5, #0]
  while (input >= (1 << 29)) {
   1b2c8:	e7f7      	b.n	1b2ba <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x2a>
  return integer_input ? __builtin_clz(integer_input)
   1b2ca:	fab0 f380 	clz	r3, r0
      CountLeadingZeros(static_cast<uint32>(input)) - 1;
   1b2ce:	3b01      	subs	r3, #1
  const unsigned max_left_shift_bit_pairs = max_left_shift_bits / 2;
   1b2d0:	085b      	lsrs	r3, r3, #1
  const unsigned left_shift_bit_pairs = max_left_shift_bit_pairs - 1;
   1b2d2:	3b01      	subs	r3, #1
  *output_shift -= left_shift_bit_pairs;
   1b2d4:	1ad2      	subs	r2, r2, r3
  input <<= 2 * left_shift_bit_pairs;
   1b2d6:	005b      	lsls	r3, r3, #1
   1b2d8:	4098      	lsls	r0, r3
  TFLITE_DCHECK_GE(input, (1 << 27));
   1b2da:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
   1b2de:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  *output_shift -= left_shift_bit_pairs;
   1b2e2:	602a      	str	r2, [r5, #0]
  TFLITE_DCHECK_GE(input, (1 << 27));
   1b2e4:	d2db      	bcs.n	1b29e <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0xe>
};

template <int Exponent, typename IntegerType>
struct ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType, -1> {
  static IntegerType eval(IntegerType x) {
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
   1b2e6:	2101      	movs	r1, #1
   1b2e8:	4108      	asrs	r0, r1
   1b2ea:	f7ff ffab 	bl	1b244 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
   1b2ee:	2705      	movs	r7, #5
   1b2f0:	4682      	mov	sl, r0
  F3 x = F3::One();
   1b2f2:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
             : wide_shifted > max ? max
   1b2f6:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
   1b2fa:	f04f 0900 	mov.w	r9, #0
template <typename tRawType, int tIntegerBits_a, int tIntegerBits_b>
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
    FixedPoint<tRawType, tIntegerBits_a> a,
    FixedPoint<tRawType, tIntegerBits_b> b) {
  FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> c;
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   1b2fe:	4621      	mov	r1, r4
   1b300:	4620      	mov	r0, r4
   1b302:	f7ff ff67 	bl	1b1d4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
   1b306:	4621      	mov	r1, r4
   1b308:	f7ff ff64 	bl	1b1d4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  return a ? BitNot(zero) : zero;
   1b30c:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
   1b310:	da72      	bge.n	1b3f8 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x168>
   1b312:	f1b0 4f7e 	cmp.w	r0, #4261412864	; 0xfe000000
   1b316:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
   1b31a:	f04f 0100 	mov.w	r1, #0
   1b31e:	bfc8      	it	gt
   1b320:	f04f 0e00 	movgt.w	lr, #0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
   1b324:	ea4f 7ce0 	mov.w	ip, r0, asr #31
   1b328:	0182      	lsls	r2, r0, #6
   1b32a:	ea4f 138c 	mov.w	r3, ip, lsl #6
   1b32e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
             ? min
   1b332:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1b336:	f173 30ff 	sbcs.w	r0, r3, #4294967295	; 0xffffffff
   1b33a:	db62      	blt.n	1b402 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x172>
             : wide_shifted > max ? max
   1b33c:	4590      	cmp	r8, r2
   1b33e:	eb79 0003 	sbcs.w	r0, r9, r3
   1b342:	bfb8      	it	lt
   1b344:	f06f 4200 	mvnlt.w	r2, #2147483648	; 0x80000000
  return ~a;
   1b348:	ea6f 0b01 	mvn.w	fp, r1
  return a & b;
   1b34c:	ea0b 0202 	and.w	r2, fp, r2
   1b350:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
  return a ^ b;
   1b354:	ea82 0b0b 	eor.w	fp, r2, fp
  return ~a;
   1b358:	ea6f 020e 	mvn.w	r2, lr
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   1b35c:	4621      	mov	r1, r4
  return a & b;
   1b35e:	ea0b 0b02 	and.w	fp, fp, r2
   1b362:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   1b366:	f04f 50c0 	mov.w	r0, #402653184	; 0x18000000
  return a ^ b;
   1b36a:	ea8b 0b0e 	eor.w	fp, fp, lr
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   1b36e:	f7ff ff31 	bl	1b1d4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
   1b372:	4659      	mov	r1, fp
   1b374:	4604      	mov	r4, r0
   1b376:	4650      	mov	r0, sl
   1b378:	f7ff ff2c 	bl	1b1d4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  return a - b;
   1b37c:	1a24      	subs	r4, r4, r0
  return a ? BitNot(zero) : zero;
   1b37e:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   1b382:	da41      	bge.n	1b408 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x178>
   1b384:	f1b4 4f70 	cmp.w	r4, #4026531840	; 0xf0000000
   1b388:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   1b38c:	f04f 0e00 	mov.w	lr, #0
   1b390:	bfc8      	it	gt
   1b392:	f04f 0c00 	movgt.w	ip, #0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
   1b396:	17e1      	asrs	r1, r4, #31
   1b398:	00cb      	lsls	r3, r1, #3
   1b39a:	00e2      	lsls	r2, r4, #3
   1b39c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
             ? min
   1b3a0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1b3a4:	f173 31ff 	sbcs.w	r1, r3, #4294967295	; 0xffffffff
   1b3a8:	db33      	blt.n	1b412 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x182>
             : wide_shifted > max ? max
   1b3aa:	4590      	cmp	r8, r2
   1b3ac:	eb79 0103 	sbcs.w	r1, r9, r3
   1b3b0:	bfb8      	it	lt
   1b3b2:	f06f 4200 	mvnlt.w	r2, #2147483648	; 0x80000000
  return ~a;
   1b3b6:	ea6f 040e 	mvn.w	r4, lr
  return a & b;
   1b3ba:	4022      	ands	r2, r4
   1b3bc:	f02e 4400 	bic.w	r4, lr, #2147483648	; 0x80000000
  return a ^ b;
   1b3c0:	4054      	eors	r4, r2
  return ~a;
   1b3c2:	ea6f 020c 	mvn.w	r2, ip
  for (int i = 0; i < 5; i++) {
   1b3c6:	3f01      	subs	r7, #1
  return a & b;
   1b3c8:	ea04 0402 	and.w	r4, r4, r2
   1b3cc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  return a ^ b;
   1b3d0:	ea84 040c 	eor.w	r4, r4, ip
   1b3d4:	d193      	bne.n	1b2fe <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x6e>
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   1b3d6:	4910      	ldr	r1, [pc, #64]	; (1b418 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x188>)
   1b3d8:	4620      	mov	r0, r4
   1b3da:	f7ff fefb 	bl	1b1d4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  *output_inv_sqrt = x.raw();
   1b3de:	6030      	str	r0, [r6, #0]
  if (*output_shift < 0) {
   1b3e0:	682b      	ldr	r3, [r5, #0]
   1b3e2:	2b00      	cmp	r3, #0
    *output_inv_sqrt <<= -*output_shift;
   1b3e4:	bfbf      	itttt	lt
   1b3e6:	425b      	neglt	r3, r3
   1b3e8:	4098      	lsllt	r0, r3
   1b3ea:	6030      	strlt	r0, [r6, #0]
    *output_shift = 0;
   1b3ec:	602f      	strlt	r7, [r5, #0]
  *output_shift *= reverse_shift;
   1b3ee:	6829      	ldr	r1, [r5, #0]
   1b3f0:	9b01      	ldr	r3, [sp, #4]
   1b3f2:	434b      	muls	r3, r1
   1b3f4:	602b      	str	r3, [r5, #0]
   1b3f6:	e75b      	b.n	1b2b0 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x20>
  return a ? BitNot(zero) : zero;
   1b3f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b3fc:	f04f 0e00 	mov.w	lr, #0
   1b400:	e790      	b.n	1b324 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x94>
             ? min
   1b402:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1b406:	e79f      	b.n	1b348 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0xb8>
  return a ? BitNot(zero) : zero;
   1b408:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
   1b40c:	f04f 0c00 	mov.w	ip, #0
   1b410:	e7c1      	b.n	1b396 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x106>
             ? min
   1b412:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1b416:	e7ce      	b.n	1b3b6 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x126>
   1b418:	5a82799a 	.word	0x5a82799a

0001b41c <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1b41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b420:	ed2d 8b02 	vpush	{d8}
  return &context->tensors[node->inputs->data[index]];
   1b424:	680a      	ldr	r2, [r1, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1b426:	6883      	ldr	r3, [r0, #8]
   1b428:	6854      	ldr	r4, [r2, #4]
  return &context->tensors[node->outputs->data[index]];
   1b42a:	684a      	ldr	r2, [r1, #4]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1b42c:	4606      	mov	r6, r0
   1b42e:	6855      	ldr	r5, [r2, #4]
   1b430:	b093      	sub	sp, #76	; 0x4c
   1b432:	01aa      	lsls	r2, r5, #6
  if (output->type == kTfLiteFloat32) {
   1b434:	5c98      	ldrb	r0, [r3, r2]
  return &context->tensors[node->inputs->data[index]];
   1b436:	eb03 1484 	add.w	r4, r3, r4, lsl #6
   1b43a:	2801      	cmp	r0, #1
  return &context->tensors[node->outputs->data[index]];
   1b43c:	eb03 1585 	add.w	r5, r3, r5, lsl #6
   1b440:	d14f      	bne.n	1b4e2 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0xc6>
    TF_LITE_L2NORM(reference_ops);
   1b442:	4621      	mov	r1, r4
   1b444:	a806      	add	r0, sp, #24
   1b446:	f00c f8f9 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1b44a:	b104      	cbz	r4, 1b44e <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x32>
   1b44c:	6864      	ldr	r4, [r4, #4]
   1b44e:	4629      	mov	r1, r5
   1b450:	a80c      	add	r0, sp, #48	; 0x30
   1b452:	f00c f8f3 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
inline void L2Normalization(const tflite::L2NormalizationParams& op_params,
                            const RuntimeShape& input_shape,
                            const float* input_data,
                            const RuntimeShape& output_shape,
                            float* output_data, float epsilon = 1e-6) {
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   1b456:	9b06      	ldr	r3, [sp, #24]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1b458:	aa0c      	add	r2, sp, #48	; 0x30
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   1b45a:	3b01      	subs	r3, #1
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1b45c:	4619      	mov	r1, r3
   1b45e:	a806      	add	r0, sp, #24
   1b460:	9303      	str	r3, [sp, #12]
   1b462:	f010 fc28 	bl	2bcb6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   1b466:	9b03      	ldr	r3, [sp, #12]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1b468:	4680      	mov	r8, r0
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   1b46a:	4619      	mov	r1, r3
   1b46c:	aa0c      	add	r2, sp, #48	; 0x30
   1b46e:	a806      	add	r0, sp, #24
   1b470:	f00e ff54 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1b474:	f8d5 9004 	ldr.w	r9, [r5, #4]
   1b478:	2500      	movs	r5, #0
   1b47a:	4606      	mov	r6, r0
  for (int i = 0; i < outer_size; ++i) {
   1b47c:	46aa      	mov	sl, r5
      if (__a < __b)
   1b47e:	ed9f 8a3f 	vldr	s16, [pc, #252]	; 1b57c <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x160>
   1b482:	45d0      	cmp	r8, sl
   1b484:	dd43      	ble.n	1b50e <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0xf2>
   1b486:	eb04 0b85 	add.w	fp, r4, r5, lsl #2
   1b48a:	465a      	mov	r2, fp
    float squared_l2_norm = 0;
    for (int c = 0; c < depth; ++c) {
   1b48c:	2300      	movs	r3, #0
    float squared_l2_norm = 0;
   1b48e:	eddf 7a3c 	vldr	s15, [pc, #240]	; 1b580 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x164>
   1b492:	00af      	lsls	r7, r5, #2
    for (int c = 0; c < depth; ++c) {
   1b494:	429e      	cmp	r6, r3
   1b496:	dd05      	ble.n	1b4a4 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x88>
      const float val = input_data[depth * i + c];
   1b498:	ecb2 7a01 	vldmia	r2!, {s14}
    for (int c = 0; c < depth; ++c) {
   1b49c:	3301      	adds	r3, #1
      squared_l2_norm += val * val;
   1b49e:	eee7 7a07 	vfma.f32	s15, s14, s14
    for (int c = 0; c < depth; ++c) {
   1b4a2:	e7f7      	b.n	1b494 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x78>
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
   1b4a4:	ee17 0a90 	vmov	r0, s15
   1b4a8:	f007 fe68 	bl	2317c <sqrtf>
   1b4ac:	ee07 0a90 	vmov	s15, r0
	return __b;
   1b4b0:	eef4 7a48 	vcmp.f32	s15, s16
   1b4b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    }
    float l2_norm = std::sqrt(squared_l2_norm);
    l2_norm = std::max(l2_norm, epsilon);
    for (int c = 0; c < depth; ++c) {
   1b4b8:	f04f 0200 	mov.w	r2, #0
   1b4bc:	bf48      	it	mi
   1b4be:	eef0 7a48 	vmovmi.f32	s15, s16
   1b4c2:	eb09 0307 	add.w	r3, r9, r7
   1b4c6:	4296      	cmp	r6, r2
   1b4c8:	dd07      	ble.n	1b4da <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0xbe>
      output_data[depth * i + c] = input_data[depth * i + c] / l2_norm;
   1b4ca:	ecfb 6a01 	vldmia	fp!, {s13}
   1b4ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    for (int c = 0; c < depth; ++c) {
   1b4d2:	3201      	adds	r2, #1
      output_data[depth * i + c] = input_data[depth * i + c] / l2_norm;
   1b4d4:	eca3 7a01 	vstmia	r3!, {s14}
    for (int c = 0; c < depth; ++c) {
   1b4d8:	e7f5      	b.n	1b4c6 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0xaa>
  for (int i = 0; i < outer_size; ++i) {
   1b4da:	f10a 0a01 	add.w	sl, sl, #1
   1b4de:	4435      	add	r5, r6
   1b4e0:	e7cf      	b.n	1b482 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x66>
  } else if (output->type == kTfLiteUInt8) {
   1b4e2:	2803      	cmp	r0, #3
   1b4e4:	d11f      	bne.n	1b526 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x10a>
    TF_LITE_L2NORM(reference_ops);
   1b4e6:	6923      	ldr	r3, [r4, #16]
   1b4e8:	4621      	mov	r1, r4
   1b4ea:	a806      	add	r0, sp, #24
   1b4ec:	9305      	str	r3, [sp, #20]
   1b4ee:	f00c f8a5 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1b4f2:	6862      	ldr	r2, [r4, #4]
   1b4f4:	4629      	mov	r1, r5
   1b4f6:	a80c      	add	r0, sp, #48	; 0x30
   1b4f8:	9203      	str	r2, [sp, #12]
   1b4fa:	f00c f89f 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1b4fe:	686b      	ldr	r3, [r5, #4]
   1b500:	9a03      	ldr	r2, [sp, #12]
   1b502:	9300      	str	r3, [sp, #0]
   1b504:	a906      	add	r1, sp, #24
   1b506:	ab0c      	add	r3, sp, #48	; 0x30
   1b508:	a805      	add	r0, sp, #20
   1b50a:	f010 fc0a 	bl	2bd22 <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph>
   1b50e:	a80c      	add	r0, sp, #48	; 0x30
   1b510:	f00c f84f 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   1b514:	a806      	add	r0, sp, #24
   1b516:	f00c f84c 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   1b51a:	2000      	movs	r0, #0
}
   1b51c:	b013      	add	sp, #76	; 0x4c
   1b51e:	ecbd 8b02 	vpop	{d8}
   1b522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (output->type == kTfLiteInt8) {
   1b526:	2809      	cmp	r0, #9
   1b528:	d11e      	bne.n	1b568 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x14c>
    const auto input_shape = GetTensorShape(input);
   1b52a:	4621      	mov	r1, r4
   1b52c:	a806      	add	r0, sp, #24
   1b52e:	f00c f885 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    const auto output_shape = GetTensorShape(output);
   1b532:	4629      	mov	r1, r5
   1b534:	a80c      	add	r0, sp, #48	; 0x30
   1b536:	f00c f881 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    const int trailing_dim = input_shape.DimensionsCount() - 1;
   1b53a:	9906      	ldr	r1, [sp, #24]
        MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   1b53c:	aa0c      	add	r2, sp, #48	; 0x30
    const int trailing_dim = input_shape.DimensionsCount() - 1;
   1b53e:	3901      	subs	r1, #1
        MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   1b540:	460b      	mov	r3, r1
   1b542:	a806      	add	r0, sp, #24
   1b544:	9103      	str	r1, [sp, #12]
   1b546:	f00e fee9 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
        MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1b54a:	9903      	ldr	r1, [sp, #12]
        MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   1b54c:	4606      	mov	r6, r0
        MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1b54e:	aa0c      	add	r2, sp, #48	; 0x30
   1b550:	a806      	add	r0, sp, #24
   1b552:	f010 fbb0 	bl	2bcb6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
    reference_integer_ops::L2Normalization(input->params.zero_point, outer_size,
   1b556:	686b      	ldr	r3, [r5, #4]
        MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1b558:	4601      	mov	r1, r0
    reference_integer_ops::L2Normalization(input->params.zero_point, outer_size,
   1b55a:	9300      	str	r3, [sp, #0]
   1b55c:	4632      	mov	r2, r6
   1b55e:	6863      	ldr	r3, [r4, #4]
   1b560:	6920      	ldr	r0, [r4, #16]
   1b562:	f010 fc3c 	bl	2bdde <_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa>
   1b566:	e7d2      	b.n	1b50e <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0xf2>
    TF_LITE_KERNEL_LOG(context, "Output type is %s, requires float.",
   1b568:	6974      	ldr	r4, [r6, #20]
   1b56a:	f7f1 fbab 	bl	ccc4 <TfLiteTypeGetName>
   1b56e:	4905      	ldr	r1, [pc, #20]	; (1b584 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x168>)
   1b570:	4602      	mov	r2, r0
   1b572:	4630      	mov	r0, r6
   1b574:	47a0      	blx	r4
    return kTfLiteError;
   1b576:	2001      	movs	r0, #1
   1b578:	e7d0      	b.n	1b51c <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x100>
   1b57a:	bf00      	nop
   1b57c:	358637bd 	.word	0x358637bd
   1b580:	00000000 	.word	0x00000000
   1b584:	00035248 	.word	0x00035248

0001b588 <_ZN6tflite3ops5micro19Register_LOGICAL_OREv>:
}

}  // namespace
}  // namespace logical

TfLiteRegistration Register_LOGICAL_OR() {
   1b588:	b510      	push	{r4, lr}
   1b58a:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/logical::LogicalOrEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1b58c:	2220      	movs	r2, #32
   1b58e:	2100      	movs	r1, #0
   1b590:	f015 fc5d 	bl	30e4e <memset>
   1b594:	4b01      	ldr	r3, [pc, #4]	; (1b59c <_ZN6tflite3ops5micro19Register_LOGICAL_OREv+0x14>)
}
   1b596:	4620      	mov	r0, r4
          /*version=*/0};
   1b598:	60e3      	str	r3, [r4, #12]
}
   1b59a:	bd10      	pop	{r4, pc}
   1b59c:	0001b5b9 	.word	0x0001b5b9

0001b5a0 <_ZN6tflite3ops5micro20Register_LOGICAL_ANDEv>:

TfLiteRegistration Register_LOGICAL_AND() {
   1b5a0:	b510      	push	{r4, lr}
   1b5a2:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/logical::LogicalAndEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1b5a4:	2220      	movs	r2, #32
   1b5a6:	2100      	movs	r1, #0
   1b5a8:	f015 fc51 	bl	30e4e <memset>
   1b5ac:	4b01      	ldr	r3, [pc, #4]	; (1b5b4 <_ZN6tflite3ops5micro20Register_LOGICAL_ANDEv+0x14>)
}
   1b5ae:	4620      	mov	r0, r4
          /*version=*/0};
   1b5b0:	60e3      	str	r3, [r4, #12]
}
   1b5b2:	bd10      	pop	{r4, pc}
   1b5b4:	0001b5c5 	.word	0x0001b5c5

0001b5b8 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_113LogicalOrEvalEP13TfLiteContextP10TfLiteNode>:
  return LogicalImpl(context, node, LogicalOr);
   1b5b8:	4a01      	ldr	r2, [pc, #4]	; (1b5c0 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_113LogicalOrEvalEP13TfLiteContextP10TfLiteNode+0x8>)
   1b5ba:	f010 bd82 	b.w	2c0c2 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE>
   1b5be:	bf00      	nop
   1b5c0:	0002be95 	.word	0x0002be95

0001b5c4 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_114LogicalAndEvalEP13TfLiteContextP10TfLiteNode>:
  return LogicalImpl(context, node, LogicalAnd);
   1b5c4:	4a01      	ldr	r2, [pc, #4]	; (1b5cc <_ZN6tflite3ops5micro7logical12_GLOBAL__N_114LogicalAndEvalEP13TfLiteContextP10TfLiteNode+0x8>)
   1b5c6:	f010 bd7c 	b.w	2c0c2 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE>
   1b5ca:	bf00      	nop
   1b5cc:	0002be9d 	.word	0x0002be9d

0001b5d0 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf>:

namespace tflite {
namespace reference_ops {

inline void Logistic(const RuntimeShape& input_shape, const float* input_data,
                     const RuntimeShape& output_shape, float* output_data) {
   1b5d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b5d4:	461e      	mov	r6, r3
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   1b5d6:	f8d0 8000 	ldr.w	r8, [r0]
   1b5da:	6813      	ldr	r3, [r2, #0]
   1b5dc:	ed2d 8b04 	vpush	{d8-d9}
   1b5e0:	4598      	cmp	r8, r3
   1b5e2:	4604      	mov	r4, r0
   1b5e4:	460f      	mov	r7, r1
   1b5e6:	4691      	mov	r9, r2
   1b5e8:	d001      	beq.n	1b5ee <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x1e>
   1b5ea:	f015 fbe6 	bl	30dba <abort>
  for (int i = 0; i < dims_count; ++i) {
   1b5ee:	2500      	movs	r5, #0
   1b5f0:	45a8      	cmp	r8, r5
   1b5f2:	dd0c      	ble.n	1b60e <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x3e>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   1b5f4:	4629      	mov	r1, r5
   1b5f6:	4620      	mov	r0, r4
   1b5f8:	f00b ffe6 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   1b5fc:	4629      	mov	r1, r5
   1b5fe:	4682      	mov	sl, r0
   1b600:	4648      	mov	r0, r9
   1b602:	f00b ffe1 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   1b606:	4582      	cmp	sl, r0
   1b608:	d1ef      	bne.n	1b5ea <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x1a>
  for (int i = 0; i < dims_count; ++i) {
   1b60a:	3501      	adds	r5, #1
   1b60c:	e7f0      	b.n	1b5f0 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x20>
    for (int i = 0; i < size_; i++) {
   1b60e:	2300      	movs	r3, #0
    int buffer_size = 1;
   1b610:	f04f 0901 	mov.w	r9, #1
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   1b614:	f1b8 0f05 	cmp.w	r8, #5
   1b618:	bfcc      	ite	gt
   1b61a:	6864      	ldrgt	r4, [r4, #4]
   1b61c:	3404      	addle	r4, #4
    for (int i = 0; i < size_; i++) {
   1b61e:	4598      	cmp	r8, r3
   1b620:	dc1f      	bgt.n	1b662 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x92>
   1b622:	4634      	mov	r4, r6
  // optimized kernels. (check the definition of scalar_logistic_op<float>)

  for (int i = 0; i < flat_size; i++) {
    float val = input_data[i];
    float result;
    if (val > cutoff_upper) {
   1b624:	eddf 8a1c 	vldr	s17, [pc, #112]	; 1b698 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0xc8>
  for (int i = 0; i < flat_size; i++) {
   1b628:	2600      	movs	r6, #0
      result = 1.0f;
   1b62a:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    } else if (val < cutoff_lower) {
   1b62e:	eeba 9a02 	vmov.f32	s18, #162	; 0xc1100000 -9.0
  for (int i = 0; i < flat_size; i++) {
   1b632:	454e      	cmp	r6, r9
   1b634:	da2b      	bge.n	1b68e <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0xbe>
    float val = input_data[i];
   1b636:	ecf7 7a01 	vldmia	r7!, {s15}
    if (val > cutoff_upper) {
   1b63a:	eef4 7ae8 	vcmpe.f32	s15, s17
   1b63e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b642:	dc21      	bgt.n	1b688 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0xb8>
    } else if (val < cutoff_lower) {
   1b644:	eef4 7ac9 	vcmpe.f32	s15, s18
   1b648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b64c:	d50f      	bpl.n	1b66e <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x9e>
  { return __builtin_expf(__x); }
   1b64e:	ee17 0a90 	vmov	r0, s15
   1b652:	f007 fc31 	bl	22eb8 <expf>
   1b656:	ee07 0a90 	vmov	s15, r0
      result = std::exp(val);
    } else {
      result = 1.f / (1.f + std::exp(-val));
    }
    output_data[i] = result;
   1b65a:	ece4 7a01 	vstmia	r4!, {s15}
  for (int i = 0; i < flat_size; i++) {
   1b65e:	3601      	adds	r6, #1
   1b660:	e7e7      	b.n	1b632 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x62>
      buffer_size *= dims_data[i];
   1b662:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   1b666:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   1b668:	fb02 f909 	mul.w	r9, r2, r9
    for (int i = 0; i < size_; i++) {
   1b66c:	e7d7      	b.n	1b61e <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x4e>
   1b66e:	eef1 7a67 	vneg.f32	s15, s15
   1b672:	ee17 0a90 	vmov	r0, s15
   1b676:	f007 fc1f 	bl	22eb8 <expf>
      result = 1.f / (1.f + std::exp(-val));
   1b67a:	ee07 0a90 	vmov	s15, r0
   1b67e:	ee37 7a88 	vadd.f32	s14, s15, s16
   1b682:	eec8 7a07 	vdiv.f32	s15, s16, s14
   1b686:	e7e8      	b.n	1b65a <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x8a>
      result = 1.0f;
   1b688:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1b68c:	e7e5      	b.n	1b65a <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x8a>
  }
}
   1b68e:	ecbd 8b04 	vpop	{d8-d9}
   1b692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b696:	bf00      	nop
   1b698:	4184f3cf 	.word	0x4184f3cf

0001b69c <_ZN6tflite3ops5micro17Register_LOGISTICEv>:
  return kTfLiteOk;
}

}  // namespace activations

TfLiteRegistration Register_LOGISTIC() {
   1b69c:	b510      	push	{r4, lr}
   1b69e:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/activations::LogisticEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1b6a0:	2220      	movs	r2, #32
   1b6a2:	2100      	movs	r1, #0
   1b6a4:	f015 fbd3 	bl	30e4e <memset>
   1b6a8:	4b01      	ldr	r3, [pc, #4]	; (1b6b0 <_ZN6tflite3ops5micro17Register_LOGISTICEv+0x14>)
}
   1b6aa:	4620      	mov	r0, r4
          /*version=*/0};
   1b6ac:	60e3      	str	r3, [r4, #12]
}
   1b6ae:	bd10      	pop	{r4, pc}
   1b6b0:	0001b94d 	.word	0x0001b94d

0001b6b4 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>:
  std::int64_t sum = a64 + b64;
   1b6b4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1b6b8:	2300      	movs	r3, #0
   1b6ba:	1812      	adds	r2, r2, r0
   1b6bc:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
  std::int64_t sign = sum >= 0 ? 1 : -1;
   1b6c0:	1c59      	adds	r1, r3, #1
   1b6c2:	bf05      	ittet	eq
   1b6c4:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   1b6c8:	4611      	moveq	r1, r2
   1b6ca:	2101      	movne	r1, #1
   1b6cc:	4618      	moveq	r0, r3
   1b6ce:	bf18      	it	ne
   1b6d0:	2000      	movne	r0, #0

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
   1b6d2:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
  return static_cast<std::int32_t>((sum + sign) / 2);
   1b6d6:	1854      	adds	r4, r2, r1
   1b6d8:	eb43 0500 	adc.w	r5, r3, r0
   1b6dc:	0feb      	lsrs	r3, r5, #31
   1b6de:	18e4      	adds	r4, r4, r3
   1b6e0:	f145 0500 	adc.w	r5, r5, #0
   1b6e4:	ea4f 0854 	mov.w	r8, r4, lsr #1
   1b6e8:	ea48 78c5 	orr.w	r8, r8, r5, lsl #31
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   1b6ec:	4640      	mov	r0, r8
   1b6ee:	493b      	ldr	r1, [pc, #236]	; (1b7dc <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x128>)
   1b6f0:	f7ff fd70 	bl	1b1d4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  return a + b;
   1b6f4:	2503      	movs	r5, #3
   1b6f6:	f100 345a 	add.w	r4, r0, #1515870810	; 0x5a5a5a5a
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   1b6fa:	4621      	mov	r1, r4
   1b6fc:	4640      	mov	r0, r8
   1b6fe:	f7ff fd69 	bl	1b1d4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
   1b702:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   1b706:	4620      	mov	r0, r4
   1b708:	f7ff fd64 	bl	1b1d4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  return a ? BitNot(zero) : zero;
   1b70c:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   1b710:	da56      	bge.n	1b7c0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x10c>
   1b712:	f1b0 4f60 	cmp.w	r0, #3758096384	; 0xe0000000
   1b716:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b71a:	f04f 0c00 	mov.w	ip, #0
   1b71e:	bfc8      	it	gt
   1b720:	2100      	movgt	r1, #0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
   1b722:	ea4f 7be0 	mov.w	fp, r0, asr #31
   1b726:	0082      	lsls	r2, r0, #2
   1b728:	ea4f 038b 	mov.w	r3, fp, lsl #2
   1b72c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
             ? min
   1b730:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1b734:	f173 30ff 	sbcs.w	r0, r3, #4294967295	; 0xffffffff
   1b738:	db46      	blt.n	1b7c8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x114>
             : wide_shifted > max ? max
   1b73a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
   1b73e:	f04f 0b00 	mov.w	fp, #0
   1b742:	4592      	cmp	sl, r2
   1b744:	eb7b 0003 	sbcs.w	r0, fp, r3
   1b748:	bfb8      	it	lt
   1b74a:	f06f 4200 	mvnlt.w	r2, #2147483648	; 0x80000000
  return ~a;
   1b74e:	ea6f 030c 	mvn.w	r3, ip
  return a & b;
   1b752:	401a      	ands	r2, r3
  return ~a;
   1b754:	43cb      	mvns	r3, r1
  return a & b;
   1b756:	f02c 4c00 	bic.w	ip, ip, #2147483648	; 0x80000000
  return a ^ b;
   1b75a:	ea82 020c 	eor.w	r2, r2, ip
  return a & b;
   1b75e:	401a      	ands	r2, r3
   1b760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  return a ^ b;
   1b764:	404a      	eors	r2, r1
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
  for (int i = 0; i < 3; i++) {
   1b766:	3d01      	subs	r5, #1
  return a + b;
   1b768:	4414      	add	r4, r2
  for (int i = 0; i < 3; i++) {
   1b76a:	d1c6      	bne.n	1b6fa <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x46>
  return a ? BitNot(zero) : zero;
   1b76c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   1b770:	da2d      	bge.n	1b7ce <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x11a>
   1b772:	f1b4 4f40 	cmp.w	r4, #3221225472	; 0xc0000000
   1b776:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b77a:	462a      	mov	r2, r5
   1b77c:	bfc8      	it	gt
   1b77e:	2000      	movgt	r0, #0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
   1b780:	1926      	adds	r6, r4, r4
   1b782:	ea4f 75e4 	mov.w	r5, r4, asr #31
   1b786:	eb45 0705 	adc.w	r7, r5, r5
             ? min
   1b78a:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
   1b78e:	f177 33ff 	sbcs.w	r3, r7, #4294967295	; 0xffffffff
   1b792:	db20      	blt.n	1b7d6 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x122>
             : wide_shifted > max ? max
   1b794:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   1b798:	2500      	movs	r5, #0
   1b79a:	42b4      	cmp	r4, r6
   1b79c:	eb75 0307 	sbcs.w	r3, r5, r7
   1b7a0:	bfac      	ite	ge
   1b7a2:	4633      	movge	r3, r6
   1b7a4:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
  return ~a;
   1b7a8:	43d6      	mvns	r6, r2
  return a & b;
   1b7aa:	401e      	ands	r6, r3
  return ~a;
   1b7ac:	43c3      	mvns	r3, r0
  return a & b;
   1b7ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
  return a ^ b;
   1b7b2:	4056      	eors	r6, r2
  return a & b;
   1b7b4:	401e      	ands	r6, r3
   1b7b6:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
}
   1b7ba:	4070      	eors	r0, r6
   1b7bc:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
  return a ? BitNot(zero) : zero;
   1b7c0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   1b7c4:	2100      	movs	r1, #0
   1b7c6:	e7ac      	b.n	1b722 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x6e>
             ? min
   1b7c8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1b7cc:	e7bf      	b.n	1b74e <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x9a>
  return a ? BitNot(zero) : zero;
   1b7ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b7d2:	4628      	mov	r0, r5
   1b7d4:	e7d4      	b.n	1b780 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0xcc>
             ? min
   1b7d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1b7da:	e7e5      	b.n	1b7a8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0xf4>
   1b7dc:	c3c3c3c4 	.word	0xc3c3c3c4

0001b7e0 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
   1b7e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b7e4:	4604      	mov	r4, r0
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
   1b7e6:	4814      	ldr	r0, [pc, #80]	; (1b838 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_+0x58>)
   1b7e8:	f010 fcc3 	bl	2c172 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   1b7ec:	4606      	mov	r6, r0
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
   1b7ee:	4813      	ldr	r0, [pc, #76]	; (1b83c <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_+0x5c>)
   1b7f0:	f010 fcbf 	bl	2c172 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
  return a + b;
   1b7f4:	f104 5480 	add.w	r4, r4, #268435456	; 0x10000000
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
   1b7f8:	4680      	mov	r8, r0
  F x2 = x * x;
   1b7fa:	4621      	mov	r1, r4
   1b7fc:	4620      	mov	r0, r4
   1b7fe:	f010 fcbd 	bl	2c17c <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  F x3 = x2 * x;
   1b802:	4621      	mov	r1, r4
  F x2 = x * x;
   1b804:	4605      	mov	r5, r0
  F x3 = x2 * x;
   1b806:	f010 fcb9 	bl	2c17c <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  F x4 = x2 * x2;
   1b80a:	4629      	mov	r1, r5
  F x3 = x2 * x;
   1b80c:	4607      	mov	r7, r0
  F x4 = x2 * x2;
   1b80e:	4628      	mov	r0, r5
   1b810:	f010 fcb4 	bl	2c17c <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
   1b814:	2102      	movs	r1, #2
   1b816:	f7ff fd15 	bl	1b244 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
      SaturatingRoundingMultiplyByPOT<-1>(
   1b81a:	4641      	mov	r1, r8
   1b81c:	4438      	add	r0, r7
   1b81e:	f010 fcad 	bl	2c17c <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
   1b822:	2101      	movs	r1, #1
   1b824:	4428      	add	r0, r5
   1b826:	f7ff fd0d 	bl	1b244 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return AddSaturatingIf16Bit(
   1b82a:	1821      	adds	r1, r4, r0
   1b82c:	4630      	mov	r0, r6
   1b82e:	f010 fca5 	bl	2c17c <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
}
   1b832:	4430      	add	r0, r6
   1b834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b838:	70f5a894 	.word	0x70f5a894
   1b83c:	2aaaaaab 	.word	0x2aaaaaab

0001b840 <_ZN8gemmlowp22exp_on_negative_valuesIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
   1b840:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return a - b;
   1b844:	f040 447e 	orr.w	r4, r0, #4261412864	; 0xfe000000
FixedPoint<tRawType, 0> exp_on_negative_values(
   1b848:	4605      	mov	r5, r0
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
   1b84a:	0120      	lsls	r0, r4, #4
   1b84c:	f7ff ffc8 	bl	1b7e0 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_>
   1b850:	4682      	mov	sl, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
   1b852:	4838      	ldr	r0, [pc, #224]	; (1b934 <_ZN8gemmlowp22exp_on_negative_valuesIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0xf4>)
   1b854:	f010 fc8d 	bl	2c172 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   1b858:	4601      	mov	r1, r0
   1b85a:	4650      	mov	r0, sl
   1b85c:	f010 fc8e 	bl	2c17c <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a - b;
   1b860:	1b64      	subs	r4, r4, r5
  return a ? BitNot(zero) : zero;
   1b862:	f3c4 6940 	ubfx	r9, r4, #25, #1
   1b866:	f1c9 0700 	rsb	r7, r9, #0
  return a & b;
   1b86a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   1b86e:	4007      	ands	r7, r0
   1b870:	ea09 000a 	and.w	r0, r9, sl
  return a ^ b;
   1b874:	ea87 0800 	eor.w	r8, r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
   1b878:	482f      	ldr	r0, [pc, #188]	; (1b938 <_ZN8gemmlowp22exp_on_negative_valuesIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0xf8>)
   1b87a:	f010 fc7a 	bl	2c172 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   1b87e:	4601      	mov	r1, r0
   1b880:	4640      	mov	r0, r8
   1b882:	f010 fc7b 	bl	2c17c <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   1b886:	f3c4 6780 	ubfx	r7, r4, #26, #1
   1b88a:	427e      	negs	r6, r7
  return a & b;
   1b88c:	3f01      	subs	r7, #1
   1b88e:	4030      	ands	r0, r6
   1b890:	ea07 0708 	and.w	r7, r7, r8
  return a ^ b;
   1b894:	4047      	eors	r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
   1b896:	4829      	ldr	r0, [pc, #164]	; (1b93c <_ZN8gemmlowp22exp_on_negative_valuesIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0xfc>)
   1b898:	f010 fc6b 	bl	2c172 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   1b89c:	4601      	mov	r1, r0
   1b89e:	4638      	mov	r0, r7
   1b8a0:	f010 fc6c 	bl	2c17c <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   1b8a4:	f3c4 6bc0 	ubfx	fp, r4, #27, #1
   1b8a8:	f1cb 0a00 	rsb	sl, fp, #0
  return a & b;
   1b8ac:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   1b8b0:	ea00 000a 	and.w	r0, r0, sl
   1b8b4:	ea0b 0b07 	and.w	fp, fp, r7
  return a ^ b;
   1b8b8:	ea80 0b0b 	eor.w	fp, r0, fp
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
   1b8bc:	4820      	ldr	r0, [pc, #128]	; (1b940 <_ZN8gemmlowp22exp_on_negative_valuesIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x100>)
   1b8be:	f010 fc58 	bl	2c172 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   1b8c2:	4601      	mov	r1, r0
   1b8c4:	4658      	mov	r0, fp
   1b8c6:	f010 fc59 	bl	2c17c <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   1b8ca:	f3c4 7900 	ubfx	r9, r4, #28, #1
   1b8ce:	f1c9 0800 	rsb	r8, r9, #0
  return a & b;
   1b8d2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   1b8d6:	ea00 0008 	and.w	r0, r0, r8
   1b8da:	ea09 090b 	and.w	r9, r9, fp
  return a ^ b;
   1b8de:	ea80 0909 	eor.w	r9, r0, r9
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
   1b8e2:	4818      	ldr	r0, [pc, #96]	; (1b944 <_ZN8gemmlowp22exp_on_negative_valuesIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x104>)
   1b8e4:	f010 fc45 	bl	2c172 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   1b8e8:	4601      	mov	r1, r0
   1b8ea:	4648      	mov	r0, r9
   1b8ec:	f010 fc46 	bl	2c17c <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   1b8f0:	f3c4 7740 	ubfx	r7, r4, #29, #1
   1b8f4:	427e      	negs	r6, r7
  return a & b;
   1b8f6:	3f01      	subs	r7, #1
   1b8f8:	4030      	ands	r0, r6
   1b8fa:	ea07 0709 	and.w	r7, r7, r9
  return a ^ b;
   1b8fe:	4047      	eors	r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
   1b900:	4811      	ldr	r0, [pc, #68]	; (1b948 <_ZN8gemmlowp22exp_on_negative_valuesIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x108>)
   1b902:	f010 fc36 	bl	2c172 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   1b906:	4601      	mov	r1, r0
   1b908:	4638      	mov	r0, r7
   1b90a:	f010 fc37 	bl	2c17c <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   1b90e:	f3c4 7480 	ubfx	r4, r4, #30, #1
   1b912:	4263      	negs	r3, r4
  return a & b;
   1b914:	4018      	ands	r0, r3
  return a ? BitNot(zero) : zero;
   1b916:	fab5 f385 	clz	r3, r5
  return a & b;
   1b91a:	3c01      	subs	r4, #1
   1b91c:	403c      	ands	r4, r7
  return a ? BitNot(zero) : zero;
   1b91e:	095b      	lsrs	r3, r3, #5
  return a ^ b;
   1b920:	4044      	eors	r4, r0
  return a & b;
   1b922:	1e58      	subs	r0, r3, #1
  return a ? BitNot(zero) : zero;
   1b924:	425b      	negs	r3, r3
  return a & b;
   1b926:	4020      	ands	r0, r4
   1b928:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
}
   1b92c:	4058      	eors	r0, r3
   1b92e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b932:	bf00      	nop
   1b934:	63afbe7b 	.word	0x63afbe7b
   1b938:	4da2cbf2 	.word	0x4da2cbf2
   1b93c:	2f16ac6c 	.word	0x2f16ac6c
   1b940:	1152aaa4 	.word	0x1152aaa4
   1b944:	02582ab7 	.word	0x02582ab7
   1b948:	000afe11 	.word	0x000afe11

0001b94c <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->inputs->data[index]];
   1b94c:	680b      	ldr	r3, [r1, #0]
TfLiteStatus LogisticEval(TfLiteContext* context, TfLiteNode* node) {
   1b94e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b952:	685f      	ldr	r7, [r3, #4]
  return &context->tensors[node->outputs->data[index]];
   1b954:	684b      	ldr	r3, [r1, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1b956:	6885      	ldr	r5, [r0, #8]
   1b958:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->inputs->data[index]];
   1b95a:	ea4f 1a87 	mov.w	sl, r7, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1b95e:	ea4f 1883 	mov.w	r8, r3, lsl #6
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
   1b962:	f815 200a 	ldrb.w	r2, [r5, sl]
   1b966:	eb05 1983 	add.w	r9, r5, r3, lsl #6
   1b96a:	f815 3008 	ldrb.w	r3, [r5, r8]
TfLiteStatus LogisticEval(TfLiteContext* context, TfLiteNode* node) {
   1b96e:	4604      	mov	r4, r0
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
   1b970:	4293      	cmp	r3, r2
TfLiteStatus LogisticEval(TfLiteContext* context, TfLiteNode* node) {
   1b972:	b097      	sub	sp, #92	; 0x5c
  return &context->tensors[node->inputs->data[index]];
   1b974:	eb05 1787 	add.w	r7, r5, r7, lsl #6
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
   1b978:	d034      	beq.n	1b9e4 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x98>
   1b97a:	f8d0 b014 	ldr.w	fp, [r0, #20]
   1b97e:	4610      	mov	r0, r2
   1b980:	f7f1 f9a0 	bl	ccc4 <TfLiteTypeGetName>
   1b984:	4606      	mov	r6, r0
   1b986:	f815 0008 	ldrb.w	r0, [r5, r8]
   1b98a:	f7f1 f99b 	bl	ccc4 <TfLiteTypeGetName>
   1b98e:	4b58      	ldr	r3, [pc, #352]	; (1baf0 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1a4>)
   1b990:	e9cd 6002 	strd	r6, r0, [sp, #8]
   1b994:	9301      	str	r3, [sp, #4]
   1b996:	4b57      	ldr	r3, [pc, #348]	; (1baf4 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1a8>)
   1b998:	4620      	mov	r0, r4
   1b99a:	9300      	str	r3, [sp, #0]
   1b99c:	4a56      	ldr	r2, [pc, #344]	; (1baf8 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1ac>)
   1b99e:	232f      	movs	r3, #47	; 0x2f
   1b9a0:	4956      	ldr	r1, [pc, #344]	; (1bafc <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1b0>)
   1b9a2:	47d8      	blx	fp
  if (input->type == kTfLiteFloat32) {
   1b9a4:	f815 600a 	ldrb.w	r6, [r5, sl]
   1b9a8:	2e01      	cmp	r6, #1
   1b9aa:	d15c      	bne.n	1ba66 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x11a>
    switch (output->type) {
   1b9ac:	f815 3008 	ldrb.w	r3, [r5, r8]
   1b9b0:	2b01      	cmp	r3, #1
   1b9b2:	d146      	bne.n	1ba42 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0xf6>
            GetTensorShape(input), GetTensorData<float>(input),
   1b9b4:	4639      	mov	r1, r7
   1b9b6:	a80a      	add	r0, sp, #40	; 0x28
   1b9b8:	f00b fe40 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1b9bc:	687c      	ldr	r4, [r7, #4]
            GetTensorShape(output), GetTensorData<float>(output));
   1b9be:	4649      	mov	r1, r9
   1b9c0:	a810      	add	r0, sp, #64	; 0x40
   1b9c2:	f00b fe3b 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
        reference_ops::Logistic(
   1b9c6:	4621      	mov	r1, r4
   1b9c8:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1b9cc:	aa10      	add	r2, sp, #64	; 0x40
   1b9ce:	a80a      	add	r0, sp, #40	; 0x28
   1b9d0:	f7ff fdfe 	bl	1b5d0 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf>
            GetTensorShape(output), GetTensorData<float>(output));
   1b9d4:	a810      	add	r0, sp, #64	; 0x40
   1b9d6:	f00b fdec 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
            GetTensorShape(input), GetTensorData<float>(input),
   1b9da:	a80a      	add	r0, sp, #40	; 0x28
   1b9dc:	f00b fde9 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
        return kTfLiteOk;
   1b9e0:	2600      	movs	r6, #0
   1b9e2:	e03c      	b.n	1ba5e <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x112>
  if (input->type == kTfLiteInt8) {
   1b9e4:	2b09      	cmp	r3, #9
   1b9e6:	d1dd      	bne.n	1b9a4 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x58>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point,
   1b9e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1b9ec:	f113 0f80 	cmn.w	r3, #128	; 0x80
   1b9f0:	d00d      	beq.n	1ba0e <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0xc2>
   1b9f2:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   1b9f6:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1b9fa:	4b41      	ldr	r3, [pc, #260]	; (1bb00 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1b4>)
   1b9fc:	4a3e      	ldr	r2, [pc, #248]	; (1baf8 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1ac>)
   1b9fe:	9301      	str	r3, [sp, #4]
   1ba00:	4b40      	ldr	r3, [pc, #256]	; (1bb04 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1b8>)
   1ba02:	4941      	ldr	r1, [pc, #260]	; (1bb08 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1bc>)
   1ba04:	9300      	str	r3, [sp, #0]
   1ba06:	6946      	ldr	r6, [r0, #20]
   1ba08:	2331      	movs	r3, #49	; 0x31
   1ba0a:	47b0      	blx	r6
   1ba0c:	e7ca      	b.n	1b9a4 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x58>
        static_cast<double>(input->params.scale) *
   1ba0e:	68f8      	ldr	r0, [r7, #12]
   1ba10:	f7f0 fd7a 	bl	c508 <__aeabi_f2d>
    const double input_real_multiplier =
   1ba14:	4b3d      	ldr	r3, [pc, #244]	; (1bb0c <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1c0>)
   1ba16:	2200      	movs	r2, #0
   1ba18:	f7f4 fd48 	bl	104ac <__aeabi_dmul>
    const double q = std::frexp(input_real_multiplier, &data->input_left_shift);
   1ba1c:	aa09      	add	r2, sp, #36	; 0x24
   1ba1e:	f006 ffef 	bl	22a00 <frexp>
    data->input_multiplier = static_cast<int32_t>(TfLiteRound(q * (1ll << 31)));
   1ba22:	2200      	movs	r2, #0
   1ba24:	4b3a      	ldr	r3, [pc, #232]	; (1bb10 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1c4>)
   1ba26:	f7f4 fd41 	bl	104ac <__aeabi_dmul>
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
   1ba2a:	f007 f84f 	bl	22acc <round>
   1ba2e:	f7f4 ffd7 	bl	109e0 <__aeabi_d2iz>
        CalculateInputRadius(kInputIntegerBits, data->input_left_shift, 31);
   1ba32:	221f      	movs	r2, #31
    data->input_multiplier = static_cast<int32_t>(TfLiteRound(q * (1ll << 31)));
   1ba34:	9008      	str	r0, [sp, #32]
        CalculateInputRadius(kInputIntegerBits, data->input_left_shift, 31);
   1ba36:	9909      	ldr	r1, [sp, #36]	; 0x24
   1ba38:	2004      	movs	r0, #4
   1ba3a:	f014 fb0e 	bl	3005a <_ZN6tflite20CalculateInputRadiusEiii>
    data->input_range_radius =
   1ba3e:	9007      	str	r0, [sp, #28]
   1ba40:	e7b0      	b.n	1b9a4 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x58>
        TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
   1ba42:	4630      	mov	r0, r6
   1ba44:	6967      	ldr	r7, [r4, #20]
   1ba46:	f7f1 f93d 	bl	ccc4 <TfLiteTypeGetName>
   1ba4a:	9004      	str	r0, [sp, #16]
   1ba4c:	f815 0008 	ldrb.w	r0, [r5, r8]
   1ba50:	f7f1 f938 	bl	ccc4 <TfLiteTypeGetName>
   1ba54:	9a04      	ldr	r2, [sp, #16]
   1ba56:	4603      	mov	r3, r0
   1ba58:	492e      	ldr	r1, [pc, #184]	; (1bb14 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1c8>)
   1ba5a:	4620      	mov	r0, r4
   1ba5c:	47b8      	blx	r7
}
   1ba5e:	4630      	mov	r0, r6
   1ba60:	b017      	add	sp, #92	; 0x5c
   1ba62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (input->type == kTfLiteInt8) {
   1ba66:	2e09      	cmp	r6, #9
   1ba68:	d131      	bne.n	1bace <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x182>
    switch (output->type) {
   1ba6a:	f815 3008 	ldrb.w	r3, [r5, r8]
   1ba6e:	2b09      	cmp	r3, #9
   1ba70:	d12d      	bne.n	1bace <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x182>
        reference_integer_ops::Logistic(
   1ba72:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
  int64_t count = 1;
   1ba76:	2401      	movs	r4, #1
   1ba78:	2500      	movs	r5, #0
  for (int i = 0; i < dims->size; ++i) {
   1ba7a:	f04f 0c00 	mov.w	ip, #0
   1ba7e:	68be      	ldr	r6, [r7, #8]
  int64_t count = 1;
   1ba80:	e9cd 4504 	strd	r4, r5, [sp, #16]
            input->params.zero_point, data.input_range_radius,
   1ba84:	6938      	ldr	r0, [r7, #16]
        reference_integer_ops::Logistic(
   1ba86:	9b09      	ldr	r3, [sp, #36]	; 0x24
  for (int i = 0; i < dims->size; ++i) {
   1ba88:	f856 8b04 	ldr.w	r8, [r6], #4
   1ba8c:	45e0      	cmp	r8, ip
   1ba8e:	dd14      	ble.n	1baba <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x16e>
    count *= dims->data[i];
   1ba90:	f856 eb04 	ldr.w	lr, [r6], #4
   1ba94:	9c04      	ldr	r4, [sp, #16]
   1ba96:	ea4f 7bee 	mov.w	fp, lr, asr #31
   1ba9a:	fb04 fa0b 	mul.w	sl, r4, fp
   1ba9e:	9c05      	ldr	r4, [sp, #20]
  for (int i = 0; i < dims->size; ++i) {
   1baa0:	f10c 0c01 	add.w	ip, ip, #1
    count *= dims->data[i];
   1baa4:	fb0e aa04 	mla	sl, lr, r4, sl
   1baa8:	9c04      	ldr	r4, [sp, #16]
   1baaa:	fba4 450e 	umull	r4, r5, r4, lr
   1baae:	e9cd 4504 	strd	r4, r5, [sp, #16]
   1bab2:	9c05      	ldr	r4, [sp, #20]
   1bab4:	4454      	add	r4, sl
   1bab6:	9405      	str	r4, [sp, #20]
  for (int i = 0; i < dims->size; ++i) {
   1bab8:	e7e8      	b.n	1ba8c <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x140>
   1baba:	f8d9 5004 	ldr.w	r5, [r9, #4]
   1babe:	9c04      	ldr	r4, [sp, #16]
   1bac0:	9502      	str	r5, [sp, #8]
   1bac2:	687d      	ldr	r5, [r7, #4]
   1bac4:	9400      	str	r4, [sp, #0]
   1bac6:	9501      	str	r5, [sp, #4]
   1bac8:	f010 fb5c 	bl	2c184 <_ZN6tflite21reference_integer_ops8LogisticEiiiiiPKaPa>
   1bacc:	e788      	b.n	1b9e0 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x94>
    TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
   1bace:	4630      	mov	r0, r6
   1bad0:	6967      	ldr	r7, [r4, #20]
   1bad2:	f7f1 f8f7 	bl	ccc4 <TfLiteTypeGetName>
   1bad6:	9004      	str	r0, [sp, #16]
   1bad8:	f815 0008 	ldrb.w	r0, [r5, r8]
   1badc:	f7f1 f8f2 	bl	ccc4 <TfLiteTypeGetName>
   1bae0:	9a04      	ldr	r2, [sp, #16]
   1bae2:	4603      	mov	r3, r0
   1bae4:	490b      	ldr	r1, [pc, #44]	; (1bb14 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1c8>)
   1bae6:	4620      	mov	r0, r4
   1bae8:	47b8      	blx	r7
    return kTfLiteError;
   1baea:	2601      	movs	r6, #1
   1baec:	e7b7      	b.n	1ba5e <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x112>
   1baee:	bf00      	nop
   1baf0:	00035387 	.word	0x00035387
   1baf4:	0003539f 	.word	0x0003539f
   1baf8:	0003526b 	.word	0x0003526b
   1bafc:	00034ab7 	.word	0x00034ab7
   1bb00:	00035648 	.word	0x00035648
   1bb04:	00035593 	.word	0x00035593
   1bb08:	00034a7c 	.word	0x00034a7c
   1bb0c:	41a00000 	.word	0x41a00000
   1bb10:	41e00000 	.word	0x41e00000
   1bb14:	0003501f 	.word	0x0003501f

0001bb18 <_ZN6tflite3ops5micro16Register_MAXIMUMEv>:
  return kTfLiteOk;
}

}  // namespace maximum_minimum

TfLiteRegistration Register_MAXIMUM() {
   1bb18:	b510      	push	{r4, lr}
   1bb1a:	4604      	mov	r4, r0
          maximum_minimum::Eval<maximum_minimum::kReference,
                                maximum_minimum::MaximumOp>,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1bb1c:	2220      	movs	r2, #32
   1bb1e:	2100      	movs	r1, #0
   1bb20:	f015 f995 	bl	30e4e <memset>
   1bb24:	4b01      	ldr	r3, [pc, #4]	; (1bb2c <_ZN6tflite3ops5micro16Register_MAXIMUMEv+0x14>)
}
   1bb26:	4620      	mov	r0, r4
          /*version=*/0};
   1bb28:	60e3      	str	r3, [r4, #12]
}
   1bb2a:	bd10      	pop	{r4, pc}
   1bb2c:	0001bb49 	.word	0x0001bb49

0001bb30 <_ZN6tflite3ops5micro16Register_MINIMUMEv>:

TfLiteRegistration Register_MINIMUM() {
   1bb30:	b510      	push	{r4, lr}
   1bb32:	4604      	mov	r4, r0
          maximum_minimum::Eval<maximum_minimum::kReference,
                                maximum_minimum::MinimumOp>,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1bb34:	2220      	movs	r2, #32
   1bb36:	2100      	movs	r1, #0
   1bb38:	f015 f989 	bl	30e4e <memset>
   1bb3c:	4b01      	ldr	r3, [pc, #4]	; (1bb44 <_ZN6tflite3ops5micro16Register_MINIMUMEv+0x14>)
}
   1bb3e:	4620      	mov	r0, r4
          /*version=*/0};
   1bb40:	60e3      	str	r3, [r4, #12]
}
   1bb42:	bd10      	pop	{r4, pc}
   1bb44:	0001bcf1 	.word	0x0001bcf1

0001bb48 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode>:
    input1 = GetInput(context, node, kInputTensor1);
   1bb48:	680b      	ldr	r3, [r1, #0]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1bb4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  return &context->tensors[node->inputs->data[index]];
   1bb4e:	685c      	ldr	r4, [r3, #4]
   1bb50:	689d      	ldr	r5, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
   1bb52:	684b      	ldr	r3, [r1, #4]
    input1 = GetInput(context, node, kInputTensor1);
   1bb54:	f8d0 8008 	ldr.w	r8, [r0, #8]
   1bb58:	685e      	ldr	r6, [r3, #4]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1bb5a:	4607      	mov	r7, r0
   1bb5c:	ea4f 1986 	mov.w	r9, r6, lsl #6
    switch (op_context.output->type) {
   1bb60:	f818 0009 	ldrb.w	r0, [r8, r9]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1bb64:	b097      	sub	sp, #92	; 0x5c
   1bb66:	1e43      	subs	r3, r0, #1
  return &context->tensors[node->inputs->data[index]];
   1bb68:	eb08 1484 	add.w	r4, r8, r4, lsl #6
   1bb6c:	eb08 1585 	add.w	r5, r8, r5, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1bb70:	eb08 1686 	add.w	r6, r8, r6, lsl #6
   1bb74:	2b08      	cmp	r3, #8
   1bb76:	f200 80a4 	bhi.w	1bcc2 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x17a>
   1bb7a:	e8df f003 	tbb	[pc, r3]
   1bb7e:	6805      	.short	0x6805
   1bb80:	a2a2852e 	.word	0xa2a2852e
   1bb84:	a2a2      	.short	0xa2a2
   1bb86:	4b          	.byte	0x4b
   1bb87:	00          	.byte	0x00
  reference_ops::MaximumMinimumBroadcastSlow(
   1bb88:	4621      	mov	r1, r4
   1bb8a:	a804      	add	r0, sp, #16
   1bb8c:	f00b fd56 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bb90:	b104      	cbz	r4, 1bb94 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x4c>
   1bb92:	6864      	ldr	r4, [r4, #4]
   1bb94:	4629      	mov	r1, r5
   1bb96:	a80a      	add	r0, sp, #40	; 0x28
   1bb98:	f00b fd50 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bb9c:	b105      	cbz	r5, 1bba0 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x58>
   1bb9e:	686d      	ldr	r5, [r5, #4]
   1bba0:	af10      	add	r7, sp, #64	; 0x40
   1bba2:	4631      	mov	r1, r6
   1bba4:	4638      	mov	r0, r7
   1bba6:	f00b fd49 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bbaa:	4b4b      	ldr	r3, [pc, #300]	; (1bcd8 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x190>)
   1bbac:	4621      	mov	r1, r4
   1bbae:	9302      	str	r3, [sp, #8]
   1bbb0:	6873      	ldr	r3, [r6, #4]
   1bbb2:	aa0a      	add	r2, sp, #40	; 0x28
   1bbb4:	e9cd 7300 	strd	r7, r3, [sp]
   1bbb8:	a804      	add	r0, sp, #16
   1bbba:	462b      	mov	r3, r5
   1bbbc:	f010 fc63 	bl	2c486 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
      GetTensorShape(op_context.output),
   1bbc0:	4638      	mov	r0, r7
   1bbc2:	f00b fcf6 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(op_context.input2),
   1bbc6:	a80a      	add	r0, sp, #40	; 0x28
   1bbc8:	f00b fcf3 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(op_context.input1),
   1bbcc:	a804      	add	r0, sp, #16
   1bbce:	f00b fcf0 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   1bbd2:	2000      	movs	r0, #0
}
   1bbd4:	b017      	add	sp, #92	; 0x5c
   1bbd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  reference_ops::MaximumMinimumBroadcastSlow(
   1bbda:	4621      	mov	r1, r4
   1bbdc:	a804      	add	r0, sp, #16
   1bbde:	f00b fd2d 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bbe2:	b104      	cbz	r4, 1bbe6 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x9e>
   1bbe4:	6864      	ldr	r4, [r4, #4]
   1bbe6:	4629      	mov	r1, r5
   1bbe8:	a80a      	add	r0, sp, #40	; 0x28
   1bbea:	f00b fd27 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bbee:	b105      	cbz	r5, 1bbf2 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xaa>
   1bbf0:	686d      	ldr	r5, [r5, #4]
   1bbf2:	af10      	add	r7, sp, #64	; 0x40
   1bbf4:	4631      	mov	r1, r6
   1bbf6:	4638      	mov	r0, r7
   1bbf8:	f00b fd20 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bbfc:	4b37      	ldr	r3, [pc, #220]	; (1bcdc <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x194>)
   1bbfe:	4621      	mov	r1, r4
   1bc00:	9302      	str	r3, [sp, #8]
   1bc02:	6873      	ldr	r3, [r6, #4]
   1bc04:	aa0a      	add	r2, sp, #40	; 0x28
   1bc06:	e9cd 7300 	strd	r7, r3, [sp]
   1bc0a:	a804      	add	r0, sp, #16
   1bc0c:	462b      	mov	r3, r5
   1bc0e:	f010 fcec 	bl	2c5ea <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
   1bc12:	e7d5      	b.n	1bbc0 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x78>
   1bc14:	4621      	mov	r1, r4
   1bc16:	a804      	add	r0, sp, #16
   1bc18:	f00b fd10 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bc1c:	b104      	cbz	r4, 1bc20 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xd8>
   1bc1e:	6864      	ldr	r4, [r4, #4]
   1bc20:	4629      	mov	r1, r5
   1bc22:	a80a      	add	r0, sp, #40	; 0x28
   1bc24:	f00b fd0a 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bc28:	b105      	cbz	r5, 1bc2c <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xe4>
   1bc2a:	686d      	ldr	r5, [r5, #4]
   1bc2c:	af10      	add	r7, sp, #64	; 0x40
   1bc2e:	4631      	mov	r1, r6
   1bc30:	4638      	mov	r0, r7
   1bc32:	f00b fd03 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bc36:	4b2a      	ldr	r3, [pc, #168]	; (1bce0 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x198>)
   1bc38:	4621      	mov	r1, r4
   1bc3a:	9302      	str	r3, [sp, #8]
   1bc3c:	6873      	ldr	r3, [r6, #4]
   1bc3e:	aa0a      	add	r2, sp, #40	; 0x28
   1bc40:	e9cd 7300 	strd	r7, r3, [sp]
   1bc44:	a804      	add	r0, sp, #16
   1bc46:	462b      	mov	r3, r5
   1bc48:	f010 fd7b 	bl	2c742 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
   1bc4c:	e7b8      	b.n	1bbc0 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x78>
   1bc4e:	4621      	mov	r1, r4
   1bc50:	a804      	add	r0, sp, #16
   1bc52:	f00b fcf3 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bc56:	b104      	cbz	r4, 1bc5a <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x112>
   1bc58:	6864      	ldr	r4, [r4, #4]
   1bc5a:	4629      	mov	r1, r5
   1bc5c:	a80a      	add	r0, sp, #40	; 0x28
   1bc5e:	f00b fced 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bc62:	b105      	cbz	r5, 1bc66 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x11e>
   1bc64:	686d      	ldr	r5, [r5, #4]
   1bc66:	af10      	add	r7, sp, #64	; 0x40
   1bc68:	4631      	mov	r1, r6
   1bc6a:	4638      	mov	r0, r7
   1bc6c:	f00b fce6 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bc70:	4b1c      	ldr	r3, [pc, #112]	; (1bce4 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x19c>)
   1bc72:	4621      	mov	r1, r4
   1bc74:	9302      	str	r3, [sp, #8]
   1bc76:	6873      	ldr	r3, [r6, #4]
   1bc78:	aa0a      	add	r2, sp, #40	; 0x28
   1bc7a:	e9cd 7300 	strd	r7, r3, [sp]
   1bc7e:	a804      	add	r0, sp, #16
   1bc80:	462b      	mov	r3, r5
   1bc82:	f010 fe0a 	bl	2c89a <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
   1bc86:	e79b      	b.n	1bbc0 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x78>
   1bc88:	4621      	mov	r1, r4
   1bc8a:	a804      	add	r0, sp, #16
   1bc8c:	f00b fcd6 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bc90:	b104      	cbz	r4, 1bc94 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x14c>
   1bc92:	6864      	ldr	r4, [r4, #4]
   1bc94:	4629      	mov	r1, r5
   1bc96:	a80a      	add	r0, sp, #40	; 0x28
   1bc98:	f00b fcd0 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bc9c:	b105      	cbz	r5, 1bca0 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x158>
   1bc9e:	686d      	ldr	r5, [r5, #4]
   1bca0:	af10      	add	r7, sp, #64	; 0x40
   1bca2:	4631      	mov	r1, r6
   1bca4:	4638      	mov	r0, r7
   1bca6:	f00b fcc9 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bcaa:	4b0f      	ldr	r3, [pc, #60]	; (1bce8 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x1a0>)
   1bcac:	4621      	mov	r1, r4
   1bcae:	9302      	str	r3, [sp, #8]
   1bcb0:	6873      	ldr	r3, [r6, #4]
   1bcb2:	aa0a      	add	r2, sp, #40	; 0x28
   1bcb4:	e9cd 7300 	strd	r7, r3, [sp]
   1bcb8:	a804      	add	r0, sp, #16
   1bcba:	462b      	mov	r3, r5
   1bcbc:	f010 fea1 	bl	2ca02 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
   1bcc0:	e77e      	b.n	1bbc0 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x78>
        TF_LITE_KERNEL_LOG(context,
   1bcc2:	697c      	ldr	r4, [r7, #20]
   1bcc4:	f7f0 fffe 	bl	ccc4 <TfLiteTypeGetName>
   1bcc8:	f818 3009 	ldrb.w	r3, [r8, r9]
   1bccc:	4602      	mov	r2, r0
   1bcce:	4907      	ldr	r1, [pc, #28]	; (1bcec <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x1a4>)
   1bcd0:	4638      	mov	r0, r7
   1bcd2:	47a0      	blx	r4
        return kTfLiteError;
   1bcd4:	2001      	movs	r0, #1
   1bcd6:	e77d      	b.n	1bbd4 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x8c>
   1bcd8:	0002c25f 	.word	0x0002c25f
   1bcdc:	0002c279 	.word	0x0002c279
   1bce0:	0002c281 	.word	0x0002c281
   1bce4:	0002c289 	.word	0x0002c289
   1bce8:	0002c291 	.word	0x0002c291
   1bcec:	00035295 	.word	0x00035295

0001bcf0 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode>:
    input1 = GetInput(context, node, kInputTensor1);
   1bcf0:	680b      	ldr	r3, [r1, #0]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1bcf2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  return &context->tensors[node->inputs->data[index]];
   1bcf6:	685c      	ldr	r4, [r3, #4]
   1bcf8:	689d      	ldr	r5, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
   1bcfa:	684b      	ldr	r3, [r1, #4]
    input1 = GetInput(context, node, kInputTensor1);
   1bcfc:	f8d0 8008 	ldr.w	r8, [r0, #8]
   1bd00:	685e      	ldr	r6, [r3, #4]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1bd02:	4607      	mov	r7, r0
   1bd04:	ea4f 1986 	mov.w	r9, r6, lsl #6
    switch (op_context.output->type) {
   1bd08:	f818 0009 	ldrb.w	r0, [r8, r9]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1bd0c:	b097      	sub	sp, #92	; 0x5c
   1bd0e:	1e43      	subs	r3, r0, #1
  return &context->tensors[node->inputs->data[index]];
   1bd10:	eb08 1484 	add.w	r4, r8, r4, lsl #6
   1bd14:	eb08 1585 	add.w	r5, r8, r5, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1bd18:	eb08 1686 	add.w	r6, r8, r6, lsl #6
   1bd1c:	2b08      	cmp	r3, #8
   1bd1e:	f200 80a4 	bhi.w	1be6a <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x17a>
   1bd22:	e8df f003 	tbb	[pc, r3]
   1bd26:	6805      	.short	0x6805
   1bd28:	a2a2852e 	.word	0xa2a2852e
   1bd2c:	a2a2      	.short	0xa2a2
   1bd2e:	4b          	.byte	0x4b
   1bd2f:	00          	.byte	0x00
  reference_ops::MaximumMinimumBroadcastSlow(
   1bd30:	4621      	mov	r1, r4
   1bd32:	a804      	add	r0, sp, #16
   1bd34:	f00b fc82 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bd38:	b104      	cbz	r4, 1bd3c <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x4c>
   1bd3a:	6864      	ldr	r4, [r4, #4]
   1bd3c:	4629      	mov	r1, r5
   1bd3e:	a80a      	add	r0, sp, #40	; 0x28
   1bd40:	f00b fc7c 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bd44:	b105      	cbz	r5, 1bd48 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x58>
   1bd46:	686d      	ldr	r5, [r5, #4]
   1bd48:	af10      	add	r7, sp, #64	; 0x40
   1bd4a:	4631      	mov	r1, r6
   1bd4c:	4638      	mov	r0, r7
   1bd4e:	f00b fc75 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bd52:	4b4b      	ldr	r3, [pc, #300]	; (1be80 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x190>)
   1bd54:	4621      	mov	r1, r4
   1bd56:	9302      	str	r3, [sp, #8]
   1bd58:	6873      	ldr	r3, [r6, #4]
   1bd5a:	aa0a      	add	r2, sp, #40	; 0x28
   1bd5c:	e9cd 7300 	strd	r7, r3, [sp]
   1bd60:	a804      	add	r0, sp, #16
   1bd62:	462b      	mov	r3, r5
   1bd64:	f010 fb8f 	bl	2c486 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
      GetTensorShape(op_context.output),
   1bd68:	4638      	mov	r0, r7
   1bd6a:	f00b fc22 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(op_context.input2),
   1bd6e:	a80a      	add	r0, sp, #40	; 0x28
   1bd70:	f00b fc1f 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(op_context.input1),
   1bd74:	a804      	add	r0, sp, #16
   1bd76:	f00b fc1c 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   1bd7a:	2000      	movs	r0, #0
}
   1bd7c:	b017      	add	sp, #92	; 0x5c
   1bd7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  reference_ops::MaximumMinimumBroadcastSlow(
   1bd82:	4621      	mov	r1, r4
   1bd84:	a804      	add	r0, sp, #16
   1bd86:	f00b fc59 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bd8a:	b104      	cbz	r4, 1bd8e <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x9e>
   1bd8c:	6864      	ldr	r4, [r4, #4]
   1bd8e:	4629      	mov	r1, r5
   1bd90:	a80a      	add	r0, sp, #40	; 0x28
   1bd92:	f00b fc53 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bd96:	b105      	cbz	r5, 1bd9a <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xaa>
   1bd98:	686d      	ldr	r5, [r5, #4]
   1bd9a:	af10      	add	r7, sp, #64	; 0x40
   1bd9c:	4631      	mov	r1, r6
   1bd9e:	4638      	mov	r0, r7
   1bda0:	f00b fc4c 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bda4:	4b37      	ldr	r3, [pc, #220]	; (1be84 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x194>)
   1bda6:	4621      	mov	r1, r4
   1bda8:	9302      	str	r3, [sp, #8]
   1bdaa:	6873      	ldr	r3, [r6, #4]
   1bdac:	aa0a      	add	r2, sp, #40	; 0x28
   1bdae:	e9cd 7300 	strd	r7, r3, [sp]
   1bdb2:	a804      	add	r0, sp, #16
   1bdb4:	462b      	mov	r3, r5
   1bdb6:	f010 fc18 	bl	2c5ea <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
   1bdba:	e7d5      	b.n	1bd68 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x78>
   1bdbc:	4621      	mov	r1, r4
   1bdbe:	a804      	add	r0, sp, #16
   1bdc0:	f00b fc3c 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bdc4:	b104      	cbz	r4, 1bdc8 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xd8>
   1bdc6:	6864      	ldr	r4, [r4, #4]
   1bdc8:	4629      	mov	r1, r5
   1bdca:	a80a      	add	r0, sp, #40	; 0x28
   1bdcc:	f00b fc36 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bdd0:	b105      	cbz	r5, 1bdd4 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xe4>
   1bdd2:	686d      	ldr	r5, [r5, #4]
   1bdd4:	af10      	add	r7, sp, #64	; 0x40
   1bdd6:	4631      	mov	r1, r6
   1bdd8:	4638      	mov	r0, r7
   1bdda:	f00b fc2f 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bdde:	4b2a      	ldr	r3, [pc, #168]	; (1be88 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x198>)
   1bde0:	4621      	mov	r1, r4
   1bde2:	9302      	str	r3, [sp, #8]
   1bde4:	6873      	ldr	r3, [r6, #4]
   1bde6:	aa0a      	add	r2, sp, #40	; 0x28
   1bde8:	e9cd 7300 	strd	r7, r3, [sp]
   1bdec:	a804      	add	r0, sp, #16
   1bdee:	462b      	mov	r3, r5
   1bdf0:	f010 fca7 	bl	2c742 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
   1bdf4:	e7b8      	b.n	1bd68 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x78>
   1bdf6:	4621      	mov	r1, r4
   1bdf8:	a804      	add	r0, sp, #16
   1bdfa:	f00b fc1f 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bdfe:	b104      	cbz	r4, 1be02 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x112>
   1be00:	6864      	ldr	r4, [r4, #4]
   1be02:	4629      	mov	r1, r5
   1be04:	a80a      	add	r0, sp, #40	; 0x28
   1be06:	f00b fc19 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1be0a:	b105      	cbz	r5, 1be0e <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x11e>
   1be0c:	686d      	ldr	r5, [r5, #4]
   1be0e:	af10      	add	r7, sp, #64	; 0x40
   1be10:	4631      	mov	r1, r6
   1be12:	4638      	mov	r0, r7
   1be14:	f00b fc12 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1be18:	4b1c      	ldr	r3, [pc, #112]	; (1be8c <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x19c>)
   1be1a:	4621      	mov	r1, r4
   1be1c:	9302      	str	r3, [sp, #8]
   1be1e:	6873      	ldr	r3, [r6, #4]
   1be20:	aa0a      	add	r2, sp, #40	; 0x28
   1be22:	e9cd 7300 	strd	r7, r3, [sp]
   1be26:	a804      	add	r0, sp, #16
   1be28:	462b      	mov	r3, r5
   1be2a:	f010 fd36 	bl	2c89a <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
   1be2e:	e79b      	b.n	1bd68 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x78>
   1be30:	4621      	mov	r1, r4
   1be32:	a804      	add	r0, sp, #16
   1be34:	f00b fc02 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1be38:	b104      	cbz	r4, 1be3c <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x14c>
   1be3a:	6864      	ldr	r4, [r4, #4]
   1be3c:	4629      	mov	r1, r5
   1be3e:	a80a      	add	r0, sp, #40	; 0x28
   1be40:	f00b fbfc 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1be44:	b105      	cbz	r5, 1be48 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x158>
   1be46:	686d      	ldr	r5, [r5, #4]
   1be48:	af10      	add	r7, sp, #64	; 0x40
   1be4a:	4631      	mov	r1, r6
   1be4c:	4638      	mov	r0, r7
   1be4e:	f00b fbf5 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1be52:	4b0f      	ldr	r3, [pc, #60]	; (1be90 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x1a0>)
   1be54:	4621      	mov	r1, r4
   1be56:	9302      	str	r3, [sp, #8]
   1be58:	6873      	ldr	r3, [r6, #4]
   1be5a:	aa0a      	add	r2, sp, #40	; 0x28
   1be5c:	e9cd 7300 	strd	r7, r3, [sp]
   1be60:	a804      	add	r0, sp, #16
   1be62:	462b      	mov	r3, r5
   1be64:	f010 fdcd 	bl	2ca02 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
   1be68:	e77e      	b.n	1bd68 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x78>
        TF_LITE_KERNEL_LOG(context,
   1be6a:	697c      	ldr	r4, [r7, #20]
   1be6c:	f7f0 ff2a 	bl	ccc4 <TfLiteTypeGetName>
   1be70:	f818 3009 	ldrb.w	r3, [r8, r9]
   1be74:	4602      	mov	r2, r0
   1be76:	4907      	ldr	r1, [pc, #28]	; (1be94 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x1a4>)
   1be78:	4638      	mov	r0, r7
   1be7a:	47a0      	blx	r4
        return kTfLiteError;
   1be7c:	2001      	movs	r0, #1
   1be7e:	e77d      	b.n	1bd7c <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x8c>
   1be80:	0002c2ad 	.word	0x0002c2ad
   1be84:	0002c2c9 	.word	0x0002c2c9
   1be88:	0002c2d1 	.word	0x0002c2d1
   1be8c:	0002c2d9 	.word	0x0002c2d9
   1be90:	0002c2e1 	.word	0x0002c2e1
   1be94:	00035295 	.word	0x00035295

0001be98 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE>:
  int32_t output_multiplier;
  int output_shift;
};

TfLiteStatus CalculateOpData(TfLiteContext* context, TfLiteNode* node,
                             TfLiteMulParams* params, OpData* data) {
   1be98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be9c:	4699      	mov	r9, r3
  const TfLiteTensor* input1 = GetInput(context, node, kInput1Tensor);
   1be9e:	680b      	ldr	r3, [r1, #0]
                             TfLiteMulParams* params, OpData* data) {
   1bea0:	4694      	mov	ip, r2
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   1bea2:	681a      	ldr	r2, [r3, #0]
   1bea4:	4606      	mov	r6, r0
  const TfLiteTensor* input2 = GetInput(context, node, kInput2Tensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);
   1bea6:	2a02      	cmp	r2, #2
                             TfLiteMulParams* params, OpData* data) {
   1bea8:	b085      	sub	sp, #20
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);
   1beaa:	d010      	beq.n	1bece <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x36>
   1beac:	2302      	movs	r3, #2
   1beae:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1beb2:	4b3e      	ldr	r3, [pc, #248]	; (1bfac <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x114>)
   1beb4:	9301      	str	r3, [sp, #4]
   1beb6:	4b3e      	ldr	r3, [pc, #248]	; (1bfb0 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x118>)
   1beb8:	9300      	str	r3, [sp, #0]
   1beba:	2331      	movs	r3, #49	; 0x31
   1bebc:	6944      	ldr	r4, [r0, #20]
   1bebe:	4a3d      	ldr	r2, [pc, #244]	; (1bfb4 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x11c>)
   1bec0:	493d      	ldr	r1, [pc, #244]	; (1bfb8 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x120>)
   1bec2:	47a0      	blx	r4
   1bec4:	2401      	movs	r4, #1
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
                       &data->output_shift);
  }

  return kTfLiteOk;
}
   1bec6:	4620      	mov	r0, r4
   1bec8:	b005      	add	sp, #20
   1beca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
   1bece:	684a      	ldr	r2, [r1, #4]
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   1bed0:	6814      	ldr	r4, [r2, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   1bed2:	2c01      	cmp	r4, #1
   1bed4:	d009      	beq.n	1beea <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x52>
   1bed6:	2501      	movs	r5, #1
   1bed8:	4b38      	ldr	r3, [pc, #224]	; (1bfbc <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x124>)
   1beda:	e9cd 4502 	strd	r4, r5, [sp, #8]
   1bede:	9301      	str	r3, [sp, #4]
   1bee0:	4b37      	ldr	r3, [pc, #220]	; (1bfc0 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x128>)
   1bee2:	9300      	str	r3, [sp, #0]
   1bee4:	6944      	ldr	r4, [r0, #20]
   1bee6:	2332      	movs	r3, #50	; 0x32
   1bee8:	e7e9      	b.n	1bebe <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x26>
  return &context->tensors[node->inputs->data[index]];
   1beea:	6859      	ldr	r1, [r3, #4]
   1beec:	689b      	ldr	r3, [r3, #8]
  const TfLiteTensor* input1 = GetInput(context, node, kInput1Tensor);
   1beee:	6885      	ldr	r5, [r0, #8]
   1bef0:	ea4f 1b83 	mov.w	fp, r3, lsl #6
   1bef4:	0188      	lsls	r0, r1, #6
  TF_LITE_ENSURE_TYPES_EQ(context, input1->type, input2->type);
   1bef6:	5c28      	ldrb	r0, [r5, r0]
   1bef8:	eb05 1a83 	add.w	sl, r5, r3, lsl #6
   1befc:	f815 300b 	ldrb.w	r3, [r5, fp]
   1bf00:	eb05 1881 	add.w	r8, r5, r1, lsl #6
   1bf04:	4283      	cmp	r3, r0
   1bf06:	d014      	beq.n	1bf32 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x9a>
   1bf08:	f8d6 8014 	ldr.w	r8, [r6, #20]
   1bf0c:	f7f0 feda 	bl	ccc4 <TfLiteTypeGetName>
   1bf10:	4607      	mov	r7, r0
   1bf12:	f815 000b 	ldrb.w	r0, [r5, fp]
   1bf16:	f7f0 fed5 	bl	ccc4 <TfLiteTypeGetName>
   1bf1a:	4b2a      	ldr	r3, [pc, #168]	; (1bfc4 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x12c>)
   1bf1c:	e9cd 7002 	strd	r7, r0, [sp, #8]
   1bf20:	9301      	str	r3, [sp, #4]
   1bf22:	4b29      	ldr	r3, [pc, #164]	; (1bfc8 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x130>)
   1bf24:	4630      	mov	r0, r6
   1bf26:	9300      	str	r3, [sp, #0]
   1bf28:	4a22      	ldr	r2, [pc, #136]	; (1bfb4 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x11c>)
   1bf2a:	2334      	movs	r3, #52	; 0x34
   1bf2c:	4927      	ldr	r1, [pc, #156]	; (1bfcc <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x134>)
   1bf2e:	47c0      	blx	r8
   1bf30:	e7c9      	b.n	1bec6 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x2e>
  return &context->tensors[node->outputs->data[index]];
   1bf32:	6857      	ldr	r7, [r2, #4]
   1bf34:	01bb      	lsls	r3, r7, #6
  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
   1bf36:	5ceb      	ldrb	r3, [r5, r3]
   1bf38:	eb05 1787 	add.w	r7, r5, r7, lsl #6
   1bf3c:	2b03      	cmp	r3, #3
   1bf3e:	d001      	beq.n	1bf44 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0xac>
   1bf40:	2b09      	cmp	r3, #9
   1bf42:	d130      	bne.n	1bfa6 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x10e>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   1bf44:	f109 0304 	add.w	r3, r9, #4
   1bf48:	9300      	str	r3, [sp, #0]
   1bf4a:	463a      	mov	r2, r7
   1bf4c:	464b      	mov	r3, r9
   1bf4e:	4630      	mov	r0, r6
   1bf50:	f89c 1000 	ldrb.w	r1, [ip]
   1bf54:	f005 f884 	bl	21060 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
   1bf58:	4604      	mov	r4, r0
   1bf5a:	2800      	cmp	r0, #0
   1bf5c:	d1b3      	bne.n	1bec6 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x2e>
    double real_multiplier = static_cast<double>(input1->params.scale) *
   1bf5e:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1bf62:	f7f0 fad1 	bl	c508 <__aeabi_f2d>
   1bf66:	4680      	mov	r8, r0
                             static_cast<double>(input2->params.scale) /
   1bf68:	f8da 000c 	ldr.w	r0, [sl, #12]
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
   1bf6c:	f109 060c 	add.w	r6, r9, #12
   1bf70:	f109 0508 	add.w	r5, r9, #8
    double real_multiplier = static_cast<double>(input1->params.scale) *
   1bf74:	4689      	mov	r9, r1
                             static_cast<double>(input2->params.scale) /
   1bf76:	f7f0 fac7 	bl	c508 <__aeabi_f2d>
   1bf7a:	4602      	mov	r2, r0
   1bf7c:	460b      	mov	r3, r1
    double real_multiplier = static_cast<double>(input1->params.scale) *
   1bf7e:	4640      	mov	r0, r8
   1bf80:	4649      	mov	r1, r9
   1bf82:	f7f4 fa93 	bl	104ac <__aeabi_dmul>
   1bf86:	4680      	mov	r8, r0
                             static_cast<double>(output->params.scale);
   1bf88:	68f8      	ldr	r0, [r7, #12]
    double real_multiplier = static_cast<double>(input1->params.scale) *
   1bf8a:	4689      	mov	r9, r1
                             static_cast<double>(output->params.scale);
   1bf8c:	f7f0 fabc 	bl	c508 <__aeabi_f2d>
   1bf90:	4602      	mov	r2, r0
   1bf92:	460b      	mov	r3, r1
    double real_multiplier = static_cast<double>(input1->params.scale) *
   1bf94:	4640      	mov	r0, r8
   1bf96:	4649      	mov	r1, r9
   1bf98:	f7f4 fbb2 	bl	10700 <__aeabi_ddiv>
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
   1bf9c:	4633      	mov	r3, r6
   1bf9e:	462a      	mov	r2, r5
   1bfa0:	f004 ffb8 	bl	20f14 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
   1bfa4:	e78f      	b.n	1bec6 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x2e>
  return kTfLiteOk;
   1bfa6:	2400      	movs	r4, #0
   1bfa8:	e78d      	b.n	1bec6 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x2e>
   1bfaa:	bf00      	nop
   1bfac:	000353ec 	.word	0x000353ec
   1bfb0:	00034a96 	.word	0x00034a96
   1bfb4:	000352c7 	.word	0x000352c7
   1bfb8:	00034a7c 	.word	0x00034a7c
   1bfbc:	00035814 	.word	0x00035814
   1bfc0:	00034aa6 	.word	0x00034aa6
   1bfc4:	000352ec 	.word	0x000352ec
   1bfc8:	000352f9 	.word	0x000352f9
   1bfcc:	00034ab7 	.word	0x00034ab7

0001bfd0 <_ZN6tflite3ops5micro12Register_MULEv>:

  return kTfLiteOk;
}
}  // namespace mul

TfLiteRegistration Register_MUL() {
   1bfd0:	b510      	push	{r4, lr}
   1bfd2:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/mul::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1bfd4:	2220      	movs	r2, #32
   1bfd6:	2100      	movs	r1, #0
   1bfd8:	f014 ff39 	bl	30e4e <memset>
   1bfdc:	4b01      	ldr	r3, [pc, #4]	; (1bfe4 <_ZN6tflite3ops5micro12Register_MULEv+0x14>)
}
   1bfde:	4620      	mov	r0, r4
          /*version=*/0};
   1bfe0:	60e3      	str	r3, [r4, #12]
}
   1bfe2:	bd10      	pop	{r4, pc}
   1bfe4:	0001c129 	.word	0x0001c129

0001bfe8 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_>:
               TfLiteTensor* output) {
   1bfe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bfec:	ed2d 8b02 	vpush	{d8}
  CalculateActivationRange(params->activation, &output_activation_min,
   1bff0:	7813      	ldrb	r3, [r2, #0]
               TfLiteTensor* output) {
   1bff2:	b0b0      	sub	sp, #192	; 0xc0
  if (activation == kTfLiteActRelu) {
   1bff4:	2b01      	cmp	r3, #1
   1bff6:	9e3a      	ldr	r6, [sp, #232]	; 0xe8
   1bff8:	e9dd 5438 	ldrd	r5, r4, [sp, #224]	; 0xe0
   1bffc:	d053      	beq.n	1c0a6 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0xbe>
  } else if (activation == kTfLiteActRelu6) {
   1bffe:	2b03      	cmp	r3, #3
   1c000:	d056      	beq.n	1c0b0 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0xc8>
    *activation_max = std::numeric_limits<T>::max();
   1c002:	ed9f 7a46 	vldr	s14, [pc, #280]	; 1c11c <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x134>
   1c006:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1c00a:	2b02      	cmp	r3, #2
   1c00c:	eddf 6a44 	vldr	s13, [pc, #272]	; 1c120 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x138>
   1c010:	fe47 7a87 	vseleq.f32	s15, s15, s14
   1c014:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   1c018:	fe07 7a26 	vseleq.f32	s14, s14, s13
      GetTensorShape(input1), GetTensorShape(input2), &op_params);
   1c01c:	af10      	add	r7, sp, #64	; 0x40
   1c01e:	4629      	mov	r1, r5
   1c020:	a80a      	add	r0, sp, #40	; 0x28
  params->float_activation_min = min;
   1c022:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
  params->float_activation_max = max;
   1c026:	edcd 7a24 	vstr	s15, [sp, #144]	; 0x90
   1c02a:	f00b fb07 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1c02e:	4621      	mov	r1, r4
   1c030:	4638      	mov	r0, r7
   1c032:	f00b fb03 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  bool need_broadcast = reference_ops::ProcessBroadcastShapes(
   1c036:	4639      	mov	r1, r7
   1c038:	aa16      	add	r2, sp, #88	; 0x58
   1c03a:	a80a      	add	r0, sp, #40	; 0x28
   1c03c:	f00b fc75 	bl	2792a <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>
   1c040:	4680      	mov	r8, r0
      GetTensorShape(input1), GetTensorShape(input2), &op_params);
   1c042:	4638      	mov	r0, r7
   1c044:	f00b fab5 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   1c048:	a80a      	add	r0, sp, #40	; 0x28
   1c04a:	f00b fab2 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
    TF_LITE_MUL(BroadcastMul4DSlow);
   1c04e:	4629      	mov	r1, r5
   1c050:	a804      	add	r0, sp, #16
  if (need_broadcast) {
   1c052:	f1b8 0f00 	cmp.w	r8, #0
   1c056:	d02e      	beq.n	1c0b6 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0xce>
    TF_LITE_MUL(BroadcastMul4DSlow);
   1c058:	f00b faf0 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1c05c:	b105      	cbz	r5, 1c060 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x78>
   1c05e:	686d      	ldr	r5, [r5, #4]
   1c060:	4621      	mov	r1, r4
   1c062:	a80a      	add	r0, sp, #40	; 0x28
   1c064:	f00b faea 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1c068:	b104      	cbz	r4, 1c06c <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x84>
   1c06a:	6864      	ldr	r4, [r4, #4]
   1c06c:	4631      	mov	r1, r6
   1c06e:	4638      	mov	r0, r7
   1c070:	f00b fae4 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1c074:	b106      	cbz	r6, 1c078 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x90>
   1c076:	6876      	ldr	r6, [r6, #4]
   1c078:	462a      	mov	r2, r5
   1c07a:	e9cd 7601 	strd	r7, r6, [sp, #4]
   1c07e:	9400      	str	r4, [sp, #0]
   1c080:	ab0a      	add	r3, sp, #40	; 0x28
   1c082:	a904      	add	r1, sp, #16
   1c084:	a816      	add	r0, sp, #88	; 0x58
   1c086:	f010 fd38 	bl	2cafa <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>
    TF_LITE_MUL(Mul);
   1c08a:	4638      	mov	r0, r7
   1c08c:	f00b fa91 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   1c090:	a80a      	add	r0, sp, #40	; 0x28
   1c092:	f00b fa8e 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   1c096:	a804      	add	r0, sp, #16
   1c098:	f00b fa8b 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   1c09c:	b030      	add	sp, #192	; 0xc0
   1c09e:	ecbd 8b02 	vpop	{d8}
   1c0a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *activation_max = std::numeric_limits<T>::max();
   1c0a6:	eddf 7a1d 	vldr	s15, [pc, #116]	; 1c11c <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x134>
    *activation_min = 0;
   1c0aa:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 1c124 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x13c>
   1c0ae:	e7b5      	b.n	1c01c <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x34>
    *activation_max = 6;
   1c0b0:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
   1c0b4:	e7f9      	b.n	1c0aa <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0xc2>
    TF_LITE_MUL(Mul);
   1c0b6:	f00b fac1 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1c0ba:	b105      	cbz	r5, 1c0be <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0xd6>
   1c0bc:	686d      	ldr	r5, [r5, #4]
   1c0be:	4621      	mov	r1, r4
   1c0c0:	a80a      	add	r0, sp, #40	; 0x28
   1c0c2:	f00b fabb 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1c0c6:	b104      	cbz	r4, 1c0ca <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0xe2>
   1c0c8:	6864      	ldr	r4, [r4, #4]
   1c0ca:	4631      	mov	r1, r6
   1c0cc:	4638      	mov	r0, r7
   1c0ce:	f00b fab5 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1c0d2:	b106      	cbz	r6, 1c0d6 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0xee>
   1c0d4:	6876      	ldr	r6, [r6, #4]
  T output_activation_min;
  T output_activation_max;
  GetActivationParams(params, &output_activation_min, &output_activation_max);

  const int flat_size =
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   1c0d6:	463a      	mov	r2, r7
   1c0d8:	a90a      	add	r1, sp, #40	; 0x28
   1c0da:	a804      	add	r0, sp, #16
   1c0dc:	f00c faf1 	bl	286c2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  *max = params.quantized_activation_max;
}

template <typename P>
inline void GetActivationParams(const P& params, float* min, float* max) {
  *min = params.float_activation_min;
   1c0e0:	eddd 8a23 	vldr	s17, [sp, #140]	; 0x8c
  *max = params.float_activation_max;
   1c0e4:	ed9d 8a24 	vldr	s16, [sp, #144]	; 0x90
  for (int i = 0; i < flat_size; ++i) {
   1c0e8:	2300      	movs	r3, #0
   1c0ea:	4298      	cmp	r0, r3
   1c0ec:	ddcd      	ble.n	1c08a <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0xa2>
    output_data[i] = ActivationFunctionWithMinMax(
        input1_data[i] * input2_data[i], output_activation_min,
   1c0ee:	ecf5 7a01 	vldmia	r5!, {s15}
   1c0f2:	ecb4 7a01 	vldmia	r4!, {s14}
    output_data[i] = ActivationFunctionWithMinMax(
   1c0f6:	ee67 7a87 	vmul.f32	s15, s15, s14
   1c0fa:	eef4 8a67 	vcmp.f32	s17, s15
   1c0fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1c102:	fe78 7aa7 	vselgt.f32	s15, s17, s15
	return __b;
   1c106:	eeb4 8a67 	vcmp.f32	s16, s15
   1c10a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1c10e:	bf48      	it	mi
   1c110:	eef0 7a48 	vmovmi.f32	s15, s16
  for (int i = 0; i < flat_size; ++i) {
   1c114:	3301      	adds	r3, #1
    output_data[i] = ActivationFunctionWithMinMax(
   1c116:	ece6 7a01 	vstmia	r6!, {s15}
  for (int i = 0; i < flat_size; ++i) {
   1c11a:	e7e6      	b.n	1c0ea <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x102>
   1c11c:	7f7fffff 	.word	0x7f7fffff
   1c120:	ff7fffff 	.word	0xff7fffff
   1c124:	00000000 	.word	0x00000000

0001c128 <_ZN6tflite3ops5micro3mul4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1c128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const TfLiteTensor* input1 = GetInput(context, node, kInput1Tensor);
   1c12c:	680b      	ldr	r3, [r1, #0]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1c12e:	b08b      	sub	sp, #44	; 0x2c
  return &context->tensors[node->inputs->data[index]];
   1c130:	e9d3 8901 	ldrd	r8, r9, [r3, #4]
  return &context->tensors[node->outputs->data[index]];
   1c134:	684b      	ldr	r3, [r1, #4]
  auto* params = reinterpret_cast<TfLiteMulParams*>(node->builtin_data);
   1c136:	694a      	ldr	r2, [r1, #20]
   1c138:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, node, params, &data));
   1c13c:	ab06      	add	r3, sp, #24
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1c13e:	4604      	mov	r4, r0
   1c140:	460d      	mov	r5, r1
  const TfLiteTensor* input1 = GetInput(context, node, kInput1Tensor);
   1c142:	6887      	ldr	r7, [r0, #8]
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, node, params, &data));
   1c144:	9205      	str	r2, [sp, #20]
   1c146:	f7ff fea7 	bl	1be98 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE>
   1c14a:	4606      	mov	r6, r0
   1c14c:	bb08      	cbnz	r0, 1c192 <_ZN6tflite3ops5micro3mul4EvalEP13TfLiteContextP10TfLiteNode+0x6a>
  return &context->tensors[node->inputs->data[index]];
   1c14e:	ea4f 1b88 	mov.w	fp, r8, lsl #6
  switch (input1->type) {
   1c152:	f817 000b 	ldrb.w	r0, [r7, fp]
   1c156:	9a05      	ldr	r2, [sp, #20]
   1c158:	2803      	cmp	r0, #3
   1c15a:	eb07 1388 	add.w	r3, r7, r8, lsl #6
   1c15e:	eb07 1189 	add.w	r1, r7, r9, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1c162:	eb07 1a8a 	add.w	sl, r7, sl, lsl #6
   1c166:	d00c      	beq.n	1c182 <_ZN6tflite3ops5micro3mul4EvalEP13TfLiteContextP10TfLiteNode+0x5a>
   1c168:	2809      	cmp	r0, #9
   1c16a:	d00a      	beq.n	1c182 <_ZN6tflite3ops5micro3mul4EvalEP13TfLiteContextP10TfLiteNode+0x5a>
   1c16c:	2801      	cmp	r0, #1
   1c16e:	d114      	bne.n	1c19a <_ZN6tflite3ops5micro3mul4EvalEP13TfLiteContextP10TfLiteNode+0x72>
      EvalFloat(context, node, params, &data, input1, input2, output);
   1c170:	e9cd 1a01 	strd	r1, sl, [sp, #4]
   1c174:	9300      	str	r3, [sp, #0]
   1c176:	4629      	mov	r1, r5
   1c178:	4620      	mov	r0, r4
   1c17a:	ab06      	add	r3, sp, #24
   1c17c:	f7ff ff34 	bl	1bfe8 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_>
      break;
   1c180:	e007      	b.n	1c192 <_ZN6tflite3ops5micro3mul4EvalEP13TfLiteContextP10TfLiteNode+0x6a>
      EvalQuantized(context, node, params, &data, input1, input2, output);
   1c182:	e9cd 1a01 	strd	r1, sl, [sp, #4]
   1c186:	9300      	str	r3, [sp, #0]
   1c188:	4629      	mov	r1, r5
   1c18a:	4620      	mov	r0, r4
   1c18c:	ab06      	add	r3, sp, #24
   1c18e:	f010 ff0a 	bl	2cfa6 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_>
}
   1c192:	4630      	mov	r0, r6
   1c194:	b00b      	add	sp, #44	; 0x2c
   1c196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   1c19a:	6965      	ldr	r5, [r4, #20]
   1c19c:	f7f0 fd92 	bl	ccc4 <TfLiteTypeGetName>
   1c1a0:	f817 300b 	ldrb.w	r3, [r7, fp]
   1c1a4:	4602      	mov	r2, r0
   1c1a6:	4902      	ldr	r1, [pc, #8]	; (1c1b0 <_ZN6tflite3ops5micro3mul4EvalEP13TfLiteContextP10TfLiteNode+0x88>)
   1c1a8:	4620      	mov	r0, r4
   1c1aa:	47a8      	blx	r5
      return kTfLiteError;
   1c1ac:	2601      	movs	r6, #1
   1c1ae:	e7f0      	b.n	1c192 <_ZN6tflite3ops5micro3mul4EvalEP13TfLiteContextP10TfLiteNode+0x6a>
   1c1b0:	000349d0 	.word	0x000349d0

0001c1b4 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->inputs->data[index]];
   1c1b4:	680b      	ldr	r3, [r1, #0]
namespace neg {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1c1b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c1ba:	685e      	ldr	r6, [r3, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1c1bc:	6884      	ldr	r4, [r0, #8]
   1c1be:	01b7      	lsls	r7, r6, #6
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1c1c0:	4605      	mov	r5, r0
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  switch (input->type) {
   1c1c2:	5de0      	ldrb	r0, [r4, r7]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1c1c4:	b08c      	sub	sp, #48	; 0x30
  switch (input->type) {
   1c1c6:	2801      	cmp	r0, #1
   1c1c8:	eb04 1686 	add.w	r6, r4, r6, lsl #6
   1c1cc:	d147      	bne.n	1c25e <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0xaa>
  return &context->tensors[node->outputs->data[index]];
   1c1ce:	684b      	ldr	r3, [r1, #4]
    // TODO(wangtz): handle for kTfLiteInt8
    case kTfLiteFloat32:
      reference_ops::Negate(GetTensorShape(input), GetTensorData<float>(input),
   1c1d0:	4668      	mov	r0, sp
   1c1d2:	685b      	ldr	r3, [r3, #4]
   1c1d4:	4631      	mov	r1, r6
   1c1d6:	eb04 1483 	add.w	r4, r4, r3, lsl #6
   1c1da:	f00b fa2f 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                            GetTensorShape(output),
   1c1de:	4621      	mov	r1, r4
   1c1e0:	a806      	add	r0, sp, #24
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1c1e2:	6876      	ldr	r6, [r6, #4]
   1c1e4:	f00b fa2a 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1c1e8:	b104      	cbz	r4, 1c1ec <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x38>
   1c1ea:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   1c1ec:	9f00      	ldr	r7, [sp, #0]
   1c1ee:	9b06      	ldr	r3, [sp, #24]
   1c1f0:	429f      	cmp	r7, r3
   1c1f2:	d001      	beq.n	1c1f8 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x44>
   1c1f4:	f014 fde1 	bl	30dba <abort>
  for (int i = 0; i < dims_count; ++i) {
   1c1f8:	2500      	movs	r5, #0
   1c1fa:	42af      	cmp	r7, r5
   1c1fc:	dd0c      	ble.n	1c218 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x64>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   1c1fe:	4629      	mov	r1, r5
   1c200:	4668      	mov	r0, sp
   1c202:	f00b f9e1 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   1c206:	4629      	mov	r1, r5
   1c208:	4680      	mov	r8, r0
   1c20a:	a806      	add	r0, sp, #24
   1c20c:	f00b f9dc 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   1c210:	4580      	cmp	r8, r0
   1c212:	d1ef      	bne.n	1c1f4 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x40>
  for (int i = 0; i < dims_count; ++i) {
   1c214:	3501      	adds	r5, #1
   1c216:	e7f0      	b.n	1c1fa <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x46>
    for (int i = 0; i < size_; i++) {
   1c218:	2300      	movs	r3, #0
    int buffer_size = 1;
   1c21a:	2101      	movs	r1, #1
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   1c21c:	2f05      	cmp	r7, #5
   1c21e:	bfcc      	ite	gt
   1c220:	9a01      	ldrgt	r2, [sp, #4]
   1c222:	aa01      	addle	r2, sp, #4
    for (int i = 0; i < size_; i++) {
   1c224:	429f      	cmp	r7, r3
   1c226:	dc0b      	bgt.n	1c240 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x8c>
   1c228:	4633      	mov	r3, r6
template <typename T>
inline void Negate(const RuntimeShape& input_shape, const T* input_data,
                   const RuntimeShape& output_shape, T* output_data) {
  const int flat_size = MatchingFlatSize(input_shape, output_shape);

  for (int i = 0; i < flat_size; ++i) {
   1c22a:	2200      	movs	r2, #0
   1c22c:	428a      	cmp	r2, r1
   1c22e:	da0c      	bge.n	1c24a <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x96>
    output_data[i] = -input_data[i];
   1c230:	ecf3 7a01 	vldmia	r3!, {s15}
   1c234:	eef1 7a67 	vneg.f32	s15, s15
  for (int i = 0; i < flat_size; ++i) {
   1c238:	3201      	adds	r2, #1
    output_data[i] = -input_data[i];
   1c23a:	ece4 7a01 	vstmia	r4!, {s15}
  for (int i = 0; i < flat_size; ++i) {
   1c23e:	e7f5      	b.n	1c22c <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x78>
      buffer_size *= dims_data[i];
   1c240:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   1c244:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   1c246:	4341      	muls	r1, r0
    for (int i = 0; i < size_; i++) {
   1c248:	e7ec      	b.n	1c224 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x70>
   1c24a:	a806      	add	r0, sp, #24
   1c24c:	f00b f9b1 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
      reference_ops::Negate(GetTensorShape(input), GetTensorData<float>(input),
   1c250:	4668      	mov	r0, sp
   1c252:	f00b f9ae 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
  }
  return kTfLiteOk;
   1c256:	2000      	movs	r0, #0
}
   1c258:	b00c      	add	sp, #48	; 0x30
   1c25a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   1c25e:	696e      	ldr	r6, [r5, #20]
   1c260:	f7f0 fd30 	bl	ccc4 <TfLiteTypeGetName>
   1c264:	5de3      	ldrb	r3, [r4, r7]
   1c266:	4602      	mov	r2, r0
   1c268:	4902      	ldr	r1, [pc, #8]	; (1c274 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0xc0>)
   1c26a:	4628      	mov	r0, r5
   1c26c:	47b0      	blx	r6
      return kTfLiteError;
   1c26e:	2001      	movs	r0, #1
   1c270:	e7f2      	b.n	1c258 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0xa4>
   1c272:	bf00      	nop
   1c274:	000349d0 	.word	0x000349d0

0001c278 <_ZN6tflite3ops5micro12Register_NEGEv>:

}  // namespace neg

TfLiteRegistration Register_NEG() {
   1c278:	b510      	push	{r4, lr}
   1c27a:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/neg::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1c27c:	2220      	movs	r2, #32
   1c27e:	2100      	movs	r1, #0
   1c280:	f014 fde5 	bl	30e4e <memset>
   1c284:	4b01      	ldr	r3, [pc, #4]	; (1c28c <_ZN6tflite3ops5micro12Register_NEGEv+0x14>)
}
   1c286:	4620      	mov	r0, r4
          /*version=*/0};
   1c288:	60e3      	str	r3, [r4, #12]
}
   1c28a:	bd10      	pop	{r4, pc}
   1c28c:	0001c1b5 	.word	0x0001c1b5

0001c290 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
  }

  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1c290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c294:	b085      	sub	sp, #20
  const TfLitePackParams* data =
      reinterpret_cast<TfLitePackParams*>(node->builtin_data);

  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
   1c296:	6883      	ldr	r3, [r0, #8]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1c298:	9000      	str	r0, [sp, #0]
   1c29a:	6848      	ldr	r0, [r1, #4]
  const TfLitePackParams* data =
   1c29c:	694a      	ldr	r2, [r1, #20]
   1c29e:	6847      	ldr	r7, [r0, #4]
   1c2a0:	01b8      	lsls	r0, r7, #6

  switch (output->type) {
   1c2a2:	5c18      	ldrb	r0, [r3, r0]
   1c2a4:	eb03 1787 	add.w	r7, r3, r7, lsl #6
   1c2a8:	1e45      	subs	r5, r0, #1
   1c2aa:	2d08      	cmp	r5, #8
   1c2ac:	f200 8216 	bhi.w	1c6dc <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x44c>
   1c2b0:	e8df f015 	tbh	[pc, r5, lsl #1]
   1c2b4:	01420009 	.word	0x01420009
   1c2b8:	01a90074 	.word	0x01a90074
   1c2bc:	02140214 	.word	0x02140214
   1c2c0:	02140214 	.word	0x02140214
   1c2c4:	00da      	.short	0x00da
  const TfLiteTensor* input0 = GetInput(context, node, 0);
   1c2c6:	6808      	ldr	r0, [r1, #0]
  const int dimensions = output->dims->size;
   1c2c8:	68bd      	ldr	r5, [r7, #8]
  return &context->tensors[node->inputs->data[index]];
   1c2ca:	6841      	ldr	r1, [r0, #4]
   1c2cc:	f105 0c04 	add.w	ip, r5, #4
  const TfLiteIntArray* input_dims = input0->dims;
   1c2d0:	eb03 1181 	add.w	r1, r3, r1, lsl #6
  const int dimensions = output->dims->size;
   1c2d4:	f8d5 e000 	ldr.w	lr, [r5]
  const TfLiteIntArray* input_dims = input0->dims;
   1c2d8:	688c      	ldr	r4, [r1, #8]
   1c2da:	4666      	mov	r6, ip
    case kTfLiteFloat32: {
      return PackImpl<float>(context, node, output, data->values_count,
                             data->axis);
   1c2dc:	e9d2 9200 	ldrd	r9, r2, [r2]
  for (int i = 0; i < axis; ++i) {
   1c2e0:	2100      	movs	r1, #0
  int outer_size = 1;
   1c2e2:	2501      	movs	r5, #1
  if (axis < 0) {
   1c2e4:	2a00      	cmp	r2, #0
    axis += dimensions;
   1c2e6:	bfb8      	it	lt
   1c2e8:	4472      	addlt	r2, lr
  for (int i = 0; i < axis; ++i) {
   1c2ea:	428a      	cmp	r2, r1
   1c2ec:	dd05      	ble.n	1c2fa <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6a>
    outer_size *= output_dims->data[i];
   1c2ee:	f856 8b04 	ldr.w	r8, [r6], #4
  for (int i = 0; i < axis; ++i) {
   1c2f2:	3101      	adds	r1, #1
    outer_size *= output_dims->data[i];
   1c2f4:	fb08 f505 	mul.w	r5, r8, r5
  for (int i = 0; i < axis; ++i) {
   1c2f8:	e7f7      	b.n	1c2ea <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5a>
  for (int i = axis + 1; i < dimensions; ++i) {
   1c2fa:	1c51      	adds	r1, r2, #1
  int copy_size = 1;
   1c2fc:	2201      	movs	r2, #1
  for (int i = axis + 1; i < dimensions; ++i) {
   1c2fe:	458e      	cmp	lr, r1
   1c300:	dc0c      	bgt.n	1c31c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8c>
  for (int i = 0; i < input_dims->size; ++i) {
   1c302:	4621      	mov	r1, r4
   1c304:	2600      	movs	r6, #0
  int input_size = 1;
   1c306:	2401      	movs	r4, #1
  for (int i = 0; i < input_dims->size; ++i) {
   1c308:	f851 eb04 	ldr.w	lr, [r1], #4
   1c30c:	45b6      	cmp	lr, r6
   1c30e:	dd0a      	ble.n	1c326 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x96>
    input_size *= input_dims->data[i];
   1c310:	f851 cb04 	ldr.w	ip, [r1], #4
  for (int i = 0; i < input_dims->size; ++i) {
   1c314:	3601      	adds	r6, #1
    input_size *= input_dims->data[i];
   1c316:	fb0c f404 	mul.w	r4, ip, r4
  for (int i = 0; i < input_dims->size; ++i) {
   1c31a:	e7f7      	b.n	1c30c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7c>
    copy_size *= output_dims->data[i];
   1c31c:	f85c 6021 	ldr.w	r6, [ip, r1, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
   1c320:	3101      	adds	r1, #1
    copy_size *= output_dims->data[i];
   1c322:	4372      	muls	r2, r6
  for (int i = axis + 1; i < dimensions; ++i) {
   1c324:	e7eb      	b.n	1c2fe <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6e>
  TFLITE_DCHECK_EQ(input_size, copy_size * outer_size);
   1c326:	fb02 f105 	mul.w	r1, r2, r5
   1c32a:	428c      	cmp	r4, r1
   1c32c:	d001      	beq.n	1c332 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa2>
   1c32e:	f014 fd44 	bl	30dba <abort>
   1c332:	2400      	movs	r4, #0
   1c334:	6879      	ldr	r1, [r7, #4]
  for (int i = 0; i < values_count; ++i) {
   1c336:	4627      	mov	r7, r4
   1c338:	9101      	str	r1, [sp, #4]
   1c33a:	1d01      	adds	r1, r0, #4
   1c33c:	9100      	str	r1, [sp, #0]
   1c33e:	fb02 f109 	mul.w	r1, r2, r9
   1c342:	9102      	str	r1, [sp, #8]
   1c344:	45b9      	cmp	r9, r7
   1c346:	dc03      	bgt.n	1c350 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc0>
      return PackImpl<float>(context, node, output, data->values_count,
   1c348:	2000      	movs	r0, #0
      return kTfLiteError;
    }
  }

  return kTfLiteOk;
}
   1c34a:	b005      	add	sp, #20
   1c34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (int i = 0; i < values_count; ++i) {
   1c350:	2600      	movs	r6, #0
   1c352:	46a4      	mov	ip, r4
    for (int k = 0; k < outer_size; ++k) {
   1c354:	46b6      	mov	lr, r6
   1c356:	9800      	ldr	r0, [sp, #0]
   1c358:	f850 1b04 	ldr.w	r1, [r0], #4
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1c35c:	eb13 1181 	adds.w	r1, r3, r1, lsl #6
   1c360:	bf18      	it	ne
   1c362:	6849      	ldrne	r1, [r1, #4]
   1c364:	9000      	str	r0, [sp, #0]
   1c366:	4575      	cmp	r5, lr
   1c368:	dd15      	ble.n	1c396 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x106>
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   1c36a:	f04f 0800 	mov.w	r8, #0
   1c36e:	9801      	ldr	r0, [sp, #4]
   1c370:	eb01 0b86 	add.w	fp, r1, r6, lsl #2
   1c374:	eb00 0a8c 	add.w	sl, r0, ip, lsl #2
   1c378:	4542      	cmp	r2, r8
   1c37a:	dd06      	ble.n	1c38a <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfa>
   1c37c:	ecfb 7a01 	vldmia	fp!, {s15}
   1c380:	f108 0801 	add.w	r8, r8, #1
   1c384:	ecea 7a01 	vstmia	sl!, {s15}
   1c388:	e7f6      	b.n	1c378 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe8>
    for (int k = 0; k < outer_size; ++k) {
   1c38a:	9802      	ldr	r0, [sp, #8]
   1c38c:	f10e 0e01 	add.w	lr, lr, #1
   1c390:	4416      	add	r6, r2
   1c392:	4484      	add	ip, r0
   1c394:	e7e7      	b.n	1c366 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd6>
  for (int i = 0; i < values_count; ++i) {
   1c396:	3701      	adds	r7, #1
   1c398:	4414      	add	r4, r2
   1c39a:	e7d3      	b.n	1c344 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb4>
   1c39c:	6808      	ldr	r0, [r1, #0]
  const int dimensions = output->dims->size;
   1c39e:	68be      	ldr	r6, [r7, #8]
   1c3a0:	6840      	ldr	r0, [r0, #4]
   1c3a2:	f106 0c04 	add.w	ip, r6, #4
  const TfLiteIntArray* input_dims = input0->dims;
   1c3a6:	eb03 1380 	add.w	r3, r3, r0, lsl #6
  const int dimensions = output->dims->size;
   1c3aa:	f8d6 e000 	ldr.w	lr, [r6]
  const TfLiteIntArray* input_dims = input0->dims;
   1c3ae:	689d      	ldr	r5, [r3, #8]
   1c3b0:	4660      	mov	r0, ip
                               data->axis);
   1c3b2:	e9d2 b200 	ldrd	fp, r2, [r2]
  for (int i = 0; i < axis; ++i) {
   1c3b6:	2300      	movs	r3, #0
  int outer_size = 1;
   1c3b8:	2601      	movs	r6, #1
  if (axis < 0) {
   1c3ba:	2a00      	cmp	r2, #0
    axis += dimensions;
   1c3bc:	bfb8      	it	lt
   1c3be:	4472      	addlt	r2, lr
  for (int i = 0; i < axis; ++i) {
   1c3c0:	429a      	cmp	r2, r3
   1c3c2:	dd05      	ble.n	1c3d0 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x140>
    outer_size *= output_dims->data[i];
   1c3c4:	f850 8b04 	ldr.w	r8, [r0], #4
  for (int i = 0; i < axis; ++i) {
   1c3c8:	3301      	adds	r3, #1
    outer_size *= output_dims->data[i];
   1c3ca:	fb08 f606 	mul.w	r6, r8, r6
  for (int i = 0; i < axis; ++i) {
   1c3ce:	e7f7      	b.n	1c3c0 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x130>
  int copy_size = 1;
   1c3d0:	2301      	movs	r3, #1
  for (int i = axis + 1; i < dimensions; ++i) {
   1c3d2:	3201      	adds	r2, #1
   1c3d4:	4596      	cmp	lr, r2
   1c3d6:	dc0c      	bgt.n	1c3f2 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x162>
  for (int i = 0; i < input_dims->size; ++i) {
   1c3d8:	462a      	mov	r2, r5
  int input_size = 1;
   1c3da:	2001      	movs	r0, #1
  for (int i = 0; i < input_dims->size; ++i) {
   1c3dc:	2500      	movs	r5, #0
   1c3de:	f852 eb04 	ldr.w	lr, [r2], #4
   1c3e2:	45ae      	cmp	lr, r5
   1c3e4:	dd0a      	ble.n	1c3fc <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16c>
    input_size *= input_dims->data[i];
   1c3e6:	f852 cb04 	ldr.w	ip, [r2], #4
  for (int i = 0; i < input_dims->size; ++i) {
   1c3ea:	3501      	adds	r5, #1
    input_size *= input_dims->data[i];
   1c3ec:	fb0c f000 	mul.w	r0, ip, r0
  for (int i = 0; i < input_dims->size; ++i) {
   1c3f0:	e7f7      	b.n	1c3e2 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x152>
    copy_size *= output_dims->data[i];
   1c3f2:	f85c 0022 	ldr.w	r0, [ip, r2, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
   1c3f6:	3201      	adds	r2, #1
    copy_size *= output_dims->data[i];
   1c3f8:	4343      	muls	r3, r0
  for (int i = axis + 1; i < dimensions; ++i) {
   1c3fa:	e7eb      	b.n	1c3d4 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x144>
  TFLITE_DCHECK_EQ(input_size, copy_size * outer_size);
   1c3fc:	fb03 f206 	mul.w	r2, r3, r6
   1c400:	4290      	cmp	r0, r2
   1c402:	d194      	bne.n	1c32e <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9e>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1c404:	2000      	movs	r0, #0
  for (int i = 0; i < values_count; ++i) {
   1c406:	4605      	mov	r5, r0
   1c408:	687a      	ldr	r2, [r7, #4]
   1c40a:	9201      	str	r2, [sp, #4]
   1c40c:	fb03 f20b 	mul.w	r2, r3, fp
   1c410:	9202      	str	r2, [sp, #8]
   1c412:	45ab      	cmp	fp, r5
   1c414:	dd98      	ble.n	1c348 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb8>
   1c416:	680a      	ldr	r2, [r1, #0]
   1c418:	4684      	mov	ip, r0
   1c41a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
   1c41e:	6857      	ldr	r7, [r2, #4]
   1c420:	9a00      	ldr	r2, [sp, #0]
   1c422:	6892      	ldr	r2, [r2, #8]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1c424:	eb12 1287 	adds.w	r2, r2, r7, lsl #6
   1c428:	f04f 0700 	mov.w	r7, #0
    for (int k = 0; k < outer_size; ++k) {
   1c42c:	46be      	mov	lr, r7
   1c42e:	bf18      	it	ne
   1c430:	6852      	ldrne	r2, [r2, #4]
   1c432:	4576      	cmp	r6, lr
   1c434:	dd15      	ble.n	1c462 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d2>
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   1c436:	f04f 0800 	mov.w	r8, #0
   1c43a:	9c01      	ldr	r4, [sp, #4]
   1c43c:	eb02 0a07 	add.w	sl, r2, r7
   1c440:	eb04 090c 	add.w	r9, r4, ip
   1c444:	4543      	cmp	r3, r8
   1c446:	dd06      	ble.n	1c456 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c6>
   1c448:	f81a 4b01 	ldrb.w	r4, [sl], #1
   1c44c:	f108 0801 	add.w	r8, r8, #1
   1c450:	f809 4b01 	strb.w	r4, [r9], #1
   1c454:	e7f6      	b.n	1c444 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1b4>
    for (int k = 0; k < outer_size; ++k) {
   1c456:	9c02      	ldr	r4, [sp, #8]
   1c458:	f10e 0e01 	add.w	lr, lr, #1
   1c45c:	441f      	add	r7, r3
   1c45e:	44a4      	add	ip, r4
   1c460:	e7e7      	b.n	1c432 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a2>
  for (int i = 0; i < values_count; ++i) {
   1c462:	3501      	adds	r5, #1
   1c464:	4418      	add	r0, r3
   1c466:	e7d4      	b.n	1c412 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x182>
   1c468:	6808      	ldr	r0, [r1, #0]
  const int dimensions = output->dims->size;
   1c46a:	68be      	ldr	r6, [r7, #8]
   1c46c:	6840      	ldr	r0, [r0, #4]
   1c46e:	f106 0c04 	add.w	ip, r6, #4
  const TfLiteIntArray* input_dims = input0->dims;
   1c472:	eb03 1380 	add.w	r3, r3, r0, lsl #6
  const int dimensions = output->dims->size;
   1c476:	f8d6 e000 	ldr.w	lr, [r6]
  const TfLiteIntArray* input_dims = input0->dims;
   1c47a:	689d      	ldr	r5, [r3, #8]
   1c47c:	4660      	mov	r0, ip
                              data->axis);
   1c47e:	e9d2 b200 	ldrd	fp, r2, [r2]
  for (int i = 0; i < axis; ++i) {
   1c482:	2300      	movs	r3, #0
  int outer_size = 1;
   1c484:	2601      	movs	r6, #1
  if (axis < 0) {
   1c486:	2a00      	cmp	r2, #0
    axis += dimensions;
   1c488:	bfb8      	it	lt
   1c48a:	4472      	addlt	r2, lr
  for (int i = 0; i < axis; ++i) {
   1c48c:	429a      	cmp	r2, r3
   1c48e:	dd05      	ble.n	1c49c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x20c>
    outer_size *= output_dims->data[i];
   1c490:	f850 8b04 	ldr.w	r8, [r0], #4
  for (int i = 0; i < axis; ++i) {
   1c494:	3301      	adds	r3, #1
    outer_size *= output_dims->data[i];
   1c496:	fb08 f606 	mul.w	r6, r8, r6
  for (int i = 0; i < axis; ++i) {
   1c49a:	e7f7      	b.n	1c48c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1fc>
  int copy_size = 1;
   1c49c:	2301      	movs	r3, #1
  for (int i = axis + 1; i < dimensions; ++i) {
   1c49e:	3201      	adds	r2, #1
   1c4a0:	4596      	cmp	lr, r2
   1c4a2:	dc0c      	bgt.n	1c4be <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x22e>
  for (int i = 0; i < input_dims->size; ++i) {
   1c4a4:	462a      	mov	r2, r5
  int input_size = 1;
   1c4a6:	2001      	movs	r0, #1
  for (int i = 0; i < input_dims->size; ++i) {
   1c4a8:	2500      	movs	r5, #0
   1c4aa:	f852 eb04 	ldr.w	lr, [r2], #4
   1c4ae:	45ae      	cmp	lr, r5
   1c4b0:	dd0a      	ble.n	1c4c8 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x238>
    input_size *= input_dims->data[i];
   1c4b2:	f852 cb04 	ldr.w	ip, [r2], #4
  for (int i = 0; i < input_dims->size; ++i) {
   1c4b6:	3501      	adds	r5, #1
    input_size *= input_dims->data[i];
   1c4b8:	fb0c f000 	mul.w	r0, ip, r0
  for (int i = 0; i < input_dims->size; ++i) {
   1c4bc:	e7f7      	b.n	1c4ae <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x21e>
    copy_size *= output_dims->data[i];
   1c4be:	f85c 0022 	ldr.w	r0, [ip, r2, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
   1c4c2:	3201      	adds	r2, #1
    copy_size *= output_dims->data[i];
   1c4c4:	4343      	muls	r3, r0
  for (int i = axis + 1; i < dimensions; ++i) {
   1c4c6:	e7eb      	b.n	1c4a0 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x210>
  TFLITE_DCHECK_EQ(input_size, copy_size * outer_size);
   1c4c8:	fb03 f206 	mul.w	r2, r3, r6
   1c4cc:	4290      	cmp	r0, r2
   1c4ce:	f47f af2e 	bne.w	1c32e <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9e>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1c4d2:	2000      	movs	r0, #0
  for (int i = 0; i < values_count; ++i) {
   1c4d4:	4605      	mov	r5, r0
   1c4d6:	687a      	ldr	r2, [r7, #4]
   1c4d8:	9201      	str	r2, [sp, #4]
   1c4da:	fb03 f20b 	mul.w	r2, r3, fp
   1c4de:	9202      	str	r2, [sp, #8]
   1c4e0:	45ab      	cmp	fp, r5
   1c4e2:	f77f af31 	ble.w	1c348 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb8>
   1c4e6:	680a      	ldr	r2, [r1, #0]
   1c4e8:	4684      	mov	ip, r0
   1c4ea:	eb02 0285 	add.w	r2, r2, r5, lsl #2
   1c4ee:	6857      	ldr	r7, [r2, #4]
   1c4f0:	9a00      	ldr	r2, [sp, #0]
   1c4f2:	6892      	ldr	r2, [r2, #8]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1c4f4:	eb12 1287 	adds.w	r2, r2, r7, lsl #6
   1c4f8:	f04f 0700 	mov.w	r7, #0
    for (int k = 0; k < outer_size; ++k) {
   1c4fc:	46be      	mov	lr, r7
   1c4fe:	bf18      	it	ne
   1c500:	6852      	ldrne	r2, [r2, #4]
   1c502:	4576      	cmp	r6, lr
   1c504:	dd15      	ble.n	1c532 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2a2>
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   1c506:	f04f 0800 	mov.w	r8, #0
   1c50a:	9c01      	ldr	r4, [sp, #4]
   1c50c:	eb02 0a07 	add.w	sl, r2, r7
   1c510:	eb04 090c 	add.w	r9, r4, ip
   1c514:	4543      	cmp	r3, r8
   1c516:	dd06      	ble.n	1c526 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x296>
   1c518:	f91a 4b01 	ldrsb.w	r4, [sl], #1
   1c51c:	f108 0801 	add.w	r8, r8, #1
   1c520:	f809 4b01 	strb.w	r4, [r9], #1
   1c524:	e7f6      	b.n	1c514 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x284>
    for (int k = 0; k < outer_size; ++k) {
   1c526:	9c02      	ldr	r4, [sp, #8]
   1c528:	f10e 0e01 	add.w	lr, lr, #1
   1c52c:	441f      	add	r7, r3
   1c52e:	44a4      	add	ip, r4
   1c530:	e7e7      	b.n	1c502 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x272>
  for (int i = 0; i < values_count; ++i) {
   1c532:	3501      	adds	r5, #1
   1c534:	4418      	add	r0, r3
   1c536:	e7d3      	b.n	1c4e0 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x250>
  const TfLiteTensor* input0 = GetInput(context, node, 0);
   1c538:	6808      	ldr	r0, [r1, #0]
  const int dimensions = output->dims->size;
   1c53a:	68bd      	ldr	r5, [r7, #8]
   1c53c:	6841      	ldr	r1, [r0, #4]
   1c53e:	f105 0c04 	add.w	ip, r5, #4
  const TfLiteIntArray* input_dims = input0->dims;
   1c542:	eb03 1181 	add.w	r1, r3, r1, lsl #6
  const int dimensions = output->dims->size;
   1c546:	f8d5 e000 	ldr.w	lr, [r5]
  const TfLiteIntArray* input_dims = input0->dims;
   1c54a:	688c      	ldr	r4, [r1, #8]
   1c54c:	4666      	mov	r6, ip
                               data->axis);
   1c54e:	e9d2 b200 	ldrd	fp, r2, [r2]
  for (int i = 0; i < axis; ++i) {
   1c552:	2100      	movs	r1, #0
  int outer_size = 1;
   1c554:	2501      	movs	r5, #1
  if (axis < 0) {
   1c556:	2a00      	cmp	r2, #0
    axis += dimensions;
   1c558:	bfb8      	it	lt
   1c55a:	4472      	addlt	r2, lr
  for (int i = 0; i < axis; ++i) {
   1c55c:	428a      	cmp	r2, r1
   1c55e:	dd05      	ble.n	1c56c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2dc>
    outer_size *= output_dims->data[i];
   1c560:	f856 8b04 	ldr.w	r8, [r6], #4
  for (int i = 0; i < axis; ++i) {
   1c564:	3101      	adds	r1, #1
    outer_size *= output_dims->data[i];
   1c566:	fb08 f505 	mul.w	r5, r8, r5
  for (int i = 0; i < axis; ++i) {
   1c56a:	e7f7      	b.n	1c55c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2cc>
  for (int i = axis + 1; i < dimensions; ++i) {
   1c56c:	1c51      	adds	r1, r2, #1
  int copy_size = 1;
   1c56e:	2201      	movs	r2, #1
  for (int i = axis + 1; i < dimensions; ++i) {
   1c570:	458e      	cmp	lr, r1
   1c572:	dc0c      	bgt.n	1c58e <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2fe>
  for (int i = 0; i < input_dims->size; ++i) {
   1c574:	4621      	mov	r1, r4
   1c576:	2600      	movs	r6, #0
  int input_size = 1;
   1c578:	2401      	movs	r4, #1
  for (int i = 0; i < input_dims->size; ++i) {
   1c57a:	f851 eb04 	ldr.w	lr, [r1], #4
   1c57e:	45b6      	cmp	lr, r6
   1c580:	dd0a      	ble.n	1c598 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x308>
    input_size *= input_dims->data[i];
   1c582:	f851 cb04 	ldr.w	ip, [r1], #4
  for (int i = 0; i < input_dims->size; ++i) {
   1c586:	3601      	adds	r6, #1
    input_size *= input_dims->data[i];
   1c588:	fb0c f404 	mul.w	r4, ip, r4
  for (int i = 0; i < input_dims->size; ++i) {
   1c58c:	e7f7      	b.n	1c57e <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ee>
    copy_size *= output_dims->data[i];
   1c58e:	f85c 6021 	ldr.w	r6, [ip, r1, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
   1c592:	3101      	adds	r1, #1
    copy_size *= output_dims->data[i];
   1c594:	4372      	muls	r2, r6
  for (int i = axis + 1; i < dimensions; ++i) {
   1c596:	e7eb      	b.n	1c570 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e0>
  TFLITE_DCHECK_EQ(input_size, copy_size * outer_size);
   1c598:	fb02 f105 	mul.w	r1, r2, r5
   1c59c:	428c      	cmp	r4, r1
   1c59e:	f47f aec6 	bne.w	1c32e <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9e>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1c5a2:	2400      	movs	r4, #0
   1c5a4:	6879      	ldr	r1, [r7, #4]
  for (int i = 0; i < values_count; ++i) {
   1c5a6:	4627      	mov	r7, r4
   1c5a8:	9101      	str	r1, [sp, #4]
   1c5aa:	1d01      	adds	r1, r0, #4
   1c5ac:	9100      	str	r1, [sp, #0]
   1c5ae:	fb02 f10b 	mul.w	r1, r2, fp
   1c5b2:	9102      	str	r1, [sp, #8]
   1c5b4:	45bb      	cmp	fp, r7
   1c5b6:	f77f aec7 	ble.w	1c348 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb8>
   1c5ba:	2600      	movs	r6, #0
   1c5bc:	46a4      	mov	ip, r4
    for (int k = 0; k < outer_size; ++k) {
   1c5be:	46b6      	mov	lr, r6
   1c5c0:	9800      	ldr	r0, [sp, #0]
   1c5c2:	f850 1b04 	ldr.w	r1, [r0], #4
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1c5c6:	eb13 1181 	adds.w	r1, r3, r1, lsl #6
   1c5ca:	bf18      	it	ne
   1c5cc:	6849      	ldrne	r1, [r1, #4]
   1c5ce:	9000      	str	r0, [sp, #0]
   1c5d0:	4575      	cmp	r5, lr
   1c5d2:	dd15      	ble.n	1c600 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x370>
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   1c5d4:	f04f 0800 	mov.w	r8, #0
   1c5d8:	9801      	ldr	r0, [sp, #4]
   1c5da:	eb01 0a86 	add.w	sl, r1, r6, lsl #2
   1c5de:	eb00 098c 	add.w	r9, r0, ip, lsl #2
   1c5e2:	4542      	cmp	r2, r8
   1c5e4:	dd06      	ble.n	1c5f4 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x364>
   1c5e6:	f85a 0b04 	ldr.w	r0, [sl], #4
   1c5ea:	f108 0801 	add.w	r8, r8, #1
   1c5ee:	f849 0b04 	str.w	r0, [r9], #4
   1c5f2:	e7f6      	b.n	1c5e2 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x352>
    for (int k = 0; k < outer_size; ++k) {
   1c5f4:	9802      	ldr	r0, [sp, #8]
   1c5f6:	f10e 0e01 	add.w	lr, lr, #1
   1c5fa:	4416      	add	r6, r2
   1c5fc:	4484      	add	ip, r0
   1c5fe:	e7e7      	b.n	1c5d0 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x340>
  for (int i = 0; i < values_count; ++i) {
   1c600:	3701      	adds	r7, #1
   1c602:	4414      	add	r4, r2
   1c604:	e7d6      	b.n	1c5b4 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x324>
  const TfLiteTensor* input0 = GetInput(context, node, 0);
   1c606:	f8d1 c000 	ldr.w	ip, [r1]
  const int dimensions = output->dims->size;
   1c60a:	68be      	ldr	r6, [r7, #8]
   1c60c:	f8dc 1004 	ldr.w	r1, [ip, #4]
      return PackImpl<int64_t>(context, node, output, data->values_count,
   1c610:	6810      	ldr	r0, [r2, #0]
  const int dimensions = output->dims->size;
   1c612:	f8d6 e000 	ldr.w	lr, [r6]
  const TfLiteIntArray* input_dims = input0->dims;
   1c616:	eb03 1181 	add.w	r1, r3, r1, lsl #6
   1c61a:	3604      	adds	r6, #4
      return PackImpl<int64_t>(context, node, output, data->values_count,
   1c61c:	9000      	str	r0, [sp, #0]
   1c61e:	4635      	mov	r5, r6
  const TfLiteIntArray* input_dims = input0->dims;
   1c620:	6888      	ldr	r0, [r1, #8]
  int outer_size = 1;
   1c622:	2401      	movs	r4, #1
  for (int i = 0; i < axis; ++i) {
   1c624:	2100      	movs	r1, #0
                               data->axis);
   1c626:	6852      	ldr	r2, [r2, #4]
  if (axis < 0) {
   1c628:	2a00      	cmp	r2, #0
    axis += dimensions;
   1c62a:	bfb8      	it	lt
   1c62c:	4472      	addlt	r2, lr
  for (int i = 0; i < axis; ++i) {
   1c62e:	428a      	cmp	r2, r1
   1c630:	dd05      	ble.n	1c63e <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3ae>
    outer_size *= output_dims->data[i];
   1c632:	f855 8b04 	ldr.w	r8, [r5], #4
  for (int i = 0; i < axis; ++i) {
   1c636:	3101      	adds	r1, #1
    outer_size *= output_dims->data[i];
   1c638:	fb08 f404 	mul.w	r4, r8, r4
  for (int i = 0; i < axis; ++i) {
   1c63c:	e7f7      	b.n	1c62e <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x39e>
  for (int i = axis + 1; i < dimensions; ++i) {
   1c63e:	1c51      	adds	r1, r2, #1
  int copy_size = 1;
   1c640:	2201      	movs	r2, #1
  for (int i = axis + 1; i < dimensions; ++i) {
   1c642:	458e      	cmp	lr, r1
   1c644:	dc0b      	bgt.n	1c65e <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3ce>
  for (int i = 0; i < input_dims->size; ++i) {
   1c646:	4601      	mov	r1, r0
   1c648:	2500      	movs	r5, #0
  int input_size = 1;
   1c64a:	2001      	movs	r0, #1
  for (int i = 0; i < input_dims->size; ++i) {
   1c64c:	f851 eb04 	ldr.w	lr, [r1], #4
   1c650:	45ae      	cmp	lr, r5
   1c652:	dd09      	ble.n	1c668 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3d8>
    input_size *= input_dims->data[i];
   1c654:	f851 6b04 	ldr.w	r6, [r1], #4
  for (int i = 0; i < input_dims->size; ++i) {
   1c658:	3501      	adds	r5, #1
    input_size *= input_dims->data[i];
   1c65a:	4370      	muls	r0, r6
  for (int i = 0; i < input_dims->size; ++i) {
   1c65c:	e7f8      	b.n	1c650 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3c0>
    copy_size *= output_dims->data[i];
   1c65e:	f856 5021 	ldr.w	r5, [r6, r1, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
   1c662:	3101      	adds	r1, #1
    copy_size *= output_dims->data[i];
   1c664:	436a      	muls	r2, r5
  for (int i = axis + 1; i < dimensions; ++i) {
   1c666:	e7ec      	b.n	1c642 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3b2>
  TFLITE_DCHECK_EQ(input_size, copy_size * outer_size);
   1c668:	fb02 f104 	mul.w	r1, r2, r4
   1c66c:	4288      	cmp	r0, r1
   1c66e:	f47f ae5e 	bne.w	1c32e <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9e>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1c672:	2000      	movs	r0, #0
   1c674:	6879      	ldr	r1, [r7, #4]
   1c676:	9102      	str	r1, [sp, #8]
   1c678:	f10c 0104 	add.w	r1, ip, #4
  for (int i = 0; i < values_count; ++i) {
   1c67c:	4684      	mov	ip, r0
   1c67e:	9101      	str	r1, [sp, #4]
   1c680:	9900      	ldr	r1, [sp, #0]
   1c682:	4351      	muls	r1, r2
   1c684:	9103      	str	r1, [sp, #12]
   1c686:	9900      	ldr	r1, [sp, #0]
   1c688:	4561      	cmp	r1, ip
   1c68a:	f77f ae5d 	ble.w	1c348 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb8>
   1c68e:	9d01      	ldr	r5, [sp, #4]
   1c690:	4686      	mov	lr, r0
   1c692:	f855 1b04 	ldr.w	r1, [r5], #4
   1c696:	9501      	str	r5, [sp, #4]
   1c698:	2500      	movs	r5, #0
    for (int k = 0; k < outer_size; ++k) {
   1c69a:	46a8      	mov	r8, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1c69c:	eb13 1181 	adds.w	r1, r3, r1, lsl #6
   1c6a0:	bf18      	it	ne
   1c6a2:	6849      	ldrne	r1, [r1, #4]
   1c6a4:	4544      	cmp	r4, r8
   1c6a6:	dd15      	ble.n	1c6d4 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x444>
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   1c6a8:	f04f 0900 	mov.w	r9, #0
   1c6ac:	9f02      	ldr	r7, [sp, #8]
   1c6ae:	eb01 0bc5 	add.w	fp, r1, r5, lsl #3
   1c6b2:	eb07 0ace 	add.w	sl, r7, lr, lsl #3
   1c6b6:	454a      	cmp	r2, r9
   1c6b8:	dd06      	ble.n	1c6c8 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x438>
   1c6ba:	e8fb 6702 	ldrd	r6, r7, [fp], #8
   1c6be:	f109 0901 	add.w	r9, r9, #1
   1c6c2:	e8ea 6702 	strd	r6, r7, [sl], #8
   1c6c6:	e7f6      	b.n	1c6b6 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x426>
    for (int k = 0; k < outer_size; ++k) {
   1c6c8:	9f03      	ldr	r7, [sp, #12]
   1c6ca:	f108 0801 	add.w	r8, r8, #1
   1c6ce:	4415      	add	r5, r2
   1c6d0:	44be      	add	lr, r7
   1c6d2:	e7e7      	b.n	1c6a4 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x414>
  for (int i = 0; i < values_count; ++i) {
   1c6d4:	f10c 0c01 	add.w	ip, ip, #1
   1c6d8:	4410      	add	r0, r2
   1c6da:	e7d4      	b.n	1c686 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3f6>
      TF_LITE_KERNEL_LOG(context, "Type '%s' is not supported by pack.",
   1c6dc:	9b00      	ldr	r3, [sp, #0]
   1c6de:	695d      	ldr	r5, [r3, #20]
   1c6e0:	f7f0 faf0 	bl	ccc4 <TfLiteTypeGetName>
   1c6e4:	4902      	ldr	r1, [pc, #8]	; (1c6f0 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x460>)
   1c6e6:	4602      	mov	r2, r0
   1c6e8:	9800      	ldr	r0, [sp, #0]
   1c6ea:	47a8      	blx	r5
      return kTfLiteError;
   1c6ec:	2001      	movs	r0, #1
   1c6ee:	e62c      	b.n	1c34a <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xba>
   1c6f0:	00035306 	.word	0x00035306

0001c6f4 <_ZN6tflite3ops5micro13Register_PACKEv>:

}  // namespace
}  // namespace pack

TfLiteRegistration Register_PACK() {
   1c6f4:	b510      	push	{r4, lr}
   1c6f6:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/pack::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1c6f8:	2220      	movs	r2, #32
   1c6fa:	2100      	movs	r1, #0
   1c6fc:	f014 fba7 	bl	30e4e <memset>
   1c700:	4b01      	ldr	r3, [pc, #4]	; (1c708 <_ZN6tflite3ops5micro13Register_PACKEv+0x14>)
}
   1c702:	4620      	mov	r0, r4
          /*version=*/0};
   1c704:	60e3      	str	r3, [r4, #12]
}
   1c706:	bd10      	pop	{r4, pc}
   1c708:	0001c291 	.word	0x0001c291

0001c70c <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode>:
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   1c70c:	680b      	ldr	r3, [r1, #0]
  TfLiteTensor* output;
  int dims;
  ResizingCategory resizing_category;
};

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1c70e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TF_LITE_ENSURE(context, NumInputs(node) == 2 || NumInputs(node) == 3);
   1c712:	681b      	ldr	r3, [r3, #0]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1c714:	4604      	mov	r4, r0
  TF_LITE_ENSURE(context, NumInputs(node) == 2 || NumInputs(node) == 3);
   1c716:	3b02      	subs	r3, #2
   1c718:	2b01      	cmp	r3, #1
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1c71a:	460a      	mov	r2, r1
   1c71c:	b090      	sub	sp, #64	; 0x40
  TF_LITE_ENSURE(context, NumInputs(node) == 2 || NumInputs(node) == 3);
   1c71e:	d90a      	bls.n	1c736 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2a>
   1c720:	4b58      	ldr	r3, [pc, #352]	; (1c884 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x178>)
   1c722:	4a59      	ldr	r2, [pc, #356]	; (1c888 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
   1c724:	9300      	str	r3, [sp, #0]
   1c726:	6944      	ldr	r4, [r0, #20]
   1c728:	2347      	movs	r3, #71	; 0x47
   1c72a:	4958      	ldr	r1, [pc, #352]	; (1c88c <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x180>)
   1c72c:	47a0      	blx	r4
  }

  // Current implementations rely on the inputs being <= 4D.
  TF_LITE_ENSURE(
      context, op_context.dims <= reference_ops::PadKernelMaxDimensionCount());
  TF_LITE_ENSURE(context, IsConstantTensor(op_context.paddings));
   1c72e:	2001      	movs	r0, #1
  return kTfLiteOk;
}
   1c730:	b010      	add	sp, #64	; 0x40
   1c732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   1c736:	684b      	ldr	r3, [r1, #4]
   1c738:	681d      	ldr	r5, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   1c73a:	2d01      	cmp	r5, #1
   1c73c:	d00c      	beq.n	1c758 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x4c>
   1c73e:	2601      	movs	r6, #1
   1c740:	4b53      	ldr	r3, [pc, #332]	; (1c890 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x184>)
   1c742:	e9cd 5602 	strd	r5, r6, [sp, #8]
   1c746:	9301      	str	r3, [sp, #4]
   1c748:	4b52      	ldr	r3, [pc, #328]	; (1c894 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x188>)
   1c74a:	4a4f      	ldr	r2, [pc, #316]	; (1c888 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
   1c74c:	9300      	str	r3, [sp, #0]
   1c74e:	6944      	ldr	r4, [r0, #20]
   1c750:	2348      	movs	r3, #72	; 0x48
   1c752:	4951      	ldr	r1, [pc, #324]	; (1c898 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
   1c754:	47a0      	blx	r4
   1c756:	e7ea      	b.n	1c72e <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
  PadContext op_context(context, node);
   1c758:	4601      	mov	r1, r0
   1c75a:	a804      	add	r0, sp, #16
   1c75c:	f010 fc34 	bl	2cfc8 <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode>
  TF_LITE_ENSURE_EQ(context, op_context.input->type, op_context.output->type);
   1c760:	9b05      	ldr	r3, [sp, #20]
   1c762:	9a07      	ldr	r2, [sp, #28]
   1c764:	781b      	ldrb	r3, [r3, #0]
   1c766:	7812      	ldrb	r2, [r2, #0]
   1c768:	4293      	cmp	r3, r2
   1c76a:	d00c      	beq.n	1c786 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x7a>
   1c76c:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1c770:	4b4a      	ldr	r3, [pc, #296]	; (1c89c <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x190>)
   1c772:	9301      	str	r3, [sp, #4]
   1c774:	4b4a      	ldr	r3, [pc, #296]	; (1c8a0 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x194>)
   1c776:	9300      	str	r3, [sp, #0]
   1c778:	234b      	movs	r3, #75	; 0x4b
   1c77a:	6966      	ldr	r6, [r4, #20]
    TF_LITE_ENSURE_EQ(context, op_context.input->type,
   1c77c:	4620      	mov	r0, r4
   1c77e:	4a42      	ldr	r2, [pc, #264]	; (1c888 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
   1c780:	4945      	ldr	r1, [pc, #276]	; (1c898 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
   1c782:	47b0      	blx	r6
   1c784:	e7d3      	b.n	1c72e <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
  if (op_context.constant_values != nullptr) {
   1c786:	9a04      	ldr	r2, [sp, #16]
   1c788:	b15a      	cbz	r2, 1c7a2 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x96>
    TF_LITE_ENSURE_EQ(context, op_context.input->type,
   1c78a:	7812      	ldrb	r2, [r2, #0]
   1c78c:	4293      	cmp	r3, r2
   1c78e:	d008      	beq.n	1c7a2 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x96>
   1c790:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1c794:	4b43      	ldr	r3, [pc, #268]	; (1c8a4 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x198>)
   1c796:	9301      	str	r3, [sp, #4]
   1c798:	4b41      	ldr	r3, [pc, #260]	; (1c8a0 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x194>)
   1c79a:	9300      	str	r3, [sp, #0]
   1c79c:	6966      	ldr	r6, [r4, #20]
   1c79e:	234d      	movs	r3, #77	; 0x4d
   1c7a0:	e7ec      	b.n	1c77c <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x70>
  TF_LITE_ENSURE_EQ(context, GetTensorShape(op_context.paddings).FlatSize(),
   1c7a2:	9906      	ldr	r1, [sp, #24]
   1c7a4:	a80a      	add	r0, sp, #40	; 0x28
   1c7a6:	f00a ff49 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1c7aa:	a80a      	add	r0, sp, #40	; 0x28
   1c7ac:	f00a ff91 	bl	276d2 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   1c7b0:	4606      	mov	r6, r0
   1c7b2:	9b07      	ldr	r3, [sp, #28]
   1c7b4:	a80a      	add	r0, sp, #40	; 0x28
   1c7b6:	689b      	ldr	r3, [r3, #8]
   1c7b8:	681d      	ldr	r5, [r3, #0]
   1c7ba:	f00a fefa 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   1c7be:	006d      	lsls	r5, r5, #1
   1c7c0:	42ae      	cmp	r6, r5
   1c7c2:	d01a      	beq.n	1c7fa <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0xee>
   1c7c4:	9906      	ldr	r1, [sp, #24]
   1c7c6:	a80a      	add	r0, sp, #40	; 0x28
   1c7c8:	6965      	ldr	r5, [r4, #20]
   1c7ca:	f00a ff37 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1c7ce:	a80a      	add	r0, sp, #40	; 0x28
   1c7d0:	f00a ff7f 	bl	276d2 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   1c7d4:	9b07      	ldr	r3, [sp, #28]
   1c7d6:	4a2c      	ldr	r2, [pc, #176]	; (1c888 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
   1c7d8:	689b      	ldr	r3, [r3, #8]
   1c7da:	492f      	ldr	r1, [pc, #188]	; (1c898 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
   1c7dc:	681b      	ldr	r3, [r3, #0]
   1c7de:	005b      	lsls	r3, r3, #1
   1c7e0:	e9cd 0302 	strd	r0, r3, [sp, #8]
   1c7e4:	4b30      	ldr	r3, [pc, #192]	; (1c8a8 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x19c>)
   1c7e6:	4620      	mov	r0, r4
   1c7e8:	9301      	str	r3, [sp, #4]
   1c7ea:	4b30      	ldr	r3, [pc, #192]	; (1c8ac <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x1a0>)
   1c7ec:	9300      	str	r3, [sp, #0]
   1c7ee:	2352      	movs	r3, #82	; 0x52
   1c7f0:	47a8      	blx	r5
   1c7f2:	a80a      	add	r0, sp, #40	; 0x28
   1c7f4:	f00a fedd 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   1c7f8:	e799      	b.n	1c72e <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
  const int32* paddings_data = GetTensorData<int32>(op_context.paddings);
   1c7fa:	9906      	ldr	r1, [sp, #24]
   1c7fc:	b339      	cbz	r1, 1c84e <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x142>
   1c7fe:	684d      	ldr	r5, [r1, #4]
  for (int i = 0; i < op_context.output->dims->size; i++) {
   1c800:	9b07      	ldr	r3, [sp, #28]
    int expected_dim = op_context.input->dims->data[i] + paddings_data[i * 2] +
   1c802:	f8dd e014 	ldr.w	lr, [sp, #20]
  for (int i = 0; i < op_context.output->dims->size; i++) {
   1c806:	6898      	ldr	r0, [r3, #8]
   1c808:	2300      	movs	r3, #0
   1c80a:	f850 cb04 	ldr.w	ip, [r0], #4
                       paddings_data[i * 2 + 1];
   1c80e:	f105 0804 	add.w	r8, r5, #4
  for (int i = 0; i < op_context.output->dims->size; i++) {
   1c812:	459c      	cmp	ip, r3
   1c814:	dd1f      	ble.n	1c856 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x14a>
    int expected_dim = op_context.input->dims->data[i] + paddings_data[i * 2] +
   1c816:	f855 6033 	ldr.w	r6, [r5, r3, lsl #3]
   1c81a:	f858 2033 	ldr.w	r2, [r8, r3, lsl #3]
    int output_dim = op_context.output->dims->data[i];
   1c81e:	f850 7b04 	ldr.w	r7, [r0], #4
    int expected_dim = op_context.input->dims->data[i] + paddings_data[i * 2] +
   1c822:	4432      	add	r2, r6
   1c824:	f8de 6008 	ldr.w	r6, [lr, #8]
   1c828:	eb06 0683 	add.w	r6, r6, r3, lsl #2
   1c82c:	6876      	ldr	r6, [r6, #4]
   1c82e:	4432      	add	r2, r6
    TF_LITE_ENSURE_EQ(context, output_dim, expected_dim);
   1c830:	4297      	cmp	r7, r2
   1c832:	d00e      	beq.n	1c852 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x146>
   1c834:	4b1e      	ldr	r3, [pc, #120]	; (1c8b0 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x1a4>)
   1c836:	e9cd 7202 	strd	r7, r2, [sp, #8]
   1c83a:	9301      	str	r3, [sp, #4]
   1c83c:	4b1d      	ldr	r3, [pc, #116]	; (1c8b4 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x1a8>)
   1c83e:	4620      	mov	r0, r4
   1c840:	9300      	str	r3, [sp, #0]
   1c842:	6965      	ldr	r5, [r4, #20]
   1c844:	235b      	movs	r3, #91	; 0x5b
   1c846:	4a10      	ldr	r2, [pc, #64]	; (1c888 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
   1c848:	4913      	ldr	r1, [pc, #76]	; (1c898 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
   1c84a:	47a8      	blx	r5
   1c84c:	e76f      	b.n	1c72e <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
   1c84e:	460d      	mov	r5, r1
   1c850:	e7d6      	b.n	1c800 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0xf4>
  for (int i = 0; i < op_context.output->dims->size; i++) {
   1c852:	3301      	adds	r3, #1
   1c854:	e7dd      	b.n	1c812 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x106>
  TF_LITE_ENSURE(
   1c856:	9b08      	ldr	r3, [sp, #32]
   1c858:	2b04      	cmp	r3, #4
   1c85a:	dd08      	ble.n	1c86e <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x162>
   1c85c:	4b16      	ldr	r3, [pc, #88]	; (1c8b8 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x1ac>)
   1c85e:	9300      	str	r3, [sp, #0]
   1c860:	235f      	movs	r3, #95	; 0x5f
   1c862:	6965      	ldr	r5, [r4, #20]
  TF_LITE_ENSURE(context, IsConstantTensor(op_context.paddings));
   1c864:	4620      	mov	r0, r4
   1c866:	4a08      	ldr	r2, [pc, #32]	; (1c888 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
   1c868:	4908      	ldr	r1, [pc, #32]	; (1c88c <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x180>)
   1c86a:	47a8      	blx	r5
   1c86c:	e75f      	b.n	1c72e <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
   1c86e:	7d0b      	ldrb	r3, [r1, #20]
   1c870:	2b01      	cmp	r3, #1
   1c872:	d004      	beq.n	1c87e <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x172>
   1c874:	4b11      	ldr	r3, [pc, #68]	; (1c8bc <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x1b0>)
   1c876:	9300      	str	r3, [sp, #0]
   1c878:	6965      	ldr	r5, [r4, #20]
   1c87a:	2361      	movs	r3, #97	; 0x61
   1c87c:	e7f2      	b.n	1c864 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x158>
  return kTfLiteOk;
   1c87e:	2000      	movs	r0, #0
   1c880:	e756      	b.n	1c730 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x24>
   1c882:	bf00      	nop
   1c884:	0003534f 	.word	0x0003534f
   1c888:	0003532a 	.word	0x0003532a
   1c88c:	00034b9c 	.word	0x00034b9c
   1c890:	00035814 	.word	0x00035814
   1c894:	00034aa6 	.word	0x00034aa6
   1c898:	00034a7c 	.word	0x00034a7c
   1c89c:	0003537c 	.word	0x0003537c
   1c8a0:	00035394 	.word	0x00035394
   1c8a4:	000353ab 	.word	0x000353ab
   1c8a8:	000353cc 	.word	0x000353cc
   1c8ac:	000353ee 	.word	0x000353ee
   1c8b0:	0003541d 	.word	0x0003541d
   1c8b4:	0003542a 	.word	0x0003542a
   1c8b8:	00035435 	.word	0x00035435
   1c8bc:	00035474 	.word	0x00035474

0001c8c0 <_ZN6tflite3ops5micro12Register_PADEv>:
  return kTfLiteOk;
}

}  // namespace pad

TfLiteRegistration Register_PAD() {
   1c8c0:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/pad::Prepare,
          /*invoke=*/pad::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1c8c2:	4604      	mov	r4, r0
TfLiteRegistration Register_PAD() {
   1c8c4:	4606      	mov	r6, r0
          /*version=*/0};
   1c8c6:	4d04      	ldr	r5, [pc, #16]	; (1c8d8 <_ZN6tflite3ops5micro12Register_PADEv+0x18>)
   1c8c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1c8ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1c8cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1c8d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1c8d4:	4630      	mov	r0, r6
   1c8d6:	bd70      	pop	{r4, r5, r6, pc}
   1c8d8:	00031a98 	.word	0x00031a98

0001c8dc <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1c8dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c8e0:	ed2d 8b02 	vpush	{d8}
   1c8e4:	b0a5      	sub	sp, #148	; 0x94
   1c8e6:	460a      	mov	r2, r1
   1c8e8:	4604      	mov	r4, r0
  PadContext op_context(context, node);
   1c8ea:	4601      	mov	r1, r0
   1c8ec:	a807      	add	r0, sp, #28
   1c8ee:	f010 fb6b 	bl	2cfc8 <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode>
  if (op_context.constant_values != nullptr) {
   1c8f2:	9b07      	ldr	r3, [sp, #28]
   1c8f4:	b343      	cbz	r3, 1c948 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x6c>
  for (int i = 0; i < dims->size; ++i) {
   1c8f6:	6899      	ldr	r1, [r3, #8]
   1c8f8:	2000      	movs	r0, #0
  int64_t count = 1;
   1c8fa:	2201      	movs	r2, #1
   1c8fc:	2300      	movs	r3, #0
  for (int i = 0; i < dims->size; ++i) {
   1c8fe:	f851 7b04 	ldr.w	r7, [r1], #4
   1c902:	4287      	cmp	r7, r0
   1c904:	dd0c      	ble.n	1c920 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x44>
    count *= dims->data[i];
   1c906:	f851 6b04 	ldr.w	r6, [r1], #4
  for (int i = 0; i < dims->size; ++i) {
   1c90a:	3001      	adds	r0, #1
    count *= dims->data[i];
   1c90c:	ea4f 79e6 	mov.w	r9, r6, asr #31
   1c910:	fb02 f509 	mul.w	r5, r2, r9
   1c914:	fb06 5503 	mla	r5, r6, r3, r5
   1c918:	fba2 2306 	umull	r2, r3, r2, r6
   1c91c:	442b      	add	r3, r5
  for (int i = 0; i < dims->size; ++i) {
   1c91e:	e7f0      	b.n	1c902 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x26>
    TF_LITE_ENSURE_EQ(context, NumElements(op_context.constant_values), 1);
   1c920:	2b00      	cmp	r3, #0
   1c922:	bf08      	it	eq
   1c924:	2a01      	cmpeq	r2, #1
   1c926:	d00f      	beq.n	1c948 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x6c>
   1c928:	2501      	movs	r5, #1
   1c92a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1c92e:	4b8a      	ldr	r3, [pc, #552]	; (1cb58 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x27c>)
   1c930:	9504      	str	r5, [sp, #16]
   1c932:	9301      	str	r3, [sp, #4]
   1c934:	4b89      	ldr	r3, [pc, #548]	; (1cb5c <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x280>)
   1c936:	4620      	mov	r0, r4
   1c938:	9300      	str	r3, [sp, #0]
   1c93a:	6966      	ldr	r6, [r4, #20]
   1c93c:	236a      	movs	r3, #106	; 0x6a
   1c93e:	4a88      	ldr	r2, [pc, #544]	; (1cb60 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x284>)
   1c940:	4988      	ldr	r1, [pc, #544]	; (1cb64 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x288>)
   1c942:	47b0      	blx	r6
      return kTfLiteError;
   1c944:	2001      	movs	r0, #1
   1c946:	e050      	b.n	1c9ea <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x10e>
  const int32* paddings_data = GetTensorData<int32>(op_context.paddings);
   1c948:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1c94a:	b105      	cbz	r5, 1c94e <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x72>
   1c94c:	686d      	ldr	r5, [r5, #4]
  memset(&op_params, 0, sizeof(PadParams));
   1c94e:	222c      	movs	r2, #44	; 0x2c
   1c950:	2100      	movs	r1, #0
   1c952:	a819      	add	r0, sp, #100	; 0x64
   1c954:	f014 fa7b 	bl	30e4e <memset>
  op_params.left_padding_count = op_context.dims;
   1c958:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c95a:	a919      	add	r1, sp, #100	; 0x64
   1c95c:	b25a      	sxtb	r2, r3
   1c95e:	f88d 2064 	strb.w	r2, [sp, #100]	; 0x64
  op_params.right_padding_count = op_context.dims;
   1c962:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    op_params.right_padding[idx] = paddings_data[idx * 2 + 1];
   1c966:	1d28      	adds	r0, r5, #4
  for (int idx = op_context.dims - 1; idx >= 0; --idx) {
   1c968:	1e5a      	subs	r2, r3, #1
   1c96a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1c96e:	2a00      	cmp	r2, #0
   1c970:	db08      	blt.n	1c984 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0xa8>
    op_params.left_padding[idx] = paddings_data[idx * 2];
   1c972:	f855 1032 	ldr.w	r1, [r5, r2, lsl #3]
   1c976:	f843 1904 	str.w	r1, [r3], #-4
    op_params.right_padding[idx] = paddings_data[idx * 2 + 1];
   1c97a:	f850 1032 	ldr.w	r1, [r0, r2, lsl #3]
  for (int idx = op_context.dims - 1; idx >= 0; --idx) {
   1c97e:	3a01      	subs	r2, #1
    op_params.right_padding[idx] = paddings_data[idx * 2 + 1];
   1c980:	6199      	str	r1, [r3, #24]
  for (int idx = op_context.dims - 1; idx >= 0; --idx) {
   1c982:	e7f4      	b.n	1c96e <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x92>
  switch (op_context.input->type) {
   1c984:	9908      	ldr	r1, [sp, #32]
   1c986:	7808      	ldrb	r0, [r1, #0]
   1c988:	1e43      	subs	r3, r0, #1
   1c98a:	2b08      	cmp	r3, #8
   1c98c:	f200 811d 	bhi.w	1cbca <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x2ee>
   1c990:	e8df f013 	tbh	[pc, r3, lsl #1]
   1c994:	00fe0009 	.word	0x00fe0009
   1c998:	011b0032 	.word	0x011b0032
   1c99c:	011b011b 	.word	0x011b011b
   1c9a0:	011b011b 	.word	0x011b011b
   1c9a4:	0096      	.short	0x0096
      float pad_value = op_context.constant_values == nullptr
   1c9a6:	9b07      	ldr	r3, [sp, #28]
                            ? 0.f
   1c9a8:	b323      	cbz	r3, 1c9f4 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x118>
   1c9aa:	685b      	ldr	r3, [r3, #4]
   1c9ac:	681b      	ldr	r3, [r3, #0]
        TF_LITE_PAD(reference_ops, PadImageStyle, float, pad_value);
   1c9ae:	a80d      	add	r0, sp, #52	; 0x34
   1c9b0:	9306      	str	r3, [sp, #24]
        TF_LITE_PAD(reference_ops, Pad, float, pad_value);
   1c9b2:	f00a fe43 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1c9b6:	9c08      	ldr	r4, [sp, #32]
   1c9b8:	b104      	cbz	r4, 1c9bc <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0xe0>
   1c9ba:	6864      	ldr	r4, [r4, #4]
   1c9bc:	990a      	ldr	r1, [sp, #40]	; 0x28
   1c9be:	a813      	add	r0, sp, #76	; 0x4c
   1c9c0:	f00a fe3c 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1c9c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1c9c6:	b103      	cbz	r3, 1c9ca <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0xee>
   1c9c8:	685b      	ldr	r3, [r3, #4]
template <typename T, typename P>
inline void Pad(const tflite::PadParams& op_params,
                const RuntimeShape& input_shape, const T* input_data,
                const P* pad_value_ptr, const RuntimeShape& output_shape,
                T* output_data) {
  PadImpl(op_params, input_shape, input_data, pad_value_ptr, output_shape,
   1c9ca:	9301      	str	r3, [sp, #4]
   1c9cc:	ab13      	add	r3, sp, #76	; 0x4c
   1c9ce:	9300      	str	r3, [sp, #0]
   1c9d0:	4622      	mov	r2, r4
   1c9d2:	ab06      	add	r3, sp, #24
   1c9d4:	a90d      	add	r1, sp, #52	; 0x34
   1c9d6:	a819      	add	r0, sp, #100	; 0x64
   1c9d8:	f010 fbf5 	bl	2d1c6 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>
        TF_LITE_PAD(reference_ops, Pad, int8_t, pad_value);
   1c9dc:	a813      	add	r0, sp, #76	; 0x4c
      TF_LITE_PAD(reference_ops, Pad, int32_t, pad_value);
   1c9de:	f00a fde8 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   1c9e2:	a80d      	add	r0, sp, #52	; 0x34
   1c9e4:	f00a fde5 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   1c9e8:	2000      	movs	r0, #0
}
   1c9ea:	b025      	add	sp, #148	; 0x94
   1c9ec:	ecbd 8b02 	vpop	{d8}
   1c9f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                            ? 0.f
   1c9f4:	2300      	movs	r3, #0
   1c9f6:	e7da      	b.n	1c9ae <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0xd2>
      if (op_context.constant_values == nullptr) {
   1c9f8:	980a      	ldr	r0, [sp, #40]	; 0x28
   1c9fa:	9a07      	ldr	r2, [sp, #28]
   1c9fc:	6903      	ldr	r3, [r0, #16]
   1c9fe:	2a00      	cmp	r2, #0
   1ca00:	d12b      	bne.n	1ca5a <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x17e>
        TF_LITE_ENSURE(context, op_context.output->params.zero_point >=
   1ca02:	2b00      	cmp	r3, #0
   1ca04:	da08      	bge.n	1ca18 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x13c>
   1ca06:	4b58      	ldr	r3, [pc, #352]	; (1cb68 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x28c>)
   1ca08:	9300      	str	r3, [sp, #0]
   1ca0a:	2391      	movs	r3, #145	; 0x91
   1ca0c:	6965      	ldr	r5, [r4, #20]
        TF_LITE_ENSURE(context, op_context.output->params.scale ==
   1ca0e:	4620      	mov	r0, r4
   1ca10:	4a53      	ldr	r2, [pc, #332]	; (1cb60 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x284>)
   1ca12:	4956      	ldr	r1, [pc, #344]	; (1cb6c <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x290>)
   1ca14:	47a8      	blx	r5
   1ca16:	e795      	b.n	1c944 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x68>
        TF_LITE_ENSURE(context, op_context.output->params.zero_point <=
   1ca18:	2bff      	cmp	r3, #255	; 0xff
   1ca1a:	dd04      	ble.n	1ca26 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x14a>
   1ca1c:	4b54      	ldr	r3, [pc, #336]	; (1cb70 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x294>)
   1ca1e:	9300      	str	r3, [sp, #0]
   1ca20:	6965      	ldr	r5, [r4, #20]
   1ca22:	2393      	movs	r3, #147	; 0x93
   1ca24:	e7f3      	b.n	1ca0e <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x132>
        pad_value = static_cast<uint8_t>(op_context.output->params.zero_point);
   1ca26:	b2db      	uxtb	r3, r3
        TF_LITE_PAD(reference_ops, PadImageStyle, uint8_t, pad_value);
   1ca28:	a80d      	add	r0, sp, #52	; 0x34
   1ca2a:	f88d 3018 	strb.w	r3, [sp, #24]
        TF_LITE_PAD(reference_ops, Pad, uint8_t, pad_value);
   1ca2e:	f00a fe05 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1ca32:	9c08      	ldr	r4, [sp, #32]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1ca34:	b104      	cbz	r4, 1ca38 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x15c>
   1ca36:	6864      	ldr	r4, [r4, #4]
   1ca38:	990a      	ldr	r1, [sp, #40]	; 0x28
   1ca3a:	a813      	add	r0, sp, #76	; 0x4c
   1ca3c:	f00a fdfe 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1ca40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1ca42:	b103      	cbz	r3, 1ca46 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x16a>
   1ca44:	685b      	ldr	r3, [r3, #4]
   1ca46:	9301      	str	r3, [sp, #4]
   1ca48:	ab13      	add	r3, sp, #76	; 0x4c
   1ca4a:	9300      	str	r3, [sp, #0]
   1ca4c:	4622      	mov	r2, r4
   1ca4e:	ab06      	add	r3, sp, #24
   1ca50:	a90d      	add	r1, sp, #52	; 0x34
   1ca52:	a819      	add	r0, sp, #100	; 0x64
   1ca54:	f010 fc6d 	bl	2d332 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>
   1ca58:	e7c0      	b.n	1c9dc <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x100>
        TF_LITE_ENSURE_EQ(context, op_context.output->params.zero_point,
   1ca5a:	6915      	ldr	r5, [r2, #16]
   1ca5c:	429d      	cmp	r5, r3
   1ca5e:	d00c      	beq.n	1ca7a <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x19e>
   1ca60:	e9cd 3502 	strd	r3, r5, [sp, #8]
   1ca64:	4b43      	ldr	r3, [pc, #268]	; (1cb74 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x298>)
   1ca66:	9301      	str	r3, [sp, #4]
   1ca68:	4b43      	ldr	r3, [pc, #268]	; (1cb78 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x29c>)
   1ca6a:	9300      	str	r3, [sp, #0]
   1ca6c:	2399      	movs	r3, #153	; 0x99
   1ca6e:	6965      	ldr	r5, [r4, #20]
        TF_LITE_ENSURE_EQ(context, op_context.output->params.zero_point,
   1ca70:	4620      	mov	r0, r4
   1ca72:	4a3b      	ldr	r2, [pc, #236]	; (1cb60 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x284>)
   1ca74:	493b      	ldr	r1, [pc, #236]	; (1cb64 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x288>)
   1ca76:	47a8      	blx	r5
   1ca78:	e764      	b.n	1c944 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x68>
        TF_LITE_ENSURE_EQ(
   1ca7a:	ed90 8a03 	vldr	s16, [r0, #12]
   1ca7e:	edd2 7a03 	vldr	s15, [r2, #12]
   1ca82:	eeb4 8a67 	vcmp.f32	s16, s15
   1ca86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ca8a:	d016      	beq.n	1caba <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x1de>
   1ca8c:	ee17 0a90 	vmov	r0, s15
   1ca90:	f7ef fd3a 	bl	c508 <__aeabi_f2d>
   1ca94:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1ca98:	ee18 0a10 	vmov	r0, s16
   1ca9c:	f7ef fd34 	bl	c508 <__aeabi_f2d>
   1caa0:	4b36      	ldr	r3, [pc, #216]	; (1cb7c <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x2a0>)
   1caa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1caa6:	9301      	str	r3, [sp, #4]
   1caa8:	4b35      	ldr	r3, [pc, #212]	; (1cb80 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x2a4>)
   1caaa:	4620      	mov	r0, r4
   1caac:	9300      	str	r3, [sp, #0]
   1caae:	6965      	ldr	r5, [r4, #20]
   1cab0:	239b      	movs	r3, #155	; 0x9b
   1cab2:	4a2b      	ldr	r2, [pc, #172]	; (1cb60 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x284>)
   1cab4:	492b      	ldr	r1, [pc, #172]	; (1cb64 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x288>)
   1cab6:	47a8      	blx	r5
   1cab8:	e744      	b.n	1c944 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x68>
        pad_value = *GetTensorData<uint8_t>(op_context.constant_values);
   1caba:	6853      	ldr	r3, [r2, #4]
   1cabc:	781b      	ldrb	r3, [r3, #0]
   1cabe:	e7b3      	b.n	1ca28 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x14c>
      if (op_context.constant_values == nullptr) {
   1cac0:	980a      	ldr	r0, [sp, #40]	; 0x28
   1cac2:	9a07      	ldr	r2, [sp, #28]
   1cac4:	6903      	ldr	r3, [r0, #16]
   1cac6:	bb42      	cbnz	r2, 1cb1a <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x23e>
        TF_LITE_ENSURE(context, op_context.output->params.zero_point >=
   1cac8:	f113 0f80 	cmn.w	r3, #128	; 0x80
   1cacc:	da04      	bge.n	1cad8 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x1fc>
   1cace:	4b2d      	ldr	r3, [pc, #180]	; (1cb84 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x2a8>)
   1cad0:	9300      	str	r3, [sp, #0]
   1cad2:	6965      	ldr	r5, [r4, #20]
   1cad4:	23ab      	movs	r3, #171	; 0xab
   1cad6:	e79a      	b.n	1ca0e <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x132>
        TF_LITE_ENSURE(context, op_context.output->params.zero_point <=
   1cad8:	2b7f      	cmp	r3, #127	; 0x7f
   1cada:	dd04      	ble.n	1cae6 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x20a>
   1cadc:	4b2a      	ldr	r3, [pc, #168]	; (1cb88 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
   1cade:	9300      	str	r3, [sp, #0]
   1cae0:	6965      	ldr	r5, [r4, #20]
   1cae2:	23ad      	movs	r3, #173	; 0xad
   1cae4:	e793      	b.n	1ca0e <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x132>
        pad_value = static_cast<int8_t>(op_context.output->params.zero_point);
   1cae6:	b25b      	sxtb	r3, r3
        TF_LITE_PAD(reference_ops, PadImageStyle, int8_t, pad_value);
   1cae8:	a80d      	add	r0, sp, #52	; 0x34
   1caea:	f88d 3018 	strb.w	r3, [sp, #24]
        TF_LITE_PAD(reference_ops, Pad, int8_t, pad_value);
   1caee:	f00a fda5 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1caf2:	9c08      	ldr	r4, [sp, #32]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1caf4:	b104      	cbz	r4, 1caf8 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x21c>
   1caf6:	6864      	ldr	r4, [r4, #4]
   1caf8:	990a      	ldr	r1, [sp, #40]	; 0x28
   1cafa:	a813      	add	r0, sp, #76	; 0x4c
   1cafc:	f00a fd9e 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1cb00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1cb02:	b103      	cbz	r3, 1cb06 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x22a>
   1cb04:	685b      	ldr	r3, [r3, #4]
   1cb06:	9301      	str	r3, [sp, #4]
   1cb08:	ab13      	add	r3, sp, #76	; 0x4c
   1cb0a:	9300      	str	r3, [sp, #0]
   1cb0c:	4622      	mov	r2, r4
   1cb0e:	ab06      	add	r3, sp, #24
   1cb10:	a90d      	add	r1, sp, #52	; 0x34
   1cb12:	a819      	add	r0, sp, #100	; 0x64
   1cb14:	f010 fcc4 	bl	2d4a0 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>
   1cb18:	e760      	b.n	1c9dc <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x100>
        TF_LITE_ENSURE_EQ(context, op_context.output->params.zero_point,
   1cb1a:	6915      	ldr	r5, [r2, #16]
   1cb1c:	429d      	cmp	r5, r3
   1cb1e:	d008      	beq.n	1cb32 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x256>
   1cb20:	e9cd 3502 	strd	r3, r5, [sp, #8]
   1cb24:	4b13      	ldr	r3, [pc, #76]	; (1cb74 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x298>)
   1cb26:	9301      	str	r3, [sp, #4]
   1cb28:	4b13      	ldr	r3, [pc, #76]	; (1cb78 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x29c>)
   1cb2a:	9300      	str	r3, [sp, #0]
   1cb2c:	6965      	ldr	r5, [r4, #20]
   1cb2e:	23b3      	movs	r3, #179	; 0xb3
   1cb30:	e79e      	b.n	1ca70 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x194>
        TF_LITE_ENSURE(context, op_context.output->params.scale ==
   1cb32:	ed90 7a03 	vldr	s14, [r0, #12]
   1cb36:	edd2 7a03 	vldr	s15, [r2, #12]
   1cb3a:	eeb4 7a67 	vcmp.f32	s14, s15
   1cb3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1cb42:	d004      	beq.n	1cb4e <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x272>
   1cb44:	4b11      	ldr	r3, [pc, #68]	; (1cb8c <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x2b0>)
   1cb46:	9300      	str	r3, [sp, #0]
   1cb48:	6965      	ldr	r5, [r4, #20]
   1cb4a:	23b5      	movs	r3, #181	; 0xb5
   1cb4c:	e75f      	b.n	1ca0e <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x132>
        pad_value = *GetTensorData<int8_t>(op_context.constant_values);
   1cb4e:	6853      	ldr	r3, [r2, #4]
   1cb50:	f993 3000 	ldrsb.w	r3, [r3]
   1cb54:	e7c8      	b.n	1cae8 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x20c>
   1cb56:	bf00      	nop
   1cb58:	00035814 	.word	0x00035814
   1cb5c:	0003549a 	.word	0x0003549a
   1cb60:	0003532a 	.word	0x0003532a
   1cb64:	00034a7c 	.word	0x00034a7c
   1cb68:	000354c2 	.word	0x000354c2
   1cb6c:	00034b9c 	.word	0x00034b9c
   1cb70:	0003550e 	.word	0x0003550e
   1cb74:	0003555a 	.word	0x0003555a
   1cb78:	00035588 	.word	0x00035588
   1cb7c:	000355ad 	.word	0x000355ad
   1cb80:	000355eb 	.word	0x000355eb
   1cb84:	00035620 	.word	0x00035620
   1cb88:	0003566b 	.word	0x0003566b
   1cb8c:	000356b6 	.word	0x000356b6
          op_context.constant_values == nullptr
   1cb90:	9b07      	ldr	r3, [sp, #28]
              ? 0
   1cb92:	b10b      	cbz	r3, 1cb98 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x2bc>
   1cb94:	685b      	ldr	r3, [r3, #4]
   1cb96:	681b      	ldr	r3, [r3, #0]
      TF_LITE_PAD(reference_ops, Pad, int32_t, pad_value);
   1cb98:	a80d      	add	r0, sp, #52	; 0x34
   1cb9a:	9306      	str	r3, [sp, #24]
   1cb9c:	f00a fd4e 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1cba0:	9c08      	ldr	r4, [sp, #32]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1cba2:	b104      	cbz	r4, 1cba6 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x2ca>
   1cba4:	6864      	ldr	r4, [r4, #4]
   1cba6:	ad13      	add	r5, sp, #76	; 0x4c
   1cba8:	4628      	mov	r0, r5
   1cbaa:	990a      	ldr	r1, [sp, #40]	; 0x28
   1cbac:	f00a fd46 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1cbb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1cbb2:	b103      	cbz	r3, 1cbb6 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x2da>
   1cbb4:	685b      	ldr	r3, [r3, #4]
template <>
inline void Pad(const tflite::PadParams& op_params,
                const RuntimeShape& input_shape, const int32* input_data,
                const int32* pad_value_ptr, const RuntimeShape& output_shape,
                int32* output_data) {
  PadImpl(op_params, input_shape, input_data, pad_value_ptr, output_shape,
   1cbb6:	e9cd 5300 	strd	r5, r3, [sp]
   1cbba:	a819      	add	r0, sp, #100	; 0x64
   1cbbc:	4622      	mov	r2, r4
   1cbbe:	ab06      	add	r3, sp, #24
   1cbc0:	a90d      	add	r1, sp, #52	; 0x34
   1cbc2:	f010 fa49 	bl	2d058 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>
   1cbc6:	4628      	mov	r0, r5
   1cbc8:	e709      	b.n	1c9de <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x102>
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported by Pad.",
   1cbca:	6965      	ldr	r5, [r4, #20]
   1cbcc:	f7f0 f87a 	bl	ccc4 <TfLiteTypeGetName>
   1cbd0:	4902      	ldr	r1, [pc, #8]	; (1cbdc <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x300>)
   1cbd2:	4602      	mov	r2, r0
   1cbd4:	4620      	mov	r0, r4
   1cbd6:	47a8      	blx	r5
   1cbd8:	e6b4      	b.n	1c944 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x68>
   1cbda:	bf00      	nop
   1cbdc:	00035702 	.word	0x00035702

0001cbe0 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace reference_ops {

inline void AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const float* input_data,
                        const RuntimeShape& output_shape, float* output_data) {
   1cbe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cbe4:	ed2d 8b04 	vpush	{d8-d9}
   1cbe8:	461e      	mov	r6, r3
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   1cbea:	680b      	ldr	r3, [r1, #0]
                        const RuntimeShape& output_shape, float* output_data) {
   1cbec:	b095      	sub	sp, #84	; 0x54
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   1cbee:	2b04      	cmp	r3, #4
                        const RuntimeShape& output_shape, float* output_data) {
   1cbf0:	4604      	mov	r4, r0
   1cbf2:	460d      	mov	r5, r1
   1cbf4:	9212      	str	r2, [sp, #72]	; 0x48
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   1cbf6:	d001      	beq.n	1cbfc <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1c>
   1cbf8:	f014 f8df 	bl	30dba <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   1cbfc:	6833      	ldr	r3, [r6, #0]
   1cbfe:	2b04      	cmp	r3, #4
   1cc00:	d1fa      	bne.n	1cbf8 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x18>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   1cc02:	2300      	movs	r3, #0
   1cc04:	4632      	mov	r2, r6
   1cc06:	4619      	mov	r1, r3
   1cc08:	4628      	mov	r0, r5
   1cc0a:	f00d fb87 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   1cc0e:	2303      	movs	r3, #3
   1cc10:	4632      	mov	r2, r6
   1cc12:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   1cc14:	9007      	str	r0, [sp, #28]
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   1cc16:	4628      	mov	r0, r5
   1cc18:	f00d fb80 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   1cc1c:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   1cc1e:	9008      	str	r0, [sp, #32]
  const int input_height = input_shape.Dims(1);
   1cc20:	4628      	mov	r0, r5
   1cc22:	f00a fcd1 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   1cc26:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   1cc28:	9009      	str	r0, [sp, #36]	; 0x24
  const int input_width = input_shape.Dims(2);
   1cc2a:	4628      	mov	r0, r5
   1cc2c:	f00a fccc 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   1cc30:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   1cc32:	900a      	str	r0, [sp, #40]	; 0x28
  const int output_height = output_shape.Dims(1);
   1cc34:	4630      	mov	r0, r6
   1cc36:	f00a fcc7 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   1cc3a:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   1cc3c:	900b      	str	r0, [sp, #44]	; 0x2c
  const int output_width = output_shape.Dims(2);
   1cc3e:	4630      	mov	r0, r6
   1cc40:	f00a fcc2 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
  const int stride_width = params.stride_width;
  for (int batch = 0; batch < batches; ++batch) {
   1cc44:	f04f 0b00 	mov.w	fp, #0
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              total +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
              filter_count++;
   1cc48:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
  const int stride_height = params.stride_height;
   1cc4c:	68e3      	ldr	r3, [r4, #12]
  const int output_width = output_shape.Dims(2);
   1cc4e:	900c      	str	r0, [sp, #48]	; 0x30
  const int stride_height = params.stride_height;
   1cc50:	930d      	str	r3, [sp, #52]	; 0x34
  const int stride_width = params.stride_width;
   1cc52:	6923      	ldr	r3, [r4, #16]
   1cc54:	930e      	str	r3, [sp, #56]	; 0x38
  for (int batch = 0; batch < batches; ++batch) {
   1cc56:	9b07      	ldr	r3, [sp, #28]
   1cc58:	459b      	cmp	fp, r3
   1cc5a:	f280 808d 	bge.w	1cd78 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x198>
   1cc5e:	f04f 0a00 	mov.w	sl, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1cc62:	46d0      	mov	r8, sl
   1cc64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1cc66:	4598      	cmp	r8, r3
   1cc68:	f280 8083 	bge.w	1cd72 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x192>
              (out_y * stride_height) - params.padding_values.height;
   1cc6c:	2700      	movs	r7, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
   1cc6e:	46b9      	mov	r9, r7
   1cc70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1cc72:	4599      	cmp	r9, r3
   1cc74:	da78      	bge.n	1cd68 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x188>
        for (int channel = 0; channel < depth; ++channel) {
   1cc76:	2300      	movs	r3, #0
   1cc78:	9303      	str	r3, [sp, #12]
   1cc7a:	9b03      	ldr	r3, [sp, #12]
   1cc7c:	9a08      	ldr	r2, [sp, #32]
   1cc7e:	4293      	cmp	r3, r2
   1cc80:	da6d      	bge.n	1cd5e <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x17e>
              (out_x * stride_width) - params.padding_values.width;
   1cc82:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   1cc86:	69a0      	ldr	r0, [r4, #24]
          const int in_x_origin =
   1cc88:	1afa      	subs	r2, r7, r3
   1cc8a:	920f      	str	r2, [sp, #60]	; 0x3c
              (out_y * stride_height) - params.padding_values.height;
   1cc8c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
          const int filter_x_start = std::max(0, -in_x_origin);
   1cc90:	1bdb      	subs	r3, r3, r7
          const int in_y_origin =
   1cc92:	ebaa 0102 	sub.w	r1, sl, r2
   1cc96:	9105      	str	r1, [sp, #20]
          const int filter_x_start = std::max(0, -in_x_origin);
   1cc98:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   1cc9c:	9111      	str	r1, [sp, #68]	; 0x44
              std::min(params.filter_width, input_width - in_x_origin);
   1cc9e:	990a      	ldr	r1, [sp, #40]	; 0x28
          const int filter_y_start = std::max(0, -in_y_origin);
   1cca0:	eba2 020a 	sub.w	r2, r2, sl
              std::min(params.filter_width, input_width - in_x_origin);
   1cca4:	440b      	add	r3, r1
   1cca6:	4283      	cmp	r3, r0
   1cca8:	bfa8      	it	ge
   1ccaa:	4603      	movge	r3, r0
   1ccac:	9310      	str	r3, [sp, #64]	; 0x40
              std::min(params.filter_height, input_height - in_y_origin);
   1ccae:	9b09      	ldr	r3, [sp, #36]	; 0x24
          float filter_count = 0;
   1ccb0:	ed9f 8a34 	vldr	s16, [pc, #208]	; 1cd84 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1a4>
              std::min(params.filter_height, input_height - in_y_origin);
   1ccb4:	18d0      	adds	r0, r2, r3
   1ccb6:	6963      	ldr	r3, [r4, #20]
          float total = 0.f;
   1ccb8:	eef0 8a48 	vmov.f32	s17, s16
   1ccbc:	4298      	cmp	r0, r3
   1ccbe:	bfa8      	it	ge
   1ccc0:	4618      	movge	r0, r3
   1ccc2:	9b05      	ldr	r3, [sp, #20]
   1ccc4:	9006      	str	r0, [sp, #24]
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   1ccc6:	2a00      	cmp	r2, #0
   1ccc8:	bfa8      	it	ge
   1ccca:	189b      	addge	r3, r3, r2
   1cccc:	461a      	mov	r2, r3
   1ccce:	9b05      	ldr	r3, [sp, #20]
   1ccd0:	9906      	ldr	r1, [sp, #24]
   1ccd2:	1ad3      	subs	r3, r2, r3
   1ccd4:	4299      	cmp	r1, r3
   1ccd6:	dd1f      	ble.n	1cd18 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x138>
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1ccd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1ccda:	9304      	str	r3, [sp, #16]
   1ccdc:	9b04      	ldr	r3, [sp, #16]
   1ccde:	9910      	ldr	r1, [sp, #64]	; 0x40
   1cce0:	428b      	cmp	r3, r1
   1cce2:	da17      	bge.n	1cd14 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x134>
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   1cce4:	9b03      	ldr	r3, [sp, #12]
   1cce6:	9904      	ldr	r1, [sp, #16]
   1cce8:	9300      	str	r3, [sp, #0]
   1ccea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ccec:	4628      	mov	r0, r5
   1ccee:	440b      	add	r3, r1
   1ccf0:	4659      	mov	r1, fp
   1ccf2:	9213      	str	r2, [sp, #76]	; 0x4c
   1ccf4:	f00a fd2a 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   1ccf8:	9b12      	ldr	r3, [sp, #72]	; 0x48
              filter_count++;
   1ccfa:	ee38 8a29 	vadd.f32	s16, s16, s19
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   1ccfe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
              total +=
   1cd02:	edd0 7a00 	vldr	s15, [r0]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1cd06:	9b04      	ldr	r3, [sp, #16]
              total +=
   1cd08:	ee78 8aa7 	vadd.f32	s17, s17, s15
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1cd0c:	3301      	adds	r3, #1
   1cd0e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1cd10:	9304      	str	r3, [sp, #16]
   1cd12:	e7e3      	b.n	1ccdc <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xfc>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   1cd14:	3201      	adds	r2, #1
   1cd16:	e7da      	b.n	1ccce <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xee>
            }
          }
          const float average = total / filter_count;
   1cd18:	ee88 9a88 	vdiv.f32	s18, s17, s16
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(average, params.float_activation_min,
   1cd1c:	ed94 8a09 	vldr	s16, [r4, #36]	; 0x24
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   1cd20:	9b03      	ldr	r3, [sp, #12]
   1cd22:	4642      	mov	r2, r8
   1cd24:	9300      	str	r3, [sp, #0]
   1cd26:	4659      	mov	r1, fp
   1cd28:	464b      	mov	r3, r9
   1cd2a:	4630      	mov	r0, r6
   1cd2c:	f00a fd0e 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
      return __a;
   1cd30:	eeb4 8ac9 	vcmpe.f32	s16, s18
   1cd34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                                           params.float_activation_max);
   1cd38:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
   1cd3c:	fe38 8a09 	vselgt.f32	s16, s16, s18
	return __b;
   1cd40:	eef4 8a48 	vcmp.f32	s17, s16
   1cd44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1cd48:	bf48      	it	mi
   1cd4a:	eeb0 8a68 	vmovmi.f32	s16, s17
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   1cd4e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1cd50:	eb03 0080 	add.w	r0, r3, r0, lsl #2
        for (int channel = 0; channel < depth; ++channel) {
   1cd54:	9b03      	ldr	r3, [sp, #12]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   1cd56:	ed80 8a00 	vstr	s16, [r0]
        for (int channel = 0; channel < depth; ++channel) {
   1cd5a:	3301      	adds	r3, #1
   1cd5c:	e78c      	b.n	1cc78 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x98>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   1cd5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1cd60:	f109 0901 	add.w	r9, r9, #1
   1cd64:	441f      	add	r7, r3
   1cd66:	e783      	b.n	1cc70 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x90>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1cd68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1cd6a:	f108 0801 	add.w	r8, r8, #1
   1cd6e:	449a      	add	sl, r3
   1cd70:	e778      	b.n	1cc64 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x84>
  for (int batch = 0; batch < batches; ++batch) {
   1cd72:	f10b 0b01 	add.w	fp, fp, #1
   1cd76:	e76e      	b.n	1cc56 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x76>
        }
      }
    }
  }
}
   1cd78:	b015      	add	sp, #84	; 0x54
   1cd7a:	ecbd 8b04 	vpop	{d8-d9}
   1cd7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cd82:	bf00      	nop
   1cd84:	00000000 	.word	0x00000000

0001cd88 <_ZN6tflite3ops5micro24Register_AVERAGE_POOL_2DEv>:
  return kTfLiteOk;
}

}  // namespace pooling

TfLiteRegistration Register_AVERAGE_POOL_2D() {
   1cd88:	b510      	push	{r4, lr}
   1cd8a:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/pooling::AverageEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1cd8c:	2220      	movs	r2, #32
   1cd8e:	2100      	movs	r1, #0
   1cd90:	f014 f85d 	bl	30e4e <memset>
   1cd94:	4b01      	ldr	r3, [pc, #4]	; (1cd9c <_ZN6tflite3ops5micro24Register_AVERAGE_POOL_2DEv+0x14>)
}
   1cd96:	4620      	mov	r0, r4
          /*version=*/0};
   1cd98:	60e3      	str	r3, [r4, #12]
}
   1cd9a:	bd10      	pop	{r4, pc}
   1cd9c:	0001cdf5 	.word	0x0001cdf5

0001cda0 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>:

TfLiteRegistration Register_MAX_POOL_2D() {
   1cda0:	b510      	push	{r4, lr}
   1cda2:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/pooling::MaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1cda4:	2220      	movs	r2, #32
   1cda6:	2100      	movs	r1, #0
   1cda8:	f014 f851 	bl	30e4e <memset>
   1cdac:	4b01      	ldr	r3, [pc, #4]	; (1cdb4 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv+0x14>)
}
   1cdae:	4620      	mov	r0, r4
          /*version=*/0};
   1cdb0:	60e3      	str	r3, [r4, #12]
}
   1cdb2:	bd10      	pop	{r4, pc}
   1cdb4:	0001cf41 	.word	0x0001cf41

0001cdb8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
  if (activation == kTfLiteActRelu) {
   1cdb8:	2801      	cmp	r0, #1
   1cdba:	d103      	bne.n	1cdc4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0xc>
    *activation_min = 0;
   1cdbc:	2300      	movs	r3, #0
    *activation_min = std::numeric_limits<T>::lowest();
   1cdbe:	600b      	str	r3, [r1, #0]
    *activation_max = std::numeric_limits<T>::max();
   1cdc0:	4b09      	ldr	r3, [pc, #36]	; (1cde8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x30>)
   1cdc2:	e004      	b.n	1cdce <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x16>
  } else if (activation == kTfLiteActRelu6) {
   1cdc4:	2803      	cmp	r0, #3
   1cdc6:	d104      	bne.n	1cdd2 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x1a>
    *activation_min = 0;
   1cdc8:	2300      	movs	r3, #0
   1cdca:	600b      	str	r3, [r1, #0]
    *activation_max = 6;
   1cdcc:	4b07      	ldr	r3, [pc, #28]	; (1cdec <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x34>)
    *activation_max = std::numeric_limits<T>::max();
   1cdce:	6013      	str	r3, [r2, #0]
  }
}
   1cdd0:	4770      	bx	lr
  } else if (activation == kTfLiteActReluN1To1) {
   1cdd2:	2802      	cmp	r0, #2
   1cdd4:	d104      	bne.n	1cde0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x28>
    *activation_min = -1;
   1cdd6:	4b06      	ldr	r3, [pc, #24]	; (1cdf0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x38>)
   1cdd8:	600b      	str	r3, [r1, #0]
    *activation_max = 1;
   1cdda:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   1cdde:	e7f6      	b.n	1cdce <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x16>
    *activation_min = std::numeric_limits<T>::lowest();
   1cde0:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
   1cde4:	e7eb      	b.n	1cdbe <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x6>
   1cde6:	bf00      	nop
   1cde8:	7f7fffff 	.word	0x7f7fffff
   1cdec:	40c00000 	.word	0x40c00000
   1cdf0:	bf800000 	.word	0xbf800000

0001cdf4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
   1cdf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return &context->tensors[node->inputs->data[index]];
   1cdf8:	680b      	ldr	r3, [r1, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1cdfa:	f8d0 9008 	ldr.w	r9, [r0, #8]
   1cdfe:	685e      	ldr	r6, [r3, #4]
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
   1ce00:	694d      	ldr	r5, [r1, #20]
  return &context->tensors[node->outputs->data[index]];
   1ce02:	684b      	ldr	r3, [r1, #4]
TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
   1ce04:	b0a2      	sub	sp, #136	; 0x88
  return &context->tensors[node->inputs->data[index]];
   1ce06:	ea4f 1a86 	mov.w	sl, r6, lsl #6
   1ce0a:	eb09 1686 	add.w	r6, r9, r6, lsl #6
   1ce0e:	4607      	mov	r7, r0
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, &data));
   1ce10:	4631      	mov	r1, r6
   1ce12:	4628      	mov	r0, r5
   1ce14:	aa07      	add	r2, sp, #28
  return &context->tensors[node->outputs->data[index]];
   1ce16:	685c      	ldr	r4, [r3, #4]
   1ce18:	f011 f812 	bl	2de40 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE.isra.0>
   1ce1c:	4680      	mov	r8, r0
   1ce1e:	2800      	cmp	r0, #0
   1ce20:	d139      	bne.n	1ce96 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xa2>
  switch (input->type) {
   1ce22:	f819 000a 	ldrb.w	r0, [r9, sl]
   1ce26:	eb09 1484 	add.w	r4, r9, r4, lsl #6
   1ce2a:	2803      	cmp	r0, #3
   1ce2c:	d037      	beq.n	1ce9e <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xaa>
   1ce2e:	2809      	cmp	r0, #9
   1ce30:	d035      	beq.n	1ce9e <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xaa>
   1ce32:	2801      	cmp	r0, #1
   1ce34:	d177      	bne.n	1cf26 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x132>
  CalculateActivationRange(params->activation, &activation_min,
   1ce36:	aa06      	add	r2, sp, #24
   1ce38:	7d28      	ldrb	r0, [r5, #20]
   1ce3a:	a905      	add	r1, sp, #20
   1ce3c:	f7ff ffbc 	bl	1cdb8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
  op_params.stride_height = params->stride_height;
   1ce40:	68ab      	ldr	r3, [r5, #8]
      op_params, GetTensorShape(input), GetTensorData<float>(input),
   1ce42:	4631      	mov	r1, r6
  op_params.stride_height = params->stride_height;
   1ce44:	931a      	str	r3, [sp, #104]	; 0x68
  op_params.stride_width = params->stride_width;
   1ce46:	686b      	ldr	r3, [r5, #4]
      op_params, GetTensorShape(input), GetTensorData<float>(input),
   1ce48:	a80b      	add	r0, sp, #44	; 0x2c
  op_params.stride_width = params->stride_width;
   1ce4a:	931b      	str	r3, [sp, #108]	; 0x6c
  op_params.filter_height = params->filter_height;
   1ce4c:	692b      	ldr	r3, [r5, #16]
   1ce4e:	931c      	str	r3, [sp, #112]	; 0x70
  op_params.filter_width = params->filter_width;
   1ce50:	68eb      	ldr	r3, [r5, #12]
   1ce52:	931d      	str	r3, [sp, #116]	; 0x74
  op_params.padding_values.height = data->padding.height;
   1ce54:	9b08      	ldr	r3, [sp, #32]
   1ce56:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
  op_params.padding_values.width = data->padding.width;
   1ce5a:	9b07      	ldr	r3, [sp, #28]
   1ce5c:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
  op_params.float_activation_min = activation_min;
   1ce60:	9b05      	ldr	r3, [sp, #20]
   1ce62:	9320      	str	r3, [sp, #128]	; 0x80
  op_params.float_activation_max = activation_max;
   1ce64:	9b06      	ldr	r3, [sp, #24]
   1ce66:	9321      	str	r3, [sp, #132]	; 0x84
      op_params, GetTensorShape(input), GetTensorData<float>(input),
   1ce68:	f00a fbe8 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1ce6c:	6872      	ldr	r2, [r6, #4]
      GetTensorShape(output), GetTensorData<float>(output));
   1ce6e:	4621      	mov	r1, r4
   1ce70:	a811      	add	r0, sp, #68	; 0x44
   1ce72:	9203      	str	r2, [sp, #12]
   1ce74:	f00a fbe2 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1ce78:	9a03      	ldr	r2, [sp, #12]
   1ce7a:	b104      	cbz	r4, 1ce7e <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x8a>
   1ce7c:	6864      	ldr	r4, [r4, #4]
  reference_ops::AveragePool(
   1ce7e:	9400      	str	r4, [sp, #0]
   1ce80:	ab11      	add	r3, sp, #68	; 0x44
   1ce82:	a90b      	add	r1, sp, #44	; 0x2c
   1ce84:	a817      	add	r0, sp, #92	; 0x5c
   1ce86:	f7ff feab 	bl	1cbe0 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
        GetTensorShape(output), GetTensorData<uint8_t>(output));
   1ce8a:	a811      	add	r0, sp, #68	; 0x44
   1ce8c:	f00a fb91 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1ce90:	a80b      	add	r0, sp, #44	; 0x2c
   1ce92:	f00a fb8e 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   1ce96:	4640      	mov	r0, r8
   1ce98:	b022      	add	sp, #136	; 0x88
   1ce9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  (void)CalculateActivationRangeQuantized(context, params->activation, output,
   1ce9e:	ab06      	add	r3, sp, #24
   1cea0:	7d29      	ldrb	r1, [r5, #20]
   1cea2:	4622      	mov	r2, r4
   1cea4:	9300      	str	r3, [sp, #0]
   1cea6:	4638      	mov	r0, r7
   1cea8:	ab05      	add	r3, sp, #20
   1ceaa:	f004 f8d9 	bl	21060 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
  op_params.stride_height = params->stride_height;
   1ceae:	68ab      	ldr	r3, [r5, #8]
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1ceb0:	4631      	mov	r1, r6
  op_params.stride_height = params->stride_height;
   1ceb2:	931a      	str	r3, [sp, #104]	; 0x68
  op_params.stride_width = params->stride_width;
   1ceb4:	686b      	ldr	r3, [r5, #4]
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1ceb6:	a80b      	add	r0, sp, #44	; 0x2c
  op_params.stride_width = params->stride_width;
   1ceb8:	931b      	str	r3, [sp, #108]	; 0x6c
  op_params.filter_height = params->filter_height;
   1ceba:	692b      	ldr	r3, [r5, #16]
   1cebc:	931c      	str	r3, [sp, #112]	; 0x70
  op_params.filter_width = params->filter_width;
   1cebe:	68eb      	ldr	r3, [r5, #12]
   1cec0:	931d      	str	r3, [sp, #116]	; 0x74
  op_params.padding_values.height = data->padding.height;
   1cec2:	9b08      	ldr	r3, [sp, #32]
   1cec4:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
  op_params.padding_values.width = data->padding.width;
   1cec8:	9b07      	ldr	r3, [sp, #28]
   1ceca:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
  op_params.quantized_activation_min = activation_min;
   1cece:	9b05      	ldr	r3, [sp, #20]
   1ced0:	931e      	str	r3, [sp, #120]	; 0x78
  op_params.quantized_activation_max = activation_max;
   1ced2:	9b06      	ldr	r3, [sp, #24]
   1ced4:	931f      	str	r3, [sp, #124]	; 0x7c
  if (input->type == kTfLiteUInt8) {
   1ced6:	f819 300a 	ldrb.w	r3, [r9, sl]
   1ceda:	2b03      	cmp	r3, #3
   1cedc:	d111      	bne.n	1cf02 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x10e>
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1cede:	f00a fbad 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1cee2:	6872      	ldr	r2, [r6, #4]
        GetTensorShape(output), GetTensorData<uint8_t>(output));
   1cee4:	4621      	mov	r1, r4
   1cee6:	a811      	add	r0, sp, #68	; 0x44
   1cee8:	9203      	str	r2, [sp, #12]
   1ceea:	f00a fba7 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1ceee:	9a03      	ldr	r2, [sp, #12]
   1cef0:	b104      	cbz	r4, 1cef4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x100>
   1cef2:	6864      	ldr	r4, [r4, #4]
    reference_ops::AveragePool(
   1cef4:	9400      	str	r4, [sp, #0]
   1cef6:	ab11      	add	r3, sp, #68	; 0x44
   1cef8:	a90b      	add	r1, sp, #44	; 0x2c
   1cefa:	a817      	add	r0, sp, #92	; 0x5c
   1cefc:	f010 fb88 	bl	2d610 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>
   1cf00:	e7c3      	b.n	1ce8a <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x96>
        op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
   1cf02:	f00a fb9b 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1cf06:	6872      	ldr	r2, [r6, #4]
        GetTensorShape(output), GetTensorData<int8_t>(output));
   1cf08:	4621      	mov	r1, r4
   1cf0a:	a811      	add	r0, sp, #68	; 0x44
   1cf0c:	9203      	str	r2, [sp, #12]
   1cf0e:	f00a fb95 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1cf12:	9a03      	ldr	r2, [sp, #12]
   1cf14:	b104      	cbz	r4, 1cf18 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x124>
   1cf16:	6864      	ldr	r4, [r4, #4]
    reference_integer_ops::AveragePool(
   1cf18:	9400      	str	r4, [sp, #0]
   1cf1a:	ab11      	add	r3, sp, #68	; 0x44
   1cf1c:	a90b      	add	r1, sp, #44	; 0x2c
   1cf1e:	a817      	add	r0, sp, #92	; 0x5c
   1cf20:	f010 fdea 	bl	2daf8 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>
   1cf24:	e7b1      	b.n	1ce8a <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x96>
      TF_LITE_KERNEL_LOG(context, "Input type %s is not currently supported",
   1cf26:	697c      	ldr	r4, [r7, #20]
   1cf28:	f7ef fecc 	bl	ccc4 <TfLiteTypeGetName>
   1cf2c:	4903      	ldr	r1, [pc, #12]	; (1cf3c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x148>)
   1cf2e:	4602      	mov	r2, r0
   1cf30:	4638      	mov	r0, r7
   1cf32:	47a0      	blx	r4
      return kTfLiteError;
   1cf34:	f04f 0801 	mov.w	r8, #1
   1cf38:	e7ad      	b.n	1ce96 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xa2>
   1cf3a:	bf00      	nop
   1cf3c:	0003572a 	.word	0x0003572a

0001cf40 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
   1cf40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return &context->tensors[node->inputs->data[index]];
   1cf44:	680b      	ldr	r3, [r1, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1cf46:	f8d0 9008 	ldr.w	r9, [r0, #8]
   1cf4a:	685e      	ldr	r6, [r3, #4]
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
   1cf4c:	694d      	ldr	r5, [r1, #20]
  return &context->tensors[node->outputs->data[index]];
   1cf4e:	684b      	ldr	r3, [r1, #4]
TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
   1cf50:	b0a2      	sub	sp, #136	; 0x88
  return &context->tensors[node->inputs->data[index]];
   1cf52:	ea4f 1a86 	mov.w	sl, r6, lsl #6
   1cf56:	eb09 1686 	add.w	r6, r9, r6, lsl #6
   1cf5a:	4607      	mov	r7, r0
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, &data));
   1cf5c:	4631      	mov	r1, r6
   1cf5e:	4628      	mov	r0, r5
   1cf60:	aa07      	add	r2, sp, #28
  return &context->tensors[node->outputs->data[index]];
   1cf62:	685c      	ldr	r4, [r3, #4]
   1cf64:	f010 ff6c 	bl	2de40 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE.isra.0>
   1cf68:	4680      	mov	r8, r0
   1cf6a:	2800      	cmp	r0, #0
   1cf6c:	d139      	bne.n	1cfe2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xa2>
  switch (input->type) {
   1cf6e:	f819 000a 	ldrb.w	r0, [r9, sl]
   1cf72:	eb09 1484 	add.w	r4, r9, r4, lsl #6
   1cf76:	2803      	cmp	r0, #3
   1cf78:	d037      	beq.n	1cfea <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xaa>
   1cf7a:	2809      	cmp	r0, #9
   1cf7c:	d035      	beq.n	1cfea <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xaa>
   1cf7e:	2801      	cmp	r0, #1
   1cf80:	d177      	bne.n	1d072 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x132>
  CalculateActivationRange(params->activation, &activation_min,
   1cf82:	aa06      	add	r2, sp, #24
   1cf84:	7d28      	ldrb	r0, [r5, #20]
   1cf86:	a905      	add	r1, sp, #20
   1cf88:	f7ff ff16 	bl	1cdb8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
  op_params.stride_height = params->stride_height;
   1cf8c:	68ab      	ldr	r3, [r5, #8]
  reference_ops::MaxPool(op_params, GetTensorShape(input),
   1cf8e:	4631      	mov	r1, r6
  op_params.stride_height = params->stride_height;
   1cf90:	931a      	str	r3, [sp, #104]	; 0x68
  op_params.stride_width = params->stride_width;
   1cf92:	686b      	ldr	r3, [r5, #4]
  reference_ops::MaxPool(op_params, GetTensorShape(input),
   1cf94:	a80b      	add	r0, sp, #44	; 0x2c
  op_params.stride_width = params->stride_width;
   1cf96:	931b      	str	r3, [sp, #108]	; 0x6c
  op_params.filter_height = params->filter_height;
   1cf98:	692b      	ldr	r3, [r5, #16]
   1cf9a:	931c      	str	r3, [sp, #112]	; 0x70
  op_params.filter_width = params->filter_width;
   1cf9c:	68eb      	ldr	r3, [r5, #12]
   1cf9e:	931d      	str	r3, [sp, #116]	; 0x74
  op_params.padding_values.height = data->padding.height;
   1cfa0:	9b08      	ldr	r3, [sp, #32]
   1cfa2:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
  op_params.padding_values.width = data->padding.width;
   1cfa6:	9b07      	ldr	r3, [sp, #28]
   1cfa8:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
  op_params.float_activation_min = activation_min;
   1cfac:	9b05      	ldr	r3, [sp, #20]
   1cfae:	9320      	str	r3, [sp, #128]	; 0x80
  op_params.float_activation_max = activation_max;
   1cfb0:	9b06      	ldr	r3, [sp, #24]
   1cfb2:	9321      	str	r3, [sp, #132]	; 0x84
  reference_ops::MaxPool(op_params, GetTensorShape(input),
   1cfb4:	f00a fb42 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1cfb8:	6872      	ldr	r2, [r6, #4]
                         GetTensorData<float>(input), GetTensorShape(output),
   1cfba:	4621      	mov	r1, r4
   1cfbc:	a811      	add	r0, sp, #68	; 0x44
   1cfbe:	9203      	str	r2, [sp, #12]
   1cfc0:	f00a fb3c 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1cfc4:	9a03      	ldr	r2, [sp, #12]
   1cfc6:	b104      	cbz	r4, 1cfca <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x8a>
   1cfc8:	6864      	ldr	r4, [r4, #4]
  reference_ops::MaxPool(op_params, GetTensorShape(input),
   1cfca:	9400      	str	r4, [sp, #0]
   1cfcc:	ab11      	add	r3, sp, #68	; 0x44
   1cfce:	a90b      	add	r1, sp, #44	; 0x2c
   1cfd0:	a817      	add	r0, sp, #92	; 0x5c
   1cfd2:	f010 fbec 	bl	2d7ae <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
        GetTensorShape(output), GetTensorData<uint8_t>(output));
   1cfd6:	a811      	add	r0, sp, #68	; 0x44
   1cfd8:	f00a faeb 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1cfdc:	a80b      	add	r0, sp, #44	; 0x2c
   1cfde:	f00a fae8 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   1cfe2:	4640      	mov	r0, r8
   1cfe4:	b022      	add	sp, #136	; 0x88
   1cfe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  (void)CalculateActivationRangeQuantized(context, params->activation, output,
   1cfea:	ab06      	add	r3, sp, #24
   1cfec:	7d29      	ldrb	r1, [r5, #20]
   1cfee:	4622      	mov	r2, r4
   1cff0:	9300      	str	r3, [sp, #0]
   1cff2:	4638      	mov	r0, r7
   1cff4:	ab05      	add	r3, sp, #20
   1cff6:	f004 f833 	bl	21060 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
  op_params.stride_height = params->stride_height;
   1cffa:	68ab      	ldr	r3, [r5, #8]
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1cffc:	4631      	mov	r1, r6
  op_params.stride_height = params->stride_height;
   1cffe:	931a      	str	r3, [sp, #104]	; 0x68
  op_params.stride_width = params->stride_width;
   1d000:	686b      	ldr	r3, [r5, #4]
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1d002:	a80b      	add	r0, sp, #44	; 0x2c
  op_params.stride_width = params->stride_width;
   1d004:	931b      	str	r3, [sp, #108]	; 0x6c
  op_params.filter_height = params->filter_height;
   1d006:	692b      	ldr	r3, [r5, #16]
   1d008:	931c      	str	r3, [sp, #112]	; 0x70
  op_params.filter_width = params->filter_width;
   1d00a:	68eb      	ldr	r3, [r5, #12]
   1d00c:	931d      	str	r3, [sp, #116]	; 0x74
  op_params.padding_values.height = data->padding.height;
   1d00e:	9b08      	ldr	r3, [sp, #32]
   1d010:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
  op_params.padding_values.width = data->padding.width;
   1d014:	9b07      	ldr	r3, [sp, #28]
   1d016:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
  op_params.quantized_activation_min = activation_min;
   1d01a:	9b05      	ldr	r3, [sp, #20]
   1d01c:	931e      	str	r3, [sp, #120]	; 0x78
  op_params.quantized_activation_max = activation_max;
   1d01e:	9b06      	ldr	r3, [sp, #24]
   1d020:	931f      	str	r3, [sp, #124]	; 0x7c
  if (input->type == kTfLiteUInt8) {
   1d022:	f819 300a 	ldrb.w	r3, [r9, sl]
   1d026:	2b03      	cmp	r3, #3
   1d028:	d111      	bne.n	1d04e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x10e>
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1d02a:	f00a fb07 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1d02e:	6872      	ldr	r2, [r6, #4]
        GetTensorShape(output), GetTensorData<uint8_t>(output));
   1d030:	4621      	mov	r1, r4
   1d032:	a811      	add	r0, sp, #68	; 0x44
   1d034:	9203      	str	r2, [sp, #12]
   1d036:	f00a fb01 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1d03a:	9a03      	ldr	r2, [sp, #12]
   1d03c:	b104      	cbz	r4, 1d040 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x100>
   1d03e:	6864      	ldr	r4, [r4, #4]
    reference_ops::MaxPool(
   1d040:	9400      	str	r4, [sp, #0]
   1d042:	ab11      	add	r3, sp, #68	; 0x44
   1d044:	a90b      	add	r1, sp, #44	; 0x2c
   1d046:	a817      	add	r0, sp, #92	; 0x5c
   1d048:	f010 fc87 	bl	2d95a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>
   1d04c:	e7c3      	b.n	1cfd6 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x96>
        op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
   1d04e:	f00a faf5 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1d052:	6872      	ldr	r2, [r6, #4]
        GetTensorShape(output), GetTensorData<int8_t>(output));
   1d054:	4621      	mov	r1, r4
   1d056:	a811      	add	r0, sp, #68	; 0x44
   1d058:	9203      	str	r2, [sp, #12]
   1d05a:	f00a faef 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1d05e:	9a03      	ldr	r2, [sp, #12]
   1d060:	b104      	cbz	r4, 1d064 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x124>
   1d062:	6864      	ldr	r4, [r4, #4]
    reference_integer_ops::MaxPool(
   1d064:	9400      	str	r4, [sp, #0]
   1d066:	ab11      	add	r3, sp, #68	; 0x44
   1d068:	a90b      	add	r1, sp, #44	; 0x2c
   1d06a:	a817      	add	r0, sp, #92	; 0x5c
   1d06c:	f010 fe18 	bl	2dca0 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>
   1d070:	e7b1      	b.n	1cfd6 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x96>
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
   1d072:	697c      	ldr	r4, [r7, #20]
   1d074:	f7ef fe26 	bl	ccc4 <TfLiteTypeGetName>
   1d078:	4903      	ldr	r1, [pc, #12]	; (1d088 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x148>)
   1d07a:	4602      	mov	r2, r0
   1d07c:	4638      	mov	r0, r7
   1d07e:	47a0      	blx	r4
      return kTfLiteError;
   1d080:	f04f 0801 	mov.w	r8, #1
   1d084:	e7ad      	b.n	1cfe2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xa2>
   1d086:	bf00      	nop
   1d088:	00035753 	.word	0x00035753

0001d08c <_ZN6tflite3ops5micro14Register_PRELUEv>:
  }
}

}  // namespace activations

TfLiteRegistration Register_PRELU() {
   1d08c:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/activations::PreluPrepare,
          /*invoke=*/activations::PreluEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1d08e:	4604      	mov	r4, r0
TfLiteRegistration Register_PRELU() {
   1d090:	4606      	mov	r6, r0
          /*version=*/0};
   1d092:	4d04      	ldr	r5, [pc, #16]	; (1d0a4 <_ZN6tflite3ops5micro14Register_PRELUEv+0x18>)
   1d094:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1d096:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1d098:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1d09c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1d0a0:	4630      	mov	r0, r6
   1d0a2:	bd70      	pop	{r4, r5, r6, pc}
   1d0a4:	00031ab8 	.word	0x00031ab8

0001d0a8 <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus PreluEval(TfLiteContext* context, TfLiteNode* node) {
   1d0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const TfLiteTensor* input = GetInput(context, node, 0);
   1d0ac:	680b      	ldr	r3, [r1, #0]
TfLiteStatus PreluEval(TfLiteContext* context, TfLiteNode* node) {
   1d0ae:	ed2d 8b04 	vpush	{d8-d9}
  return &context->tensors[node->inputs->data[index]];
   1d0b2:	685e      	ldr	r6, [r3, #4]
   1d0b4:	689c      	ldr	r4, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
   1d0b6:	684b      	ldr	r3, [r1, #4]
  const TfLiteTensor* input = GetInput(context, node, 0);
   1d0b8:	f8d0 a008 	ldr.w	sl, [r0, #8]
   1d0bc:	685d      	ldr	r5, [r3, #4]
  int32_t output_multiplier_1 = 0;
   1d0be:	2300      	movs	r3, #0
TfLiteStatus PreluEval(TfLiteContext* context, TfLiteNode* node) {
   1d0c0:	b0a5      	sub	sp, #148	; 0x94
   1d0c2:	01aa      	lsls	r2, r5, #6
  int output_shift_1 = 0;
   1d0c4:	e9cd 3307 	strd	r3, r3, [sp, #28]
  int output_shift_2 = 0;
   1d0c8:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  if (output->type == kTfLiteInt8 || output->type == kTfLiteUInt8 ||
   1d0cc:	f81a 3002 	ldrb.w	r3, [sl, r2]
  return &context->tensors[node->inputs->data[index]];
   1d0d0:	ea4f 1b86 	mov.w	fp, r6, lsl #6
   1d0d4:	2b09      	cmp	r3, #9
TfLiteStatus PreluEval(TfLiteContext* context, TfLiteNode* node) {
   1d0d6:	4607      	mov	r7, r0
   1d0d8:	eb0a 1686 	add.w	r6, sl, r6, lsl #6
   1d0dc:	eb0a 1484 	add.w	r4, sl, r4, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1d0e0:	eb0a 1585 	add.w	r5, sl, r5, lsl #6
  if (output->type == kTfLiteInt8 || output->type == kTfLiteUInt8 ||
   1d0e4:	d003      	beq.n	1d0ee <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0x46>
   1d0e6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   1d0ea:	2b03      	cmp	r3, #3
   1d0ec:	d126      	bne.n	1d13c <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0x94>
    double real_multiplier_1 = static_cast<double>(input->params.scale) /
   1d0ee:	68f0      	ldr	r0, [r6, #12]
   1d0f0:	f7ef fa0a 	bl	c508 <__aeabi_f2d>
   1d0f4:	4680      	mov	r8, r0
                               static_cast<double>(output->params.scale);
   1d0f6:	68e8      	ldr	r0, [r5, #12]
    double real_multiplier_1 = static_cast<double>(input->params.scale) /
   1d0f8:	4689      	mov	r9, r1
                               static_cast<double>(output->params.scale);
   1d0fa:	f7ef fa05 	bl	c508 <__aeabi_f2d>
   1d0fe:	ec41 0b18 	vmov	d8, r0, r1
                               static_cast<double>(alpha->params.scale) /
   1d102:	68e0      	ldr	r0, [r4, #12]
   1d104:	f7ef fa00 	bl	c508 <__aeabi_f2d>
    double real_multiplier_2 = static_cast<double>(input->params.scale) *
   1d108:	4642      	mov	r2, r8
   1d10a:	464b      	mov	r3, r9
   1d10c:	f7f3 f9ce 	bl	104ac <__aeabi_dmul>
   1d110:	ec53 2b18 	vmov	r2, r3, d8
   1d114:	f7f3 faf4 	bl	10700 <__aeabi_ddiv>
   1d118:	ec41 0b19 	vmov	d9, r0, r1
    double real_multiplier_1 = static_cast<double>(input->params.scale) /
   1d11c:	ec53 2b18 	vmov	r2, r3, d8
   1d120:	4640      	mov	r0, r8
   1d122:	4649      	mov	r1, r9
   1d124:	f7f3 faec 	bl	10700 <__aeabi_ddiv>
    QuantizeMultiplier(real_multiplier_1, &output_multiplier_1,
   1d128:	ab08      	add	r3, sp, #32
   1d12a:	aa07      	add	r2, sp, #28
   1d12c:	f003 fef2 	bl	20f14 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    QuantizeMultiplier(real_multiplier_2, &output_multiplier_2,
   1d130:	ec51 0b19 	vmov	r0, r1, d9
   1d134:	ab0a      	add	r3, sp, #40	; 0x28
   1d136:	aa09      	add	r2, sp, #36	; 0x24
   1d138:	f003 feec 	bl	20f14 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
  switch (input->type) {
   1d13c:	f81a 000b 	ldrb.w	r0, [sl, fp]
   1d140:	2803      	cmp	r0, #3
   1d142:	d02c      	beq.n	1d19e <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0xf6>
   1d144:	2809      	cmp	r0, #9
   1d146:	d05c      	beq.n	1d202 <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0x15a>
   1d148:	2801      	cmp	r0, #1
   1d14a:	f040 8085 	bne.w	1d258 <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0x1b0>
          GetTensorShape(input), GetTensorData<float>(input),
   1d14e:	4631      	mov	r1, r6
   1d150:	a811      	add	r0, sp, #68	; 0x44
   1d152:	f00a fa73 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
          GetTensorShape(alpha), GetTensorData<float>(alpha),
   1d156:	4621      	mov	r1, r4
   1d158:	a817      	add	r0, sp, #92	; 0x5c
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1d15a:	6877      	ldr	r7, [r6, #4]
   1d15c:	f00a fa6e 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1d160:	b104      	cbz	r4, 1d164 <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0xbc>
   1d162:	6864      	ldr	r4, [r4, #4]
          GetTensorShape(output), GetTensorData<float>(output));
   1d164:	ae1d      	add	r6, sp, #116	; 0x74
   1d166:	4629      	mov	r1, r5
   1d168:	4630      	mov	r0, r6
   1d16a:	f00a fa67 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      BroadcastPrelu4DSlowFloat(
   1d16e:	686b      	ldr	r3, [r5, #4]
   1d170:	4639      	mov	r1, r7
   1d172:	aa17      	add	r2, sp, #92	; 0x5c
   1d174:	e9cd 6300 	strd	r6, r3, [sp]
   1d178:	a811      	add	r0, sp, #68	; 0x44
   1d17a:	4623      	mov	r3, r4
   1d17c:	f010 fe9e 	bl	2debc <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf>
          GetTensorShape(output), GetTensorData<float>(output));
   1d180:	4630      	mov	r0, r6
   1d182:	f00a fa16 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
          GetTensorShape(alpha), GetTensorData<float>(alpha),
   1d186:	a817      	add	r0, sp, #92	; 0x5c
   1d188:	f00a fa13 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
          GetTensorShape(input), GetTensorData<float>(input),
   1d18c:	a811      	add	r0, sp, #68	; 0x44
          op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1d18e:	f00a fa10 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
      return kTfLiteOk;
   1d192:	2000      	movs	r0, #0
}
   1d194:	b025      	add	sp, #148	; 0x94
   1d196:	ecbd 8b04 	vpop	{d8-d9}
   1d19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      op_params.input_offset = -input->params.zero_point;
   1d19e:	6933      	ldr	r3, [r6, #16]
          op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1d1a0:	4631      	mov	r1, r6
      op_params.input_offset = -input->params.zero_point;
   1d1a2:	425b      	negs	r3, r3
   1d1a4:	931d      	str	r3, [sp, #116]	; 0x74
      op_params.alpha_offset = -alpha->params.zero_point;
   1d1a6:	6923      	ldr	r3, [r4, #16]
          op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1d1a8:	a80b      	add	r0, sp, #44	; 0x2c
      op_params.alpha_offset = -alpha->params.zero_point;
   1d1aa:	425b      	negs	r3, r3
   1d1ac:	931e      	str	r3, [sp, #120]	; 0x78
      op_params.output_offset = output->params.zero_point;
   1d1ae:	692b      	ldr	r3, [r5, #16]
   1d1b0:	931f      	str	r3, [sp, #124]	; 0x7c
      op_params.output_multiplier_1 = output_multiplier_1;
   1d1b2:	9b07      	ldr	r3, [sp, #28]
   1d1b4:	9320      	str	r3, [sp, #128]	; 0x80
      op_params.output_shift_1 = output_shift_1;
   1d1b6:	9b08      	ldr	r3, [sp, #32]
   1d1b8:	9321      	str	r3, [sp, #132]	; 0x84
      op_params.output_multiplier_2 = output_multiplier_2;
   1d1ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d1bc:	9322      	str	r3, [sp, #136]	; 0x88
      op_params.output_shift_2 = output_shift_2;
   1d1be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d1c0:	9323      	str	r3, [sp, #140]	; 0x8c
          op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1d1c2:	f00a fa3b 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1d1c6:	6872      	ldr	r2, [r6, #4]
          GetTensorShape(alpha), GetTensorData<uint8_t>(alpha),
   1d1c8:	4621      	mov	r1, r4
   1d1ca:	a811      	add	r0, sp, #68	; 0x44
   1d1cc:	9205      	str	r2, [sp, #20]
   1d1ce:	f00a fa35 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1d1d2:	6866      	ldr	r6, [r4, #4]
          GetTensorShape(output), GetTensorData<uint8_t>(output));
   1d1d4:	ac17      	add	r4, sp, #92	; 0x5c
   1d1d6:	4629      	mov	r1, r5
   1d1d8:	4620      	mov	r0, r4
   1d1da:	f00a fa2f 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      reference_ops::BroadcastPrelu4DSlow(
   1d1de:	686b      	ldr	r3, [r5, #4]
   1d1e0:	9a05      	ldr	r2, [sp, #20]
   1d1e2:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1d1e6:	9600      	str	r6, [sp, #0]
   1d1e8:	ab11      	add	r3, sp, #68	; 0x44
   1d1ea:	a90b      	add	r1, sp, #44	; 0x2c
   1d1ec:	a81d      	add	r0, sp, #116	; 0x74
   1d1ee:	f010 fedd 	bl	2dfac <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>
          GetTensorShape(output), GetTensorData<uint8_t>(output));
   1d1f2:	4620      	mov	r0, r4
   1d1f4:	f00a f9dd 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
          GetTensorShape(alpha), GetTensorData<uint8_t>(alpha),
   1d1f8:	a811      	add	r0, sp, #68	; 0x44
   1d1fa:	f00a f9da 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
          op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1d1fe:	a80b      	add	r0, sp, #44	; 0x2c
   1d200:	e7c5      	b.n	1d18e <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0xe6>
      op_params.input_offset = -input->params.zero_point;
   1d202:	6933      	ldr	r3, [r6, #16]
          op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
   1d204:	4631      	mov	r1, r6
      op_params.input_offset = -input->params.zero_point;
   1d206:	425b      	negs	r3, r3
   1d208:	931d      	str	r3, [sp, #116]	; 0x74
      op_params.alpha_offset = -alpha->params.zero_point;
   1d20a:	6923      	ldr	r3, [r4, #16]
          op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
   1d20c:	a80b      	add	r0, sp, #44	; 0x2c
      op_params.alpha_offset = -alpha->params.zero_point;
   1d20e:	425b      	negs	r3, r3
   1d210:	931e      	str	r3, [sp, #120]	; 0x78
      op_params.output_offset = output->params.zero_point;
   1d212:	692b      	ldr	r3, [r5, #16]
   1d214:	931f      	str	r3, [sp, #124]	; 0x7c
      op_params.output_multiplier_1 = output_multiplier_1;
   1d216:	9b07      	ldr	r3, [sp, #28]
   1d218:	9320      	str	r3, [sp, #128]	; 0x80
      op_params.output_shift_1 = output_shift_1;
   1d21a:	9b08      	ldr	r3, [sp, #32]
   1d21c:	9321      	str	r3, [sp, #132]	; 0x84
      op_params.output_multiplier_2 = output_multiplier_2;
   1d21e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d220:	9322      	str	r3, [sp, #136]	; 0x88
      op_params.output_shift_2 = output_shift_2;
   1d222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d224:	9323      	str	r3, [sp, #140]	; 0x8c
          op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
   1d226:	f00a fa09 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1d22a:	6872      	ldr	r2, [r6, #4]
          GetTensorShape(alpha), GetTensorData<int8_t>(alpha),
   1d22c:	4621      	mov	r1, r4
   1d22e:	a811      	add	r0, sp, #68	; 0x44
   1d230:	9205      	str	r2, [sp, #20]
   1d232:	f00a fa03 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1d236:	6866      	ldr	r6, [r4, #4]
          GetTensorShape(output), GetTensorData<int8_t>(output));
   1d238:	ac17      	add	r4, sp, #92	; 0x5c
   1d23a:	4629      	mov	r1, r5
   1d23c:	4620      	mov	r0, r4
   1d23e:	f00a f9fd 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      reference_ops::BroadcastPrelu4DSlow(
   1d242:	686b      	ldr	r3, [r5, #4]
   1d244:	9a05      	ldr	r2, [sp, #20]
   1d246:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1d24a:	9600      	str	r6, [sp, #0]
   1d24c:	ab11      	add	r3, sp, #68	; 0x44
   1d24e:	a90b      	add	r1, sp, #44	; 0x2c
   1d250:	a81d      	add	r0, sp, #116	; 0x74
   1d252:	f010 ff33 	bl	2e0bc <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>
   1d256:	e7cc      	b.n	1d1f2 <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0x14a>
      TF_LITE_KERNEL_LOG(
   1d258:	697c      	ldr	r4, [r7, #20]
   1d25a:	f7ef fd33 	bl	ccc4 <TfLiteTypeGetName>
   1d25e:	4903      	ldr	r1, [pc, #12]	; (1d26c <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0x1c4>)
   1d260:	4602      	mov	r2, r0
   1d262:	4638      	mov	r0, r7
   1d264:	47a0      	blx	r4
      return kTfLiteError;
   1d266:	2001      	movs	r0, #1
   1d268:	e794      	b.n	1d194 <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0xec>
   1d26a:	bf00      	nop
   1d26c:	00035774 	.word	0x00035774

0001d270 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode>:
    return nullptr;
  }
  return data;
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1d270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
   1d274:	f8d1 8010 	ldr.w	r8, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1d278:	4605      	mov	r5, r0
   1d27a:	b086      	sub	sp, #24
  TFLITE_DCHECK(node->user_data != nullptr);
   1d27c:	f1b8 0f00 	cmp.w	r8, #0
   1d280:	d101      	bne.n	1d286 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x16>
   1d282:	f013 fd9a 	bl	30dba <abort>
  OpData* data = static_cast<OpData*>(node->user_data);

  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   1d286:	680b      	ldr	r3, [r1, #0]
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   1d288:	681c      	ldr	r4, [r3, #0]
   1d28a:	2c01      	cmp	r4, #1
   1d28c:	d00d      	beq.n	1d2aa <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x3a>
   1d28e:	2601      	movs	r6, #1
   1d290:	4b40      	ldr	r3, [pc, #256]	; (1d394 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x124>)
   1d292:	e9cd 4602 	strd	r4, r6, [sp, #8]
   1d296:	9301      	str	r3, [sp, #4]
   1d298:	4b3f      	ldr	r3, [pc, #252]	; (1d398 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x128>)
   1d29a:	9300      	str	r3, [sp, #0]
   1d29c:	2332      	movs	r3, #50	; 0x32
   1d29e:	6944      	ldr	r4, [r0, #20]
  const TfLiteTensor* input = GetInput(context, node, 0);
  TfLiteTensor* output = GetOutput(context, node, 0);

  // TODO(b/128934713): Add support for fixed-point per-channel quantization.
  // Currently this only support affine per-layer quantization.
  TF_LITE_ENSURE_EQ(context, output->quantization.type,
   1d2a0:	4a3e      	ldr	r2, [pc, #248]	; (1d39c <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x12c>)
   1d2a2:	493f      	ldr	r1, [pc, #252]	; (1d3a0 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x130>)
   1d2a4:	47a0      	blx	r4
   1d2a6:	4634      	mov	r4, r6
   1d2a8:	e00e      	b.n	1d2c8 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x58>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   1d2aa:	684a      	ldr	r2, [r1, #4]
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   1d2ac:	6816      	ldr	r6, [r2, #0]
   1d2ae:	2e01      	cmp	r6, #1
   1d2b0:	d00e      	beq.n	1d2d0 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x60>
   1d2b2:	4b38      	ldr	r3, [pc, #224]	; (1d394 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x124>)
   1d2b4:	e9cd 6402 	strd	r6, r4, [sp, #8]
   1d2b8:	9301      	str	r3, [sp, #4]
   1d2ba:	4b3a      	ldr	r3, [pc, #232]	; (1d3a4 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x134>)
   1d2bc:	4a37      	ldr	r2, [pc, #220]	; (1d39c <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x12c>)
   1d2be:	9300      	str	r3, [sp, #0]
   1d2c0:	6945      	ldr	r5, [r0, #20]
   1d2c2:	2333      	movs	r3, #51	; 0x33
   1d2c4:	4936      	ldr	r1, [pc, #216]	; (1d3a0 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x130>)
   1d2c6:	47a8      	blx	r5

    QuantizeMultiplier(effective_scale, &data->output_multiplier,
                       &data->output_shift);
  }
  return kTfLiteOk;
}
   1d2c8:	4620      	mov	r0, r4
   1d2ca:	b006      	add	sp, #24
   1d2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return &context->tensors[node->outputs->data[index]];
   1d2d0:	6851      	ldr	r1, [r2, #4]
  const TfLiteTensor* input = GetInput(context, node, 0);
   1d2d2:	6887      	ldr	r7, [r0, #8]
   1d2d4:	ea4f 1c81 	mov.w	ip, r1, lsl #6
   1d2d8:	eb07 1181 	add.w	r1, r7, r1, lsl #6
  TF_LITE_ENSURE_EQ(context, output->quantization.type,
   1d2dc:	f891 4030 	ldrb.w	r4, [r1, #48]	; 0x30
   1d2e0:	2c01      	cmp	r4, #1
   1d2e2:	d008      	beq.n	1d2f6 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x86>
   1d2e4:	4b30      	ldr	r3, [pc, #192]	; (1d3a8 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x138>)
   1d2e6:	e9cd 4602 	strd	r4, r6, [sp, #8]
   1d2ea:	9301      	str	r3, [sp, #4]
   1d2ec:	4b2f      	ldr	r3, [pc, #188]	; (1d3ac <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x13c>)
   1d2ee:	9300      	str	r3, [sp, #0]
   1d2f0:	6944      	ldr	r4, [r0, #20]
   1d2f2:	233a      	movs	r3, #58	; 0x3a
   1d2f4:	e7d4      	b.n	1d2a0 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x30>
  const auto* affine_quantization =
   1d2f6:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  TF_LITE_ENSURE(context, affine_quantization);
   1d2f8:	b93a      	cbnz	r2, 1d30a <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x9a>
   1d2fa:	4b2d      	ldr	r3, [pc, #180]	; (1d3b0 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x140>)
   1d2fc:	9300      	str	r3, [sp, #0]
   1d2fe:	233e      	movs	r3, #62	; 0x3e
   1d300:	6945      	ldr	r5, [r0, #20]
  TF_LITE_ENSURE(context, input->type == kTfLiteFloat32 ||
   1d302:	4a26      	ldr	r2, [pc, #152]	; (1d39c <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x12c>)
   1d304:	492b      	ldr	r1, [pc, #172]	; (1d3b4 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
   1d306:	47a8      	blx	r5
   1d308:	e7de      	b.n	1d2c8 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x58>
  TF_LITE_ENSURE(context, affine_quantization->scale);
   1d30a:	6812      	ldr	r2, [r2, #0]
   1d30c:	b922      	cbnz	r2, 1d318 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xa8>
   1d30e:	4b2a      	ldr	r3, [pc, #168]	; (1d3b8 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
   1d310:	9300      	str	r3, [sp, #0]
   1d312:	6945      	ldr	r5, [r0, #20]
   1d314:	233f      	movs	r3, #63	; 0x3f
   1d316:	e7f4      	b.n	1d302 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x92>
  TF_LITE_ENSURE(context, affine_quantization->scale->size == 1);
   1d318:	6812      	ldr	r2, [r2, #0]
   1d31a:	2a01      	cmp	r2, #1
   1d31c:	d004      	beq.n	1d328 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xb8>
   1d31e:	4b27      	ldr	r3, [pc, #156]	; (1d3bc <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
   1d320:	9300      	str	r3, [sp, #0]
   1d322:	6945      	ldr	r5, [r0, #20]
   1d324:	2340      	movs	r3, #64	; 0x40
   1d326:	e7ec      	b.n	1d302 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x92>
  return &context->tensors[node->inputs->data[index]];
   1d328:	685e      	ldr	r6, [r3, #4]
   1d32a:	01b2      	lsls	r2, r6, #6
  TF_LITE_ENSURE(context, input->type == kTfLiteFloat32 ||
   1d32c:	5cbb      	ldrb	r3, [r7, r2]
   1d32e:	eb07 1686 	add.w	r6, r7, r6, lsl #6
   1d332:	f003 02f7 	and.w	r2, r3, #247	; 0xf7
   1d336:	2a01      	cmp	r2, #1
   1d338:	d006      	beq.n	1d348 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xd8>
   1d33a:	2b07      	cmp	r3, #7
   1d33c:	d004      	beq.n	1d348 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xd8>
   1d33e:	4b20      	ldr	r3, [pc, #128]	; (1d3c0 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x150>)
   1d340:	9300      	str	r3, [sp, #0]
   1d342:	6945      	ldr	r5, [r0, #20]
   1d344:	2342      	movs	r3, #66	; 0x42
   1d346:	e7dc      	b.n	1d302 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x92>
  TF_LITE_ENSURE(context,
   1d348:	f817 200c 	ldrb.w	r2, [r7, ip]
   1d34c:	2a03      	cmp	r2, #3
   1d34e:	d01f      	beq.n	1d390 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x120>
   1d350:	2a09      	cmp	r2, #9
   1d352:	d008      	beq.n	1d366 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xf6>
   1d354:	4b1b      	ldr	r3, [pc, #108]	; (1d3c4 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
   1d356:	4628      	mov	r0, r5
   1d358:	9300      	str	r3, [sp, #0]
   1d35a:	696e      	ldr	r6, [r5, #20]
   1d35c:	2345      	movs	r3, #69	; 0x45
   1d35e:	4a0f      	ldr	r2, [pc, #60]	; (1d39c <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x12c>)
   1d360:	4914      	ldr	r1, [pc, #80]	; (1d3b4 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
   1d362:	47b0      	blx	r6
   1d364:	e7b0      	b.n	1d2c8 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x58>
  if ((input->type == kTfLiteInt16 || input->type == kTfLiteInt8) &&
   1d366:	2b07      	cmp	r3, #7
   1d368:	d001      	beq.n	1d36e <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xfe>
   1d36a:	2b09      	cmp	r3, #9
   1d36c:	d110      	bne.n	1d390 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x120>
        static_cast<double>(input->params.scale / output->params.scale);
   1d36e:	ed96 7a03 	vldr	s14, [r6, #12]
   1d372:	edd1 7a03 	vldr	s15, [r1, #12]
    double effective_scale =
   1d376:	eec7 7a27 	vdiv.f32	s15, s14, s15
    QuantizeMultiplier(effective_scale, &data->output_multiplier,
   1d37a:	f108 0304 	add.w	r3, r8, #4
    double effective_scale =
   1d37e:	ee17 0a90 	vmov	r0, s15
    QuantizeMultiplier(effective_scale, &data->output_multiplier,
   1d382:	9305      	str	r3, [sp, #20]
    double effective_scale =
   1d384:	f7ef f8c0 	bl	c508 <__aeabi_f2d>
    QuantizeMultiplier(effective_scale, &data->output_multiplier,
   1d388:	4642      	mov	r2, r8
   1d38a:	9b05      	ldr	r3, [sp, #20]
   1d38c:	f003 fdc2 	bl	20f14 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
  return kTfLiteOk;
   1d390:	2400      	movs	r4, #0
   1d392:	e799      	b.n	1d2c8 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x58>
   1d394:	00035814 	.word	0x00035814
   1d398:	00034a96 	.word	0x00034a96
   1d39c:	000357ac 	.word	0x000357ac
   1d3a0:	00034a7c 	.word	0x00034a7c
   1d3a4:	00034aa6 	.word	0x00034aa6
   1d3a8:	00034d66 	.word	0x00034d66
   1d3ac:	000357d6 	.word	0x000357d6
   1d3b0:	00034d9a 	.word	0x00034d9a
   1d3b4:	00034b9c 	.word	0x00034b9c
   1d3b8:	00034dae 	.word	0x00034dae
   1d3bc:	000357f0 	.word	0x000357f0
   1d3c0:	00035816 	.word	0x00035816
   1d3c4:	00035871 	.word	0x00035871

0001d3c8 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1d3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d3cc:	ed2d 8b02 	vpush	{d8}
  TFLITE_DCHECK(node->user_data != nullptr);
   1d3d0:	f8d1 b010 	ldr.w	fp, [r1, #16]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1d3d4:	4680      	mov	r8, r0
   1d3d6:	b08f      	sub	sp, #60	; 0x3c
  TFLITE_DCHECK(node->user_data != nullptr);
   1d3d8:	f1bb 0f00 	cmp.w	fp, #0
   1d3dc:	d101      	bne.n	1d3e2 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x1a>
   1d3de:	f013 fcec 	bl	30dba <abort>
   1d3e2:	680b      	ldr	r3, [r1, #0]
  OpData* data = static_cast<OpData*>(node->user_data);

  const TfLiteTensor* input = GetInput(context, node, 0);
   1d3e4:	6887      	ldr	r7, [r0, #8]
   1d3e6:	685d      	ldr	r5, [r3, #4]
  return &context->tensors[node->outputs->data[index]];
   1d3e8:	684b      	ldr	r3, [r1, #4]
  return &context->tensors[node->inputs->data[index]];
   1d3ea:	ea4f 1985 	mov.w	r9, r5, lsl #6

  tflite::QuantizationParams op_params;
  op_params.zero_point = output->params.zero_point;
  op_params.scale = static_cast<double>(output->params.scale);

  if (input->type == kTfLiteFloat32) {
   1d3ee:	f817 6009 	ldrb.w	r6, [r7, r9]
  return &context->tensors[node->outputs->data[index]];
   1d3f2:	685c      	ldr	r4, [r3, #4]
   1d3f4:	2e01      	cmp	r6, #1
   1d3f6:	ea4f 1a84 	mov.w	sl, r4, lsl #6
  return &context->tensors[node->inputs->data[index]];
   1d3fa:	eb07 1585 	add.w	r5, r7, r5, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1d3fe:	eb07 1484 	add.w	r4, r7, r4, lsl #6
   1d402:	d17f      	bne.n	1d504 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x13c>
    switch (output->type) {
   1d404:	f817 300a 	ldrb.w	r3, [r7, sl]
  op_params.scale = static_cast<double>(output->params.scale);
   1d408:	ed94 8a03 	vldr	s16, [r4, #12]
    switch (output->type) {
   1d40c:	2b03      	cmp	r3, #3
  op_params.zero_point = output->params.zero_point;
   1d40e:	f8d4 9010 	ldr.w	r9, [r4, #16]
    switch (output->type) {
   1d412:	d031      	beq.n	1d478 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0xb0>
   1d414:	2b09      	cmp	r3, #9
   1d416:	d161      	bne.n	1d4dc <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x114>
      case kTfLiteInt8:
        reference_ops::AffineQuantize(
            op_params, GetTensorShape(input), GetTensorData<float>(input),
   1d418:	4629      	mov	r1, r5
   1d41a:	a802      	add	r0, sp, #8
   1d41c:	f00a f90e 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
            GetTensorShape(output), GetTensorData<int8_t>(output));
   1d420:	4621      	mov	r1, r4
   1d422:	a808      	add	r0, sp, #32
   1d424:	686d      	ldr	r5, [r5, #4]
   1d426:	f00a f909 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                           const InputT* input_data,
                           const RuntimeShape& output_shape,
                           OutputT* output_data) {
  const int32 zero_point = op_params.zero_point;
  const double scale = op_params.scale;
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   1d42a:	a908      	add	r1, sp, #32
   1d42c:	a802      	add	r0, sp, #8
   1d42e:	f00a f8dc 	bl	275ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1d432:	6867      	ldr	r7, [r4, #4]
   1d434:	4606      	mov	r6, r0
  static constexpr int32 min_val = std::numeric_limits<OutputT>::min();
  static constexpr int32 max_val = std::numeric_limits<OutputT>::max();

  for (int i = 0; i < flat_size; i++) {
   1d436:	2400      	movs	r4, #0
    const InputT val = input_data[i];
    int32 unclamped =
        static_cast<int32>(TfLiteRound(val / static_cast<float>(scale))) +
        zero_point;
    int32 clamped = std::min(std::max(unclamped, min_val), max_val);
    output_data[i] = clamped;
   1d438:	f06f 087f 	mvn.w	r8, #127	; 0x7f
  for (int i = 0; i < flat_size; i++) {
   1d43c:	42a6      	cmp	r6, r4
   1d43e:	dd45      	ble.n	1d4cc <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x104>
    const InputT val = input_data[i];
   1d440:	ecf5 7a01 	vldmia	r5!, {s15}
   1d444:	eec7 7a88 	vdiv.f32	s15, s15, s16
   1d448:	ee17 0a90 	vmov	r0, s15
   1d44c:	f7ef f85c 	bl	c508 <__aeabi_f2d>
   1d450:	f005 fb3c 	bl	22acc <round>
   1d454:	f7f3 faec 	bl	10a30 <__aeabi_d2f>
        static_cast<int32>(TfLiteRound(val / static_cast<float>(scale))) +
   1d458:	ee07 0a90 	vmov	s15, r0
   1d45c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   1d460:	ee17 3a90 	vmov	r3, s15
   1d464:	444b      	add	r3, r9
    output_data[i] = clamped;
   1d466:	2b7f      	cmp	r3, #127	; 0x7f
   1d468:	bfa8      	it	ge
   1d46a:	237f      	movge	r3, #127	; 0x7f
   1d46c:	4543      	cmp	r3, r8
   1d46e:	bfb8      	it	lt
   1d470:	4643      	movlt	r3, r8
   1d472:	553b      	strb	r3, [r7, r4]
  for (int i = 0; i < flat_size; i++) {
   1d474:	3401      	adds	r4, #1
   1d476:	e7e1      	b.n	1d43c <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x74>
        break;
      case kTfLiteUInt8:
        reference_ops::AffineQuantize(
            op_params, GetTensorShape(input), GetTensorData<float>(input),
   1d478:	4629      	mov	r1, r5
   1d47a:	a802      	add	r0, sp, #8
   1d47c:	f00a f8de 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
            GetTensorShape(output), GetTensorData<uint8_t>(output));
   1d480:	4621      	mov	r1, r4
   1d482:	a808      	add	r0, sp, #32
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1d484:	686d      	ldr	r5, [r5, #4]
   1d486:	f00a f8d9 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   1d48a:	a908      	add	r1, sp, #32
   1d48c:	a802      	add	r0, sp, #8
   1d48e:	f00a f8ac 	bl	275ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1d492:	6867      	ldr	r7, [r4, #4]
   1d494:	4606      	mov	r6, r0
  for (int i = 0; i < flat_size; i++) {
   1d496:	2400      	movs	r4, #0
   1d498:	42a6      	cmp	r6, r4
   1d49a:	dd17      	ble.n	1d4cc <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x104>
    const InputT val = input_data[i];
   1d49c:	ecf5 7a01 	vldmia	r5!, {s15}
   1d4a0:	eec7 7a88 	vdiv.f32	s15, s15, s16
   1d4a4:	ee17 0a90 	vmov	r0, s15
   1d4a8:	f7ef f82e 	bl	c508 <__aeabi_f2d>
   1d4ac:	f005 fb0e 	bl	22acc <round>
   1d4b0:	f7f3 fabe 	bl	10a30 <__aeabi_d2f>
        static_cast<int32>(TfLiteRound(val / static_cast<float>(scale))) +
   1d4b4:	ee07 0a90 	vmov	s15, r0
   1d4b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   1d4bc:	ee17 3a90 	vmov	r3, s15
   1d4c0:	444b      	add	r3, r9
    output_data[i] = clamped;
   1d4c2:	f383 0308 	usat	r3, #8, r3
   1d4c6:	553b      	strb	r3, [r7, r4]
  for (int i = 0; i < flat_size; i++) {
   1d4c8:	3401      	adds	r4, #1
   1d4ca:	e7e5      	b.n	1d498 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0xd0>
   1d4cc:	a808      	add	r0, sp, #32
   1d4ce:	f00a f870 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
            op_params, GetTensorShape(input), GetTensorData<float>(input),
   1d4d2:	a802      	add	r0, sp, #8
   1d4d4:	f00a f86d 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
                       TfLiteTypeGetName(input->type),
                       TfLiteTypeGetName(output->type));
    return kTfLiteError;
  }

  return kTfLiteOk;
   1d4d8:	2600      	movs	r6, #0
   1d4da:	e00d      	b.n	1d4f8 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x130>
        TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
   1d4dc:	6944      	ldr	r4, [r0, #20]
   1d4de:	4630      	mov	r0, r6
   1d4e0:	f7ef fbf0 	bl	ccc4 <TfLiteTypeGetName>
   1d4e4:	9001      	str	r0, [sp, #4]
   1d4e6:	f817 000a 	ldrb.w	r0, [r7, sl]
   1d4ea:	f7ef fbeb 	bl	ccc4 <TfLiteTypeGetName>
   1d4ee:	9a01      	ldr	r2, [sp, #4]
   1d4f0:	4603      	mov	r3, r0
   1d4f2:	4938      	ldr	r1, [pc, #224]	; (1d5d4 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x20c>)
   1d4f4:	4640      	mov	r0, r8
   1d4f6:	47a0      	blx	r4
}
   1d4f8:	4630      	mov	r0, r6
   1d4fa:	b00f      	add	sp, #60	; 0x3c
   1d4fc:	ecbd 8b02 	vpop	{d8}
   1d500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (input->type == kTfLiteInt16) {
   1d504:	2e07      	cmp	r6, #7
   1d506:	d126      	bne.n	1d556 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x18e>
    size_t size = ElementCount(*input->dims);
   1d508:	68a8      	ldr	r0, [r5, #8]
   1d50a:	f012 fea9 	bl	30260 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
    switch (output->type) {
   1d50e:	f817 300a 	ldrb.w	r3, [r7, sl]
    size_t size = ElementCount(*input->dims);
   1d512:	4606      	mov	r6, r0
    switch (output->type) {
   1d514:	2b09      	cmp	r3, #9
   1d516:	d147      	bne.n	1d5a8 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x1e0>
        reference_ops::Requantize(
   1d518:	e9db ab00 	ldrd	sl, fp, [fp]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1d51c:	f8d5 9004 	ldr.w	r9, [r5, #4]
            data->output_shift, input->params.zero_point,
   1d520:	692b      	ldr	r3, [r5, #16]
        reference_ops::Requantize(
   1d522:	6927      	ldr	r7, [r4, #16]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1d524:	6865      	ldr	r5, [r4, #4]
    output_data[i] = static_cast<output_type>(clamped_output);
   1d526:	f06f 087f 	mvn.w	r8, #127	; 0x7f
   1d52a:	2400      	movs	r4, #0
  for (int i = 0; i < size; ++i) {
   1d52c:	42a6      	cmp	r6, r4
   1d52e:	ddd3      	ble.n	1d4d8 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x110>
    const int32_t input = input_data[i] - input_zeropoint;
   1d530:	f939 0014 	ldrsh.w	r0, [r9, r4, lsl #1]
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
   1d534:	465a      	mov	r2, fp
   1d536:	1ac0      	subs	r0, r0, r3
   1d538:	4651      	mov	r1, sl
   1d53a:	9301      	str	r3, [sp, #4]
   1d53c:	f7fb fee8 	bl	19310 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
                                      effective_scale_shift) +
   1d540:	4438      	add	r0, r7
    output_data[i] = static_cast<output_type>(clamped_output);
   1d542:	4540      	cmp	r0, r8
   1d544:	bfb8      	it	lt
   1d546:	4640      	movlt	r0, r8
   1d548:	287f      	cmp	r0, #127	; 0x7f
   1d54a:	bfa8      	it	ge
   1d54c:	207f      	movge	r0, #127	; 0x7f
  for (int i = 0; i < size; ++i) {
   1d54e:	9b01      	ldr	r3, [sp, #4]
    output_data[i] = static_cast<output_type>(clamped_output);
   1d550:	5528      	strb	r0, [r5, r4]
  for (int i = 0; i < size; ++i) {
   1d552:	3401      	adds	r4, #1
   1d554:	e7ea      	b.n	1d52c <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x164>
  } else if (input->type == kTfLiteInt8) {
   1d556:	2e09      	cmp	r6, #9
   1d558:	d138      	bne.n	1d5cc <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x204>
    size_t size = ElementCount(*input->dims);
   1d55a:	68a8      	ldr	r0, [r5, #8]
   1d55c:	f012 fe80 	bl	30260 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
    switch (output->type) {
   1d560:	f817 300a 	ldrb.w	r3, [r7, sl]
    size_t size = ElementCount(*input->dims);
   1d564:	4606      	mov	r6, r0
    switch (output->type) {
   1d566:	2b09      	cmp	r3, #9
   1d568:	d11e      	bne.n	1d5a8 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x1e0>
        reference_ops::Requantize(
   1d56a:	e9db 9b00 	ldrd	r9, fp, [fp]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1d56e:	f8d5 a004 	ldr.w	sl, [r5, #4]
            data->output_shift, input->params.zero_point,
   1d572:	692b      	ldr	r3, [r5, #16]
        reference_ops::Requantize(
   1d574:	6927      	ldr	r7, [r4, #16]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1d576:	6865      	ldr	r5, [r4, #4]
    output_data[i] = static_cast<output_type>(clamped_output);
   1d578:	f06f 087f 	mvn.w	r8, #127	; 0x7f
   1d57c:	2400      	movs	r4, #0
  for (int i = 0; i < size; ++i) {
   1d57e:	42a6      	cmp	r6, r4
   1d580:	ddaa      	ble.n	1d4d8 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x110>
    const int32_t input = input_data[i] - input_zeropoint;
   1d582:	f91a 0004 	ldrsb.w	r0, [sl, r4]
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
   1d586:	465a      	mov	r2, fp
   1d588:	1ac0      	subs	r0, r0, r3
   1d58a:	4649      	mov	r1, r9
   1d58c:	9301      	str	r3, [sp, #4]
   1d58e:	f7fb febf 	bl	19310 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
                                      effective_scale_shift) +
   1d592:	4438      	add	r0, r7
    output_data[i] = static_cast<output_type>(clamped_output);
   1d594:	4540      	cmp	r0, r8
   1d596:	bfb8      	it	lt
   1d598:	4640      	movlt	r0, r8
   1d59a:	287f      	cmp	r0, #127	; 0x7f
   1d59c:	bfa8      	it	ge
   1d59e:	207f      	movge	r0, #127	; 0x7f
  for (int i = 0; i < size; ++i) {
   1d5a0:	9b01      	ldr	r3, [sp, #4]
    output_data[i] = static_cast<output_type>(clamped_output);
   1d5a2:	5528      	strb	r0, [r5, r4]
  for (int i = 0; i < size; ++i) {
   1d5a4:	3401      	adds	r4, #1
   1d5a6:	e7ea      	b.n	1d57e <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x1b6>
        TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
   1d5a8:	f8d8 4014 	ldr.w	r4, [r8, #20]
   1d5ac:	f817 0009 	ldrb.w	r0, [r7, r9]
    TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
   1d5b0:	f7ef fb88 	bl	ccc4 <TfLiteTypeGetName>
   1d5b4:	9001      	str	r0, [sp, #4]
   1d5b6:	f817 000a 	ldrb.w	r0, [r7, sl]
   1d5ba:	f7ef fb83 	bl	ccc4 <TfLiteTypeGetName>
   1d5be:	9a01      	ldr	r2, [sp, #4]
   1d5c0:	4603      	mov	r3, r0
   1d5c2:	4904      	ldr	r1, [pc, #16]	; (1d5d4 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x20c>)
   1d5c4:	4640      	mov	r0, r8
   1d5c6:	47a0      	blx	r4
    return kTfLiteError;
   1d5c8:	2601      	movs	r6, #1
   1d5ca:	e795      	b.n	1d4f8 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x130>
    TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
   1d5cc:	6944      	ldr	r4, [r0, #20]
   1d5ce:	4630      	mov	r0, r6
   1d5d0:	e7ee      	b.n	1d5b0 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x1e8>
   1d5d2:	bf00      	nop
   1d5d4:	0003501f 	.word	0x0003501f

0001d5d8 <_ZN6tflite3ops5micro17Register_QUANTIZEEv>:
}  // namespace quantize

// This Op (QUANTIZE) quantizes the input and produces quantized output.
// AffineQuantize takes scale and zero point and quantizes the float value to
// quantized output, in int8 or uint8 format.
TfLiteRegistration Register_QUANTIZE() {
   1d5d8:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/quantize::Prepare,
          /*invoke=*/quantize::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1d5da:	4604      	mov	r4, r0
TfLiteRegistration Register_QUANTIZE() {
   1d5dc:	4606      	mov	r6, r0
          /*version=*/0};
   1d5de:	4d04      	ldr	r5, [pc, #16]	; (1d5f0 <_ZN6tflite3ops5micro17Register_QUANTIZEEv+0x18>)
   1d5e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1d5e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1d5e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1d5e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1d5ec:	4630      	mov	r0, r6
   1d5ee:	bd70      	pop	{r4, r5, r6, pc}
   1d5f0:	00031ad8 	.word	0x00031ad8

0001d5f4 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode>:
namespace reduce {

constexpr int kMaxNumberOfAxis = 4;
constexpr int kMaxNumberOfReducedAxis = 2;

TfLiteStatus PrepareSimple(TfLiteContext* context, TfLiteNode* node) {
   1d5f4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}

  // Outputs Tensor (dtype depends on quantization):
  // [0] = Output

  // Validate number of inputs and outputs
  TF_LITE_ENSURE_EQ(context, node->inputs->size, 2);
   1d5f8:	680b      	ldr	r3, [r1, #0]
TfLiteStatus PrepareSimple(TfLiteContext* context, TfLiteNode* node) {
   1d5fa:	4605      	mov	r5, r0
  TF_LITE_ENSURE_EQ(context, node->inputs->size, 2);
   1d5fc:	681f      	ldr	r7, [r3, #0]
   1d5fe:	2f02      	cmp	r7, #2
   1d600:	d00f      	beq.n	1d622 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x2e>
   1d602:	2302      	movs	r3, #2
   1d604:	e9cd 7302 	strd	r7, r3, [sp, #8]
   1d608:	4b1b      	ldr	r3, [pc, #108]	; (1d678 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x84>)
   1d60a:	9301      	str	r3, [sp, #4]
   1d60c:	4b1b      	ldr	r3, [pc, #108]	; (1d67c <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x88>)
   1d60e:	9300      	str	r3, [sp, #0]
   1d610:	232a      	movs	r3, #42	; 0x2a
   1d612:	6944      	ldr	r4, [r0, #20]
   1d614:	4a1a      	ldr	r2, [pc, #104]	; (1d680 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x8c>)
   1d616:	491b      	ldr	r1, [pc, #108]	; (1d684 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x90>)
   1d618:	47a0      	blx	r4
   1d61a:	2001      	movs	r0, #1

  // Validate axis type
  const TfLiteTensor* axis = GetInput(context, node, 1);
  TF_LITE_ENSURE_TYPES_EQ(context, axis->type, kTfLiteInt32);
  return kTfLiteOk;
}
   1d61c:	b004      	add	sp, #16
   1d61e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
   1d622:	684a      	ldr	r2, [r1, #4]
   1d624:	6814      	ldr	r4, [r2, #0]
   1d626:	2c01      	cmp	r4, #1
   1d628:	d009      	beq.n	1d63e <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x4a>
   1d62a:	2601      	movs	r6, #1
   1d62c:	4b16      	ldr	r3, [pc, #88]	; (1d688 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x94>)
   1d62e:	e9cd 4602 	strd	r4, r6, [sp, #8]
   1d632:	9301      	str	r3, [sp, #4]
   1d634:	4b15      	ldr	r3, [pc, #84]	; (1d68c <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x98>)
   1d636:	9300      	str	r3, [sp, #0]
   1d638:	6944      	ldr	r4, [r0, #20]
   1d63a:	232b      	movs	r3, #43	; 0x2b
   1d63c:	e7ea      	b.n	1d614 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x20>
  return &context->tensors[node->inputs->data[index]];
   1d63e:	689b      	ldr	r3, [r3, #8]
  TF_LITE_ENSURE_TYPES_EQ(context, axis->type, kTfLiteInt32);
   1d640:	6882      	ldr	r2, [r0, #8]
   1d642:	019b      	lsls	r3, r3, #6
   1d644:	5cd0      	ldrb	r0, [r2, r3]
   1d646:	2802      	cmp	r0, #2
   1d648:	d013      	beq.n	1d672 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x7e>
   1d64a:	f8d5 8014 	ldr.w	r8, [r5, #20]
   1d64e:	f7ef fb39 	bl	ccc4 <TfLiteTypeGetName>
   1d652:	4606      	mov	r6, r0
   1d654:	4638      	mov	r0, r7
   1d656:	f7ef fb35 	bl	ccc4 <TfLiteTypeGetName>
   1d65a:	4b0d      	ldr	r3, [pc, #52]	; (1d690 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x9c>)
   1d65c:	e9cd 6002 	strd	r6, r0, [sp, #8]
   1d660:	9301      	str	r3, [sp, #4]
   1d662:	4b0c      	ldr	r3, [pc, #48]	; (1d694 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0xa0>)
   1d664:	4628      	mov	r0, r5
   1d666:	9300      	str	r3, [sp, #0]
   1d668:	4a05      	ldr	r2, [pc, #20]	; (1d680 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x8c>)
   1d66a:	232f      	movs	r3, #47	; 0x2f
   1d66c:	490a      	ldr	r1, [pc, #40]	; (1d698 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0xa4>)
   1d66e:	47c0      	blx	r8
   1d670:	e7d3      	b.n	1d61a <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x26>
  return kTfLiteOk;
   1d672:	2000      	movs	r0, #0
   1d674:	e7d2      	b.n	1d61c <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x28>
   1d676:	bf00      	nop
   1d678:	000353ec 	.word	0x000353ec
   1d67c:	000358d5 	.word	0x000358d5
   1d680:	000358ad 	.word	0x000358ad
   1d684:	00034a7c 	.word	0x00034a7c
   1d688:	00035814 	.word	0x00035814
   1d68c:	00034d52 	.word	0x00034d52
   1d690:	00035012 	.word	0x00035012
   1d694:	000358e8 	.word	0x000358e8
   1d698:	00034ab7 	.word	0x00034ab7

0001d69c <_ZN6tflite3ops5micro13Register_MEANEv>:
  }
  return kTfLiteOk;
}
}  // namespace reduce

TfLiteRegistration Register_MEAN() {
   1d69c:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/reduce::PrepareMeanOrSum,
          /*invoke=*/reduce::EvalMean,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1d69e:	4604      	mov	r4, r0
TfLiteRegistration Register_MEAN() {
   1d6a0:	4606      	mov	r6, r0
          /*version=*/0};
   1d6a2:	4d04      	ldr	r5, [pc, #16]	; (1d6b4 <_ZN6tflite3ops5micro13Register_MEANEv+0x18>)
   1d6a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1d6a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1d6a8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1d6ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1d6b0:	4630      	mov	r0, r6
   1d6b2:	bd70      	pop	{r4, r5, r6, pc}
   1d6b4:	00031af8 	.word	0x00031af8

0001d6b8 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>:
  }
  return true;
}

template <typename T>
inline void Mean(const tflite::MeanParams& op_params,
   1d6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d6bc:	ed2d 8b02 	vpush	{d8}
   1d6c0:	4604      	mov	r4, r0
   1d6c2:	4608      	mov	r0, r1
                 const RuntimeShape& unextended_output_shape, T* output_data) {
  ruy::profiler::ScopeLabel label("Mean4D");

  // Current implementation only supports dimension equals 4 and simultaneous
  // reduction over width and height.
  TFLITE_CHECK_EQ(unextended_input_shape.DimensionsCount(), 4);
   1d6c4:	6809      	ldr	r1, [r1, #0]
inline void Mean(const tflite::MeanParams& op_params,
   1d6c6:	4692      	mov	sl, r2
  TFLITE_CHECK_EQ(unextended_input_shape.DimensionsCount(), 4);
   1d6c8:	2904      	cmp	r1, #4
inline void Mean(const tflite::MeanParams& op_params,
   1d6ca:	461d      	mov	r5, r3
   1d6cc:	b091      	sub	sp, #68	; 0x44
  TFLITE_CHECK_EQ(unextended_input_shape.DimensionsCount(), 4);
   1d6ce:	d001      	beq.n	1d6d4 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1c>
   1d6d0:	f013 fb73 	bl	30dba <abort>
  TFLITE_CHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   1d6d4:	681b      	ldr	r3, [r3, #0]
   1d6d6:	2b04      	cmp	r3, #4
   1d6d8:	dcfa      	bgt.n	1d6d0 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18>
    return RuntimeShape(new_shape_size, shape, 1);
   1d6da:	4602      	mov	r2, r0
   1d6dc:	2301      	movs	r3, #1
   1d6de:	a804      	add	r0, sp, #16
   1d6e0:	9103      	str	r1, [sp, #12]
   1d6e2:	f00a f806 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1d6e6:	462a      	mov	r2, r5
   1d6e8:	2301      	movs	r3, #1
   1d6ea:	9903      	ldr	r1, [sp, #12]
   1d6ec:	a80a      	add	r0, sp, #40	; 0x28
   1d6ee:	f00a f800 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  const RuntimeShape input_shape =
      RuntimeShape::ExtendedShape(4, unextended_input_shape);
  const RuntimeShape output_shape =
      RuntimeShape::ExtendedShape(4, unextended_output_shape);

  const int output_batch = output_shape.Dims(0);
   1d6f2:	2100      	movs	r1, #0
   1d6f4:	a80a      	add	r0, sp, #40	; 0x28
   1d6f6:	f009 ff67 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   1d6fa:	2101      	movs	r1, #1
  const int output_batch = output_shape.Dims(0);
   1d6fc:	4680      	mov	r8, r0
  const int output_height = output_shape.Dims(1);
   1d6fe:	a80a      	add	r0, sp, #40	; 0x28
   1d700:	f009 ff62 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   1d704:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   1d706:	4606      	mov	r6, r0
  const int output_width = output_shape.Dims(2);
   1d708:	a80a      	add	r0, sp, #40	; 0x28
   1d70a:	f009 ff5d 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_depth = output_shape.Dims(3);
   1d70e:	2103      	movs	r1, #3
  const int output_width = output_shape.Dims(2);
   1d710:	4683      	mov	fp, r0
  const int output_depth = output_shape.Dims(3);
   1d712:	a80a      	add	r0, sp, #40	; 0x28
   1d714:	f009 ff58 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>

  const int input_height = input_shape.Dims(1);
   1d718:	2101      	movs	r1, #1
  const int output_depth = output_shape.Dims(3);
   1d71a:	4681      	mov	r9, r0
  const int input_height = input_shape.Dims(1);
   1d71c:	a804      	add	r0, sp, #16
   1d71e:	f009 ff53 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   1d722:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   1d724:	4605      	mov	r5, r0
  const int input_width = input_shape.Dims(2);
   1d726:	a804      	add	r0, sp, #16
   1d728:	f009 ff4e 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>

  TFLITE_CHECK_EQ(op_params.axis_count, 2);
   1d72c:	f994 2000 	ldrsb.w	r2, [r4]
  const int input_width = input_shape.Dims(2);
   1d730:	4607      	mov	r7, r0
  TFLITE_CHECK_EQ(op_params.axis_count, 2);
   1d732:	2a02      	cmp	r2, #2
   1d734:	d1cc      	bne.n	1d6d0 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18>
  TFLITE_CHECK((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
   1d736:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   1d73a:	2a01      	cmp	r2, #1
   1d73c:	d12b      	bne.n	1d796 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xde>
   1d73e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
   1d742:	2a02      	cmp	r2, #2
   1d744:	d1c4      	bne.n	1d6d0 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18>
               (op_params.axis[0] == 2 && op_params.axis[1] == 1));
  TFLITE_CHECK_EQ(output_height, 1);
   1d746:	2e01      	cmp	r6, #1
   1d748:	d1c2      	bne.n	1d6d0 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18>
  TFLITE_CHECK_EQ(output_width, 1);
   1d74a:	f1bb 0f01 	cmp.w	fp, #1
   1d74e:	d1bf      	bne.n	1d6d0 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18>
        for (int in_w = 0; in_w < input_width; ++in_w) {
          value += input_data[Offset(input_shape, out_b, in_h, in_w, out_d)];
        }
      }
      output_data[Offset(output_shape, out_b, 0, 0, out_d)] =
          value / (input_width * input_height);
   1d750:	fb07 f305 	mul.w	r3, r7, r5
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   1d754:	2400      	movs	r4, #0
          value / (input_width * input_height);
   1d756:	ee08 3a90 	vmov	s17, r3
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   1d75a:	4544      	cmp	r4, r8
   1d75c:	da38      	bge.n	1d7d0 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x118>
    for (int out_d = 0; out_d < output_depth; ++out_d) {
   1d75e:	2600      	movs	r6, #0
   1d760:	454e      	cmp	r6, r9
   1d762:	da33      	bge.n	1d7cc <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x114>
      for (int in_h = 0; in_h < input_height; ++in_h) {
   1d764:	f04f 0b00 	mov.w	fp, #0
      float value = 0;
   1d768:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 1d7e8 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x130>
      for (int in_h = 0; in_h < input_height; ++in_h) {
   1d76c:	45ab      	cmp	fp, r5
   1d76e:	da1b      	bge.n	1d7a8 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xf0>
        for (int in_w = 0; in_w < input_width; ++in_w) {
   1d770:	2300      	movs	r3, #0
   1d772:	42bb      	cmp	r3, r7
   1d774:	da15      	bge.n	1d7a2 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xea>
          value += input_data[Offset(input_shape, out_b, in_h, in_w, out_d)];
   1d776:	465a      	mov	r2, fp
   1d778:	4621      	mov	r1, r4
   1d77a:	9600      	str	r6, [sp, #0]
   1d77c:	a804      	add	r0, sp, #16
   1d77e:	9303      	str	r3, [sp, #12]
   1d780:	f009 ffe4 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   1d784:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
   1d788:	edd0 7a00 	vldr	s15, [r0]
        for (int in_w = 0; in_w < input_width; ++in_w) {
   1d78c:	9b03      	ldr	r3, [sp, #12]
          value += input_data[Offset(input_shape, out_b, in_h, in_w, out_d)];
   1d78e:	ee38 8a27 	vadd.f32	s16, s16, s15
        for (int in_w = 0; in_w < input_width; ++in_w) {
   1d792:	3301      	adds	r3, #1
   1d794:	e7ed      	b.n	1d772 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xba>
  TFLITE_CHECK((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
   1d796:	2a02      	cmp	r2, #2
   1d798:	d19a      	bne.n	1d6d0 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18>
   1d79a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
   1d79e:	2a01      	cmp	r2, #1
   1d7a0:	e7d0      	b.n	1d744 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x8c>
      for (int in_h = 0; in_h < input_height; ++in_h) {
   1d7a2:	f10b 0b01 	add.w	fp, fp, #1
   1d7a6:	e7e1      	b.n	1d76c <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xb4>
      output_data[Offset(output_shape, out_b, 0, 0, out_d)] =
   1d7a8:	2300      	movs	r3, #0
   1d7aa:	9600      	str	r6, [sp, #0]
   1d7ac:	461a      	mov	r2, r3
   1d7ae:	4621      	mov	r1, r4
   1d7b0:	a80a      	add	r0, sp, #40	; 0x28
   1d7b2:	f009 ffcb 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
          value / (input_width * input_height);
   1d7b6:	eeb8 7ae8 	vcvt.f32.s32	s14, s17
   1d7ba:	eec8 7a07 	vdiv.f32	s15, s16, s14
      output_data[Offset(output_shape, out_b, 0, 0, out_d)] =
   1d7be:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    for (int out_d = 0; out_d < output_depth; ++out_d) {
   1d7c0:	3601      	adds	r6, #1
      output_data[Offset(output_shape, out_b, 0, 0, out_d)] =
   1d7c2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1d7c6:	edc0 7a00 	vstr	s15, [r0]
    for (int out_d = 0; out_d < output_depth; ++out_d) {
   1d7ca:	e7c9      	b.n	1d760 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xa8>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   1d7cc:	3401      	adds	r4, #1
   1d7ce:	e7c4      	b.n	1d75a <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xa2>
  const RuntimeShape output_shape =
   1d7d0:	a80a      	add	r0, sp, #40	; 0x28
   1d7d2:	f009 feee 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape =
   1d7d6:	a804      	add	r0, sp, #16
   1d7d8:	f009 feeb 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
    }
  }
}
   1d7dc:	b011      	add	sp, #68	; 0x44
   1d7de:	ecbd 8b02 	vpop	{d8}
   1d7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d7e6:	bf00      	nop
   1d7e8:	00000000 	.word	0x00000000

0001d7ec <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_>:
inline bool Mean(const T* input_data, const int* input_dims,
   1d7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for (int idx = 0; idx < output_num_dims; ++idx) {
   1d7f0:	f04f 0c00 	mov.w	ip, #0
  size_t num_outputs = 1;
   1d7f4:	2701      	movs	r7, #1
inline bool Mean(const T* input_data, const int* input_dims,
   1d7f6:	b089      	sub	sp, #36	; 0x24
   1d7f8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   1d7fa:	4614      	mov	r4, r2
   1d7fc:	9005      	str	r0, [sp, #20]
   1d7fe:	e9dd 2017 	ldrd	r2, r0, [sp, #92]	; 0x5c
   1d802:	9003      	str	r0, [sp, #12]
  for (int idx = 0; idx < output_num_dims; ++idx) {
   1d804:	45b4      	cmp	ip, r6
   1d806:	db10      	blt.n	1d82a <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x3e>
   1d808:	461d      	mov	r5, r3
   1d80a:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
   1d80e:	00bb      	lsls	r3, r7, #2
   1d810:	9304      	str	r3, [sp, #16]
   1d812:	4648      	mov	r0, r9
   1d814:	462b      	mov	r3, r5
    output_data[idx] = T();
   1d816:	2600      	movs	r6, #0
   1d818:	eb05 0787 	add.w	r7, r5, r7, lsl #2
  for (size_t idx = 0; idx < num_outputs; ++idx) {
   1d81c:	429f      	cmp	r7, r3
   1d81e:	d010      	beq.n	1d842 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x56>
    output_data[idx] = T();
   1d820:	f843 6b04 	str.w	r6, [r3], #4
    temp_sum[idx] = U();
   1d824:	f840 6b04 	str.w	r6, [r0], #4
  for (size_t idx = 0; idx < num_outputs; ++idx) {
   1d828:	e7f8      	b.n	1d81c <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x30>
    size_t current = static_cast<size_t>(output_dims[idx]);
   1d82a:	9812      	ldr	r0, [sp, #72]	; 0x48
   1d82c:	f850 502c 	ldr.w	r5, [r0, ip, lsl #2]
    if (num_outputs > std::numeric_limits<size_t>::max() / current) {
   1d830:	fba5 e007 	umull	lr, r0, r5, r7
   1d834:	2800      	cmp	r0, #0
   1d836:	f040 80a6 	bne.w	1d986 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x19a>
    num_outputs *= current;
   1d83a:	436f      	muls	r7, r5
  for (int idx = 0; idx < output_num_dims; ++idx) {
   1d83c:	f10c 0c01 	add.w	ip, ip, #1
   1d840:	e7e0      	b.n	1d804 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x18>
  if (num_dims == 0) {
   1d842:	b37c      	cbz	r4, 1d8a4 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0xb8>
  if (!ResolveAxis(input_num_dims, axis, num_axis_dimensions, resolved_axis,
   1d844:	9b15      	ldr	r3, [sp, #84]	; 0x54
  *out_num_axis = 0;  // Just in case.
   1d846:	2600      	movs	r6, #0
  if (!ResolveAxis(input_num_dims, axis, num_axis_dimensions, resolved_axis,
   1d848:	461f      	mov	r7, r3
  for (int64_t idx = 0; idx < num_axis; ++idx) {
   1d84a:	f04f 0a00 	mov.w	sl, #0
   1d84e:	f04f 0b00 	mov.w	fp, #0
  if (!ResolveAxis(input_num_dims, axis, num_axis_dimensions, resolved_axis,
   1d852:	ea4f 78e3 	mov.w	r8, r3, asr #31
   1d856:	e9cd 7806 	strd	r7, r8, [sp, #24]
  for (int64_t idx = 0; idx < num_axis; ++idx) {
   1d85a:	e9dd 7806 	ldrd	r7, r8, [sp, #24]
   1d85e:	45ba      	cmp	sl, r7
   1d860:	eb7b 0308 	sbcs.w	r3, fp, r8
   1d864:	da16      	bge.n	1d894 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0xa8>
    int current = axis[idx] < 0 ? (axis[idx] + num_dims) : axis[idx];
   1d866:	9814      	ldr	r0, [sp, #80]	; 0x50
   1d868:	ea4f 038a 	mov.w	r3, sl, lsl #2
   1d86c:	58c0      	ldr	r0, [r0, r3]
   1d86e:	2800      	cmp	r0, #0
   1d870:	da01      	bge.n	1d876 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x8a>
    TFLITE_DCHECK(current >= 0 && current < num_dims);
   1d872:	1900      	adds	r0, r0, r4
   1d874:	d401      	bmi.n	1d87a <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x8e>
   1d876:	4284      	cmp	r4, r0
   1d878:	dc01      	bgt.n	1d87e <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x92>
   1d87a:	f013 fa9e 	bl	30dba <abort>
    for (int j = 0; j < *out_num_axis; ++j) {
   1d87e:	2700      	movs	r7, #0
   1d880:	42b7      	cmp	r7, r6
      out_axis[*out_num_axis] = current;
   1d882:	9b03      	ldr	r3, [sp, #12]
    for (int j = 0; j < *out_num_axis; ++j) {
   1d884:	f280 8081 	bge.w	1d98a <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x19e>
      if (out_axis[j] == current) {
   1d888:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
   1d88c:	4283      	cmp	r3, r0
   1d88e:	d07f      	beq.n	1d990 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x1a4>
    for (int j = 0; j < *out_num_axis; ++j) {
   1d890:	3701      	adds	r7, #1
   1d892:	e7f5      	b.n	1d880 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x94>
  for (int idx = 0; idx < input_num_dims; ++idx) {
   1d894:	2300      	movs	r3, #0
    input_iter[idx] = 0;
   1d896:	4618      	mov	r0, r3
  for (int idx = 0; idx < input_num_dims; ++idx) {
   1d898:	429c      	cmp	r4, r3
   1d89a:	dd04      	ble.n	1d8a6 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0xba>
    input_iter[idx] = 0;
   1d89c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  for (int idx = 0; idx < input_num_dims; ++idx) {
   1d8a0:	3301      	adds	r3, #1
   1d8a2:	e7f9      	b.n	1d898 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0xac>
  *out_num_axis = 0;  // Just in case.
   1d8a4:	4626      	mov	r6, r4
        ReducedOutputOffset(input_num_dims, input_dims, input_iter, 0, nullptr);
   1d8a6:	f04f 0a00 	mov.w	sl, #0
   1d8aa:	eb02 0b84 	add.w	fp, r2, r4, lsl #2
   1d8ae:	2300      	movs	r3, #0
   1d8b0:	4620      	mov	r0, r4
   1d8b2:	f8cd a000 	str.w	sl, [sp]
   1d8b6:	9217      	str	r2, [sp, #92]	; 0x5c
   1d8b8:	9106      	str	r1, [sp, #24]
   1d8ba:	f010 fc99 	bl	2e1f0 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_>
    size_t output_offset = ReducedOutputOffset(input_num_dims, input_dims,
   1d8be:	9b03      	ldr	r3, [sp, #12]
        ReducedOutputOffset(input_num_dims, input_dims, input_iter, 0, nullptr);
   1d8c0:	4607      	mov	r7, r0
    size_t output_offset = ReducedOutputOffset(input_num_dims, input_dims,
   1d8c2:	9906      	ldr	r1, [sp, #24]
   1d8c4:	9300      	str	r3, [sp, #0]
   1d8c6:	4620      	mov	r0, r4
   1d8c8:	4633      	mov	r3, r6
   1d8ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1d8cc:	f010 fc90 	bl	2e1f0 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_>
        reducer(output_data[output_offset], input_data[input_offset]);
   1d8d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
  if (num_dims == 0) {
   1d8d2:	9906      	ldr	r1, [sp, #24]
   1d8d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1d8d8:	9b05      	ldr	r3, [sp, #20]
    return current + actual_in;
   1d8da:	edd0 7a00 	vldr	s15, [r0]
        reducer(output_data[output_offset], input_data[input_offset]);
   1d8de:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    return current + actual_in;
   1d8e2:	ed97 7a00 	vldr	s14, [r7]
   1d8e6:	ee77 7a87 	vadd.f32	s15, s15, s14
    output_data[output_offset] =
   1d8ea:	edc0 7a00 	vstr	s15, [r0]
   1d8ee:	b1d4      	cbz	r4, 1d926 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x13a>
  TFLITE_DCHECK(dims != nullptr);
   1d8f0:	2900      	cmp	r1, #0
   1d8f2:	d0c2      	beq.n	1d87a <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x8e>
  TFLITE_DCHECK(current != nullptr);
   1d8f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1d8f6:	2a00      	cmp	r2, #0
   1d8f8:	d0bf      	beq.n	1d87a <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x8e>
  for (int idx = num_dims - 1; idx >= 0; --idx) {
   1d8fa:	465b      	mov	r3, fp
   1d8fc:	1e67      	subs	r7, r4, #1
   1d8fe:	2f00      	cmp	r7, #0
   1d900:	db11      	blt.n	1d926 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x13a>
    int current_val = current[idx] + carry;
   1d902:	f1a3 0c04 	sub.w	ip, r3, #4
   1d906:	f853 3c04 	ldr.w	r3, [r3, #-4]
    TFLITE_DCHECK_GE(dims[idx], current_val);
   1d90a:	f851 0027 	ldr.w	r0, [r1, r7, lsl #2]
    int current_val = current[idx] + carry;
   1d90e:	3301      	adds	r3, #1
    TFLITE_DCHECK_GE(dims[idx], current_val);
   1d910:	4283      	cmp	r3, r0
   1d912:	dcb2      	bgt.n	1d87a <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x8e>
    if (dims[idx] == current_val) {
   1d914:	d104      	bne.n	1d920 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x134>
      current[idx] = 0;
   1d916:	4663      	mov	r3, ip
   1d918:	f8cc a000 	str.w	sl, [ip]
  for (int idx = num_dims - 1; idx >= 0; --idx) {
   1d91c:	3f01      	subs	r7, #1
   1d91e:	e7ee      	b.n	1d8fe <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x112>
      current[idx] = current_val;
   1d920:	f8cc 3000 	str.w	r3, [ip]
  return (carry == 0);
   1d924:	e7c3      	b.n	1d8ae <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0xc2>
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
   1d926:	2300      	movs	r3, #0
  U num_elements_in_axis = 1;
   1d928:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    if (current > (std::numeric_limits<U>::max() / num_elements_in_axis)) {
   1d92c:	eddf 6a1b 	vldr	s13, [pc, #108]	; 1d99c <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x1b0>
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
   1d930:	42b3      	cmp	r3, r6
   1d932:	da13      	bge.n	1d95c <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x170>
    size_t current = static_cast<size_t>(input_dims[resolved_axis[idx]]);
   1d934:	9a03      	ldr	r2, [sp, #12]
    if (current > (std::numeric_limits<U>::max() / num_elements_in_axis)) {
   1d936:	ee86 6aa7 	vdiv.f32	s12, s13, s15
    size_t current = static_cast<size_t>(input_dims[resolved_axis[idx]]);
   1d93a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (current > (std::numeric_limits<U>::max() / num_elements_in_axis)) {
   1d93e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   1d942:	ed92 7a00 	vldr	s14, [r2]
   1d946:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   1d94a:	eeb4 7ac6 	vcmpe.f32	s14, s12
   1d94e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1d952:	dc18      	bgt.n	1d986 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x19a>
    num_elements_in_axis *= current;
   1d954:	ee67 7a87 	vmul.f32	s15, s15, s14
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
   1d958:	3301      	adds	r3, #1
   1d95a:	e7e9      	b.n	1d930 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x144>
  if (num_elements_in_axis > 0) {
   1d95c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   1d960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1d964:	dd0b      	ble.n	1d97e <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x192>
   1d966:	9b04      	ldr	r3, [sp, #16]
   1d968:	9a19      	ldr	r2, [sp, #100]	; 0x64
   1d96a:	4413      	add	r3, r2
    for (size_t idx = 0; idx < num_outputs; ++idx) {
   1d96c:	4599      	cmp	r9, r3
   1d96e:	d006      	beq.n	1d97e <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x192>
          static_cast<T>(temp_sum[idx] / static_cast<U>(num_elements_in_axis));
   1d970:	ecf9 6a01 	vldmia	r9!, {s13}
   1d974:	ee86 7aa7 	vdiv.f32	s14, s13, s15
      output_data[idx] =
   1d978:	eca5 7a01 	vstmia	r5!, {s14}
    for (size_t idx = 0; idx < num_outputs; ++idx) {
   1d97c:	e7f6      	b.n	1d96c <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x180>
  return true;
   1d97e:	2001      	movs	r0, #1
}
   1d980:	b009      	add	sp, #36	; 0x24
   1d982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return false;
   1d986:	2000      	movs	r0, #0
  template <typename... Args>
  explicit ScopeLabel(Args...) {}

  // This destructor is needed to consistently silence clang's -Wunused-variable
  // which seems to trigger semi-randomly.
  ~ScopeLabel() {}
   1d988:	e7fa      	b.n	1d980 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x194>
      out_axis[*out_num_axis] = current;
   1d98a:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
      *out_num_axis += 1;
   1d98e:	3601      	adds	r6, #1
  for (int64_t idx = 0; idx < num_axis; ++idx) {
   1d990:	f11a 0a01 	adds.w	sl, sl, #1
   1d994:	f14b 0b00 	adc.w	fp, fp, #0
   1d998:	e75f      	b.n	1d85a <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x6e>
   1d99a:	bf00      	nop
   1d99c:	7f7fffff 	.word	0x7f7fffff

0001d9a0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus EvalMean(TfLiteContext* context, TfLiteNode* node) {
   1d9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const TfLiteTensor* input = GetInput(context, node, 0);
   1d9a4:	680b      	ldr	r3, [r1, #0]
   1d9a6:	f8d0 9008 	ldr.w	r9, [r0, #8]
TfLiteStatus EvalMean(TfLiteContext* context, TfLiteNode* node) {
   1d9aa:	4605      	mov	r5, r0
   1d9ac:	468c      	mov	ip, r1
  for (int i = 0; i < dims->size; ++i) {
   1d9ae:	f04f 0e00 	mov.w	lr, #0
  int64_t count = 1;
   1d9b2:	2001      	movs	r0, #1
   1d9b4:	2100      	movs	r1, #0
  return &context->tensors[node->inputs->data[index]];
   1d9b6:	689f      	ldr	r7, [r3, #8]
   1d9b8:	685e      	ldr	r6, [r3, #4]
   1d9ba:	eb09 1787 	add.w	r7, r9, r7, lsl #6
  for (int i = 0; i < dims->size; ++i) {
   1d9be:	68bc      	ldr	r4, [r7, #8]
  return &context->tensors[node->inputs->data[index]];
   1d9c0:	ea4f 1a86 	mov.w	sl, r6, lsl #6
  for (int i = 0; i < dims->size; ++i) {
   1d9c4:	f854 bb04 	ldr.w	fp, [r4], #4
   1d9c8:	b09b      	sub	sp, #108	; 0x6c
  return &context->tensors[node->inputs->data[index]];
   1d9ca:	eb09 1686 	add.w	r6, r9, r6, lsl #6
  for (int i = 0; i < dims->size; ++i) {
   1d9ce:	45f3      	cmp	fp, lr
   1d9d0:	dd0c      	ble.n	1d9ec <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x4c>
    count *= dims->data[i];
   1d9d2:	f854 8b04 	ldr.w	r8, [r4], #4
  for (int i = 0; i < dims->size; ++i) {
   1d9d6:	f10e 0e01 	add.w	lr, lr, #1
    count *= dims->data[i];
   1d9da:	4642      	mov	r2, r8
   1d9dc:	17d3      	asrs	r3, r2, #31
   1d9de:	4343      	muls	r3, r0
   1d9e0:	fb08 3301 	mla	r3, r8, r1, r3
   1d9e4:	fba0 0108 	umull	r0, r1, r0, r8
   1d9e8:	4419      	add	r1, r3
  for (int i = 0; i < dims->size; ++i) {
   1d9ea:	e7f0      	b.n	1d9ce <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x2e>
  switch (input->type) {
   1d9ec:	f819 800a 	ldrb.w	r8, [r9, sl]
   1d9f0:	f1b8 0f01 	cmp.w	r8, #1
   1d9f4:	d16f      	bne.n	1dad6 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x136>
  return &context->tensors[node->outputs->data[index]];
   1d9f6:	f8dc 3004 	ldr.w	r3, [ip, #4]
      ResolveAxis(GetTensorData<int>(axis), num_axis, &op_params);
   1d9fa:	4601      	mov	r1, r0
  int num_axis = static_cast<int>(NumElements(axis));
   1d9fc:	4682      	mov	sl, r0
      ResolveAxis(GetTensorData<int>(axis), num_axis, &op_params);
   1d9fe:	aa0b      	add	r2, sp, #44	; 0x2c
   1da00:	6878      	ldr	r0, [r7, #4]
   1da02:	685c      	ldr	r4, [r3, #4]
  TfLiteReducerParams* params =
   1da04:	f8dc b014 	ldr.w	fp, [ip, #20]
      ResolveAxis(GetTensorData<int>(axis), num_axis, &op_params);
   1da08:	f010 fc16 	bl	2e238 <_ZN6tflite3ops5micro6reduce11ResolveAxisEPKiiPNS_10MeanParamsE>
          (NumDimensions(input) == 4 && op_params.axis_count == 2 &&
   1da0c:	68b1      	ldr	r1, [r6, #8]
   1da0e:	680b      	ldr	r3, [r1, #0]
   1da10:	2b04      	cmp	r3, #4
   1da12:	d10b      	bne.n	1da2c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x8c>
   1da14:	f99d 302c 	ldrsb.w	r3, [sp, #44]	; 0x2c
   1da18:	2b02      	cmp	r3, #2
   1da1a:	d107      	bne.n	1da2c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x8c>
           ((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
   1da1c:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
          (NumDimensions(input) == 4 && op_params.axis_count == 2 &&
   1da20:	2b01      	cmp	r3, #1
   1da22:	d10b      	bne.n	1da3c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x9c>
           ((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
   1da24:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
   1da28:	2b02      	cmp	r3, #2
            (op_params.axis[0] == 2 && op_params.axis[1] == 1)));
   1da2a:	d00d      	beq.n	1da48 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa8>
      TF_LITE_ENSURE_MSG(
   1da2c:	4628      	mov	r0, r5
   1da2e:	696b      	ldr	r3, [r5, #20]
   1da30:	492c      	ldr	r1, [pc, #176]	; (1dae4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x144>)
   1da32:	4798      	blx	r3
}
   1da34:	4640      	mov	r0, r8
   1da36:	b01b      	add	sp, #108	; 0x6c
   1da38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
           ((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
   1da3c:	2b02      	cmp	r3, #2
   1da3e:	d1f5      	bne.n	1da2c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x8c>
            (op_params.axis[0] == 2 && op_params.axis[1] == 1)));
   1da40:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
   1da44:	2b01      	cmp	r3, #1
   1da46:	e7f0      	b.n	1da2a <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x8a>
      if (params->keep_dims) {
   1da48:	f89b 3000 	ldrb.w	r3, [fp]
   1da4c:	eb09 1484 	add.w	r4, r9, r4, lsl #6
   1da50:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
   1da54:	f10d 0938 	add.w	r9, sp, #56	; 0x38
   1da58:	b1db      	cbz	r3, 1da92 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xf2>
        reference_ops::Mean(op_params, GetTensorShape(input),
   1da5a:	4631      	mov	r1, r6
   1da5c:	4648      	mov	r0, r9
   1da5e:	f009 fded 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1da62:	6872      	ldr	r2, [r6, #4]
                            GetTensorData<float>(input), GetTensorShape(output),
   1da64:	4621      	mov	r1, r4
   1da66:	4658      	mov	r0, fp
   1da68:	9209      	str	r2, [sp, #36]	; 0x24
   1da6a:	f009 fde7 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1da6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1da70:	b104      	cbz	r4, 1da74 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xd4>
   1da72:	6864      	ldr	r4, [r4, #4]
        reference_ops::Mean(op_params, GetTensorShape(input),
   1da74:	465b      	mov	r3, fp
   1da76:	4649      	mov	r1, r9
   1da78:	a80b      	add	r0, sp, #44	; 0x2c
   1da7a:	9400      	str	r4, [sp, #0]
   1da7c:	f7ff fe1c 	bl	1d6b8 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>
                            GetTensorData<float>(input), GetTensorShape(output),
   1da80:	4658      	mov	r0, fp
   1da82:	f009 fd96 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
        reference_ops::Mean(op_params, GetTensorShape(input),
   1da86:	4648      	mov	r0, r9
   1da88:	f009 fd93 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   1da8c:	f04f 0800 	mov.w	r8, #0
   1da90:	e7d0      	b.n	1da34 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x94>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1da92:	6870      	ldr	r0, [r6, #4]
        TF_LITE_ENSURE(
   1da94:	3104      	adds	r1, #4
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1da96:	b1e4      	cbz	r4, 1dad2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x132>
   1da98:	6863      	ldr	r3, [r4, #4]
   1da9a:	68a2      	ldr	r2, [r4, #8]
   1da9c:	2400      	movs	r4, #0
   1da9e:	e9cd 9306 	strd	r9, r3, [sp, #24]
   1daa2:	e9cd a403 	strd	sl, r4, [sp, #12]
   1daa6:	f8cd b014 	str.w	fp, [sp, #20]
   1daaa:	687c      	ldr	r4, [r7, #4]
   1daac:	9402      	str	r4, [sp, #8]
   1daae:	f852 4b04 	ldr.w	r4, [r2], #4
   1dab2:	e9cd 2400 	strd	r2, r4, [sp]
   1dab6:	2204      	movs	r2, #4
   1dab8:	f7ff fe98 	bl	1d7ec <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_>
   1dabc:	2800      	cmp	r0, #0
   1dabe:	d1e5      	bne.n	1da8c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xec>
   1dac0:	4b09      	ldr	r3, [pc, #36]	; (1dae8 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x148>)
   1dac2:	4628      	mov	r0, r5
   1dac4:	9300      	str	r3, [sp, #0]
   1dac6:	696c      	ldr	r4, [r5, #20]
   1dac8:	2366      	movs	r3, #102	; 0x66
   1daca:	4a08      	ldr	r2, [pc, #32]	; (1daec <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x14c>)
   1dacc:	4908      	ldr	r1, [pc, #32]	; (1daf0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x150>)
   1dace:	47a0      	blx	r4
   1dad0:	e7b0      	b.n	1da34 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x94>
   1dad2:	4623      	mov	r3, r4
   1dad4:	e7e1      	b.n	1da9a <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xfa>
      TF_LITE_ENSURE_MSG(context, false,
   1dad6:	4628      	mov	r0, r5
   1dad8:	696b      	ldr	r3, [r5, #20]
   1dada:	4906      	ldr	r1, [pc, #24]	; (1daf4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x154>)
   1dadc:	4798      	blx	r3
   1dade:	f04f 0801 	mov.w	r8, #1
   1dae2:	e7a7      	b.n	1da34 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x94>
   1dae4:	000358f3 	.word	0x000358f3
   1dae8:	00035966 	.word	0x00035966
   1daec:	000358ad 	.word	0x000358ad
   1daf0:	00034b9c 	.word	0x00034b9c
   1daf4:	00035a73 	.word	0x00035a73

0001daf8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
namespace reshape {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
   1daf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1dafc:	f8d1 e000 	ldr.w	lr, [r1]
   1db00:	6885      	ldr	r5, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
   1db02:	f8de 3004 	ldr.w	r3, [lr, #4]
  return &context->tensors[node->outputs->data[index]];
   1db06:	684a      	ldr	r2, [r1, #4]
  return &context->tensors[node->inputs->data[index]];
   1db08:	ea4f 1c83 	mov.w	ip, r3, lsl #6
   1db0c:	eb05 1383 	add.w	r3, r5, r3, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1db10:	6856      	ldr	r6, [r2, #4]
  for (int i = 0; i < dims->size; ++i) {
   1db12:	689f      	ldr	r7, [r3, #8]
TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
   1db14:	4604      	mov	r4, r0
   1db16:	f04f 0900 	mov.w	r9, #0
  int64_t count = 1;
   1db1a:	2201      	movs	r2, #1
   1db1c:	2300      	movs	r3, #0
  for (int i = 0; i < dims->size; ++i) {
   1db1e:	f857 bb04 	ldr.w	fp, [r7], #4
  return &context->tensors[node->outputs->data[index]];
   1db22:	ea4f 1886 	mov.w	r8, r6, lsl #6
   1db26:	b085      	sub	sp, #20
   1db28:	eb05 1686 	add.w	r6, r5, r6, lsl #6
  for (int i = 0; i < dims->size; ++i) {
   1db2c:	45cb      	cmp	fp, r9
   1db2e:	dd0c      	ble.n	1db4a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x52>
    count *= dims->data[i];
   1db30:	f857 ab04 	ldr.w	sl, [r7], #4
  for (int i = 0; i < dims->size; ++i) {
   1db34:	f109 0901 	add.w	r9, r9, #1
    count *= dims->data[i];
   1db38:	4650      	mov	r0, sl
   1db3a:	17c1      	asrs	r1, r0, #31
   1db3c:	4351      	muls	r1, r2
   1db3e:	fb0a 1103 	mla	r1, sl, r3, r1
   1db42:	fba2 230a 	umull	r2, r3, r2, sl
   1db46:	440b      	add	r3, r1
  for (int i = 0; i < dims->size; ++i) {
   1db48:	e7f0      	b.n	1db2c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x34>
  // of output elements in the same as the number of input elements.
  int num_input_elements = NumElements(input);
  TfLiteIntArray* output_shape = output->dims;

  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
      output_shape->size == 1 && output_shape->data[0] == 0) {
   1db4a:	f8de 3000 	ldr.w	r3, [lr]
  TfLiteIntArray* output_shape = output->dims;
   1db4e:	68b1      	ldr	r1, [r6, #8]
      output_shape->size == 1 && output_shape->data[0] == 0) {
   1db50:	2b01      	cmp	r3, #1
   1db52:	d105      	bne.n	1db60 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
   1db54:	680b      	ldr	r3, [r1, #0]
   1db56:	2b01      	cmp	r3, #1
   1db58:	d102      	bne.n	1db60 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
      output_shape->size == 1 && output_shape->data[0] == 0) {
   1db5a:	684b      	ldr	r3, [r1, #4]
   1db5c:	b903      	cbnz	r3, 1db60 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
    // Legacy tflite models use a shape parameter of [0] to indicate scalars,
    // so adjust accordingly. TODO(b/111614235): Allow zero-sized buffers during
    // toco conversion.
    output_shape->size = 0;
   1db5e:	600b      	str	r3, [r1, #0]
  }

  int num_output_elements = 1;
  int stretch_dim = -1;
  for (int i = 0; i < output_shape->size; ++i) {
   1db60:	460f      	mov	r7, r1
   1db62:	2600      	movs	r6, #0
  int stretch_dim = -1;
   1db64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  int num_output_elements = 1;
   1db68:	2301      	movs	r3, #1
  for (int i = 0; i < output_shape->size; ++i) {
   1db6a:	f857 9b04 	ldr.w	r9, [r7], #4
   1db6e:	45b1      	cmp	r9, r6
   1db70:	dd1a      	ble.n	1dba8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xb0>
    int value = output_shape->data[i];
   1db72:	f857 eb04 	ldr.w	lr, [r7], #4
    if (value == -1) {
   1db76:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
   1db7a:	d10f      	bne.n	1db9c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa4>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
   1db7c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1db80:	d010      	beq.n	1dba4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xac>
   1db82:	4b23      	ldr	r3, [pc, #140]	; (1dc10 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x118>)
   1db84:	e9cd 0e02 	strd	r0, lr, [sp, #8]
   1db88:	9301      	str	r3, [sp, #4]
   1db8a:	4b22      	ldr	r3, [pc, #136]	; (1dc14 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x11c>)
   1db8c:	6965      	ldr	r5, [r4, #20]
   1db8e:	9300      	str	r3, [sp, #0]
   1db90:	2335      	movs	r3, #53	; 0x35
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
    num_output_elements *= output_shape->data[stretch_dim];
  }

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
   1db92:	4620      	mov	r0, r4
   1db94:	4a20      	ldr	r2, [pc, #128]	; (1dc18 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x120>)
   1db96:	4921      	ldr	r1, [pc, #132]	; (1dc1c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x124>)
   1db98:	47a8      	blx	r5
   1db9a:	e027      	b.n	1dbec <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf4>
      num_output_elements *= value;
   1db9c:	fb0e f303 	mul.w	r3, lr, r3
  for (int i = 0; i < output_shape->size; ++i) {
   1dba0:	3601      	adds	r6, #1
   1dba2:	e7e4      	b.n	1db6e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x76>
   1dba4:	4630      	mov	r0, r6
   1dba6:	e7fb      	b.n	1dba0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa8>
  if (stretch_dim != -1) {
   1dba8:	1c46      	adds	r6, r0, #1
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
   1dbaa:	bf1e      	ittt	ne
   1dbac:	fb92 f6f3 	sdivne	r6, r2, r3
   1dbb0:	eb01 0180 	addne.w	r1, r1, r0, lsl #2
   1dbb4:	604e      	strne	r6, [r1, #4]
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
   1dbb6:	f815 000c 	ldrb.w	r0, [r5, ip]
   1dbba:	f815 1008 	ldrb.w	r1, [r5, r8]
    num_output_elements *= output_shape->data[stretch_dim];
   1dbbe:	bf18      	it	ne
   1dbc0:	4373      	mulne	r3, r6
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
   1dbc2:	4281      	cmp	r1, r0
   1dbc4:	d016      	beq.n	1dbf4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xfc>
   1dbc6:	6967      	ldr	r7, [r4, #20]
   1dbc8:	f7ef f87c 	bl	ccc4 <TfLiteTypeGetName>
   1dbcc:	4606      	mov	r6, r0
   1dbce:	f815 0008 	ldrb.w	r0, [r5, r8]
   1dbd2:	f7ef f877 	bl	ccc4 <TfLiteTypeGetName>
   1dbd6:	4b12      	ldr	r3, [pc, #72]	; (1dc20 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x128>)
   1dbd8:	e9cd 6002 	strd	r6, r0, [sp, #8]
   1dbdc:	9301      	str	r3, [sp, #4]
   1dbde:	4b11      	ldr	r3, [pc, #68]	; (1dc24 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x12c>)
   1dbe0:	4620      	mov	r0, r4
   1dbe2:	9300      	str	r3, [sp, #0]
   1dbe4:	4a0c      	ldr	r2, [pc, #48]	; (1dc18 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x120>)
   1dbe6:	2340      	movs	r3, #64	; 0x40
   1dbe8:	490f      	ldr	r1, [pc, #60]	; (1dc28 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x130>)
   1dbea:	47b8      	blx	r7
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
   1dbec:	2001      	movs	r0, #1
  return kTfLiteOk;
}
   1dbee:	b005      	add	sp, #20
   1dbf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
   1dbf4:	4293      	cmp	r3, r2
   1dbf6:	d008      	beq.n	1dc0a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x112>
   1dbf8:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1dbfc:	4b0b      	ldr	r3, [pc, #44]	; (1dc2c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x134>)
   1dbfe:	6965      	ldr	r5, [r4, #20]
   1dc00:	9301      	str	r3, [sp, #4]
   1dc02:	4b0b      	ldr	r3, [pc, #44]	; (1dc30 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x138>)
   1dc04:	9300      	str	r3, [sp, #0]
   1dc06:	2341      	movs	r3, #65	; 0x41
   1dc08:	e7c3      	b.n	1db92 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x9a>
  return kTfLiteOk;
   1dc0a:	2000      	movs	r0, #0
   1dc0c:	e7ef      	b.n	1dbee <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf6>
   1dc0e:	bf00      	nop
   1dc10:	00035af5 	.word	0x00035af5
   1dc14:	00035af8 	.word	0x00035af8
   1dc18:	00035acc 	.word	0x00035acc
   1dc1c:	00034a7c 	.word	0x00034a7c
   1dc20:	00035387 	.word	0x00035387
   1dc24:	0003539f 	.word	0x0003539f
   1dc28:	00034ab7 	.word	0x00034ab7
   1dc2c:	00035b04 	.word	0x00035b04
   1dc30:	00035b18 	.word	0x00035b18

0001dc34 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   1dc34:	680b      	ldr	r3, [r1, #0]

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1dc36:	b5f0      	push	{r4, r5, r6, r7, lr}
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
   1dc38:	681b      	ldr	r3, [r3, #0]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1dc3a:	4605      	mov	r5, r0
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
   1dc3c:	3b01      	subs	r3, #1
   1dc3e:	2b01      	cmp	r3, #1
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1dc40:	460c      	mov	r4, r1
   1dc42:	b085      	sub	sp, #20
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
   1dc44:	d909      	bls.n	1dc5a <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
   1dc46:	4b19      	ldr	r3, [pc, #100]	; (1dcac <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x78>)
   1dc48:	4a19      	ldr	r2, [pc, #100]	; (1dcb0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
   1dc4a:	9300      	str	r3, [sp, #0]
   1dc4c:	6944      	ldr	r4, [r0, #20]
   1dc4e:	2346      	movs	r3, #70	; 0x46
   1dc50:	4918      	ldr	r1, [pc, #96]	; (1dcb4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>)
   1dc52:	47a0      	blx	r4
   1dc54:	2001      	movs	r0, #1
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
  return kTfLiteOk;
}
   1dc56:	b005      	add	sp, #20
   1dc58:	bdf0      	pop	{r4, r5, r6, r7, pc}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   1dc5a:	684b      	ldr	r3, [r1, #4]
   1dc5c:	681e      	ldr	r6, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   1dc5e:	2e01      	cmp	r6, #1
   1dc60:	d00c      	beq.n	1dc7c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x48>
   1dc62:	2401      	movs	r4, #1
   1dc64:	4b14      	ldr	r3, [pc, #80]	; (1dcb8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x84>)
   1dc66:	e9cd 6402 	strd	r6, r4, [sp, #8]
   1dc6a:	9301      	str	r3, [sp, #4]
   1dc6c:	4b13      	ldr	r3, [pc, #76]	; (1dcbc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x88>)
   1dc6e:	4a10      	ldr	r2, [pc, #64]	; (1dcb0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
   1dc70:	9300      	str	r3, [sp, #0]
   1dc72:	6945      	ldr	r5, [r0, #20]
   1dc74:	2347      	movs	r3, #71	; 0x47
   1dc76:	4912      	ldr	r1, [pc, #72]	; (1dcc0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x8c>)
   1dc78:	47a8      	blx	r5
   1dc7a:	e7eb      	b.n	1dc54 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x20>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
   1dc7c:	f7ff ff3c 	bl	1daf8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
   1dc80:	2800      	cmp	r0, #0
   1dc82:	d0e8      	beq.n	1dc56 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
   1dc84:	4621      	mov	r1, r4
   1dc86:	4628      	mov	r0, r5
   1dc88:	696f      	ldr	r7, [r5, #20]
   1dc8a:	f7ff ff35 	bl	1daf8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
   1dc8e:	2300      	movs	r3, #0
   1dc90:	e9cd 0302 	strd	r0, r3, [sp, #8]
   1dc94:	4b0b      	ldr	r3, [pc, #44]	; (1dcc4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x90>)
   1dc96:	4628      	mov	r0, r5
   1dc98:	9301      	str	r3, [sp, #4]
   1dc9a:	4b0b      	ldr	r3, [pc, #44]	; (1dcc8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
   1dc9c:	4a04      	ldr	r2, [pc, #16]	; (1dcb0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
   1dc9e:	9300      	str	r3, [sp, #0]
   1dca0:	4907      	ldr	r1, [pc, #28]	; (1dcc0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x8c>)
   1dca2:	2348      	movs	r3, #72	; 0x48
   1dca4:	47b8      	blx	r7
   1dca6:	4630      	mov	r0, r6
   1dca8:	e7d5      	b.n	1dc56 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
   1dcaa:	bf00      	nop
   1dcac:	00035b2b 	.word	0x00035b2b
   1dcb0:	00035acc 	.word	0x00035acc
   1dcb4:	00034b9c 	.word	0x00034b9c
   1dcb8:	00035814 	.word	0x00035814
   1dcbc:	00034aa6 	.word	0x00034aa6
   1dcc0:	00034a7c 	.word	0x00034a7c
   1dcc4:	00035b58 	.word	0x00035b58
   1dcc8:	00035b62 	.word	0x00035b62

0001dccc <_ZN6tflite3ops5micro16Register_RESHAPEEv>:
  return kTfLiteOk;
}

}  // namespace reshape

TfLiteRegistration Register_RESHAPE() {
   1dccc:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/reshape::Prepare,
          /*invoke=*/reshape::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1dcce:	4604      	mov	r4, r0
TfLiteRegistration Register_RESHAPE() {
   1dcd0:	4606      	mov	r6, r0
          /*version=*/0};
   1dcd2:	4d04      	ldr	r5, [pc, #16]	; (1dce4 <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x18>)
   1dcd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1dcd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1dcd8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1dcdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1dce0:	4630      	mov	r0, r6
   1dce2:	bd70      	pop	{r4, r5, r6, pc}
   1dce4:	00031b18 	.word	0x00031b18

0001dce8 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb>:

inline int32 GetNearestNeighbor(const int input_value, const int32 input_size,
                                const int32 output_size,
                                const bool align_corners,
                                const bool half_pixel_centers) {
  const float scale =
   1dce8:	ee07 0a90 	vmov	s15, r0
                                const bool half_pixel_centers) {
   1dcec:	b538      	push	{r3, r4, r5, lr}
   1dcee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   1dcf2:	f89d 4010 	ldrb.w	r4, [sp, #16]
   1dcf6:	1e4d      	subs	r5, r1, #1
      (align_corners && output_size > 1)
          ? (input_size - 1) / static_cast<float>(output_size - 1)
   1dcf8:	b36b      	cbz	r3, 1dd56 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb+0x6e>
      (align_corners && output_size > 1)
   1dcfa:	2a01      	cmp	r2, #1
   1dcfc:	dd2b      	ble.n	1dd56 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb+0x6e>
          ? (input_size - 1) / static_cast<float>(output_size - 1)
   1dcfe:	3a01      	subs	r2, #1
   1dd00:	ee07 2a90 	vmov	s15, r2
   1dd04:	ee06 5a90 	vmov	s13, r5
   1dd08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1dd0c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
   1dd10:	ee86 6aa7 	vdiv.f32	s12, s13, s15
          : input_size / static_cast<float>(output_size);
  const float offset = half_pixel_centers ? 0.5f : 0.0f;
   1dd14:	bb8c      	cbnz	r4, 1dd7a <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb+0x92>
   1dd16:	eddf 6a1c 	vldr	s13, [pc, #112]	; 1dd88 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb+0xa0>
  int32 output_value = std::min(
   1dd1a:	ee77 7a26 	vadd.f32	s15, s14, s13
   1dd1e:	ee67 7a86 	vmul.f32	s15, s15, s12
      align_corners
          ? static_cast<int32>(TfLiteRound((input_value + offset) * scale))
   1dd22:	b36b      	cbz	r3, 1dd80 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb+0x98>
   1dd24:	ee37 7a26 	vadd.f32	s14, s14, s13
   1dd28:	ee67 7a06 	vmul.f32	s15, s14, s12
   1dd2c:	ee17 0a90 	vmov	r0, s15
   1dd30:	f7ee fbea 	bl	c508 <__aeabi_f2d>
   1dd34:	f004 feca 	bl	22acc <round>
   1dd38:	f7f2 fe7a 	bl	10a30 <__aeabi_d2f>
   1dd3c:	ee07 0a90 	vmov	s15, r0
   1dd40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   1dd44:	ee17 0a90 	vmov	r0, s15
   1dd48:	42a8      	cmp	r0, r5
   1dd4a:	bfa8      	it	ge
   1dd4c:	4628      	movge	r0, r5
          : static_cast<int32>(std::floor((input_value + offset) * scale)),
      input_size - 1);
  if (half_pixel_centers) {
   1dd4e:	b10c      	cbz	r4, 1dd54 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb+0x6c>
    output_value = std::max(static_cast<int32>(0), output_value);
   1dd50:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return output_value;
}
   1dd54:	bd38      	pop	{r3, r4, r5, pc}
          : input_size / static_cast<float>(output_size);
   1dd56:	ee07 1a90 	vmov	s15, r1
   1dd5a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   1dd5e:	ee07 2a90 	vmov	s15, r2
   1dd62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
          ? (input_size - 1) / static_cast<float>(output_size - 1)
   1dd66:	ee86 6aa7 	vdiv.f32	s12, s13, s15
  const float offset = half_pixel_centers ? 0.5f : 0.0f;
   1dd6a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   1dd6e:	eddf 7a06 	vldr	s15, [pc, #24]	; 1dd88 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb+0xa0>
   1dd72:	2c00      	cmp	r4, #0
   1dd74:	fe47 6aa6 	vseleq.f32	s13, s15, s13
   1dd78:	e7cf      	b.n	1dd1a <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb+0x32>
   1dd7a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   1dd7e:	e7d1      	b.n	1dd24 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb+0x3c>
  { return __builtin_floorf(__x); }
   1dd80:	fefb 7a67 	vrintm.f32	s15, s15
   1dd84:	e7dc      	b.n	1dd40 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb+0x58>
   1dd86:	bf00      	nop
   1dd88:	00000000 	.word	0x00000000

0001dd8c <_ZN6tflite3ops5micro32Register_RESIZE_NEAREST_NEIGHBOREv>:

  return kTfLiteOk;
}
}  // namespace resize_nearest_neighbor

TfLiteRegistration Register_RESIZE_NEAREST_NEIGHBOR() {
   1dd8c:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/resize_nearest_neighbor::Prepare,
          /*invoke=*/resize_nearest_neighbor::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1dd8e:	4604      	mov	r4, r0
TfLiteRegistration Register_RESIZE_NEAREST_NEIGHBOR() {
   1dd90:	4606      	mov	r6, r0
          /*version=*/0};
   1dd92:	4d04      	ldr	r5, [pc, #16]	; (1dda4 <_ZN6tflite3ops5micro32Register_RESIZE_NEAREST_NEIGHBOREv+0x18>)
   1dd94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1dd96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1dd98:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1dd9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1dda0:	4630      	mov	r0, r6
   1dda2:	bd70      	pop	{r4, r5, r6, pc}
   1dda4:	00031b38 	.word	0x00031b38

0001dda8 <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1dda8:	b5f0      	push	{r4, r5, r6, r7, lr}
  return &context->tensors[node->outputs->data[index]];
   1ddaa:	684a      	ldr	r2, [r1, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1ddac:	680d      	ldr	r5, [r1, #0]
  op_params.align_corners = params->align_corners;
   1ddae:	6949      	ldr	r1, [r1, #20]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1ddb0:	b099      	sub	sp, #100	; 0x64
  op_params.align_corners = params->align_corners;
   1ddb2:	7809      	ldrb	r1, [r1, #0]
   1ddb4:	6856      	ldr	r6, [r2, #4]
   1ddb6:	f88d 1014 	strb.w	r1, [sp, #20]
  op_params.half_pixel_centers = false;
   1ddba:	2100      	movs	r1, #0
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1ddbc:	6887      	ldr	r7, [r0, #8]
   1ddbe:	01b2      	lsls	r2, r6, #6
  if (output->type == kTfLiteFloat32) {
   1ddc0:	5cba      	ldrb	r2, [r7, r2]
  return &context->tensors[node->inputs->data[index]];
   1ddc2:	686c      	ldr	r4, [r5, #4]
   1ddc4:	68ad      	ldr	r5, [r5, #8]
   1ddc6:	2a01      	cmp	r2, #1
   1ddc8:	eb07 1484 	add.w	r4, r7, r4, lsl #6
   1ddcc:	eb07 1585 	add.w	r5, r7, r5, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1ddd0:	eb07 1686 	add.w	r6, r7, r6, lsl #6
  op_params.half_pixel_centers = false;
   1ddd4:	f88d 1015 	strb.w	r1, [sp, #21]
  if (output->type == kTfLiteFloat32) {
   1ddd8:	d126      	bne.n	1de28 <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0x80>
        op_params, GetTensorShape(input), GetTensorData<int32>(input),
   1ddda:	4621      	mov	r1, r4
   1dddc:	a806      	add	r0, sp, #24
   1ddde:	f009 fc2d 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1dde2:	b104      	cbz	r4, 1dde6 <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0x3e>
   1dde4:	6864      	ldr	r4, [r4, #4]
        GetTensorShape(size), GetTensorData<int32>(size),
   1dde6:	4629      	mov	r1, r5
   1dde8:	a80c      	add	r0, sp, #48	; 0x30
   1ddea:	f009 fc27 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1ddee:	b105      	cbz	r5, 1ddf2 <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0x4a>
   1ddf0:	686d      	ldr	r5, [r5, #4]
        GetTensorShape(output), GetTensorData<int32>(output));
   1ddf2:	af12      	add	r7, sp, #72	; 0x48
   1ddf4:	4631      	mov	r1, r6
   1ddf6:	4638      	mov	r0, r7
   1ddf8:	f009 fc20 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_ops::ResizeNearestNeighbor(
   1ddfc:	6873      	ldr	r3, [r6, #4]
   1ddfe:	4622      	mov	r2, r4
   1de00:	e9cd 7301 	strd	r7, r3, [sp, #4]
   1de04:	9500      	str	r5, [sp, #0]
   1de06:	ab0c      	add	r3, sp, #48	; 0x30
   1de08:	a906      	add	r1, sp, #24
   1de0a:	a805      	add	r0, sp, #20
   1de0c:	f010 fa47 	bl	2e29e <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_>
        GetTensorShape(output), GetTensorData<uint8_t>(output));
   1de10:	4638      	mov	r0, r7
   1de12:	f009 fbce 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
        GetTensorShape(size), GetTensorData<int32>(size),
   1de16:	a80c      	add	r0, sp, #48	; 0x30
   1de18:	f009 fbcb 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1de1c:	a806      	add	r0, sp, #24
   1de1e:	f009 fbc8 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   1de22:	2000      	movs	r0, #0
}
   1de24:	b019      	add	sp, #100	; 0x64
   1de26:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if (output->type == kTfLiteUInt8) {
   1de28:	2a03      	cmp	r2, #3
   1de2a:	d11b      	bne.n	1de64 <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0xbc>
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1de2c:	4621      	mov	r1, r4
   1de2e:	a806      	add	r0, sp, #24
   1de30:	f009 fc04 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1de34:	b104      	cbz	r4, 1de38 <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0x90>
   1de36:	6864      	ldr	r4, [r4, #4]
        GetTensorShape(size), GetTensorData<int32>(size),
   1de38:	4629      	mov	r1, r5
   1de3a:	a80c      	add	r0, sp, #48	; 0x30
   1de3c:	f009 fbfe 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1de40:	b105      	cbz	r5, 1de44 <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0x9c>
   1de42:	686d      	ldr	r5, [r5, #4]
        GetTensorShape(output), GetTensorData<uint8_t>(output));
   1de44:	af12      	add	r7, sp, #72	; 0x48
   1de46:	4631      	mov	r1, r6
   1de48:	4638      	mov	r0, r7
   1de4a:	f009 fbf7 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_ops::ResizeNearestNeighbor(
   1de4e:	6873      	ldr	r3, [r6, #4]
   1de50:	4622      	mov	r2, r4
   1de52:	e9cd 7301 	strd	r7, r3, [sp, #4]
   1de56:	9500      	str	r5, [sp, #0]
   1de58:	ab0c      	add	r3, sp, #48	; 0x30
   1de5a:	a906      	add	r1, sp, #24
   1de5c:	a805      	add	r0, sp, #20
   1de5e:	f010 fab1 	bl	2e3c4 <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_>
   1de62:	e7d5      	b.n	1de10 <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0x68>
  } else if (output->type == kTfLiteInt8) {
   1de64:	2a09      	cmp	r2, #9
   1de66:	d11b      	bne.n	1dea0 <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0xf8>
        op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
   1de68:	4621      	mov	r1, r4
   1de6a:	a806      	add	r0, sp, #24
   1de6c:	f009 fbe6 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1de70:	b104      	cbz	r4, 1de74 <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0xcc>
   1de72:	6864      	ldr	r4, [r4, #4]
        GetTensorShape(size), GetTensorData<int32>(size),
   1de74:	4629      	mov	r1, r5
   1de76:	a80c      	add	r0, sp, #48	; 0x30
   1de78:	f009 fbe0 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1de7c:	b105      	cbz	r5, 1de80 <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0xd8>
   1de7e:	686d      	ldr	r5, [r5, #4]
        GetTensorShape(output), GetTensorData<int8_t>(output));
   1de80:	af12      	add	r7, sp, #72	; 0x48
   1de82:	4631      	mov	r1, r6
   1de84:	4638      	mov	r0, r7
   1de86:	f009 fbd9 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_ops::ResizeNearestNeighbor(
   1de8a:	6873      	ldr	r3, [r6, #4]
   1de8c:	4622      	mov	r2, r4
   1de8e:	e9cd 7301 	strd	r7, r3, [sp, #4]
   1de92:	9500      	str	r5, [sp, #0]
   1de94:	ab0c      	add	r3, sp, #48	; 0x30
   1de96:	a906      	add	r1, sp, #24
   1de98:	a805      	add	r0, sp, #20
   1de9a:	f010 fb23 	bl	2e4e4 <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_>
   1de9e:	e7b7      	b.n	1de10 <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0x68>
    TF_LITE_KERNEL_LOG(context,
   1dea0:	6943      	ldr	r3, [r0, #20]
   1dea2:	4902      	ldr	r1, [pc, #8]	; (1deac <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0x104>)
   1dea4:	4798      	blx	r3
    return kTfLiteError;
   1dea6:	2001      	movs	r0, #1
   1dea8:	e7bc      	b.n	1de24 <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0x7c>
   1deaa:	bf00      	nop
   1deac:	00035b7f 	.word	0x00035b7f

0001deb0 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode>:
namespace round {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1deb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1deb4:	680b      	ldr	r3, [r1, #0]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1deb6:	4605      	mov	r5, r0
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   1deb8:	681e      	ldr	r6, [r3, #0]
   1deba:	b085      	sub	sp, #20
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   1debc:	2e01      	cmp	r6, #1
   1debe:	d00c      	beq.n	1deda <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x2a>
   1dec0:	2401      	movs	r4, #1
   1dec2:	4b4a      	ldr	r3, [pc, #296]	; (1dfec <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x13c>)
   1dec4:	e9cd 6402 	strd	r6, r4, [sp, #8]
   1dec8:	9301      	str	r3, [sp, #4]
   1deca:	4b49      	ldr	r3, [pc, #292]	; (1dff0 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x140>)
   1decc:	9300      	str	r3, [sp, #0]
   1dece:	2321      	movs	r3, #33	; 0x21
   1ded0:	6945      	ldr	r5, [r0, #20]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
  TF_LITE_ENSURE_TYPES_EQ(context, output->type, input->type);
  TF_LITE_ENSURE_EQ(context, output->bytes, input->bytes);
  TF_LITE_ENSURE_EQ(context, output->dims->size, input->dims->size);
   1ded2:	4a48      	ldr	r2, [pc, #288]	; (1dff4 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
   1ded4:	4948      	ldr	r1, [pc, #288]	; (1dff8 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
   1ded6:	47a8      	blx	r5
   1ded8:	e00f      	b.n	1defa <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
   1deda:	684a      	ldr	r2, [r1, #4]
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   1dedc:	6814      	ldr	r4, [r2, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   1dede:	2c01      	cmp	r4, #1
   1dee0:	d00f      	beq.n	1df02 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x52>
   1dee2:	4b42      	ldr	r3, [pc, #264]	; (1dfec <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x13c>)
   1dee4:	e9cd 4602 	strd	r4, r6, [sp, #8]
   1dee8:	9301      	str	r3, [sp, #4]
   1deea:	4b44      	ldr	r3, [pc, #272]	; (1dffc <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
   1deec:	4a41      	ldr	r2, [pc, #260]	; (1dff4 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
   1deee:	9300      	str	r3, [sp, #0]
   1def0:	6944      	ldr	r4, [r0, #20]
   1def2:	2322      	movs	r3, #34	; 0x22
   1def4:	4940      	ldr	r1, [pc, #256]	; (1dff8 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
   1def6:	47a0      	blx	r4
   1def8:	4634      	mov	r4, r6
  for (int i = 0; i < output->dims->size; ++i) {
    TF_LITE_ENSURE_EQ(context, output->dims->data[i], input->dims->data[i]);
  }
  return kTfLiteOk;
}
   1defa:	4620      	mov	r0, r4
   1defc:	b005      	add	sp, #20
   1defe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return &context->tensors[node->inputs->data[index]];
   1df02:	685b      	ldr	r3, [r3, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1df04:	6886      	ldr	r6, [r0, #8]
   1df06:	ea4f 1883 	mov.w	r8, r3, lsl #6
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
   1df0a:	f816 7008 	ldrb.w	r7, [r6, r8]
   1df0e:	eb06 1383 	add.w	r3, r6, r3, lsl #6
   1df12:	2f01      	cmp	r7, #1
   1df14:	d014      	beq.n	1df40 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x90>
   1df16:	f8d0 8014 	ldr.w	r8, [r0, #20]
   1df1a:	4638      	mov	r0, r7
   1df1c:	f7ee fed2 	bl	ccc4 <TfLiteTypeGetName>
   1df20:	4606      	mov	r6, r0
   1df22:	4620      	mov	r0, r4
   1df24:	f7ee fece 	bl	ccc4 <TfLiteTypeGetName>
   1df28:	4b35      	ldr	r3, [pc, #212]	; (1e000 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x150>)
   1df2a:	e9cd 6002 	strd	r6, r0, [sp, #8]
   1df2e:	9301      	str	r3, [sp, #4]
   1df30:	4b34      	ldr	r3, [pc, #208]	; (1e004 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
   1df32:	4628      	mov	r0, r5
   1df34:	9300      	str	r3, [sp, #0]
   1df36:	4a2f      	ldr	r2, [pc, #188]	; (1dff4 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
   1df38:	2323      	movs	r3, #35	; 0x23
   1df3a:	4933      	ldr	r1, [pc, #204]	; (1e008 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
   1df3c:	47c0      	blx	r8
   1df3e:	e7dc      	b.n	1defa <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
  return &context->tensors[node->outputs->data[index]];
   1df40:	6852      	ldr	r2, [r2, #4]
   1df42:	0191      	lsls	r1, r2, #6
  TF_LITE_ENSURE_TYPES_EQ(context, output->type, input->type);
   1df44:	5c74      	ldrb	r4, [r6, r1]
   1df46:	eb06 1282 	add.w	r2, r6, r2, lsl #6
   1df4a:	2c01      	cmp	r4, #1
   1df4c:	d016      	beq.n	1df7c <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0xcc>
   1df4e:	f8d0 9014 	ldr.w	r9, [r0, #20]
   1df52:	4620      	mov	r0, r4
   1df54:	f7ee feb6 	bl	ccc4 <TfLiteTypeGetName>
   1df58:	4604      	mov	r4, r0
   1df5a:	f816 0008 	ldrb.w	r0, [r6, r8]
   1df5e:	f7ee feb1 	bl	ccc4 <TfLiteTypeGetName>
   1df62:	4b28      	ldr	r3, [pc, #160]	; (1e004 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
   1df64:	e9cd 4002 	strd	r4, r0, [sp, #8]
   1df68:	9301      	str	r3, [sp, #4]
   1df6a:	4b28      	ldr	r3, [pc, #160]	; (1e00c <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x15c>)
   1df6c:	4628      	mov	r0, r5
   1df6e:	9300      	str	r3, [sp, #0]
   1df70:	4a20      	ldr	r2, [pc, #128]	; (1dff4 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
   1df72:	2324      	movs	r3, #36	; 0x24
   1df74:	4924      	ldr	r1, [pc, #144]	; (1e008 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
   1df76:	47c8      	blx	r9
   1df78:	463c      	mov	r4, r7
   1df7a:	e7be      	b.n	1defa <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
  TF_LITE_ENSURE_EQ(context, output->bytes, input->bytes);
   1df7c:	6991      	ldr	r1, [r2, #24]
   1df7e:	699e      	ldr	r6, [r3, #24]
   1df80:	42b1      	cmp	r1, r6
   1df82:	d008      	beq.n	1df96 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0xe6>
   1df84:	4b22      	ldr	r3, [pc, #136]	; (1e010 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x160>)
   1df86:	e9cd 1602 	strd	r1, r6, [sp, #8]
   1df8a:	9301      	str	r3, [sp, #4]
   1df8c:	4b21      	ldr	r3, [pc, #132]	; (1e014 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x164>)
   1df8e:	9300      	str	r3, [sp, #0]
   1df90:	6945      	ldr	r5, [r0, #20]
   1df92:	2325      	movs	r3, #37	; 0x25
   1df94:	e79d      	b.n	1ded2 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
  TF_LITE_ENSURE_EQ(context, output->dims->size, input->dims->size);
   1df96:	6897      	ldr	r7, [r2, #8]
   1df98:	689a      	ldr	r2, [r3, #8]
   1df9a:	6839      	ldr	r1, [r7, #0]
   1df9c:	6813      	ldr	r3, [r2, #0]
   1df9e:	4299      	cmp	r1, r3
   1dfa0:	d008      	beq.n	1dfb4 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x104>
   1dfa2:	e9cd 1302 	strd	r1, r3, [sp, #8]
   1dfa6:	4b1c      	ldr	r3, [pc, #112]	; (1e018 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x168>)
   1dfa8:	9301      	str	r3, [sp, #4]
   1dfaa:	4b1c      	ldr	r3, [pc, #112]	; (1e01c <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x16c>)
   1dfac:	9300      	str	r3, [sp, #0]
   1dfae:	6945      	ldr	r5, [r0, #20]
   1dfb0:	2326      	movs	r3, #38	; 0x26
   1dfb2:	e78e      	b.n	1ded2 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
   1dfb4:	4623      	mov	r3, r4
    TF_LITE_ENSURE_EQ(context, output->dims->data[i], input->dims->data[i]);
   1dfb6:	3a04      	subs	r2, #4
  for (int i = 0; i < output->dims->size; ++i) {
   1dfb8:	1e58      	subs	r0, r3, #1
   1dfba:	4281      	cmp	r1, r0
   1dfbc:	dd13      	ble.n	1dfe6 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x136>
    TF_LITE_ENSURE_EQ(context, output->dims->data[i], input->dims->data[i]);
   1dfbe:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
   1dfc2:	3301      	adds	r3, #1
   1dfc4:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
   1dfc8:	42b0      	cmp	r0, r6
   1dfca:	d0f5      	beq.n	1dfb8 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x108>
   1dfcc:	4b14      	ldr	r3, [pc, #80]	; (1e020 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x170>)
   1dfce:	e9cd 0602 	strd	r0, r6, [sp, #8]
   1dfd2:	9301      	str	r3, [sp, #4]
   1dfd4:	4b13      	ldr	r3, [pc, #76]	; (1e024 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x174>)
   1dfd6:	4628      	mov	r0, r5
   1dfd8:	9300      	str	r3, [sp, #0]
   1dfda:	696e      	ldr	r6, [r5, #20]
   1dfdc:	2328      	movs	r3, #40	; 0x28
   1dfde:	4a05      	ldr	r2, [pc, #20]	; (1dff4 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
   1dfe0:	4905      	ldr	r1, [pc, #20]	; (1dff8 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
   1dfe2:	47b0      	blx	r6
   1dfe4:	e789      	b.n	1defa <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
  return kTfLiteOk;
   1dfe6:	2400      	movs	r4, #0
   1dfe8:	e787      	b.n	1defa <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
   1dfea:	bf00      	nop
   1dfec:	00035814 	.word	0x00035814
   1dff0:	00034a96 	.word	0x00034a96
   1dff4:	00035bb1 	.word	0x00035bb1
   1dff8:	00034a7c 	.word	0x00034a7c
   1dffc:	00034aa6 	.word	0x00034aa6
   1e000:	00034ad1 	.word	0x00034ad1
   1e004:	0003539f 	.word	0x0003539f
   1e008:	00034ab7 	.word	0x00034ab7
   1e00c:	00035387 	.word	0x00035387
   1e010:	00034ae0 	.word	0x00034ae0
   1e014:	00034aed 	.word	0x00034aed
   1e018:	00034afb 	.word	0x00034afb
   1e01c:	00034b0d 	.word	0x00034b0d
   1e020:	00034b20 	.word	0x00034b20
   1e024:	00034b35 	.word	0x00034b35

0001e028 <_ZN6tflite3ops5micro14Register_ROUNDEv>:

  return kTfLiteOk;
}
}  // namespace round

TfLiteRegistration Register_ROUND() {
   1e028:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/round::Prepare,
          /*invoke=*/round::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1e02a:	4604      	mov	r4, r0
TfLiteRegistration Register_ROUND() {
   1e02c:	4606      	mov	r6, r0
          /*version=*/0};
   1e02e:	4d04      	ldr	r5, [pc, #16]	; (1e040 <_ZN6tflite3ops5micro14Register_ROUNDEv+0x18>)
   1e030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1e032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1e034:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1e038:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1e03c:	4630      	mov	r0, r6
   1e03e:	bd70      	pop	{r4, r5, r6, pc}
   1e040:	00031b58 	.word	0x00031b58

0001e044 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
  return kTfLiteOk;
}

}  // namespace

TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
   1e044:	b530      	push	{r4, r5, lr}
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   1e046:	680a      	ldr	r2, [r1, #0]
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
   1e048:	b085      	sub	sp, #20
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   1e04a:	6815      	ldr	r5, [r2, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   1e04c:	2d01      	cmp	r5, #1
   1e04e:	d00d      	beq.n	1e06c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x28>
   1e050:	2401      	movs	r4, #1
   1e052:	4a18      	ldr	r2, [pc, #96]	; (1e0b4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x70>)
   1e054:	e9cd 5402 	strd	r5, r4, [sp, #8]
   1e058:	9201      	str	r2, [sp, #4]
   1e05a:	4a17      	ldr	r2, [pc, #92]	; (1e0b8 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x74>)
   1e05c:	234c      	movs	r3, #76	; 0x4c
   1e05e:	9200      	str	r2, [sp, #0]
   1e060:	6945      	ldr	r5, [r0, #20]
   1e062:	4a16      	ldr	r2, [pc, #88]	; (1e0bc <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x78>)
   1e064:	4916      	ldr	r1, [pc, #88]	; (1e0c0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
   1e066:	47a8      	blx	r5
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  const TfLiteTensor* input = GetInput(context, node, 0);
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
   1e068:	4620      	mov	r0, r4
   1e06a:	e00f      	b.n	1e08c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   1e06c:	6849      	ldr	r1, [r1, #4]
   1e06e:	680c      	ldr	r4, [r1, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   1e070:	2c01      	cmp	r4, #1
   1e072:	d00d      	beq.n	1e090 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4c>
   1e074:	4a0f      	ldr	r2, [pc, #60]	; (1e0b4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x70>)
   1e076:	e9cd 4502 	strd	r4, r5, [sp, #8]
   1e07a:	9201      	str	r2, [sp, #4]
   1e07c:	4a11      	ldr	r2, [pc, #68]	; (1e0c4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x80>)
   1e07e:	234d      	movs	r3, #77	; 0x4d
   1e080:	9200      	str	r2, [sp, #0]
   1e082:	6944      	ldr	r4, [r0, #20]
   1e084:	4a0d      	ldr	r2, [pc, #52]	; (1e0bc <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x78>)
   1e086:	490e      	ldr	r1, [pc, #56]	; (1e0c0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
   1e088:	47a0      	blx	r4
   1e08a:	4628      	mov	r0, r5

  return kTfLiteOk;
}
   1e08c:	b005      	add	sp, #20
   1e08e:	bd30      	pop	{r4, r5, pc}
  return &context->tensors[node->inputs->data[index]];
   1e090:	6851      	ldr	r1, [r2, #4]
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
   1e092:	6882      	ldr	r2, [r0, #8]
   1e094:	eb02 1281 	add.w	r2, r2, r1, lsl #6
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   1e098:	6892      	ldr	r2, [r2, #8]
   1e09a:	6812      	ldr	r2, [r2, #0]
   1e09c:	2a00      	cmp	r2, #0
   1e09e:	dc07      	bgt.n	1e0b0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6c>
   1e0a0:	4a09      	ldr	r2, [pc, #36]	; (1e0c8 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x84>)
   1e0a2:	234f      	movs	r3, #79	; 0x4f
   1e0a4:	9200      	str	r2, [sp, #0]
   1e0a6:	6945      	ldr	r5, [r0, #20]
   1e0a8:	4a04      	ldr	r2, [pc, #16]	; (1e0bc <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x78>)
   1e0aa:	4908      	ldr	r1, [pc, #32]	; (1e0cc <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x88>)
   1e0ac:	47a8      	blx	r5
   1e0ae:	e7db      	b.n	1e068 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24>
  return kTfLiteOk;
   1e0b0:	2000      	movs	r0, #0
   1e0b2:	e7eb      	b.n	1e08c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
   1e0b4:	00035814 	.word	0x00035814
   1e0b8:	00034a96 	.word	0x00034a96
   1e0bc:	00035bd8 	.word	0x00035bd8
   1e0c0:	00034a7c 	.word	0x00034a7c
   1e0c4:	00034aa6 	.word	0x00034aa6
   1e0c8:	00035c01 	.word	0x00035c01
   1e0cc:	00034b9c 	.word	0x00034b9c

0001e0d0 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
   1e0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e0d4:	ed2d 8b04 	vpush	{d8-d9}
   1e0d8:	460c      	mov	r4, r1
   1e0da:	b087      	sub	sp, #28
   1e0dc:	9200      	str	r2, [sp, #0]
   1e0de:	461a      	mov	r2, r3
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   1e0e0:	680b      	ldr	r3, [r1, #0]
                    const RuntimeShape& output_shape, float* output_data) {
   1e0e2:	4606      	mov	r6, r0
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   1e0e4:	3b01      	subs	r3, #1
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1e0e6:	4619      	mov	r1, r3
   1e0e8:	4620      	mov	r0, r4
   1e0ea:	9202      	str	r2, [sp, #8]
   1e0ec:	9301      	str	r3, [sp, #4]
   1e0ee:	f00d fde2 	bl	2bcb6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   1e0f2:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1e0f6:	4607      	mov	r7, r0
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   1e0f8:	4619      	mov	r1, r3
   1e0fa:	4620      	mov	r0, r4
   1e0fc:	f00c f90e 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
   1e100:	2500      	movs	r5, #0
   1e102:	4604      	mov	r4, r0

  for (int i = 0; i < outer_size; ++i) {
   1e104:	46aa      	mov	sl, r5
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
   1e106:	ed9f 9a37 	vldr	s18, [pc, #220]	; 1e1e4 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x114>
      return __a;
   1e10a:	f10d 0b14 	add.w	fp, sp, #20
  for (int i = 0; i < outer_size; ++i) {
   1e10e:	45ba      	cmp	sl, r7
   1e110:	da62      	bge.n	1e1d8 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x108>
    float max = std::numeric_limits<float>::lowest();
   1e112:	9b00      	ldr	r3, [sp, #0]
   1e114:	ed8d 9a05 	vstr	s18, [sp, #20]
    for (int c = 0; c < depth; ++c) {
   1e118:	eb03 0985 	add.w	r9, r3, r5, lsl #2
    float max = std::numeric_limits<float>::lowest();
   1e11c:	4649      	mov	r1, r9
    for (int c = 0; c < depth; ++c) {
   1e11e:	2200      	movs	r2, #0
   1e120:	ea4f 0885 	mov.w	r8, r5, lsl #2
   1e124:	42a2      	cmp	r2, r4
   1e126:	da0f      	bge.n	1e148 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x78>
      max = std::max(max, input_data[i * depth + c]);
   1e128:	460b      	mov	r3, r1
      if (__a < __b)
   1e12a:	eddd 7a05 	vldr	s15, [sp, #20]
   1e12e:	ed93 7a00 	vldr	s14, [r3]
   1e132:	eeb4 7ae7 	vcmpe.f32	s14, s15
   1e136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      return __a;
   1e13a:	bfd8      	it	le
   1e13c:	465b      	movle	r3, fp
   1e13e:	681b      	ldr	r3, [r3, #0]
   1e140:	3104      	adds	r1, #4
   1e142:	9305      	str	r3, [sp, #20]
    for (int c = 0; c < depth; ++c) {
   1e144:	3201      	adds	r2, #1
   1e146:	e7ed      	b.n	1e124 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x54>
   1e148:	464a      	mov	r2, r9
    }

    // Compute sum.
    float sum = 0.f;
    for (int c = 0; c < depth; ++c) {
   1e14a:	2300      	movs	r3, #0
    float sum = 0.f;
   1e14c:	ed9f 8a26 	vldr	s16, [pc, #152]	; 1e1e8 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x118>
    for (int c = 0; c < depth; ++c) {
   1e150:	42a3      	cmp	r3, r4
   1e152:	db20      	blt.n	1e196 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xc6>
   1e154:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1e156:	4498      	add	r8, r3
      sum += std::exp((input_data[i * depth + c] - max) *
                      static_cast<float>(params.beta));
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
   1e158:	2300      	movs	r3, #0
   1e15a:	42a3      	cmp	r3, r4
   1e15c:	9301      	str	r3, [sp, #4]
   1e15e:	da37      	bge.n	1e1d0 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x100>
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
                                            static_cast<float>(params.beta)) /
   1e160:	e9d6 0100 	ldrd	r0, r1, [r6]
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
   1e164:	eddd 7a05 	vldr	s15, [sp, #20]
   1e168:	ecf9 8a01 	vldmia	r9!, {s17}
   1e16c:	ee78 8ae7 	vsub.f32	s17, s17, s15
                                            static_cast<float>(params.beta)) /
   1e170:	f7f2 fc5e 	bl	10a30 <__aeabi_d2f>
  { return __builtin_expf(__x); }
   1e174:	ee07 0a90 	vmov	s15, r0
   1e178:	ee68 7aa7 	vmul.f32	s15, s17, s15
   1e17c:	ee17 0a90 	vmov	r0, s15
   1e180:	f004 fe9a 	bl	22eb8 <expf>
   1e184:	ee07 0a90 	vmov	s15, r0
   1e188:	eec7 7a88 	vdiv.f32	s15, s15, s16
    for (int c = 0; c < depth; ++c) {
   1e18c:	9b01      	ldr	r3, [sp, #4]
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
   1e18e:	ece8 7a01 	vstmia	r8!, {s15}
    for (int c = 0; c < depth; ++c) {
   1e192:	3301      	adds	r3, #1
   1e194:	e7e1      	b.n	1e15a <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8a>
      sum += std::exp((input_data[i * depth + c] - max) *
   1e196:	ecf2 8a01 	vldmia	r2!, {s17}
                      static_cast<float>(params.beta));
   1e19a:	e9d6 0100 	ldrd	r0, r1, [r6]
      sum += std::exp((input_data[i * depth + c] - max) *
   1e19e:	eddd 7a05 	vldr	s15, [sp, #20]
   1e1a2:	9302      	str	r3, [sp, #8]
   1e1a4:	ee78 8ae7 	vsub.f32	s17, s17, s15
   1e1a8:	9201      	str	r2, [sp, #4]
   1e1aa:	9203      	str	r2, [sp, #12]
                      static_cast<float>(params.beta));
   1e1ac:	f7f2 fc40 	bl	10a30 <__aeabi_d2f>
   1e1b0:	ee07 0a90 	vmov	s15, r0
   1e1b4:	ee68 7aa7 	vmul.f32	s15, s17, s15
   1e1b8:	ee17 0a90 	vmov	r0, s15
   1e1bc:	f004 fe7c 	bl	22eb8 <expf>
      sum += std::exp((input_data[i * depth + c] - max) *
   1e1c0:	ee07 0a90 	vmov	s15, r0
    for (int c = 0; c < depth; ++c) {
   1e1c4:	9b02      	ldr	r3, [sp, #8]
      sum += std::exp((input_data[i * depth + c] - max) *
   1e1c6:	ee38 8a27 	vadd.f32	s16, s16, s15
    for (int c = 0; c < depth; ++c) {
   1e1ca:	9a01      	ldr	r2, [sp, #4]
   1e1cc:	3301      	adds	r3, #1
   1e1ce:	e7bf      	b.n	1e150 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x80>
  for (int i = 0; i < outer_size; ++i) {
   1e1d0:	f10a 0a01 	add.w	sl, sl, #1
   1e1d4:	4425      	add	r5, r4
   1e1d6:	e79a      	b.n	1e10e <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3e>
                                   sum;
    }
  }
}
   1e1d8:	b007      	add	sp, #28
   1e1da:	ecbd 8b04 	vpop	{d8-d9}
   1e1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e1e2:	bf00      	nop
   1e1e4:	ff7fffff 	.word	0xff7fffff
   1e1e8:	00000000 	.word	0x00000000

0001e1ec <_ZN6tflite3ops5micro16Register_SOFTMAXEv>:
      return kTfLiteError;
  }
}
}  // namespace activations

TfLiteRegistration Register_SOFTMAX() {
   1e1ec:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/activations::SoftmaxPrepare,
          /*invoke=*/activations::SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1e1ee:	4604      	mov	r4, r0
TfLiteRegistration Register_SOFTMAX() {
   1e1f0:	4606      	mov	r6, r0
          /*version=*/0};
   1e1f2:	4d04      	ldr	r5, [pc, #16]	; (1e204 <_ZN6tflite3ops5micro16Register_SOFTMAXEv+0x18>)
   1e1f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1e1f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1e1f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1e1fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1e200:	4630      	mov	r0, r6
   1e202:	bd70      	pop	{r4, r5, r6, pc}
   1e204:	00031b78 	.word	0x00031b78

0001e208 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
   1e208:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return a - b;
   1e20c:	f040 447f 	orr.w	r4, r0, #4278190080	; 0xff000000
FixedPoint<tRawType, 0> exp_on_negative_values(
   1e210:	4605      	mov	r5, r0
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
   1e212:	0160      	lsls	r0, r4, #5
   1e214:	f7fd fae4 	bl	1b7e0 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_>
   1e218:	4606      	mov	r6, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
   1e21a:	4842      	ldr	r0, [pc, #264]	; (1e324 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x11c>)
   1e21c:	f00d ffa9 	bl	2c172 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   1e220:	4601      	mov	r1, r0
   1e222:	4630      	mov	r0, r6
   1e224:	f00d ffaa 	bl	2c17c <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a - b;
   1e228:	1b64      	subs	r4, r4, r5
  return a ? BitNot(zero) : zero;
   1e22a:	f3c4 6b00 	ubfx	fp, r4, #24, #1
   1e22e:	f1cb 0900 	rsb	r9, fp, #0
  return a & b;
   1e232:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   1e236:	ea00 0909 	and.w	r9, r0, r9
   1e23a:	ea0b 0006 	and.w	r0, fp, r6
  return a ^ b;
   1e23e:	ea89 0a00 	eor.w	sl, r9, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
   1e242:	4839      	ldr	r0, [pc, #228]	; (1e328 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x120>)
   1e244:	f00d ff95 	bl	2c172 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   1e248:	4601      	mov	r1, r0
   1e24a:	4650      	mov	r0, sl
   1e24c:	f00d ff96 	bl	2c17c <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   1e250:	f3c4 6940 	ubfx	r9, r4, #25, #1
   1e254:	f1c9 0800 	rsb	r8, r9, #0
  return a & b;
   1e258:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   1e25c:	ea00 0008 	and.w	r0, r0, r8
   1e260:	ea09 090a 	and.w	r9, r9, sl
  return a ^ b;
   1e264:	ea80 0909 	eor.w	r9, r0, r9
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
   1e268:	4830      	ldr	r0, [pc, #192]	; (1e32c <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x124>)
   1e26a:	f00d ff82 	bl	2c172 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   1e26e:	4601      	mov	r1, r0
   1e270:	4648      	mov	r0, r9
   1e272:	f00d ff83 	bl	2c17c <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   1e276:	f3c4 6780 	ubfx	r7, r4, #26, #1
   1e27a:	427e      	negs	r6, r7
  return a & b;
   1e27c:	3f01      	subs	r7, #1
   1e27e:	4030      	ands	r0, r6
   1e280:	ea07 0709 	and.w	r7, r7, r9
  return a ^ b;
   1e284:	4047      	eors	r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
   1e286:	482a      	ldr	r0, [pc, #168]	; (1e330 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x128>)
   1e288:	f00d ff73 	bl	2c172 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   1e28c:	4601      	mov	r1, r0
   1e28e:	4638      	mov	r0, r7
   1e290:	f00d ff74 	bl	2c17c <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   1e294:	f3c4 6bc0 	ubfx	fp, r4, #27, #1
   1e298:	f1cb 0a00 	rsb	sl, fp, #0
  return a & b;
   1e29c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   1e2a0:	ea00 000a 	and.w	r0, r0, sl
   1e2a4:	ea0b 0b07 	and.w	fp, fp, r7
  return a ^ b;
   1e2a8:	ea80 0b0b 	eor.w	fp, r0, fp
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
   1e2ac:	4821      	ldr	r0, [pc, #132]	; (1e334 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x12c>)
   1e2ae:	f00d ff60 	bl	2c172 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   1e2b2:	4601      	mov	r1, r0
   1e2b4:	4658      	mov	r0, fp
   1e2b6:	f00d ff61 	bl	2c17c <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   1e2ba:	f3c4 7900 	ubfx	r9, r4, #28, #1
   1e2be:	f1c9 0800 	rsb	r8, r9, #0
  return a & b;
   1e2c2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   1e2c6:	ea00 0008 	and.w	r0, r0, r8
   1e2ca:	ea09 090b 	and.w	r9, r9, fp
  return a ^ b;
   1e2ce:	ea80 0909 	eor.w	r9, r0, r9
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
   1e2d2:	4819      	ldr	r0, [pc, #100]	; (1e338 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x130>)
   1e2d4:	f00d ff4d 	bl	2c172 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   1e2d8:	4601      	mov	r1, r0
   1e2da:	4648      	mov	r0, r9
   1e2dc:	f00d ff4e 	bl	2c17c <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   1e2e0:	f3c4 7740 	ubfx	r7, r4, #29, #1
   1e2e4:	427e      	negs	r6, r7
  return a & b;
   1e2e6:	3f01      	subs	r7, #1
   1e2e8:	4030      	ands	r0, r6
   1e2ea:	ea07 0709 	and.w	r7, r7, r9
  return a ^ b;
   1e2ee:	4047      	eors	r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
   1e2f0:	20f2      	movs	r0, #242	; 0xf2
   1e2f2:	f00d ff3e 	bl	2c172 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   1e2f6:	4601      	mov	r1, r0
   1e2f8:	4638      	mov	r0, r7
   1e2fa:	f00d ff3f 	bl	2c17c <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   1e2fe:	f3c4 7480 	ubfx	r4, r4, #30, #1
   1e302:	4263      	negs	r3, r4
  return a & b;
   1e304:	4018      	ands	r0, r3
  return a ? BitNot(zero) : zero;
   1e306:	fab5 f385 	clz	r3, r5
  return a & b;
   1e30a:	3c01      	subs	r4, #1
   1e30c:	403c      	ands	r4, r7
  return a ? BitNot(zero) : zero;
   1e30e:	095b      	lsrs	r3, r3, #5
  return a ^ b;
   1e310:	4044      	eors	r4, r0
  return a & b;
   1e312:	1e58      	subs	r0, r3, #1
  return a ? BitNot(zero) : zero;
   1e314:	425b      	negs	r3, r3
  return a & b;
   1e316:	4020      	ands	r0, r4
   1e318:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
}
   1e31c:	4058      	eors	r0, r3
   1e31e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e322:	bf00      	nop
   1e324:	63afbe7b 	.word	0x63afbe7b
   1e328:	4da2cbf2 	.word	0x4da2cbf2
   1e32c:	2f16ac6c 	.word	0x2f16ac6c
   1e330:	1152aaa4 	.word	0x1152aaa4
   1e334:	02582ab7 	.word	0x02582ab7
   1e338:	000afe11 	.word	0x000afe11

0001e33c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:

// Quantized softmax with int8/uint8 input and int8/uint8/int16 output.
template <typename InputT, typename OutputT>
inline void Softmax(const SoftmaxParams& params,
   1e33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    const RuntimeShape& input_shape, const InputT* input_data,
                    const RuntimeShape& output_shape, OutputT* output_data) {
  const int32 input_beta_multiplier = params.input_multiplier;
  const int32 input_beta_left_shift = params.input_left_shift;
   1e340:	e9d0 9a02 	ldrd	r9, sl, [r0, #8]
inline void Softmax(const SoftmaxParams& params,
   1e344:	460d      	mov	r5, r1
   1e346:	4614      	mov	r4, r2
   1e348:	461a      	mov	r2, r3
  using FixedPointScaledDiff =
      gemmlowp::FixedPoint<int32, kScaledDiffIntegerBits>;
  using FixedPointAccum = gemmlowp::FixedPoint<int32, kAccumulationIntegerBits>;
  using FixedPoint0 = gemmlowp::FixedPoint<int32, 0>;

  const int trailing_dim = input_shape.DimensionsCount() - 1;
   1e34a:	680b      	ldr	r3, [r1, #0]
inline void Softmax(const SoftmaxParams& params,
   1e34c:	b08b      	sub	sp, #44	; 0x2c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   1e34e:	3b01      	subs	r3, #1
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1e350:	4619      	mov	r1, r3
  const int diff_min = params.diff_min;
   1e352:	f8d0 b018 	ldr.w	fp, [r0, #24]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1e356:	4628      	mov	r0, r5
   1e358:	9202      	str	r2, [sp, #8]
   1e35a:	9301      	str	r3, [sp, #4]
   1e35c:	f00d fcab 	bl	2bcb6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   1e360:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1e364:	9000      	str	r0, [sp, #0]
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   1e366:	4619      	mov	r1, r3
   1e368:	4628      	mov	r0, r5
   1e36a:	f00b ffd7 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>

  for (int i = 0; i < outer_size; ++i) {
   1e36e:	2700      	movs	r7, #0
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   1e370:	4605      	mov	r5, r0
   1e372:	0043      	lsls	r3, r0, #1
   1e374:	9e14      	ldr	r6, [sp, #80]	; 0x50
   1e376:	9301      	str	r3, [sp, #4]
  for (int i = 0; i < outer_size; ++i) {
   1e378:	9b00      	ldr	r3, [sp, #0]
   1e37a:	429f      	cmp	r7, r3
   1e37c:	da7a      	bge.n	1e474 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x138>
    InputT max_in_row = std::numeric_limits<InputT>::min();
   1e37e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1e382:	4621      	mov	r1, r4
    for (int c = 0; c < depth; ++c) {
   1e384:	2200      	movs	r2, #0
    InputT max_in_row = std::numeric_limits<InputT>::min();
   1e386:	f88d 3017 	strb.w	r3, [sp, #23]
   1e38a:	f10d 0e17 	add.w	lr, sp, #23
    for (int c = 0; c < depth; ++c) {
   1e38e:	42aa      	cmp	r2, r5
   1e390:	da0e      	bge.n	1e3b0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x74>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
   1e392:	460b      	mov	r3, r1
      if (__a < __b)
   1e394:	f99d 0017 	ldrsb.w	r0, [sp, #23]
   1e398:	f993 c000 	ldrsb.w	ip, [r3]
   1e39c:	3101      	adds	r1, #1
   1e39e:	4584      	cmp	ip, r0
      return __a;
   1e3a0:	bfd8      	it	le
   1e3a2:	4673      	movle	r3, lr
   1e3a4:	f993 3000 	ldrsb.w	r3, [r3]
    for (int c = 0; c < depth; ++c) {
   1e3a8:	3201      	adds	r2, #1
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
   1e3aa:	f88d 3017 	strb.w	r3, [sp, #23]
    for (int c = 0; c < depth; ++c) {
   1e3ae:	e7ee      	b.n	1e38e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x52>
    }

    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
   1e3b0:	f04f 0800 	mov.w	r8, #0
   1e3b4:	4622      	mov	r2, r4
    for (int c = 0; c < depth; ++c) {
   1e3b6:	4643      	mov	r3, r8
   1e3b8:	42ab      	cmp	r3, r5
   1e3ba:	da17      	bge.n	1e3ec <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xb0>
      int32 input_diff =
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
   1e3bc:	f912 0b01 	ldrsb.w	r0, [r2], #1
   1e3c0:	f99d 1017 	ldrsb.w	r1, [sp, #23]
      int32 input_diff =
   1e3c4:	1a40      	subs	r0, r0, r1
      if (input_diff >= diff_min) {
   1e3c6:	4583      	cmp	fp, r0
   1e3c8:	dc0e      	bgt.n	1e3e8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xac>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
   1e3ca:	4649      	mov	r1, r9
   1e3cc:	fa00 f00a 	lsl.w	r0, r0, sl
   1e3d0:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1e3d4:	f7fc fefe 	bl	1b1d4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        const int32 input_diff_rescaled =
            MultiplyByQuantizedMultiplierGreaterThanOne(
                input_diff, input_beta_multiplier, input_beta_left_shift);
        const FixedPointScaledDiff scaled_diff_f8 =
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
   1e3d8:	f7ff ff16 	bl	1e208 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
   1e3dc:	210c      	movs	r1, #12
   1e3de:	f7fc ff31 	bl	1b244 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return a + b;
   1e3e2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   1e3e6:	4480      	add	r8, r0
    for (int c = 0; c < depth; ++c) {
   1e3e8:	3301      	adds	r3, #1
   1e3ea:	e7e5      	b.n	1e3b8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x7c>
                                        exp_on_negative_values(scaled_diff_f8));
      }
    }

    int num_bits_over_unit;
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
   1e3ec:	4640      	mov	r0, r8
   1e3ee:	aa06      	add	r2, sp, #24
   1e3f0:	210c      	movs	r1, #12
   1e3f2:	f010 f9ab 	bl	2e74c <_ZN6tflite13GetReciprocalEiiPi>
   1e3f6:	4622      	mov	r2, r4
   1e3f8:	4680      	mov	r8, r0
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));

    for (int c = 0; c < depth; ++c) {
   1e3fa:	2300      	movs	r3, #0
   1e3fc:	42ab      	cmp	r3, r5
   1e3fe:	da34      	bge.n	1e46a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x12e>
      int32 input_diff =
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
   1e400:	f912 0b01 	ldrsb.w	r0, [r2], #1
   1e404:	f99d 1017 	ldrsb.w	r1, [sp, #23]
      int32 input_diff =
   1e408:	1a40      	subs	r0, r0, r1
      if (input_diff >= diff_min) {
   1e40a:	4583      	cmp	fp, r0
   1e40c:	dc2a      	bgt.n	1e464 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x128>
   1e40e:	4649      	mov	r1, r9
   1e410:	fa00 f00a 	lsl.w	r0, r0, sl
   1e414:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1e418:	f7fc fedc 	bl	1b1d4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
            MultiplyByQuantizedMultiplierGreaterThanOne(
                input_diff, input_beta_multiplier, input_beta_left_shift);
        const FixedPointScaledDiff scaled_diff_f8 =
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);

        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
   1e41c:	f7ff fef4 	bl	1e208 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
   1e420:	4601      	mov	r1, r0
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
            (shifted_scale * exp_in_0).raw(),
   1e422:	4640      	mov	r0, r8
   1e424:	f00d feaa 	bl	2c17c <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
   1e428:	9906      	ldr	r1, [sp, #24]
   1e42a:	310f      	adds	r1, #15
   1e42c:	f7fc ff0a 	bl	1b244 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
            unsat_output +
            static_cast<int32>(std::numeric_limits<OutputT>::min());

        output_data[i * depth + c] = static_cast<OutputT>(std::max(
            std::min(shifted_output,
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
   1e430:	f647 73ff 	movw	r3, #32767	; 0x7fff
            unsat_output +
   1e434:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
      if (__b < __a)
   1e438:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        const int32 shifted_output =
   1e43c:	9007      	str	r0, [sp, #28]
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
   1e43e:	480f      	ldr	r0, [pc, #60]	; (1e47c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x140>)
      return __a;
   1e440:	bfb8      	it	lt
   1e442:	a907      	addlt	r1, sp, #28
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
   1e444:	9308      	str	r3, [sp, #32]
	return __b;
   1e446:	bfa8      	it	ge
   1e448:	a908      	addge	r1, sp, #32
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
   1e44a:	9009      	str	r0, [sp, #36]	; 0x24
      if (__a < __b)
   1e44c:	6808      	ldr	r0, [r1, #0]
      if (__b < __a)
   1e44e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
      if (__a < __b)
   1e452:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
	return __b;
   1e456:	bfb8      	it	lt
   1e458:	a909      	addlt	r1, sp, #36	; 0x24
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
   1e45a:	6809      	ldr	r1, [r1, #0]
      } else {
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
   1e45c:	f826 1013 	strh.w	r1, [r6, r3, lsl #1]
    for (int c = 0; c < depth; ++c) {
   1e460:	3301      	adds	r3, #1
   1e462:	e7cb      	b.n	1e3fc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xc0>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
   1e464:	f248 0100 	movw	r1, #32768	; 0x8000
   1e468:	e7f8      	b.n	1e45c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x120>
  for (int i = 0; i < outer_size; ++i) {
   1e46a:	9b01      	ldr	r3, [sp, #4]
   1e46c:	3701      	adds	r7, #1
   1e46e:	442c      	add	r4, r5
   1e470:	441e      	add	r6, r3
   1e472:	e781      	b.n	1e378 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3c>
      }
    }
  }
}
   1e474:	b00b      	add	sp, #44	; 0x2c
   1e476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e47a:	bf00      	nop
   1e47c:	ffff8000 	.word	0xffff8000

0001e480 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->inputs->data[index]];
   1e480:	680b      	ldr	r3, [r1, #0]
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
   1e482:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e486:	685b      	ldr	r3, [r3, #4]
  const TfLiteTensor* input = GetInput(context, node, 0);
   1e488:	6887      	ldr	r7, [r0, #8]
   1e48a:	ea4f 1983 	mov.w	r9, r3, lsl #6
   1e48e:	eb07 1883 	add.w	r8, r7, r3, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1e492:	684b      	ldr	r3, [r1, #4]
  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8) {
   1e494:	f817 5009 	ldrb.w	r5, [r7, r9]
   1e498:	685e      	ldr	r6, [r3, #4]
   1e49a:	2d03      	cmp	r5, #3
   1e49c:	ea4f 1386 	mov.w	r3, r6, lsl #6
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
   1e4a0:	4604      	mov	r4, r0
  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
   1e4a2:	f8d1 a014 	ldr.w	sl, [r1, #20]
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
   1e4a6:	b096      	sub	sp, #88	; 0x58
   1e4a8:	eb07 1686 	add.w	r6, r7, r6, lsl #6
  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8) {
   1e4ac:	d013      	beq.n	1e4d6 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x56>
   1e4ae:	2d09      	cmp	r5, #9
   1e4b0:	f040 809e 	bne.w	1e5f0 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x170>
      if (output->type == kTfLiteInt16) {
   1e4b4:	5cfb      	ldrb	r3, [r7, r3]
   1e4b6:	2b07      	cmp	r3, #7
   1e4b8:	d135      	bne.n	1e526 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa6>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
   1e4ba:	6933      	ldr	r3, [r6, #16]
   1e4bc:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
   1e4c0:	d063      	beq.n	1e58a <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x10a>
   1e4c2:	4a6e      	ldr	r2, [pc, #440]	; (1e67c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1fc>)
   1e4c4:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1e4c8:	4b6d      	ldr	r3, [pc, #436]	; (1e680 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x200>)
   1e4ca:	9301      	str	r3, [sp, #4]
   1e4cc:	4b6d      	ldr	r3, [pc, #436]	; (1e684 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x204>)
   1e4ce:	9300      	str	r3, [sp, #0]
   1e4d0:	6944      	ldr	r4, [r0, #20]
   1e4d2:	232c      	movs	r3, #44	; 0x2c
   1e4d4:	e023      	b.n	1e51e <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x9e>
      TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteUInt8);
   1e4d6:	5cfb      	ldrb	r3, [r7, r3]
   1e4d8:	2b03      	cmp	r3, #3
   1e4da:	d014      	beq.n	1e506 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x86>
   1e4dc:	6947      	ldr	r7, [r0, #20]
   1e4de:	4618      	mov	r0, r3
   1e4e0:	f7ee fbf0 	bl	ccc4 <TfLiteTypeGetName>
   1e4e4:	4606      	mov	r6, r0
   1e4e6:	4628      	mov	r0, r5
   1e4e8:	f7ee fbec 	bl	ccc4 <TfLiteTypeGetName>
   1e4ec:	4b66      	ldr	r3, [pc, #408]	; (1e688 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x208>)
   1e4ee:	e9cd 6002 	strd	r6, r0, [sp, #8]
   1e4f2:	9301      	str	r3, [sp, #4]
   1e4f4:	4b65      	ldr	r3, [pc, #404]	; (1e68c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x20c>)
   1e4f6:	9300      	str	r3, [sp, #0]
   1e4f8:	2327      	movs	r3, #39	; 0x27
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
   1e4fa:	4620      	mov	r0, r4
   1e4fc:	4a64      	ldr	r2, [pc, #400]	; (1e690 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x210>)
   1e4fe:	4965      	ldr	r1, [pc, #404]	; (1e694 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x214>)
   1e500:	47b8      	blx	r7
      return kTfLiteError;
   1e502:	2501      	movs	r5, #1
   1e504:	e09f      	b.n	1e646 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1c6>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
   1e506:	6933      	ldr	r3, [r6, #16]
   1e508:	2b00      	cmp	r3, #0
   1e50a:	d03e      	beq.n	1e58a <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x10a>
   1e50c:	2200      	movs	r2, #0
   1e50e:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1e512:	4b61      	ldr	r3, [pc, #388]	; (1e698 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x218>)
   1e514:	9301      	str	r3, [sp, #4]
   1e516:	4b5b      	ldr	r3, [pc, #364]	; (1e684 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x204>)
   1e518:	9300      	str	r3, [sp, #0]
   1e51a:	2328      	movs	r3, #40	; 0x28
   1e51c:	6944      	ldr	r4, [r0, #20]
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
   1e51e:	4a5c      	ldr	r2, [pc, #368]	; (1e690 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x210>)
   1e520:	495e      	ldr	r1, [pc, #376]	; (1e69c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x21c>)
   1e522:	47a0      	blx	r4
   1e524:	e7ed      	b.n	1e502 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x82>
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
   1e526:	2b09      	cmp	r3, #9
   1e528:	d00f      	beq.n	1e54a <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xca>
   1e52a:	6947      	ldr	r7, [r0, #20]
   1e52c:	4618      	mov	r0, r3
   1e52e:	f7ee fbc9 	bl	ccc4 <TfLiteTypeGetName>
   1e532:	4606      	mov	r6, r0
   1e534:	4628      	mov	r0, r5
   1e536:	f7ee fbc5 	bl	ccc4 <TfLiteTypeGetName>
   1e53a:	4b59      	ldr	r3, [pc, #356]	; (1e6a0 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x220>)
   1e53c:	e9cd 6002 	strd	r6, r0, [sp, #8]
   1e540:	9301      	str	r3, [sp, #4]
   1e542:	4b52      	ldr	r3, [pc, #328]	; (1e68c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x20c>)
   1e544:	9300      	str	r3, [sp, #0]
   1e546:	2330      	movs	r3, #48	; 0x30
   1e548:	e7d7      	b.n	1e4fa <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x7a>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
   1e54a:	6933      	ldr	r3, [r6, #16]
   1e54c:	f113 0f80 	cmn.w	r3, #128	; 0x80
   1e550:	d00a      	beq.n	1e568 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
   1e552:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   1e556:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1e55a:	4b52      	ldr	r3, [pc, #328]	; (1e6a4 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x224>)
   1e55c:	9301      	str	r3, [sp, #4]
   1e55e:	4b49      	ldr	r3, [pc, #292]	; (1e684 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x204>)
   1e560:	9300      	str	r3, [sp, #0]
   1e562:	6944      	ldr	r4, [r0, #20]
   1e564:	2331      	movs	r3, #49	; 0x31
   1e566:	e7da      	b.n	1e51e <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x9e>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
   1e568:	ed96 7a03 	vldr	s14, [r6, #12]
   1e56c:	eddf 7a4e 	vldr	s15, [pc, #312]	; 1e6a8 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x228>
   1e570:	eeb4 7a67 	vcmp.f32	s14, s15
   1e574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1e578:	d007      	beq.n	1e58a <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x10a>
   1e57a:	4b4c      	ldr	r3, [pc, #304]	; (1e6ac <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x22c>)
   1e57c:	4a44      	ldr	r2, [pc, #272]	; (1e690 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x210>)
   1e57e:	9300      	str	r3, [sp, #0]
   1e580:	6944      	ldr	r4, [r0, #20]
   1e582:	2332      	movs	r3, #50	; 0x32
   1e584:	494a      	ldr	r1, [pc, #296]	; (1e6b0 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x230>)
   1e586:	47a0      	blx	r4
   1e588:	e7bb      	b.n	1e502 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x82>
    tflite::PreprocessSoftmaxScaling(
   1e58a:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1e58e:	f7ed ffbb 	bl	c508 <__aeabi_f2d>
   1e592:	4602      	mov	r2, r0
   1e594:	460b      	mov	r3, r1
   1e596:	f8da 0000 	ldr.w	r0, [sl]
   1e59a:	ad07      	add	r5, sp, #28
   1e59c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1e5a0:	f7ed ffb2 	bl	c508 <__aeabi_f2d>
   1e5a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1e5a8:	9502      	str	r5, [sp, #8]
   1e5aa:	ad0a      	add	r5, sp, #40	; 0x28
   1e5ac:	9501      	str	r5, [sp, #4]
   1e5ae:	2505      	movs	r5, #5
   1e5b0:	9500      	str	r5, [sp, #0]
   1e5b2:	f7f3 fab9 	bl	11b28 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_>
    op_data->input_left_shift = input_left_shift;
   1e5b6:	9907      	ldr	r1, [sp, #28]
        -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
   1e5b8:	221f      	movs	r2, #31
   1e5ba:	4628      	mov	r0, r5
    op_data->input_left_shift = input_left_shift;
   1e5bc:	910b      	str	r1, [sp, #44]	; 0x2c
        -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
   1e5be:	f011 fd4c 	bl	3005a <_ZN6tflite20CalculateInputRadiusEiii>
   1e5c2:	f7ed ff8f 	bl	c4e4 <__aeabi_i2d>
   1e5c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    op_data->diff_min =
   1e5ca:	4619      	mov	r1, r3
   1e5cc:	f7f2 fa08 	bl	109e0 <__aeabi_d2iz>
   1e5d0:	900e      	str	r0, [sp, #56]	; 0x38
  switch (input->type) {
   1e5d2:	f817 0009 	ldrb.w	r0, [r7, r9]
   1e5d6:	2803      	cmp	r0, #3
   1e5d8:	d040      	beq.n	1e65c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1dc>
   1e5da:	2809      	cmp	r0, #9
   1e5dc:	d03e      	beq.n	1e65c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1dc>
   1e5de:	2801      	cmp	r0, #1
   1e5e0:	d142      	bne.n	1e668 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1e8>
      SoftmaxFloat(input, output, op_data);
   1e5e2:	4631      	mov	r1, r6
   1e5e4:	4640      	mov	r0, r8
   1e5e6:	aa08      	add	r2, sp, #32
   1e5e8:	f010 f890 	bl	2e70c <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
   1e5ec:	2500      	movs	r5, #0
   1e5ee:	e02a      	b.n	1e646 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1c6>
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
   1e5f0:	2d01      	cmp	r5, #1
   1e5f2:	d013      	beq.n	1e61c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x19c>
   1e5f4:	6946      	ldr	r6, [r0, #20]
   1e5f6:	4628      	mov	r0, r5
   1e5f8:	f7ee fb64 	bl	ccc4 <TfLiteTypeGetName>
   1e5fc:	4605      	mov	r5, r0
   1e5fe:	2001      	movs	r0, #1
   1e600:	f7ee fb60 	bl	ccc4 <TfLiteTypeGetName>
   1e604:	4b2b      	ldr	r3, [pc, #172]	; (1e6b4 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x234>)
   1e606:	e9cd 5002 	strd	r5, r0, [sp, #8]
   1e60a:	9301      	str	r3, [sp, #4]
   1e60c:	4b2a      	ldr	r3, [pc, #168]	; (1e6b8 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x238>)
   1e60e:	4620      	mov	r0, r4
   1e610:	9300      	str	r3, [sp, #0]
   1e612:	4a1f      	ldr	r2, [pc, #124]	; (1e690 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x210>)
   1e614:	2342      	movs	r3, #66	; 0x42
   1e616:	491f      	ldr	r1, [pc, #124]	; (1e694 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x214>)
   1e618:	47b0      	blx	r6
  TF_LITE_ENSURE_STATUS(
   1e61a:	e772      	b.n	1e502 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x82>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
   1e61c:	5cf8      	ldrb	r0, [r7, r3]
   1e61e:	2801      	cmp	r0, #1
   1e620:	d015      	beq.n	1e64e <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1ce>
   1e622:	6967      	ldr	r7, [r4, #20]
   1e624:	f7ee fb4e 	bl	ccc4 <TfLiteTypeGetName>
   1e628:	4606      	mov	r6, r0
   1e62a:	4628      	mov	r0, r5
   1e62c:	f7ee fb4a 	bl	ccc4 <TfLiteTypeGetName>
   1e630:	4b20      	ldr	r3, [pc, #128]	; (1e6b4 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x234>)
   1e632:	e9cd 6002 	strd	r6, r0, [sp, #8]
   1e636:	9301      	str	r3, [sp, #4]
   1e638:	4b14      	ldr	r3, [pc, #80]	; (1e68c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x20c>)
   1e63a:	4620      	mov	r0, r4
   1e63c:	9300      	str	r3, [sp, #0]
   1e63e:	4a14      	ldr	r2, [pc, #80]	; (1e690 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x210>)
   1e640:	2343      	movs	r3, #67	; 0x43
   1e642:	4914      	ldr	r1, [pc, #80]	; (1e694 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x214>)
   1e644:	47b8      	blx	r7
}
   1e646:	4628      	mov	r0, r5
   1e648:	b016      	add	sp, #88	; 0x58
   1e64a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    op_data->beta = static_cast<double>(params->beta);
   1e64e:	f8da 0000 	ldr.w	r0, [sl]
   1e652:	f7ed ff59 	bl	c508 <__aeabi_f2d>
   1e656:	e9cd 0108 	strd	r0, r1, [sp, #32]
  TF_LITE_ENSURE_STATUS(
   1e65a:	e7ba      	b.n	1e5d2 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x152>
      SoftmaxQuantized(input, output, op_data);
   1e65c:	4631      	mov	r1, r6
   1e65e:	4640      	mov	r0, r8
   1e660:	aa08      	add	r2, sp, #32
   1e662:	f010 f9ac 	bl	2e9be <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>
   1e666:	e7c1      	b.n	1e5ec <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x16c>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   1e668:	6965      	ldr	r5, [r4, #20]
   1e66a:	f7ee fb2b 	bl	ccc4 <TfLiteTypeGetName>
   1e66e:	f817 3009 	ldrb.w	r3, [r7, r9]
   1e672:	4602      	mov	r2, r0
   1e674:	4911      	ldr	r1, [pc, #68]	; (1e6bc <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x23c>)
   1e676:	4620      	mov	r0, r4
   1e678:	47a8      	blx	r5
   1e67a:	e742      	b.n	1e502 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x82>
   1e67c:	ffff8000 	.word	0xffff8000
   1e680:	00035c28 	.word	0x00035c28
   1e684:	00035593 	.word	0x00035593
   1e688:	00035c1b 	.word	0x00035c1b
   1e68c:	00035387 	.word	0x00035387
   1e690:	00035bd8 	.word	0x00035bd8
   1e694:	00034ab7 	.word	0x00034ab7
   1e698:	000351b3 	.word	0x000351b3
   1e69c:	00034a7c 	.word	0x00034a7c
   1e6a0:	00035e99 	.word	0x00035e99
   1e6a4:	00035c2f 	.word	0x00035c2f
   1e6a8:	3b800000 	.word	0x3b800000
   1e6ac:	00035c34 	.word	0x00035c34
   1e6b0:	00034b9c 	.word	0x00034b9c
   1e6b4:	00034ad1 	.word	0x00034ad1
   1e6b8:	0003539f 	.word	0x0003539f
   1e6bc:	000349d0 	.word	0x000349d0

0001e6c0 <_ZN6tflite3ops5micro14Register_SPLITEv>:
  return kTfLiteOk;
}

}  // namespace split

TfLiteRegistration Register_SPLIT() {
   1e6c0:	b510      	push	{r4, lr}
   1e6c2:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/split::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1e6c4:	2220      	movs	r2, #32
   1e6c6:	2100      	movs	r1, #0
   1e6c8:	f012 fbc1 	bl	30e4e <memset>
   1e6cc:	4b01      	ldr	r3, [pc, #4]	; (1e6d4 <_ZN6tflite3ops5micro14Register_SPLITEv+0x14>)
}
   1e6ce:	4620      	mov	r0, r4
          /*version=*/0};
   1e6d0:	60e3      	str	r3, [r4, #12]
}
   1e6d2:	bd10      	pop	{r4, pc}
   1e6d4:	0001e6d9 	.word	0x0001e6d9

0001e6d8 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1e6d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  const TfLiteTensor* axis = GetInput(context, node, 0);
   1e6da:	680a      	ldr	r2, [r1, #0]
   1e6dc:	6887      	ldr	r7, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
   1e6de:	6853      	ldr	r3, [r2, #4]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1e6e0:	4605      	mov	r5, r0
   1e6e2:	eb07 1383 	add.w	r3, r7, r3, lsl #6
  TF_LITE_ENSURE_MSG(context, IsConstantTensor(axis),
   1e6e6:	7d1c      	ldrb	r4, [r3, #20]
   1e6e8:	2c01      	cmp	r4, #1
   1e6ea:	d006      	beq.n	1e6fa <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x22>
   1e6ec:	6943      	ldr	r3, [r0, #20]
   1e6ee:	4927      	ldr	r1, [pc, #156]	; (1e78c <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xb4>)
   1e6f0:	4798      	blx	r3
   1e6f2:	2401      	movs	r4, #1
}
   1e6f4:	4620      	mov	r0, r4
   1e6f6:	b003      	add	sp, #12
   1e6f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e6fa:	6892      	ldr	r2, [r2, #8]
  int axis_value = GetTensorData<int32_t>(axis)[0];
   1e6fc:	685b      	ldr	r3, [r3, #4]
   1e6fe:	ea4f 1c82 	mov.w	ip, r2, lsl #6
   1e702:	681b      	ldr	r3, [r3, #0]
   1e704:	eb07 1282 	add.w	r2, r7, r2, lsl #6
  if (axis_value < 0) {
   1e708:	6896      	ldr	r6, [r2, #8]
   1e70a:	2b00      	cmp	r3, #0
   1e70c:	6836      	ldr	r6, [r6, #0]
   1e70e:	da09      	bge.n	1e724 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x4c>
  TF_LITE_ENSURE(context, axis_value >= 0);
   1e710:	199b      	adds	r3, r3, r6
   1e712:	d507      	bpl.n	1e724 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x4c>
   1e714:	4b1e      	ldr	r3, [pc, #120]	; (1e790 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xb8>)
   1e716:	4a1f      	ldr	r2, [pc, #124]	; (1e794 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xbc>)
   1e718:	9300      	str	r3, [sp, #0]
   1e71a:	6945      	ldr	r5, [r0, #20]
   1e71c:	2353      	movs	r3, #83	; 0x53
   1e71e:	491e      	ldr	r1, [pc, #120]	; (1e798 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xc0>)
   1e720:	47a8      	blx	r5
   1e722:	e7e7      	b.n	1e6f4 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x1c>
  TF_LITE_ENSURE(context, axis_value < NumDimensions(input));
   1e724:	429e      	cmp	r6, r3
   1e726:	dc08      	bgt.n	1e73a <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x62>
   1e728:	4b1c      	ldr	r3, [pc, #112]	; (1e79c <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xc4>)
   1e72a:	4628      	mov	r0, r5
   1e72c:	9300      	str	r3, [sp, #0]
   1e72e:	696e      	ldr	r6, [r5, #20]
   1e730:	2354      	movs	r3, #84	; 0x54
   1e732:	4a18      	ldr	r2, [pc, #96]	; (1e794 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xbc>)
   1e734:	4918      	ldr	r1, [pc, #96]	; (1e798 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xc0>)
   1e736:	47b0      	blx	r6
   1e738:	e7dc      	b.n	1e6f4 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x1c>
  switch (input->type) {
   1e73a:	f817 000c 	ldrb.w	r0, [r7, ip]
   1e73e:	1e46      	subs	r6, r0, #1
   1e740:	2e08      	cmp	r6, #8
   1e742:	d81b      	bhi.n	1e77c <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xa4>
   1e744:	e8df f006 	tbb	[pc, r6]
   1e748:	1a0a1605 	.word	0x1a0a1605
   1e74c:	1a121a1a 	.word	0x1a121a1a
   1e750:	0e          	.byte	0x0e
   1e751:	00          	.byte	0x00
      return SplitImpl<float>(context, node, input, axis_value);
   1e752:	4628      	mov	r0, r5
   1e754:	f010 f97d 	bl	2ea52 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>
      return SplitImpl<uint8_t>(context, node, input, axis_value);
   1e758:	4604      	mov	r4, r0
   1e75a:	e7cb      	b.n	1e6f4 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x1c>
   1e75c:	4628      	mov	r0, r5
   1e75e:	f010 fa08 	bl	2eb72 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>
   1e762:	e7f9      	b.n	1e758 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x80>
      return SplitImpl<int8_t>(context, node, input, axis_value);
   1e764:	4628      	mov	r0, r5
   1e766:	f010 fa7f 	bl	2ec68 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>
   1e76a:	e7f5      	b.n	1e758 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x80>
      return SplitImpl<int16_t>(context, node, input, axis_value);
   1e76c:	4628      	mov	r0, r5
   1e76e:	f010 faf6 	bl	2ed5e <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>
   1e772:	e7f1      	b.n	1e758 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x80>
      return SplitImpl<int32_t>(context, node, input, axis_value);
   1e774:	4628      	mov	r0, r5
   1e776:	f010 fb7d 	bl	2ee74 <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>
   1e77a:	e7ed      	b.n	1e758 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x80>
      TF_LITE_KERNEL_LOG(context, "Type %s currently not supported.",
   1e77c:	696e      	ldr	r6, [r5, #20]
   1e77e:	f7ee faa1 	bl	ccc4 <TfLiteTypeGetName>
   1e782:	4907      	ldr	r1, [pc, #28]	; (1e7a0 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xc8>)
   1e784:	4602      	mov	r2, r0
   1e786:	4628      	mov	r0, r5
   1e788:	47b0      	blx	r6
      return kTfLiteError;
   1e78a:	e7b3      	b.n	1e6f4 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x1c>
   1e78c:	00035c56 	.word	0x00035c56
   1e790:	00035ccb 	.word	0x00035ccb
   1e794:	00035ca4 	.word	0x00035ca4
   1e798:	00034b9c 	.word	0x00034b9c
   1e79c:	00035cdb 	.word	0x00035cdb
   1e7a0:	00035cfd 	.word	0x00035cfd

0001e7a4 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE>:

// Processes the indexing tensors (begin, end and strides) to resize the
// output tensor. This function is callable from both Prepare() and Eval() as
// long as the caller ensures the indexing tensors are present.
TfLiteStatus CheckOutputSize(TfLiteContext* context,
                             StridedSliceContext* op_context) {
   1e7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  using ::tflite::strided_slice::StopForAxis;
  TfLiteIntArray* output_shape = op_context->output->dims;
  int shape_size = 0;
  auto op_params = BuildStridedSliceParams(op_context);
  auto input_shape = GetTensorShape(op_context->input);
  for (int idx = 0; idx < op_context->dims; ++idx) {
   1e7a8:	2500      	movs	r5, #0
                             StridedSliceContext* op_context) {
   1e7aa:	460e      	mov	r6, r1
  int shape_size = 0;
   1e7ac:	462f      	mov	r7, r5
  TfLiteIntArray* output_shape = op_context->output->dims;
   1e7ae:	694b      	ldr	r3, [r1, #20]
                             StridedSliceContext* op_context) {
   1e7b0:	b0a1      	sub	sp, #132	; 0x84
   1e7b2:	4604      	mov	r4, r0
  auto op_params = BuildStridedSliceParams(op_context);
   1e7b4:	a80b      	add	r0, sp, #44	; 0x2c
  TfLiteIntArray* output_shape = op_context->output->dims;
   1e7b6:	f8d3 8008 	ldr.w	r8, [r3, #8]
  auto op_params = BuildStridedSliceParams(op_context);
   1e7ba:	f010 fca7 	bl	2f10c <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE>
  auto input_shape = GetTensorShape(op_context->input);
   1e7be:	6871      	ldr	r1, [r6, #4]
   1e7c0:	a805      	add	r0, sp, #20
   1e7c2:	f008 ff3b 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  for (int idx = 0; idx < op_context->dims; ++idx) {
   1e7c6:	f8d6 9018 	ldr.w	r9, [r6, #24]
   1e7ca:	45a9      	cmp	r9, r5
   1e7cc:	dd4d      	ble.n	1e86a <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xc6>
    int32_t stride = GetTensorData<int32_t>(op_context->strides)[idx];
   1e7ce:	6933      	ldr	r3, [r6, #16]
   1e7d0:	b103      	cbz	r3, 1e7d4 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x30>
   1e7d2:	685b      	ldr	r3, [r3, #4]
   1e7d4:	f853 b025 	ldr.w	fp, [r3, r5, lsl #2]
    TF_LITE_ENSURE_MSG(context, stride != 0, "stride value has to be non-zero");
   1e7d8:	f1bb 0f00 	cmp.w	fp, #0
   1e7dc:	d10b      	bne.n	1e7f6 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x52>
   1e7de:	4620      	mov	r0, r4
   1e7e0:	6963      	ldr	r3, [r4, #20]
   1e7e2:	4929      	ldr	r1, [pc, #164]	; (1e888 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xe4>)
   1e7e4:	4798      	blx	r3
    if (!shrink_axis) {
      TF_LITE_ENSURE_EQ(context, output_shape->data[shape_size], dim_shape);
      shape_size++;
    }
  }
  TF_LITE_ENSURE_EQ(context, output_shape->size, shape_size);
   1e7e6:	2401      	movs	r4, #1
  auto input_shape = GetTensorShape(op_context->input);
   1e7e8:	a805      	add	r0, sp, #20
   1e7ea:	f008 fee2 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
}
   1e7ee:	4620      	mov	r0, r4
   1e7f0:	b021      	add	sp, #132	; 0x84
   1e7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int32_t begin = StartForAxis(op_params, input_shape, idx);
   1e7f6:	462a      	mov	r2, r5
   1e7f8:	a905      	add	r1, sp, #20
   1e7fa:	a80b      	add	r0, sp, #44	; 0x2c
   1e7fc:	f010 fc0d 	bl	2f01a <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
    int32_t end = StopForAxis(op_params, input_shape, idx, begin);
   1e800:	462a      	mov	r2, r5
   1e802:	4603      	mov	r3, r0
    int32_t begin = StartForAxis(op_params, input_shape, idx);
   1e804:	4682      	mov	sl, r0
    int32_t end = StopForAxis(op_params, input_shape, idx, begin);
   1e806:	a905      	add	r1, sp, #20
   1e808:	a80b      	add	r0, sp, #44	; 0x2c
   1e80a:	f010 fc2b 	bl	2f064 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
    const bool shrink_axis = op_context->params->shrink_axis_mask & (1 << idx);
   1e80e:	6833      	ldr	r3, [r6, #0]
   1e810:	691b      	ldr	r3, [r3, #16]
   1e812:	412b      	asrs	r3, r5
    if (shrink_axis) {
   1e814:	07db      	lsls	r3, r3, #31
   1e816:	d426      	bmi.n	1e866 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xc2>
    int32_t dim_shape = std::ceil((end - begin) / static_cast<float>(stride));
   1e818:	eba0 000a 	sub.w	r0, r0, sl
   1e81c:	ee07 0a90 	vmov	s15, r0
   1e820:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   1e824:	ee07 ba90 	vmov	s15, fp
   1e828:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   1e82c:	eec7 7a26 	vdiv.f32	s15, s14, s13
  { return __builtin_ceilf(__x); }
   1e830:	fefa 7a67 	vrintp.f32	s15, s15
   1e834:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   1e838:	ee17 3a90 	vmov	r3, s15
      TF_LITE_ENSURE_EQ(context, output_shape->data[shape_size], dim_shape);
   1e83c:	eb08 0287 	add.w	r2, r8, r7, lsl #2
   1e840:	6852      	ldr	r2, [r2, #4]
    dim_shape = dim_shape < 0 ? 0 : dim_shape;
   1e842:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
      TF_LITE_ENSURE_EQ(context, output_shape->data[shape_size], dim_shape);
   1e846:	429a      	cmp	r2, r3
   1e848:	d00c      	beq.n	1e864 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xc0>
   1e84a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1e84e:	4b0f      	ldr	r3, [pc, #60]	; (1e88c <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xe8>)
   1e850:	9301      	str	r3, [sp, #4]
   1e852:	4b0f      	ldr	r3, [pc, #60]	; (1e890 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xec>)
   1e854:	9300      	str	r3, [sp, #0]
   1e856:	2373      	movs	r3, #115	; 0x73
   1e858:	6965      	ldr	r5, [r4, #20]
  TF_LITE_ENSURE_EQ(context, output_shape->size, shape_size);
   1e85a:	4620      	mov	r0, r4
   1e85c:	4a0d      	ldr	r2, [pc, #52]	; (1e894 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xf0>)
   1e85e:	490e      	ldr	r1, [pc, #56]	; (1e898 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xf4>)
   1e860:	47a8      	blx	r5
   1e862:	e7c0      	b.n	1e7e6 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x42>
      shape_size++;
   1e864:	3701      	adds	r7, #1
  for (int idx = 0; idx < op_context->dims; ++idx) {
   1e866:	3501      	adds	r5, #1
   1e868:	e7af      	b.n	1e7ca <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x26>
  TF_LITE_ENSURE_EQ(context, output_shape->size, shape_size);
   1e86a:	f8d8 3000 	ldr.w	r3, [r8]
   1e86e:	42bb      	cmp	r3, r7
   1e870:	d008      	beq.n	1e884 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xe0>
   1e872:	e9cd 3702 	strd	r3, r7, [sp, #8]
   1e876:	4b09      	ldr	r3, [pc, #36]	; (1e89c <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xf8>)
   1e878:	9301      	str	r3, [sp, #4]
   1e87a:	4b09      	ldr	r3, [pc, #36]	; (1e8a0 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xfc>)
   1e87c:	9300      	str	r3, [sp, #0]
   1e87e:	6965      	ldr	r5, [r4, #20]
   1e880:	2377      	movs	r3, #119	; 0x77
   1e882:	e7ea      	b.n	1e85a <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xb6>
  return kTfLiteOk;
   1e884:	2400      	movs	r4, #0
   1e886:	e7af      	b.n	1e7e8 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x44>
   1e888:	00035d1e 	.word	0x00035d1e
   1e88c:	00035d9c 	.word	0x00035d9c
   1e890:	00035da6 	.word	0x00035da6
   1e894:	00035d6d 	.word	0x00035d6d
   1e898:	00034a7c 	.word	0x00034a7c
   1e89c:	00035dc5 	.word	0x00035dc5
   1e8a0:	00035dd0 	.word	0x00035dd0

0001e8a4 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1e8a4:	b570      	push	{r4, r5, r6, lr}
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   1e8a6:	680b      	ldr	r3, [r1, #0]
   1e8a8:	4605      	mov	r5, r0
   1e8aa:	681b      	ldr	r3, [r3, #0]
   1e8ac:	460a      	mov	r2, r1
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 4);
   1e8ae:	2b04      	cmp	r3, #4
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1e8b0:	b08c      	sub	sp, #48	; 0x30
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 4);
   1e8b2:	d00e      	beq.n	1e8d2 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x2e>
   1e8b4:	2204      	movs	r2, #4
   1e8b6:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1e8ba:	4b15      	ldr	r3, [pc, #84]	; (1e910 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x6c>)
   1e8bc:	9301      	str	r3, [sp, #4]
   1e8be:	4b15      	ldr	r3, [pc, #84]	; (1e914 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x70>)
   1e8c0:	9300      	str	r3, [sp, #0]
   1e8c2:	237c      	movs	r3, #124	; 0x7c
   1e8c4:	6944      	ldr	r4, [r0, #20]
   1e8c6:	4a14      	ldr	r2, [pc, #80]	; (1e918 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x74>)
   1e8c8:	4914      	ldr	r1, [pc, #80]	; (1e91c <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x78>)
   1e8ca:	47a0      	blx	r4
   1e8cc:	2001      	movs	r0, #1
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  StridedSliceContext op_context(context, node);
  TF_LITE_ENSURE_MSG(context, op_context.dims <= kMaxDim,
                     "input dim should not exceed 4");
  return CheckOutputSize(context, &op_context);
}
   1e8ce:	b00c      	add	sp, #48	; 0x30
   1e8d0:	bd70      	pop	{r4, r5, r6, pc}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   1e8d2:	684b      	ldr	r3, [r1, #4]
   1e8d4:	681c      	ldr	r4, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   1e8d6:	2c01      	cmp	r4, #1
   1e8d8:	d009      	beq.n	1e8ee <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
   1e8da:	2601      	movs	r6, #1
   1e8dc:	4b10      	ldr	r3, [pc, #64]	; (1e920 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
   1e8de:	e9cd 4602 	strd	r4, r6, [sp, #8]
   1e8e2:	9301      	str	r3, [sp, #4]
   1e8e4:	4b0f      	ldr	r3, [pc, #60]	; (1e924 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x80>)
   1e8e6:	9300      	str	r3, [sp, #0]
   1e8e8:	6944      	ldr	r4, [r0, #20]
   1e8ea:	237d      	movs	r3, #125	; 0x7d
   1e8ec:	e7eb      	b.n	1e8c6 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
  StridedSliceContext op_context(context, node);
   1e8ee:	4601      	mov	r1, r0
   1e8f0:	a805      	add	r0, sp, #20
   1e8f2:	f010 fbed 	bl	2f0d0 <_ZN6tflite3ops5micro13strided_slice19StridedSliceContextC1EP13TfLiteContextP10TfLiteNode>
  TF_LITE_ENSURE_MSG(context, op_context.dims <= kMaxDim,
   1e8f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e8f8:	2b04      	cmp	r3, #4
   1e8fa:	dd04      	ble.n	1e906 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x62>
   1e8fc:	4628      	mov	r0, r5
   1e8fe:	696b      	ldr	r3, [r5, #20]
   1e900:	4909      	ldr	r1, [pc, #36]	; (1e928 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x84>)
   1e902:	4798      	blx	r3
   1e904:	e7e2      	b.n	1e8cc <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x28>
  return CheckOutputSize(context, &op_context);
   1e906:	4628      	mov	r0, r5
   1e908:	a905      	add	r1, sp, #20
   1e90a:	f7ff ff4b 	bl	1e7a4 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE>
   1e90e:	e7de      	b.n	1e8ce <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x2a>
   1e910:	00035e2e 	.word	0x00035e2e
   1e914:	00034a96 	.word	0x00034a96
   1e918:	00035d6d 	.word	0x00035d6d
   1e91c:	00034a7c 	.word	0x00034a7c
   1e920:	00035814 	.word	0x00035814
   1e924:	00034aa6 	.word	0x00034aa6
   1e928:	00035de3 	.word	0x00035de3

0001e92c <_ZN6tflite3ops5micro22Register_STRIDED_SLICEEv>:
#undef TF_LITE_STRIDED_SLICE
  return kTfLiteOk;
}
}  // namespace strided_slice

TfLiteRegistration Register_STRIDED_SLICE() {
   1e92c:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/strided_slice::Prepare,
          /*invoke=*/strided_slice::Eval<strided_slice::kReference>,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1e92e:	4604      	mov	r4, r0
TfLiteRegistration Register_STRIDED_SLICE() {
   1e930:	4606      	mov	r6, r0
          /*version=*/0};
   1e932:	4d04      	ldr	r5, [pc, #16]	; (1e944 <_ZN6tflite3ops5micro22Register_STRIDED_SLICEEv+0x18>)
   1e934:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1e936:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1e938:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1e93c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1e940:	4630      	mov	r0, r6
   1e942:	bd70      	pop	{r4, r5, r6, pc}
   1e944:	00031b98 	.word	0x00031b98

0001e948 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1e948:	b530      	push	{r4, r5, lr}
   1e94a:	b0ab      	sub	sp, #172	; 0xac
   1e94c:	460a      	mov	r2, r1
   1e94e:	4604      	mov	r4, r0
  StridedSliceContext op_context(context, node);
   1e950:	4601      	mov	r1, r0
   1e952:	a80e      	add	r0, sp, #56	; 0x38
   1e954:	f010 fbbc 	bl	2f0d0 <_ZN6tflite3ops5micro13strided_slice19StridedSliceContextC1EP13TfLiteContextP10TfLiteNode>
  auto op_params = BuildStridedSliceParams(&op_context);
   1e958:	a90e      	add	r1, sp, #56	; 0x38
   1e95a:	a815      	add	r0, sp, #84	; 0x54
   1e95c:	f010 fbd6 	bl	2f10c <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE>
  switch (op_context.input->type) {
   1e960:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1e962:	7808      	ldrb	r0, [r1, #0]
   1e964:	2803      	cmp	r0, #3
   1e966:	d020      	beq.n	1e9aa <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x62>
   1e968:	2809      	cmp	r0, #9
   1e96a:	d033      	beq.n	1e9d4 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x8c>
   1e96c:	2801      	cmp	r0, #1
   1e96e:	d146      	bne.n	1e9fe <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xb6>
        TF_LITE_STRIDED_SLICE(reference_ops, float);
   1e970:	a802      	add	r0, sp, #8
   1e972:	f008 fe63 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1e976:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   1e978:	b104      	cbz	r4, 1e97c <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x34>
   1e97a:	6864      	ldr	r4, [r4, #4]
   1e97c:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1e97e:	a808      	add	r0, sp, #32
   1e980:	f008 fe5c 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1e984:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1e986:	b103      	cbz	r3, 1e98a <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x42>
   1e988:	685b      	ldr	r3, [r3, #4]
   1e98a:	9300      	str	r3, [sp, #0]
   1e98c:	4622      	mov	r2, r4
   1e98e:	ab08      	add	r3, sp, #32
   1e990:	a902      	add	r1, sp, #8
   1e992:	a815      	add	r0, sp, #84	; 0x54
   1e994:	f010 fbe9 	bl	2f16a <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>
        TF_LITE_STRIDED_SLICE(reference_ops, uint8_t);
   1e998:	a808      	add	r0, sp, #32
   1e99a:	f008 fe0a 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   1e99e:	a802      	add	r0, sp, #8
   1e9a0:	f008 fe07 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   1e9a4:	2000      	movs	r0, #0
}
   1e9a6:	b02b      	add	sp, #172	; 0xac
   1e9a8:	bd30      	pop	{r4, r5, pc}
        TF_LITE_STRIDED_SLICE(reference_ops, uint8_t);
   1e9aa:	a802      	add	r0, sp, #8
   1e9ac:	f008 fe46 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1e9b0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1e9b2:	b104      	cbz	r4, 1e9b6 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x6e>
   1e9b4:	6864      	ldr	r4, [r4, #4]
   1e9b6:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1e9b8:	a808      	add	r0, sp, #32
   1e9ba:	f008 fe3f 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1e9be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1e9c0:	b103      	cbz	r3, 1e9c4 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x7c>
   1e9c2:	685b      	ldr	r3, [r3, #4]
   1e9c4:	9300      	str	r3, [sp, #0]
   1e9c6:	4622      	mov	r2, r4
   1e9c8:	ab08      	add	r3, sp, #32
   1e9ca:	a902      	add	r1, sp, #8
   1e9cc:	a815      	add	r0, sp, #84	; 0x54
   1e9ce:	f010 fce7 	bl	2f3a0 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>
   1e9d2:	e7e1      	b.n	1e998 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x50>
        TF_LITE_STRIDED_SLICE(reference_ops, int8_t);
   1e9d4:	a802      	add	r0, sp, #8
   1e9d6:	f008 fe31 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1e9da:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1e9dc:	b104      	cbz	r4, 1e9e0 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x98>
   1e9de:	6864      	ldr	r4, [r4, #4]
   1e9e0:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1e9e2:	a808      	add	r0, sp, #32
   1e9e4:	f008 fe2a 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1e9e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1e9ea:	b103      	cbz	r3, 1e9ee <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xa6>
   1e9ec:	685b      	ldr	r3, [r3, #4]
   1e9ee:	9300      	str	r3, [sp, #0]
   1e9f0:	4622      	mov	r2, r4
   1e9f2:	ab08      	add	r3, sp, #32
   1e9f4:	a902      	add	r1, sp, #8
   1e9f6:	a815      	add	r0, sp, #84	; 0x54
   1e9f8:	f010 fdeb 	bl	2f5d2 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>
   1e9fc:	e7cc      	b.n	1e998 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x50>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   1e9fe:	6965      	ldr	r5, [r4, #20]
   1ea00:	f7ee f960 	bl	ccc4 <TfLiteTypeGetName>
   1ea04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ea06:	4602      	mov	r2, r0
   1ea08:	781b      	ldrb	r3, [r3, #0]
   1ea0a:	4620      	mov	r0, r4
   1ea0c:	4901      	ldr	r1, [pc, #4]	; (1ea14 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xcc>)
   1ea0e:	47a8      	blx	r5
      return kTfLiteError;
   1ea10:	2001      	movs	r0, #1
   1ea12:	e7c8      	b.n	1e9a6 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x5e>
   1ea14:	000349d0 	.word	0x000349d0

0001ea18 <_ZN6tflite3ops5micro3sub15CalculateOpDataEP13TfLiteContextP15TfLiteSubParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE>:
};

TfLiteStatus CalculateOpData(TfLiteContext* context, TfLiteSubParams* params,
                             const TfLiteTensor* input1,
                             const TfLiteTensor* input2, TfLiteTensor* output,
                             OpData* data) {
   1ea18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ea1c:	ed2d 8b04 	vpush	{d8-d9}
   1ea20:	4680      	mov	r8, r0
   1ea22:	b083      	sub	sp, #12
   1ea24:	4689      	mov	r9, r1
   1ea26:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
  data->requires_broadcast = !HaveSameShapes(input1, input2);
   1ea2a:	4619      	mov	r1, r3
   1ea2c:	4610      	mov	r0, r2
                             OpData* data) {
   1ea2e:	461d      	mov	r5, r3
   1ea30:	4616      	mov	r6, r2
  data->requires_broadcast = !HaveSameShapes(input1, input2);
   1ea32:	f011 fb66 	bl	30102 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>

  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
   1ea36:	783b      	ldrb	r3, [r7, #0]
  data->requires_broadcast = !HaveSameShapes(input1, input2);
   1ea38:	f080 0001 	eor.w	r0, r0, #1
  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
   1ea3c:	2b03      	cmp	r3, #3
  data->requires_broadcast = !HaveSameShapes(input1, input2);
   1ea3e:	7020      	strb	r0, [r4, #0]
  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
   1ea40:	d001      	beq.n	1ea46 <_ZN6tflite3ops5micro3sub15CalculateOpDataEP13TfLiteContextP15TfLiteSubParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x2e>
   1ea42:	2b09      	cmp	r3, #9
   1ea44:	d15d      	bne.n	1eb02 <_ZN6tflite3ops5micro3sub15CalculateOpDataEP13TfLiteContextP15TfLiteSubParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0xea>
      if (__a < __b)
   1ea46:	ed96 9a03 	vldr	s18, [r6, #12]
   1ea4a:	edd5 8a03 	vldr	s17, [r5, #12]
    data->input1_offset = -input1->params.zero_point;
    data->input2_offset = -input2->params.zero_point;
    data->output_offset = output->params.zero_point;
    data->left_shift = 20;
    const float twice_max_input_scale =
        2 * std::max(input1->params.scale, input2->params.scale);
   1ea4e:	eeb4 9ae8 	vcmpe.f32	s18, s17
   1ea52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        static_cast<double>(input1->params.scale / twice_max_input_scale);
    const double real_input2_multiplier =
        static_cast<double>(input2->params.scale / twice_max_input_scale);
    const double real_output_multiplier =
        static_cast<double>(twice_max_input_scale /
                            ((1 << data->left_shift) * output->params.scale));
   1ea56:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 1eb10 <_ZN6tflite3ops5micro3sub15CalculateOpDataEP13TfLiteContextP15TfLiteSubParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0xf8>
        2 * std::max(input1->params.scale, input2->params.scale);
   1ea5a:	bf54      	ite	pl
   1ea5c:	eeb0 8a49 	vmovpl.f32	s16, s18
   1ea60:	eeb0 8a68 	vmovmi.f32	s16, s17
                            ((1 << data->left_shift) * output->params.scale));
   1ea64:	edd7 7a03 	vldr	s15, [r7, #12]
        2 * std::max(input1->params.scale, input2->params.scale);
   1ea68:	ee38 8a08 	vadd.f32	s16, s16, s16
                            ((1 << data->left_shift) * output->params.scale));
   1ea6c:	ee67 7a87 	vmul.f32	s15, s15, s14
    data->input1_offset = -input1->params.zero_point;
   1ea70:	6933      	ldr	r3, [r6, #16]
    const double real_output_multiplier =
   1ea72:	eec8 7a27 	vdiv.f32	s15, s16, s15
    data->input1_offset = -input1->params.zero_point;
   1ea76:	425b      	negs	r3, r3
   1ea78:	62a3      	str	r3, [r4, #40]	; 0x28
    data->input2_offset = -input2->params.zero_point;
   1ea7a:	692b      	ldr	r3, [r5, #16]
    const double real_output_multiplier =
   1ea7c:	ee17 0a90 	vmov	r0, s15
    data->input2_offset = -input2->params.zero_point;
   1ea80:	425b      	negs	r3, r3
   1ea82:	62e3      	str	r3, [r4, #44]	; 0x2c
    data->output_offset = output->params.zero_point;
   1ea84:	693b      	ldr	r3, [r7, #16]
   1ea86:	6323      	str	r3, [r4, #48]	; 0x30
    data->left_shift = 20;
   1ea88:	2314      	movs	r3, #20
   1ea8a:	6263      	str	r3, [r4, #36]	; 0x24
    const double real_output_multiplier =
   1ea8c:	f7ed fd3c 	bl	c508 <__aeabi_f2d>
    const double real_input1_multiplier =
   1ea90:	eec9 7a08 	vdiv.f32	s15, s18, s16

    QuantizeMultiplierSmallerThanOneExp(
   1ea94:	1d23      	adds	r3, r4, #4
   1ea96:	f104 0214 	add.w	r2, r4, #20
    const double real_output_multiplier =
   1ea9a:	4682      	mov	sl, r0
    const double real_input1_multiplier =
   1ea9c:	ee17 0a90 	vmov	r0, s15
    const double real_output_multiplier =
   1eaa0:	468b      	mov	fp, r1
    QuantizeMultiplierSmallerThanOneExp(
   1eaa2:	9301      	str	r3, [sp, #4]
   1eaa4:	9200      	str	r2, [sp, #0]
    const double real_input1_multiplier =
   1eaa6:	f7ed fd2f 	bl	c508 <__aeabi_f2d>
    QuantizeMultiplierSmallerThanOneExp(
   1eaaa:	e9dd 2300 	ldrd	r2, r3, [sp]
   1eaae:	f002 fa83 	bl	20fb8 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    const double real_input2_multiplier =
   1eab2:	eec8 7a88 	vdiv.f32	s15, s17, s16
        real_input1_multiplier, &data->input1_multiplier, &data->input1_shift);

    QuantizeMultiplierSmallerThanOneExp(
   1eab6:	f104 0308 	add.w	r3, r4, #8
    const double real_input2_multiplier =
   1eaba:	ee17 0a90 	vmov	r0, s15
    QuantizeMultiplierSmallerThanOneExp(
   1eabe:	f104 0218 	add.w	r2, r4, #24
   1eac2:	9301      	str	r3, [sp, #4]
   1eac4:	9200      	str	r2, [sp, #0]
    const double real_input2_multiplier =
   1eac6:	f7ed fd1f 	bl	c508 <__aeabi_f2d>
    QuantizeMultiplierSmallerThanOneExp(
   1eaca:	e9dd 2300 	ldrd	r2, r3, [sp]
   1eace:	f002 fa73 	bl	20fb8 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
        real_input2_multiplier, &data->input2_multiplier, &data->input2_shift);

    QuantizeMultiplierSmallerThanOneExp(
   1ead2:	4650      	mov	r0, sl
   1ead4:	4659      	mov	r1, fp
   1ead6:	f104 0320 	add.w	r3, r4, #32
   1eada:	f104 021c 	add.w	r2, r4, #28
   1eade:	f002 fa6b 	bl	20fb8 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
        real_output_multiplier, &data->output_multiplier, &data->output_shift);

    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   1eae2:	463a      	mov	r2, r7
   1eae4:	4640      	mov	r0, r8
   1eae6:	f104 0310 	add.w	r3, r4, #16
   1eaea:	f899 1000 	ldrb.w	r1, [r9]
   1eaee:	9310      	str	r3, [sp, #64]	; 0x40
   1eaf0:	f104 030c 	add.w	r3, r4, #12
        context, params->activation, output, &data->output_activation_min,
        &data->output_activation_max));
  }

  return kTfLiteOk;
}
   1eaf4:	b003      	add	sp, #12
   1eaf6:	ecbd 8b04 	vpop	{d8-d9}
   1eafa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   1eafe:	f002 baaf 	b.w	21060 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
}
   1eb02:	2000      	movs	r0, #0
   1eb04:	b003      	add	sp, #12
   1eb06:	ecbd 8b04 	vpop	{d8-d9}
   1eb0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eb0e:	bf00      	nop
   1eb10:	49800000 	.word	0x49800000

0001eb14 <_ZN6tflite3ops5micro12Register_SUBEv>:
  return kTfLiteOk;
}

}  // namespace sub

TfLiteRegistration Register_SUB() {
   1eb14:	b510      	push	{r4, lr}
   1eb16:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/sub::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1eb18:	2220      	movs	r2, #32
   1eb1a:	2100      	movs	r1, #0
   1eb1c:	f012 f997 	bl	30e4e <memset>
   1eb20:	4b01      	ldr	r3, [pc, #4]	; (1eb28 <_ZN6tflite3ops5micro12Register_SUBEv+0x14>)
}
   1eb22:	4620      	mov	r0, r4
          /*version=*/0};
   1eb24:	60e3      	str	r3, [r4, #12]
}
   1eb26:	bd10      	pop	{r4, pc}
   1eb28:	0001ece9 	.word	0x0001ece9

0001eb2c <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>:
             const TfLiteTensor* input2, TfLiteTensor* output) {
   1eb2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  CalculateActivationRange(params->activation, &output_activation_min,
   1eb30:	7812      	ldrb	r2, [r2, #0]
             const TfLiteTensor* input2, TfLiteTensor* output) {
   1eb32:	b0da      	sub	sp, #360	; 0x168
  if (activation == kTfLiteActRelu) {
   1eb34:	2a01      	cmp	r2, #1
   1eb36:	9c64      	ldr	r4, [sp, #400]	; 0x190
   1eb38:	e9dd 6562 	ldrd	r6, r5, [sp, #392]	; 0x188
   1eb3c:	d038      	beq.n	1ebb0 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x84>
  } else if (activation == kTfLiteActRelu6) {
   1eb3e:	2a03      	cmp	r2, #3
   1eb40:	d03b      	beq.n	1ebba <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x8e>
    *activation_max = std::numeric_limits<T>::max();
   1eb42:	ed9f 7a66 	vldr	s14, [pc, #408]	; 1ecdc <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x1b0>
   1eb46:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1eb4a:	2a02      	cmp	r2, #2
   1eb4c:	eddf 6a64 	vldr	s13, [pc, #400]	; 1ece0 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x1b4>
   1eb50:	fe47 7a87 	vseleq.f32	s15, s15, s14
   1eb54:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   1eb58:	fe07 7a26 	vseleq.f32	s14, s14, s13
  if (data->requires_broadcast) {
   1eb5c:	781b      	ldrb	r3, [r3, #0]
  params->float_activation_min = min;
   1eb5e:	ed8d 7a4d 	vstr	s14, [sp, #308]	; 0x134
  params->float_activation_max = max;
   1eb62:	edcd 7a4e 	vstr	s15, [sp, #312]	; 0x138
    TF_LITE_SUB(tflite::reference_ops::BroadcastSubSlow);
   1eb66:	4631      	mov	r1, r6
   1eb68:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
   1eb6c:	f10d 0888 	add.w	r8, sp, #136	; 0x88
   1eb70:	af36      	add	r7, sp, #216	; 0xd8
  if (data->requires_broadcast) {
   1eb72:	2b00      	cmp	r3, #0
   1eb74:	d076      	beq.n	1ec64 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x138>
    TF_LITE_SUB(tflite::reference_ops::BroadcastSubSlow);
   1eb76:	a809      	add	r0, sp, #36	; 0x24
   1eb78:	f008 fd60 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1eb7c:	b106      	cbz	r6, 1eb80 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x54>
   1eb7e:	6876      	ldr	r6, [r6, #4]
   1eb80:	4629      	mov	r1, r5
   1eb82:	a80f      	add	r0, sp, #60	; 0x3c
   1eb84:	f008 fd5a 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1eb88:	b105      	cbz	r5, 1eb8c <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x60>
   1eb8a:	686d      	ldr	r5, [r5, #4]
   1eb8c:	4621      	mov	r1, r4
   1eb8e:	a815      	add	r0, sp, #84	; 0x54
   1eb90:	f008 fd54 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1eb94:	b104      	cbz	r4, 1eb98 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x6c>
   1eb96:	6864      	ldr	r4, [r4, #4]
                             const RuntimeShape& input2_shape,
                             const float* input2_data,
                             const RuntimeShape& output_shape,
                             float* output_data) {
  ruy::profiler::ScopeLabel label("BroadcastSubSlow/float");
  TFLITE_DCHECK_LE(input1_shape.DimensionsCount(), N);
   1eb98:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1eb9a:	9601      	str	r6, [sp, #4]
   1eb9c:	9502      	str	r5, [sp, #8]
   1eb9e:	2b05      	cmp	r3, #5
   1eba0:	f10d 0a04 	add.w	sl, sp, #4
   1eba4:	ae02      	add	r6, sp, #8
   1eba6:	ad03      	add	r5, sp, #12
   1eba8:	602c      	str	r4, [r5, #0]
   1ebaa:	dd09      	ble.n	1ebc0 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x94>
   1ebac:	f012 f905 	bl	30dba <abort>
    *activation_max = std::numeric_limits<T>::max();
   1ebb0:	eddf 7a4a 	vldr	s15, [pc, #296]	; 1ecdc <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x1b0>
    *activation_min = 0;
   1ebb4:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 1ece4 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x1b8>
   1ebb8:	e7d0      	b.n	1eb5c <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x30>
    *activation_max = 6;
   1ebba:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
   1ebbe:	e7f9      	b.n	1ebb4 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x88>
  TFLITE_DCHECK_LE(input2_shape.DimensionsCount(), N);
   1ebc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ebc2:	2b05      	cmp	r3, #5
   1ebc4:	dcf2      	bgt.n	1ebac <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x80>
  TFLITE_DCHECK_LE(output_shape.DimensionsCount(), N);
   1ebc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1ebc8:	2b05      	cmp	r3, #5
   1ebca:	dcef      	bgt.n	1ebac <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x80>
  NdArrayDesc<N> desc1;
  NdArrayDesc<N> desc2;
  NdArrayDesc<N> output_desc;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   1ebcc:	464b      	mov	r3, r9
   1ebce:	4642      	mov	r2, r8
   1ebd0:	a90f      	add	r1, sp, #60	; 0x3c
   1ebd2:	a809      	add	r0, sp, #36	; 0x24
   1ebd4:	f00d fbd3 	bl	2c37e <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
    return RuntimeShape(new_shape_size, shape, 1);
   1ebd8:	2301      	movs	r3, #1
   1ebda:	aa15      	add	r2, sp, #84	; 0x54
   1ebdc:	2105      	movs	r1, #5
   1ebde:	a81b      	add	r0, sp, #108	; 0x6c
   1ebe0:	f008 fd87 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
                                      &desc2);
  CopyDimsToDesc(RuntimeShape::ExtendedShape(N, output_shape), &output_desc);
   1ebe4:	4639      	mov	r1, r7
   1ebe6:	a81b      	add	r0, sp, #108	; 0x6c
   1ebe8:	f00d fbb3 	bl	2c352 <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
   1ebec:	a81b      	add	r0, sp, #108	; 0x6c
   1ebee:	f008 fce0 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  auto sub_func = [&](int indexes[N]) {
   1ebf2:	ab40      	add	r3, sp, #256	; 0x100

// Execute the calc function in the innermost iteration based on the shape of
// the output. The calc function should take a single argument of type int[N].
template <int N, typename Calc>
inline void NDOpsHelper(const NdArrayDesc<N>& output, const Calc& calc) {
  int indexes[N] = {0};
   1ebf4:	2214      	movs	r2, #20
   1ebf6:	2100      	movs	r1, #0
   1ebf8:	a804      	add	r0, sp, #16
   1ebfa:	e9cd 571b 	strd	r5, r7, [sp, #108]	; 0x6c
   1ebfe:	e9cd a81d 	strd	sl, r8, [sp, #116]	; 0x74
   1ec02:	e9cd 691f 	strd	r6, r9, [sp, #124]	; 0x7c
   1ec06:	9321      	str	r3, [sp, #132]	; 0x84
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1ec08:	2400      	movs	r4, #0
  int indexes[N] = {0};
   1ec0a:	f012 f920 	bl	30e4e <memset>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1ec0e:	9a04      	ldr	r2, [sp, #16]
   1ec10:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   1ec12:	429a      	cmp	r2, r3
   1ec14:	da1a      	bge.n	1ec4c <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x120>
   1ec16:	9405      	str	r4, [sp, #20]
   1ec18:	9a05      	ldr	r2, [sp, #20]
   1ec1a:	9b37      	ldr	r3, [sp, #220]	; 0xdc
   1ec1c:	429a      	cmp	r2, r3
   1ec1e:	da11      	bge.n	1ec44 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x118>
   1ec20:	9406      	str	r4, [sp, #24]
   1ec22:	9a06      	ldr	r2, [sp, #24]
   1ec24:	9b38      	ldr	r3, [sp, #224]	; 0xe0
   1ec26:	429a      	cmp	r2, r3
   1ec28:	da08      	bge.n	1ec3c <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x110>
    NDOpsHelperImpl<N, DIM + 1, Calc>(output, calc, indexes);
   1ec2a:	4638      	mov	r0, r7
   1ec2c:	aa04      	add	r2, sp, #16
   1ec2e:	a91b      	add	r1, sp, #108	; 0x6c
   1ec30:	f011 f876 	bl	2fd20 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS8_SA_S8_PfEUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SC_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1ec34:	9b06      	ldr	r3, [sp, #24]
   1ec36:	3301      	adds	r3, #1
   1ec38:	9306      	str	r3, [sp, #24]
   1ec3a:	e7f2      	b.n	1ec22 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0xf6>
   1ec3c:	9b05      	ldr	r3, [sp, #20]
   1ec3e:	3301      	adds	r3, #1
   1ec40:	9305      	str	r3, [sp, #20]
   1ec42:	e7e9      	b.n	1ec18 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0xec>
   1ec44:	9b04      	ldr	r3, [sp, #16]
   1ec46:	3301      	adds	r3, #1
   1ec48:	9304      	str	r3, [sp, #16]
   1ec4a:	e7e0      	b.n	1ec0e <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0xe2>
   1ec4c:	a815      	add	r0, sp, #84	; 0x54
   1ec4e:	f008 fcb0 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   1ec52:	a80f      	add	r0, sp, #60	; 0x3c
   1ec54:	f008 fcad 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   1ec58:	a809      	add	r0, sp, #36	; 0x24
    TF_LITE_SUB(tflite::reference_ops::SubWithActivation);
   1ec5a:	f008 fcaa 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   1ec5e:	b05a      	add	sp, #360	; 0x168
   1ec60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    TF_LITE_SUB(tflite::reference_ops::SubWithActivation);
   1ec64:	4640      	mov	r0, r8
   1ec66:	f008 fce9 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1ec6a:	b106      	cbz	r6, 1ec6e <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x142>
   1ec6c:	6876      	ldr	r6, [r6, #4]
   1ec6e:	4629      	mov	r1, r5
   1ec70:	4648      	mov	r0, r9
   1ec72:	f008 fce3 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1ec76:	b105      	cbz	r5, 1ec7a <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x14e>
   1ec78:	686d      	ldr	r5, [r5, #4]
   1ec7a:	4621      	mov	r1, r4
   1ec7c:	4638      	mov	r0, r7
   1ec7e:	f008 fcdd 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1ec82:	b104      	cbz	r4, 1ec86 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x15a>
   1ec84:	6864      	ldr	r4, [r4, #4]
    const ArithmeticParams& params, const RuntimeShape& input1_shape,
    const T* input1_data, const RuntimeShape& input2_shape,
    const T* input2_data, const RuntimeShape& output_shape, T* output_data) {
  ruy::profiler::ScopeLabel label("SubWithActivation");
  const int flat_size =
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
   1ec86:	463a      	mov	r2, r7
   1ec88:	4649      	mov	r1, r9
   1ec8a:	4640      	mov	r0, r8
   1ec8c:	f008 fd80 	bl	27790 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
  *activation_min = params.float_activation_min;
   1ec90:	eddd 6a4d 	vldr	s13, [sp, #308]	; 0x134
  *activation_max = params.float_activation_max;
   1ec94:	ed9d 7a4e 	vldr	s14, [sp, #312]	; 0x138
  T activation_min, activation_max;
  SetActivationMinMax(params, &activation_min, &activation_max);

  for (int i = 0; i < flat_size; ++i) {
   1ec98:	2300      	movs	r3, #0
   1ec9a:	4298      	cmp	r0, r3
   1ec9c:	dd16      	ble.n	1eccc <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x1a0>
    output_data[i] = ActivationFunctionWithMinMax(
        input1_data[i] - input2_data[i], activation_min, activation_max);
   1ec9e:	ecf6 7a01 	vldmia	r6!, {s15}
   1eca2:	ecb5 6a01 	vldmia	r5!, {s12}
    output_data[i] = ActivationFunctionWithMinMax(
   1eca6:	ee77 7ac6 	vsub.f32	s15, s15, s12
	return __b;
   1ecaa:	eef4 6a67 	vcmp.f32	s13, s15
   1ecae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ecb2:	fe76 7aa7 	vselgt.f32	s15, s13, s15
	return __b;
   1ecb6:	eeb4 7a67 	vcmp.f32	s14, s15
   1ecba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ecbe:	bf48      	it	mi
   1ecc0:	eef0 7a47 	vmovmi.f32	s15, s14
  for (int i = 0; i < flat_size; ++i) {
   1ecc4:	3301      	adds	r3, #1
    output_data[i] = ActivationFunctionWithMinMax(
   1ecc6:	ece4 7a01 	vstmia	r4!, {s15}
  for (int i = 0; i < flat_size; ++i) {
   1ecca:	e7e6      	b.n	1ec9a <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x16e>
   1eccc:	4638      	mov	r0, r7
   1ecce:	f008 fc70 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   1ecd2:	4648      	mov	r0, r9
   1ecd4:	f008 fc6d 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   1ecd8:	4640      	mov	r0, r8
   1ecda:	e7be      	b.n	1ec5a <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x12e>
   1ecdc:	7f7fffff 	.word	0x7f7fffff
   1ece0:	ff7fffff 	.word	0xff7fffff
   1ece4:	00000000 	.word	0x00000000

0001ece8 <_ZN6tflite3ops5micro3sub4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1ece8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ecec:	460e      	mov	r6, r1
  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
   1ecee:	6833      	ldr	r3, [r6, #0]
   1ecf0:	f8d0 8008 	ldr.w	r8, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
   1ecf4:	685a      	ldr	r2, [r3, #4]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1ecf6:	b095      	sub	sp, #84	; 0x54
   1ecf8:	eb08 1982 	add.w	r9, r8, r2, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1ecfc:	6872      	ldr	r2, [r6, #4]
  return &context->tensors[node->inputs->data[index]];
   1ecfe:	689b      	ldr	r3, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
   1ed00:	6857      	ldr	r7, [r2, #4]
  auto* params = reinterpret_cast<TfLiteSubParams*>(node->builtin_data);
   1ed02:	6949      	ldr	r1, [r1, #20]
   1ed04:	ea4f 1b87 	mov.w	fp, r7, lsl #6
  TF_LITE_ENSURE_STATUS(
   1ed08:	f10d 0a1c 	add.w	sl, sp, #28
   1ed0c:	eb08 1787 	add.w	r7, r8, r7, lsl #6
  return &context->tensors[node->inputs->data[index]];
   1ed10:	eb08 1383 	add.w	r3, r8, r3, lsl #6
   1ed14:	464a      	mov	r2, r9
   1ed16:	e9cd 7a00 	strd	r7, sl, [sp]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1ed1a:	4605      	mov	r5, r0
  TF_LITE_ENSURE_STATUS(
   1ed1c:	9305      	str	r3, [sp, #20]
   1ed1e:	9104      	str	r1, [sp, #16]
   1ed20:	f7ff fe7a 	bl	1ea18 <_ZN6tflite3ops5micro3sub15CalculateOpDataEP13TfLiteContextP15TfLiteSubParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE>
   1ed24:	4604      	mov	r4, r0
   1ed26:	b978      	cbnz	r0, 1ed48 <_ZN6tflite3ops5micro3sub4EvalEP13TfLiteContextP10TfLiteNode+0x60>
  if (output->type == kTfLiteFloat32) {
   1ed28:	e9dd 1304 	ldrd	r1, r3, [sp, #16]
   1ed2c:	f818 000b 	ldrb.w	r0, [r8, fp]
   1ed30:	2801      	cmp	r0, #1
   1ed32:	d10d      	bne.n	1ed50 <_ZN6tflite3ops5micro3sub4EvalEP13TfLiteContextP10TfLiteNode+0x68>
    EvalSub(context, node, params, &data, input1, input2, output);
   1ed34:	460a      	mov	r2, r1
   1ed36:	e9cd 3701 	strd	r3, r7, [sp, #4]
   1ed3a:	4631      	mov	r1, r6
   1ed3c:	4653      	mov	r3, sl
   1ed3e:	4628      	mov	r0, r5
   1ed40:	f8cd 9000 	str.w	r9, [sp]
   1ed44:	f7ff fef2 	bl	1eb2c <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>
}
   1ed48:	4620      	mov	r0, r4
   1ed4a:	b015      	add	sp, #84	; 0x54
   1ed4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
   1ed50:	2803      	cmp	r0, #3
   1ed52:	d001      	beq.n	1ed58 <_ZN6tflite3ops5micro3sub4EvalEP13TfLiteContextP10TfLiteNode+0x70>
   1ed54:	2809      	cmp	r0, #9
   1ed56:	d10b      	bne.n	1ed70 <_ZN6tflite3ops5micro3sub4EvalEP13TfLiteContextP10TfLiteNode+0x88>
    TF_LITE_ENSURE_OK(context, EvalSubQuantized(context, node, params, &data,
   1ed58:	460a      	mov	r2, r1
   1ed5a:	e9cd 3701 	strd	r3, r7, [sp, #4]
   1ed5e:	4631      	mov	r1, r6
   1ed60:	4653      	mov	r3, sl
   1ed62:	4628      	mov	r0, r5
   1ed64:	f8cd 9000 	str.w	r9, [sp]
   1ed68:	f010 ffcc 	bl	2fd04 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>
   1ed6c:	4604      	mov	r4, r0
   1ed6e:	e7eb      	b.n	1ed48 <_ZN6tflite3ops5micro3sub4EvalEP13TfLiteContextP10TfLiteNode+0x60>
    TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   1ed70:	696c      	ldr	r4, [r5, #20]
   1ed72:	f7ed ffa7 	bl	ccc4 <TfLiteTypeGetName>
   1ed76:	f818 300b 	ldrb.w	r3, [r8, fp]
   1ed7a:	4602      	mov	r2, r0
   1ed7c:	4902      	ldr	r1, [pc, #8]	; (1ed88 <_ZN6tflite3ops5micro3sub4EvalEP13TfLiteContextP10TfLiteNode+0xa0>)
   1ed7e:	4628      	mov	r0, r5
   1ed80:	47a0      	blx	r4
    return kTfLiteError;
   1ed82:	2401      	movs	r4, #1
   1ed84:	e7e0      	b.n	1ed48 <_ZN6tflite3ops5micro3sub4EvalEP13TfLiteContextP10TfLiteNode+0x60>
   1ed86:	bf00      	nop
   1ed88:	000349d0 	.word	0x000349d0

0001ed8c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode>:
    return nullptr;
  }
  return data;
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1ed8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ed90:	ed2d 8b04 	vpush	{d8-d9}
   1ed94:	468b      	mov	fp, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
   1ed96:	6949      	ldr	r1, [r1, #20]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1ed98:	4604      	mov	r4, r0
   1ed9a:	b08d      	sub	sp, #52	; 0x34
  TFLITE_DCHECK(node->builtin_data != nullptr);
   1ed9c:	b909      	cbnz	r1, 1eda2 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x16>
   1ed9e:	f012 f80c 	bl	30dba <abort>
  // [1] = Weights Feature, {2, num_filters, input_size}
  // [2] = Weights Time, {2, num_filters, memory_size}
  // [3] = Bias (optional), {1, num_units}
  // [4] = Activation State (variable),
  //         {2, batch_size, memory_size * num_filters}
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1eda2:	f8db 7000 	ldr.w	r7, [fp]
   1eda6:	6883      	ldr	r3, [r0, #8]
   1eda8:	68ba      	ldr	r2, [r7, #8]
   1edaa:	0190      	lsls	r0, r2, #6
   1edac:	eb03 1282 	add.w	r2, r3, r2, lsl #6
   1edb0:	9207      	str	r2, [sp, #28]
  const bool use_tensor = index < node->inputs->size &&
   1edb2:	683a      	ldr	r2, [r7, #0]
  return &context->tensors[node->inputs->data[index]];
   1edb4:	900b      	str	r0, [sp, #44]	; 0x2c
  const bool use_tensor = index < node->inputs->size &&
   1edb6:	2a03      	cmp	r2, #3
   1edb8:	9206      	str	r2, [sp, #24]
   1edba:	dd23      	ble.n	1ee04 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x78>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
   1edbc:	693a      	ldr	r2, [r7, #16]
  const bool use_tensor = index < node->inputs->size &&
   1edbe:	1c50      	adds	r0, r2, #1
   1edc0:	d020      	beq.n	1ee04 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x78>
    return &context->tensors[node->inputs->data[index]];
   1edc2:	eb03 1282 	add.w	r2, r3, r2, lsl #6
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
  const TfLiteTensor* activation_state =
      GetInput(context, node, kInputActivationStateTensor);

  // Define input constants based on input tensor definition above:
  const int rank = params->rank;
   1edc6:	6808      	ldr	r0, [r1, #0]
  const int input_size = input->dims->data[1];
  const int batch_size = input->dims->data[0];
  const int num_filters = weights_feature->dims->data[0];
   1edc8:	9907      	ldr	r1, [sp, #28]
   1edca:	6889      	ldr	r1, [r1, #8]
   1edcc:	684d      	ldr	r5, [r1, #4]
   1edce:	9104      	str	r1, [sp, #16]
  TF_LITE_ENSURE_EQ(context, num_filters % rank, 0);
   1edd0:	fb95 f9f0 	sdiv	r9, r5, r0
   1edd4:	fb00 5019 	mls	r0, r0, r9, r5
   1edd8:	b1b0      	cbz	r0, 1ee08 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>
   1edda:	2300      	movs	r3, #0
   1eddc:	e9cd 0302 	strd	r0, r3, [sp, #8]
   1ede0:	4ba3      	ldr	r3, [pc, #652]	; (1f070 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2e4>)
   1ede2:	6965      	ldr	r5, [r4, #20]
   1ede4:	9301      	str	r3, [sp, #4]
   1ede6:	4ba3      	ldr	r3, [pc, #652]	; (1f074 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
   1ede8:	9300      	str	r3, [sp, #0]
   1edea:	f240 1377 	movw	r3, #375	; 0x177
   1edee:	4620      	mov	r0, r4
   1edf0:	4aa1      	ldr	r2, [pc, #644]	; (1f078 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
   1edf2:	49a2      	ldr	r1, [pc, #648]	; (1f07c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2f0>)
   1edf4:	47a8      	blx	r5
   1edf6:	2601      	movs	r6, #1
        &(data->scratch_tensor_index));
    TF_LITE_ENSURE_OK(context, scratch_status);
  }

  return kTfLiteOk;
}
   1edf8:	4630      	mov	r0, r6
   1edfa:	b00d      	add	sp, #52	; 0x34
   1edfc:	ecbd 8b04 	vpop	{d8-d9}
   1ee00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return nullptr;
   1ee04:	2200      	movs	r2, #0
   1ee06:	e7de      	b.n	1edc6 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x3a>
  return &context->tensors[node->inputs->data[index]];
   1ee08:	6878      	ldr	r0, [r7, #4]
   1ee0a:	0186      	lsls	r6, r0, #6
   1ee0c:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   1ee10:	9008      	str	r0, [sp, #32]
  TF_LITE_ENSURE(context,
   1ee12:	5d98      	ldrb	r0, [r3, r6]
   1ee14:	f000 06f7 	and.w	r6, r0, #247	; 0xf7
   1ee18:	2e01      	cmp	r6, #1
   1ee1a:	9005      	str	r0, [sp, #20]
   1ee1c:	d009      	beq.n	1ee32 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xa6>
   1ee1e:	4b98      	ldr	r3, [pc, #608]	; (1f080 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2f4>)
   1ee20:	4620      	mov	r0, r4
   1ee22:	9300      	str	r3, [sp, #0]
   1ee24:	6965      	ldr	r5, [r4, #20]
   1ee26:	f44f 73be 	mov.w	r3, #380	; 0x17c
   1ee2a:	4a93      	ldr	r2, [pc, #588]	; (1f078 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
   1ee2c:	4995      	ldr	r1, [pc, #596]	; (1f084 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2f8>)
   1ee2e:	47a8      	blx	r5
   1ee30:	e7e1      	b.n	1edf6 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x6a>
  const int input_size = input->dims->data[1];
   1ee32:	9808      	ldr	r0, [sp, #32]
   1ee34:	6880      	ldr	r0, [r0, #8]
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   1ee36:	f8d0 8000 	ldr.w	r8, [r0]
  TF_LITE_ENSURE_EQ(context, NumDimensions(input), 2);
   1ee3a:	f1b8 0f02 	cmp.w	r8, #2
   1ee3e:	d00e      	beq.n	1ee5e <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd2>
   1ee40:	2302      	movs	r3, #2
   1ee42:	e9cd 8302 	strd	r8, r3, [sp, #8]
   1ee46:	4b90      	ldr	r3, [pc, #576]	; (1f088 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2fc>)
   1ee48:	6965      	ldr	r5, [r4, #20]
   1ee4a:	9301      	str	r3, [sp, #4]
   1ee4c:	4b8f      	ldr	r3, [pc, #572]	; (1f08c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x300>)
   1ee4e:	9300      	str	r3, [sp, #0]
   1ee50:	f44f 73bf 	mov.w	r3, #382	; 0x17e
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
   1ee54:	4620      	mov	r0, r4
   1ee56:	4a88      	ldr	r2, [pc, #544]	; (1f078 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
   1ee58:	4988      	ldr	r1, [pc, #544]	; (1f07c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2f0>)
   1ee5a:	47a8      	blx	r5
   1ee5c:	e7cc      	b.n	1edf8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x6c>
   1ee5e:	f8db c004 	ldr.w	ip, [fp, #4]
   1ee62:	f8dc e000 	ldr.w	lr, [ip]
   1ee66:	f1be 0f01 	cmp.w	lr, #1
   1ee6a:	d009      	beq.n	1ee80 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xf4>
   1ee6c:	4b88      	ldr	r3, [pc, #544]	; (1f090 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x304>)
   1ee6e:	e9cd e602 	strd	lr, r6, [sp, #8]
   1ee72:	9301      	str	r3, [sp, #4]
   1ee74:	4b87      	ldr	r3, [pc, #540]	; (1f094 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x308>)
   1ee76:	6965      	ldr	r5, [r4, #20]
   1ee78:	9300      	str	r3, [sp, #0]
   1ee7a:	f44f 73c1 	mov.w	r3, #386	; 0x182
   1ee7e:	e7e9      	b.n	1ee54 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
  return &context->tensors[node->outputs->data[index]];
   1ee80:	f8dc c004 	ldr.w	ip, [ip, #4]
   1ee84:	ea4f 118c 	mov.w	r1, ip, lsl #6
   1ee88:	910a      	str	r1, [sp, #40]	; 0x28
   1ee8a:	eb03 118c 	add.w	r1, r3, ip, lsl #6
  TF_LITE_ENSURE_EQ(context, NumDimensions(output), 2);
   1ee8e:	f8d1 e008 	ldr.w	lr, [r1, #8]
   1ee92:	9109      	str	r1, [sp, #36]	; 0x24
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   1ee94:	f8de c000 	ldr.w	ip, [lr]
   1ee98:	f1bc 0f02 	cmp.w	ip, #2
   1ee9c:	d009      	beq.n	1eeb2 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x126>
   1ee9e:	4b7a      	ldr	r3, [pc, #488]	; (1f088 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2fc>)
   1eea0:	e9cd c802 	strd	ip, r8, [sp, #8]
   1eea4:	9301      	str	r3, [sp, #4]
   1eea6:	4b7c      	ldr	r3, [pc, #496]	; (1f098 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x30c>)
   1eea8:	6965      	ldr	r5, [r4, #20]
   1eeaa:	9300      	str	r3, [sp, #0]
   1eeac:	f44f 73c2 	mov.w	r3, #388	; 0x184
   1eeb0:	e7d0      	b.n	1ee54 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
  const int batch_size = input->dims->data[0];
   1eeb2:	f8d0 a004 	ldr.w	sl, [r0, #4]
  TF_LITE_ENSURE_EQ(context, output->dims->data[0], batch_size);
   1eeb6:	f8de 8004 	ldr.w	r8, [lr, #4]
   1eeba:	45d0      	cmp	r8, sl
   1eebc:	d009      	beq.n	1eed2 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x146>
   1eebe:	4b77      	ldr	r3, [pc, #476]	; (1f09c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x310>)
   1eec0:	e9cd 8a02 	strd	r8, sl, [sp, #8]
   1eec4:	9301      	str	r3, [sp, #4]
   1eec6:	4b76      	ldr	r3, [pc, #472]	; (1f0a0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x314>)
   1eec8:	6965      	ldr	r5, [r4, #20]
   1eeca:	9300      	str	r3, [sp, #0]
   1eecc:	f240 1385 	movw	r3, #389	; 0x185
   1eed0:	e7c0      	b.n	1ee54 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
  TF_LITE_ENSURE_EQ(context, output->dims->data[1], num_units);
   1eed2:	f8de e008 	ldr.w	lr, [lr, #8]
   1eed6:	45ce      	cmp	lr, r9
   1eed8:	d009      	beq.n	1eeee <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x162>
   1eeda:	4b72      	ldr	r3, [pc, #456]	; (1f0a4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x318>)
   1eedc:	e9cd e902 	strd	lr, r9, [sp, #8]
   1eee0:	9301      	str	r3, [sp, #4]
   1eee2:	4b71      	ldr	r3, [pc, #452]	; (1f0a8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x31c>)
   1eee4:	6965      	ldr	r5, [r4, #20]
   1eee6:	9300      	str	r3, [sp, #0]
   1eee8:	f44f 73c3 	mov.w	r3, #390	; 0x186
   1eeec:	e7b2      	b.n	1ee54 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
   1eeee:	9904      	ldr	r1, [sp, #16]
   1eef0:	f8d1 e000 	ldr.w	lr, [r1]
  TF_LITE_ENSURE_EQ(context, NumDimensions(weights_feature), 2);
   1eef4:	f1be 0f02 	cmp.w	lr, #2
   1eef8:	d009      	beq.n	1ef0e <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x182>
   1eefa:	4b63      	ldr	r3, [pc, #396]	; (1f088 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2fc>)
   1eefc:	e9cd ec02 	strd	lr, ip, [sp, #8]
   1ef00:	9301      	str	r3, [sp, #4]
   1ef02:	4b6a      	ldr	r3, [pc, #424]	; (1f0ac <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x320>)
   1ef04:	6965      	ldr	r5, [r4, #20]
   1ef06:	9300      	str	r3, [sp, #0]
   1ef08:	f240 1389 	movw	r3, #393	; 0x189
   1ef0c:	e7a2      	b.n	1ee54 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
  TF_LITE_ENSURE_EQ(context, weights_feature->dims->data[1], input_size);
   1ef0e:	9904      	ldr	r1, [sp, #16]
  const int input_size = input->dims->data[1];
   1ef10:	6880      	ldr	r0, [r0, #8]
  TF_LITE_ENSURE_EQ(context, weights_feature->dims->data[1], input_size);
   1ef12:	6889      	ldr	r1, [r1, #8]
   1ef14:	4281      	cmp	r1, r0
   1ef16:	d009      	beq.n	1ef2c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x1a0>
   1ef18:	4b65      	ldr	r3, [pc, #404]	; (1f0b0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x324>)
   1ef1a:	e9cd 1002 	strd	r1, r0, [sp, #8]
   1ef1e:	9301      	str	r3, [sp, #4]
   1ef20:	4b64      	ldr	r3, [pc, #400]	; (1f0b4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x328>)
   1ef22:	6965      	ldr	r5, [r4, #20]
   1ef24:	9300      	str	r3, [sp, #0]
   1ef26:	f44f 73c5 	mov.w	r3, #394	; 0x18a
   1ef2a:	e793      	b.n	1ee54 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
  return &context->tensors[node->inputs->data[index]];
   1ef2c:	68f9      	ldr	r1, [r7, #12]
   1ef2e:	ea4f 1e81 	mov.w	lr, r1, lsl #6
   1ef32:	eb03 1181 	add.w	r1, r3, r1, lsl #6
  const int memory_size = weights_time->dims->data[1];
   1ef36:	6888      	ldr	r0, [r1, #8]
   1ef38:	9104      	str	r1, [sp, #16]
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   1ef3a:	6801      	ldr	r1, [r0, #0]
  TF_LITE_ENSURE_EQ(context, NumDimensions(weights_time), 2);
   1ef3c:	2902      	cmp	r1, #2
   1ef3e:	d00a      	beq.n	1ef56 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x1ca>
   1ef40:	2302      	movs	r3, #2
   1ef42:	e9cd 1302 	strd	r1, r3, [sp, #8]
   1ef46:	4b50      	ldr	r3, [pc, #320]	; (1f088 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2fc>)
   1ef48:	6965      	ldr	r5, [r4, #20]
   1ef4a:	9301      	str	r3, [sp, #4]
   1ef4c:	4b5a      	ldr	r3, [pc, #360]	; (1f0b8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x32c>)
   1ef4e:	9300      	str	r3, [sp, #0]
   1ef50:	f240 138d 	movw	r3, #397	; 0x18d
   1ef54:	e77e      	b.n	1ee54 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
  TF_LITE_ENSURE_EQ(context, weights_time->dims->data[0], num_filters);
   1ef56:	6841      	ldr	r1, [r0, #4]
   1ef58:	42a9      	cmp	r1, r5
   1ef5a:	d009      	beq.n	1ef70 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x1e4>
   1ef5c:	4b57      	ldr	r3, [pc, #348]	; (1f0bc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x330>)
   1ef5e:	e9cd 1502 	strd	r1, r5, [sp, #8]
   1ef62:	9301      	str	r3, [sp, #4]
   1ef64:	4b56      	ldr	r3, [pc, #344]	; (1f0c0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x334>)
   1ef66:	6965      	ldr	r5, [r4, #20]
   1ef68:	9300      	str	r3, [sp, #0]
   1ef6a:	f44f 73c7 	mov.w	r3, #398	; 0x18e
   1ef6e:	e771      	b.n	1ee54 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
  if (bias != nullptr) {
   1ef70:	b16a      	cbz	r2, 1ef8e <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x202>
    TF_LITE_ENSURE_EQ(context, bias->dims->data[0], num_units);
   1ef72:	6891      	ldr	r1, [r2, #8]
   1ef74:	6849      	ldr	r1, [r1, #4]
   1ef76:	4549      	cmp	r1, r9
   1ef78:	d009      	beq.n	1ef8e <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x202>
   1ef7a:	4b4a      	ldr	r3, [pc, #296]	; (1f0a4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x318>)
   1ef7c:	e9cd 1902 	strd	r1, r9, [sp, #8]
   1ef80:	9301      	str	r3, [sp, #4]
   1ef82:	4b50      	ldr	r3, [pc, #320]	; (1f0c4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x338>)
   1ef84:	6965      	ldr	r5, [r4, #20]
   1ef86:	9300      	str	r3, [sp, #0]
   1ef88:	f240 1393 	movw	r3, #403	; 0x193
   1ef8c:	e762      	b.n	1ee54 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
  return &context->tensors[node->inputs->data[index]];
   1ef8e:	6979      	ldr	r1, [r7, #20]
   1ef90:	ea4f 1c81 	mov.w	ip, r1, lsl #6
   1ef94:	eb03 1181 	add.w	r1, r3, r1, lsl #6
  TF_LITE_ENSURE_EQ(context, NumDimensions(activation_state), 2);
   1ef98:	688f      	ldr	r7, [r1, #8]
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   1ef9a:	f8d7 8000 	ldr.w	r8, [r7]
   1ef9e:	f1b8 0f02 	cmp.w	r8, #2
   1efa2:	d00a      	beq.n	1efba <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x22e>
   1efa4:	2302      	movs	r3, #2
   1efa6:	e9cd 8302 	strd	r8, r3, [sp, #8]
   1efaa:	4b37      	ldr	r3, [pc, #220]	; (1f088 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2fc>)
   1efac:	6965      	ldr	r5, [r4, #20]
   1efae:	9301      	str	r3, [sp, #4]
   1efb0:	4b45      	ldr	r3, [pc, #276]	; (1f0c8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x33c>)
   1efb2:	9300      	str	r3, [sp, #0]
   1efb4:	f240 1397 	movw	r3, #407	; 0x197
   1efb8:	e74c      	b.n	1ee54 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
  TF_LITE_ENSURE_EQ(context, activation_state->dims->data[0], batch_size);
   1efba:	f8d7 8004 	ldr.w	r8, [r7, #4]
   1efbe:	45d0      	cmp	r8, sl
   1efc0:	d009      	beq.n	1efd6 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x24a>
   1efc2:	4b36      	ldr	r3, [pc, #216]	; (1f09c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x310>)
   1efc4:	e9cd 8a02 	strd	r8, sl, [sp, #8]
   1efc8:	9301      	str	r3, [sp, #4]
   1efca:	4b40      	ldr	r3, [pc, #256]	; (1f0cc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x340>)
   1efcc:	6965      	ldr	r5, [r4, #20]
   1efce:	9300      	str	r3, [sp, #0]
   1efd0:	f44f 73cc 	mov.w	r3, #408	; 0x198
   1efd4:	e73e      	b.n	1ee54 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
  TF_LITE_ENSURE_EQ(context, activation_state->dims->data[1],
   1efd6:	6880      	ldr	r0, [r0, #8]
   1efd8:	68bf      	ldr	r7, [r7, #8]
   1efda:	4368      	muls	r0, r5
   1efdc:	4287      	cmp	r7, r0
   1efde:	d009      	beq.n	1eff4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x268>
   1efe0:	4b3b      	ldr	r3, [pc, #236]	; (1f0d0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x344>)
   1efe2:	e9cd 7002 	strd	r7, r0, [sp, #8]
   1efe6:	9301      	str	r3, [sp, #4]
   1efe8:	4b3a      	ldr	r3, [pc, #232]	; (1f0d4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x348>)
   1efea:	6965      	ldr	r5, [r4, #20]
   1efec:	9300      	str	r3, [sp, #0]
   1efee:	f240 1399 	movw	r3, #409	; 0x199
   1eff2:	e72f      	b.n	1ee54 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
  TF_LITE_ENSURE_EQ(context, node->inputs->size, 5);
   1eff4:	9806      	ldr	r0, [sp, #24]
   1eff6:	2805      	cmp	r0, #5
   1eff8:	d00a      	beq.n	1f010 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x284>
   1effa:	2305      	movs	r3, #5
   1effc:	9303      	str	r3, [sp, #12]
   1effe:	4b36      	ldr	r3, [pc, #216]	; (1f0d8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x34c>)
   1f000:	6965      	ldr	r5, [r4, #20]
   1f002:	9301      	str	r3, [sp, #4]
   1f004:	4b35      	ldr	r3, [pc, #212]	; (1f0dc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x350>)
   1f006:	9002      	str	r0, [sp, #8]
   1f008:	9300      	str	r3, [sp, #0]
   1f00a:	f44f 73ce 	mov.w	r3, #412	; 0x19c
   1f00e:	e721      	b.n	1ee54 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
  if (input->type == kTfLiteInt8) {
   1f010:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1f012:	5c1f      	ldrb	r7, [r3, r0]
   1f014:	9805      	ldr	r0, [sp, #20]
   1f016:	2809      	cmp	r0, #9
   1f018:	f040 80f0 	bne.w	1f1fc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x470>
    TF_LITE_ENSURE_EQ(context, weights_feature->type, kTfLiteInt8);
   1f01c:	2f09      	cmp	r7, #9
   1f01e:	d009      	beq.n	1f034 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2a8>
   1f020:	4b2f      	ldr	r3, [pc, #188]	; (1f0e0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x354>)
   1f022:	e9cd 7002 	strd	r7, r0, [sp, #8]
   1f026:	9301      	str	r3, [sp, #4]
   1f028:	4b2e      	ldr	r3, [pc, #184]	; (1f0e4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x358>)
   1f02a:	6965      	ldr	r5, [r4, #20]
   1f02c:	9300      	str	r3, [sp, #0]
   1f02e:	f240 139f 	movw	r3, #415	; 0x19f
   1f032:	e70f      	b.n	1ee54 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
    TF_LITE_ENSURE_EQ(context, weights_time->type, kTfLiteInt16);
   1f034:	f813 000e 	ldrb.w	r0, [r3, lr]
   1f038:	2807      	cmp	r0, #7
   1f03a:	d00a      	beq.n	1f052 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2c6>
   1f03c:	2307      	movs	r3, #7
   1f03e:	e9cd 0302 	strd	r0, r3, [sp, #8]
   1f042:	4b29      	ldr	r3, [pc, #164]	; (1f0e8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x35c>)
   1f044:	6965      	ldr	r5, [r4, #20]
   1f046:	9301      	str	r3, [sp, #4]
   1f048:	4b28      	ldr	r3, [pc, #160]	; (1f0ec <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x360>)
   1f04a:	9300      	str	r3, [sp, #0]
   1f04c:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
   1f050:	e700      	b.n	1ee54 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
    TF_LITE_ENSURE_EQ(context, activation_state->type, kTfLiteInt16);
   1f052:	f813 700c 	ldrb.w	r7, [r3, ip]
   1f056:	2f07      	cmp	r7, #7
   1f058:	d04c      	beq.n	1f0f4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x368>
   1f05a:	4b23      	ldr	r3, [pc, #140]	; (1f0e8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x35c>)
   1f05c:	e9cd 7002 	strd	r7, r0, [sp, #8]
   1f060:	9301      	str	r3, [sp, #4]
   1f062:	4b23      	ldr	r3, [pc, #140]	; (1f0f0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x364>)
   1f064:	6965      	ldr	r5, [r4, #20]
   1f066:	9300      	str	r3, [sp, #0]
   1f068:	f240 13a1 	movw	r3, #417	; 0x1a1
   1f06c:	e6f2      	b.n	1ee54 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
   1f06e:	bf00      	nop
   1f070:	000351b3 	.word	0x000351b3
   1f074:	00035e56 	.word	0x00035e56
   1f078:	00035e30 	.word	0x00035e30
   1f07c:	00034a7c 	.word	0x00034a7c
   1f080:	00035e69 	.word	0x00035e69
   1f084:	00034b9c 	.word	0x00034b9c
   1f088:	000353ec 	.word	0x000353ec
   1f08c:	00035ce8 	.word	0x00035ce8
   1f090:	00035814 	.word	0x00035814
   1f094:	00034d52 	.word	0x00034d52
   1f098:	00035ea5 	.word	0x00035ea5
   1f09c:	00035ebb 	.word	0x00035ebb
   1f0a0:	00035ec6 	.word	0x00035ec6
   1f0a4:	00035edc 	.word	0x00035edc
   1f0a8:	00035ee6 	.word	0x00035ee6
   1f0ac:	00035efc 	.word	0x00035efc
   1f0b0:	00035f1b 	.word	0x00035f1b
   1f0b4:	00035f26 	.word	0x00035f26
   1f0b8:	00035f45 	.word	0x00035f45
   1f0bc:	00035fdf 	.word	0x00035fdf
   1f0c0:	00035f61 	.word	0x00035f61
   1f0c4:	00035f7d 	.word	0x00035f7d
   1f0c8:	00035f91 	.word	0x00035f91
   1f0cc:	00035fb1 	.word	0x00035fb1
   1f0d0:	00035fd1 	.word	0x00035fd1
   1f0d4:	00035feb 	.word	0x00035feb
   1f0d8:	00034881 	.word	0x00034881
   1f0dc:	000358d5 	.word	0x000358d5
   1f0e0:	00035e99 	.word	0x00035e99
   1f0e4:	0003600b 	.word	0x0003600b
   1f0e8:	00034fd3 	.word	0x00034fd3
   1f0ec:	00036021 	.word	0x00036021
   1f0f0:	00036034 	.word	0x00036034
    if (bias != nullptr) {
   1f0f4:	b16a      	cbz	r2, 1f112 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x386>
      TF_LITE_ENSURE_EQ(context, bias->type, kTfLiteInt32);
   1f0f6:	7812      	ldrb	r2, [r2, #0]
   1f0f8:	2a02      	cmp	r2, #2
   1f0fa:	d00a      	beq.n	1f112 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x386>
   1f0fc:	2302      	movs	r3, #2
   1f0fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1f102:	4b6b      	ldr	r3, [pc, #428]	; (1f2b0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x524>)
   1f104:	6965      	ldr	r5, [r4, #20]
   1f106:	9301      	str	r3, [sp, #4]
   1f108:	4b6a      	ldr	r3, [pc, #424]	; (1f2b4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x528>)
   1f10a:	9300      	str	r3, [sp, #0]
   1f10c:	f240 13a3 	movw	r3, #419	; 0x1a3
   1f110:	e6a0      	b.n	1ee54 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
   1f112:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f114:	5c98      	ldrb	r0, [r3, r2]
   1f116:	2809      	cmp	r0, #9
   1f118:	d013      	beq.n	1f142 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x3b6>
   1f11a:	6967      	ldr	r7, [r4, #20]
   1f11c:	f7ed fdd2 	bl	ccc4 <TfLiteTypeGetName>
   1f120:	4605      	mov	r5, r0
   1f122:	2009      	movs	r0, #9
   1f124:	f7ed fdce 	bl	ccc4 <TfLiteTypeGetName>
   1f128:	4b63      	ldr	r3, [pc, #396]	; (1f2b8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x52c>)
   1f12a:	e9cd 5002 	strd	r5, r0, [sp, #8]
   1f12e:	9301      	str	r3, [sp, #4]
   1f130:	4b62      	ldr	r3, [pc, #392]	; (1f2bc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x530>)
   1f132:	9300      	str	r3, [sp, #0]
   1f134:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
   1f138:	4620      	mov	r0, r4
   1f13a:	4a61      	ldr	r2, [pc, #388]	; (1f2c0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x534>)
   1f13c:	4961      	ldr	r1, [pc, #388]	; (1f2c4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x538>)
   1f13e:	47b8      	blx	r7
   1f140:	e65a      	b.n	1edf8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x6c>
        state_params->scale->data[0]);
   1f142:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   1f144:	681b      	ldr	r3, [r3, #0]
   1f146:	ed93 8a01 	vldr	s16, [r3, #4]
        input_params->scale->data[0] * weights_feature_params->scale->data[0] /
   1f14a:	9b08      	ldr	r3, [sp, #32]
   1f14c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1f14e:	681a      	ldr	r2, [r3, #0]
   1f150:	9b07      	ldr	r3, [sp, #28]
   1f152:	edd2 7a01 	vldr	s15, [r2, #4]
   1f156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1f158:	681b      	ldr	r3, [r3, #0]
   1f15a:	ed93 7a01 	vldr	s14, [r3, #4]
   1f15e:	ee67 7a87 	vmul.f32	s15, s15, s14
    const double effective_scale_1 = static_cast<double>(
   1f162:	eec7 7a88 	vdiv.f32	s15, s15, s16
   1f166:	ee17 0a90 	vmov	r0, s15
   1f16a:	f7ed f9cd 	bl	c508 <__aeabi_f2d>
        state_params->scale->data[0] * weight_time_params->scale->data[0] /
   1f16e:	9b04      	ldr	r3, [sp, #16]
    const double effective_scale_1 = static_cast<double>(
   1f170:	ec41 0b19 	vmov	d9, r0, r1
        state_params->scale->data[0] * weight_time_params->scale->data[0] /
   1f174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1f176:	681b      	ldr	r3, [r3, #0]
   1f178:	edd3 7a01 	vldr	s15, [r3, #4]
        output_params->scale->data[0]);
   1f17c:	9b09      	ldr	r3, [sp, #36]	; 0x24
        state_params->scale->data[0] * weight_time_params->scale->data[0] /
   1f17e:	ee28 8a27 	vmul.f32	s16, s16, s15
        output_params->scale->data[0]);
   1f182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1f184:	681b      	ldr	r3, [r3, #0]
        state_params->scale->data[0] * weight_time_params->scale->data[0] /
   1f186:	edd3 7a01 	vldr	s15, [r3, #4]
    const double effective_scale_2 = static_cast<double>(
   1f18a:	eec8 7a27 	vdiv.f32	s15, s16, s15
   1f18e:	ee17 0a90 	vmov	r0, s15
   1f192:	f7ed f9b9 	bl	c508 <__aeabi_f2d>
    TFLITE_DCHECK(node->user_data != nullptr);
   1f196:	f8db b010 	ldr.w	fp, [fp, #16]
    const double effective_scale_2 = static_cast<double>(
   1f19a:	4606      	mov	r6, r0
   1f19c:	460f      	mov	r7, r1
    TFLITE_DCHECK(node->user_data != nullptr);
   1f19e:	f1bb 0f00 	cmp.w	fp, #0
   1f1a2:	f43f adfc 	beq.w	1ed9e <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x12>
    QuantizeMultiplier(effective_scale_1, &(data->effective_scale_1_a),
   1f1a6:	ec51 0b19 	vmov	r0, r1, d9
   1f1aa:	465a      	mov	r2, fp
   1f1ac:	f10b 0308 	add.w	r3, fp, #8
   1f1b0:	f001 feb0 	bl	20f14 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    QuantizeMultiplier(effective_scale_2, &(data->effective_scale_2_a),
   1f1b4:	f10b 030c 	add.w	r3, fp, #12
   1f1b8:	4630      	mov	r0, r6
   1f1ba:	4639      	mov	r1, r7
   1f1bc:	f10b 0204 	add.w	r2, fp, #4
   1f1c0:	f001 fea8 	bl	20f14 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    TFLITE_DCHECK(context->RequestScratchBufferInArena != nullptr);
   1f1c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1f1c6:	2b00      	cmp	r3, #0
   1f1c8:	f43f ade9 	beq.w	1ed9e <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x12>
        context, batch_size * num_filters * sizeof(int32_t),
   1f1cc:	fb05 f10a 	mul.w	r1, r5, sl
    const TfLiteStatus scratch_status = context->RequestScratchBufferInArena(
   1f1d0:	4620      	mov	r0, r4
   1f1d2:	f10b 0210 	add.w	r2, fp, #16
   1f1d6:	0089      	lsls	r1, r1, #2
   1f1d8:	4798      	blx	r3
    TF_LITE_ENSURE_OK(context, scratch_status);
   1f1da:	4606      	mov	r6, r0
   1f1dc:	2800      	cmp	r0, #0
   1f1de:	f47f ae0b 	bne.w	1edf8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x6c>
            context, batch_size * num_units * sizeof(int32_t),
   1f1e2:	fb09 f10a 	mul.w	r1, r9, sl
        context->RequestScratchBufferInArena(
   1f1e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1f1e8:	f10b 0214 	add.w	r2, fp, #20
    const TfLiteStatus scratch_status = context->RequestScratchBufferInArena(
   1f1ec:	4620      	mov	r0, r4
   1f1ee:	0089      	lsls	r1, r1, #2
}
   1f1f0:	b00d      	add	sp, #52	; 0x34
   1f1f2:	ecbd 8b04 	vpop	{d8-d9}
   1f1f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const TfLiteStatus scratch_status = context->RequestScratchBufferInArena(
   1f1fa:	4718      	bx	r3
    TF_LITE_ENSURE_EQ(context, weights_feature->type, kTfLiteFloat32);
   1f1fc:	2f01      	cmp	r7, #1
   1f1fe:	d00a      	beq.n	1f216 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x48a>
   1f200:	2301      	movs	r3, #1
   1f202:	e9cd 7302 	strd	r7, r3, [sp, #8]
   1f206:	4b30      	ldr	r3, [pc, #192]	; (1f2c8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x53c>)
   1f208:	6965      	ldr	r5, [r4, #20]
   1f20a:	9301      	str	r3, [sp, #4]
   1f20c:	4b2f      	ldr	r3, [pc, #188]	; (1f2cc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x540>)
   1f20e:	9300      	str	r3, [sp, #0]
   1f210:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
   1f214:	e61e      	b.n	1ee54 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
    TF_LITE_ENSURE_EQ(context, weights_time->type, kTfLiteFloat32);
   1f216:	f813 800e 	ldrb.w	r8, [r3, lr]
   1f21a:	f1b8 0f01 	cmp.w	r8, #1
   1f21e:	d009      	beq.n	1f234 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x4a8>
   1f220:	4b29      	ldr	r3, [pc, #164]	; (1f2c8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x53c>)
   1f222:	e9cd 8702 	strd	r8, r7, [sp, #8]
   1f226:	9301      	str	r3, [sp, #4]
   1f228:	4b29      	ldr	r3, [pc, #164]	; (1f2d0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x544>)
   1f22a:	6965      	ldr	r5, [r4, #20]
   1f22c:	9300      	str	r3, [sp, #0]
   1f22e:	f240 13d1 	movw	r3, #465	; 0x1d1
   1f232:	e5dc      	b.n	1edee <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x62>
    TF_LITE_ENSURE_EQ(context, activation_state->type, kTfLiteFloat32);
   1f234:	f813 600c 	ldrb.w	r6, [r3, ip]
   1f238:	2e01      	cmp	r6, #1
   1f23a:	d009      	beq.n	1f250 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x4c4>
   1f23c:	4b22      	ldr	r3, [pc, #136]	; (1f2c8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x53c>)
   1f23e:	e9cd 6802 	strd	r6, r8, [sp, #8]
   1f242:	9301      	str	r3, [sp, #4]
   1f244:	4b23      	ldr	r3, [pc, #140]	; (1f2d4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x548>)
   1f246:	6965      	ldr	r5, [r4, #20]
   1f248:	9300      	str	r3, [sp, #0]
   1f24a:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
   1f24e:	e5ce      	b.n	1edee <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x62>
    if (bias != nullptr) {
   1f250:	b16a      	cbz	r2, 1f26e <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x4e2>
      TF_LITE_ENSURE_EQ(context, bias->type, kTfLiteFloat32);
   1f252:	7812      	ldrb	r2, [r2, #0]
   1f254:	2a01      	cmp	r2, #1
   1f256:	d00a      	beq.n	1f26e <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x4e2>
   1f258:	2301      	movs	r3, #1
   1f25a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1f25e:	4b1a      	ldr	r3, [pc, #104]	; (1f2c8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x53c>)
   1f260:	6965      	ldr	r5, [r4, #20]
   1f262:	9301      	str	r3, [sp, #4]
   1f264:	4b13      	ldr	r3, [pc, #76]	; (1f2b4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x528>)
   1f266:	9300      	str	r3, [sp, #0]
   1f268:	f44f 73ea 	mov.w	r3, #468	; 0x1d4
   1f26c:	e5f2      	b.n	1ee54 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
   1f26e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f270:	5c98      	ldrb	r0, [r3, r2]
   1f272:	2801      	cmp	r0, #1
   1f274:	d00f      	beq.n	1f296 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x50a>
   1f276:	6967      	ldr	r7, [r4, #20]
   1f278:	f7ed fd24 	bl	ccc4 <TfLiteTypeGetName>
   1f27c:	4605      	mov	r5, r0
   1f27e:	2001      	movs	r0, #1
   1f280:	f7ed fd20 	bl	ccc4 <TfLiteTypeGetName>
   1f284:	4b10      	ldr	r3, [pc, #64]	; (1f2c8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x53c>)
   1f286:	e9cd 5002 	strd	r5, r0, [sp, #8]
   1f28a:	9301      	str	r3, [sp, #4]
   1f28c:	4b0b      	ldr	r3, [pc, #44]	; (1f2bc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x530>)
   1f28e:	9300      	str	r3, [sp, #0]
   1f290:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
   1f294:	e750      	b.n	1f138 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x3ac>
    TFLITE_DCHECK(node->user_data != nullptr);
   1f296:	f8db 2010 	ldr.w	r2, [fp, #16]
   1f29a:	2a00      	cmp	r2, #0
   1f29c:	f43f ad7f 	beq.w	1ed9e <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x12>
    TFLITE_DCHECK(context->RequestScratchBufferInArena != nullptr);
   1f2a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1f2a2:	2b00      	cmp	r3, #0
   1f2a4:	f43f ad7b 	beq.w	1ed9e <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x12>
        context, batch_size * num_filters * sizeof(float),
   1f2a8:	fb05 f10a 	mul.w	r1, r5, sl
    const TfLiteStatus scratch_status = context->RequestScratchBufferInArena(
   1f2ac:	3210      	adds	r2, #16
   1f2ae:	e79d      	b.n	1f1ec <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x460>
   1f2b0:	00035012 	.word	0x00035012
   1f2b4:	0003604b 	.word	0x0003604b
   1f2b8:	00035e99 	.word	0x00035e99
   1f2bc:	00035387 	.word	0x00035387
   1f2c0:	00035e30 	.word	0x00035e30
   1f2c4:	00034ab7 	.word	0x00034ab7
   1f2c8:	00034ad1 	.word	0x00034ad1
   1f2cc:	0003600b 	.word	0x0003600b
   1f2d0:	00036021 	.word	0x00036021
   1f2d4:	00036034 	.word	0x00036034

0001f2d8 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1f2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f2dc:	ed2d 8b04 	vpush	{d8-d9}
  auto* params = reinterpret_cast<TfLiteSVDFParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1f2e0:	680c      	ldr	r4, [r1, #0]
   1f2e2:	6883      	ldr	r3, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
   1f2e4:	6862      	ldr	r2, [r4, #4]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1f2e6:	4607      	mov	r7, r0
   1f2e8:	eb03 1882 	add.w	r8, r3, r2, lsl #6
   1f2ec:	68a2      	ldr	r2, [r4, #8]
   1f2ee:	b097      	sub	sp, #92	; 0x5c
   1f2f0:	0190      	lsls	r0, r2, #6
   1f2f2:	eb03 1982 	add.w	r9, r3, r2, lsl #6
   1f2f6:	68e2      	ldr	r2, [r4, #12]
  auto* params = reinterpret_cast<TfLiteSVDFParams*>(node->builtin_data);
   1f2f8:	694e      	ldr	r6, [r1, #20]
   1f2fa:	eb03 1282 	add.w	r2, r3, r2, lsl #6
   1f2fe:	9208      	str	r2, [sp, #32]
  const bool use_tensor = index < node->inputs->size &&
   1f300:	6822      	ldr	r2, [r4, #0]
   1f302:	2a03      	cmp	r2, #3
   1f304:	dd15      	ble.n	1f332 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x5a>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
   1f306:	6922      	ldr	r2, [r4, #16]
  const bool use_tensor = index < node->inputs->size &&
   1f308:	1c55      	adds	r5, r2, #1
   1f30a:	d012      	beq.n	1f332 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x5a>
    return &context->tensors[node->inputs->data[index]];
   1f30c:	eb03 1b82 	add.w	fp, r3, r2, lsl #6
  TfLiteTensor* tensor = &context->tensors[node->inputs->data[index]];
   1f310:	6964      	ldr	r4, [r4, #20]
   1f312:	eb03 1484 	add.w	r4, r3, r4, lsl #6
  return (tensor->is_variable) ? tensor : nullptr;
   1f316:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   1f31a:	2a00      	cmp	r2, #0
  return &context->tensors[node->outputs->data[index]];
   1f31c:	684a      	ldr	r2, [r1, #4]
  return (tensor->is_variable) ? tensor : nullptr;
   1f31e:	bf08      	it	eq
   1f320:	2400      	moveq	r4, #0
  return &context->tensors[node->outputs->data[index]];
   1f322:	6852      	ldr	r2, [r2, #4]
   1f324:	eb03 1a82 	add.w	sl, r3, r2, lsl #6
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
  TfLiteTensor* activation_state =
      GetVariableInput(context, node, kInputActivationStateTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  TFLITE_DCHECK(node->user_data != nullptr);
   1f328:	690a      	ldr	r2, [r1, #16]
   1f32a:	9204      	str	r2, [sp, #16]
   1f32c:	b922      	cbnz	r2, 1f338 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x60>
   1f32e:	f011 fd44 	bl	30dba <abort>
  return nullptr;
   1f332:	f04f 0b00 	mov.w	fp, #0
   1f336:	e7eb      	b.n	1f310 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x38>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  switch (weights_feature->type) {
   1f338:	5c18      	ldrb	r0, [r3, r0]
   1f33a:	2801      	cmp	r0, #1
   1f33c:	d00a      	beq.n	1f354 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x7c>
   1f33e:	2809      	cmp	r0, #9
   1f340:	f000 8186 	beq.w	1f650 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x378>
      return kTfLiteOk;
      break;
    }

    default:
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
   1f344:	697c      	ldr	r4, [r7, #20]
   1f346:	f7ed fcbd 	bl	ccc4 <TfLiteTypeGetName>
   1f34a:	49b7      	ldr	r1, [pc, #732]	; (1f628 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x350>)
   1f34c:	4602      	mov	r2, r0
   1f34e:	4638      	mov	r0, r7
   1f350:	47a0      	blx	r4
   1f352:	e18e      	b.n	1f672 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x39a>
                    params, data.scratch_tensor_index, activation_state,
   1f354:	9b04      	ldr	r3, [sp, #16]
   1f356:	6919      	ldr	r1, [r3, #16]
  const int rank = params->rank;
   1f358:	6833      	ldr	r3, [r6, #0]
   1f35a:	9309      	str	r3, [sp, #36]	; 0x24
  const int batch_size = input->dims->data[0];
   1f35c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1f360:	685a      	ldr	r2, [r3, #4]
  const int input_size = input->dims->data[1];
   1f362:	689b      	ldr	r3, [r3, #8]
  const int batch_size = input->dims->data[0];
   1f364:	9204      	str	r2, [sp, #16]
  const int input_size = input->dims->data[1];
   1f366:	930a      	str	r3, [sp, #40]	; 0x28
  const int num_filters = weights_feature->dims->data[0];
   1f368:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1f36c:	685b      	ldr	r3, [r3, #4]
   1f36e:	9305      	str	r3, [sp, #20]
  const int num_units = num_filters / rank;
   1f370:	9a05      	ldr	r2, [sp, #20]
   1f372:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f374:	fb92 f3f3 	sdiv	r3, r2, r3
   1f378:	9306      	str	r3, [sp, #24]
  const int memory_size = weights_time->dims->data[1];
   1f37a:	9b08      	ldr	r3, [sp, #32]
   1f37c:	689b      	ldr	r3, [r3, #8]
   1f37e:	689b      	ldr	r3, [r3, #8]
   1f380:	9307      	str	r3, [sp, #28]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1f382:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1f386:	930b      	str	r3, [sp, #44]	; 0x2c
   1f388:	9b08      	ldr	r3, [sp, #32]
   1f38a:	685b      	ldr	r3, [r3, #4]
   1f38c:	930c      	str	r3, [sp, #48]	; 0x30
   1f38e:	f1bb 0f00 	cmp.w	fp, #0
   1f392:	d001      	beq.n	1f398 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0xc0>
   1f394:	f8db b004 	ldr.w	fp, [fp, #4]
   1f398:	f8d8 8004 	ldr.w	r8, [r8, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1f39c:	b104      	cbz	r4, 1f3a0 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0xc8>
   1f39e:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK(context->GetScratchBuffer != nullptr);
   1f3a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1f3a2:	2b00      	cmp	r3, #0
   1f3a4:	d0c3      	beq.n	1f32e <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x56>
      context->GetScratchBuffer(context, scratch_tensor_index));
   1f3a6:	4638      	mov	r0, r7
   1f3a8:	4798      	blx	r3
   1f3aa:	900d      	str	r0, [sp, #52]	; 0x34
   1f3ac:	f1ba 0f00 	cmp.w	sl, #0
   1f3b0:	d001      	beq.n	1f3b6 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0xde>
   1f3b2:	f8da a004 	ldr.w	sl, [sl, #4]
        state_ptr + batch_size * num_filters * memory_size;
   1f3b6:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
   1f3ba:	434b      	muls	r3, r1
   1f3bc:	9907      	ldr	r1, [sp, #28]
    const float* old_state_start = state_ptr + 1;
   1f3be:	1d22      	adds	r2, r4, #4
        state_ptr + batch_size * num_filters * memory_size;
   1f3c0:	434b      	muls	r3, r1
    const float* old_state_end =
   1f3c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    while (old_state_start != old_state_end) {
   1f3c6:	4293      	cmp	r3, r2
   1f3c8:	d004      	beq.n	1f3d4 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0xfc>
      *new_state_start++ = *old_state_start++;
   1f3ca:	f852 1b04 	ldr.w	r1, [r2], #4
   1f3ce:	f842 1c08 	str.w	r1, [r2, #-8]
    while (old_state_start != old_state_end) {
   1f3d2:	e7f8      	b.n	1f3c6 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0xee>
    float* result = &state_ptr[memory_size - 1];
   1f3d4:	980a      	ldr	r0, [sp, #40]	; 0x28
   1f3d6:	9b07      	ldr	r3, [sp, #28]
   1f3d8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1f3dc:	0080      	lsls	r0, r0, #2
   1f3de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f3e2:	3b01      	subs	r3, #1
   1f3e4:	900f      	str	r0, [sp, #60]	; 0x3c
   1f3e6:	9805      	ldr	r0, [sp, #20]
   1f3e8:	0099      	lsls	r1, r3, #2
        result_in_batch += memory_size;
   1f3ea:	3104      	adds	r1, #4
   1f3ec:	ea20 77e0 	bic.w	r7, r0, r0, asr #31
   1f3f0:	fb01 f007 	mul.w	r0, r1, r7
   1f3f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f3f6:	900e      	str	r0, [sp, #56]	; 0x38
   1f3f8:	0092      	lsls	r2, r2, #2
   1f3fa:	9210      	str	r2, [sp, #64]	; 0x40
    for (int i = 0; i < batch_size; ++i) {
   1f3fc:	2000      	movs	r0, #0
   1f3fe:	4642      	mov	r2, r8
    float* result = &state_ptr[memory_size - 1];
   1f400:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    for (int i = 0; i < batch_size; ++i) {
   1f404:	9f04      	ldr	r7, [sp, #16]
   1f406:	4287      	cmp	r7, r0
   1f408:	dd2a      	ble.n	1f460 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x188>
        const float* vector_in_batch = vector + i * input_size;
   1f40a:	469e      	mov	lr, r3
      for (int j = 0; j < num_filters; ++j) {
   1f40c:	f04f 0c00 	mov.w	ip, #0
      const float* matrix_ptr = matrix;
   1f410:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
      for (int j = 0; j < num_filters; ++j) {
   1f414:	9d05      	ldr	r5, [sp, #20]
   1f416:	4565      	cmp	r5, ip
   1f418:	dd1c      	ble.n	1f454 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x17c>
        const float* vector_in_batch = vector + i * input_size;
   1f41a:	4617      	mov	r7, r2
        for (int k = 0; k < input_size; ++k) {
   1f41c:	f04f 0900 	mov.w	r9, #0
        float dot_prod = 0.0f;
   1f420:	eddf 7a82 	vldr	s15, [pc, #520]	; 1f62c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x354>
   1f424:	f8cd 8020 	str.w	r8, [sp, #32]
        for (int k = 0; k < input_size; ++k) {
   1f428:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1f42a:	454d      	cmp	r5, r9
   1f42c:	dd0a      	ble.n	1f444 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x16c>
          dot_prod += *matrix_ptr++ * *vector_in_batch++;
   1f42e:	9d08      	ldr	r5, [sp, #32]
   1f430:	ecb7 7a01 	vldmia	r7!, {s14}
   1f434:	ecf5 6a01 	vldmia	r5!, {s13}
        for (int k = 0; k < input_size; ++k) {
   1f438:	f109 0901 	add.w	r9, r9, #1
          dot_prod += *matrix_ptr++ * *vector_in_batch++;
   1f43c:	eee6 7a87 	vfma.f32	s15, s13, s14
   1f440:	9508      	str	r5, [sp, #32]
        for (int k = 0; k < input_size; ++k) {
   1f442:	e7f1      	b.n	1f428 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x150>
   1f444:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
        *result_in_batch = dot_prod;
   1f446:	edce 7a00 	vstr	s15, [lr]
   1f44a:	44a8      	add	r8, r5
        result_in_batch += memory_size;
   1f44c:	448e      	add	lr, r1
      for (int j = 0; j < num_filters; ++j) {
   1f44e:	f10c 0c01 	add.w	ip, ip, #1
   1f452:	e7df      	b.n	1f414 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x13c>
   1f454:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    for (int i = 0; i < batch_size; ++i) {
   1f456:	3001      	adds	r0, #1
   1f458:	442b      	add	r3, r5
   1f45a:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1f45c:	442a      	add	r2, r5
   1f45e:	e7d1      	b.n	1f404 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x12c>
  ApplyTimeWeightsBiasAndActivation(
   1f460:	980d      	ldr	r0, [sp, #52]	; 0x34
      bias_ptr, params->activation, state_ptr, scratch_ptr, output_ptr);
   1f462:	7933      	ldrb	r3, [r6, #4]
   1f464:	4601      	mov	r1, r0
  for (int b = 0; b < batch_size; ++b) {
   1f466:	2600      	movs	r6, #0
      *scratch_ptr_batch = 0.f;
   1f468:	ed9f 7a70 	vldr	s14, [pc, #448]	; 1f62c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x354>
      bias_ptr, params->activation, state_ptr, scratch_ptr, output_ptr);
   1f46c:	930b      	str	r3, [sp, #44]	; 0x2c
  for (int b = 0; b < batch_size; ++b) {
   1f46e:	9b05      	ldr	r3, [sp, #20]
   1f470:	9a05      	ldr	r2, [sp, #20]
   1f472:	009b      	lsls	r3, r3, #2
   1f474:	930a      	str	r3, [sp, #40]	; 0x28
   1f476:	9b07      	ldr	r3, [sp, #28]
   1f478:	4353      	muls	r3, r2
   1f47a:	009b      	lsls	r3, r3, #2
   1f47c:	930d      	str	r3, [sp, #52]	; 0x34
   1f47e:	9b07      	ldr	r3, [sp, #28]
   1f480:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1f484:	009b      	lsls	r3, r3, #2
   1f486:	9a04      	ldr	r2, [sp, #16]
   1f488:	42b2      	cmp	r2, r6
   1f48a:	dd2a      	ble.n	1f4e2 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x20a>
    const float* vector2_ptr = state_ptr + b * memory_size * num_filters;
   1f48c:	46a4      	mov	ip, r4
   1f48e:	460a      	mov	r2, r1
    for (int i = 0; i < num_filters; ++i) {
   1f490:	2700      	movs	r7, #0
    const float* vector1_ptr = weights_time_ptr;
   1f492:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
    for (int i = 0; i < num_filters; ++i) {
   1f496:	9d05      	ldr	r5, [sp, #20]
   1f498:	42bd      	cmp	r5, r7
   1f49a:	dd1c      	ble.n	1f4d6 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x1fe>
      *scratch_ptr_batch = 0.f;
   1f49c:	eca2 7a01 	vstmia	r2!, {s14}
   1f4a0:	46e1      	mov	r9, ip
      for (int j = 0; j < memory_size; ++j) {
   1f4a2:	f04f 0800 	mov.w	r8, #0
      *scratch_ptr_batch = 0.f;
   1f4a6:	f8cd e020 	str.w	lr, [sp, #32]
      for (int j = 0; j < memory_size; ++j) {
   1f4aa:	9d07      	ldr	r5, [sp, #28]
   1f4ac:	4545      	cmp	r5, r8
   1f4ae:	dd0e      	ble.n	1f4ce <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x1f6>
        *scratch_ptr_batch += *vector1_ptr++ * *vector2_ptr++;
   1f4b0:	9d08      	ldr	r5, [sp, #32]
   1f4b2:	ecf9 6a01 	vldmia	r9!, {s13}
   1f4b6:	ecb5 6a01 	vldmia	r5!, {s12}
   1f4ba:	ed52 7a01 	vldr	s15, [r2, #-4]
   1f4be:	eee6 7a26 	vfma.f32	s15, s12, s13
   1f4c2:	9508      	str	r5, [sp, #32]
   1f4c4:	ed42 7a01 	vstr	s15, [r2, #-4]
      for (int j = 0; j < memory_size; ++j) {
   1f4c8:	f108 0801 	add.w	r8, r8, #1
   1f4cc:	e7ed      	b.n	1f4aa <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x1d2>
   1f4ce:	449e      	add	lr, r3
   1f4d0:	449c      	add	ip, r3
    for (int i = 0; i < num_filters; ++i) {
   1f4d2:	3701      	adds	r7, #1
   1f4d4:	e7df      	b.n	1f496 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x1be>
  for (int b = 0; b < batch_size; ++b) {
   1f4d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f4d8:	3601      	adds	r6, #1
   1f4da:	4411      	add	r1, r2
   1f4dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1f4de:	4414      	add	r4, r2
   1f4e0:	e7d1      	b.n	1f486 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x1ae>
  if (bias_ptr) {
   1f4e2:	9b06      	ldr	r3, [sp, #24]
   1f4e4:	f1bb 0f00 	cmp.w	fp, #0
   1f4e8:	d011      	beq.n	1f50e <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x236>
   1f4ea:	009e      	lsls	r6, r3, #2
    for (int i = 0; i < batch_size; ++i) {
   1f4ec:	2200      	movs	r2, #0
   1f4ee:	4653      	mov	r3, sl
   1f4f0:	9904      	ldr	r1, [sp, #16]
   1f4f2:	4291      	cmp	r1, r2
   1f4f4:	dd1a      	ble.n	1f52c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x254>
   1f4f6:	461c      	mov	r4, r3
   1f4f8:	465d      	mov	r5, fp
      for (int j = 0; j < num_units; ++j) {
   1f4fa:	2100      	movs	r1, #0
   1f4fc:	9f06      	ldr	r7, [sp, #24]
   1f4fe:	428f      	cmp	r7, r1
   1f500:	dd11      	ble.n	1f526 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x24e>
        *output_data++ = *bias_data++;
   1f502:	f855 7b04 	ldr.w	r7, [r5], #4
      for (int j = 0; j < num_units; ++j) {
   1f506:	3101      	adds	r1, #1
        *output_data++ = *bias_data++;
   1f508:	f844 7b04 	str.w	r7, [r4], #4
      for (int j = 0; j < num_units; ++j) {
   1f50c:	e7f6      	b.n	1f4fc <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x224>
    for (int i = 0; i < batch_size * num_units; ++i) {
   1f50e:	9a04      	ldr	r2, [sp, #16]
      *output_data++ = 0.0f;
   1f510:	2100      	movs	r1, #0
    for (int i = 0; i < batch_size * num_units; ++i) {
   1f512:	fb03 f402 	mul.w	r4, r3, r2
    float* output_data = output_ptr;
   1f516:	4652      	mov	r2, sl
    for (int i = 0; i < batch_size * num_units; ++i) {
   1f518:	465b      	mov	r3, fp
   1f51a:	429c      	cmp	r4, r3
   1f51c:	dd06      	ble.n	1f52c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x254>
      *output_data++ = 0.0f;
   1f51e:	f842 1b04 	str.w	r1, [r2], #4
    for (int i = 0; i < batch_size * num_units; ++i) {
   1f522:	3301      	adds	r3, #1
   1f524:	e7f9      	b.n	1f51a <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x242>
    for (int i = 0; i < batch_size; ++i) {
   1f526:	3201      	adds	r2, #1
   1f528:	4433      	add	r3, r6
   1f52a:	e7e1      	b.n	1f4f0 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x218>
   1f52c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f52e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
    for (int i = 0; i < batch_size * num_units; ++i) {
   1f532:	2300      	movs	r3, #0
   1f534:	4619      	mov	r1, r3
   1f536:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  for (int b = 0; b < batch_size; ++b) {
   1f53a:	9a04      	ldr	r2, [sp, #16]
   1f53c:	428a      	cmp	r2, r1
   1f53e:	dc0f      	bgt.n	1f560 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x288>
  for (int b = 0; b < batch_size; ++b) {
   1f540:	2600      	movs	r6, #0
    case kTfLiteActTanh:
      return std::tanh(a);
    case kTfLiteActSignBit:
      return std::signbit(a);
    case kTfLiteActSigmoid:
      return 1.0f / (1.0f + std::exp(-a));
   1f542:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
      if (__b < __a)
   1f546:	eeb1 9a08 	vmov.f32	s18, #24	; 0x40c00000  6.0
   1f54a:	9b06      	ldr	r3, [sp, #24]
   1f54c:	009c      	lsls	r4, r3, #2
   1f54e:	9b04      	ldr	r3, [sp, #16]
   1f550:	42b3      	cmp	r3, r6
   1f552:	dc25      	bgt.n	1f5a0 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x2c8>
      return kTfLiteOk;
   1f554:	2000      	movs	r0, #0
                         TfLiteTypeGetName(weights_feature->type));
      return kTfLiteError;
  }
  return kTfLiteOk;
}
   1f556:	b017      	add	sp, #92	; 0x5c
   1f558:	ecbd 8b04 	vpop	{d8-d9}
   1f55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    float* scratch_ptr_batch = scratch_ptr + b * num_filters;
   1f560:	4606      	mov	r6, r0
    for (int i = 0; i < num_units; ++i) {
   1f562:	2500      	movs	r5, #0
   1f564:	eb0a 0283 	add.w	r2, sl, r3, lsl #2
   1f568:	9f06      	ldr	r7, [sp, #24]
   1f56a:	42af      	cmp	r7, r5
   1f56c:	dd12      	ble.n	1f594 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x2bc>
   1f56e:	46b4      	mov	ip, r6
      for (int j = 0; j < rank; j++) {
   1f570:	2700      	movs	r7, #0
   1f572:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1f574:	42bc      	cmp	r4, r7
   1f576:	dd09      	ble.n	1f58c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x2b4>
        output_ptr_batch[i] += *scratch_ptr_batch++;
   1f578:	edd2 7a00 	vldr	s15, [r2]
   1f57c:	ecbc 7a01 	vldmia	ip!, {s14}
   1f580:	ee77 7a87 	vadd.f32	s15, s15, s14
      for (int j = 0; j < rank; j++) {
   1f584:	3701      	adds	r7, #1
        output_ptr_batch[i] += *scratch_ptr_batch++;
   1f586:	edc2 7a00 	vstr	s15, [r2]
      for (int j = 0; j < rank; j++) {
   1f58a:	e7f2      	b.n	1f572 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x29a>
   1f58c:	4476      	add	r6, lr
    for (int i = 0; i < num_units; ++i) {
   1f58e:	3501      	adds	r5, #1
   1f590:	3204      	adds	r2, #4
   1f592:	e7e9      	b.n	1f568 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x290>
  for (int b = 0; b < batch_size; ++b) {
   1f594:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f596:	3101      	adds	r1, #1
   1f598:	4410      	add	r0, r2
   1f59a:	9a06      	ldr	r2, [sp, #24]
   1f59c:	4413      	add	r3, r2
   1f59e:	e7cc      	b.n	1f53a <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x262>
    float* output_ptr_batch = output_ptr + b * num_units;
   1f5a0:	46d0      	mov	r8, sl
    for (int i = 0; i < num_units; ++i) {
   1f5a2:	2700      	movs	r7, #0
      if (__a < __b)
   1f5a4:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
   1f5a8:	9b06      	ldr	r3, [sp, #24]
   1f5aa:	42bb      	cmp	r3, r7
   1f5ac:	dd4d      	ble.n	1f64a <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x372>
      *output_ptr_batch = ActivationValFloat(activation, *output_ptr_batch);
   1f5ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f5b0:	edd8 7a00 	vldr	s15, [r8]
  switch (act) {
   1f5b4:	2b06      	cmp	r3, #6
   1f5b6:	d821      	bhi.n	1f5fc <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x324>
   1f5b8:	e8df f003 	tbb	[pc, r3]
   1f5bc:	16041b0f 	.word	0x16041b0f
   1f5c0:	2d26      	.short	0x2d26
   1f5c2:	3a          	.byte	0x3a
   1f5c3:	00          	.byte	0x00
      if (__b < __a)
   1f5c4:	eef4 7ac8 	vcmpe.f32	s15, s16
   1f5c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1f5cc:	dc09      	bgt.n	1f5e2 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x30a>
      return __a;
   1f5ce:	eef4 7ae8 	vcmpe.f32	s15, s17
   1f5d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1f5d6:	fe77 7aa8 	vselgt.f32	s15, s15, s17
   1f5da:	ece8 7a01 	vstmia	r8!, {s15}
    for (int i = 0; i < num_units; ++i) {
   1f5de:	3701      	adds	r7, #1
   1f5e0:	e7e2      	b.n	1f5a8 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x2d0>
	return __b;
   1f5e2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1f5e6:	e7f8      	b.n	1f5da <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x302>
      if (__b < __a)
   1f5e8:	eef4 7ac9 	vcmpe.f32	s15, s18
   1f5ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1f5f0:	dc07      	bgt.n	1f602 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x32a>
      if (__a < __b)
   1f5f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   1f5f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1f5fa:	dcee      	bgt.n	1f5da <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x302>
  }
  return 0.0f;  // To indicate an unsupported activation (i.e. when a new fused
   1f5fc:	eddf 7a0b 	vldr	s15, [pc, #44]	; 1f62c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x354>
   1f600:	e7eb      	b.n	1f5da <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x302>
	return __b;
   1f602:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
   1f606:	e7e8      	b.n	1f5da <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x302>
  using ::tanh;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  tanh(float __x)
  { return __builtin_tanhf(__x); }
   1f608:	ee17 0a90 	vmov	r0, s15
   1f60c:	f003 fbb6 	bl	22d7c <tanhf>
   1f610:	ee07 0a90 	vmov	s15, r0
      return std::tanh(a);
   1f614:	e7e1      	b.n	1f5da <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x302>

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  // Note: middle-end/36757 is fixed, __builtin_signbit is type-generic.
  constexpr bool
  signbit(float __x)
  { return __builtin_signbit(__x); }
   1f616:	ee17 3a90 	vmov	r3, s15
      return std::signbit(a);
   1f61a:	0fdb      	lsrs	r3, r3, #31
   1f61c:	ee07 3a90 	vmov	s15, r3
   1f620:	eef8 7a67 	vcvt.f32.u32	s15, s15
   1f624:	e7d9      	b.n	1f5da <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x302>
   1f626:	bf00      	nop
   1f628:	00035753 	.word	0x00035753
   1f62c:	00000000 	.word	0x00000000
  { return __builtin_expf(__x); }
   1f630:	eef1 7a67 	vneg.f32	s15, s15
   1f634:	ee17 0a90 	vmov	r0, s15
   1f638:	f003 fc3e 	bl	22eb8 <expf>
      return 1.0f / (1.0f + std::exp(-a));
   1f63c:	ee07 0a90 	vmov	s15, r0
   1f640:	ee37 7a88 	vadd.f32	s14, s15, s16
   1f644:	eec8 7a07 	vdiv.f32	s15, s16, s14
   1f648:	e7c7      	b.n	1f5da <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x302>
  for (int b = 0; b < batch_size; ++b) {
   1f64a:	3601      	adds	r6, #1
   1f64c:	44a2      	add	sl, r4
   1f64e:	e77e      	b.n	1f54e <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x276>
      TF_LITE_ENSURE_EQ(context, params->activation, kTfLiteActRelu);
   1f650:	7933      	ldrb	r3, [r6, #4]
   1f652:	2b01      	cmp	r3, #1
   1f654:	d00f      	beq.n	1f676 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x39e>
   1f656:	2401      	movs	r4, #1
   1f658:	e9cd 3402 	strd	r3, r4, [sp, #8]
   1f65c:	4b9f      	ldr	r3, [pc, #636]	; (1f8dc <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x604>)
   1f65e:	4638      	mov	r0, r7
   1f660:	9301      	str	r3, [sp, #4]
   1f662:	4b9f      	ldr	r3, [pc, #636]	; (1f8e0 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x608>)
   1f664:	4a9f      	ldr	r2, [pc, #636]	; (1f8e4 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x60c>)
   1f666:	9300      	str	r3, [sp, #0]
   1f668:	697d      	ldr	r5, [r7, #20]
   1f66a:	f240 13ff 	movw	r3, #511	; 0x1ff
   1f66e:	499e      	ldr	r1, [pc, #632]	; (1f8e8 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x610>)
   1f670:	47a8      	blx	r5
      return kTfLiteError;
   1f672:	2001      	movs	r0, #1
   1f674:	e76f      	b.n	1f556 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x27e>
                      input->params.zero_point, output->params.zero_point);
   1f676:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1f67a:	930f      	str	r3, [sp, #60]	; 0x3c
      EvalIntegerSVDF(context, node, input, weights_feature, weights_time, bias,
   1f67c:	f8da 3010 	ldr.w	r3, [sl, #16]
   1f680:	9310      	str	r3, [sp, #64]	; 0x40
   1f682:	6833      	ldr	r3, [r6, #0]
   1f684:	930a      	str	r3, [sp, #40]	; 0x28
  const int n_batch = input_tensor->dims->data[0];
   1f686:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1f68a:	685a      	ldr	r2, [r3, #4]
  const int n_input = input_tensor->dims->data[1];
   1f68c:	689b      	ldr	r3, [r3, #8]
  const int n_batch = input_tensor->dims->data[0];
   1f68e:	9205      	str	r2, [sp, #20]
  const int n_input = input_tensor->dims->data[1];
   1f690:	930b      	str	r3, [sp, #44]	; 0x2c
  const int n_filter = weights_feature_tensor->dims->data[0];
   1f692:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1f696:	685e      	ldr	r6, [r3, #4]
  const int n_unit = n_filter / n_rank;
   1f698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1f69a:	fb96 f3f3 	sdiv	r3, r6, r3
   1f69e:	9306      	str	r3, [sp, #24]
  const int n_memory = weights_time_tensor->dims->data[1];
   1f6a0:	9b08      	ldr	r3, [sp, #32]
   1f6a2:	689b      	ldr	r3, [r3, #8]
   1f6a4:	689b      	ldr	r3, [r3, #8]
   1f6a6:	9307      	str	r3, [sp, #28]
  TFLITE_DCHECK(context->GetScratchBuffer != nullptr);
   1f6a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1f6aa:	2b00      	cmp	r3, #0
   1f6ac:	f43f ae3f 	beq.w	1f32e <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x56>
      context->GetScratchBuffer(context, data.scratch_tensor_index));
   1f6b0:	9a04      	ldr	r2, [sp, #16]
   1f6b2:	4638      	mov	r0, r7
   1f6b4:	6911      	ldr	r1, [r2, #16]
   1f6b6:	4798      	blx	r3
      context->GetScratchBuffer(context, data.scratch_output_tensor_index));
   1f6b8:	9a04      	ldr	r2, [sp, #16]
      context->GetScratchBuffer(context, data.scratch_tensor_index));
   1f6ba:	9011      	str	r0, [sp, #68]	; 0x44
      context->GetScratchBuffer(context, data.scratch_output_tensor_index));
   1f6bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1f6be:	4638      	mov	r0, r7
   1f6c0:	6951      	ldr	r1, [r2, #20]
   1f6c2:	4798      	blx	r3
   1f6c4:	9009      	str	r0, [sp, #36]	; 0x24
   1f6c6:	b104      	cbz	r4, 1f6ca <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x3f2>
   1f6c8:	6864      	ldr	r4, [r4, #4]
    const int16_t* old_state_end = state_ptr + n_batch * n_filter * n_memory;
   1f6ca:	9b05      	ldr	r3, [sp, #20]
   1f6cc:	9907      	ldr	r1, [sp, #28]
   1f6ce:	4373      	muls	r3, r6
   1f6d0:	434b      	muls	r3, r1
    const int16_t* old_state_start = state_ptr + 1;
   1f6d2:	1ca2      	adds	r2, r4, #2
    const int16_t* old_state_end = state_ptr + n_batch * n_filter * n_memory;
   1f6d4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    while (old_state_start != old_state_end) {
   1f6d8:	4293      	cmp	r3, r2
   1f6da:	d004      	beq.n	1f6e6 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x40e>
      *new_state_start++ = *old_state_start++;
   1f6dc:	f832 1b02 	ldrh.w	r1, [r2], #2
   1f6e0:	f822 1c04 	strh.w	r1, [r2, #-4]
    while (old_state_start != old_state_end) {
   1f6e4:	e7f8      	b.n	1f6d8 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x400>
inline const T* GetTensorData(const TfLiteTensor* tensor) {
   1f6e6:	f8d8 7004 	ldr.w	r7, [r8, #4]
    for (int b = 0; b < n_batch; b++) {
   1f6ea:	f04f 0800 	mov.w	r8, #0
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1f6ee:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1f6f2:	9312      	str	r3, [sp, #72]	; 0x48
    int16_t* result_in_batch = state + (n_memory - 1);
   1f6f4:	9b07      	ldr	r3, [sp, #28]
   1f6f6:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
   1f6fa:	3d01      	subs	r5, #1
   1f6fc:	006b      	lsls	r3, r5, #1
        result_in_batch += n_memory;
   1f6fe:	3302      	adds	r3, #2
    int16_t* result_in_batch = state + (n_memory - 1);
   1f700:	eb04 0245 	add.w	r2, r4, r5, lsl #1
        result_in_batch += n_memory;
   1f704:	930e      	str	r3, [sp, #56]	; 0x38
    int16_t* result_in_batch = state + (n_memory - 1);
   1f706:	920c      	str	r2, [sp, #48]	; 0x30
    for (int b = 0; b < n_batch; b++) {
   1f708:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1f70a:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
   1f70e:	4353      	muls	r3, r2
   1f710:	9313      	str	r3, [sp, #76]	; 0x4c
   1f712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f714:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1f718:	9314      	str	r3, [sp, #80]	; 0x50
   1f71a:	9b05      	ldr	r3, [sp, #20]
   1f71c:	4543      	cmp	r3, r8
   1f71e:	dd15      	ble.n	1f74c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x474>
      for (int r = 0; r < n_filter; r++) {
   1f720:	f04f 0900 	mov.w	r9, #0
      const int8_t* matrix_ptr = weight_feature;
   1f724:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1f726:	930d      	str	r3, [sp, #52]	; 0x34
        const int8_t* vector_in_batch = input + b * n_input;
   1f728:	9b0c      	ldr	r3, [sp, #48]	; 0x30
      for (int r = 0; r < n_filter; r++) {
   1f72a:	454e      	cmp	r6, r9
   1f72c:	dd55      	ble.n	1f7da <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x502>
        int32_t dot_prod = 0;
   1f72e:	2000      	movs	r0, #0
        for (int c = 0; c < n_input; c++) {
   1f730:	4602      	mov	r2, r0
   1f732:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f734:	4291      	cmp	r1, r2
   1f736:	dd36      	ble.n	1f7a6 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x4ce>
          dot_prod += *matrix_ptr++ * (*vector_in_batch++ - input_zp);
   1f738:	56b9      	ldrsb	r1, [r7, r2]
   1f73a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1f73c:	1b49      	subs	r1, r1, r5
   1f73e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1f740:	f915 c002 	ldrsb.w	ip, [r5, r2]
        for (int c = 0; c < n_input; c++) {
   1f744:	3201      	adds	r2, #1
          dot_prod += *matrix_ptr++ * (*vector_in_batch++ - input_zp);
   1f746:	fb0c 0001 	mla	r0, ip, r1, r0
        for (int c = 0; c < n_input; c++) {
   1f74a:	e7f2      	b.n	1f732 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x45a>
   1f74c:	00b3      	lsls	r3, r6, #2
   1f74e:	930d      	str	r3, [sp, #52]	; 0x34
   1f750:	9b07      	ldr	r3, [sp, #28]
   1f752:	9811      	ldr	r0, [sp, #68]	; 0x44
   1f754:	4373      	muls	r3, r6
   1f756:	005b      	lsls	r3, r3, #1
   1f758:	930e      	str	r3, [sp, #56]	; 0x38
   1f75a:	9b07      	ldr	r3, [sp, #28]
    for (int b = 0; b < n_batch; b++) {
   1f75c:	4684      	mov	ip, r0
   1f75e:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   1f762:	004b      	lsls	r3, r1, #1
   1f764:	930c      	str	r3, [sp, #48]	; 0x30
    for (int b = 0; b < n_batch; ++b) {
   1f766:	2300      	movs	r3, #0
   1f768:	930b      	str	r3, [sp, #44]	; 0x2c
   1f76a:	9b05      	ldr	r3, [sp, #20]
   1f76c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f76e:	4293      	cmp	r3, r2
   1f770:	dd4a      	ble.n	1f808 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x530>
          b * n_memory * n_filter;
   1f772:	46a0      	mov	r8, r4
      for (int i = 0; i < n_filter; i++) {
   1f774:	f04f 0e00 	mov.w	lr, #0
   1f778:	9b08      	ldr	r3, [sp, #32]
   1f77a:	f1ac 0504 	sub.w	r5, ip, #4
   1f77e:	f8d3 9004 	ldr.w	r9, [r3, #4]
   1f782:	4576      	cmp	r6, lr
   1f784:	dd38      	ble.n	1f7f8 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x520>
        *scratch_ptr_batch = 0;
   1f786:	2300      	movs	r3, #0
   1f788:	f845 3f04 	str.w	r3, [r5, #4]!
        for (int j = 0; j < n_memory; j++) {
   1f78c:	9f07      	ldr	r7, [sp, #28]
   1f78e:	429f      	cmp	r7, r3
   1f790:	dd2c      	ble.n	1f7ec <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x514>
          *scratch_ptr_batch += *vector1_ptr++ * *vector2_ptr++;
   1f792:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
   1f796:	f838 1013 	ldrh.w	r1, [r8, r3, lsl #1]
   1f79a:	682f      	ldr	r7, [r5, #0]
        for (int j = 0; j < n_memory; j++) {
   1f79c:	3301      	adds	r3, #1
          *scratch_ptr_batch += *vector1_ptr++ * *vector2_ptr++;
   1f79e:	fb12 7701 	smlabb	r7, r2, r1, r7
   1f7a2:	602f      	str	r7, [r5, #0]
        for (int j = 0; j < n_memory; j++) {
   1f7a4:	e7f2      	b.n	1f78c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x4b4>
   1f7a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1f7a8:	9315      	str	r3, [sp, #84]	; 0x54
   1f7aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
      for (int r = 0; r < n_filter; r++) {
   1f7ac:	f109 0901 	add.w	r9, r9, #1
   1f7b0:	4413      	add	r3, r2
   1f7b2:	930d      	str	r3, [sp, #52]	; 0x34
        dot_prod = MultiplyByQuantizedMultiplier(
   1f7b4:	9b04      	ldr	r3, [sp, #16]
   1f7b6:	689a      	ldr	r2, [r3, #8]
   1f7b8:	6819      	ldr	r1, [r3, #0]
   1f7ba:	f7f9 fda9 	bl	19310 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
        *result_in_batch = dot_prod;
   1f7be:	f647 73ff 	movw	r3, #32767	; 0x7fff
   1f7c2:	4298      	cmp	r0, r3
   1f7c4:	bfa8      	it	ge
   1f7c6:	4618      	movge	r0, r3
   1f7c8:	4b48      	ldr	r3, [pc, #288]	; (1f8ec <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x614>)
        result_in_batch += n_memory;
   1f7ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
        *result_in_batch = dot_prod;
   1f7cc:	4298      	cmp	r0, r3
   1f7ce:	bfb8      	it	lt
   1f7d0:	4618      	movlt	r0, r3
   1f7d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1f7d4:	8018      	strh	r0, [r3, #0]
        result_in_batch += n_memory;
   1f7d6:	4413      	add	r3, r2
      for (int r = 0; r < n_filter; r++) {
   1f7d8:	e7a7      	b.n	1f72a <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x452>
   1f7da:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1f7dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    for (int b = 0; b < n_batch; b++) {
   1f7de:	f108 0801 	add.w	r8, r8, #1
   1f7e2:	441a      	add	r2, r3
   1f7e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f7e6:	920c      	str	r2, [sp, #48]	; 0x30
   1f7e8:	441f      	add	r7, r3
   1f7ea:	e796      	b.n	1f71a <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x442>
   1f7ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
      for (int i = 0; i < n_filter; i++) {
   1f7ee:	f10e 0e01 	add.w	lr, lr, #1
   1f7f2:	4499      	add	r9, r3
   1f7f4:	4498      	add	r8, r3
   1f7f6:	e7c4      	b.n	1f782 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x4aa>
    for (int b = 0; b < n_batch; ++b) {
   1f7f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f7fa:	3301      	adds	r3, #1
   1f7fc:	930b      	str	r3, [sp, #44]	; 0x2c
   1f7fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f800:	449c      	add	ip, r3
   1f802:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f804:	441c      	add	r4, r3
   1f806:	e7b0      	b.n	1f76a <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x492>
    if (bias_tensor) {
   1f808:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   1f80c:	fb03 f402 	mul.w	r4, r3, r2
   1f810:	f1bb 0f00 	cmp.w	fp, #0
   1f814:	d014      	beq.n	1f840 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x568>
      for (int i = 0; i < n_batch; ++i) {
   1f816:	2100      	movs	r1, #0
   1f818:	f8db 6004 	ldr.w	r6, [fp, #4]
   1f81c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f81e:	009d      	lsls	r5, r3, #2
   1f820:	9b05      	ldr	r3, [sp, #20]
   1f822:	428b      	cmp	r3, r1
   1f824:	dd15      	ble.n	1f852 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x57a>
        for (int j = 0; j < n_unit; ++j) {
   1f826:	2300      	movs	r3, #0
   1f828:	9f06      	ldr	r7, [sp, #24]
   1f82a:	429f      	cmp	r7, r3
   1f82c:	dd05      	ble.n	1f83a <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x562>
          *output_ptr++ = *bias_ptr++;
   1f82e:	f856 7023 	ldr.w	r7, [r6, r3, lsl #2]
   1f832:	f842 7023 	str.w	r7, [r2, r3, lsl #2]
        for (int j = 0; j < n_unit; ++j) {
   1f836:	3301      	adds	r3, #1
   1f838:	e7f6      	b.n	1f828 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x550>
      for (int i = 0; i < n_batch; ++i) {
   1f83a:	3101      	adds	r1, #1
   1f83c:	442a      	add	r2, r5
   1f83e:	e7ef      	b.n	1f820 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x548>
      for (int i = 0; i < n_batch * n_unit; ++i) {
   1f840:	465b      	mov	r3, fp
        *output_ptr++ = 0;
   1f842:	465a      	mov	r2, fp
      for (int i = 0; i < n_batch * n_unit; ++i) {
   1f844:	429c      	cmp	r4, r3
   1f846:	dd04      	ble.n	1f852 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x57a>
        *output_ptr++ = 0;
   1f848:	9909      	ldr	r1, [sp, #36]	; 0x24
   1f84a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      for (int i = 0; i < n_batch * n_unit; ++i) {
   1f84e:	3301      	adds	r3, #1
   1f850:	e7f8      	b.n	1f844 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x56c>
   1f852:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1f854:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   1f858:	2300      	movs	r3, #0
   1f85a:	461f      	mov	r7, r3
   1f85c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    for (int b = 0; b < n_batch; ++b) {
   1f860:	9a05      	ldr	r2, [sp, #20]
   1f862:	42ba      	cmp	r2, r7
   1f864:	dd1e      	ble.n	1f8a4 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x5cc>
      int32_t* scratch_ptr_batch = scratch_tensor + b * n_filter;
   1f866:	4680      	mov	r8, r0
      for (int i = 0; i < n_unit; ++i) {
   1f868:	f04f 0e00 	mov.w	lr, #0
   1f86c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f86e:	eb02 0583 	add.w	r5, r2, r3, lsl #2
   1f872:	9a06      	ldr	r2, [sp, #24]
   1f874:	4572      	cmp	r2, lr
   1f876:	dd0f      	ble.n	1f898 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x5c0>
        for (int j = 0; j < n_rank; ++j) {
   1f878:	2600      	movs	r6, #0
   1f87a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f87c:	42b2      	cmp	r2, r6
   1f87e:	dd06      	ble.n	1f88e <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x5b6>
          output_temp_ptr[i] += *scratch_ptr_batch++;
   1f880:	f858 1026 	ldr.w	r1, [r8, r6, lsl #2]
   1f884:	682a      	ldr	r2, [r5, #0]
        for (int j = 0; j < n_rank; ++j) {
   1f886:	3601      	adds	r6, #1
          output_temp_ptr[i] += *scratch_ptr_batch++;
   1f888:	440a      	add	r2, r1
   1f88a:	602a      	str	r2, [r5, #0]
        for (int j = 0; j < n_rank; ++j) {
   1f88c:	e7f5      	b.n	1f87a <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x5a2>
   1f88e:	44e0      	add	r8, ip
      for (int i = 0; i < n_unit; ++i) {
   1f890:	f10e 0e01 	add.w	lr, lr, #1
   1f894:	3504      	adds	r5, #4
   1f896:	e7ec      	b.n	1f872 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x59a>
    for (int b = 0; b < n_batch; ++b) {
   1f898:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1f89a:	3701      	adds	r7, #1
   1f89c:	4410      	add	r0, r2
   1f89e:	9a06      	ldr	r2, [sp, #24]
   1f8a0:	4413      	add	r3, r2
   1f8a2:	e7dd      	b.n	1f860 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x588>
    for (int i = 0; i < n_batch * n_unit; ++i) {
   1f8a4:	2500      	movs	r5, #0
      GetTensorData<int8_t>(output_tensor)[i] = static_cast<int8_t>(x4);
   1f8a6:	f06f 067f 	mvn.w	r6, #127	; 0x7f
    for (int i = 0; i < n_batch * n_unit; ++i) {
   1f8aa:	42ac      	cmp	r4, r5
   1f8ac:	f77f ae52 	ble.w	1f554 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x27c>
      int32_t x2 = MultiplyByQuantizedMultiplier(x1, data.effective_scale_2_a,
   1f8b0:	9b04      	ldr	r3, [sp, #16]
   1f8b2:	68da      	ldr	r2, [r3, #12]
   1f8b4:	6859      	ldr	r1, [r3, #4]
   1f8b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f8b8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   1f8bc:	f7f9 fd28 	bl	19310 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
      int32_t x3 = x2 + output_zp;
   1f8c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
      GetTensorData<int8_t>(output_tensor)[i] = static_cast<int8_t>(x4);
   1f8c2:	f8da 3004 	ldr.w	r3, [sl, #4]
      int32_t x3 = x2 + output_zp;
   1f8c6:	4410      	add	r0, r2
      GetTensorData<int8_t>(output_tensor)[i] = static_cast<int8_t>(x4);
   1f8c8:	287f      	cmp	r0, #127	; 0x7f
   1f8ca:	bfa8      	it	ge
   1f8cc:	207f      	movge	r0, #127	; 0x7f
   1f8ce:	42b0      	cmp	r0, r6
   1f8d0:	bfb8      	it	lt
   1f8d2:	4630      	movlt	r0, r6
   1f8d4:	5558      	strb	r0, [r3, r5]
    for (int i = 0; i < n_batch * n_unit; ++i) {
   1f8d6:	3501      	adds	r5, #1
   1f8d8:	e7e7      	b.n	1f8aa <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x5d2>
   1f8da:	bf00      	nop
   1f8dc:	00036056 	.word	0x00036056
   1f8e0:	00034b89 	.word	0x00034b89
   1f8e4:	00035e30 	.word	0x00035e30
   1f8e8:	00034a7c 	.word	0x00034a7c
   1f8ec:	ffff8000 	.word	0xffff8000

0001f8f0 <_ZN6tflite3ops5micro13Register_SVDFEv>:

}  // namespace svdf

TfLiteRegistration Register_SVDF() {
   1f8f0:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/svdf::Prepare,
          /*invoke=*/svdf::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1f8f2:	4604      	mov	r4, r0
TfLiteRegistration Register_SVDF() {
   1f8f4:	4606      	mov	r6, r0
          /*version=*/0};
   1f8f6:	4d04      	ldr	r5, [pc, #16]	; (1f908 <_ZN6tflite3ops5micro13Register_SVDFEv+0x18>)
   1f8f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f8fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1f8fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1f900:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1f904:	4630      	mov	r0, r6
   1f906:	bd70      	pop	{r4, r5, r6, pc}
   1f908:	00031bb8 	.word	0x00031bb8

0001f90c <_ZN6tflite3ops5micro13Register_TANHEv>:
  }
}

}  // namespace activations

TfLiteRegistration Register_TANH() {
   1f90c:	b510      	push	{r4, lr}
   1f90e:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/activations::TanhEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1f910:	2220      	movs	r2, #32
   1f912:	2100      	movs	r1, #0
   1f914:	f011 fa9b 	bl	30e4e <memset>
   1f918:	4b01      	ldr	r3, [pc, #4]	; (1f920 <_ZN6tflite3ops5micro13Register_TANHEv+0x14>)
}
   1f91a:	4620      	mov	r0, r4
          /*version=*/0};
   1f91c:	60e3      	str	r3, [r4, #12]
}
   1f91e:	bd10      	pop	{r4, pc}
   1f920:	0001fced 	.word	0x0001fced

0001f924 <_ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>:
  std::int64_t sum = a64 + b64;
   1f924:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1f928:	2300      	movs	r3, #0
   1f92a:	1812      	adds	r2, r2, r0
   1f92c:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
  std::int64_t sign = sum >= 0 ? 1 : -1;
   1f930:	1c59      	adds	r1, r3, #1
   1f932:	bf05      	ittet	eq
   1f934:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   1f938:	4611      	moveq	r1, r2
   1f93a:	2101      	movne	r1, #1
   1f93c:	4618      	moveq	r0, r3
   1f93e:	bf18      	it	ne
   1f940:	2000      	movne	r0, #0
FixedPoint<tRawType, 0> one_minus_x_over_one_plus_x_for_x_in_0_1(
   1f942:	b570      	push	{r4, r5, r6, lr}
  return static_cast<std::int32_t>((sum + sign) / 2);
   1f944:	1854      	adds	r4, r2, r1
   1f946:	eb43 0500 	adc.w	r5, r3, r0
   1f94a:	0feb      	lsrs	r3, r5, #31
   1f94c:	18e4      	adds	r4, r4, r3
   1f94e:	ea4f 0354 	mov.w	r3, r4, lsr #1
   1f952:	f145 0500 	adc.w	r5, r5, #0
   1f956:	ea43 75c5 	orr.w	r5, r3, r5, lsl #31
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   1f95a:	4628      	mov	r0, r5
   1f95c:	490c      	ldr	r1, [pc, #48]	; (1f990 <_ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x6c>)
   1f95e:	f7fb fc39 	bl	1b1d4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  return a + b;
   1f962:	2603      	movs	r6, #3
   1f964:	f100 345a 	add.w	r4, r0, #1515870810	; 0x5a5a5a5a
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   1f968:	4621      	mov	r1, r4
   1f96a:	4628      	mov	r0, r5
   1f96c:	f7fb fc32 	bl	1b1d4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
   1f970:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   1f974:	4620      	mov	r0, r4
   1f976:	f7fb fc2d 	bl	1b1d4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
   1f97a:	f010 fa35 	bl	2fde8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EiLi1EE4evalEi>
  for (int i = 0; i < 3; i++) {
   1f97e:	3e01      	subs	r6, #1
  return a + b;
   1f980:	4404      	add	r4, r0
  for (int i = 0; i < 3; i++) {
   1f982:	d1f1      	bne.n	1f968 <_ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x44>
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
   1f984:	f104 4060 	add.w	r0, r4, #3758096384	; 0xe0000000
   1f988:	f010 fa2e 	bl	2fde8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EiLi1EE4evalEi>
}
   1f98c:	bd70      	pop	{r4, r5, r6, pc}
   1f98e:	bf00      	nop
   1f990:	c3c3c3c4 	.word	0xc3c3c3c4

0001f994 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIsEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
   1f994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f998:	4604      	mov	r4, r0
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
   1f99a:	4825      	ldr	r0, [pc, #148]	; (1fa30 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIsEENS_10FixedPointIT_Li0EEES3_+0x9c>)
   1f99c:	f010 fa71 	bl	2fe82 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIsLi0EEEEENT_13ScalarRawTypeEi>
   1f9a0:	4605      	mov	r5, r0
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
   1f9a2:	4824      	ldr	r0, [pc, #144]	; (1fa34 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIsEENS_10FixedPointIT_Li0EEES3_+0xa0>)
   1f9a4:	f010 fa6d 	bl	2fe82 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIsLi0EEEEENT_13ScalarRawTypeEi>
  return a + b;
   1f9a8:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
   1f9ac:	b224      	sxth	r4, r4
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
   1f9ae:	4607      	mov	r7, r0
  F x2 = x * x;
   1f9b0:	4621      	mov	r1, r4
   1f9b2:	4620      	mov	r0, r4
   1f9b4:	f010 fa6b 	bl	2fe8e <_ZN8gemmlowpmlIsLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  F x3 = x2 * x;
   1f9b8:	4621      	mov	r1, r4
  F x2 = x * x;
   1f9ba:	4606      	mov	r6, r0
  F x3 = x2 * x;
   1f9bc:	f010 fa67 	bl	2fe8e <_ZN8gemmlowpmlIsLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  F x4 = x2 * x2;
   1f9c0:	4631      	mov	r1, r6
  F x3 = x2 * x;
   1f9c2:	4680      	mov	r8, r0
  F x4 = x2 * x2;
   1f9c4:	4630      	mov	r0, r6
   1f9c6:	f010 fa62 	bl	2fe8e <_ZN8gemmlowpmlIsLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
   1f9ca:	4603      	mov	r3, r0
  return a + b;
   1f9cc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  return a ? BitNot(zero) : zero;
   1f9d0:	bf14      	ite	ne
   1f9d2:	2002      	movne	r0, #2
   1f9d4:	2001      	moveq	r0, #1
  return a >> offset;
   1f9d6:	f343 028d 	sbfx	r2, r3, #2, #14
  return a ? BitNot(zero) : zero;
   1f9da:	f003 0c03 	and.w	ip, r3, #3
  return a + b;
   1f9de:	4442      	add	r2, r8
      SaturatingRoundingMultiplyByPOT<-1>(
   1f9e0:	4584      	cmp	ip, r0
   1f9e2:	bfd4      	ite	le
   1f9e4:	4610      	movle	r0, r2
   1f9e6:	1c50      	addgt	r0, r2, #1
   1f9e8:	4639      	mov	r1, r7
   1f9ea:	f010 fa50 	bl	2fe8e <_ZN8gemmlowpmlIsLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a + b;
   1f9ee:	1983      	adds	r3, r0, r6
  return a ? BitNot(zero) : zero;
   1f9f0:	f003 0101 	and.w	r1, r3, #1
   1f9f4:	f3c3 32c0 	ubfx	r2, r3, #15, #1
   1f9f8:	4291      	cmp	r1, r2
   1f9fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f9fe:	bfd8      	it	le
   1fa00:	2100      	movle	r1, #0
  return a >> offset;
   1fa02:	f343 034e 	sbfx	r3, r3, #1, #15
  return a + b;
   1fa06:	4423      	add	r3, r4
  return a & b;
   1fa08:	f001 0101 	and.w	r1, r1, #1
  return AddSaturatingIf16Bit(
   1fa0c:	4628      	mov	r0, r5
   1fa0e:	4419      	add	r1, r3
   1fa10:	f010 fa3d 	bl	2fe8e <_ZN8gemmlowpmlIsLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  std::int32_t sum = a32 + b32;
   1fa14:	fa05 f080 	sxtah	r0, r5, r0
      if (__a < __b)
   1fa18:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
   1fa1c:	dd06      	ble.n	1fa2c <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIsEENS_10FixedPointIT_Li0EEES3_+0x98>
      return __a;
   1fa1e:	f647 73ff 	movw	r3, #32767	; 0x7fff
   1fa22:	4298      	cmp	r0, r3
   1fa24:	bfa8      	it	ge
   1fa26:	4618      	movge	r0, r3
}
   1fa28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return __a;
   1fa2c:	4802      	ldr	r0, [pc, #8]	; (1fa38 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIsEENS_10FixedPointIT_Li0EEES3_+0xa4>)
   1fa2e:	e7fb      	b.n	1fa28 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIsEENS_10FixedPointIT_Li0EEES3_+0x94>
   1fa30:	70f5a894 	.word	0x70f5a894
   1fa34:	2aaaaaab 	.word	0x2aaaaaab
   1fa38:	ffff8000 	.word	0xffff8000

0001fa3c <_ZN8gemmlowp22exp_on_negative_valuesIsLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
   1fa3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fa40:	b204      	sxth	r4, r0
  return a - b;
   1fa42:	ea6f 50c0 	mvn.w	r0, r0, lsl #23
   1fa46:	ea6f 50d0 	mvn.w	r0, r0, lsr #23
   1fa4a:	b205      	sxth	r5, r0
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
   1fa4c:	0100      	lsls	r0, r0, #4
   1fa4e:	f7ff ffa1 	bl	1f994 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIsEENS_10FixedPointIT_Li0EEES3_>
   1fa52:	4607      	mov	r7, r0
   1fa54:	fa0f f880 	sxth.w	r8, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
   1fa58:	4837      	ldr	r0, [pc, #220]	; (1fb38 <_ZN8gemmlowp22exp_on_negative_valuesIsLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0xfc>)
   1fa5a:	f010 fa12 	bl	2fe82 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIsLi0EEEEENT_13ScalarRawTypeEi>
   1fa5e:	4601      	mov	r1, r0
   1fa60:	4638      	mov	r0, r7
   1fa62:	f010 fa14 	bl	2fe8e <_ZN8gemmlowpmlIsLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a - b;
   1fa66:	1b2d      	subs	r5, r5, r4
   1fa68:	b22d      	sxth	r5, r5
  return a ? BitNot(zero) : zero;
   1fa6a:	b2ae      	uxth	r6, r5
   1fa6c:	f3c5 2540 	ubfx	r5, r5, #9, #1
   1fa70:	426b      	negs	r3, r5
  return a & b;
   1fa72:	3d01      	subs	r5, #1
   1fa74:	4018      	ands	r0, r3
   1fa76:	ea08 0505 	and.w	r5, r8, r5
  return a ^ b;
   1fa7a:	ea80 0705 	eor.w	r7, r0, r5
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
   1fa7e:	482f      	ldr	r0, [pc, #188]	; (1fb3c <_ZN8gemmlowp22exp_on_negative_valuesIsLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x100>)
   1fa80:	f010 f9ff 	bl	2fe82 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIsLi0EEEEENT_13ScalarRawTypeEi>
  return a ^ b;
   1fa84:	b23f      	sxth	r7, r7
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
   1fa86:	4601      	mov	r1, r0
   1fa88:	4638      	mov	r0, r7
   1fa8a:	f010 fa00 	bl	2fe8e <_ZN8gemmlowpmlIsLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   1fa8e:	f3c6 2580 	ubfx	r5, r6, #10, #1
   1fa92:	426b      	negs	r3, r5
  return a & b;
   1fa94:	3d01      	subs	r5, #1
   1fa96:	4018      	ands	r0, r3
   1fa98:	403d      	ands	r5, r7
  return a ^ b;
   1fa9a:	4045      	eors	r5, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
   1fa9c:	4828      	ldr	r0, [pc, #160]	; (1fb40 <_ZN8gemmlowp22exp_on_negative_valuesIsLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x104>)
   1fa9e:	f010 f9f0 	bl	2fe82 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIsLi0EEEEENT_13ScalarRawTypeEi>
  return a ^ b;
   1faa2:	b22d      	sxth	r5, r5
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
   1faa4:	4601      	mov	r1, r0
   1faa6:	4628      	mov	r0, r5
   1faa8:	f010 f9f1 	bl	2fe8e <_ZN8gemmlowpmlIsLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   1faac:	f3c6 28c0 	ubfx	r8, r6, #11, #1
   1fab0:	f1c8 0300 	rsb	r3, r8, #0
  return a & b;
   1fab4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   1fab8:	4018      	ands	r0, r3
   1faba:	ea05 0808 	and.w	r8, r5, r8
  return a ^ b;
   1fabe:	ea80 0808 	eor.w	r8, r0, r8
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
   1fac2:	4820      	ldr	r0, [pc, #128]	; (1fb44 <_ZN8gemmlowp22exp_on_negative_valuesIsLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x108>)
   1fac4:	f010 f9dd 	bl	2fe82 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIsLi0EEEEENT_13ScalarRawTypeEi>
  return a ^ b;
   1fac8:	fa0f f888 	sxth.w	r8, r8
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
   1facc:	4601      	mov	r1, r0
   1face:	4640      	mov	r0, r8
   1fad0:	f010 f9dd 	bl	2fe8e <_ZN8gemmlowpmlIsLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   1fad4:	f3c6 3700 	ubfx	r7, r6, #12, #1
   1fad8:	427b      	negs	r3, r7
  return a & b;
   1fada:	3f01      	subs	r7, #1
   1fadc:	4018      	ands	r0, r3
   1fade:	ea08 0707 	and.w	r7, r8, r7
  return a ^ b;
   1fae2:	4047      	eors	r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
   1fae4:	4818      	ldr	r0, [pc, #96]	; (1fb48 <_ZN8gemmlowp22exp_on_negative_valuesIsLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x10c>)
   1fae6:	f010 f9cc 	bl	2fe82 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIsLi0EEEEENT_13ScalarRawTypeEi>
  return a ^ b;
   1faea:	b23f      	sxth	r7, r7
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
   1faec:	4601      	mov	r1, r0
   1faee:	4638      	mov	r0, r7
   1faf0:	f010 f9cd 	bl	2fe8e <_ZN8gemmlowpmlIsLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   1faf4:	f3c6 3540 	ubfx	r5, r6, #13, #1
   1faf8:	426b      	negs	r3, r5
  return a & b;
   1fafa:	3d01      	subs	r5, #1
   1fafc:	4018      	ands	r0, r3
   1fafe:	403d      	ands	r5, r7
  return a ^ b;
   1fb00:	4045      	eors	r5, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
   1fb02:	4812      	ldr	r0, [pc, #72]	; (1fb4c <_ZN8gemmlowp22exp_on_negative_valuesIsLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x110>)
   1fb04:	f010 f9bd 	bl	2fe82 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIsLi0EEEEENT_13ScalarRawTypeEi>
  return a ^ b;
   1fb08:	b22d      	sxth	r5, r5
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
   1fb0a:	4601      	mov	r1, r0
   1fb0c:	4628      	mov	r0, r5
   1fb0e:	f010 f9be 	bl	2fe8e <_ZN8gemmlowpmlIsLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   1fb12:	f3c6 3680 	ubfx	r6, r6, #14, #1
   1fb16:	4273      	negs	r3, r6
  return a & b;
   1fb18:	4018      	ands	r0, r3
  return a ? BitNot(zero) : zero;
   1fb1a:	fab4 f384 	clz	r3, r4
  return a & b;
   1fb1e:	3e01      	subs	r6, #1
   1fb20:	402e      	ands	r6, r5
  return a ^ b;
   1fb22:	4070      	eors	r0, r6
  return a ? BitNot(zero) : zero;
   1fb24:	095b      	lsrs	r3, r3, #5
  return a & b;
   1fb26:	1e5d      	subs	r5, r3, #1
  return a ^ b;
   1fb28:	b200      	sxth	r0, r0
  return a ? BitNot(zero) : zero;
   1fb2a:	425b      	negs	r3, r3
  return a & b;
   1fb2c:	4028      	ands	r0, r5
   1fb2e:	f3c3 030e 	ubfx	r3, r3, #0, #15
}
   1fb32:	4058      	eors	r0, r3
   1fb34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fb38:	63afbe7b 	.word	0x63afbe7b
   1fb3c:	4da2cbf2 	.word	0x4da2cbf2
   1fb40:	2f16ac6c 	.word	0x2f16ac6c
   1fb44:	1152aaa4 	.word	0x1152aaa4
   1fb48:	02582ab7 	.word	0x02582ab7
   1fb4c:	000afe11 	.word	0x000afe11

0001fb50 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EsLi1EE4evalEs>:
  return a ? BitNot(zero) : zero;
   1fb50:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
  static IntegerType eval(IntegerType x) {
   1fb54:	b5d0      	push	{r4, r6, r7, lr}
  return a ? BitNot(zero) : zero;
   1fb56:	da26      	bge.n	1fba6 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EsLi1EE4evalEs+0x56>
   1fb58:	f510 5f00 	cmn.w	r0, #8192	; 0x2000
   1fb5c:	bfcc      	ite	gt
   1fb5e:	2100      	movgt	r1, #0
   1fb60:	2101      	movle	r1, #1
   1fb62:	2400      	movs	r4, #0
   1fb64:	4249      	negs	r1, r1
  const std::int64_t wide_shifted = wide_a * (1 << offset);
   1fb66:	17c7      	asrs	r7, r0, #31
             ? min
   1fb68:	f46f 4600 	mvn.w	r6, #32768	; 0x8000
  const std::int64_t wide_shifted = wide_a * (1 << offset);
   1fb6c:	00bb      	lsls	r3, r7, #2
             ? min
   1fb6e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
  const std::int64_t wide_shifted = wide_a * (1 << offset);
   1fb72:	0082      	lsls	r2, r0, #2
   1fb74:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
             ? min
   1fb78:	4296      	cmp	r6, r2
   1fb7a:	eb77 0003 	sbcs.w	r0, r7, r3
   1fb7e:	da16      	bge.n	1fbae <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EsLi1EE4evalEs+0x5e>
             : wide_shifted > max ? max
   1fb80:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1fb84:	f173 0000 	sbcs.w	r0, r3, #0
   1fb88:	da13      	bge.n	1fbb2 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EsLi1EE4evalEs+0x62>
   1fb8a:	b212      	sxth	r2, r2
  return ~a;
   1fb8c:	43e0      	mvns	r0, r4
  return a & b;
   1fb8e:	4002      	ands	r2, r0
  return ~a;
   1fb90:	43c8      	mvns	r0, r1
  return a & b;
   1fb92:	f3c4 040e 	ubfx	r4, r4, #0, #15
  return a ^ b;
   1fb96:	4062      	eors	r2, r4
  return a & b;
   1fb98:	4002      	ands	r2, r0
   1fb9a:	f421 40ff 	bic.w	r0, r1, #32640	; 0x7f80
   1fb9e:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
  }
   1fba2:	4050      	eors	r0, r2
   1fba4:	bdd0      	pop	{r4, r6, r7, pc}
  return a ? BitNot(zero) : zero;
   1fba6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1fbaa:	2100      	movs	r1, #0
   1fbac:	e7db      	b.n	1fb66 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EsLi1EE4evalEs+0x16>
             ? min
   1fbae:	4a02      	ldr	r2, [pc, #8]	; (1fbb8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EsLi1EE4evalEs+0x68>)
   1fbb0:	e7ec      	b.n	1fb8c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EsLi1EE4evalEs+0x3c>
             : wide_shifted > max ? max
   1fbb2:	f647 72ff 	movw	r2, #32767	; 0x7fff
   1fbb6:	e7e9      	b.n	1fb8c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EsLi1EE4evalEs+0x3c>
   1fbb8:	ffff8000 	.word	0xffff8000

0001fbbc <_ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IsEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> one_minus_x_over_one_plus_x_for_x_in_0_1(
   1fbbc:	b570      	push	{r4, r5, r6, lr}
  std::int32_t sum = a32 + b32;
   1fbbe:	f647 75ff 	movw	r5, #32767	; 0x7fff
   1fbc2:	fa05 f080 	sxtah	r0, r5, r0
  std::int32_t sign = sum >= 0 ? 1 : -1;
   1fbc6:	1c43      	adds	r3, r0, #1
   1fbc8:	bf14      	ite	ne
   1fbca:	2501      	movne	r5, #1
   1fbcc:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
  return static_cast<std::int16_t>((sum + sign) / 2);
   1fbd0:	4405      	add	r5, r0
   1fbd2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   1fbd6:	f345 054f 	sbfx	r5, r5, #1, #16
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   1fbda:	4628      	mov	r0, r5
   1fbdc:	490e      	ldr	r1, [pc, #56]	; (1fc18 <_ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IsEENS_10FixedPointIT_Li0EEES3_+0x5c>)
   1fbde:	f7fb f997 	bl	1af10 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIsEET_S1_S1_>
  return a + b;
   1fbe2:	2603      	movs	r6, #3
   1fbe4:	f500 40b4 	add.w	r0, r0, #23040	; 0x5a00
   1fbe8:	305a      	adds	r0, #90	; 0x5a
   1fbea:	b204      	sxth	r4, r0
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   1fbec:	4621      	mov	r1, r4
   1fbee:	4628      	mov	r0, r5
   1fbf0:	f7fb f98e 	bl	1af10 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIsEET_S1_S1_>
  return a - b;
   1fbf4:	f5c0 5000 	rsb	r0, r0, #8192	; 0x2000
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   1fbf8:	b201      	sxth	r1, r0
   1fbfa:	4620      	mov	r0, r4
   1fbfc:	f7fb f988 	bl	1af10 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIsEET_S1_S1_>
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
   1fc00:	f7ff ffa6 	bl	1fb50 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EsLi1EE4evalEs>
  for (int i = 0; i < 3; i++) {
   1fc04:	3e01      	subs	r6, #1
  return a + b;
   1fc06:	4420      	add	r0, r4
   1fc08:	b204      	sxth	r4, r0
  for (int i = 0; i < 3; i++) {
   1fc0a:	d1ef      	bne.n	1fbec <_ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IsEENS_10FixedPointIT_Li0EEES3_+0x30>
  return a - b;
   1fc0c:	f5a4 5000 	sub.w	r0, r4, #8192	; 0x2000
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
   1fc10:	b200      	sxth	r0, r0
   1fc12:	f7ff ff9d 	bl	1fb50 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EsLi1EE4evalEs>
}
   1fc16:	bd70      	pop	{r4, r5, r6, pc}
   1fc18:	ffffc3c4 	.word	0xffffc3c4

0001fc1c <_ZN6tflite13reference_ops4TanhERKNS_10TanhParamsERKNS_12RuntimeShapeEPKsS6_Ps>:
  Tanh(input_shape, input_data, output_shape, output_data);
}

inline void Tanh(const TanhParams& params, const RuntimeShape& input_shape,
                 const int16* input_data, const RuntimeShape& output_shape,
                 int16* output_data) {
   1fc1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fc20:	4604      	mov	r4, r0
  const int input_left_shift = params.input_left_shift;
   1fc22:	68e4      	ldr	r4, [r4, #12]
                 int16* output_data) {
   1fc24:	4608      	mov	r0, r1
  // Support for shifts is limited until we have a parameterized version of
  // SaturatingRoundingMultiplyByPOT().
  TFLITE_DCHECK_GE(input_left_shift, 0);
  TFLITE_DCHECK_LE(input_left_shift, 1);
   1fc26:	2c01      	cmp	r4, #1
                 int16* output_data) {
   1fc28:	4693      	mov	fp, r2
   1fc2a:	4619      	mov	r1, r3
  TFLITE_DCHECK_LE(input_left_shift, 1);
   1fc2c:	d901      	bls.n	1fc32 <_ZN6tflite13reference_ops4TanhERKNS_10TanhParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x16>
  TFLITE_DCHECK_GE(input_left_shift, 0);
   1fc2e:	f011 f8c4 	bl	30dba <abort>

  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   1fc32:	f007 fcda 	bl	275ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
   1fc36:	4682      	mov	sl, r0
  // whose range is in [-1, 1].
  using F0 = gemmlowp::FixedPoint<std::int16_t, 0>;
  // F3 uses 3 integer bits, range [-8, 8], the input range expected here.
  using F3 = gemmlowp::FixedPoint<std::int16_t, 3>;

  if (input_left_shift == 0) {
   1fc38:	b954      	cbnz	r4, 1fc50 <_ZN6tflite13reference_ops4TanhERKNS_10TanhParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x34>
    for (int i = 0; i < flat_size; i++) {
   1fc3a:	4554      	cmp	r4, sl
   1fc3c:	da4e      	bge.n	1fcdc <_ZN6tflite13reference_ops4TanhERKNS_10TanhParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xc0>
      F3 input = F3::FromRaw(input_data[i]);
      F0 output = gemmlowp::tanh(input);
   1fc3e:	f83b 0014 	ldrh.w	r0, [fp, r4, lsl #1]
   1fc42:	f010 f92a 	bl	2fe9a <_ZN8gemmlowp4tanhIsLi3EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
      output_data[i] = output.raw();
   1fc46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1fc48:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
    for (int i = 0; i < flat_size; i++) {
   1fc4c:	3401      	adds	r4, #1
   1fc4e:	e7f4      	b.n	1fc3a <_ZN6tflite13reference_ops4TanhERKNS_10TanhParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1e>
    }
  } else {
    for (int i = 0; i < flat_size; i++) {
   1fc50:	2300      	movs	r3, #0
             ? min
   1fc52:	f46f 4800 	mvn.w	r8, #32768	; 0x8000
   1fc56:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
  return a ? BitNot(zero) : zero;
   1fc5a:	4922      	ldr	r1, [pc, #136]	; (1fce4 <_ZN6tflite13reference_ops4TanhERKNS_10TanhParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xc8>)
             ? min
   1fc5c:	4a22      	ldr	r2, [pc, #136]	; (1fce8 <_ZN6tflite13reference_ops4TanhERKNS_10TanhParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xcc>)
   1fc5e:	4553      	cmp	r3, sl
   1fc60:	da3c      	bge.n	1fcdc <_ZN6tflite13reference_ops4TanhERKNS_10TanhParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xc0>
      F3 input = F3::FromRaw(
          gemmlowp::SaturatingRoundingMultiplyByPOT<1>(input_data[i]));
   1fc62:	f93b 4013 	ldrsh.w	r4, [fp, r3, lsl #1]
  return a ? BitNot(zero) : zero;
   1fc66:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
   1fc6a:	da2d      	bge.n	1fcc8 <_ZN6tflite13reference_ops4TanhERKNS_10TanhParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xac>
   1fc6c:	428c      	cmp	r4, r1
   1fc6e:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   1fc72:	f04f 0000 	mov.w	r0, #0
   1fc76:	bfa8      	it	ge
   1fc78:	f04f 0c00 	movge.w	ip, #0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
   1fc7c:	1926      	adds	r6, r4, r4
   1fc7e:	ea4f 75e4 	mov.w	r5, r4, asr #31
   1fc82:	eb45 0705 	adc.w	r7, r5, r5
             ? min
   1fc86:	45b0      	cmp	r8, r6
   1fc88:	eb79 0407 	sbcs.w	r4, r9, r7
   1fc8c:	da21      	bge.n	1fcd2 <_ZN6tflite13reference_ops4TanhERKNS_10TanhParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xb6>
             : wide_shifted > max ? max
   1fc8e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1fc92:	f177 0400 	sbcs.w	r4, r7, #0
   1fc96:	da1e      	bge.n	1fcd6 <_ZN6tflite13reference_ops4TanhERKNS_10TanhParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xba>
   1fc98:	b234      	sxth	r4, r6
  return ~a;
   1fc9a:	43c5      	mvns	r5, r0
  return a & b;
   1fc9c:	f3c0 000e 	ubfx	r0, r0, #0, #15
   1fca0:	402c      	ands	r4, r5
  return a ^ b;
   1fca2:	4044      	eors	r4, r0
  return ~a;
   1fca4:	ea6f 000c 	mvn.w	r0, ip
  return a & b;
   1fca8:	4004      	ands	r4, r0
   1fcaa:	ea0c 0002 	and.w	r0, ip, r2
      F0 output = gemmlowp::tanh(input);
   1fcae:	4060      	eors	r0, r4
   1fcb0:	9301      	str	r3, [sp, #4]
   1fcb2:	f010 f8f2 	bl	2fe9a <_ZN8gemmlowp4tanhIsLi3EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
      output_data[i] = output.raw();
   1fcb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    for (int i = 0; i < flat_size; i++) {
   1fcb8:	490a      	ldr	r1, [pc, #40]	; (1fce4 <_ZN6tflite13reference_ops4TanhERKNS_10TanhParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xc8>)
      output_data[i] = output.raw();
   1fcba:	461a      	mov	r2, r3
   1fcbc:	9b01      	ldr	r3, [sp, #4]
   1fcbe:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
    for (int i = 0; i < flat_size; i++) {
   1fcc2:	4a09      	ldr	r2, [pc, #36]	; (1fce8 <_ZN6tflite13reference_ops4TanhERKNS_10TanhParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xcc>)
   1fcc4:	3301      	adds	r3, #1
   1fcc6:	e7ca      	b.n	1fc5e <_ZN6tflite13reference_ops4TanhERKNS_10TanhParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x42>
  return a ? BitNot(zero) : zero;
   1fcc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1fccc:	f04f 0c00 	mov.w	ip, #0
   1fcd0:	e7d4      	b.n	1fc7c <_ZN6tflite13reference_ops4TanhERKNS_10TanhParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x60>
             ? min
   1fcd2:	4614      	mov	r4, r2
   1fcd4:	e7e1      	b.n	1fc9a <_ZN6tflite13reference_ops4TanhERKNS_10TanhParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x7e>
             : wide_shifted > max ? max
   1fcd6:	f647 74ff 	movw	r4, #32767	; 0x7fff
   1fcda:	e7de      	b.n	1fc9a <_ZN6tflite13reference_ops4TanhERKNS_10TanhParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x7e>
    }
  }
}
   1fcdc:	b003      	add	sp, #12
   1fcde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fce2:	bf00      	nop
   1fce4:	ffffc001 	.word	0xffffc001
   1fce8:	ffff8000 	.word	0xffff8000

0001fcec <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus TanhEval(TfLiteContext* context, TfLiteNode* node) {
   1fcec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1fcf0:	680b      	ldr	r3, [r1, #0]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
   1fcf2:	684a      	ldr	r2, [r1, #4]
  return &context->tensors[node->inputs->data[index]];
   1fcf4:	685d      	ldr	r5, [r3, #4]
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   1fcf6:	681b      	ldr	r3, [r3, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1fcf8:	f8d0 8008 	ldr.w	r8, [r0, #8]
  return &context->tensors[node->outputs->data[index]];
   1fcfc:	6854      	ldr	r4, [r2, #4]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   1fcfe:	2b01      	cmp	r3, #1
  return &context->tensors[node->inputs->data[index]];
   1fd00:	ea4f 1985 	mov.w	r9, r5, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1fd04:	ea4f 1a84 	mov.w	sl, r4, lsl #6
TfLiteStatus TanhEval(TfLiteContext* context, TfLiteNode* node) {
   1fd08:	4606      	mov	r6, r0
   1fd0a:	b09b      	sub	sp, #108	; 0x6c
  return &context->tensors[node->inputs->data[index]];
   1fd0c:	eb08 1585 	add.w	r5, r8, r5, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1fd10:	eb08 1484 	add.w	r4, r8, r4, lsl #6
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   1fd14:	d01c      	beq.n	1fd50 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x64>
   1fd16:	2201      	movs	r2, #1
   1fd18:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1fd1c:	4b99      	ldr	r3, [pc, #612]	; (1ff84 <__kernel_ram_size+0x104>)
   1fd1e:	9301      	str	r3, [sp, #4]
   1fd20:	4b99      	ldr	r3, [pc, #612]	; (1ff88 <__kernel_ram_size+0x108>)
   1fd22:	9300      	str	r3, [sp, #0]
   1fd24:	232d      	movs	r3, #45	; 0x2d
   1fd26:	6947      	ldr	r7, [r0, #20]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   1fd28:	4a98      	ldr	r2, [pc, #608]	; (1ff8c <__kernel_ram_size+0x10c>)
   1fd2a:	4999      	ldr	r1, [pc, #612]	; (1ff90 <__kernel_ram_size+0x110>)
   1fd2c:	47b8      	blx	r7
  switch (input->type) {
   1fd2e:	f818 0009 	ldrb.w	r0, [r8, r9]
   1fd32:	1e43      	subs	r3, r0, #1
   1fd34:	2b08      	cmp	r3, #8
   1fd36:	f200 8114 	bhi.w	1ff62 <__kernel_ram_size+0xe2>
   1fd3a:	e8df f013 	tbh	[pc, r3, lsl #1]
   1fd3e:	004e      	.short	0x004e
   1fd40:	00860112 	.word	0x00860112
   1fd44:	01120112 	.word	0x01120112
   1fd48:	00690112 	.word	0x00690112
   1fd4c:	00c30112 	.word	0x00c30112
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   1fd50:	6812      	ldr	r2, [r2, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   1fd52:	2a01      	cmp	r2, #1
   1fd54:	d008      	beq.n	1fd68 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x7c>
   1fd56:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1fd5a:	4b8a      	ldr	r3, [pc, #552]	; (1ff84 <__kernel_ram_size+0x104>)
   1fd5c:	9301      	str	r3, [sp, #4]
   1fd5e:	4b8d      	ldr	r3, [pc, #564]	; (1ff94 <__kernel_ram_size+0x114>)
   1fd60:	9300      	str	r3, [sp, #0]
   1fd62:	6947      	ldr	r7, [r0, #20]
   1fd64:	232e      	movs	r3, #46	; 0x2e
   1fd66:	e7df      	b.n	1fd28 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x3c>
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
   1fd68:	f818 0009 	ldrb.w	r0, [r8, r9]
   1fd6c:	f818 300a 	ldrb.w	r3, [r8, sl]
   1fd70:	4283      	cmp	r3, r0
   1fd72:	d014      	beq.n	1fd9e <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0xb2>
   1fd74:	f8d6 b014 	ldr.w	fp, [r6, #20]
   1fd78:	f7ec ffa4 	bl	ccc4 <TfLiteTypeGetName>
   1fd7c:	4607      	mov	r7, r0
   1fd7e:	f818 000a 	ldrb.w	r0, [r8, sl]
   1fd82:	f7ec ff9f 	bl	ccc4 <TfLiteTypeGetName>
   1fd86:	4b84      	ldr	r3, [pc, #528]	; (1ff98 <__kernel_ram_size+0x118>)
   1fd88:	e9cd 7002 	strd	r7, r0, [sp, #8]
   1fd8c:	9301      	str	r3, [sp, #4]
   1fd8e:	4b83      	ldr	r3, [pc, #524]	; (1ff9c <__kernel_ram_size+0x11c>)
   1fd90:	4630      	mov	r0, r6
   1fd92:	9300      	str	r3, [sp, #0]
   1fd94:	4a7d      	ldr	r2, [pc, #500]	; (1ff8c <__kernel_ram_size+0x10c>)
   1fd96:	2332      	movs	r3, #50	; 0x32
   1fd98:	4981      	ldr	r1, [pc, #516]	; (1ffa0 <__kernel_ram_size+0x120>)
   1fd9a:	47d8      	blx	fp
   1fd9c:	e7c7      	b.n	1fd2e <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x42>
  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8) {
   1fd9e:	2b03      	cmp	r3, #3
   1fda0:	d001      	beq.n	1fda6 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0xba>
   1fda2:	2b09      	cmp	r3, #9
   1fda4:	d1c3      	bne.n	1fd2e <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x42>
        static_cast<double>(input->params.scale) *
   1fda6:	68e8      	ldr	r0, [r5, #12]
   1fda8:	f7ec fbae 	bl	c508 <__aeabi_f2d>
    const double input_real_multiplier =
   1fdac:	4b7d      	ldr	r3, [pc, #500]	; (1ffa4 <__kernel_ram_size+0x124>)
   1fdae:	2200      	movs	r2, #0
   1fdb0:	f7f0 fb7c 	bl	104ac <__aeabi_dmul>
    const double q = std::frexp(input_real_multiplier, &data->input_left_shift);
   1fdb4:	aa09      	add	r2, sp, #36	; 0x24
   1fdb6:	f002 fe23 	bl	22a00 <frexp>
    data->input_multiplier = static_cast<int32_t>(TfLiteRound(q * (1ll << 31)));
   1fdba:	2200      	movs	r2, #0
   1fdbc:	4b7a      	ldr	r3, [pc, #488]	; (1ffa8 <__kernel_ram_size+0x128>)
   1fdbe:	f7f0 fb75 	bl	104ac <__aeabi_dmul>
   1fdc2:	f002 fe83 	bl	22acc <round>
   1fdc6:	f7f0 fe0b 	bl	109e0 <__aeabi_d2iz>
        CalculateInputRadius(kInputIntegerBits, data->input_left_shift, 31);
   1fdca:	221f      	movs	r2, #31
    data->input_multiplier = static_cast<int32_t>(TfLiteRound(q * (1ll << 31)));
   1fdcc:	9008      	str	r0, [sp, #32]
        CalculateInputRadius(kInputIntegerBits, data->input_left_shift, 31);
   1fdce:	9909      	ldr	r1, [sp, #36]	; 0x24
   1fdd0:	2004      	movs	r0, #4
   1fdd2:	f010 f942 	bl	3005a <_ZN6tflite20CalculateInputRadiusEiii>
    data->input_range_radius =
   1fdd6:	9007      	str	r0, [sp, #28]
   1fdd8:	e7a9      	b.n	1fd2e <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x42>
      reference_ops::Tanh(GetTensorShape(input), GetTensorData<float>(input),
   1fdda:	4629      	mov	r1, r5
   1fddc:	a80e      	add	r0, sp, #56	; 0x38
   1fdde:	f007 fc2d 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                          GetTensorShape(output), GetTensorData<float>(output));
   1fde2:	4621      	mov	r1, r4
   1fde4:	a814      	add	r0, sp, #80	; 0x50
   1fde6:	686d      	ldr	r5, [r5, #4]
   1fde8:	f007 fc28 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1fdec:	b104      	cbz	r4, 1fdf0 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x104>
   1fdee:	6864      	ldr	r4, [r4, #4]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   1fdf0:	a914      	add	r1, sp, #80	; 0x50
   1fdf2:	a80e      	add	r0, sp, #56	; 0x38
   1fdf4:	f007 fbf9 	bl	275ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
  for (int i = 0; i < flat_size; i++) {
   1fdf8:	2600      	movs	r6, #0
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   1fdfa:	4607      	mov	r7, r0
  for (int i = 0; i < flat_size; i++) {
   1fdfc:	42b7      	cmp	r7, r6
   1fdfe:	dd1c      	ble.n	1fe3a <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x14e>
  { return __builtin_tanhf(__x); }
   1fe00:	f855 0b04 	ldr.w	r0, [r5], #4
   1fe04:	f002 ffba 	bl	22d7c <tanhf>
   1fe08:	3601      	adds	r6, #1
    output_data[i] = result;
   1fe0a:	f844 0b04 	str.w	r0, [r4], #4
  for (int i = 0; i < flat_size; i++) {
   1fe0e:	e7f5      	b.n	1fdfc <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x110>
      params.input_left_shift = data.input_left_shift;
   1fe10:	9b09      	ldr	r3, [sp, #36]	; 0x24
      reference_ops::Tanh(params, GetTensorShape(input),
   1fe12:	4629      	mov	r1, r5
   1fe14:	a80e      	add	r0, sp, #56	; 0x38
      params.input_left_shift = data.input_left_shift;
   1fe16:	930d      	str	r3, [sp, #52]	; 0x34
      reference_ops::Tanh(params, GetTensorShape(input),
   1fe18:	f007 fc10 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1fe1c:	686a      	ldr	r2, [r5, #4]
                          GetTensorData<int16_t>(input), GetTensorShape(output),
   1fe1e:	4621      	mov	r1, r4
   1fe20:	a814      	add	r0, sp, #80	; 0x50
   1fe22:	9204      	str	r2, [sp, #16]
   1fe24:	f007 fc0a 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1fe28:	9a04      	ldr	r2, [sp, #16]
   1fe2a:	b104      	cbz	r4, 1fe2e <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x142>
   1fe2c:	6864      	ldr	r4, [r4, #4]
      reference_ops::Tanh(params, GetTensorShape(input),
   1fe2e:	9400      	str	r4, [sp, #0]
   1fe30:	ab14      	add	r3, sp, #80	; 0x50
   1fe32:	a90e      	add	r1, sp, #56	; 0x38
   1fe34:	a80a      	add	r0, sp, #40	; 0x28
   1fe36:	f7ff fef1 	bl	1fc1c <_ZN6tflite13reference_ops4TanhERKNS_10TanhParamsERKNS_12RuntimeShapeEPKsS6_Ps>
                          GetTensorData<uint8_t>(input), GetTensorShape(output),
   1fe3a:	a814      	add	r0, sp, #80	; 0x50
   1fe3c:	f007 fbb9 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
      reference_ops::Tanh(params, GetTensorShape(input),
   1fe40:	a80e      	add	r0, sp, #56	; 0x38
   1fe42:	f007 fbb6 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
      return kTfLiteOk;
   1fe46:	2000      	movs	r0, #0
   1fe48:	e099      	b.n	1ff7e <__kernel_ram_size+0xfe>
      params.input_left_shift = data.input_left_shift;
   1fe4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
      reference_ops::Tanh(params, GetTensorShape(input),
   1fe4c:	4629      	mov	r1, r5
      params.input_multiplier = data.input_multiplier;
   1fe4e:	e9dd 6807 	ldrd	r6, r8, [sp, #28]
      reference_ops::Tanh(params, GetTensorShape(input),
   1fe52:	a80e      	add	r0, sp, #56	; 0x38
      params.input_zero_point = input->params.zero_point;
   1fe54:	692f      	ldr	r7, [r5, #16]
      params.input_left_shift = data.input_left_shift;
   1fe56:	9304      	str	r3, [sp, #16]
      reference_ops::Tanh(params, GetTensorShape(input),
   1fe58:	f007 fbf0 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                          GetTensorData<uint8_t>(input), GetTensorShape(output),
   1fe5c:	4621      	mov	r1, r4
   1fe5e:	a814      	add	r0, sp, #80	; 0x50
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1fe60:	f8d5 a004 	ldr.w	sl, [r5, #4]
   1fe64:	f007 fbea 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1fe68:	b104      	cbz	r4, 1fe6c <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x180>
   1fe6a:	6864      	ldr	r4, [r4, #4]
  const int32 input_zero_point = params.input_zero_point;
  const int32 input_range_radius = params.input_range_radius;
  const int32 input_multiplier = params.input_multiplier;
  const int input_left_shift = params.input_left_shift;
  const int32 output_zero_point = 128;
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   1fe6c:	a914      	add	r1, sp, #80	; 0x50
   1fe6e:	a80e      	add	r0, sp, #56	; 0x38
   1fe70:	f007 fbbb 	bl	275ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>

  for (int i = 0; i < flat_size; i++) {
   1fe74:	2500      	movs	r5, #0
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   1fe76:	4683      	mov	fp, r0
    const uint8 input_val_u8 = input_data[i];
    const int32 input_val_centered =
        static_cast<int32>(input_val_u8) - input_zero_point;
    uint8 output_val;
    if (input_val_centered <= -input_range_radius) {
   1fe78:	f1c6 0900 	rsb	r9, r6, #0
  for (int i = 0; i < flat_size; i++) {
   1fe7c:	45ab      	cmp	fp, r5
   1fe7e:	dddc      	ble.n	1fe3a <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x14e>
        static_cast<int32>(input_val_u8) - input_zero_point;
   1fe80:	f81a 0005 	ldrb.w	r0, [sl, r5]
    const int32 input_val_centered =
   1fe84:	1bc0      	subs	r0, r0, r7
    if (input_val_centered <= -input_range_radius) {
   1fe86:	4548      	cmp	r0, r9
   1fe88:	dd18      	ble.n	1febc <__kernel_ram_size+0x3c>
      output_val = 0;
    } else if (input_val_centered >= input_range_radius) {
   1fe8a:	4286      	cmp	r6, r0
   1fe8c:	dd18      	ble.n	1fec0 <__kernel_ram_size+0x40>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
   1fe8e:	9b04      	ldr	r3, [sp, #16]
   1fe90:	4641      	mov	r1, r8
   1fe92:	4098      	lsls	r0, r3
   1fe94:	f7fb f99e 	bl	1b1d4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
          MultiplyByQuantizedMultiplierGreaterThanOne(
              input_val_centered, input_multiplier, input_left_shift);
      using FixedPoint4 = gemmlowp::FixedPoint<int32, 4>;
      using FixedPoint0 = gemmlowp::FixedPoint<int32, 0>;
      const FixedPoint4 input_val_f4 = FixedPoint4::FromRaw(input_val_rescaled);
      const FixedPoint0 output_val_f0 = gemmlowp::tanh(input_val_f4);
   1fe98:	f00f ffd7 	bl	2fe4a <_ZN8gemmlowp4tanhIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
      // Convert from Q0.31 to Q24.7.
      using gemmlowp::RoundingDivideByPOT;
      int32 output_val_s32 = RoundingDivideByPOT(output_val_f0.raw(), 24);
   1fe9c:	2118      	movs	r1, #24
   1fe9e:	f7fb f9d1 	bl	1b244 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
      output_val_s32 += output_zero_point;
      if (output_val_s32 == 256) {
   1fea2:	2880      	cmp	r0, #128	; 0x80
      output_val_s32 += output_zero_point;
   1fea4:	f100 0380 	add.w	r3, r0, #128	; 0x80
      if (output_val_s32 == 256) {
   1fea8:	d104      	bne.n	1feb4 <__kernel_ram_size+0x34>
        output_val_s32 = 255;
   1feaa:	23ff      	movs	r3, #255	; 0xff
      }
      // Reinterpret as Q0.7, encoded in uint8.
      TFLITE_DCHECK_GE(output_val_s32, 0);
      TFLITE_DCHECK_LE(output_val_s32, 255);
      output_val = static_cast<uint8>(output_val_s32);
   1feac:	b2db      	uxtb	r3, r3
    }
    output_data[i] = output_val;
   1feae:	5563      	strb	r3, [r4, r5]
  for (int i = 0; i < flat_size; i++) {
   1feb0:	3501      	adds	r5, #1
   1feb2:	e7e3      	b.n	1fe7c <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x190>
      TFLITE_DCHECK_LE(output_val_s32, 255);
   1feb4:	2bff      	cmp	r3, #255	; 0xff
   1feb6:	d9f9      	bls.n	1feac <__kernel_ram_size+0x2c>
      TFLITE_DCHECK_GE(output_val_s32, 0);
   1feb8:	f010 ff7f 	bl	30dba <abort>
      output_val = 0;
   1febc:	2300      	movs	r3, #0
   1febe:	e7f6      	b.n	1feae <__kernel_ram_size+0x2e>
      output_val = 255;
   1fec0:	23ff      	movs	r3, #255	; 0xff
   1fec2:	e7f4      	b.n	1feae <__kernel_ram_size+0x2e>
  for (int i = 0; i < dims->size; ++i) {
   1fec4:	f04f 0900 	mov.w	r9, #0
      reference_integer_ops::Tanh(
   1fec8:	e9dd 6807 	ldrd	r6, r8, [sp, #28]
  int64_t count = 1;
   1fecc:	2201      	movs	r2, #1
   1fece:	2300      	movs	r3, #0
  for (int i = 0; i < dims->size; ++i) {
   1fed0:	f8d5 e008 	ldr.w	lr, [r5, #8]
          input->params.zero_point, data.input_range_radius,
   1fed4:	692f      	ldr	r7, [r5, #16]
      reference_integer_ops::Tanh(
   1fed6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   1feda:	f85e bb04 	ldr.w	fp, [lr], #4
   1fede:	45cb      	cmp	fp, r9
   1fee0:	dd0c      	ble.n	1fefc <__kernel_ram_size+0x7c>
    count *= dims->data[i];
   1fee2:	f85e ab04 	ldr.w	sl, [lr], #4
  for (int i = 0; i < dims->size; ++i) {
   1fee6:	f109 0901 	add.w	r9, r9, #1
    count *= dims->data[i];
   1feea:	4650      	mov	r0, sl
   1feec:	17c1      	asrs	r1, r0, #31
   1feee:	4351      	muls	r1, r2
   1fef0:	fb0a 1103 	mla	r1, sl, r3, r1
   1fef4:	fba2 230a 	umull	r2, r3, r2, sl
   1fef8:	440b      	add	r3, r1
  for (int i = 0; i < dims->size; ++i) {
   1fefa:	e7f0      	b.n	1fede <__kernel_ram_size+0x5e>
   1fefc:	4692      	mov	sl, r2
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1fefe:	686b      	ldr	r3, [r5, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1ff00:	b104      	cbz	r4, 1ff04 <__kernel_ram_size+0x84>
   1ff02:	6864      	ldr	r4, [r4, #4]
  static constexpr int32_t kOutputScale = 7;
  static constexpr int32_t kMinInt8 = std::numeric_limits<int8_t>::min();
  static constexpr int32_t kMaxInt8 = std::numeric_limits<int8_t>::max();
  using F4 = gemmlowp::FixedPoint<int32_t, kInputIntegerBits>;

  for (int i = 0; i < input_size; ++i) {
   1ff04:	f1bc 0f00 	cmp.w	ip, #0
  int right_shift = shift > 0 ? 0 : -shift;
   1ff08:	f1cc 0900 	rsb	r9, ip, #0
   1ff0c:	f04f 0500 	mov.w	r5, #0
   1ff10:	bfc8      	it	gt
   1ff12:	f04f 0900 	movgt.w	r9, #0
    const int32_t input =
        static_cast<int32_t>(input_data[i]) - input_zero_point;
    if (input <= -input_range_radius) {
   1ff16:	f1c6 0b00 	rsb	fp, r6, #0
  int left_shift = shift > 0 ? shift : 0;
   1ff1a:	ea2c 72ec 	bic.w	r2, ip, ip, asr #31
  for (int i = 0; i < input_size; ++i) {
   1ff1e:	45aa      	cmp	sl, r5
   1ff20:	dd91      	ble.n	1fe46 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x15a>
        static_cast<int32_t>(input_data[i]) - input_zero_point;
   1ff22:	5758      	ldrsb	r0, [r3, r5]
    const int32_t input =
   1ff24:	1bc0      	subs	r0, r0, r7
    if (input <= -input_range_radius) {
   1ff26:	4558      	cmp	r0, fp
   1ff28:	dc03      	bgt.n	1ff32 <__kernel_ram_size+0xb2>
      output_data[i] = kMinInt8;
   1ff2a:	2180      	movs	r1, #128	; 0x80
    } else if (input >= input_range_radius) {
      output_data[i] = kMaxInt8;
   1ff2c:	5561      	strb	r1, [r4, r5]
  for (int i = 0; i < input_size; ++i) {
   1ff2e:	3501      	adds	r5, #1
   1ff30:	e7f5      	b.n	1ff1e <__kernel_ram_size+0x9e>
    } else if (input >= input_range_radius) {
   1ff32:	4286      	cmp	r6, r0
   1ff34:	dc01      	bgt.n	1ff3a <__kernel_ram_size+0xba>
      output_data[i] = kMaxInt8;
   1ff36:	217f      	movs	r1, #127	; 0x7f
   1ff38:	e7f8      	b.n	1ff2c <__kernel_ram_size+0xac>
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
   1ff3a:	4090      	lsls	r0, r2
   1ff3c:	4641      	mov	r1, r8
   1ff3e:	9305      	str	r3, [sp, #20]
   1ff40:	9204      	str	r2, [sp, #16]
   1ff42:	f7fb f947 	bl	1b1d4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
   1ff46:	4649      	mov	r1, r9
   1ff48:	f7fb f97c 	bl	1b244 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
    } else {
      const int32_t input_in_q4 =
          MultiplyByQuantizedMultiplier(input, input_multiplier, input_shift);
      const int32_t output_in_q0 =
          gemmlowp::tanh(F4::FromRaw(input_in_q4)).raw();
   1ff4c:	f00f ff7d 	bl	2fe4a <_ZN8gemmlowp4tanhIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>

      // Rescale and downcast.
      using gemmlowp::RoundingDivideByPOT;
      int32_t output_in_q24 =
          RoundingDivideByPOT(output_in_q0, 31 - kOutputScale);
   1ff50:	2118      	movs	r1, #24
   1ff52:	f7fb f977 	bl	1b244 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
      output_in_q24 = std::min(std::max(output_in_q24, kMinInt8), kMaxInt8);
      output_data[i] = static_cast<int8_t>(output_in_q24);
   1ff56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1ff5a:	f300 0007 	ssat	r0, #8, r0
   1ff5e:	5560      	strb	r0, [r4, r5]
   1ff60:	e7e5      	b.n	1ff2e <__kernel_ram_size+0xae>
      TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
   1ff62:	6974      	ldr	r4, [r6, #20]
   1ff64:	f7ec feae 	bl	ccc4 <TfLiteTypeGetName>
   1ff68:	9004      	str	r0, [sp, #16]
   1ff6a:	f818 000a 	ldrb.w	r0, [r8, sl]
   1ff6e:	f7ec fea9 	bl	ccc4 <TfLiteTypeGetName>
   1ff72:	9a04      	ldr	r2, [sp, #16]
   1ff74:	4603      	mov	r3, r0
   1ff76:	490d      	ldr	r1, [pc, #52]	; (1ffac <__kernel_ram_size+0x12c>)
   1ff78:	4630      	mov	r0, r6
   1ff7a:	47a0      	blx	r4
      return kTfLiteError;
   1ff7c:	2001      	movs	r0, #1
}
   1ff7e:	b01b      	add	sp, #108	; 0x6c
   1ff80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ff84:	00035814 	.word	0x00035814
   1ff88:	00034a96 	.word	0x00034a96
   1ff8c:	00036065 	.word	0x00036065
   1ff90:	00034a7c 	.word	0x00034a7c
   1ff94:	00034aa6 	.word	0x00034aa6
   1ff98:	00035387 	.word	0x00035387
   1ff9c:	0003539f 	.word	0x0003539f
   1ffa0:	00034ab7 	.word	0x00034ab7
   1ffa4:	41a00000 	.word	0x41a00000
   1ffa8:	41e00000 	.word	0x41e00000
   1ffac:	0003501f 	.word	0x0003501f

0001ffb0 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
  }

  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1ffb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ffb4:	b085      	sub	sp, #20
  TfLiteUnpackParams* data =
      reinterpret_cast<TfLiteUnpackParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1ffb6:	6883      	ldr	r3, [r0, #8]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1ffb8:	9002      	str	r0, [sp, #8]
  return &context->tensors[node->inputs->data[index]];
   1ffba:	6808      	ldr	r0, [r1, #0]
  TfLiteUnpackParams* data =
   1ffbc:	694a      	ldr	r2, [r1, #20]
   1ffbe:	6847      	ldr	r7, [r0, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1ffc0:	9301      	str	r3, [sp, #4]
   1ffc2:	01b8      	lsls	r0, r7, #6

  switch (input->type) {
   1ffc4:	5c18      	ldrb	r0, [r3, r0]
   1ffc6:	eb03 1787 	add.w	r7, r3, r7, lsl #6
   1ffca:	1e45      	subs	r5, r0, #1
   1ffcc:	2d08      	cmp	r5, #8
   1ffce:	f200 81b6 	bhi.w	2033e <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x38e>
   1ffd2:	e8df f015 	tbh	[pc, r5, lsl #1]
   1ffd6:	0009      	.short	0x0009
   1ffd8:	00dc0075 	.word	0x00dc0075
   1ffdc:	01b401b4 	.word	0x01b401b4
   1ffe0:	01b401b4 	.word	0x01b401b4
   1ffe4:	014801b4 	.word	0x014801b4
  const TfLiteIntArray* input_dims = input->dims;
   1ffe8:	68bd      	ldr	r5, [r7, #8]
  const TfLiteTensor* output0 = GetOutput(context, node, 0);
   1ffea:	6848      	ldr	r0, [r1, #4]
  const int dimensions = input_dims->size;
   1ffec:	f8d5 e000 	ldr.w	lr, [r5]
    case kTfLiteFloat32: {
      return UnpackImpl<float>(context, node, input, data->num, data->axis);
   1fff0:	e9d2 9200 	ldrd	r9, r2, [r2]
  return &context->tensors[node->outputs->data[index]];
   1fff4:	6841      	ldr	r1, [r0, #4]
  if (axis < 0) {
   1fff6:	2a00      	cmp	r2, #0
  const TfLiteIntArray* output_dims = output0->dims;
   1fff8:	9b01      	ldr	r3, [sp, #4]
    axis += NumDimensions(input);
   1fffa:	bfb8      	it	lt
   1fffc:	4472      	addlt	r2, lr
  const TfLiteIntArray* output_dims = output0->dims;
   1fffe:	eb03 1181 	add.w	r1, r3, r1, lsl #6
  TFLITE_DCHECK_LT(axis, dimensions);
   20002:	4596      	cmp	lr, r2
  const TfLiteIntArray* output_dims = output0->dims;
   20004:	688c      	ldr	r4, [r1, #8]
  TFLITE_DCHECK_LT(axis, dimensions);
   20006:	dd0c      	ble.n	20022 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
   20008:	f105 0c04 	add.w	ip, r5, #4
   2000c:	4666      	mov	r6, ip
  for (int i = 0; i < axis; ++i) {
   2000e:	2100      	movs	r1, #0
  int outer_size = 1;
   20010:	2501      	movs	r5, #1
  for (int i = 0; i < axis; ++i) {
   20012:	428a      	cmp	r2, r1
   20014:	dd07      	ble.n	20026 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x76>
    outer_size *= input_dims->data[i];
   20016:	f856 8b04 	ldr.w	r8, [r6], #4
  for (int i = 0; i < axis; ++i) {
   2001a:	3101      	adds	r1, #1
    outer_size *= input_dims->data[i];
   2001c:	fb08 f505 	mul.w	r5, r8, r5
  for (int i = 0; i < axis; ++i) {
   20020:	e7f7      	b.n	20012 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x62>
  TFLITE_DCHECK_LT(axis, dimensions);
   20022:	f010 feca 	bl	30dba <abort>
  for (int i = axis + 1; i < dimensions; ++i) {
   20026:	1c51      	adds	r1, r2, #1
  int copy_size = 1;
   20028:	2201      	movs	r2, #1
  for (int i = axis + 1; i < dimensions; ++i) {
   2002a:	458e      	cmp	lr, r1
   2002c:	d10c      	bne.n	20048 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x98>
  for (int i = 0; i < output_dims->size; ++i) {
   2002e:	4621      	mov	r1, r4
   20030:	2600      	movs	r6, #0
  int output_size = 1;
   20032:	2401      	movs	r4, #1
  for (int i = 0; i < output_dims->size; ++i) {
   20034:	f851 eb04 	ldr.w	lr, [r1], #4
   20038:	45b6      	cmp	lr, r6
   2003a:	dd0a      	ble.n	20052 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa2>
    output_size *= output_dims->data[i];
   2003c:	f851 cb04 	ldr.w	ip, [r1], #4
  for (int i = 0; i < output_dims->size; ++i) {
   20040:	3601      	adds	r6, #1
    output_size *= output_dims->data[i];
   20042:	fb0c f404 	mul.w	r4, ip, r4
  for (int i = 0; i < output_dims->size; ++i) {
   20046:	e7f7      	b.n	20038 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x88>
    copy_size *= input_dims->data[i];
   20048:	f85c 6021 	ldr.w	r6, [ip, r1, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
   2004c:	3101      	adds	r1, #1
    copy_size *= input_dims->data[i];
   2004e:	4372      	muls	r2, r6
  for (int i = axis + 1; i < dimensions; ++i) {
   20050:	e7eb      	b.n	2002a <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7a>
  TFLITE_DCHECK_EQ(output_size, copy_size * outer_size);
   20052:	fb02 f105 	mul.w	r1, r2, r5
   20056:	428c      	cmp	r4, r1
   20058:	d1e3      	bne.n	20022 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   2005a:	2400      	movs	r4, #0
   2005c:	6879      	ldr	r1, [r7, #4]
  for (int i = 0; i < output_count; ++i) {
   2005e:	4627      	mov	r7, r4
   20060:	9102      	str	r1, [sp, #8]
   20062:	fb02 f109 	mul.w	r1, r2, r9
   20066:	3004      	adds	r0, #4
   20068:	9103      	str	r1, [sp, #12]
   2006a:	45b9      	cmp	r9, r7
   2006c:	dc03      	bgt.n	20076 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc6>
      return UnpackImpl<float>(context, node, input, data->num, data->axis);
   2006e:	2000      	movs	r0, #0
      return kTfLiteError;
    }
  }

  return kTfLiteOk;
}
   20070:	b005      	add	sp, #20
   20072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (int i = 0; i < output_count; ++i) {
   20076:	2600      	movs	r6, #0
   20078:	46a4      	mov	ip, r4
    for (int k = 0; k < outer_size; ++k) {
   2007a:	46b6      	mov	lr, r6
   2007c:	f850 1b04 	ldr.w	r1, [r0], #4
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   20080:	9b01      	ldr	r3, [sp, #4]
   20082:	eb13 1181 	adds.w	r1, r3, r1, lsl #6
   20086:	bf18      	it	ne
   20088:	6849      	ldrne	r1, [r1, #4]
   2008a:	4575      	cmp	r5, lr
   2008c:	dd15      	ble.n	200ba <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x10a>
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   2008e:	f04f 0800 	mov.w	r8, #0
   20092:	9b02      	ldr	r3, [sp, #8]
   20094:	eb01 0a86 	add.w	sl, r1, r6, lsl #2
   20098:	eb03 0b8c 	add.w	fp, r3, ip, lsl #2
   2009c:	4542      	cmp	r2, r8
   2009e:	dd06      	ble.n	200ae <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfe>
   200a0:	ecfb 7a01 	vldmia	fp!, {s15}
   200a4:	f108 0801 	add.w	r8, r8, #1
   200a8:	ecea 7a01 	vstmia	sl!, {s15}
   200ac:	e7f6      	b.n	2009c <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xec>
    for (int k = 0; k < outer_size; ++k) {
   200ae:	9b03      	ldr	r3, [sp, #12]
   200b0:	f10e 0e01 	add.w	lr, lr, #1
   200b4:	449c      	add	ip, r3
   200b6:	4416      	add	r6, r2
   200b8:	e7e7      	b.n	2008a <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xda>
  for (int i = 0; i < output_count; ++i) {
   200ba:	3701      	adds	r7, #1
   200bc:	4414      	add	r4, r2
   200be:	e7d4      	b.n	2006a <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xba>
  const TfLiteIntArray* input_dims = input->dims;
   200c0:	68bd      	ldr	r5, [r7, #8]
  const TfLiteTensor* output0 = GetOutput(context, node, 0);
   200c2:	6848      	ldr	r0, [r1, #4]
  const int dimensions = input_dims->size;
   200c4:	f8d5 e000 	ldr.w	lr, [r5]
      return UnpackImpl<int32_t>(context, node, input, data->num, data->axis);
   200c8:	e9d2 b200 	ldrd	fp, r2, [r2]
   200cc:	6841      	ldr	r1, [r0, #4]
  if (axis < 0) {
   200ce:	2a00      	cmp	r2, #0
  const TfLiteIntArray* output_dims = output0->dims;
   200d0:	9b01      	ldr	r3, [sp, #4]
    axis += NumDimensions(input);
   200d2:	bfb8      	it	lt
   200d4:	4472      	addlt	r2, lr
  const TfLiteIntArray* output_dims = output0->dims;
   200d6:	eb03 1181 	add.w	r1, r3, r1, lsl #6
  TFLITE_DCHECK_LT(axis, dimensions);
   200da:	4596      	cmp	lr, r2
  const TfLiteIntArray* output_dims = output0->dims;
   200dc:	688c      	ldr	r4, [r1, #8]
  TFLITE_DCHECK_LT(axis, dimensions);
   200de:	dda0      	ble.n	20022 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
   200e0:	f105 0c04 	add.w	ip, r5, #4
   200e4:	4666      	mov	r6, ip
  for (int i = 0; i < axis; ++i) {
   200e6:	2100      	movs	r1, #0
  int outer_size = 1;
   200e8:	2501      	movs	r5, #1
  for (int i = 0; i < axis; ++i) {
   200ea:	428a      	cmp	r2, r1
   200ec:	dd05      	ble.n	200fa <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14a>
    outer_size *= input_dims->data[i];
   200ee:	f856 8b04 	ldr.w	r8, [r6], #4
  for (int i = 0; i < axis; ++i) {
   200f2:	3101      	adds	r1, #1
    outer_size *= input_dims->data[i];
   200f4:	fb08 f505 	mul.w	r5, r8, r5
  for (int i = 0; i < axis; ++i) {
   200f8:	e7f7      	b.n	200ea <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13a>
  for (int i = axis + 1; i < dimensions; ++i) {
   200fa:	1c51      	adds	r1, r2, #1
  int copy_size = 1;
   200fc:	2201      	movs	r2, #1
  for (int i = axis + 1; i < dimensions; ++i) {
   200fe:	458e      	cmp	lr, r1
   20100:	d10c      	bne.n	2011c <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16c>
  for (int i = 0; i < output_dims->size; ++i) {
   20102:	4621      	mov	r1, r4
   20104:	2600      	movs	r6, #0
  int output_size = 1;
   20106:	2401      	movs	r4, #1
  for (int i = 0; i < output_dims->size; ++i) {
   20108:	f851 eb04 	ldr.w	lr, [r1], #4
   2010c:	45b6      	cmp	lr, r6
   2010e:	dd0a      	ble.n	20126 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x176>
    output_size *= output_dims->data[i];
   20110:	f851 cb04 	ldr.w	ip, [r1], #4
  for (int i = 0; i < output_dims->size; ++i) {
   20114:	3601      	adds	r6, #1
    output_size *= output_dims->data[i];
   20116:	fb0c f404 	mul.w	r4, ip, r4
  for (int i = 0; i < output_dims->size; ++i) {
   2011a:	e7f7      	b.n	2010c <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x15c>
    copy_size *= input_dims->data[i];
   2011c:	f85c 6021 	ldr.w	r6, [ip, r1, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
   20120:	3101      	adds	r1, #1
    copy_size *= input_dims->data[i];
   20122:	4372      	muls	r2, r6
  for (int i = axis + 1; i < dimensions; ++i) {
   20124:	e7eb      	b.n	200fe <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14e>
  TFLITE_DCHECK_EQ(output_size, copy_size * outer_size);
   20126:	fb02 f105 	mul.w	r1, r2, r5
   2012a:	428c      	cmp	r4, r1
   2012c:	f47f af79 	bne.w	20022 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   20130:	2400      	movs	r4, #0
   20132:	687b      	ldr	r3, [r7, #4]
  for (int i = 0; i < output_count; ++i) {
   20134:	4627      	mov	r7, r4
   20136:	9302      	str	r3, [sp, #8]
   20138:	fb02 f30b 	mul.w	r3, r2, fp
   2013c:	3004      	adds	r0, #4
   2013e:	9303      	str	r3, [sp, #12]
   20140:	45bb      	cmp	fp, r7
   20142:	dd94      	ble.n	2006e <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbe>
   20144:	2600      	movs	r6, #0
   20146:	46a4      	mov	ip, r4
    for (int k = 0; k < outer_size; ++k) {
   20148:	46b6      	mov	lr, r6
   2014a:	f850 1b04 	ldr.w	r1, [r0], #4
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   2014e:	9b01      	ldr	r3, [sp, #4]
   20150:	eb13 1181 	adds.w	r1, r3, r1, lsl #6
   20154:	bf18      	it	ne
   20156:	6849      	ldrne	r1, [r1, #4]
   20158:	4575      	cmp	r5, lr
   2015a:	dd15      	ble.n	20188 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d8>
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   2015c:	f04f 0800 	mov.w	r8, #0
   20160:	9b02      	ldr	r3, [sp, #8]
   20162:	eb01 0986 	add.w	r9, r1, r6, lsl #2
   20166:	eb03 0a8c 	add.w	sl, r3, ip, lsl #2
   2016a:	4542      	cmp	r2, r8
   2016c:	dd06      	ble.n	2017c <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1cc>
   2016e:	f85a 3b04 	ldr.w	r3, [sl], #4
   20172:	f108 0801 	add.w	r8, r8, #1
   20176:	f849 3b04 	str.w	r3, [r9], #4
   2017a:	e7f6      	b.n	2016a <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ba>
    for (int k = 0; k < outer_size; ++k) {
   2017c:	9b03      	ldr	r3, [sp, #12]
   2017e:	f10e 0e01 	add.w	lr, lr, #1
   20182:	449c      	add	ip, r3
   20184:	4416      	add	r6, r2
   20186:	e7e7      	b.n	20158 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a8>
  for (int i = 0; i < output_count; ++i) {
   20188:	3701      	adds	r7, #1
   2018a:	4414      	add	r4, r2
   2018c:	e7d8      	b.n	20140 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x190>
  const TfLiteIntArray* input_dims = input->dims;
   2018e:	68be      	ldr	r6, [r7, #8]
   20190:	6848      	ldr	r0, [r1, #4]
  const int dimensions = input_dims->size;
   20192:	f8d6 e000 	ldr.w	lr, [r6]
      return UnpackImpl<uint8_t>(context, node, input, data->num, data->axis);
   20196:	e9d2 b200 	ldrd	fp, r2, [r2]
   2019a:	6840      	ldr	r0, [r0, #4]
  if (axis < 0) {
   2019c:	2a00      	cmp	r2, #0
  const TfLiteIntArray* output_dims = output0->dims;
   2019e:	9b01      	ldr	r3, [sp, #4]
    axis += NumDimensions(input);
   201a0:	bfb8      	it	lt
   201a2:	4472      	addlt	r2, lr
  const TfLiteIntArray* output_dims = output0->dims;
   201a4:	eb03 1380 	add.w	r3, r3, r0, lsl #6
  TFLITE_DCHECK_LT(axis, dimensions);
   201a8:	4596      	cmp	lr, r2
  const TfLiteIntArray* output_dims = output0->dims;
   201aa:	689d      	ldr	r5, [r3, #8]
  TFLITE_DCHECK_LT(axis, dimensions);
   201ac:	f77f af39 	ble.w	20022 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
   201b0:	f106 0c04 	add.w	ip, r6, #4
   201b4:	4660      	mov	r0, ip
  for (int i = 0; i < axis; ++i) {
   201b6:	2300      	movs	r3, #0
  int outer_size = 1;
   201b8:	2601      	movs	r6, #1
  for (int i = 0; i < axis; ++i) {
   201ba:	429a      	cmp	r2, r3
   201bc:	dd05      	ble.n	201ca <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x21a>
    outer_size *= input_dims->data[i];
   201be:	f850 8b04 	ldr.w	r8, [r0], #4
  for (int i = 0; i < axis; ++i) {
   201c2:	3301      	adds	r3, #1
    outer_size *= input_dims->data[i];
   201c4:	fb08 f606 	mul.w	r6, r8, r6
  for (int i = 0; i < axis; ++i) {
   201c8:	e7f7      	b.n	201ba <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x20a>
  int copy_size = 1;
   201ca:	2301      	movs	r3, #1
  for (int i = axis + 1; i < dimensions; ++i) {
   201cc:	3201      	adds	r2, #1
   201ce:	4596      	cmp	lr, r2
   201d0:	d10c      	bne.n	201ec <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x23c>
  for (int i = 0; i < output_dims->size; ++i) {
   201d2:	462a      	mov	r2, r5
  int output_size = 1;
   201d4:	2001      	movs	r0, #1
  for (int i = 0; i < output_dims->size; ++i) {
   201d6:	2500      	movs	r5, #0
   201d8:	f852 eb04 	ldr.w	lr, [r2], #4
   201dc:	45ae      	cmp	lr, r5
   201de:	dd0a      	ble.n	201f6 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x246>
    output_size *= output_dims->data[i];
   201e0:	f852 cb04 	ldr.w	ip, [r2], #4
  for (int i = 0; i < output_dims->size; ++i) {
   201e4:	3501      	adds	r5, #1
    output_size *= output_dims->data[i];
   201e6:	fb0c f000 	mul.w	r0, ip, r0
  for (int i = 0; i < output_dims->size; ++i) {
   201ea:	e7f7      	b.n	201dc <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x22c>
    copy_size *= input_dims->data[i];
   201ec:	f85c 0022 	ldr.w	r0, [ip, r2, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
   201f0:	3201      	adds	r2, #1
    copy_size *= input_dims->data[i];
   201f2:	4343      	muls	r3, r0
  for (int i = axis + 1; i < dimensions; ++i) {
   201f4:	e7eb      	b.n	201ce <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x21e>
  TFLITE_DCHECK_EQ(output_size, copy_size * outer_size);
   201f6:	fb03 f206 	mul.w	r2, r3, r6
   201fa:	4290      	cmp	r0, r2
   201fc:	f47f af11 	bne.w	20022 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   20200:	2000      	movs	r0, #0
  for (int i = 0; i < output_count; ++i) {
   20202:	4605      	mov	r5, r0
   20204:	687a      	ldr	r2, [r7, #4]
   20206:	9201      	str	r2, [sp, #4]
   20208:	fb03 f20b 	mul.w	r2, r3, fp
   2020c:	9203      	str	r2, [sp, #12]
   2020e:	45ab      	cmp	fp, r5
   20210:	f77f af2d 	ble.w	2006e <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbe>
   20214:	684a      	ldr	r2, [r1, #4]
   20216:	4684      	mov	ip, r0
   20218:	eb02 0285 	add.w	r2, r2, r5, lsl #2
   2021c:	6857      	ldr	r7, [r2, #4]
   2021e:	9a02      	ldr	r2, [sp, #8]
   20220:	6892      	ldr	r2, [r2, #8]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   20222:	eb12 1287 	adds.w	r2, r2, r7, lsl #6
   20226:	f04f 0700 	mov.w	r7, #0
    for (int k = 0; k < outer_size; ++k) {
   2022a:	46be      	mov	lr, r7
   2022c:	bf18      	it	ne
   2022e:	6852      	ldrne	r2, [r2, #4]
   20230:	4576      	cmp	r6, lr
   20232:	dd15      	ble.n	20260 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b0>
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   20234:	f04f 0800 	mov.w	r8, #0
   20238:	9c01      	ldr	r4, [sp, #4]
   2023a:	eb02 0907 	add.w	r9, r2, r7
   2023e:	eb04 0a0c 	add.w	sl, r4, ip
   20242:	4543      	cmp	r3, r8
   20244:	dd06      	ble.n	20254 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2a4>
   20246:	f81a 4b01 	ldrb.w	r4, [sl], #1
   2024a:	f108 0801 	add.w	r8, r8, #1
   2024e:	f809 4b01 	strb.w	r4, [r9], #1
   20252:	e7f6      	b.n	20242 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x292>
    for (int k = 0; k < outer_size; ++k) {
   20254:	9c03      	ldr	r4, [sp, #12]
   20256:	f10e 0e01 	add.w	lr, lr, #1
   2025a:	44a4      	add	ip, r4
   2025c:	441f      	add	r7, r3
   2025e:	e7e7      	b.n	20230 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x280>
  for (int i = 0; i < output_count; ++i) {
   20260:	3501      	adds	r5, #1
   20262:	4418      	add	r0, r3
   20264:	e7d3      	b.n	2020e <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x25e>
  const TfLiteIntArray* input_dims = input->dims;
   20266:	68b8      	ldr	r0, [r7, #8]
   20268:	684d      	ldr	r5, [r1, #4]
  const int dimensions = input_dims->size;
   2026a:	f8d0 e000 	ldr.w	lr, [r0]
      return UnpackImpl<int8_t>(context, node, input, data->num, data->axis);
   2026e:	e9d2 b200 	ldrd	fp, r2, [r2]
   20272:	686d      	ldr	r5, [r5, #4]
  if (axis < 0) {
   20274:	2a00      	cmp	r2, #0
  const TfLiteIntArray* output_dims = output0->dims;
   20276:	9b01      	ldr	r3, [sp, #4]
    axis += NumDimensions(input);
   20278:	bfb8      	it	lt
   2027a:	4472      	addlt	r2, lr
  const TfLiteIntArray* output_dims = output0->dims;
   2027c:	eb03 1385 	add.w	r3, r3, r5, lsl #6
  TFLITE_DCHECK_LT(axis, dimensions);
   20280:	4596      	cmp	lr, r2
  const TfLiteIntArray* output_dims = output0->dims;
   20282:	689d      	ldr	r5, [r3, #8]
  TFLITE_DCHECK_LT(axis, dimensions);
   20284:	f77f aecd 	ble.w	20022 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
   20288:	f100 0c04 	add.w	ip, r0, #4
   2028c:	4660      	mov	r0, ip
  for (int i = 0; i < axis; ++i) {
   2028e:	2300      	movs	r3, #0
  int outer_size = 1;
   20290:	2601      	movs	r6, #1
  for (int i = 0; i < axis; ++i) {
   20292:	429a      	cmp	r2, r3
   20294:	dd05      	ble.n	202a2 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f2>
    outer_size *= input_dims->data[i];
   20296:	f850 8b04 	ldr.w	r8, [r0], #4
  for (int i = 0; i < axis; ++i) {
   2029a:	3301      	adds	r3, #1
    outer_size *= input_dims->data[i];
   2029c:	fb08 f606 	mul.w	r6, r8, r6
  for (int i = 0; i < axis; ++i) {
   202a0:	e7f7      	b.n	20292 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e2>
  int copy_size = 1;
   202a2:	2301      	movs	r3, #1
  for (int i = axis + 1; i < dimensions; ++i) {
   202a4:	3201      	adds	r2, #1
   202a6:	4596      	cmp	lr, r2
   202a8:	d10c      	bne.n	202c4 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x314>
  for (int i = 0; i < output_dims->size; ++i) {
   202aa:	462a      	mov	r2, r5
  int output_size = 1;
   202ac:	2001      	movs	r0, #1
  for (int i = 0; i < output_dims->size; ++i) {
   202ae:	2500      	movs	r5, #0
   202b0:	f852 eb04 	ldr.w	lr, [r2], #4
   202b4:	45ae      	cmp	lr, r5
   202b6:	dd0a      	ble.n	202ce <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x31e>
    output_size *= output_dims->data[i];
   202b8:	f852 cb04 	ldr.w	ip, [r2], #4
  for (int i = 0; i < output_dims->size; ++i) {
   202bc:	3501      	adds	r5, #1
    output_size *= output_dims->data[i];
   202be:	fb0c f000 	mul.w	r0, ip, r0
  for (int i = 0; i < output_dims->size; ++i) {
   202c2:	e7f7      	b.n	202b4 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x304>
    copy_size *= input_dims->data[i];
   202c4:	f85c 0022 	ldr.w	r0, [ip, r2, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
   202c8:	3201      	adds	r2, #1
    copy_size *= input_dims->data[i];
   202ca:	4343      	muls	r3, r0
  for (int i = axis + 1; i < dimensions; ++i) {
   202cc:	e7eb      	b.n	202a6 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f6>
  TFLITE_DCHECK_EQ(output_size, copy_size * outer_size);
   202ce:	fb03 f206 	mul.w	r2, r3, r6
   202d2:	4290      	cmp	r0, r2
   202d4:	f47f aea5 	bne.w	20022 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   202d8:	2000      	movs	r0, #0
  for (int i = 0; i < output_count; ++i) {
   202da:	4605      	mov	r5, r0
   202dc:	687a      	ldr	r2, [r7, #4]
   202de:	9201      	str	r2, [sp, #4]
   202e0:	fb03 f20b 	mul.w	r2, r3, fp
   202e4:	9203      	str	r2, [sp, #12]
   202e6:	45ab      	cmp	fp, r5
   202e8:	f77f aec1 	ble.w	2006e <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbe>
   202ec:	684a      	ldr	r2, [r1, #4]
   202ee:	4684      	mov	ip, r0
   202f0:	eb02 0285 	add.w	r2, r2, r5, lsl #2
   202f4:	6857      	ldr	r7, [r2, #4]
   202f6:	9a02      	ldr	r2, [sp, #8]
   202f8:	6892      	ldr	r2, [r2, #8]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   202fa:	eb12 1287 	adds.w	r2, r2, r7, lsl #6
   202fe:	f04f 0700 	mov.w	r7, #0
    for (int k = 0; k < outer_size; ++k) {
   20302:	46be      	mov	lr, r7
   20304:	bf18      	it	ne
   20306:	6852      	ldrne	r2, [r2, #4]
   20308:	4576      	cmp	r6, lr
   2030a:	dd15      	ble.n	20338 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x388>
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   2030c:	f04f 0800 	mov.w	r8, #0
   20310:	9c01      	ldr	r4, [sp, #4]
   20312:	eb02 0907 	add.w	r9, r2, r7
   20316:	eb04 0a0c 	add.w	sl, r4, ip
   2031a:	4543      	cmp	r3, r8
   2031c:	dd06      	ble.n	2032c <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x37c>
   2031e:	f91a 4b01 	ldrsb.w	r4, [sl], #1
   20322:	f108 0801 	add.w	r8, r8, #1
   20326:	f809 4b01 	strb.w	r4, [r9], #1
   2032a:	e7f6      	b.n	2031a <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x36a>
    for (int k = 0; k < outer_size; ++k) {
   2032c:	9c03      	ldr	r4, [sp, #12]
   2032e:	f10e 0e01 	add.w	lr, lr, #1
   20332:	44a4      	add	ip, r4
   20334:	441f      	add	r7, r3
   20336:	e7e7      	b.n	20308 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x358>
  for (int i = 0; i < output_count; ++i) {
   20338:	3501      	adds	r5, #1
   2033a:	4418      	add	r0, r3
   2033c:	e7d3      	b.n	202e6 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x336>
      TF_LITE_KERNEL_LOG(context, "Type '%s' is not supported by unpack.",
   2033e:	9b02      	ldr	r3, [sp, #8]
   20340:	695d      	ldr	r5, [r3, #20]
   20342:	f7ec fcbf 	bl	ccc4 <TfLiteTypeGetName>
   20346:	4903      	ldr	r1, [pc, #12]	; (20354 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3a4>)
   20348:	4602      	mov	r2, r0
   2034a:	9802      	ldr	r0, [sp, #8]
   2034c:	47a8      	blx	r5
      return kTfLiteError;
   2034e:	2001      	movs	r0, #1
   20350:	e68e      	b.n	20070 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc0>
   20352:	bf00      	nop
   20354:	0003608b 	.word	0x0003608b

00020358 <_ZN6tflite3ops5micro15Register_UNPACKEv>:
}  // namespace
}  // namespace unpack

TfLiteRegistration Register_UNPACK() {
   20358:	b510      	push	{r4, lr}
   2035a:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/unpack::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   2035c:	2220      	movs	r2, #32
   2035e:	2100      	movs	r1, #0
   20360:	f010 fd75 	bl	30e4e <memset>
   20364:	4b01      	ldr	r3, [pc, #4]	; (2036c <_ZN6tflite3ops5micro15Register_UNPACKEv+0x14>)
}
   20366:	4620      	mov	r0, r4
          /*version=*/0};
   20368:	60e3      	str	r3, [r4, #12]
}
   2036a:	bd10      	pop	{r4, pc}
   2036c:	0001ffb1 	.word	0x0001ffb1

00020370 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0>:
}

// Copies the contents from the flatbuffer int vector `flatbuffer` into the
// int array `buffer`. `flat_vector` and `buffer` represent the same
// configuration operation for a given operation.
TfLiteStatus FlatBufferIntVectorToArray(
   20370:	b538      	push	{r3, r4, r5, lr}
   20372:	4604      	mov	r4, r0
   20374:	4610      	mov	r0, r2
   20376:	461a      	mov	r2, r3
    int max_size_of_buffer, const flatbuffers::Vector<int32_t>* flat_vector,
    int* buffer, ErrorReporter* error_reporter, const char* op_name) {
  if (!flat_vector) {
   20378:	b924      	cbnz	r4, 20384 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x14>
    TF_LITE_REPORT_ERROR(error_reporter,
   2037a:	4910      	ldr	r1, [pc, #64]	; (203bc <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x4c>)
                         op_name);
    return kTfLiteError;
  } else {
    size_t num_dimensions = flat_vector->size();
    if (num_dimensions > max_size_of_buffer / sizeof(int)) {
      TF_LITE_REPORT_ERROR(
   2037c:	f00f fdac 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Found too many dimensions in the input array of operation '%s'.\n",
          op_name);
      return kTfLiteError;
   20380:	2001      	movs	r0, #1
        buffer[i] = flat_vector->Get(i);
      }
    }
  }
  return kTfLiteOk;
}
   20382:	bd38      	pop	{r3, r4, r5, pc}
    size_t num_dimensions = flat_vector->size();
   20384:	6825      	ldr	r5, [r4, #0]
    if (num_dimensions > max_size_of_buffer / sizeof(int)) {
   20386:	2d08      	cmp	r5, #8
   20388:	d80d      	bhi.n	203a6 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x36>
   2038a:	4622      	mov	r2, r4
      for (size_t i = 0; i < num_dimensions; ++i) {
   2038c:	2300      	movs	r3, #0
   2038e:	429d      	cmp	r5, r3
   20390:	d011      	beq.n	203b6 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x46>
    FLATBUFFERS_ASSERT(i < size());
   20392:	6820      	ldr	r0, [r4, #0]
   20394:	4283      	cmp	r3, r0
   20396:	d308      	bcc.n	203aa <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x3a>
   20398:	f240 1101 	movw	r1, #257	; 0x101
   2039c:	4b08      	ldr	r3, [pc, #32]	; (203c0 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x50>)
   2039e:	4a09      	ldr	r2, [pc, #36]	; (203c4 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x54>)
   203a0:	4809      	ldr	r0, [pc, #36]	; (203c8 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x58>)
   203a2:	f006 f831 	bl	26408 <__assert_func>
      TF_LITE_REPORT_ERROR(
   203a6:	4909      	ldr	r1, [pc, #36]	; (203cc <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x5c>)
   203a8:	e7e8      	b.n	2037c <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0xc>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
   203aa:	f852 0f04 	ldr.w	r0, [r2, #4]!
        buffer[i] = flat_vector->Get(i);
   203ae:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
      for (size_t i = 0; i < num_dimensions; ++i) {
   203b2:	3301      	adds	r3, #1
   203b4:	e7eb      	b.n	2038e <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x1e>
  return kTfLiteOk;
   203b6:	2000      	movs	r0, #0
   203b8:	e7e3      	b.n	20382 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x12>
   203ba:	bf00      	nop
   203bc:	000360b1 	.word	0x000360b1
   203c0:	000341bc 	.word	0x000341bc
   203c4:	000341c7 	.word	0x000341c7
   203c8:	00034286 	.word	0x00034286
   203cc:	000360df 	.word	0x000360df

000203d0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}

}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
   203d0:	b508      	push	{r3, lr}
   203d2:	4603      	mov	r3, r0
   203d4:	4610      	mov	r0, r2
   203d6:	2b0a      	cmp	r3, #10
   203d8:	d821      	bhi.n	2041e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x4e>
   203da:	e8df f003 	tbb	[pc, r3]
   203de:	060a      	.short	0x060a
   203e0:	1a181412 	.word	0x1a181412
   203e4:	161e101c 	.word	0x161e101c
   203e8:	0e          	.byte	0x0e
   203e9:	00          	.byte	0x00
  switch (tensor_type) {
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
   203ea:	230a      	movs	r3, #10
      return kTfLiteOk;
    case TensorType_FLOAT32:
      *type = kTfLiteFloat32;
      return kTfLiteOk;
    case TensorType_FLOAT64:
      *type = kTfLiteFloat64;
   203ec:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
   203ee:	2300      	movs	r3, #0
   203f0:	e001      	b.n	203f6 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x26>
      *type = kTfLiteFloat32;
   203f2:	2201      	movs	r2, #1
   203f4:	700a      	strb	r2, [r1, #0]
      *type = kTfLiteNoType;
      TF_LITE_REPORT_ERROR(error_reporter,
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
  }
}
   203f6:	4618      	mov	r0, r3
   203f8:	bd08      	pop	{r3, pc}
      *type = kTfLiteFloat64;
   203fa:	230b      	movs	r3, #11
   203fc:	e7f6      	b.n	203ec <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteInt16;
   203fe:	2307      	movs	r3, #7
   20400:	e7f4      	b.n	203ec <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteInt32;
   20402:	2302      	movs	r3, #2
   20404:	e7f2      	b.n	203ec <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteUInt8;
   20406:	2303      	movs	r3, #3
   20408:	e7f0      	b.n	203ec <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteInt8;
   2040a:	2309      	movs	r3, #9
   2040c:	e7ee      	b.n	203ec <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteInt64;
   2040e:	2304      	movs	r3, #4
   20410:	e7ec      	b.n	203ec <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteString;
   20412:	2305      	movs	r3, #5
   20414:	e7ea      	b.n	203ec <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteBool;
   20416:	2306      	movs	r3, #6
   20418:	e7e8      	b.n	203ec <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteComplex64;
   2041a:	2308      	movs	r3, #8
   2041c:	e7e6      	b.n	203ec <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteNoType;
   2041e:	2200      	movs	r2, #0
   20420:	700a      	strb	r2, [r1, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
   20422:	461a      	mov	r2, r3
   20424:	4902      	ldr	r1, [pc, #8]	; (20430 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x60>)
   20426:	f00f fd57 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
   2042a:	2301      	movs	r3, #1
   2042c:	e7e3      	b.n	203f6 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x26>
   2042e:	bf00      	nop
   20430:	00036120 	.word	0x00036120

00020434 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseReshape(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
   20434:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   20438:	4616      	mov	r6, r2
   2043a:	4605      	mov	r5, r0
   2043c:	4689      	mov	r9, r1
   2043e:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   20440:	f00f fd6e 	bl	2ff20 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
  template <typename T>
  T* AllocatePOD() {
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
   20444:	6833      	ldr	r3, [r6, #0]
   20446:	2204      	movs	r2, #4
   20448:	2124      	movs	r1, #36	; 0x24
   2044a:	4630      	mov	r0, r6
   2044c:	681b      	ldr	r3, [r3, #0]
   2044e:	4798      	blx	r3
  SafeBuiltinDataAllocator safe_allocator(allocator);

  std::unique_ptr<TfLiteReshapeParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   20450:	4604      	mov	r4, r0
   20452:	b978      	cbnz	r0, 20474 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x40>
   20454:	4b1b      	ldr	r3, [pc, #108]	; (204c4 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x90>)
   20456:	4649      	mov	r1, r9
   20458:	9301      	str	r3, [sp, #4]
   2045a:	f240 23ea 	movw	r3, #746	; 0x2ea
   2045e:	4648      	mov	r0, r9
   20460:	9300      	str	r3, [sp, #0]
   20462:	4a19      	ldr	r2, [pc, #100]	; (204c8 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x94>)
   20464:	4b19      	ldr	r3, [pc, #100]	; (204cc <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x98>)
   20466:	f00f fd45 	bl	2fef4 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   2046a:	2501      	movs	r5, #1
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
  return kTfLiteOk;
}
   2046c:	4628      	mov	r0, r5
   2046e:	b002      	add	sp, #8
   20470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return builtin_options_type() == tflite::BuiltinOptions_ReshapeOptions ? static_cast<const tflite::ReshapeOptions *>(builtin_options()) : nullptr;
   20474:	4628      	mov	r0, r5
   20476:	f00f fdb4 	bl	2ffe2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   2047a:	2811      	cmp	r0, #17
   2047c:	d119      	bne.n	204b2 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7e>
   2047e:	4628      	mov	r0, r5
   20480:	f00f fd5c 	bl	2ff3c <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   20484:	4605      	mov	r5, r0
   20486:	b1a0      	cbz	r0, 204b2 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7e>
    auto field_offset = GetOptionalFieldOffset(field);
   20488:	2104      	movs	r1, #4
   2048a:	f006 fff2 	bl	27472 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   2048e:	b180      	cbz	r0, 204b2 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7e>
   20490:	f855 a000 	ldr.w	sl, [r5, r0]
    auto p = data_ + field_offset;
   20494:	eb05 0800 	add.w	r8, r5, r0
    if (new_shape != nullptr) {
   20498:	eb18 000a 	adds.w	r0, r8, sl
   2049c:	d009      	beq.n	204b2 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7e>
      TF_LITE_ENSURE_STATUS(
   2049e:	464a      	mov	r2, r9
   204a0:	4621      	mov	r1, r4
   204a2:	4b0b      	ldr	r3, [pc, #44]	; (204d0 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9c>)
   204a4:	f7ff ff64 	bl	20370 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0>
   204a8:	4605      	mov	r5, r0
   204aa:	b928      	cbnz	r0, 204b8 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x84>
      params->num_dimensions = new_shape->size();
   204ac:	f858 300a 	ldr.w	r3, [r8, sl]
   204b0:	6223      	str	r3, [r4, #32]
  return kTfLiteOk;
   204b2:	2500      	movs	r5, #0
  *builtin_data = params.release();
   204b4:	603c      	str	r4, [r7, #0]

      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
   204b6:	e7d9      	b.n	2046c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x38>
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
	  get_deleter()(std::move(__ptr));
   204b8:	4621      	mov	r1, r4
   204ba:	4630      	mov	r0, r6
   204bc:	f00f fd3b 	bl	2ff36 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv.isra.0>
   204c0:	e7d4      	b.n	2046c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x38>
   204c2:	bf00      	nop
   204c4:	00036177 	.word	0x00036177
   204c8:	00034b9c 	.word	0x00034b9c
   204cc:	00036144 	.word	0x00036144
   204d0:	00036189 	.word	0x00036189

000204d4 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                          void** builtin_data) {
   204d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   204d6:	4614      	mov	r4, r2
   204d8:	4605      	mov	r5, r0
   204da:	460f      	mov	r7, r1
   204dc:	461e      	mov	r6, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   204de:	f00f fd1f 	bl	2ff20 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   204e2:	2201      	movs	r2, #1
   204e4:	6823      	ldr	r3, [r4, #0]
   204e6:	4620      	mov	r0, r4
   204e8:	4611      	mov	r1, r2
   204ea:	681b      	ldr	r3, [r3, #0]
   204ec:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   204ee:	4604      	mov	r4, r0
   204f0:	b968      	cbnz	r0, 2050e <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3a>
   204f2:	4b11      	ldr	r3, [pc, #68]	; (20538 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x64>)
   204f4:	4639      	mov	r1, r7
   204f6:	9301      	str	r3, [sp, #4]
   204f8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
   204fc:	4638      	mov	r0, r7
   204fe:	9300      	str	r3, [sp, #0]
   20500:	4a0e      	ldr	r2, [pc, #56]	; (2053c <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>)
   20502:	4b0f      	ldr	r3, [pc, #60]	; (20540 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6c>)
   20504:	f00f fcf6 	bl	2fef4 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   20508:	2001      	movs	r0, #1
}
   2050a:	b003      	add	sp, #12
   2050c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_ReducerOptions ? static_cast<const tflite::ReducerOptions *>(builtin_options()) : nullptr;
   2050e:	4628      	mov	r0, r5
   20510:	f00f fd67 	bl	2ffe2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   20514:	281b      	cmp	r0, #27
   20516:	d10b      	bne.n	20530 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5c>
   20518:	4628      	mov	r0, r5
   2051a:	f00f fd0f 	bl	2ff3c <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   2051e:	b138      	cbz	r0, 20530 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5c>
    return GetField<uint8_t>(VT_KEEP_DIMS, 0) != 0;
   20520:	2200      	movs	r2, #0
   20522:	2104      	movs	r1, #4
   20524:	f00f fd54 	bl	2ffd0 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   20528:	3800      	subs	r0, #0
   2052a:	bf18      	it	ne
   2052c:	2001      	movne	r0, #1
   2052e:	7020      	strb	r0, [r4, #0]
  return kTfLiteOk;
   20530:	2000      	movs	r0, #0
  *builtin_data = params.release();
   20532:	6034      	str	r4, [r6, #0]
  return kTfLiteOk;
   20534:	e7e9      	b.n	2050a <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
   20536:	bf00      	nop
   20538:	00036177 	.word	0x00036177
   2053c:	00034b9c 	.word	0x00034b9c
   20540:	00036144 	.word	0x00036144

00020544 <_ZN6tflite26ParseResizeNearestNeighborEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:

TfLiteStatus ParseResizeNearestNeighbor(const Operator* op,
                                        ErrorReporter* error_reporter,
                                        BuiltinDataAllocator* allocator,
                                        void** builtin_data) {
   20544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20546:	4614      	mov	r4, r2
   20548:	4605      	mov	r5, r0
   2054a:	460f      	mov	r7, r1
   2054c:	461e      	mov	r6, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   2054e:	f00f fce7 	bl	2ff20 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   20552:	6823      	ldr	r3, [r4, #0]
   20554:	4620      	mov	r0, r4
   20556:	2201      	movs	r2, #1
   20558:	2102      	movs	r1, #2
   2055a:	681b      	ldr	r3, [r3, #0]
   2055c:	4798      	blx	r3

  SafeBuiltinDataAllocator safe_allocator(allocator);
  std::unique_ptr<TfLiteResizeNearestNeighborParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteResizeNearestNeighborParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   2055e:	4604      	mov	r4, r0
   20560:	b968      	cbnz	r0, 2057e <_ZN6tflite26ParseResizeNearestNeighborEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3a>
   20562:	4b18      	ldr	r3, [pc, #96]	; (205c4 <_ZN6tflite26ParseResizeNearestNeighborEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x80>)
   20564:	4639      	mov	r1, r7
   20566:	9301      	str	r3, [sp, #4]
   20568:	f240 3312 	movw	r3, #786	; 0x312
   2056c:	4638      	mov	r0, r7
   2056e:	9300      	str	r3, [sp, #0]
   20570:	4a15      	ldr	r2, [pc, #84]	; (205c8 <_ZN6tflite26ParseResizeNearestNeighborEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x84>)
   20572:	4b16      	ldr	r3, [pc, #88]	; (205cc <_ZN6tflite26ParseResizeNearestNeighborEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x88>)
   20574:	f00f fcbe 	bl	2fef4 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   20578:	2001      	movs	r0, #1
    params->half_pixel_centers = false;
  }

  *builtin_data = params.release();
  return kTfLiteOk;
}
   2057a:	b003      	add	sp, #12
   2057c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_ResizeNearestNeighborOptions ? static_cast<const tflite::ResizeNearestNeighborOptions *>(builtin_options()) : nullptr;
   2057e:	4628      	mov	r0, r5
   20580:	f00f fd2f 	bl	2ffe2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   20584:	284a      	cmp	r0, #74	; 0x4a
   20586:	d118      	bne.n	205ba <_ZN6tflite26ParseResizeNearestNeighborEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x76>
   20588:	4628      	mov	r0, r5
   2058a:	f00f fcd7 	bl	2ff3c <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   2058e:	4605      	mov	r5, r0
   20590:	b198      	cbz	r0, 205ba <_ZN6tflite26ParseResizeNearestNeighborEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x76>
    return GetField<uint8_t>(VT_ALIGN_CORNERS, 0) != 0;
   20592:	2200      	movs	r2, #0
   20594:	2104      	movs	r1, #4
   20596:	f00f fd1b 	bl	2ffd0 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   2059a:	3800      	subs	r0, #0
   2059c:	bf18      	it	ne
   2059e:	2001      	movne	r0, #1
    return GetField<uint8_t>(VT_HALF_PIXEL_CENTERS, 0) != 0;
   205a0:	2200      	movs	r2, #0
    return GetField<uint8_t>(VT_ALIGN_CORNERS, 0) != 0;
   205a2:	7020      	strb	r0, [r4, #0]
    return GetField<uint8_t>(VT_HALF_PIXEL_CENTERS, 0) != 0;
   205a4:	2106      	movs	r1, #6
   205a6:	4628      	mov	r0, r5
   205a8:	f00f fd12 	bl	2ffd0 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   205ac:	3800      	subs	r0, #0
   205ae:	bf18      	it	ne
   205b0:	2001      	movne	r0, #1
   205b2:	7060      	strb	r0, [r4, #1]
  return kTfLiteOk;
   205b4:	2000      	movs	r0, #0
  *builtin_data = params.release();
   205b6:	6034      	str	r4, [r6, #0]
  return kTfLiteOk;
   205b8:	e7df      	b.n	2057a <_ZN6tflite26ParseResizeNearestNeighborEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
    params->align_corners = false;
   205ba:	2300      	movs	r3, #0
   205bc:	7023      	strb	r3, [r4, #0]
    params->half_pixel_centers = false;
   205be:	7063      	strb	r3, [r4, #1]
   205c0:	e7f8      	b.n	205b4 <_ZN6tflite26ParseResizeNearestNeighborEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x70>
   205c2:	bf00      	nop
   205c4:	00036177 	.word	0x00036177
   205c8:	00034b9c 	.word	0x00034b9c
   205cc:	00036144 	.word	0x00036144

000205d0 <_ZN6tflite9ParsePackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                       BuiltinDataAllocator* allocator, void** builtin_data) {
   205d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   205d2:	4614      	mov	r4, r2
   205d4:	4605      	mov	r5, r0
   205d6:	460f      	mov	r7, r1
   205d8:	461e      	mov	r6, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   205da:	f00f fca1 	bl	2ff20 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   205de:	6823      	ldr	r3, [r4, #0]
   205e0:	4620      	mov	r0, r4
   205e2:	2204      	movs	r2, #4
   205e4:	2108      	movs	r1, #8
   205e6:	681b      	ldr	r3, [r3, #0]
   205e8:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   205ea:	4604      	mov	r4, r0
   205ec:	b968      	cbnz	r0, 2060a <_ZN6tflite9ParsePackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3a>
   205ee:	4b13      	ldr	r3, [pc, #76]	; (2063c <_ZN6tflite9ParsePackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6c>)
   205f0:	4639      	mov	r1, r7
   205f2:	9301      	str	r3, [sp, #4]
   205f4:	f240 2367 	movw	r3, #615	; 0x267
   205f8:	4638      	mov	r0, r7
   205fa:	9300      	str	r3, [sp, #0]
   205fc:	4a10      	ldr	r2, [pc, #64]	; (20640 <_ZN6tflite9ParsePackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x70>)
   205fe:	4b11      	ldr	r3, [pc, #68]	; (20644 <_ZN6tflite9ParsePackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x74>)
   20600:	f00f fc78 	bl	2fef4 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   20604:	2001      	movs	r0, #1
}
   20606:	b003      	add	sp, #12
   20608:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_PackOptions ? static_cast<const tflite::PackOptions *>(builtin_options()) : nullptr;
   2060a:	4628      	mov	r0, r5
   2060c:	f00f fce9 	bl	2ffe2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   20610:	283b      	cmp	r0, #59	; 0x3b
   20612:	d10f      	bne.n	20634 <_ZN6tflite9ParsePackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x64>
   20614:	4628      	mov	r0, r5
   20616:	f00f fc91 	bl	2ff3c <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   2061a:	4605      	mov	r5, r0
   2061c:	b150      	cbz	r0, 20634 <_ZN6tflite9ParsePackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x64>
    return GetField<int32_t>(VT_VALUES_COUNT, 0);
   2061e:	2200      	movs	r2, #0
   20620:	2104      	movs	r1, #4
   20622:	f00f fce4 	bl	2ffee <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_AXIS, 0);
   20626:	2200      	movs	r2, #0
    params->values_count = schema_params->values_count();
   20628:	6020      	str	r0, [r4, #0]
   2062a:	2106      	movs	r1, #6
   2062c:	4628      	mov	r0, r5
   2062e:	f00f fcde 	bl	2ffee <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    params->axis = schema_params->axis();
   20632:	6060      	str	r0, [r4, #4]
  return kTfLiteOk;
   20634:	2000      	movs	r0, #0
  *builtin_data = params.release();
   20636:	6034      	str	r4, [r6, #0]
  return kTfLiteOk;
   20638:	e7e5      	b.n	20606 <_ZN6tflite9ParsePackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
   2063a:	bf00      	nop
   2063c:	00036177 	.word	0x00036177
   20640:	00034b9c 	.word	0x00034b9c
   20644:	00036144 	.word	0x00036144

00020648 <_ZN6tflite17ParseStridedSliceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseStridedSlice(const Operator* op,
                               ErrorReporter* error_reporter,
                               BuiltinDataAllocator* allocator,
                               void** builtin_data) {
   20648:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2064a:	4614      	mov	r4, r2
   2064c:	4605      	mov	r5, r0
   2064e:	460f      	mov	r7, r1
   20650:	461e      	mov	r6, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   20652:	f00f fc65 	bl	2ff20 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   20656:	6823      	ldr	r3, [r4, #0]
   20658:	4620      	mov	r0, r4
   2065a:	2204      	movs	r2, #4
   2065c:	2114      	movs	r1, #20
   2065e:	681b      	ldr	r3, [r3, #0]
   20660:	4798      	blx	r3

  SafeBuiltinDataAllocator safe_allocator(allocator);
  std::unique_ptr<TfLiteStridedSliceParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteStridedSliceParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   20662:	4604      	mov	r4, r0
   20664:	b968      	cbnz	r0, 20682 <_ZN6tflite17ParseStridedSliceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3a>
   20666:	4b1c      	ldr	r3, [pc, #112]	; (206d8 <_ZN6tflite17ParseStridedSliceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x90>)
   20668:	4639      	mov	r1, r7
   2066a:	9301      	str	r3, [sp, #4]
   2066c:	f240 3386 	movw	r3, #902	; 0x386
   20670:	4638      	mov	r0, r7
   20672:	9300      	str	r3, [sp, #0]
   20674:	4a19      	ldr	r2, [pc, #100]	; (206dc <_ZN6tflite17ParseStridedSliceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x94>)
   20676:	4b1a      	ldr	r3, [pc, #104]	; (206e0 <_ZN6tflite17ParseStridedSliceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x98>)
   20678:	f00f fc3c 	bl	2fef4 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   2067c:	2001      	movs	r0, #1
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
  return kTfLiteOk;
}
   2067e:	b003      	add	sp, #12
   20680:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_StridedSliceOptions ? static_cast<const tflite::StridedSliceOptions *>(builtin_options()) : nullptr;
   20682:	4628      	mov	r0, r5
   20684:	f00f fcad 	bl	2ffe2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   20688:	2820      	cmp	r0, #32
   2068a:	d121      	bne.n	206d0 <_ZN6tflite17ParseStridedSliceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x88>
   2068c:	4628      	mov	r0, r5
   2068e:	f00f fc55 	bl	2ff3c <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   20692:	4605      	mov	r5, r0
   20694:	b1e0      	cbz	r0, 206d0 <_ZN6tflite17ParseStridedSliceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x88>
    return GetField<int32_t>(VT_BEGIN_MASK, 0);
   20696:	2200      	movs	r2, #0
   20698:	2104      	movs	r1, #4
   2069a:	f00f fca8 	bl	2ffee <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_END_MASK, 0);
   2069e:	2200      	movs	r2, #0
   206a0:	2106      	movs	r1, #6
    params->begin_mask = schema_params->begin_mask();
   206a2:	6020      	str	r0, [r4, #0]
   206a4:	4628      	mov	r0, r5
   206a6:	f00f fca2 	bl	2ffee <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_ELLIPSIS_MASK, 0);
   206aa:	2200      	movs	r2, #0
   206ac:	2108      	movs	r1, #8
    params->end_mask = schema_params->end_mask();
   206ae:	6060      	str	r0, [r4, #4]
   206b0:	4628      	mov	r0, r5
   206b2:	f00f fc9c 	bl	2ffee <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_NEW_AXIS_MASK, 0);
   206b6:	2200      	movs	r2, #0
   206b8:	210a      	movs	r1, #10
    params->ellipsis_mask = schema_params->ellipsis_mask();
   206ba:	60a0      	str	r0, [r4, #8]
   206bc:	4628      	mov	r0, r5
   206be:	f00f fc96 	bl	2ffee <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_SHRINK_AXIS_MASK, 0);
   206c2:	2200      	movs	r2, #0
    params->new_axis_mask = schema_params->new_axis_mask();
   206c4:	60e0      	str	r0, [r4, #12]
   206c6:	210c      	movs	r1, #12
   206c8:	4628      	mov	r0, r5
   206ca:	f00f fc90 	bl	2ffee <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    params->shrink_axis_mask = schema_params->shrink_axis_mask();
   206ce:	6120      	str	r0, [r4, #16]
  return kTfLiteOk;
   206d0:	2000      	movs	r0, #0
  *builtin_data = params.release();
   206d2:	6034      	str	r4, [r6, #0]
  return kTfLiteOk;
   206d4:	e7d3      	b.n	2067e <_ZN6tflite17ParseStridedSliceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
   206d6:	bf00      	nop
   206d8:	00036177 	.word	0x00036177
   206dc:	00034b9c 	.word	0x00034b9c
   206e0:	00036144 	.word	0x00036144

000206e4 <_ZN6tflite11ParseUnpackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                       void**) {
  return kTfLiteOk;
}

TfLiteStatus ParseUnpack(const Operator* op, ErrorReporter* error_reporter,
                         BuiltinDataAllocator* allocator, void** builtin_data) {
   206e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   206e6:	4614      	mov	r4, r2
   206e8:	4605      	mov	r5, r0
   206ea:	460f      	mov	r7, r1
   206ec:	461e      	mov	r6, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   206ee:	f00f fc17 	bl	2ff20 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   206f2:	6823      	ldr	r3, [r4, #0]
   206f4:	4620      	mov	r0, r4
   206f6:	2204      	movs	r2, #4
   206f8:	2108      	movs	r1, #8
   206fa:	681b      	ldr	r3, [r3, #0]
   206fc:	4798      	blx	r3

  SafeBuiltinDataAllocator safe_allocator(allocator);
  std::unique_ptr<TfLiteUnpackParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteUnpackParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   206fe:	4604      	mov	r4, r0
   20700:	b968      	cbnz	r0, 2071e <_ZN6tflite11ParseUnpackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3a>
   20702:	4b13      	ldr	r3, [pc, #76]	; (20750 <_ZN6tflite11ParseUnpackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6c>)
   20704:	4639      	mov	r1, r7
   20706:	9301      	str	r3, [sp, #4]
   20708:	f240 33de 	movw	r3, #990	; 0x3de
   2070c:	4638      	mov	r0, r7
   2070e:	9300      	str	r3, [sp, #0]
   20710:	4a10      	ldr	r2, [pc, #64]	; (20754 <_ZN6tflite11ParseUnpackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x70>)
   20712:	4b11      	ldr	r3, [pc, #68]	; (20758 <_ZN6tflite11ParseUnpackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x74>)
   20714:	f00f fbee 	bl	2fef4 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   20718:	2001      	movs	r0, #1
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
  return kTfLiteOk;
}
   2071a:	b003      	add	sp, #12
   2071c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_UnpackOptions ? static_cast<const tflite::UnpackOptions *>(builtin_options()) : nullptr;
   2071e:	4628      	mov	r0, r5
   20720:	f00f fc5f 	bl	2ffe2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   20724:	2840      	cmp	r0, #64	; 0x40
   20726:	d10f      	bne.n	20748 <_ZN6tflite11ParseUnpackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x64>
   20728:	4628      	mov	r0, r5
   2072a:	f00f fc07 	bl	2ff3c <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   2072e:	4605      	mov	r5, r0
   20730:	b150      	cbz	r0, 20748 <_ZN6tflite11ParseUnpackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x64>
    return GetField<int32_t>(VT_NUM, 0);
   20732:	2200      	movs	r2, #0
   20734:	2104      	movs	r1, #4
   20736:	f00f fc5a 	bl	2ffee <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_AXIS, 0);
   2073a:	2200      	movs	r2, #0
    params->num = schema_params->num();
   2073c:	6020      	str	r0, [r4, #0]
   2073e:	2106      	movs	r1, #6
   20740:	4628      	mov	r0, r5
   20742:	f00f fc54 	bl	2ffee <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    params->axis = schema_params->axis();
   20746:	6060      	str	r0, [r4, #4]
  return kTfLiteOk;
   20748:	2000      	movs	r0, #0
  *builtin_data = params.release();
   2074a:	6034      	str	r4, [r6, #0]
  return kTfLiteOk;
   2074c:	e7e5      	b.n	2071a <_ZN6tflite11ParseUnpackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
   2074e:	bf00      	nop
   20750:	00036177 	.word	0x00036177
   20754:	00034b9c 	.word	0x00034b9c
   20758:	00036144 	.word	0x00036144

0002075c <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                      BuiltinDataAllocator* allocator, void** builtin_data) {
   2075c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2075e:	4614      	mov	r4, r2
   20760:	4605      	mov	r5, r0
   20762:	460f      	mov	r7, r1
   20764:	461e      	mov	r6, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   20766:	f00f fbdb 	bl	2ff20 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   2076a:	2201      	movs	r2, #1
   2076c:	6823      	ldr	r3, [r4, #0]
   2076e:	4620      	mov	r0, r4
   20770:	4611      	mov	r1, r2
   20772:	681b      	ldr	r3, [r3, #0]
   20774:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   20776:	4604      	mov	r4, r0
   20778:	b960      	cbnz	r0, 20794 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x38>
   2077a:	4b11      	ldr	r3, [pc, #68]	; (207c0 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x64>)
   2077c:	4639      	mov	r1, r7
   2077e:	9301      	str	r3, [sp, #4]
   20780:	23c3      	movs	r3, #195	; 0xc3
   20782:	4638      	mov	r0, r7
   20784:	9300      	str	r3, [sp, #0]
   20786:	4a0f      	ldr	r2, [pc, #60]	; (207c4 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>)
   20788:	4b0f      	ldr	r3, [pc, #60]	; (207c8 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6c>)
   2078a:	f00f fbb3 	bl	2fef4 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   2078e:	2001      	movs	r0, #1
}
   20790:	b003      	add	sp, #12
   20792:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_AddOptions ? static_cast<const tflite::AddOptions *>(builtin_options()) : nullptr;
   20794:	4628      	mov	r0, r5
   20796:	f00f fc24 	bl	2ffe2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   2079a:	280b      	cmp	r0, #11
   2079c:	d10d      	bne.n	207ba <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5e>
   2079e:	4628      	mov	r0, r5
   207a0:	f00f fbcc 	bl	2ff3c <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   207a4:	b148      	cbz	r0, 207ba <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5e>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   207a6:	2200      	movs	r2, #0
   207a8:	2104      	movs	r1, #4
   207aa:	f00f fc29 	bl	30000 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   207ae:	b2c2      	uxtb	r2, r0
  switch (activation) {
   207b0:	1e53      	subs	r3, r2, #1
   207b2:	2b04      	cmp	r3, #4
   207b4:	bf88      	it	hi
   207b6:	2200      	movhi	r2, #0
    params->activation =
   207b8:	7022      	strb	r2, [r4, #0]
  return kTfLiteOk;
   207ba:	2000      	movs	r0, #0
  *builtin_data = params.release();
   207bc:	6034      	str	r4, [r6, #0]
  return kTfLiteOk;
   207be:	e7e7      	b.n	20790 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x34>
   207c0:	00036177 	.word	0x00036177
   207c4:	00034b9c 	.word	0x00034b9c
   207c8:	00036144 	.word	0x00036144

000207cc <_ZN6tflite11ParseArgMaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                         BuiltinDataAllocator* allocator, void** builtin_data) {
   207cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   207d0:	4616      	mov	r6, r2
   207d2:	4607      	mov	r7, r0
   207d4:	460c      	mov	r4, r1
   207d6:	4698      	mov	r8, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   207d8:	f00f fba2 	bl	2ff20 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   207dc:	2201      	movs	r2, #1
   207de:	6833      	ldr	r3, [r6, #0]
   207e0:	4611      	mov	r1, r2
   207e2:	4630      	mov	r0, r6
   207e4:	681b      	ldr	r3, [r3, #0]
   207e6:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   207e8:	4605      	mov	r5, r0
   207ea:	b970      	cbnz	r0, 2080a <_ZN6tflite11ParseArgMaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3e>
   207ec:	4b16      	ldr	r3, [pc, #88]	; (20848 <_ZN6tflite11ParseArgMaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7c>)
   207ee:	4621      	mov	r1, r4
   207f0:	9301      	str	r3, [sp, #4]
   207f2:	23dc      	movs	r3, #220	; 0xdc
   207f4:	4620      	mov	r0, r4
   207f6:	9300      	str	r3, [sp, #0]
   207f8:	4a14      	ldr	r2, [pc, #80]	; (2084c <_ZN6tflite11ParseArgMaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x80>)
   207fa:	4b15      	ldr	r3, [pc, #84]	; (20850 <_ZN6tflite11ParseArgMaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x84>)
   207fc:	f00f fb7a 	bl	2fef4 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   20800:	2401      	movs	r4, #1
}
   20802:	4620      	mov	r0, r4
   20804:	b002      	add	sp, #8
   20806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return builtin_options_type() == tflite::BuiltinOptions_ArgMaxOptions ? static_cast<const tflite::ArgMaxOptions *>(builtin_options()) : nullptr;
   2080a:	4638      	mov	r0, r7
   2080c:	f00f fbe9 	bl	2ffe2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   20810:	2828      	cmp	r0, #40	; 0x28
   20812:	d003      	beq.n	2081c <_ZN6tflite11ParseArgMaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x50>
  return kTfLiteOk;
   20814:	2400      	movs	r4, #0
  *builtin_data = params.release();
   20816:	f8c8 5000 	str.w	r5, [r8]
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
   2081a:	e7f2      	b.n	20802 <_ZN6tflite11ParseArgMaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
   2081c:	4638      	mov	r0, r7
   2081e:	f00f fb8d 	bl	2ff3c <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   20822:	2800      	cmp	r0, #0
   20824:	d0f6      	beq.n	20814 <_ZN6tflite11ParseArgMaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x48>
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_OUTPUT_TYPE, 0));
   20826:	2200      	movs	r2, #0
   20828:	2104      	movs	r1, #4
   2082a:	f00f fbe9 	bl	30000 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    TF_LITE_ENSURE_STATUS(ConvertTensorType(
   2082e:	4622      	mov	r2, r4
   20830:	4629      	mov	r1, r5
   20832:	b2c0      	uxtb	r0, r0
   20834:	f7ff fdcc 	bl	203d0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
   20838:	4604      	mov	r4, r0
   2083a:	2800      	cmp	r0, #0
   2083c:	d0ea      	beq.n	20814 <_ZN6tflite11ParseArgMaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x48>
	  get_deleter()(std::move(__ptr));
   2083e:	4629      	mov	r1, r5
   20840:	4630      	mov	r0, r6
   20842:	f00f fb78 	bl	2ff36 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv.isra.0>
   20846:	e7dc      	b.n	20802 <_ZN6tflite11ParseArgMaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
   20848:	00036177 	.word	0x00036177
   2084c:	00034b9c 	.word	0x00034b9c
   20850:	00036144 	.word	0x00036144

00020854 <_ZN6tflite11ParseArgMinEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                         BuiltinDataAllocator* allocator, void** builtin_data) {
   20854:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   20858:	4616      	mov	r6, r2
   2085a:	4607      	mov	r7, r0
   2085c:	460c      	mov	r4, r1
   2085e:	4698      	mov	r8, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   20860:	f00f fb5e 	bl	2ff20 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   20864:	2201      	movs	r2, #1
   20866:	6833      	ldr	r3, [r6, #0]
   20868:	4611      	mov	r1, r2
   2086a:	4630      	mov	r0, r6
   2086c:	681b      	ldr	r3, [r3, #0]
   2086e:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   20870:	4605      	mov	r5, r0
   20872:	b970      	cbnz	r0, 20892 <_ZN6tflite11ParseArgMinEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3e>
   20874:	4b16      	ldr	r3, [pc, #88]	; (208d0 <_ZN6tflite11ParseArgMinEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7c>)
   20876:	4621      	mov	r1, r4
   20878:	9301      	str	r3, [sp, #4]
   2087a:	23f5      	movs	r3, #245	; 0xf5
   2087c:	4620      	mov	r0, r4
   2087e:	9300      	str	r3, [sp, #0]
   20880:	4a14      	ldr	r2, [pc, #80]	; (208d4 <_ZN6tflite11ParseArgMinEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x80>)
   20882:	4b15      	ldr	r3, [pc, #84]	; (208d8 <_ZN6tflite11ParseArgMinEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x84>)
   20884:	f00f fb36 	bl	2fef4 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   20888:	2401      	movs	r4, #1
}
   2088a:	4620      	mov	r0, r4
   2088c:	b002      	add	sp, #8
   2088e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return builtin_options_type() == tflite::BuiltinOptions_ArgMinOptions ? static_cast<const tflite::ArgMinOptions *>(builtin_options()) : nullptr;
   20892:	4638      	mov	r0, r7
   20894:	f00f fba5 	bl	2ffe2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   20898:	2839      	cmp	r0, #57	; 0x39
   2089a:	d003      	beq.n	208a4 <_ZN6tflite11ParseArgMinEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x50>
  return kTfLiteOk;
   2089c:	2400      	movs	r4, #0
  *builtin_data = params.release();
   2089e:	f8c8 5000 	str.w	r5, [r8]
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
   208a2:	e7f2      	b.n	2088a <_ZN6tflite11ParseArgMinEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
   208a4:	4638      	mov	r0, r7
   208a6:	f00f fb49 	bl	2ff3c <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   208aa:	2800      	cmp	r0, #0
   208ac:	d0f6      	beq.n	2089c <_ZN6tflite11ParseArgMinEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x48>
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_OUTPUT_TYPE, 0));
   208ae:	2200      	movs	r2, #0
   208b0:	2104      	movs	r1, #4
   208b2:	f00f fba5 	bl	30000 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    TF_LITE_ENSURE_STATUS(ConvertTensorType(
   208b6:	4622      	mov	r2, r4
   208b8:	4629      	mov	r1, r5
   208ba:	b2c0      	uxtb	r0, r0
   208bc:	f7ff fd88 	bl	203d0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
   208c0:	4604      	mov	r4, r0
   208c2:	2800      	cmp	r0, #0
   208c4:	d0ea      	beq.n	2089c <_ZN6tflite11ParseArgMinEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x48>
	  get_deleter()(std::move(__ptr));
   208c6:	4629      	mov	r1, r5
   208c8:	4630      	mov	r0, r6
   208ca:	f00f fb34 	bl	2ff36 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv.isra.0>
   208ce:	e7dc      	b.n	2088a <_ZN6tflite11ParseArgMinEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
   208d0:	00036177 	.word	0x00036177
   208d4:	00034b9c 	.word	0x00034b9c
   208d8:	00036144 	.word	0x00036144

000208dc <_ZN6tflite18ParseConcatenationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                                void** builtin_data) {
   208dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   208de:	4614      	mov	r4, r2
   208e0:	4605      	mov	r5, r0
   208e2:	460f      	mov	r7, r1
   208e4:	461e      	mov	r6, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   208e6:	f00f fb1b 	bl	2ff20 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   208ea:	6823      	ldr	r3, [r4, #0]
   208ec:	4620      	mov	r0, r4
   208ee:	2204      	movs	r2, #4
   208f0:	2108      	movs	r1, #8
   208f2:	681b      	ldr	r3, [r3, #0]
   208f4:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   208f6:	4604      	mov	r4, r0
   208f8:	b968      	cbnz	r0, 20916 <_ZN6tflite18ParseConcatenationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3a>
   208fa:	4b15      	ldr	r3, [pc, #84]	; (20950 <_ZN6tflite18ParseConcatenationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x74>)
   208fc:	4639      	mov	r1, r7
   208fe:	9301      	str	r3, [sp, #4]
   20900:	f44f 738c 	mov.w	r3, #280	; 0x118
   20904:	4638      	mov	r0, r7
   20906:	9300      	str	r3, [sp, #0]
   20908:	4a12      	ldr	r2, [pc, #72]	; (20954 <_ZN6tflite18ParseConcatenationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x78>)
   2090a:	4b13      	ldr	r3, [pc, #76]	; (20958 <_ZN6tflite18ParseConcatenationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7c>)
   2090c:	f00f faf2 	bl	2fef4 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   20910:	2001      	movs	r0, #1
}
   20912:	b003      	add	sp, #12
   20914:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_ConcatenationOptions ? static_cast<const tflite::ConcatenationOptions *>(builtin_options()) : nullptr;
   20916:	4628      	mov	r0, r5
   20918:	f00f fb63 	bl	2ffe2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   2091c:	280a      	cmp	r0, #10
   2091e:	d114      	bne.n	2094a <_ZN6tflite18ParseConcatenationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6e>
   20920:	4628      	mov	r0, r5
   20922:	f00f fb0b 	bl	2ff3c <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   20926:	4605      	mov	r5, r0
   20928:	b178      	cbz	r0, 2094a <_ZN6tflite18ParseConcatenationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6e>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   2092a:	2200      	movs	r2, #0
   2092c:	2106      	movs	r1, #6
   2092e:	f00f fb67 	bl	30000 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   20932:	b2c2      	uxtb	r2, r0
  switch (activation) {
   20934:	1e53      	subs	r3, r2, #1
   20936:	2b04      	cmp	r3, #4
   20938:	bf88      	it	hi
   2093a:	2200      	movhi	r2, #0
    return GetField<int32_t>(VT_AXIS, 0);
   2093c:	2104      	movs	r1, #4
    params->activation =
   2093e:	7122      	strb	r2, [r4, #4]
   20940:	4628      	mov	r0, r5
   20942:	2200      	movs	r2, #0
   20944:	f00f fb53 	bl	2ffee <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    params->axis = schema_params->axis();
   20948:	6020      	str	r0, [r4, #0]
  return kTfLiteOk;
   2094a:	2000      	movs	r0, #0
  *builtin_data = params.release();
   2094c:	6034      	str	r4, [r6, #0]
  return kTfLiteOk;
   2094e:	e7e0      	b.n	20912 <_ZN6tflite18ParseConcatenationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
   20950:	00036177 	.word	0x00036177
   20954:	00034b9c 	.word	0x00034b9c
   20958:	00036144 	.word	0x00036144

0002095c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                         BuiltinDataAllocator* allocator, void** builtin_data) {
   2095c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2095e:	4614      	mov	r4, r2
   20960:	4605      	mov	r5, r0
   20962:	460e      	mov	r6, r1
   20964:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   20966:	f00f fadb 	bl	2ff20 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   2096a:	6823      	ldr	r3, [r4, #0]
   2096c:	4620      	mov	r0, r4
   2096e:	2204      	movs	r2, #4
   20970:	2118      	movs	r1, #24
   20972:	681b      	ldr	r3, [r3, #0]
   20974:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   20976:	4604      	mov	r4, r0
   20978:	b968      	cbnz	r0, 20996 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3a>
   2097a:	4b23      	ldr	r3, [pc, #140]	; (20a08 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xac>)
   2097c:	4631      	mov	r1, r6
   2097e:	9301      	str	r3, [sp, #4]
   20980:	f240 1333 	movw	r3, #307	; 0x133
   20984:	4630      	mov	r0, r6
   20986:	9300      	str	r3, [sp, #0]
   20988:	4a20      	ldr	r2, [pc, #128]	; (20a0c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb0>)
   2098a:	4b21      	ldr	r3, [pc, #132]	; (20a10 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb4>)
   2098c:	f00f fab2 	bl	2fef4 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   20990:	2001      	movs	r0, #1
}
   20992:	b003      	add	sp, #12
   20994:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_Conv2DOptions ? static_cast<const tflite::Conv2DOptions *>(builtin_options()) : nullptr;
   20996:	4628      	mov	r0, r5
   20998:	f00f fb23 	bl	2ffe2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   2099c:	2801      	cmp	r0, #1
   2099e:	4606      	mov	r6, r0
   209a0:	d12f      	bne.n	20a02 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
   209a2:	4628      	mov	r0, r5
   209a4:	f00f faca 	bl	2ff3c <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   209a8:	4605      	mov	r5, r0
   209aa:	b350      	cbz	r0, 20a02 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
   209ac:	2200      	movs	r2, #0
   209ae:	2104      	movs	r1, #4
   209b0:	f00f fb26 	bl	30000 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    params->padding = ConvertPadding(schema_params->padding());
   209b4:	b2c0      	uxtb	r0, r0
   209b6:	f00f faab 	bl	2ff10 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    return GetField<int32_t>(VT_STRIDE_W, 0);
   209ba:	2200      	movs	r2, #0
   209bc:	2106      	movs	r1, #6
   209be:	7020      	strb	r0, [r4, #0]
   209c0:	4628      	mov	r0, r5
   209c2:	f00f fb14 	bl	2ffee <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_STRIDE_H, 0);
   209c6:	2200      	movs	r2, #0
   209c8:	2108      	movs	r1, #8
    params->stride_width = schema_params->stride_w();
   209ca:	6060      	str	r0, [r4, #4]
   209cc:	4628      	mov	r0, r5
   209ce:	f00f fb0e 	bl	2ffee <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   209d2:	2200      	movs	r2, #0
   209d4:	210a      	movs	r1, #10
    params->stride_height = schema_params->stride_h();
   209d6:	60a0      	str	r0, [r4, #8]
   209d8:	4628      	mov	r0, r5
   209da:	f00f fb11 	bl	30000 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   209de:	b2c2      	uxtb	r2, r0
  switch (activation) {
   209e0:	1e53      	subs	r3, r2, #1
   209e2:	2b04      	cmp	r3, #4
   209e4:	bf88      	it	hi
   209e6:	2200      	movhi	r2, #0
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
   209e8:	210c      	movs	r1, #12
    params->activation =
   209ea:	7322      	strb	r2, [r4, #12]
   209ec:	4628      	mov	r0, r5
   209ee:	4632      	mov	r2, r6
   209f0:	f00f fafd 	bl	2ffee <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
   209f4:	4632      	mov	r2, r6
    params->dilation_width_factor = schema_params->dilation_w_factor();
   209f6:	6120      	str	r0, [r4, #16]
   209f8:	210e      	movs	r1, #14
   209fa:	4628      	mov	r0, r5
   209fc:	f00f faf7 	bl	2ffee <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    params->dilation_height_factor = schema_params->dilation_h_factor();
   20a00:	6160      	str	r0, [r4, #20]
  return kTfLiteOk;
   20a02:	2000      	movs	r0, #0
  *builtin_data = params.release();
   20a04:	603c      	str	r4, [r7, #0]
  return kTfLiteOk;
   20a06:	e7c4      	b.n	20992 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
   20a08:	00036177 	.word	0x00036177
   20a0c:	00034b9c 	.word	0x00034b9c
   20a10:	00036144 	.word	0x00036144

00020a14 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                                  void** builtin_data) {
   20a14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20a16:	4614      	mov	r4, r2
   20a18:	4605      	mov	r5, r0
   20a1a:	460f      	mov	r7, r1
   20a1c:	461e      	mov	r6, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   20a1e:	f00f fa7f 	bl	2ff20 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   20a22:	6823      	ldr	r3, [r4, #0]
   20a24:	4620      	mov	r0, r4
   20a26:	2204      	movs	r2, #4
   20a28:	211c      	movs	r1, #28
   20a2a:	681b      	ldr	r3, [r3, #0]
   20a2c:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   20a2e:	4604      	mov	r4, r0
   20a30:	b968      	cbnz	r0, 20a4e <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3a>
   20a32:	4b26      	ldr	r3, [pc, #152]	; (20acc <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>)
   20a34:	4639      	mov	r1, r7
   20a36:	9301      	str	r3, [sp, #4]
   20a38:	f240 135d 	movw	r3, #349	; 0x15d
   20a3c:	4638      	mov	r0, r7
   20a3e:	9300      	str	r3, [sp, #0]
   20a40:	4a23      	ldr	r2, [pc, #140]	; (20ad0 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbc>)
   20a42:	4b24      	ldr	r3, [pc, #144]	; (20ad4 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc0>)
   20a44:	f00f fa56 	bl	2fef4 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   20a48:	2001      	movs	r0, #1
}
   20a4a:	b003      	add	sp, #12
   20a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_DepthwiseConv2DOptions ? static_cast<const tflite::DepthwiseConv2DOptions *>(builtin_options()) : nullptr;
   20a4e:	4628      	mov	r0, r5
   20a50:	f00f fac7 	bl	2ffe2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   20a54:	2802      	cmp	r0, #2
   20a56:	d135      	bne.n	20ac4 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb0>
   20a58:	4628      	mov	r0, r5
   20a5a:	f00f fa6f 	bl	2ff3c <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   20a5e:	4605      	mov	r5, r0
   20a60:	b380      	cbz	r0, 20ac4 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb0>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
   20a62:	2200      	movs	r2, #0
   20a64:	2104      	movs	r1, #4
   20a66:	f00f facb 	bl	30000 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    params->padding = ConvertPadding(schema_params->padding());
   20a6a:	b2c0      	uxtb	r0, r0
   20a6c:	f00f fa50 	bl	2ff10 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    return GetField<int32_t>(VT_STRIDE_W, 0);
   20a70:	2200      	movs	r2, #0
   20a72:	2106      	movs	r1, #6
   20a74:	7020      	strb	r0, [r4, #0]
   20a76:	4628      	mov	r0, r5
   20a78:	f00f fab9 	bl	2ffee <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_STRIDE_H, 0);
   20a7c:	2200      	movs	r2, #0
   20a7e:	2108      	movs	r1, #8
    params->stride_width = schema_params->stride_w();
   20a80:	6060      	str	r0, [r4, #4]
   20a82:	4628      	mov	r0, r5
   20a84:	f00f fab3 	bl	2ffee <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_DEPTH_MULTIPLIER, 0);
   20a88:	2200      	movs	r2, #0
   20a8a:	210a      	movs	r1, #10
    params->stride_height = schema_params->stride_h();
   20a8c:	60a0      	str	r0, [r4, #8]
   20a8e:	4628      	mov	r0, r5
   20a90:	f00f faad 	bl	2ffee <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   20a94:	2200      	movs	r2, #0
   20a96:	210c      	movs	r1, #12
    params->depth_multiplier = schema_params->depth_multiplier();
   20a98:	60e0      	str	r0, [r4, #12]
   20a9a:	4628      	mov	r0, r5
   20a9c:	f00f fab0 	bl	30000 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   20aa0:	b2c0      	uxtb	r0, r0
  switch (activation) {
   20aa2:	1e43      	subs	r3, r0, #1
   20aa4:	2b04      	cmp	r3, #4
   20aa6:	bf88      	it	hi
   20aa8:	2000      	movhi	r0, #0
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
   20aaa:	2201      	movs	r2, #1
   20aac:	210e      	movs	r1, #14
    params->activation =
   20aae:	7420      	strb	r0, [r4, #16]
   20ab0:	4628      	mov	r0, r5
   20ab2:	f00f fa9c 	bl	2ffee <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
   20ab6:	2201      	movs	r2, #1
    params->dilation_width_factor = schema_params->dilation_w_factor();
   20ab8:	6160      	str	r0, [r4, #20]
   20aba:	2110      	movs	r1, #16
   20abc:	4628      	mov	r0, r5
   20abe:	f00f fa96 	bl	2ffee <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    params->dilation_height_factor = schema_params->dilation_h_factor();
   20ac2:	61a0      	str	r0, [r4, #24]
  return kTfLiteOk;
   20ac4:	2000      	movs	r0, #0
  *builtin_data = params.release();
   20ac6:	6034      	str	r4, [r6, #0]
  return kTfLiteOk;
   20ac8:	e7bf      	b.n	20a4a <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
   20aca:	bf00      	nop
   20acc:	00036177 	.word	0x00036177
   20ad0:	00034b9c 	.word	0x00034b9c
   20ad4:	00036144 	.word	0x00036144

00020ad8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                                 void** builtin_data) {
   20ad8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   20adc:	4617      	mov	r7, r2
   20ade:	4605      	mov	r5, r0
   20ae0:	4688      	mov	r8, r1
   20ae2:	4699      	mov	r9, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   20ae4:	f00f fa1c 	bl	2ff20 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   20ae8:	683b      	ldr	r3, [r7, #0]
   20aea:	2201      	movs	r2, #1
   20aec:	2104      	movs	r1, #4
   20aee:	4638      	mov	r0, r7
   20af0:	681b      	ldr	r3, [r3, #0]
   20af2:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   20af4:	4604      	mov	r4, r0
   20af6:	b970      	cbnz	r0, 20b16 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3e>
   20af8:	4b25      	ldr	r3, [pc, #148]	; (20b90 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>)
   20afa:	4641      	mov	r1, r8
   20afc:	9301      	str	r3, [sp, #4]
   20afe:	f240 1399 	movw	r3, #409	; 0x199
   20b02:	4640      	mov	r0, r8
   20b04:	9300      	str	r3, [sp, #0]
   20b06:	4a23      	ldr	r2, [pc, #140]	; (20b94 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbc>)
   20b08:	4b23      	ldr	r3, [pc, #140]	; (20b98 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc0>)
   20b0a:	f00f f9f3 	bl	2fef4 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
        return kTfLiteError;
   20b0e:	2001      	movs	r0, #1
}
   20b10:	b002      	add	sp, #8
   20b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
   20b16:	4628      	mov	r0, r5
   20b18:	f00f fa63 	bl	2ffe2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   20b1c:	2808      	cmp	r0, #8
   20b1e:	4682      	mov	sl, r0
   20b20:	d132      	bne.n	20b88 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb0>
   20b22:	4628      	mov	r0, r5
   20b24:	f00f fa0a 	bl	2ff3c <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   20b28:	4605      	mov	r5, r0
   20b2a:	b368      	cbz	r0, 20b88 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb0>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   20b2c:	2200      	movs	r2, #0
   20b2e:	2104      	movs	r1, #4
   20b30:	f00f fa66 	bl	30000 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   20b34:	b2c6      	uxtb	r6, r0
  switch (activation) {
   20b36:	1e73      	subs	r3, r6, #1
   20b38:	2b04      	cmp	r3, #4
   20b3a:	bf88      	it	hi
   20b3c:	2600      	movhi	r6, #0
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
   20b3e:	2200      	movs	r2, #0
   20b40:	4651      	mov	r1, sl
   20b42:	4628      	mov	r0, r5
    params->activation =
   20b44:	7026      	strb	r6, [r4, #0]
   20b46:	f00f fa43 	bl	2ffd0 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   20b4a:	3800      	subs	r0, #0
   20b4c:	bf18      	it	ne
   20b4e:	2001      	movne	r0, #1
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
   20b50:	2200      	movs	r2, #0
   20b52:	210a      	movs	r1, #10
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
   20b54:	70a0      	strb	r0, [r4, #2]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
   20b56:	4628      	mov	r0, r5
   20b58:	f00f fa3a 	bl	2ffd0 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   20b5c:	3800      	subs	r0, #0
   20b5e:	bf18      	it	ne
   20b60:	2001      	movne	r0, #1
    return static_cast<tflite::FullyConnectedOptionsWeightsFormat>(GetField<int8_t>(VT_WEIGHTS_FORMAT, 0));
   20b62:	2200      	movs	r2, #0
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
   20b64:	70e0      	strb	r0, [r4, #3]
    return static_cast<tflite::FullyConnectedOptionsWeightsFormat>(GetField<int8_t>(VT_WEIGHTS_FORMAT, 0));
   20b66:	2106      	movs	r1, #6
   20b68:	4628      	mov	r0, r5
   20b6a:	f00f fa49 	bl	30000 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    switch (schema_params->weights_format()) {
   20b6e:	b150      	cbz	r0, 20b86 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xae>
   20b70:	2801      	cmp	r0, #1
   20b72:	d008      	beq.n	20b86 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xae>
        TF_LITE_REPORT_ERROR(error_reporter,
   20b74:	4640      	mov	r0, r8
   20b76:	4909      	ldr	r1, [pc, #36]	; (20b9c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc4>)
   20b78:	f00f f9ae 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   20b7c:	4621      	mov	r1, r4
   20b7e:	4638      	mov	r0, r7
   20b80:	f00f f9d9 	bl	2ff36 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv.isra.0>
   20b84:	e7c3      	b.n	20b0e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
        params->weights_format =
   20b86:	7060      	strb	r0, [r4, #1]
  return kTfLiteOk;
   20b88:	2000      	movs	r0, #0
  *builtin_data = params.release();
   20b8a:	f8c9 4000 	str.w	r4, [r9]
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
   20b8e:	e7bf      	b.n	20b10 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x38>
   20b90:	00036177 	.word	0x00036177
   20b94:	00034b9c 	.word	0x00034b9c
   20b98:	00036144 	.word	0x00036144
   20b9c:	00036191 	.word	0x00036191

00020ba0 <_ZN6tflite20ParseL2NormalizationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                                  void** builtin_data) {
   20ba0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20ba2:	4614      	mov	r4, r2
   20ba4:	4605      	mov	r5, r0
   20ba6:	460f      	mov	r7, r1
   20ba8:	461e      	mov	r6, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   20baa:	f00f f9b9 	bl	2ff20 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   20bae:	2201      	movs	r2, #1
   20bb0:	6823      	ldr	r3, [r4, #0]
   20bb2:	4620      	mov	r0, r4
   20bb4:	4611      	mov	r1, r2
   20bb6:	681b      	ldr	r3, [r3, #0]
   20bb8:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   20bba:	4604      	mov	r4, r0
   20bbc:	b968      	cbnz	r0, 20bda <_ZN6tflite20ParseL2NormalizationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3a>
   20bbe:	4b12      	ldr	r3, [pc, #72]	; (20c08 <_ZN6tflite20ParseL2NormalizationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>)
   20bc0:	4639      	mov	r1, r7
   20bc2:	9301      	str	r3, [sp, #4]
   20bc4:	f44f 73ef 	mov.w	r3, #478	; 0x1de
   20bc8:	4638      	mov	r0, r7
   20bca:	9300      	str	r3, [sp, #0]
   20bcc:	4a0f      	ldr	r2, [pc, #60]	; (20c0c <_ZN6tflite20ParseL2NormalizationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6c>)
   20bce:	4b10      	ldr	r3, [pc, #64]	; (20c10 <_ZN6tflite20ParseL2NormalizationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x70>)
   20bd0:	f00f f990 	bl	2fef4 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   20bd4:	2001      	movs	r0, #1
}
   20bd6:	b003      	add	sp, #12
   20bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_L2NormOptions ? static_cast<const tflite::L2NormOptions *>(builtin_options()) : nullptr;
   20bda:	4628      	mov	r0, r5
   20bdc:	f00f fa01 	bl	2ffe2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   20be0:	280c      	cmp	r0, #12
   20be2:	d10d      	bne.n	20c00 <_ZN6tflite20ParseL2NormalizationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60>
   20be4:	4628      	mov	r0, r5
   20be6:	f00f f9a9 	bl	2ff3c <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   20bea:	b148      	cbz	r0, 20c00 <_ZN6tflite20ParseL2NormalizationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   20bec:	2200      	movs	r2, #0
   20bee:	2104      	movs	r1, #4
   20bf0:	f00f fa06 	bl	30000 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   20bf4:	b2c2      	uxtb	r2, r0
  switch (activation) {
   20bf6:	1e53      	subs	r3, r2, #1
   20bf8:	2b04      	cmp	r3, #4
   20bfa:	bf88      	it	hi
   20bfc:	2200      	movhi	r2, #0
    params->activation =
   20bfe:	7022      	strb	r2, [r4, #0]
  return kTfLiteOk;
   20c00:	2000      	movs	r0, #0
  *builtin_data = params.release();
   20c02:	6034      	str	r4, [r6, #0]
  return kTfLiteOk;
   20c04:	e7e7      	b.n	20bd6 <_ZN6tflite20ParseL2NormalizationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
   20c06:	bf00      	nop
   20c08:	00036177 	.word	0x00036177
   20c0c:	00034b9c 	.word	0x00034b9c
   20c10:	00036144 	.word	0x00036144

00020c14 <_ZN6tflite8ParseMulEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                      BuiltinDataAllocator* allocator, void** builtin_data) {
   20c14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20c16:	4614      	mov	r4, r2
   20c18:	4605      	mov	r5, r0
   20c1a:	460f      	mov	r7, r1
   20c1c:	461e      	mov	r6, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   20c1e:	f00f f97f 	bl	2ff20 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   20c22:	2201      	movs	r2, #1
   20c24:	6823      	ldr	r3, [r4, #0]
   20c26:	4620      	mov	r0, r4
   20c28:	4611      	mov	r1, r2
   20c2a:	681b      	ldr	r3, [r3, #0]
   20c2c:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   20c2e:	4604      	mov	r4, r0
   20c30:	b968      	cbnz	r0, 20c4e <_ZN6tflite8ParseMulEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3a>
   20c32:	4b12      	ldr	r3, [pc, #72]	; (20c7c <_ZN6tflite8ParseMulEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>)
   20c34:	4639      	mov	r1, r7
   20c36:	9301      	str	r3, [sp, #4]
   20c38:	f240 233e 	movw	r3, #574	; 0x23e
   20c3c:	4638      	mov	r0, r7
   20c3e:	9300      	str	r3, [sp, #0]
   20c40:	4a0f      	ldr	r2, [pc, #60]	; (20c80 <_ZN6tflite8ParseMulEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6c>)
   20c42:	4b10      	ldr	r3, [pc, #64]	; (20c84 <_ZN6tflite8ParseMulEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x70>)
   20c44:	f00f f956 	bl	2fef4 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   20c48:	2001      	movs	r0, #1
}
   20c4a:	b003      	add	sp, #12
   20c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_MulOptions ? static_cast<const tflite::MulOptions *>(builtin_options()) : nullptr;
   20c4e:	4628      	mov	r0, r5
   20c50:	f00f f9c7 	bl	2ffe2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   20c54:	2815      	cmp	r0, #21
   20c56:	d10d      	bne.n	20c74 <_ZN6tflite8ParseMulEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60>
   20c58:	4628      	mov	r0, r5
   20c5a:	f00f f96f 	bl	2ff3c <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   20c5e:	b148      	cbz	r0, 20c74 <_ZN6tflite8ParseMulEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   20c60:	2200      	movs	r2, #0
   20c62:	2104      	movs	r1, #4
   20c64:	f00f f9cc 	bl	30000 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   20c68:	b2c2      	uxtb	r2, r0
  switch (activation) {
   20c6a:	1e53      	subs	r3, r2, #1
   20c6c:	2b04      	cmp	r3, #4
   20c6e:	bf88      	it	hi
   20c70:	2200      	movhi	r2, #0
    params->activation =
   20c72:	7022      	strb	r2, [r4, #0]
  return kTfLiteOk;
   20c74:	2000      	movs	r0, #0
  *builtin_data = params.release();
   20c76:	6034      	str	r4, [r6, #0]
  return kTfLiteOk;
   20c78:	e7e7      	b.n	20c4a <_ZN6tflite8ParseMulEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
   20c7a:	bf00      	nop
   20c7c:	00036177 	.word	0x00036177
   20c80:	00034b9c 	.word	0x00034b9c
   20c84:	00036144 	.word	0x00036144

00020c88 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                       BuiltinDataAllocator* allocator, void** builtin_data) {
   20c88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20c8a:	4614      	mov	r4, r2
   20c8c:	4605      	mov	r5, r0
   20c8e:	460f      	mov	r7, r1
   20c90:	461e      	mov	r6, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   20c92:	f00f f945 	bl	2ff20 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   20c96:	6823      	ldr	r3, [r4, #0]
   20c98:	4620      	mov	r0, r4
   20c9a:	2204      	movs	r2, #4
   20c9c:	2128      	movs	r1, #40	; 0x28
   20c9e:	681b      	ldr	r3, [r3, #0]
   20ca0:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   20ca2:	4604      	mov	r4, r0
   20ca4:	b968      	cbnz	r0, 20cc2 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3a>
   20ca6:	4b23      	ldr	r3, [pc, #140]	; (20d34 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xac>)
   20ca8:	4639      	mov	r1, r7
   20caa:	9301      	str	r3, [sp, #4]
   20cac:	f44f 7324 	mov.w	r3, #656	; 0x290
   20cb0:	4638      	mov	r0, r7
   20cb2:	9300      	str	r3, [sp, #0]
   20cb4:	4a20      	ldr	r2, [pc, #128]	; (20d38 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb0>)
   20cb6:	4b21      	ldr	r3, [pc, #132]	; (20d3c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb4>)
   20cb8:	f00f f91c 	bl	2fef4 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   20cbc:	2001      	movs	r0, #1
}
   20cbe:	b003      	add	sp, #12
   20cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_Pool2DOptions ? static_cast<const tflite::Pool2DOptions *>(builtin_options()) : nullptr;
   20cc2:	4628      	mov	r0, r5
   20cc4:	f00f f98d 	bl	2ffe2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   20cc8:	2805      	cmp	r0, #5
   20cca:	d12f      	bne.n	20d2c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
   20ccc:	4628      	mov	r0, r5
   20cce:	f00f f935 	bl	2ff3c <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   20cd2:	4605      	mov	r5, r0
   20cd4:	b350      	cbz	r0, 20d2c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
   20cd6:	2200      	movs	r2, #0
   20cd8:	2104      	movs	r1, #4
   20cda:	f00f f991 	bl	30000 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    params->padding = ConvertPadding(schema_params->padding());
   20cde:	b2c0      	uxtb	r0, r0
   20ce0:	f00f f916 	bl	2ff10 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    return GetField<int32_t>(VT_STRIDE_W, 0);
   20ce4:	2200      	movs	r2, #0
   20ce6:	2106      	movs	r1, #6
   20ce8:	7020      	strb	r0, [r4, #0]
   20cea:	4628      	mov	r0, r5
   20cec:	f00f f97f 	bl	2ffee <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_STRIDE_H, 0);
   20cf0:	2200      	movs	r2, #0
   20cf2:	2108      	movs	r1, #8
    params->stride_width = schema_params->stride_w();
   20cf4:	6060      	str	r0, [r4, #4]
   20cf6:	4628      	mov	r0, r5
   20cf8:	f00f f979 	bl	2ffee <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_FILTER_WIDTH, 0);
   20cfc:	2200      	movs	r2, #0
   20cfe:	210a      	movs	r1, #10
    params->stride_height = schema_params->stride_h();
   20d00:	60a0      	str	r0, [r4, #8]
   20d02:	4628      	mov	r0, r5
   20d04:	f00f f973 	bl	2ffee <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_FILTER_HEIGHT, 0);
   20d08:	2200      	movs	r2, #0
   20d0a:	210c      	movs	r1, #12
    params->filter_width = schema_params->filter_width();
   20d0c:	60e0      	str	r0, [r4, #12]
   20d0e:	4628      	mov	r0, r5
   20d10:	f00f f96d 	bl	2ffee <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   20d14:	2200      	movs	r2, #0
    params->filter_height = schema_params->filter_height();
   20d16:	6120      	str	r0, [r4, #16]
   20d18:	210e      	movs	r1, #14
   20d1a:	4628      	mov	r0, r5
   20d1c:	f00f f970 	bl	30000 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   20d20:	b2c0      	uxtb	r0, r0
  switch (activation) {
   20d22:	1e43      	subs	r3, r0, #1
   20d24:	2b04      	cmp	r3, #4
   20d26:	bf88      	it	hi
   20d28:	2000      	movhi	r0, #0
    params->activation =
   20d2a:	7520      	strb	r0, [r4, #20]
  return kTfLiteOk;
   20d2c:	2000      	movs	r0, #0
  *builtin_data = params.release();
   20d2e:	6034      	str	r4, [r6, #0]
  return kTfLiteOk;
   20d30:	e7c5      	b.n	20cbe <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
   20d32:	bf00      	nop
   20d34:	00036177 	.word	0x00036177
   20d38:	00034b9c 	.word	0x00034b9c
   20d3c:	00036144 	.word	0x00036144

00020d40 <_ZN6tflite8ParseSubEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                      BuiltinDataAllocator* allocator, void** builtin_data) {
   20d40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20d42:	4614      	mov	r4, r2
   20d44:	4605      	mov	r5, r0
   20d46:	460f      	mov	r7, r1
   20d48:	461e      	mov	r6, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   20d4a:	f00f f8e9 	bl	2ff20 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   20d4e:	2201      	movs	r2, #1
   20d50:	6823      	ldr	r3, [r4, #0]
   20d52:	4620      	mov	r0, r4
   20d54:	4611      	mov	r1, r2
   20d56:	681b      	ldr	r3, [r3, #0]
   20d58:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   20d5a:	4604      	mov	r4, r0
   20d5c:	b968      	cbnz	r0, 20d7a <_ZN6tflite8ParseSubEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3a>
   20d5e:	4b12      	ldr	r3, [pc, #72]	; (20da8 <_ZN6tflite8ParseSubEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>)
   20d60:	4639      	mov	r1, r7
   20d62:	9301      	str	r3, [sp, #4]
   20d64:	f240 33a2 	movw	r3, #930	; 0x3a2
   20d68:	4638      	mov	r0, r7
   20d6a:	9300      	str	r3, [sp, #0]
   20d6c:	4a0f      	ldr	r2, [pc, #60]	; (20dac <_ZN6tflite8ParseSubEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6c>)
   20d6e:	4b10      	ldr	r3, [pc, #64]	; (20db0 <_ZN6tflite8ParseSubEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x70>)
   20d70:	f00f f8c0 	bl	2fef4 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   20d74:	2001      	movs	r0, #1
}
   20d76:	b003      	add	sp, #12
   20d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_SubOptions ? static_cast<const tflite::SubOptions *>(builtin_options()) : nullptr;
   20d7a:	4628      	mov	r0, r5
   20d7c:	f00f f931 	bl	2ffe2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   20d80:	281c      	cmp	r0, #28
   20d82:	d10d      	bne.n	20da0 <_ZN6tflite8ParseSubEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60>
   20d84:	4628      	mov	r0, r5
   20d86:	f00f f8d9 	bl	2ff3c <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   20d8a:	b148      	cbz	r0, 20da0 <_ZN6tflite8ParseSubEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   20d8c:	2200      	movs	r2, #0
   20d8e:	2104      	movs	r1, #4
   20d90:	f00f f936 	bl	30000 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   20d94:	b2c2      	uxtb	r2, r0
  switch (activation) {
   20d96:	1e53      	subs	r3, r2, #1
   20d98:	2b04      	cmp	r3, #4
   20d9a:	bf88      	it	hi
   20d9c:	2200      	movhi	r2, #0
    params->activation =
   20d9e:	7022      	strb	r2, [r4, #0]
  return kTfLiteOk;
   20da0:	2000      	movs	r0, #0
  *builtin_data = params.release();
   20da2:	6034      	str	r4, [r6, #0]
  return kTfLiteOk;
   20da4:	e7e7      	b.n	20d76 <_ZN6tflite8ParseSubEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
   20da6:	bf00      	nop
   20da8:	00036177 	.word	0x00036177
   20dac:	00034b9c 	.word	0x00034b9c
   20db0:	00036144 	.word	0x00036144

00020db4 <_ZN6tflite9ParseSvdfEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                       BuiltinDataAllocator* allocator, void** builtin_data) {
   20db4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20db6:	4614      	mov	r4, r2
   20db8:	4605      	mov	r5, r0
   20dba:	460e      	mov	r6, r1
   20dbc:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   20dbe:	f00f f8af 	bl	2ff20 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   20dc2:	6823      	ldr	r3, [r4, #0]
   20dc4:	4620      	mov	r0, r4
   20dc6:	2204      	movs	r2, #4
   20dc8:	2108      	movs	r1, #8
   20dca:	681b      	ldr	r3, [r3, #0]
   20dcc:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   20dce:	4604      	mov	r4, r0
   20dd0:	b968      	cbnz	r0, 20dee <_ZN6tflite9ParseSvdfEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3a>
   20dd2:	4b1a      	ldr	r3, [pc, #104]	; (20e3c <_ZN6tflite9ParseSvdfEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x88>)
   20dd4:	4631      	mov	r1, r6
   20dd6:	9301      	str	r3, [sp, #4]
   20dd8:	f240 33bb 	movw	r3, #955	; 0x3bb
   20ddc:	4630      	mov	r0, r6
   20dde:	9300      	str	r3, [sp, #0]
   20de0:	4a17      	ldr	r2, [pc, #92]	; (20e40 <_ZN6tflite9ParseSvdfEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8c>)
   20de2:	4b18      	ldr	r3, [pc, #96]	; (20e44 <_ZN6tflite9ParseSvdfEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x90>)
   20de4:	f00f f886 	bl	2fef4 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   20de8:	2001      	movs	r0, #1
}
   20dea:	b003      	add	sp, #12
   20dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_SVDFOptions ? static_cast<const tflite::SVDFOptions *>(builtin_options()) : nullptr;
   20dee:	4628      	mov	r0, r5
   20df0:	f00f f8f7 	bl	2ffe2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   20df4:	2806      	cmp	r0, #6
   20df6:	4606      	mov	r6, r0
   20df8:	d11d      	bne.n	20e36 <_ZN6tflite9ParseSvdfEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x82>
   20dfa:	4628      	mov	r0, r5
   20dfc:	f00f f89e 	bl	2ff3c <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   20e00:	4605      	mov	r5, r0
   20e02:	b1c0      	cbz	r0, 20e36 <_ZN6tflite9ParseSvdfEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x82>
    return GetField<int32_t>(VT_RANK, 0);
   20e04:	2200      	movs	r2, #0
   20e06:	2104      	movs	r1, #4
   20e08:	f00f f8f1 	bl	2ffee <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   20e0c:	2200      	movs	r2, #0
   20e0e:	4631      	mov	r1, r6
    params->rank = schema_params->rank();
   20e10:	6020      	str	r0, [r4, #0]
   20e12:	4628      	mov	r0, r5
   20e14:	f00f f8f4 	bl	30000 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   20e18:	b2c2      	uxtb	r2, r0
  switch (activation) {
   20e1a:	1e53      	subs	r3, r2, #1
   20e1c:	2b04      	cmp	r3, #4
   20e1e:	bf88      	it	hi
   20e20:	2200      	movhi	r2, #0
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
   20e22:	2108      	movs	r1, #8
    params->activation =
   20e24:	7122      	strb	r2, [r4, #4]
   20e26:	4628      	mov	r0, r5
   20e28:	2200      	movs	r2, #0
   20e2a:	f00f f8d1 	bl	2ffd0 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   20e2e:	3800      	subs	r0, #0
   20e30:	bf18      	it	ne
   20e32:	2001      	movne	r0, #1
   20e34:	7160      	strb	r0, [r4, #5]
  return kTfLiteOk;
   20e36:	2000      	movs	r0, #0
  *builtin_data = params.release();
   20e38:	603c      	str	r4, [r7, #0]
  return kTfLiteOk;
   20e3a:	e7d6      	b.n	20dea <_ZN6tflite9ParseSvdfEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
   20e3c:	00036177 	.word	0x00036177
   20e40:	00034b9c 	.word	0x00034b9c
   20e44:	00036144 	.word	0x00036144

00020e48 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                          void** builtin_data) {
   20e48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20e4a:	4614      	mov	r4, r2
   20e4c:	4605      	mov	r5, r0
   20e4e:	460f      	mov	r7, r1
   20e50:	461e      	mov	r6, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   20e52:	f00f f865 	bl	2ff20 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   20e56:	2204      	movs	r2, #4
   20e58:	6823      	ldr	r3, [r4, #0]
   20e5a:	4620      	mov	r0, r4
   20e5c:	4611      	mov	r1, r2
   20e5e:	681b      	ldr	r3, [r3, #0]
   20e60:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   20e62:	4604      	mov	r4, r0
   20e64:	b968      	cbnz	r0, 20e82 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3a>
   20e66:	4b0f      	ldr	r3, [pc, #60]	; (20ea4 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5c>)
   20e68:	4639      	mov	r1, r7
   20e6a:	9301      	str	r3, [sp, #4]
   20e6c:	f44f 7351 	mov.w	r3, #836	; 0x344
   20e70:	4638      	mov	r0, r7
   20e72:	9300      	str	r3, [sp, #0]
   20e74:	4a0c      	ldr	r2, [pc, #48]	; (20ea8 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60>)
   20e76:	4b0d      	ldr	r3, [pc, #52]	; (20eac <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x64>)
   20e78:	f00f f83c 	bl	2fef4 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   20e7c:	2001      	movs	r0, #1
}
   20e7e:	b003      	add	sp, #12
   20e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_SoftmaxOptions ? static_cast<const tflite::SoftmaxOptions *>(builtin_options()) : nullptr;
   20e82:	4628      	mov	r0, r5
   20e84:	f00f f8ad 	bl	2ffe2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   20e88:	2809      	cmp	r0, #9
   20e8a:	d108      	bne.n	20e9e <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x56>
   20e8c:	4628      	mov	r0, r5
   20e8e:	f00f f855 	bl	2ff3c <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   20e92:	b120      	cbz	r0, 20e9e <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x56>
    return GetField<float>(VT_BETA, 0.0f);
   20e94:	2200      	movs	r2, #0
   20e96:	2104      	movs	r1, #4
   20e98:	f00f f8bb 	bl	30012 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    params->beta = schema_params->beta();
   20e9c:	6020      	str	r0, [r4, #0]
  return kTfLiteOk;
   20e9e:	2000      	movs	r0, #0
  *builtin_data = params.release();
   20ea0:	6034      	str	r4, [r6, #0]
  return kTfLiteOk;
   20ea2:	e7ec      	b.n	20e7e <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
   20ea4:	00036177 	.word	0x00036177
   20ea8:	00034b9c 	.word	0x00034b9c
   20eac:	00036144 	.word	0x00036144

00020eb0 <_ZN6tflite10ParseSplitEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                        BuiltinDataAllocator* allocator, void** builtin_data) {
   20eb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20eb2:	4614      	mov	r4, r2
   20eb4:	4605      	mov	r5, r0
   20eb6:	460f      	mov	r7, r1
   20eb8:	461e      	mov	r6, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   20eba:	f00f f831 	bl	2ff20 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
                             BuiltinDataDeleter(allocator_));
   20ebe:	4620      	mov	r0, r4
   20ec0:	f00f f8b1 	bl	30026 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI17TfLiteSplitParamsEEPT_v>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   20ec4:	4604      	mov	r4, r0
   20ec6:	b968      	cbnz	r0, 20ee4 <_ZN6tflite10ParseSplitEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x34>
   20ec8:	4b0f      	ldr	r3, [pc, #60]	; (20f08 <_ZN6tflite10ParseSplitEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x58>)
   20eca:	4639      	mov	r1, r7
   20ecc:	9301      	str	r3, [sp, #4]
   20ece:	f44f 7357 	mov.w	r3, #860	; 0x35c
   20ed2:	4638      	mov	r0, r7
   20ed4:	9300      	str	r3, [sp, #0]
   20ed6:	4a0d      	ldr	r2, [pc, #52]	; (20f0c <_ZN6tflite10ParseSplitEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5c>)
   20ed8:	4b0d      	ldr	r3, [pc, #52]	; (20f10 <_ZN6tflite10ParseSplitEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60>)
   20eda:	f00f f80b 	bl	2fef4 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   20ede:	2001      	movs	r0, #1
}
   20ee0:	b003      	add	sp, #12
   20ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_SplitOptions ? static_cast<const tflite::SplitOptions *>(builtin_options()) : nullptr;
   20ee4:	4628      	mov	r0, r5
   20ee6:	f00f f87c 	bl	2ffe2 <_ZNK6tflite8Operator20builtin_options_typeEv>
   20eea:	2823      	cmp	r0, #35	; 0x23
   20eec:	d108      	bne.n	20f00 <_ZN6tflite10ParseSplitEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x50>
   20eee:	4628      	mov	r0, r5
   20ef0:	f00f f824 	bl	2ff3c <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   20ef4:	b120      	cbz	r0, 20f00 <_ZN6tflite10ParseSplitEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x50>
    return GetField<int32_t>(VT_NUM_SPLITS, 0);
   20ef6:	2200      	movs	r2, #0
   20ef8:	2104      	movs	r1, #4
   20efa:	f00f f878 	bl	2ffee <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    params->num_splits = schema_params->num_splits();
   20efe:	6020      	str	r0, [r4, #0]
  return kTfLiteOk;
   20f00:	2000      	movs	r0, #0
  *builtin_data = params.release();
   20f02:	6034      	str	r4, [r6, #0]
  return kTfLiteOk;
   20f04:	e7ec      	b.n	20ee0 <_ZN6tflite10ParseSplitEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x30>
   20f06:	bf00      	nop
   20f08:	00036177 	.word	0x00036177
   20f0c:	00034b9c 	.word	0x00034b9c
   20f10:	00036144 	.word	0x00036144

00020f14 <_ZN6tflite18QuantizeMultiplierEdPiS0_>:
                        int* shift) {
   20f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20f16:	4615      	mov	r5, r2
   20f18:	461c      	mov	r4, r3
  if (double_multiplier == 0.) {
   20f1a:	2200      	movs	r2, #0
   20f1c:	2300      	movs	r3, #0
                        int* shift) {
   20f1e:	4606      	mov	r6, r0
   20f20:	460f      	mov	r7, r1
  if (double_multiplier == 0.) {
   20f22:	f7ef fd2b 	bl	1097c <__aeabi_dcmpeq>
   20f26:	b118      	cbz	r0, 20f30 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x1c>
    *quantized_multiplier = 0;
   20f28:	2300      	movs	r3, #0
   20f2a:	602b      	str	r3, [r5, #0]
    *shift = 0;
   20f2c:	6023      	str	r3, [r4, #0]
}
   20f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  const double q = std::frexp(double_multiplier, shift);
   20f30:	4622      	mov	r2, r4
   20f32:	4630      	mov	r0, r6
   20f34:	4639      	mov	r1, r7
   20f36:	f001 fd63 	bl	22a00 <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
   20f3a:	2200      	movs	r2, #0
   20f3c:	4b11      	ldr	r3, [pc, #68]	; (20f84 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x70>)
   20f3e:	f7ef fab5 	bl	104ac <__aeabi_dmul>
   20f42:	f001 fdc3 	bl	22acc <round>
   20f46:	f7ef fdc3 	bl	10ad0 <__aeabi_d2lz>
  TFLITE_CHECK(q_fixed <= (1ll << 31));
   20f4a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
   20f4e:	460f      	mov	r7, r1
  TFLITE_CHECK(q_fixed <= (1ll << 31));
   20f50:	2300      	movs	r3, #0
   20f52:	4282      	cmp	r2, r0
   20f54:	eb73 0107 	sbcs.w	r1, r3, r7
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
   20f58:	4606      	mov	r6, r0
  TFLITE_CHECK(q_fixed <= (1ll << 31));
   20f5a:	da01      	bge.n	20f60 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x4c>
   20f5c:	f00f ff2d 	bl	30dba <abort>
  if (q_fixed == (1ll << 31)) {
   20f60:	429f      	cmp	r7, r3
   20f62:	bf01      	itttt	eq
   20f64:	4296      	cmpeq	r6, r2
    ++*shift;
   20f66:	6823      	ldreq	r3, [r4, #0]
    q_fixed /= 2;
   20f68:	f04f 4680 	moveq.w	r6, #1073741824	; 0x40000000
    ++*shift;
   20f6c:	3301      	addeq	r3, #1
   20f6e:	bf08      	it	eq
   20f70:	6023      	streq	r3, [r4, #0]
  if (*shift < -31) {
   20f72:	6823      	ldr	r3, [r4, #0]
   20f74:	331f      	adds	r3, #31
    *shift = 0;
   20f76:	bfbe      	ittt	lt
   20f78:	2300      	movlt	r3, #0
    q_fixed = 0;
   20f7a:	2600      	movlt	r6, #0
    *shift = 0;
   20f7c:	6023      	strlt	r3, [r4, #0]
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
   20f7e:	602e      	str	r6, [r5, #0]
   20f80:	e7d5      	b.n	20f2e <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x1a>
   20f82:	bf00      	nop
   20f84:	41e00000 	.word	0x41e00000

00020f88 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_>:
                                      int* left_shift) {
   20f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20f8a:	4615      	mov	r5, r2
   20f8c:	461c      	mov	r4, r3
  TFLITE_CHECK_GT(double_multiplier, 1.);
   20f8e:	2200      	movs	r2, #0
   20f90:	4b08      	ldr	r3, [pc, #32]	; (20fb4 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x2c>)
                                      int* left_shift) {
   20f92:	4606      	mov	r6, r0
   20f94:	460f      	mov	r7, r1
  TFLITE_CHECK_GT(double_multiplier, 1.);
   20f96:	f7ef fd19 	bl	109cc <__aeabi_dcmpgt>
   20f9a:	b908      	cbnz	r0, 20fa0 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x18>
   20f9c:	f00f ff0d 	bl	30dba <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
   20fa0:	4623      	mov	r3, r4
   20fa2:	462a      	mov	r2, r5
   20fa4:	4630      	mov	r0, r6
   20fa6:	4639      	mov	r1, r7
   20fa8:	f7ff ffb4 	bl	20f14 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
  TFLITE_CHECK_GE(*left_shift, 0);
   20fac:	6823      	ldr	r3, [r4, #0]
   20fae:	2b00      	cmp	r3, #0
   20fb0:	dbf4      	blt.n	20f9c <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x14>
}
   20fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20fb4:	3ff00000 	.word	0x3ff00000

00020fb8 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>:
                                         int* left_shift) {
   20fb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20fba:	4617      	mov	r7, r2
   20fbc:	461e      	mov	r6, r3
  TFLITE_CHECK_LT(double_multiplier, 1.);
   20fbe:	2200      	movs	r2, #0
   20fc0:	4b0d      	ldr	r3, [pc, #52]	; (20ff8 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_+0x40>)
                                         int* left_shift) {
   20fc2:	4604      	mov	r4, r0
   20fc4:	460d      	mov	r5, r1
  TFLITE_CHECK_LT(double_multiplier, 1.);
   20fc6:	f7ef fce3 	bl	10990 <__aeabi_dcmplt>
   20fca:	b908      	cbnz	r0, 20fd0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_+0x18>
   20fcc:	f00f fef5 	bl	30dba <abort>
  TFLITE_CHECK_GT(double_multiplier, 0.);
   20fd0:	2200      	movs	r2, #0
   20fd2:	2300      	movs	r3, #0
   20fd4:	4620      	mov	r0, r4
   20fd6:	4629      	mov	r1, r5
   20fd8:	f7ef fcf8 	bl	109cc <__aeabi_dcmpgt>
   20fdc:	2800      	cmp	r0, #0
   20fde:	d0f5      	beq.n	20fcc <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_+0x14>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, &shift);
   20fe0:	ab01      	add	r3, sp, #4
   20fe2:	463a      	mov	r2, r7
   20fe4:	4620      	mov	r0, r4
   20fe6:	4629      	mov	r1, r5
   20fe8:	f7ff ff94 	bl	20f14 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
  TFLITE_CHECK_LE(shift, 0);
   20fec:	9b01      	ldr	r3, [sp, #4]
   20fee:	2b00      	cmp	r3, #0
   20ff0:	dcec      	bgt.n	20fcc <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_+0x14>
  *left_shift = shift;
   20ff2:	6033      	str	r3, [r6, #0]
}
   20ff4:	b003      	add	sp, #12
   20ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20ff8:	3ff00000 	.word	0x3ff00000

00020ffc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
   20ffc:	edd1 7a03 	vldr	s15, [r1, #12]
   21000:	ed92 7a03 	vldr	s14, [r2, #12]
   21004:	ee67 7a87 	vmul.f32	s15, s15, s14
  TF_LITE_ENSURE(context, input_product_scale >= 0);
   21008:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   2100c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                                              double* multiplier) {
   21010:	b573      	push	{r0, r1, r4, r5, r6, lr}
   21012:	461e      	mov	r6, r3
  TF_LITE_ENSURE(context, input_product_scale >= 0);
   21014:	da09      	bge.n	2102a <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x2e>
   21016:	4b0f      	ldr	r3, [pc, #60]	; (21054 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x58>)
   21018:	4a0f      	ldr	r2, [pc, #60]	; (21058 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x5c>)
   2101a:	9300      	str	r3, [sp, #0]
   2101c:	6944      	ldr	r4, [r0, #20]
   2101e:	23a7      	movs	r3, #167	; 0xa7
   21020:	490e      	ldr	r1, [pc, #56]	; (2105c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x60>)
   21022:	47a0      	blx	r4
   21024:	2001      	movs	r0, #1
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);

  return kTfLiteOk;
}
   21026:	b002      	add	sp, #8
   21028:	bd70      	pop	{r4, r5, r6, pc}
  const double input_product_scale =
   2102a:	ee17 0a90 	vmov	r0, s15
   2102e:	f7eb fa6b 	bl	c508 <__aeabi_f2d>
   21032:	4604      	mov	r4, r0
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
   21034:	68f0      	ldr	r0, [r6, #12]
  const double input_product_scale =
   21036:	460d      	mov	r5, r1
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
   21038:	f7eb fa66 	bl	c508 <__aeabi_f2d>
   2103c:	460b      	mov	r3, r1
   2103e:	4602      	mov	r2, r0
   21040:	4629      	mov	r1, r5
   21042:	4620      	mov	r0, r4
   21044:	f7ef fb5c 	bl	10700 <__aeabi_ddiv>
   21048:	9b06      	ldr	r3, [sp, #24]
   2104a:	e9c3 0100 	strd	r0, r1, [r3]
  return kTfLiteOk;
   2104e:	2000      	movs	r0, #0
   21050:	e7e9      	b.n	21026 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x2a>
   21052:	bf00      	nop
   21054:	000361e2 	.word	0x000361e2
   21058:	000361bb 	.word	0x000361bb
   2105c:	00034b9c 	.word	0x00034b9c

00021060 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
   21060:	b5f0      	push	{r4, r5, r6, r7, lr}
   21062:	461d      	mov	r5, r3
  int32_t qmin = 0;
  int32_t qmax = 0;
  if (output->type == kTfLiteUInt8) {
   21064:	7813      	ldrb	r3, [r2, #0]
                                               int32_t* act_max) {
   21066:	b085      	sub	sp, #20
  if (output->type == kTfLiteUInt8) {
   21068:	2b03      	cmp	r3, #3
                                               int32_t* act_max) {
   2106a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (output->type == kTfLiteUInt8) {
   2106c:	d00d      	beq.n	2108a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x2a>
    qmin = std::numeric_limits<uint8_t>::min();
    qmax = std::numeric_limits<uint8_t>::max();
  } else if (output->type == kTfLiteInt8) {
   2106e:	2b09      	cmp	r3, #9
   21070:	d01e      	beq.n	210b0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x50>
    qmin = std::numeric_limits<int8_t>::min();
    qmax = std::numeric_limits<int8_t>::max();
  } else if (output->type == kTfLiteInt16) {
   21072:	2b07      	cmp	r3, #7
   21074:	d020      	beq.n	210b8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x58>
    qmin = std::numeric_limits<int16_t>::min();
    qmax = std::numeric_limits<int16_t>::max();
  } else {
    TF_LITE_ENSURE(context, false);
   21076:	4b25      	ldr	r3, [pc, #148]	; (2110c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xac>)
   21078:	4a25      	ldr	r2, [pc, #148]	; (21110 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xb0>)
   2107a:	9300      	str	r3, [sp, #0]
   2107c:	6944      	ldr	r4, [r0, #20]
   2107e:	23da      	movs	r3, #218	; 0xda
   21080:	4924      	ldr	r1, [pc, #144]	; (21114 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xb4>)
   21082:	47a0      	blx	r4
   21084:	2001      	movs	r0, #1
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
                                        act_max);
  return kTfLiteOk;
}
   21086:	b005      	add	sp, #20
   21088:	bdf0      	pop	{r4, r5, r6, r7, pc}
    qmax = std::numeric_limits<uint8_t>::max();
   2108a:	24ff      	movs	r4, #255	; 0xff
    qmin = std::numeric_limits<uint8_t>::min();
   2108c:	2600      	movs	r6, #0
  const auto zero_point = output->params.zero_point;
   2108e:	6913      	ldr	r3, [r2, #16]
  };
   21090:	68d2      	ldr	r2, [r2, #12]
  if (activation == kTfLiteActRelu) {
   21092:	2901      	cmp	r1, #1
  };
   21094:	9202      	str	r2, [sp, #8]
   21096:	9303      	str	r3, [sp, #12]
  if (activation == kTfLiteActRelu) {
   21098:	d112      	bne.n	210c0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x60>
    *act_min = std::max(qmin, quantize(0.0));
   2109a:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 21118 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xb8>
   2109e:	a802      	add	r0, sp, #8
   210a0:	f00f f818 	bl	300d4 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>
   210a4:	4286      	cmp	r6, r0
   210a6:	bfac      	ite	ge
   210a8:	602e      	strge	r6, [r5, #0]
   210aa:	6028      	strlt	r0, [r5, #0]
    *act_max = qmax;
   210ac:	603c      	str	r4, [r7, #0]
   210ae:	e01b      	b.n	210e8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x88>
    qmax = std::numeric_limits<int8_t>::max();
   210b0:	247f      	movs	r4, #127	; 0x7f
    qmin = std::numeric_limits<int8_t>::min();
   210b2:	f06f 067f 	mvn.w	r6, #127	; 0x7f
   210b6:	e7ea      	b.n	2108e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x2e>
    qmax = std::numeric_limits<int16_t>::max();
   210b8:	f647 74ff 	movw	r4, #32767	; 0x7fff
    qmin = std::numeric_limits<int16_t>::min();
   210bc:	4e17      	ldr	r6, [pc, #92]	; (2111c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xbc>)
   210be:	e7e6      	b.n	2108e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x2e>
  } else if (activation == kTfLiteActRelu6) {
   210c0:	2903      	cmp	r1, #3
   210c2:	d113      	bne.n	210ec <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x8c>
    *act_min = std::max(qmin, quantize(0.0));
   210c4:	ed9f 0a14 	vldr	s0, [pc, #80]	; 21118 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xb8>
   210c8:	a802      	add	r0, sp, #8
   210ca:	f00f f803 	bl	300d4 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>
    *act_max = std::min(qmax, quantize(6.0));
   210ce:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
    *act_min = std::max(qmin, quantize(0.0));
   210d2:	4286      	cmp	r6, r0
   210d4:	bfac      	ite	ge
   210d6:	602e      	strge	r6, [r5, #0]
   210d8:	6028      	strlt	r0, [r5, #0]
    *act_max = std::min(qmax, quantize(1.0));
   210da:	a802      	add	r0, sp, #8
   210dc:	f00e fffa 	bl	300d4 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>
   210e0:	4284      	cmp	r4, r0
   210e2:	bfd4      	ite	le
   210e4:	603c      	strle	r4, [r7, #0]
   210e6:	6038      	strgt	r0, [r7, #0]
  return kTfLiteOk;
   210e8:	2000      	movs	r0, #0
   210ea:	e7cc      	b.n	21086 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x26>
  } else if (activation == kTfLiteActReluN1To1) {
   210ec:	2902      	cmp	r1, #2
   210ee:	d10b      	bne.n	21108 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xa8>
    *act_min = std::max(qmin, quantize(-1.0));
   210f0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   210f4:	a802      	add	r0, sp, #8
   210f6:	f00e ffed 	bl	300d4 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>
    *act_max = std::min(qmax, quantize(1.0));
   210fa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    *act_min = std::max(qmin, quantize(-1.0));
   210fe:	4286      	cmp	r6, r0
   21100:	bfac      	ite	ge
   21102:	602e      	strge	r6, [r5, #0]
   21104:	6028      	strlt	r0, [r5, #0]
    *act_max = std::min(qmax, quantize(1.0));
   21106:	e7e8      	b.n	210da <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x7a>
    *act_min = qmin;
   21108:	602e      	str	r6, [r5, #0]
   2110a:	e7cf      	b.n	210ac <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x4c>
   2110c:	0003621d 	.word	0x0003621d
   21110:	000361bb 	.word	0x000361bb
   21114:	00034b9c 	.word	0x00034b9c
   21118:	00000000 	.word	0x00000000
   2111c:	ffff8000 	.word	0xffff8000

00021120 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>:
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
   21120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21124:	ed2d 8b04 	vpush	{d8-d9}
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
   21128:	f891 8030 	ldrb.w	r8, [r1, #48]	; 0x30
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
   2112c:	4604      	mov	r4, r0
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
   2112e:	f1b8 0f01 	cmp.w	r8, #1
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
   21132:	460d      	mov	r5, r1
   21134:	4616      	mov	r6, r2
   21136:	ee09 3a10 	vmov	s18, r3
   2113a:	b08b      	sub	sp, #44	; 0x2c
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
   2113c:	d011      	beq.n	21162 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x42>
   2113e:	2701      	movs	r7, #1
   21140:	4b74      	ldr	r3, [pc, #464]	; (21314 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1f4>)
   21142:	e9cd 8702 	strd	r8, r7, [sp, #8]
   21146:	9301      	str	r3, [sp, #4]
   21148:	4b73      	ldr	r3, [pc, #460]	; (21318 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1f8>)
   2114a:	4a74      	ldr	r2, [pc, #464]	; (2131c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fc>)
   2114c:	9300      	str	r3, [sp, #0]
   2114e:	6944      	ldr	r4, [r0, #20]
   21150:	2335      	movs	r3, #53	; 0x35
   21152:	4973      	ldr	r1, [pc, #460]	; (21320 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x200>)
   21154:	47a0      	blx	r4
}
   21156:	4638      	mov	r0, r7
   21158:	b00b      	add	sp, #44	; 0x2c
   2115a:	ecbd 8b04 	vpop	{d8-d9}
   2115e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
   21162:	f892 7030 	ldrb.w	r7, [r2, #48]	; 0x30
   21166:	2f01      	cmp	r7, #1
   21168:	d00c      	beq.n	21184 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x64>
   2116a:	4b6a      	ldr	r3, [pc, #424]	; (21314 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1f4>)
   2116c:	e9cd 7802 	strd	r7, r8, [sp, #8]
   21170:	9301      	str	r3, [sp, #4]
   21172:	4b6c      	ldr	r3, [pc, #432]	; (21324 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x204>)
   21174:	4a69      	ldr	r2, [pc, #420]	; (2131c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fc>)
   21176:	9300      	str	r3, [sp, #0]
   21178:	6944      	ldr	r4, [r0, #20]
   2117a:	2337      	movs	r3, #55	; 0x37
   2117c:	4968      	ldr	r1, [pc, #416]	; (21320 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x200>)
   2117e:	47a0      	blx	r4
   21180:	4647      	mov	r7, r8
   21182:	e7e8      	b.n	21156 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x36>
  const auto* affine_quantization =
   21184:	6b52      	ldr	r2, [r2, #52]	; 0x34
  TF_LITE_ENSURE(context, affine_quantization);
   21186:	b93a      	cbnz	r2, 21198 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x78>
   21188:	4b67      	ldr	r3, [pc, #412]	; (21328 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x208>)
   2118a:	9300      	str	r3, [sp, #0]
   2118c:	2342      	movs	r3, #66	; 0x42
   2118e:	6944      	ldr	r4, [r0, #20]
    TF_LITE_ENSURE(context,
   21190:	4a62      	ldr	r2, [pc, #392]	; (2131c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fc>)
   21192:	4966      	ldr	r1, [pc, #408]	; (2132c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x20c>)
   21194:	47a0      	blx	r4
   21196:	e7de      	b.n	21156 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x36>
  TF_LITE_ENSURE(context, affine_quantization->scale);
   21198:	f8d2 b000 	ldr.w	fp, [r2]
   2119c:	f1bb 0f00 	cmp.w	fp, #0
   211a0:	d104      	bne.n	211ac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x8c>
   211a2:	4b63      	ldr	r3, [pc, #396]	; (21330 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x210>)
   211a4:	9300      	str	r3, [sp, #0]
   211a6:	6944      	ldr	r4, [r0, #20]
   211a8:	2343      	movs	r3, #67	; 0x43
   211aa:	e7f1      	b.n	21190 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x70>
  const bool is_per_channel = affine_quantization->scale->size > 1;
   211ac:	f8db a000 	ldr.w	sl, [fp]
  if (is_per_channel) {
   211b0:	f1ba 0f01 	cmp.w	sl, #1
   211b4:	dd37      	ble.n	21226 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x106>
    TF_LITE_ENSURE(context,
   211b6:	780b      	ldrb	r3, [r1, #0]
   211b8:	2b09      	cmp	r3, #9
   211ba:	d006      	beq.n	211ca <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xaa>
   211bc:	2b07      	cmp	r3, #7
   211be:	d004      	beq.n	211ca <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xaa>
   211c0:	4b5c      	ldr	r3, [pc, #368]	; (21334 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x214>)
   211c2:	9300      	str	r3, [sp, #0]
   211c4:	6944      	ldr	r4, [r0, #20]
   211c6:	2347      	movs	r3, #71	; 0x47
   211c8:	e7e2      	b.n	21190 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x70>
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
   211ca:	7833      	ldrb	r3, [r6, #0]
   211cc:	2b09      	cmp	r3, #9
   211ce:	d00d      	beq.n	211ec <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xcc>
   211d0:	2209      	movs	r2, #9
   211d2:	e9cd 3202 	strd	r3, r2, [sp, #8]
   211d6:	4b58      	ldr	r3, [pc, #352]	; (21338 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
   211d8:	9301      	str	r3, [sp, #4]
   211da:	4b58      	ldr	r3, [pc, #352]	; (2133c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x21c>)
   211dc:	9300      	str	r3, [sp, #0]
   211de:	2349      	movs	r3, #73	; 0x49
   211e0:	6965      	ldr	r5, [r4, #20]
    TF_LITE_ENSURE_EQ(
   211e2:	4620      	mov	r0, r4
   211e4:	4a4d      	ldr	r2, [pc, #308]	; (2131c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fc>)
   211e6:	494e      	ldr	r1, [pc, #312]	; (21320 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x200>)
   211e8:	47a8      	blx	r5
   211ea:	e7b4      	b.n	21156 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x36>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
   211ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
   211ee:	4553      	cmp	r3, sl
   211f0:	d008      	beq.n	21204 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xe4>
   211f2:	e9cd a302 	strd	sl, r3, [sp, #8]
   211f6:	4b52      	ldr	r3, [pc, #328]	; (21340 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x220>)
   211f8:	9301      	str	r3, [sp, #4]
   211fa:	4b52      	ldr	r3, [pc, #328]	; (21344 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x224>)
   211fc:	9300      	str	r3, [sp, #0]
   211fe:	6965      	ldr	r5, [r4, #20]
   21200:	234a      	movs	r3, #74	; 0x4a
   21202:	e7ee      	b.n	211e2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xc2>
    TF_LITE_ENSURE_EQ(
   21204:	6892      	ldr	r2, [r2, #8]
   21206:	68b3      	ldr	r3, [r6, #8]
   21208:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   2120c:	685b      	ldr	r3, [r3, #4]
   2120e:	9a20      	ldr	r2, [sp, #128]	; 0x80
   21210:	429a      	cmp	r2, r3
   21212:	d008      	beq.n	21226 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x106>
   21214:	9303      	str	r3, [sp, #12]
   21216:	4b4c      	ldr	r3, [pc, #304]	; (21348 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x228>)
   21218:	9202      	str	r2, [sp, #8]
   2121a:	9301      	str	r3, [sp, #4]
   2121c:	4b48      	ldr	r3, [pc, #288]	; (21340 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x220>)
   2121e:	9300      	str	r3, [sp, #0]
   21220:	6965      	ldr	r5, [r4, #20]
   21222:	234b      	movs	r3, #75	; 0x4b
   21224:	e7dd      	b.n	211e2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xc2>
  const float input_scale = input->params.scale;
   21226:	edd5 7a03 	vldr	s15, [r5, #12]
  const float output_scale = output->params.scale;
   2122a:	9b18      	ldr	r3, [sp, #96]	; 0x60
  const float input_scale = input->params.scale;
   2122c:	eeb0 8a67 	vmov.f32	s16, s15
  const float output_scale = output->params.scale;
   21230:	edd3 7a03 	vldr	s15, [r3, #12]
  for (int i = 0; i < num_channels; ++i) {
   21234:	2700      	movs	r7, #0
  const float output_scale = output->params.scale;
   21236:	eef0 8a67 	vmov.f32	s17, s15
  for (int i = 0; i < num_channels; ++i) {
   2123a:	f10b 0304 	add.w	r3, fp, #4
   2123e:	9305      	str	r3, [sp, #20]
   21240:	9b20      	ldr	r3, [sp, #128]	; 0x80
   21242:	42bb      	cmp	r3, r7
   21244:	dd31      	ble.n	212aa <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x18a>
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
   21246:	f1ba 0f01 	cmp.w	sl, #1
   2124a:	bfca      	itet	gt
   2124c:	9b05      	ldrgt	r3, [sp, #20]
   2124e:	f8db 0004 	ldrle.w	r0, [fp, #4]
   21252:	6818      	ldrgt	r0, [r3, #0]
    const double filter_scale = static_cast<double>(scale);
   21254:	f7eb f958 	bl	c508 <__aeabi_f2d>
   21258:	4680      	mov	r8, r0
    const double effective_output_scale = static_cast<double>(input_scale) *
   2125a:	ee18 0a10 	vmov	r0, s16
    const double filter_scale = static_cast<double>(scale);
   2125e:	4689      	mov	r9, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
   21260:	f7eb f952 	bl	c508 <__aeabi_f2d>
   21264:	4602      	mov	r2, r0
   21266:	460b      	mov	r3, r1
   21268:	4640      	mov	r0, r8
   2126a:	4649      	mov	r1, r9
   2126c:	f7ef f91e 	bl	104ac <__aeabi_dmul>
   21270:	4680      	mov	r8, r0
                                          static_cast<double>(output_scale);
   21272:	ee18 0a90 	vmov	r0, s17
    const double effective_output_scale = static_cast<double>(input_scale) *
   21276:	4689      	mov	r9, r1
                                          static_cast<double>(output_scale);
   21278:	f7eb f946 	bl	c508 <__aeabi_f2d>
   2127c:	4602      	mov	r2, r0
   2127e:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
   21280:	4640      	mov	r0, r8
   21282:	4649      	mov	r1, r9
   21284:	f7ef fa3c 	bl	10700 <__aeabi_ddiv>
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
   21288:	ab08      	add	r3, sp, #32
   2128a:	aa07      	add	r2, sp, #28
   2128c:	f7ff fe42 	bl	20f14 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    per_channel_multiplier[i] = significand;
   21290:	9b07      	ldr	r3, [sp, #28]
   21292:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   21294:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
    per_channel_shift[i] = channel_shift;
   21298:	9b08      	ldr	r3, [sp, #32]
   2129a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   2129c:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
  for (int i = 0; i < num_channels; ++i) {
   212a0:	9b05      	ldr	r3, [sp, #20]
   212a2:	3701      	adds	r7, #1
   212a4:	3304      	adds	r3, #4
   212a6:	9305      	str	r3, [sp, #20]
   212a8:	e7ca      	b.n	21240 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x120>
  if (input->type == kTfLiteUInt8) {
   212aa:	782b      	ldrb	r3, [r5, #0]
   212ac:	2b03      	cmp	r3, #3
   212ae:	d11c      	bne.n	212ea <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1ca>
    double real_multiplier = 0.0;
   212b0:	2200      	movs	r2, #0
   212b2:	2300      	movs	r3, #0
   212b4:	e9cd 2308 	strd	r2, r3, [sp, #32]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
   212b8:	ab08      	add	r3, sp, #32
   212ba:	9301      	str	r3, [sp, #4]
   212bc:	9b18      	ldr	r3, [sp, #96]	; 0x60
   212be:	4632      	mov	r2, r6
   212c0:	9300      	str	r3, [sp, #0]
   212c2:	4629      	mov	r1, r5
   212c4:	ee19 3a10 	vmov	r3, s18
   212c8:	4620      	mov	r0, r4
   212ca:	f7f0 fc61 	bl	11b90 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
   212ce:	4607      	mov	r7, r0
   212d0:	2800      	cmp	r0, #0
   212d2:	f47f af40 	bne.w	21156 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x36>
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
   212d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   212da:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   212dc:	ab07      	add	r3, sp, #28
   212de:	f7ff fe19 	bl	20f14 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    *shift = -exponent;
   212e2:	9b07      	ldr	r3, [sp, #28]
   212e4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   212e6:	425b      	negs	r3, r3
   212e8:	6013      	str	r3, [r2, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
   212ea:	782b      	ldrb	r3, [r5, #0]
   212ec:	2b09      	cmp	r3, #9
   212ee:	d003      	beq.n	212f8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1d8>
   212f0:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   212f4:	2b03      	cmp	r3, #3
   212f6:	d10a      	bne.n	2130e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1ee>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   212f8:	e9dd 2118 	ldrd	r2, r1, [sp, #96]	; 0x60
   212fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   212fe:	4620      	mov	r0, r4
   21300:	9300      	str	r3, [sp, #0]
   21302:	7809      	ldrb	r1, [r1, #0]
   21304:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   21306:	f7ff feab 	bl	21060 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
   2130a:	4607      	mov	r7, r0
   2130c:	e723      	b.n	21156 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x36>
  return kTfLiteOk;
   2130e:	2700      	movs	r7, #0
   21310:	e721      	b.n	21156 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x36>
   21312:	bf00      	nop
   21314:	00034d66 	.word	0x00034d66
   21318:	00036223 	.word	0x00036223
   2131c:	000361bb 	.word	0x000361bb
   21320:	00034a7c 	.word	0x00034a7c
   21324:	00034d80 	.word	0x00034d80
   21328:	00034d9a 	.word	0x00034d9a
   2132c:	00034b9c 	.word	0x00034b9c
   21330:	00034dae 	.word	0x00034dae
   21334:	00034fa6 	.word	0x00034fa6
   21338:	00035e99 	.word	0x00035e99
   2133c:	0003623c 	.word	0x0003623c
   21340:	00036249 	.word	0x00036249
   21344:	00034e88 	.word	0x00034e88
   21348:	00036256 	.word	0x00036256

0002134c <DebugLog>:

#include "tensorflow/lite/micro/debug_log.h"

#include <cstdio>

extern "C" void DebugLog(const char* s) { fprintf(stderr, "%s", s); }
   2134c:	4b03      	ldr	r3, [pc, #12]	; (2135c <DebugLog+0x10>)
   2134e:	4602      	mov	r2, r0
   21350:	681b      	ldr	r3, [r3, #0]
   21352:	4903      	ldr	r1, [pc, #12]	; (21360 <DebugLog+0x14>)
   21354:	68d8      	ldr	r0, [r3, #12]
   21356:	f003 bf4d 	b.w	251f4 <fiprintf>
   2135a:	bf00      	nop
   2135c:	20020058 	.word	0x20020058
   21360:	00033e14 	.word	0x00033e14

00021364 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:
                                              aligned_arena_size),
                error_reporter);
}

MicroAllocator* MicroAllocator::Create(SimpleMemoryAllocator* memory_allocator,
                                       ErrorReporter* error_reporter) {
   21364:	b538      	push	{r3, r4, r5, lr}
   21366:	460d      	mov	r5, r1
  TFLITE_DCHECK(memory_allocator != nullptr);
   21368:	4604      	mov	r4, r0
   2136a:	b908      	cbnz	r0, 21370 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0xc>
   2136c:	f00f fd25 	bl	30dba <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
   21370:	2900      	cmp	r1, #0
   21372:	d0fb      	beq.n	2136c <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x8>

  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
      sizeof(MicroAllocator), alignof(MicroAllocator));
   21374:	6803      	ldr	r3, [r0, #0]
  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
   21376:	2204      	movs	r2, #4
   21378:	2118      	movs	r1, #24
   2137a:	68db      	ldr	r3, [r3, #12]
   2137c:	4798      	blx	r3
  MicroAllocator* allocator =
      new (allocator_buffer) MicroAllocator(memory_allocator, error_reporter);
   2137e:	b138      	cbz	r0, 21390 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x2c>
      model_is_allocating_(false) {}
   21380:	4b04      	ldr	r3, [pc, #16]	; (21394 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x30>)
   21382:	6085      	str	r5, [r0, #8]
   21384:	e9c0 3400 	strd	r3, r4, [r0]
   21388:	2300      	movs	r3, #0
   2138a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   2138e:	7303      	strb	r3, [r0, #12]
  return allocator;
}
   21390:	bd38      	pop	{r3, r4, r5, pc}
   21392:	bf00      	nop
   21394:	000331ac 	.word	0x000331ac

00021398 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:
                                       ErrorReporter* error_reporter) {
   21398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2139a:	460f      	mov	r7, r1
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
   2139c:	2110      	movs	r1, #16
                                       ErrorReporter* error_reporter) {
   2139e:	4604      	mov	r4, r0
   213a0:	4616      	mov	r6, r2
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
   213a2:	f00e feb7 	bl	30114 <_ZN6tflite14AlignPointerUpEPhj>
  if (aligned_arena != tensor_arena) {
   213a6:	4284      	cmp	r4, r0
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
   213a8:	4605      	mov	r5, r0
  if (aligned_arena != tensor_arena) {
   213aa:	d004      	beq.n	213b6 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x1e>
    TF_LITE_REPORT_ERROR(
   213ac:	1b02      	subs	r2, r0, r4
   213ae:	4907      	ldr	r1, [pc, #28]	; (213cc <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x34>)
   213b0:	4630      	mov	r0, r6
   213b2:	f00e fd91 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
   213b6:	19e2      	adds	r2, r4, r7
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
   213b8:	4629      	mov	r1, r5
   213ba:	4630      	mov	r0, r6
   213bc:	1b52      	subs	r2, r2, r5
   213be:	f000 fe1d 	bl	21ffc <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>
   213c2:	4631      	mov	r1, r6
}
   213c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
   213c8:	f7ff bfcc 	b.w	21364 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
   213cc:	00036293 	.word	0x00036293

000213d0 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv>:
  model_is_allocating_ = false;
  return kTfLiteOk;
}

TfLiteStatus MicroAllocator::AllocatePersistentBuffer(size_t bytes,
                                                      void** ptr) {
   213d0:	b570      	push	{r4, r5, r6, lr}
   213d2:	4604      	mov	r4, r0
  uint8_t* data = memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
   213d4:	6840      	ldr	r0, [r0, #4]
                                                      void** ptr) {
   213d6:	4615      	mov	r5, r2
  uint8_t* data = memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
   213d8:	6803      	ldr	r3, [r0, #0]
   213da:	2210      	movs	r2, #16
   213dc:	68db      	ldr	r3, [r3, #12]
                                                      void** ptr) {
   213de:	460e      	mov	r6, r1
  uint8_t* data = memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
   213e0:	4798      	blx	r3
  if (data == nullptr) {
   213e2:	b930      	cbnz	r0, 213f2 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x22>
    TF_LITE_REPORT_ERROR(error_reporter_,
   213e4:	4632      	mov	r2, r6
   213e6:	4904      	ldr	r1, [pc, #16]	; (213f8 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x28>)
   213e8:	68a0      	ldr	r0, [r4, #8]
   213ea:	f00e fd75 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate persistent buffer of size %d",
                         bytes);
    return kTfLiteError;
   213ee:	2001      	movs	r0, #1
  }
  (*ptr) = data;
  return kTfLiteOk;
}
   213f0:	bd70      	pop	{r4, r5, r6, pc}
  (*ptr) = data;
   213f2:	6028      	str	r0, [r5, #0]
  return kTfLiteOk;
   213f4:	2000      	movs	r0, #0
   213f6:	e7fb      	b.n	213f0 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x20>
   213f8:	000362fe 	.word	0x000362fe

000213fc <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi>:

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(int node_id,
                                                         size_t bytes,
                                                         int* buffer_idx) {
   213fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // A sanity check to make sure scratch_buffer_handles_ is contiguous i.e.
  // scratch_buffer_handles_ is pointing to the last allocation from memory
  // allocator.
  if (scratch_buffer_handles_ != nullptr &&
   21400:	6905      	ldr	r5, [r0, #16]
                                                         int* buffer_idx) {
   21402:	4604      	mov	r4, r0
   21404:	460e      	mov	r6, r1
   21406:	4690      	mov	r8, r2
   21408:	461f      	mov	r7, r3
  if (scratch_buffer_handles_ != nullptr &&
   2140a:	b15d      	cbz	r5, 21424 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x28>
      reinterpret_cast<uint8_t*>(scratch_buffer_handles_) !=
          memory_allocator_->GetTail()) {
   2140c:	6840      	ldr	r0, [r0, #4]
   2140e:	f00e ff6a 	bl	302e6 <_ZNK6tflite21SimpleMemoryAllocator7GetTailEv>
  if (scratch_buffer_handles_ != nullptr &&
   21412:	4285      	cmp	r5, r0
   21414:	d006      	beq.n	21424 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x28>
    TF_LITE_REPORT_ERROR(error_reporter_,
   21416:	4910      	ldr	r1, [pc, #64]	; (21458 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x5c>)
   21418:	68a0      	ldr	r0, [r4, #8]
   2141a:	f00e fd5d 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
              alignof(internal::ScratchBufferHandle)));
  if (handle == nullptr) {
    TF_LITE_REPORT_ERROR(error_reporter_,
                         "Failed to register scratch buffer handle for node %s",
                         node_id);
    return kTfLiteError;
   2141e:	2001      	movs	r0, #1
  scratch_buffer_count_ += 1;
  // scratch_buffer_handles_ is in reverse order. The following code ensures
  // that scratch_buffers[0] is pointing to the newly allocated handle.
  scratch_buffer_handles_ = handle;
  return kTfLiteOk;
}
   21420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          memory_allocator_->AllocateFromTail(
   21424:	6860      	ldr	r0, [r4, #4]
   21426:	2204      	movs	r2, #4
              alignof(internal::ScratchBufferHandle)));
   21428:	6803      	ldr	r3, [r0, #0]
          memory_allocator_->AllocateFromTail(
   2142a:	210c      	movs	r1, #12
   2142c:	68db      	ldr	r3, [r3, #12]
   2142e:	4798      	blx	r3
  if (handle == nullptr) {
   21430:	b928      	cbnz	r0, 2143e <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x42>
    TF_LITE_REPORT_ERROR(error_reporter_,
   21432:	4632      	mov	r2, r6
   21434:	4909      	ldr	r1, [pc, #36]	; (2145c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x60>)
   21436:	68a0      	ldr	r0, [r4, #8]
   21438:	f00e fd4e 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   2143c:	e7ef      	b.n	2141e <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x22>
  *handle = {};
   2143e:	2500      	movs	r5, #0
  *buffer_idx = scratch_buffer_count_;
   21440:	6963      	ldr	r3, [r4, #20]
  handle->bytes = bytes;
   21442:	e9c0 5800 	strd	r5, r8, [r0]
  handle->node_idx = node_id;
   21446:	6086      	str	r6, [r0, #8]
  *buffer_idx = scratch_buffer_count_;
   21448:	603b      	str	r3, [r7, #0]
  scratch_buffer_count_ += 1;
   2144a:	6963      	ldr	r3, [r4, #20]
   2144c:	3301      	adds	r3, #1
  scratch_buffer_handles_ = handle;
   2144e:	e9c4 0304 	strd	r0, r3, [r4, #16]
  return kTfLiteOk;
   21452:	4628      	mov	r0, r5
   21454:	e7e4      	b.n	21420 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x24>
   21456:	bf00      	nop
   21458:	0003632e 	.word	0x0003632e
   2145c:	00036390 	.word	0x00036390

00021460 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi>:

void* MicroAllocator::GetScratchBuffer(int buffer_idx) const {
   21460:	b508      	push	{r3, lr}
  if (static_cast<size_t>(buffer_idx) >= scratch_buffer_count_) {
   21462:	6943      	ldr	r3, [r0, #20]
void* MicroAllocator::GetScratchBuffer(int buffer_idx) const {
   21464:	460a      	mov	r2, r1
  if (static_cast<size_t>(buffer_idx) >= scratch_buffer_count_) {
   21466:	428b      	cmp	r3, r1
   21468:	d805      	bhi.n	21476 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x16>
    TF_LITE_REPORT_ERROR(error_reporter_,
   2146a:	4907      	ldr	r1, [pc, #28]	; (21488 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x28>)
   2146c:	6880      	ldr	r0, [r0, #8]
   2146e:	f00e fd33 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Buffer %d not found. %d buffers available.",
                         buffer_idx, scratch_buffer_count_);
    return nullptr;
   21472:	2000      	movs	r0, #0
  }
  // scratch_buffer_handles_ is in reverse order.
  return scratch_buffer_handles_[scratch_buffer_count_ - buffer_idx - 1].data;
}
   21474:	bd08      	pop	{r3, pc}
  return scratch_buffer_handles_[scratch_buffer_count_ - buffer_idx - 1].data;
   21476:	220c      	movs	r2, #12
   21478:	1a59      	subs	r1, r3, r1
   2147a:	6903      	ldr	r3, [r0, #16]
   2147c:	fb02 3101 	mla	r1, r2, r1, r3
   21480:	f851 0c0c 	ldr.w	r0, [r1, #-12]
   21484:	e7f6      	b.n	21474 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x14>
   21486:	bf00      	nop
   21488:	000363c5 	.word	0x000363c5

0002148c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>:

ErrorReporter* MicroAllocator::error_reporter() const {
  return error_reporter_;
}

const SubGraph* MicroAllocator::GetSubGraphFromModel(const Model* model) {
   2148c:	b538      	push	{r3, r4, r5, lr}
   2148e:	460c      	mov	r4, r1
   21490:	4605      	mov	r5, r0
    auto field_offset = GetOptionalFieldOffset(field);
   21492:	2108      	movs	r1, #8
   21494:	4620      	mov	r0, r4
   21496:	f005 ffec 	bl	27472 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   2149a:	b178      	cbz	r0, 214bc <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x30>
   2149c:	5822      	ldr	r2, [r4, r0]
    auto p = data_ + field_offset;
   2149e:	1821      	adds	r1, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   214a0:	188b      	adds	r3, r1, r2
  auto* subgraphs = model->subgraphs();
  if (subgraphs->size() != 1) {
   214a2:	588a      	ldr	r2, [r1, r2]
   214a4:	2a01      	cmp	r2, #1
   214a6:	d005      	beq.n	214b4 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x28>
    TF_LITE_REPORT_ERROR(error_reporter_,
   214a8:	4905      	ldr	r1, [pc, #20]	; (214c0 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x34>)
   214aa:	68a8      	ldr	r0, [r5, #8]
   214ac:	f00e fd14 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   214b0:	2000      	movs	r0, #0
                         "Only 1 subgraph is currently supported.\n");
    return nullptr;
  }
  return (*subgraphs)[0];
}
   214b2:	bd38      	pop	{r3, r4, r5, pc}
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   214b4:	1d18      	adds	r0, r3, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
   214b6:	685b      	ldr	r3, [r3, #4]
   214b8:	4418      	add	r0, r3
  return (*subgraphs)[0];
   214ba:	e7fa      	b.n	214b2 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x26>
  if (subgraphs->size() != 1) {
   214bc:	6803      	ldr	r3, [r0, #0]
   214be:	deff      	udf	#255	; 0xff
   214c0:	00034193 	.word	0x00034193

000214c4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE>:
    NodeAndRegistration** node_and_registrations) {
   214c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   214c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
   214cc:	4604      	mov	r4, r0
   214ce:	4691      	mov	r9, r2
   214d0:	461f      	mov	r7, r3
  TFLITE_DCHECK(model != nullptr);
   214d2:	460e      	mov	r6, r1
   214d4:	b909      	cbnz	r1, 214da <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x16>
   214d6:	f00f fc70 	bl	30dba <abort>
  TFLITE_DCHECK(context != nullptr);
   214da:	2a00      	cmp	r2, #0
   214dc:	d0fb      	beq.n	214d6 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x12>
  if (model_is_allocating_) {
   214de:	7b03      	ldrb	r3, [r0, #12]
   214e0:	b133      	cbz	r3, 214f0 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
   214e2:	491b      	ldr	r1, [pc, #108]	; (21550 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x8c>)
   214e4:	6880      	ldr	r0, [r0, #8]
   214e6:	f00e fcf7 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
   214ea:	2001      	movs	r0, #1
}
   214ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  const SubGraph* subgraph = GetSubGraphFromModel(model);
   214f0:	f7ff ffcc 	bl	2148c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
  TFLITE_DCHECK(subgraph != nullptr);
   214f4:	4605      	mov	r5, r0
   214f6:	2800      	cmp	r0, #0
   214f8:	d0ed      	beq.n	214d6 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x12>
  model_is_allocating_ = true;
   214fa:	2301      	movs	r3, #1
   214fc:	7323      	strb	r3, [r4, #12]
  TF_LITE_ENSURE_STATUS(AllocateTfLiteTensorArray(context, subgraph));
   214fe:	6823      	ldr	r3, [r4, #0]
   21500:	4602      	mov	r2, r0
   21502:	4649      	mov	r1, r9
   21504:	4620      	mov	r0, r4
   21506:	689b      	ldr	r3, [r3, #8]
   21508:	4798      	blx	r3
   2150a:	2800      	cmp	r0, #0
   2150c:	d1ee      	bne.n	214ec <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x28>
  TF_LITE_ENSURE_STATUS(
   2150e:	6823      	ldr	r3, [r4, #0]
   21510:	464a      	mov	r2, r9
   21512:	f8d3 a00c 	ldr.w	sl, [r3, #12]
   21516:	4631      	mov	r1, r6
   21518:	462b      	mov	r3, r5
   2151a:	4620      	mov	r0, r4
   2151c:	47d0      	blx	sl
   2151e:	2800      	cmp	r0, #0
   21520:	d1e4      	bne.n	214ec <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x28>
  TF_LITE_ENSURE_STATUS(
   21522:	6823      	ldr	r3, [r4, #0]
   21524:	4642      	mov	r2, r8
   21526:	4629      	mov	r1, r5
   21528:	4620      	mov	r0, r4
   2152a:	691b      	ldr	r3, [r3, #16]
   2152c:	4798      	blx	r3
   2152e:	2800      	cmp	r0, #0
   21530:	d1dc      	bne.n	214ec <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x28>
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer(
   21532:	f8d8 2000 	ldr.w	r2, [r8]
   21536:	6823      	ldr	r3, [r4, #0]
   21538:	9208      	str	r2, [sp, #32]
   2153a:	f8d3 e014 	ldr.w	lr, [r3, #20]
   2153e:	462a      	mov	r2, r5
   21540:	463b      	mov	r3, r7
   21542:	4631      	mov	r1, r6
   21544:	4620      	mov	r0, r4
   21546:	46f4      	mov	ip, lr
}
   21548:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer(
   2154c:	4760      	bx	ip
   2154e:	bf00      	nop
   21550:	000363f0 	.word	0x000363f0

00021554 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext>:
  if (!model_is_allocating_) {
   21554:	7b03      	ldrb	r3, [r0, #12]
                                                   TfLiteContext* context) {
   21556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2155a:	4604      	mov	r4, r0
   2155c:	460f      	mov	r7, r1
   2155e:	4616      	mov	r6, r2
  if (!model_is_allocating_) {
   21560:	b933      	cbnz	r3, 21570 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x1c>
    TF_LITE_REPORT_ERROR(error_reporter_,
   21562:	4910      	ldr	r1, [pc, #64]	; (215a4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x50>)
   21564:	6880      	ldr	r0, [r0, #8]
   21566:	f00e fcb7 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
   2156a:	2001      	movs	r0, #1
}
   2156c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  const SubGraph* subgraph = GetSubGraphFromModel(model);
   21570:	f7ff ff8c 	bl	2148c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
  TFLITE_DCHECK(subgraph != nullptr);
   21574:	4605      	mov	r5, r0
   21576:	b908      	cbnz	r0, 2157c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x28>
   21578:	f00f fc1f 	bl	30dba <abort>
  TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(model, context, subgraph));
   2157c:	6823      	ldr	r3, [r4, #0]
   2157e:	4632      	mov	r2, r6
   21580:	f8d3 801c 	ldr.w	r8, [r3, #28]
   21584:	4639      	mov	r1, r7
   21586:	4603      	mov	r3, r0
   21588:	4620      	mov	r0, r4
   2158a:	47c0      	blx	r8
   2158c:	2800      	cmp	r0, #0
   2158e:	d1ed      	bne.n	2156c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x18>
  TF_LITE_ENSURE_STATUS(AllocateVariables(context, subgraph));
   21590:	6823      	ldr	r3, [r4, #0]
   21592:	462a      	mov	r2, r5
   21594:	4631      	mov	r1, r6
   21596:	4620      	mov	r0, r4
   21598:	699b      	ldr	r3, [r3, #24]
   2159a:	4798      	blx	r3
   2159c:	2800      	cmp	r0, #0
   2159e:	d1e5      	bne.n	2156c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x18>
  model_is_allocating_ = false;
   215a0:	7320      	strb	r0, [r4, #12]
  return kTfLiteOk;
   215a2:	e7e3      	b.n	2156c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x18>
   215a4:	00036445 	.word	0x00036445

000215a8 <_ZNK11flatbuffers6VectorIxE3GetEj>:
  return_type Get(uoffset_t i) const {
   215a8:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
   215aa:	6803      	ldr	r3, [r0, #0]
   215ac:	4299      	cmp	r1, r3
   215ae:	d306      	bcc.n	215be <_ZNK11flatbuffers6VectorIxE3GetEj+0x16>
   215b0:	f240 1101 	movw	r1, #257	; 0x101
   215b4:	4b04      	ldr	r3, [pc, #16]	; (215c8 <_ZNK11flatbuffers6VectorIxE3GetEj+0x20>)
   215b6:	4a05      	ldr	r2, [pc, #20]	; (215cc <_ZNK11flatbuffers6VectorIxE3GetEj+0x24>)
   215b8:	4805      	ldr	r0, [pc, #20]	; (215d0 <_ZNK11flatbuffers6VectorIxE3GetEj+0x28>)
   215ba:	f004 ff25 	bl	26408 <__assert_func>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
   215be:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  }
   215c2:	e9d1 0101 	ldrd	r0, r1, [r1, #4]
   215c6:	bd08      	pop	{r3, pc}
   215c8:	000341bc 	.word	0x000341bc
   215cc:	00036490 	.word	0x00036490
   215d0:	00034286 	.word	0x00034286

000215d4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj>:
  return_type Get(uoffset_t i) const {
   215d4:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
   215d6:	6803      	ldr	r3, [r0, #0]
   215d8:	4299      	cmp	r1, r3
   215da:	d306      	bcc.n	215ea <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj+0x16>
   215dc:	f240 1101 	movw	r1, #257	; 0x101
   215e0:	4b05      	ldr	r3, [pc, #20]	; (215f8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj+0x24>)
   215e2:	4a06      	ldr	r2, [pc, #24]	; (215fc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj+0x28>)
   215e4:	4806      	ldr	r0, [pc, #24]	; (21600 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj+0x2c>)
   215e6:	f004 ff0f 	bl	26408 <__assert_func>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   215ea:	3004      	adds	r0, #4
    p += i * sizeof(uoffset_t);
   215ec:	eb00 0281 	add.w	r2, r0, r1, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
   215f0:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
  }
   215f4:	4410      	add	r0, r2
   215f6:	bd08      	pop	{r3, pc}
   215f8:	000341bc 	.word	0x000341bc
   215fc:	00036563 	.word	0x00036563
   21600:	00034286 	.word	0x00034286

00021604 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEj>:
  return_type Get(uoffset_t i) const {
   21604:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
   21606:	6803      	ldr	r3, [r0, #0]
   21608:	4299      	cmp	r1, r3
   2160a:	d306      	bcc.n	2161a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEj+0x16>
   2160c:	f240 1101 	movw	r1, #257	; 0x101
   21610:	4b05      	ldr	r3, [pc, #20]	; (21628 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEj+0x24>)
   21612:	4a06      	ldr	r2, [pc, #24]	; (2162c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEj+0x28>)
   21614:	4806      	ldr	r0, [pc, #24]	; (21630 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEj+0x2c>)
   21616:	f004 fef7 	bl	26408 <__assert_func>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   2161a:	3004      	adds	r0, #4
    p += i * sizeof(uoffset_t);
   2161c:	eb00 0281 	add.w	r2, r0, r1, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
   21620:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
  }
   21624:	4410      	add	r0, r2
   21626:	bd08      	pop	{r3, pc}
   21628:	000341bc 	.word	0x000341bc
   2162c:	00036654 	.word	0x00036654
   21630:	00034286 	.word	0x00034286

00021634 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj>:
  return_type Get(uoffset_t i) const {
   21634:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
   21636:	6803      	ldr	r3, [r0, #0]
   21638:	4299      	cmp	r1, r3
   2163a:	d306      	bcc.n	2164a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj+0x16>
   2163c:	f240 1101 	movw	r1, #257	; 0x101
   21640:	4b05      	ldr	r3, [pc, #20]	; (21658 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj+0x24>)
   21642:	4a06      	ldr	r2, [pc, #24]	; (2165c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj+0x28>)
   21644:	4806      	ldr	r0, [pc, #24]	; (21660 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj+0x2c>)
   21646:	f004 fedf 	bl	26408 <__assert_func>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   2164a:	3004      	adds	r0, #4
    p += i * sizeof(uoffset_t);
   2164c:	eb00 0281 	add.w	r2, r0, r1, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
   21650:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
  }
   21654:	4410      	add	r0, r2
   21656:	bd08      	pop	{r3, pc}
   21658:	000341bc 	.word	0x000341bc
   2165c:	00036749 	.word	0x00036749
   21660:	00034286 	.word	0x00034286

00021664 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:
    ErrorReporter* error_reporter, TfLiteTensor* result) {
   21664:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21668:	460d      	mov	r5, r1
   2166a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  *result = {};
   2166c:	2100      	movs	r1, #0
    ErrorReporter* error_reporter, TfLiteTensor* result) {
   2166e:	4607      	mov	r7, r0
   21670:	4691      	mov	r9, r2
  *result = {};
   21672:	4620      	mov	r0, r4
   21674:	2240      	movs	r2, #64	; 0x40
    ErrorReporter* error_reporter, TfLiteTensor* result) {
   21676:	4698      	mov	r8, r3
  *result = {};
   21678:	f00f fbe9 	bl	30e4e <memset>
    auto field_offset = GetOptionalFieldOffset(field);
   2167c:	2106      	movs	r1, #6
   2167e:	4628      	mov	r0, r5
   21680:	f005 fef7 	bl	27472 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   21684:	b100      	cbz	r0, 21688 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x24>
   21686:	5628      	ldrsb	r0, [r5, r0]
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
   21688:	4642      	mov	r2, r8
   2168a:	4621      	mov	r1, r4
   2168c:	b2c0      	uxtb	r0, r0
   2168e:	f7fe fe9f 	bl	203d0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
   21692:	4606      	mov	r6, r0
   21694:	2800      	cmp	r0, #0
   21696:	d161      	bne.n	2175c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
  result->is_variable = flatbuffer_tensor.is_variable();
   21698:	4628      	mov	r0, r5
   2169a:	f00e fdc4 	bl	30226 <_ZNK6tflite6Tensor11is_variableEv>
    auto field_offset = GetOptionalFieldOffset(field);
   2169e:	2108      	movs	r1, #8
   216a0:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
   216a4:	4628      	mov	r0, r5
   216a6:	f005 fee4 	bl	27472 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   216aa:	2800      	cmp	r0, #0
   216ac:	d05a      	beq.n	21764 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x100>
   216ae:	5829      	ldr	r1, [r5, r0]
  return_type operator[](uoffset_t i) const { return Get(i); }
   216b0:	4648      	mov	r0, r9
   216b2:	f7ff ffbf 	bl	21634 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj>
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
   216b6:	b148      	cbz	r0, 216cc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x68>
    return const_cast<Table *>(this)->GetPointer<P>(field);
   216b8:	2104      	movs	r1, #4
   216ba:	f00e fdbf 	bl	3023c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
    if (auto* array = buffer->data()) {
   216be:	b128      	cbz	r0, 216cc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x68>
      if (array->size()) {
   216c0:	6803      	ldr	r3, [r0, #0]
   216c2:	b11b      	cbz	r3, 216cc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x68>
        result->allocation_type = kTfLiteMmapRo;
   216c4:	2301      	movs	r3, #1
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   216c6:	3004      	adds	r0, #4
        result->data.data =
   216c8:	6060      	str	r0, [r4, #4]
        result->allocation_type = kTfLiteMmapRo;
   216ca:	7523      	strb	r3, [r4, #20]
  if (result->data.data == nullptr) {
   216cc:	6863      	ldr	r3, [r4, #4]
   216ce:	b90b      	cbnz	r3, 216d4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x70>
    result->allocation_type = kTfLiteArenaRw;
   216d0:	2302      	movs	r3, #2
   216d2:	7523      	strb	r3, [r4, #20]
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
   216d4:	4643      	mov	r3, r8
   216d6:	4628      	mov	r0, r5
   216d8:	aa01      	add	r2, sp, #4
   216da:	f104 0118 	add.w	r1, r4, #24
   216de:	f00e fd41 	bl	30164 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
   216e2:	4606      	mov	r6, r0
   216e4:	2800      	cmp	r0, #0
   216e6:	d139      	bne.n	2175c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
    return const_cast<Table *>(this)->GetPointer<P>(field);
   216e8:	2104      	movs	r1, #4
   216ea:	4628      	mov	r0, r5
   216ec:	f005 fef7 	bl	274de <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  if (flatbuffer_tensor.shape() == nullptr) {
   216f0:	2800      	cmp	r0, #0
   216f2:	d139      	bne.n	21768 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x104>
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
   216f4:	4b3c      	ldr	r3, [pc, #240]	; (217e8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x184>)
   216f6:	60a3      	str	r3, [r4, #8]
    auto field_offset = GetOptionalFieldOffset(field);
   216f8:	210c      	movs	r1, #12
   216fa:	4628      	mov	r0, r5
   216fc:	f005 feb9 	bl	27472 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   21700:	b360      	cbz	r0, 2175c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
    auto p = data_ + field_offset;
   21702:	182a      	adds	r2, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   21704:	582d      	ldr	r5, [r5, r0]
      src_quantization->zero_point() &&
   21706:	1955      	adds	r5, r2, r5
   21708:	d028      	beq.n	2175c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
  if (src_quantization && src_quantization->scale() &&
   2170a:	4628      	mov	r0, r5
   2170c:	f00e fd77 	bl	301fe <_ZNK6tflite22QuantizationParameters5scaleEv>
   21710:	4681      	mov	r9, r0
   21712:	b318      	cbz	r0, 2175c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
   21714:	6803      	ldr	r3, [r0, #0]
   21716:	b30b      	cbz	r3, 2175c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
      src_quantization->zero_point() &&
   21718:	4628      	mov	r0, r5
   2171a:	f00e fd7a 	bl	30212 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
      (src_quantization->scale()->size() > 0) &&
   2171e:	b1e8      	cbz	r0, 2175c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
      src_quantization->zero_point() &&
   21720:	6803      	ldr	r3, [r0, #0]
   21722:	b1db      	cbz	r3, 2175c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
   21724:	f8d9 3004 	ldr.w	r3, [r9, #4]
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
   21728:	4628      	mov	r0, r5
    result->params.scale = src_quantization->scale()->Get(0);
   2172a:	60e3      	str	r3, [r4, #12]
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
   2172c:	f00e fd71 	bl	30212 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
   21730:	2100      	movs	r1, #0
   21732:	f7ff ff39 	bl	215a8 <_ZNK11flatbuffers6VectorIxE3GetEj>
    result->params.zero_point =
   21736:	6120      	str	r0, [r4, #16]
    int channels = src_quantization->scale()->size();
   21738:	4628      	mov	r0, r5
   2173a:	f00e fd60 	bl	301fe <_ZNK6tflite22QuantizationParameters5scaleEv>
                                        alignof(TfLiteAffineQuantization)));
   2173e:	683b      	ldr	r3, [r7, #0]
    int channels = src_quantization->scale()->size();
   21740:	f8d0 a000 	ldr.w	sl, [r0]
            allocator->AllocateFromTail(sizeof(TfLiteAffineQuantization),
   21744:	2204      	movs	r2, #4
   21746:	210c      	movs	r1, #12
   21748:	4638      	mov	r0, r7
   2174a:	68db      	ldr	r3, [r3, #12]
   2174c:	4798      	blx	r3
    if (quantization == nullptr) {
   2174e:	4681      	mov	r9, r0
   21750:	b988      	cbnz	r0, 21776 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x112>
      TF_LITE_REPORT_ERROR(error_reporter,
   21752:	4926      	ldr	r1, [pc, #152]	; (217ec <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x188>)
      TF_LITE_REPORT_ERROR(error_reporter,
   21754:	4640      	mov	r0, r8
   21756:	f00e fbbf 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
   2175a:	2601      	movs	r6, #1
}
   2175c:	4630      	mov	r0, r6
   2175e:	b003      	add	sp, #12
   21760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   21764:	4601      	mov	r1, r0
   21766:	e7a3      	b.n	216b0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4c>
  TFLITE_DCHECK(error_reporter != nullptr);
   21768:	f1b8 0f00 	cmp.w	r8, #0
   2176c:	d101      	bne.n	21772 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x10e>
   2176e:	f00f fb24 	bl	30dba <abort>
    *result = const_cast<kTfLiteArrayType*>(
   21772:	60a0      	str	r0, [r4, #8]
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
   21774:	e7c0      	b.n	216f8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x94>
            TfLiteIntArrayGetSizeInBytes(channels), alignof(TfLiteIntArray)));
   21776:	683b      	ldr	r3, [r7, #0]
   21778:	4650      	mov	r0, sl
   2177a:	f8d3 b00c 	ldr.w	fp, [r3, #12]
   2177e:	f7eb f897 	bl	c8b0 <TfLiteIntArrayGetSizeInBytes>
        reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
   21782:	2204      	movs	r2, #4
            TfLiteIntArrayGetSizeInBytes(channels), alignof(TfLiteIntArray)));
   21784:	4601      	mov	r1, r0
        reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
   21786:	4638      	mov	r0, r7
   21788:	47d8      	blx	fp
   2178a:	4607      	mov	r7, r0
    quantization->zero_point =
   2178c:	f8c9 0004 	str.w	r0, [r9, #4]
    if (quantization->zero_point == nullptr) {
   21790:	b908      	cbnz	r0, 21796 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x132>
      TF_LITE_REPORT_ERROR(error_reporter,
   21792:	4917      	ldr	r1, [pc, #92]	; (217f0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x18c>)
   21794:	e7de      	b.n	21754 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf0>
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
   21796:	4628      	mov	r0, r5
   21798:	f00e fd31 	bl	301fe <_ZNK6tflite22QuantizationParameters5scaleEv>
  TFLITE_DCHECK(error_reporter != nullptr);
   2179c:	f1b8 0f00 	cmp.w	r8, #0
   217a0:	d0e5      	beq.n	2176e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x10a>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
   217a2:	2800      	cmp	r0, #0
   217a4:	d0e3      	beq.n	2176e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x10a>
    for (int i = 0; i < channels; i++) {
   217a6:	f04f 0800 	mov.w	r8, #0
    *result = const_cast<kTfLiteArrayType*>(
   217aa:	f8c9 0000 	str.w	r0, [r9]
    quantization->zero_point->size = channels;
   217ae:	f8c7 a000 	str.w	sl, [r7]
    for (int i = 0; i < channels; i++) {
   217b2:	45c2      	cmp	sl, r8
   217b4:	dd0a      	ble.n	217cc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x168>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
   217b6:	4628      	mov	r0, r5
   217b8:	f00e fd2b 	bl	30212 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
   217bc:	4641      	mov	r1, r8
   217be:	f7ff fef3 	bl	215a8 <_ZNK11flatbuffers6VectorIxE3GetEj>
    for (int i = 0; i < channels; i++) {
   217c2:	f108 0801 	add.w	r8, r8, #1
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
   217c6:	f847 0f04 	str.w	r0, [r7, #4]!
    for (int i = 0; i < channels; i++) {
   217ca:	e7f2      	b.n	217b2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x14e>
    auto field_offset = GetOptionalFieldOffset(field);
   217cc:	2110      	movs	r1, #16
   217ce:	4628      	mov	r0, r5
   217d0:	f005 fe4f 	bl	27472 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   217d4:	b100      	cbz	r0, 217d8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x174>
   217d6:	5828      	ldr	r0, [r5, r0]
    result->quantization = {kTfLiteAffineQuantization, quantization};
   217d8:	2301      	movs	r3, #1
    quantization->quantized_dimension = src_quantization->quantized_dimension();
   217da:	f8c9 0008 	str.w	r0, [r9, #8]
    result->quantization = {kTfLiteAffineQuantization, quantization};
   217de:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   217e2:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
   217e6:	e7b9      	b.n	2175c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
   217e8:	00033188 	.word	0x00033188
   217ec:	0003683a 	.word	0x0003683a
   217f0:	00036868 	.word	0x00036868

000217f4 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE>:
    const Model* model, TfLiteContext* context, const SubGraph* subgraph) {
   217f4:	e92d 4fe3 	stmdb	sp!, {r0, r1, r5, r6, r7, r8, r9, sl, fp, lr}
   217f8:	4606      	mov	r6, r0
   217fa:	460f      	mov	r7, r1
   217fc:	4690      	mov	r8, r2
   217fe:	4699      	mov	r9, r3
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
   21800:	2500      	movs	r5, #0
    return const_cast<Table *>(this)->GetPointer<P>(field);
   21802:	2104      	movs	r1, #4
   21804:	4648      	mov	r0, r9
   21806:	f00e fd22 	bl	3024e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
   2180a:	6803      	ldr	r3, [r0, #0]
   2180c:	429d      	cmp	r5, r3
   2180e:	d224      	bcs.n	2185a <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x66>
        memory_allocator_, *subgraph->tensors()->Get(i), model->buffers(),
   21810:	4629      	mov	r1, r5
   21812:	f7ff fedf 	bl	215d4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj>
    auto field_offset = GetOptionalFieldOffset(field);
   21816:	210c      	movs	r1, #12
   21818:	4682      	mov	sl, r0
   2181a:	4638      	mov	r0, r7
   2181c:	f005 fe29 	bl	27472 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    TfLiteStatus status = internal::InitializeTfLiteTensorFromFlatbuffer(
   21820:	f8d6 b004 	ldr.w	fp, [r6, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   21824:	4602      	mov	r2, r0
   21826:	b110      	cbz	r0, 2182e <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3a>
   21828:	58ba      	ldr	r2, [r7, r2]
    auto p = data_ + field_offset;
   2182a:	1838      	adds	r0, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   2182c:	4402      	add	r2, r0
   2182e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   21832:	4651      	mov	r1, sl
   21834:	eb03 1385 	add.w	r3, r3, r5, lsl #6
   21838:	9300      	str	r3, [sp, #0]
   2183a:	4658      	mov	r0, fp
   2183c:	68b3      	ldr	r3, [r6, #8]
   2183e:	f7ff ff11 	bl	21664 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
    if (status != kTfLiteOk) {
   21842:	b140      	cbz	r0, 21856 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x62>
      TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
   21844:	462a      	mov	r2, r5
   21846:	4906      	ldr	r1, [pc, #24]	; (21860 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x6c>)
   21848:	68b0      	ldr	r0, [r6, #8]
   2184a:	f00e fb45 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
   2184e:	2001      	movs	r0, #1
}
   21850:	b002      	add	sp, #8
   21852:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
   21856:	3501      	adds	r5, #1
   21858:	e7d3      	b.n	21802 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xe>
  return kTfLiteOk;
   2185a:	2000      	movs	r0, #0
   2185c:	e7f8      	b.n	21850 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x5c>
   2185e:	bf00      	nop
   21860:	00036896 	.word	0x00036896

00021864 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE>:
                                               const SubGraph* subgraph) {
   21864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21868:	4606      	mov	r6, r0
   2186a:	460c      	mov	r4, r1
   2186c:	4691      	mov	r9, r2
  for (size_t i = 0; i < context->tensors_size; ++i) {
   2186e:	2500      	movs	r5, #0
   21870:	6823      	ldr	r3, [r4, #0]
   21872:	42ab      	cmp	r3, r5
   21874:	d926      	bls.n	218c4 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x60>
    return const_cast<Table *>(this)->GetPointer<P>(field);
   21876:	2104      	movs	r1, #4
   21878:	4648      	mov	r0, r9
   2187a:	f00e fce8 	bl	3024e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
    if (subgraph->tensors()->Get(i)->is_variable()) {
   2187e:	4629      	mov	r1, r5
   21880:	f7ff fea8 	bl	215d4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj>
   21884:	f00e fccf 	bl	30226 <_ZNK6tflite6Tensor11is_variableEv>
   21888:	ea4f 1885 	mov.w	r8, r5, lsl #6
   2188c:	b1a0      	cbz	r0, 218b8 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x54>
      context->tensors[i].data.data = memory_allocator_->AllocateFromTail(
   2188e:	6870      	ldr	r0, [r6, #4]
   21890:	68a7      	ldr	r7, [r4, #8]
          context->tensors[i].bytes, kBufferAlignment);
   21892:	6803      	ldr	r3, [r0, #0]
   21894:	4447      	add	r7, r8
      context->tensors[i].data.data = memory_allocator_->AllocateFromTail(
   21896:	2210      	movs	r2, #16
   21898:	68db      	ldr	r3, [r3, #12]
   2189a:	69b9      	ldr	r1, [r7, #24]
   2189c:	4798      	blx	r3
      if (context->tensors[i].data.data == nullptr) {
   2189e:	68a3      	ldr	r3, [r4, #8]
      context->tensors[i].data.data = memory_allocator_->AllocateFromTail(
   218a0:	6078      	str	r0, [r7, #4]
      if (context->tensors[i].data.data == nullptr) {
   218a2:	4443      	add	r3, r8
   218a4:	685a      	ldr	r2, [r3, #4]
   218a6:	b93a      	cbnz	r2, 218b8 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x54>
        TF_LITE_REPORT_ERROR(error_reporter_,
   218a8:	699a      	ldr	r2, [r3, #24]
   218aa:	4907      	ldr	r1, [pc, #28]	; (218c8 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x64>)
   218ac:	68b0      	ldr	r0, [r6, #8]
   218ae:	f00e fb13 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
   218b2:	2001      	movs	r0, #1
}
   218b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    tflite::ResetVariableTensor(&(context->tensors[i]));
   218b8:	68a0      	ldr	r0, [r4, #8]
  for (size_t i = 0; i < context->tensors_size; ++i) {
   218ba:	3501      	adds	r5, #1
    tflite::ResetVariableTensor(&(context->tensors[i]));
   218bc:	4440      	add	r0, r8
   218be:	f00e fbb7 	bl	30030 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor>
  for (size_t i = 0; i < context->tensors_size; ++i) {
   218c2:	e7d5      	b.n	21870 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xc>
  return kTfLiteOk;
   218c4:	2000      	movs	r0, #0
   218c6:	e7f5      	b.n	218b4 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x50>
   218c8:	000368b5 	.word	0x000368b5

000218cc <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE>:
    TfLiteContext* context, const SubGraph* subgraph) {
   218cc:	b538      	push	{r3, r4, r5, lr}
   218ce:	460c      	mov	r4, r1
   218d0:	4605      	mov	r5, r0
   218d2:	2104      	movs	r1, #4
   218d4:	4610      	mov	r0, r2
   218d6:	f00e fcba 	bl	3024e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
  context->tensors_size = subgraph->tensors()->size();
   218da:	6801      	ldr	r1, [r0, #0]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
   218dc:	6868      	ldr	r0, [r5, #4]
  context->tensors_size = subgraph->tensors()->size();
   218de:	6021      	str	r1, [r4, #0]
          sizeof(TfLiteTensor) * context->tensors_size, alignof(TfLiteTensor)));
   218e0:	6803      	ldr	r3, [r0, #0]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
   218e2:	2204      	movs	r2, #4
   218e4:	68db      	ldr	r3, [r3, #12]
   218e6:	0189      	lsls	r1, r1, #6
   218e8:	4798      	blx	r3
  context->tensors =
   218ea:	60a0      	str	r0, [r4, #8]
  if (context->tensors == nullptr) {
   218ec:	b938      	cbnz	r0, 218fe <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x32>
    TF_LITE_REPORT_ERROR(
   218ee:	6822      	ldr	r2, [r4, #0]
   218f0:	4904      	ldr	r1, [pc, #16]	; (21904 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x38>)
   218f2:	68a8      	ldr	r0, [r5, #8]
   218f4:	0192      	lsls	r2, r2, #6
   218f6:	f00e faef 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   218fa:	2001      	movs	r0, #1
}
   218fc:	bd38      	pop	{r3, r4, r5, pc}
  return kTfLiteOk;
   218fe:	2000      	movs	r0, #0
   21900:	e7fc      	b.n	218fc <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x30>
   21902:	bf00      	nop
   21904:	000368e3 	.word	0x000368e3

00021908 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE>:
    NodeAndRegistration* node_and_registrations) {
   21908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2190c:	460c      	mov	r4, r1
   2190e:	ed2d 8b02 	vpush	{d8}
   21912:	4605      	mov	r5, r0
   21914:	b087      	sub	sp, #28
    auto field_offset = GetOptionalFieldOffset(field);
   21916:	2106      	movs	r1, #6
   21918:	4620      	mov	r0, r4
   2191a:	ee08 2a90 	vmov	s17, r2
   2191e:	4698      	mov	r8, r3
   21920:	f005 fda7 	bl	27472 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   21924:	b340      	cbz	r0, 21978 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x70>
    auto p = data_ + field_offset;
   21926:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   21928:	5820      	ldr	r0, [r4, r0]
   2192a:	4403      	add	r3, r0
   2192c:	9301      	str	r3, [sp, #4]
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
   2192e:	f04f 0b00 	mov.w	fp, #0
  MicroBuiltinDataAllocator builtin_data_allocator(memory_allocator_);
   21932:	686b      	ldr	r3, [r5, #4]
      : memory_allocator_(memory_allocator) {}
   21934:	4a5d      	ldr	r2, [pc, #372]	; (21aac <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1a4>)
   21936:	9c12      	ldr	r4, [sp, #72]	; 0x48
   21938:	e9cd 2304 	strd	r2, r3, [sp, #16]
    return const_cast<Table *>(this)->GetPointer<P>(field);
   2193c:	210a      	movs	r1, #10
   2193e:	ee18 0a90 	vmov	r0, s17
   21942:	f005 fdd5 	bl	274f0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
   21946:	6803      	ldr	r3, [r0, #0]
   21948:	459b      	cmp	fp, r3
   2194a:	f080 80ab 	bcs.w	21aa4 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x19c>
    const auto* op = subgraph->operators()->Get(i);
   2194e:	4659      	mov	r1, fp
   21950:	f7ff fe58 	bl	21604 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEj>
    auto field_offset = GetOptionalFieldOffset(field);
   21954:	2104      	movs	r1, #4
   21956:	4607      	mov	r7, r0
   21958:	f005 fd8b 	bl	27472 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   2195c:	b170      	cbz	r0, 2197c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x74>
   2195e:	583e      	ldr	r6, [r7, r0]
    if (index >= opcodes->size()) {
   21960:	9b01      	ldr	r3, [sp, #4]
   21962:	68a8      	ldr	r0, [r5, #8]
   21964:	681b      	ldr	r3, [r3, #0]
   21966:	42b3      	cmp	r3, r6
   21968:	d80a      	bhi.n	21980 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x78>
      TF_LITE_REPORT_ERROR(error_reporter_,
   2196a:	4632      	mov	r2, r6
   2196c:	4950      	ldr	r1, [pc, #320]	; (21ab0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1a8>)
        TF_LITE_REPORT_ERROR(error_reporter_, "Did not find a parser for %s",
   2196e:	f00e fab3 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
   21972:	f04f 0a01 	mov.w	sl, #1
   21976:	e028      	b.n	219ca <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xc2>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   21978:	9001      	str	r0, [sp, #4]
   2197a:	e7d8      	b.n	2192e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x26>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   2197c:	4606      	mov	r6, r0
   2197e:	e7ef      	b.n	21960 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x58>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   21980:	9b01      	ldr	r3, [sp, #4]
        GetRegistrationFromOpCode(opcode, op_resolver, error_reporter_,
   21982:	4602      	mov	r2, r0
   21984:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
   21986:	eb03 0986 	add.w	r9, r3, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
   2198a:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   2198e:	4641      	mov	r1, r8
   21990:	4499      	add	r9, r3
   21992:	4648      	mov	r0, r9
   21994:	f104 0324 	add.w	r3, r4, #36	; 0x24
   21998:	f000 fbb0 	bl	220fc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
                                  &(node_and_registrations[i].registration));
   2199c:	ee08 4a10 	vmov	s16, r4
    if (status != kTfLiteOk) {
   219a0:	4682      	mov	sl, r0
   219a2:	b1c0      	cbz	r0, 219d6 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xce>
    auto field_offset = GetOptionalFieldOffset(field);
   219a4:	2104      	movs	r1, #4
   219a6:	4648      	mov	r0, r9
      TF_LITE_REPORT_ERROR(error_reporter_,
   219a8:	68ac      	ldr	r4, [r5, #8]
   219aa:	f005 fd62 	bl	27472 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   219ae:	b108      	cbz	r0, 219b4 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xac>
   219b0:	f919 0000 	ldrsb.w	r0, [r9, r0]
    return static_cast<tflite::BuiltinOperator>(GetField<int8_t>(VT_BUILTIN_CODE, 0));
   219b4:	b2c0      	uxtb	r0, r0
  return (v < low) || (high < v);
   219b6:	287e      	cmp	r0, #126	; 0x7e
  return EnumNamesBuiltinOperator()[index];
   219b8:	bf96      	itet	ls
   219ba:	4b3e      	ldrls	r3, [pc, #248]	; (21ab4 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1ac>)
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
   219bc:	4a3e      	ldrhi	r2, [pc, #248]	; (21ab8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1b0>)
  return EnumNamesBuiltinOperator()[index];
   219be:	f853 2020 	ldrls.w	r2, [r3, r0, lsl #2]
   219c2:	493e      	ldr	r1, [pc, #248]	; (21abc <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1b4>)
   219c4:	4620      	mov	r0, r4
   219c6:	f00e fa87 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
}
   219ca:	4650      	mov	r0, sl
   219cc:	b007      	add	sp, #28
   219ce:	ecbd 8b02 	vpop	{d8}
   219d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const auto* registration = node_and_registrations[i].registration;
   219d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (registration == nullptr) {
   219d8:	b91b      	cbnz	r3, 219e2 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xda>
      TF_LITE_REPORT_ERROR(error_reporter_, "Skipping op for opcode_index %d\n",
   219da:	4632      	mov	r2, r6
   219dc:	4938      	ldr	r1, [pc, #224]	; (21ac0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1b8>)
   219de:	68a8      	ldr	r0, [r5, #8]
   219e0:	e7c5      	b.n	2196e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x66>
    BuiltinOperator op_type =
   219e2:	f893 9014 	ldrb.w	r9, [r3, #20]
    unsigned char* builtin_data = nullptr;
   219e6:	9003      	str	r0, [sp, #12]
    if (op_type == BuiltinOperator_CUSTOM) {
   219e8:	f1b9 0f20 	cmp.w	r9, #32
    return const_cast<Table *>(this)->GetPointer<P>(field);
   219ec:	f04f 010e 	mov.w	r1, #14
   219f0:	4638      	mov	r0, r7
   219f2:	d113      	bne.n	21a1c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x114>
   219f4:	f00e fc22 	bl	3023c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
      if (op->custom_options() != nullptr) {
   219f8:	b960      	cbnz	r0, 21a14 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x10c>
    size_t custom_data_size = 0;
   219fa:	f04f 0a00 	mov.w	sl, #0
    const char* custom_data = nullptr;
   219fe:	4656      	mov	r6, sl
   21a00:	2106      	movs	r1, #6
   21a02:	4638      	mov	r0, r7
   21a04:	f005 fd6b 	bl	274de <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  TFLITE_DCHECK(error_reporter != nullptr);
   21a08:	68ab      	ldr	r3, [r5, #8]
   21a0a:	4681      	mov	r9, r0
   21a0c:	2b00      	cmp	r3, #0
   21a0e:	d12f      	bne.n	21a70 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x168>
   21a10:	f00f f9d3 	bl	30dba <abort>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   21a14:	4606      	mov	r6, r0
        custom_data_size = op->custom_options()->size();
   21a16:	f856 ab04 	ldr.w	sl, [r6], #4
   21a1a:	e7f1      	b.n	21a00 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xf8>
    return const_cast<Table *>(this)->GetPointer<P>(field);
   21a1c:	f00e fc0e 	bl	3023c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
      if (op->custom_options() != nullptr) {
   21a20:	b150      	cbz	r0, 21a38 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x130>
  return (v < low) || (high < v);
   21a22:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
   21a26:	bf98      	it	ls
   21a28:	4b22      	ldrls	r3, [pc, #136]	; (21ab4 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1ac>)
        TF_LITE_REPORT_ERROR(
   21a2a:	68a8      	ldr	r0, [r5, #8]
   21a2c:	bf94      	ite	ls
   21a2e:	f853 2029 	ldrls.w	r2, [r3, r9, lsl #2]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
   21a32:	4a21      	ldrhi	r2, [pc, #132]	; (21ab8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1b0>)
   21a34:	4923      	ldr	r1, [pc, #140]	; (21ac4 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1bc>)
   21a36:	e79a      	b.n	2196e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x66>
          op_resolver.GetOpDataParser(op_type);
   21a38:	f8d8 3000 	ldr.w	r3, [r8]
   21a3c:	4649      	mov	r1, r9
   21a3e:	4640      	mov	r0, r8
   21a40:	699b      	ldr	r3, [r3, #24]
   21a42:	4798      	blx	r3
      if (parser == nullptr) {
   21a44:	4606      	mov	r6, r0
   21a46:	b950      	cbnz	r0, 21a5e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x156>
   21a48:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
  return EnumNamesBuiltinOperator()[index];
   21a4c:	bf98      	it	ls
   21a4e:	4b19      	ldrls	r3, [pc, #100]	; (21ab4 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1ac>)
        TF_LITE_REPORT_ERROR(error_reporter_, "Did not find a parser for %s",
   21a50:	68a8      	ldr	r0, [r5, #8]
   21a52:	bf94      	ite	ls
   21a54:	f853 2029 	ldrls.w	r2, [r3, r9, lsl #2]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
   21a58:	4a17      	ldrhi	r2, [pc, #92]	; (21ab8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1b0>)
   21a5a:	491b      	ldr	r1, [pc, #108]	; (21ac8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1c0>)
   21a5c:	e787      	b.n	2196e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x66>
      TF_LITE_ENSURE_STATUS(parser(op, error_reporter_, &builtin_data_allocator,
   21a5e:	4638      	mov	r0, r7
   21a60:	68a9      	ldr	r1, [r5, #8]
   21a62:	ab03      	add	r3, sp, #12
   21a64:	aa04      	add	r2, sp, #16
   21a66:	47b0      	blx	r6
   21a68:	4682      	mov	sl, r0
   21a6a:	2800      	cmp	r0, #0
   21a6c:	d0c5      	beq.n	219fa <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xf2>
   21a6e:	e7ac      	b.n	219ca <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xc2>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
   21a70:	2800      	cmp	r0, #0
   21a72:	d0cd      	beq.n	21a10 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x108>
    return const_cast<Table *>(this)->GetPointer<P>(field);
   21a74:	4638      	mov	r0, r7
   21a76:	2108      	movs	r1, #8
   21a78:	f005 fd31 	bl	274de <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
   21a7c:	3428      	adds	r4, #40	; 0x28
  TFLITE_DCHECK(flatbuffer_array != nullptr);
   21a7e:	4607      	mov	r7, r0
   21a80:	2800      	cmp	r0, #0
   21a82:	d0c5      	beq.n	21a10 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x108>
    *node = {};
   21a84:	2224      	movs	r2, #36	; 0x24
   21a86:	2100      	movs	r1, #0
   21a88:	ee18 0a10 	vmov	r0, s16
   21a8c:	f00f f9df 	bl	30e4e <memset>
    node->builtin_data = reinterpret_cast<void*>(builtin_data);
   21a90:	9b03      	ldr	r3, [sp, #12]
    node->outputs = outputs_array;
   21a92:	e944 970a 	strd	r9, r7, [r4, #-40]	; 0x28
    node->custom_initial_data = custom_data;
   21a96:	e944 3605 	strd	r3, r6, [r4, #-20]
    node->custom_initial_data_size = custom_data_size;
   21a9a:	f844 ac0c 	str.w	sl, [r4, #-12]
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
   21a9e:	f10b 0b01 	add.w	fp, fp, #1
   21aa2:	e74b      	b.n	2193c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x34>
  return kTfLiteOk;
   21aa4:	f04f 0a00 	mov.w	sl, #0
   21aa8:	e78f      	b.n	219ca <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xc2>
   21aaa:	bf00      	nop
   21aac:	00033194 	.word	0x00033194
   21ab0:	00036925 	.word	0x00036925
   21ab4:	00032f88 	.word	0x00032f88
   21ab8:	00033f2d 	.word	0x00033f2d
   21abc:	0003694f 	.word	0x0003694f
   21ac0:	0003697c 	.word	0x0003697c
   21ac4:	0003699d 	.word	0x0003699d
   21ac8:	000369e3 	.word	0x000369e3

00021acc <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE>:
    const SubGraph* subgraph, NodeAndRegistration** node_and_registrations) {
   21acc:	b570      	push	{r4, r5, r6, lr}
   21ace:	4604      	mov	r4, r0
   21ad0:	4608      	mov	r0, r1
   21ad2:	210a      	movs	r1, #10
   21ad4:	4615      	mov	r5, r2
   21ad6:	f005 fd0b 	bl	274f0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
      memory_allocator_->AllocateFromTail(
   21ada:	6801      	ldr	r1, [r0, #0]
   21adc:	2028      	movs	r0, #40	; 0x28
   21ade:	6866      	ldr	r6, [r4, #4]
   21ae0:	4341      	muls	r1, r0
          alignof(NodeAndRegistration)));
   21ae2:	6833      	ldr	r3, [r6, #0]
      memory_allocator_->AllocateFromTail(
   21ae4:	2204      	movs	r2, #4
   21ae6:	4630      	mov	r0, r6
   21ae8:	68db      	ldr	r3, [r3, #12]
   21aea:	4798      	blx	r3
  if (output == nullptr) {
   21aec:	b928      	cbnz	r0, 21afa <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x2e>
    TF_LITE_REPORT_ERROR(
   21aee:	4904      	ldr	r1, [pc, #16]	; (21b00 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x34>)
   21af0:	68a0      	ldr	r0, [r4, #8]
   21af2:	f00e f9f1 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   21af6:	2001      	movs	r0, #1
}
   21af8:	bd70      	pop	{r4, r5, r6, pc}
  *node_and_registrations = output;
   21afa:	6028      	str	r0, [r5, #0]
  return kTfLiteOk;
   21afc:	2000      	movs	r0, #0
   21afe:	e7fb      	b.n	21af8 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x2c>
   21b00:	00036a00 	.word	0x00036a00

00021b04 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE>:

TfLiteStatus MicroAllocator::CommitStaticMemoryPlan(const Model* model,
                                                    TfLiteContext* context,
                                                    const SubGraph* subgraph) {
   21b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21b08:	ed2d 8b02 	vpush	{d8}
   21b0c:	460e      	mov	r6, r1
  // Note that AllocationInfo is only needed for creating the plan. It will be
  // thrown away when the child allocator (tmp_allocator) goes out of scope.
  {
    SimpleMemoryAllocator tmp_allocator(error_reporter_,
                                        memory_allocator_->GetHead(),
                                        memory_allocator_->GetTail());
   21b0e:	6881      	ldr	r1, [r0, #8]
                                                    const SubGraph* subgraph) {
   21b10:	b099      	sub	sp, #100	; 0x64
   21b12:	4605      	mov	r5, r0
                                        memory_allocator_->GetTail());
   21b14:	6840      	ldr	r0, [r0, #4]
                                                    const SubGraph* subgraph) {
   21b16:	469a      	mov	sl, r3
   21b18:	9204      	str	r2, [sp, #16]
                                        memory_allocator_->GetTail());
   21b1a:	9103      	str	r1, [sp, #12]
   21b1c:	f00e fbe1 	bl	302e2 <_ZNK6tflite21SimpleMemoryAllocator7GetHeadEv>
   21b20:	9002      	str	r0, [sp, #8]
   21b22:	6868      	ldr	r0, [r5, #4]
   21b24:	f00e fbdf 	bl	302e6 <_ZNK6tflite21SimpleMemoryAllocator7GetTailEv>
   21b28:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   21b2c:	4603      	mov	r3, r0
   21b2e:	a807      	add	r0, sp, #28
   21b30:	f000 fa58 	bl	21fe4 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>

    AllocationInfoBuilder builder(error_reporter_, &tmp_allocator);
   21b34:	68ab      	ldr	r3, [r5, #8]
   21b36:	2104      	movs	r1, #4
   21b38:	4650      	mov	r0, sl
   21b3a:	ee08 3a10 	vmov	s16, r3
   21b3e:	f00e fb86 	bl	3024e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
    TF_LITE_ENSURE_STATUS(
   21b42:	6803      	ldr	r3, [r0, #0]
      allocator_->AllocateFromTail(bytes, alignof(AllocationInfo)));
   21b44:	a807      	add	r0, sp, #28
    TF_LITE_ENSURE_STATUS(
   21b46:	9302      	str	r3, [sp, #8]
  size_t Size() const { return tensor_count_ + buffer_count_; }
   21b48:	9a02      	ldr	r2, [sp, #8]
   21b4a:	696b      	ldr	r3, [r5, #20]
   21b4c:	18d3      	adds	r3, r2, r3
   21b4e:	9303      	str	r3, [sp, #12]
  size_t bytes = sizeof(AllocationInfo) * Size();
   21b50:	2318      	movs	r3, #24
   21b52:	9a03      	ldr	r2, [sp, #12]
   21b54:	4353      	muls	r3, r2
      allocator_->AllocateFromTail(bytes, alignof(AllocationInfo)));
   21b56:	2204      	movs	r2, #4
   21b58:	4619      	mov	r1, r3
  size_t bytes = sizeof(AllocationInfo) * Size();
   21b5a:	ee08 3a90 	vmov	s17, r3
      allocator_->AllocateFromTail(bytes, alignof(AllocationInfo)));
   21b5e:	f000 fa27 	bl	21fb0 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
  if (info_ == nullptr) {
   21b62:	4604      	mov	r4, r0
   21b64:	2800      	cmp	r0, #0
   21b66:	d03c      	beq.n	21be2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xde>
    auto field_offset = GetOptionalFieldOffset(field);
   21b68:	2110      	movs	r1, #16
   21b6a:	4630      	mov	r0, r6
   21b6c:	f005 fc81 	bl	27472 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   21b70:	2800      	cmp	r0, #0
   21b72:	d142      	bne.n	21bfa <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xf6>
   21b74:	4607      	mov	r7, r0
  for (size_t i = 0; i < tensor_count_; ++i) {
   21b76:	9b04      	ldr	r3, [sp, #16]
   21b78:	46a0      	mov	r8, r4
   21b7a:	689b      	ldr	r3, [r3, #8]
        builder.Init(subgraph->tensors()->size(), scratch_buffer_count_));

    const int32_t* offline_planner_offsets = nullptr;
    TF_LITE_ENSURE_STATUS(
        builder.GetOfflinePlannedOffsets(model, &offline_planner_offsets));
    TF_LITE_ENSURE_STATUS(builder.AddTensors(subgraph, offline_planner_offsets,
   21b7c:	46a1      	mov	r9, r4
   21b7e:	f103 0b04 	add.w	fp, r3, #4
  for (size_t i = 0; i < tensor_count_; ++i) {
   21b82:	2600      	movs	r6, #0
    current->first_created = -1;
   21b84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  for (size_t i = 0; i < tensor_count_; ++i) {
   21b88:	9a02      	ldr	r2, [sp, #8]
   21b8a:	42b2      	cmp	r2, r6
   21b8c:	f000 8094 	beq.w	21cb8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1b4>
    current->bytes = runtime_tensors[i].bytes;
   21b90:	f8db 2014 	ldr.w	r2, [fp, #20]
    current->output_ptr = &(runtime_tensors[i].data.data);
   21b94:	f8c9 b004 	str.w	fp, [r9, #4]
    current->bytes = runtime_tensors[i].bytes;
   21b98:	f8c9 2000 	str.w	r2, [r9]
    current->needs_allocating = (runtime_tensors[i].data.data == nullptr) &&
   21b9c:	f8db 2000 	ldr.w	r2, [fp]
    current->last_used = -1;
   21ba0:	e9c9 3302 	strd	r3, r3, [r9, #8]
    current->needs_allocating = (runtime_tensors[i].data.data == nullptr) &&
   21ba4:	2a00      	cmp	r2, #0
   21ba6:	f040 8082 	bne.w	21cae <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1aa>
    return const_cast<Table *>(this)->GetPointer<P>(field);
   21baa:	2104      	movs	r1, #4
   21bac:	4650      	mov	r0, sl
   21bae:	f00e fb4e 	bl	3024e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
                                (!subgraph->tensors()->Get(i)->is_variable());
   21bb2:	4631      	mov	r1, r6
   21bb4:	f7ff fd0e 	bl	215d4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj>
   21bb8:	f00e fb35 	bl	30226 <_ZNK6tflite6Tensor11is_variableEv>
   21bbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    current->needs_allocating = (runtime_tensors[i].data.data == nullptr) &&
   21bc0:	f080 0001 	eor.w	r0, r0, #1
   21bc4:	b2c0      	uxtb	r0, r0
   21bc6:	f889 0014 	strb.w	r0, [r9, #20]
    if (offline_offsets) {
   21bca:	2f00      	cmp	r7, #0
   21bcc:	d071      	beq.n	21cb2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1ae>
      current->offline_offset = offline_offsets[i];
   21bce:	f857 2026 	ldr.w	r2, [r7, r6, lsl #2]
   21bd2:	f8c9 2010 	str.w	r2, [r9, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
   21bd6:	3601      	adds	r6, #1
   21bd8:	f109 0918 	add.w	r9, r9, #24
   21bdc:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
   21be0:	e7d2      	b.n	21b88 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x84>
    TF_LITE_REPORT_ERROR(
   21be2:	ee18 2a90 	vmov	r2, s17
   21be6:	ee18 0a10 	vmov	r0, s16
   21bea:	49ba      	ldr	r1, [pc, #744]	; (21ed4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3d0>)
   21bec:	f00e f974 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>

    // Remaining arena size that memory planner can use for calculating offsets.
    size_t remaining_arena_size = tmp_allocator.GetAvailableMemory();
    uint8_t* planner_arena =
        tmp_allocator.AllocateFromHead(remaining_arena_size, /*alignment=*/1);
    TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
   21bf0:	2601      	movs	r6, #1
                                        memory_allocator_->GetTail());
   21bf2:	a807      	add	r0, sp, #28
   21bf4:	f00e fb6e 	bl	302d4 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
   21bf8:	e181      	b.n	21efe <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3fa>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   21bfa:	5837      	ldr	r7, [r6, r0]
    auto p = data_ + field_offset;
   21bfc:	1833      	adds	r3, r6, r0
  if (model->metadata()) {
   21bfe:	19df      	adds	r7, r3, r7
   21c00:	d0b9      	beq.n	21b76 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x72>
    const int32_t* offline_planner_offsets = nullptr;
   21c02:	2700      	movs	r7, #0
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
   21c04:	46b9      	mov	r9, r7
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
   21c06:	f8df b2e4 	ldr.w	fp, [pc, #740]	; 21eec <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3e8>
    auto field_offset = GetOptionalFieldOffset(field);
   21c0a:	2110      	movs	r1, #16
   21c0c:	4630      	mov	r0, r6
   21c0e:	f005 fc30 	bl	27472 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   21c12:	2800      	cmp	r0, #0
   21c14:	f000 81a7 	beq.w	21f66 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x462>
   21c18:	5832      	ldr	r2, [r6, r0]
    auto p = data_ + field_offset;
   21c1a:	1831      	adds	r1, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   21c1c:	188b      	adds	r3, r1, r2
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
   21c1e:	588a      	ldr	r2, [r1, r2]
   21c20:	454a      	cmp	r2, r9
   21c22:	d9a8      	bls.n	21b76 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x72>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   21c24:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
   21c26:	eb03 0889 	add.w	r8, r3, r9, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
   21c2a:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
    auto field_offset = GetOptionalFieldOffset(field);
   21c2e:	2104      	movs	r1, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
   21c30:	4498      	add	r8, r3
    auto field_offset = GetOptionalFieldOffset(field);
   21c32:	4640      	mov	r0, r8
   21c34:	f005 fc1d 	bl	27472 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   21c38:	b380      	cbz	r0, 21c9c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x198>
    auto p = data_ + field_offset;
   21c3a:	eb08 0300 	add.w	r3, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   21c3e:	f858 0000 	ldr.w	r0, [r8, r0]
   21c42:	4403      	add	r3, r0
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
   21c44:	4658      	mov	r0, fp
   21c46:	9305      	str	r3, [sp, #20]
   21c48:	f7ef ff66 	bl	11b18 <strlen>
   21c4c:	9b05      	ldr	r3, [sp, #20]
   21c4e:	4602      	mov	r2, r0
   21c50:	4659      	mov	r1, fp
   21c52:	1d18      	adds	r0, r3, #4
   21c54:	f00f f9f4 	bl	31040 <strncmp>
   21c58:	bb30      	cbnz	r0, 21ca8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1a4>
    auto field_offset = GetOptionalFieldOffset(field);
   21c5a:	210c      	movs	r1, #12
   21c5c:	4630      	mov	r0, r6
   21c5e:	f005 fc08 	bl	27472 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   21c62:	b1e8      	cbz	r0, 21ca0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x19c>
   21c64:	5837      	ldr	r7, [r6, r0]
    auto p = data_ + field_offset;
   21c66:	1833      	adds	r3, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   21c68:	441f      	add	r7, r3
    auto field_offset = GetOptionalFieldOffset(field);
   21c6a:	2106      	movs	r1, #6
   21c6c:	4640      	mov	r0, r8
   21c6e:	f005 fc00 	bl	27472 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   21c72:	b1b8      	cbz	r0, 21ca4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1a0>
   21c74:	f858 1000 	ldr.w	r1, [r8, r0]
  return_type operator[](uoffset_t i) const { return Get(i); }
   21c78:	4638      	mov	r0, r7
   21c7a:	f7ff fcdb 	bl	21634 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj>
    return const_cast<Table *>(this)->GetPointer<P>(field);
   21c7e:	2104      	movs	r1, #4
   21c80:	f00e fadc 	bl	3023c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
        if (tensor_count_ != nbr_tensors) {
   21c84:	9b02      	ldr	r3, [sp, #8]
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
   21c86:	68c2      	ldr	r2, [r0, #12]
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
   21c88:	f100 0710 	add.w	r7, r0, #16
        if (tensor_count_ != nbr_tensors) {
   21c8c:	4293      	cmp	r3, r2
   21c8e:	d00b      	beq.n	21ca8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1a4>
          TF_LITE_REPORT_ERROR(reporter_,
   21c90:	ee18 0a10 	vmov	r0, s16
   21c94:	4990      	ldr	r1, [pc, #576]	; (21ed8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3d4>)
   21c96:	f00e f91f 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    TF_LITE_ENSURE_STATUS(
   21c9a:	e7a9      	b.n	21bf0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xec>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   21c9c:	4603      	mov	r3, r0
   21c9e:	e7d1      	b.n	21c44 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x140>
   21ca0:	4607      	mov	r7, r0
   21ca2:	e7e2      	b.n	21c6a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x166>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   21ca4:	4601      	mov	r1, r0
   21ca6:	e7e7      	b.n	21c78 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x174>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
   21ca8:	f109 0901 	add.w	r9, r9, #1
   21cac:	e7ad      	b.n	21c0a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x106>
    current->needs_allocating = (runtime_tensors[i].data.data == nullptr) &&
   21cae:	2000      	movs	r0, #0
   21cb0:	e789      	b.n	21bc6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xc2>
      current->offline_offset = kOnlinePlannedBuffer;
   21cb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   21cb6:	e78c      	b.n	21bd2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xce>
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
   21cb8:	f04f 0b00 	mov.w	fp, #0
    current->first_created = 0;
   21cbc:	f04f 0918 	mov.w	r9, #24
   21cc0:	465f      	mov	r7, fp
    return const_cast<Table *>(this)->GetPointer<P>(field);
   21cc2:	2106      	movs	r1, #6
   21cc4:	4650      	mov	r0, sl
   21cc6:	f005 fc0a 	bl	274de <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
   21cca:	6803      	ldr	r3, [r0, #0]
   21ccc:	455b      	cmp	r3, fp
   21cce:	d908      	bls.n	21ce2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1de>
    const int tensor_index = subgraph->inputs()->Get(i);
   21cd0:	4659      	mov	r1, fp
   21cd2:	f7f4 fbd5 	bl	16480 <_ZNK11flatbuffers6VectorIiE3GetEj>
    current->first_created = 0;
   21cd6:	fb09 4000 	mla	r0, r9, r0, r4
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
   21cda:	f10b 0b01 	add.w	fp, fp, #1
    current->first_created = 0;
   21cde:	6087      	str	r7, [r0, #8]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
   21ce0:	e7ef      	b.n	21cc2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1be>
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
   21ce2:	f04f 0b00 	mov.w	fp, #0
    current->last_used = subgraph->operators()->size() - 1;
   21ce6:	f04f 0918 	mov.w	r9, #24
   21cea:	2108      	movs	r1, #8
   21cec:	4650      	mov	r0, sl
   21cee:	f005 fbf6 	bl	274de <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
   21cf2:	210a      	movs	r1, #10
   21cf4:	9002      	str	r0, [sp, #8]
   21cf6:	4650      	mov	r0, sl
   21cf8:	f005 fbfa 	bl	274f0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
   21cfc:	9b02      	ldr	r3, [sp, #8]
   21cfe:	4607      	mov	r7, r0
   21d00:	681a      	ldr	r2, [r3, #0]
   21d02:	455a      	cmp	r2, fp
   21d04:	d90b      	bls.n	21d1e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x21a>
    const int tensor_index = subgraph->outputs()->Get(i);
   21d06:	4659      	mov	r1, fp
   21d08:	4618      	mov	r0, r3
   21d0a:	f7f4 fbb9 	bl	16480 <_ZNK11flatbuffers6VectorIiE3GetEj>
    current->last_used = subgraph->operators()->size() - 1;
   21d0e:	fb09 4000 	mla	r0, r9, r0, r4
   21d12:	683b      	ldr	r3, [r7, #0]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
   21d14:	f10b 0b01 	add.w	fp, fp, #1
    current->last_used = subgraph->operators()->size() - 1;
   21d18:	3b01      	subs	r3, #1
   21d1a:	60c3      	str	r3, [r0, #12]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
   21d1c:	e7e5      	b.n	21cea <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1e6>
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
   21d1e:	6807      	ldr	r7, [r0, #0]
   21d20:	3f01      	subs	r7, #1
   21d22:	2f00      	cmp	r7, #0
   21d24:	db37      	blt.n	21d96 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x292>
   21d26:	210a      	movs	r1, #10
   21d28:	4650      	mov	r0, sl
   21d2a:	f005 fbe1 	bl	274f0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
    const auto* op = subgraph->operators()->Get(i);
   21d2e:	4639      	mov	r1, r7
   21d30:	f7ff fc68 	bl	21604 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEj>
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
   21d34:	f04f 0b00 	mov.w	fp, #0
    const auto* op = subgraph->operators()->Get(i);
   21d38:	4681      	mov	r9, r0
   21d3a:	2106      	movs	r1, #6
   21d3c:	4648      	mov	r0, r9
   21d3e:	f005 fbce 	bl	274de <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
   21d42:	6802      	ldr	r2, [r0, #0]
   21d44:	455a      	cmp	r2, fp
   21d46:	d90e      	bls.n	21d66 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x262>
      const int tensor_index = op->inputs()->Get(n);
   21d48:	4659      	mov	r1, fp
   21d4a:	f7f4 fb99 	bl	16480 <_ZNK11flatbuffers6VectorIiE3GetEj>
      AllocationInfo* current = &info_[tensor_index];
   21d4e:	2318      	movs	r3, #24
   21d50:	fb03 4000 	mla	r0, r3, r0, r4
      if (((current->last_used == -1) || (current->last_used < i))) {
   21d54:	68c2      	ldr	r2, [r0, #12]
   21d56:	1c51      	adds	r1, r2, #1
   21d58:	d001      	beq.n	21d5e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x25a>
   21d5a:	4297      	cmp	r7, r2
   21d5c:	dd00      	ble.n	21d60 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x25c>
        current->last_used = i;
   21d5e:	60c7      	str	r7, [r0, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
   21d60:	f10b 0b01 	add.w	fp, fp, #1
   21d64:	e7e9      	b.n	21d3a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x236>
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
   21d66:	f04f 0b00 	mov.w	fp, #0
   21d6a:	2108      	movs	r1, #8
   21d6c:	4648      	mov	r0, r9
   21d6e:	f005 fbb6 	bl	274de <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
   21d72:	6802      	ldr	r2, [r0, #0]
   21d74:	455a      	cmp	r2, fp
   21d76:	d9d3      	bls.n	21d20 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x21c>
      const int tensor_index = op->outputs()->Get(n);
   21d78:	4659      	mov	r1, fp
   21d7a:	f7f4 fb81 	bl	16480 <_ZNK11flatbuffers6VectorIiE3GetEj>
      AllocationInfo* current = &info_[tensor_index];
   21d7e:	2318      	movs	r3, #24
   21d80:	fb03 4000 	mla	r0, r3, r0, r4
      if ((current->first_created == -1) || (current->first_created > i)) {
   21d84:	6882      	ldr	r2, [r0, #8]
   21d86:	1c53      	adds	r3, r2, #1
   21d88:	d001      	beq.n	21d8e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x28a>
   21d8a:	4297      	cmp	r7, r2
   21d8c:	da00      	bge.n	21d90 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x28c>
        current->first_created = i;
   21d8e:	6087      	str	r7, [r0, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
   21d90:	f10b 0b01 	add.w	fp, fp, #1
   21d94:	e7e9      	b.n	21d6a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x266>
  for (size_t i = 0; i < tensor_count_; ++i) {
   21d96:	2200      	movs	r2, #0
   21d98:	4621      	mov	r1, r4
      current->needs_allocating = false;
   21d9a:	4617      	mov	r7, r2
  for (size_t i = 0; i < tensor_count_; ++i) {
   21d9c:	4296      	cmp	r6, r2
   21d9e:	d018      	beq.n	21dd2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2ce>
    const bool is_read_only =
   21da0:	e9d1 3002 	ldrd	r3, r0, [r1, #8]
        (current->first_created == -1) && (current->last_used != -1);
   21da4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   21da8:	d105      	bne.n	21db6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2b2>
   21daa:	3001      	adds	r0, #1
   21dac:	d005      	beq.n	21dba <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2b6>
      current->needs_allocating = false;
   21dae:	750f      	strb	r7, [r1, #20]
  for (size_t i = 0; i < tensor_count_; ++i) {
   21db0:	3201      	adds	r2, #1
   21db2:	3118      	adds	r1, #24
   21db4:	e7f2      	b.n	21d9c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x298>
        ((current->first_created == -1) || (current->last_used == -1));
   21db6:	3001      	adds	r0, #1
   21db8:	d1fa      	bne.n	21db0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2ac>
    if (has_partial_lifetime && current->needs_allocating) {
   21dba:	7d08      	ldrb	r0, [r1, #20]
   21dbc:	2800      	cmp	r0, #0
   21dbe:	d0f7      	beq.n	21db0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2ac>
      TF_LITE_REPORT_ERROR(
   21dc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   21dc4:	ee18 0a10 	vmov	r0, s16
   21dc8:	9100      	str	r1, [sp, #0]
   21dca:	4944      	ldr	r1, [pc, #272]	; (21edc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3d8>)
   21dcc:	f00e f884 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    TF_LITE_ENSURE_STATUS(builder.AddTensors(subgraph, offline_planner_offsets,
   21dd0:	e70e      	b.n	21bf0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xec>
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
   21dd2:	2318      	movs	r3, #24
    current->needs_allocating = true;
   21dd4:	2701      	movs	r7, #1
    current->offline_offset = kOnlinePlannedBuffer;
   21dd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21dda:	fb03 4306 	mla	r3, r3, r6, r4
   21dde:	692a      	ldr	r2, [r5, #16]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
   21de0:	9903      	ldr	r1, [sp, #12]
   21de2:	3318      	adds	r3, #24
   21de4:	42b1      	cmp	r1, r6
   21de6:	d90e      	bls.n	21e06 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x302>
    current->bytes = handle->bytes;
   21de8:	6851      	ldr	r1, [r2, #4]
    current->output_ptr = reinterpret_cast<void**>(&handle->data);
   21dea:	f843 2c14 	str.w	r2, [r3, #-20]
    current->bytes = handle->bytes;
   21dee:	f843 1c18 	str.w	r1, [r3, #-24]
    current->first_created = handle->node_idx;
   21df2:	6891      	ldr	r1, [r2, #8]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
   21df4:	3601      	adds	r6, #1
    current->last_used = handle->node_idx;
   21df6:	e943 1104 	strd	r1, r1, [r3, #-16]
    current->needs_allocating = true;
   21dfa:	f803 7c04 	strb.w	r7, [r3, #-4]
    current->offline_offset = kOnlinePlannedBuffer;
   21dfe:	f843 0c08 	str.w	r0, [r3, #-8]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
   21e02:	320c      	adds	r2, #12
   21e04:	e7ec      	b.n	21de0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2dc>
    size_t remaining_arena_size = tmp_allocator.GetAvailableMemory();
   21e06:	a807      	add	r0, sp, #28
   21e08:	f00e fa6f 	bl	302ea <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEv>
        tmp_allocator.AllocateFromHead(remaining_arena_size, /*alignment=*/1);
   21e0c:	2201      	movs	r2, #1
   21e0e:	4601      	mov	r1, r0
    size_t remaining_arena_size = tmp_allocator.GetAvailableMemory();
   21e10:	4606      	mov	r6, r0
        tmp_allocator.AllocateFromHead(remaining_arena_size, /*alignment=*/1);
   21e12:	a807      	add	r0, sp, #28
   21e14:	f000 f8b2 	bl	21f7c <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj>
    TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
   21e18:	4601      	mov	r1, r0
   21e1a:	b958      	cbnz	r0, 21e34 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x330>
   21e1c:	4b30      	ldr	r3, [pc, #192]	; (21ee0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3dc>)
   21e1e:	68a9      	ldr	r1, [r5, #8]
   21e20:	9301      	str	r3, [sp, #4]
   21e22:	f240 338f 	movw	r3, #911	; 0x38f
   21e26:	4608      	mov	r0, r1
   21e28:	9300      	str	r3, [sp, #0]
   21e2a:	4a2e      	ldr	r2, [pc, #184]	; (21ee4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3e0>)
   21e2c:	4b2e      	ldr	r3, [pc, #184]	; (21ee8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3e4>)
   21e2e:	f00e f861 	bl	2fef4 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   21e32:	e6dd      	b.n	21bf0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xec>
    GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
   21e34:	4632      	mov	r2, r6
   21e36:	a80d      	add	r0, sp, #52	; 0x34
   21e38:	f000 f926 	bl	22088 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>
    TF_LITE_ENSURE_STATUS(
   21e3c:	ee18 3a90 	vmov	r3, s17
   21e40:	4423      	add	r3, r4
   21e42:	4699      	mov	r9, r3
   21e44:	68af      	ldr	r7, [r5, #8]
  for (size_t i = 0; i < allocation_info_size; ++i) {
   21e46:	454c      	cmp	r4, r9
   21e48:	d077      	beq.n	21f3a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x436>
    if (current->needs_allocating) {
   21e4a:	7d23      	ldrb	r3, [r4, #20]
   21e4c:	b90b      	cbnz	r3, 21e52 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x34e>
  for (size_t i = 0; i < allocation_info_size; ++i) {
   21e4e:	3418      	adds	r4, #24
   21e50:	e7f9      	b.n	21e46 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x342>
          AlignSizeUp(current->bytes, kBufferAlignment);
   21e52:	2110      	movs	r1, #16
   21e54:	6820      	ldr	r0, [r4, #0]
   21e56:	f00e f968 	bl	3012a <_ZN6tflite11AlignSizeUpEjj>
      if (current->offline_offset == kOnlinePlannedBuffer) {
   21e5a:	6923      	ldr	r3, [r4, #16]
          AlignSizeUp(current->bytes, kBufferAlignment);
   21e5c:	4602      	mov	r2, r0
      if (current->offline_offset == kOnlinePlannedBuffer) {
   21e5e:	1c59      	adds	r1, r3, #1
   21e60:	d10d      	bne.n	21e7e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x37a>
        TF_LITE_ENSURE_STATUS(
   21e62:	68e3      	ldr	r3, [r4, #12]
   21e64:	4639      	mov	r1, r7
   21e66:	9300      	str	r3, [sp, #0]
   21e68:	68a3      	ldr	r3, [r4, #8]
   21e6a:	a80d      	add	r0, sp, #52	; 0x34
   21e6c:	f000 f8ea 	bl	22044 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
   21e70:	4606      	mov	r6, r0
   21e72:	2800      	cmp	r0, #0
   21e74:	d0eb      	beq.n	21e4e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x34a>
    GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
   21e76:	a80d      	add	r0, sp, #52	; 0x34
   21e78:	f00e fa3b 	bl	302f2 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
   21e7c:	e6b9      	b.n	21bf2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xee>
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
   21e7e:	9301      	str	r3, [sp, #4]
   21e80:	68e3      	ldr	r3, [r4, #12]
   21e82:	4639      	mov	r1, r7
   21e84:	9300      	str	r3, [sp, #0]
   21e86:	68a3      	ldr	r3, [r4, #8]
   21e88:	a80d      	add	r0, sp, #52	; 0x34
   21e8a:	f00e fa58 	bl	3033e <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>
   21e8e:	e7ef      	b.n	21e70 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x36c>
          planner.GetMaximumMemorySize(), actual_available_arena_size);
      return kTfLiteError;
    }

    // Commit the plan.
    TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
   21e90:	6868      	ldr	r0, [r5, #4]
   21e92:	f00e fa26 	bl	302e2 <_ZNK6tflite21SimpleMemoryAllocator7GetHeadEv>
  int planner_index = 0;
   21e96:	f04f 0b00 	mov.w	fp, #0
    TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
   21e9a:	4607      	mov	r7, r0
      int offset = -1;
   21e9c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
  for (size_t i = 0; i < allocation_info_size; ++i) {
   21ea0:	4544      	cmp	r4, r8
   21ea2:	d032      	beq.n	21f0a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x406>
    if (current->needs_allocating) {
   21ea4:	f898 3014 	ldrb.w	r3, [r8, #20]
   21ea8:	b18b      	cbz	r3, 21ece <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3ca>
      TF_LITE_ENSURE_STATUS(
   21eaa:	465a      	mov	r2, fp
   21eac:	4649      	mov	r1, r9
   21eae:	ab06      	add	r3, sp, #24
   21eb0:	a80d      	add	r0, sp, #52	; 0x34
      int offset = -1;
   21eb2:	f8cd a018 	str.w	sl, [sp, #24]
      TF_LITE_ENSURE_STATUS(
   21eb6:	f000 f905 	bl	220c4 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>
   21eba:	4606      	mov	r6, r0
   21ebc:	2800      	cmp	r0, #0
   21ebe:	d1da      	bne.n	21e76 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x372>
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
   21ec0:	9b06      	ldr	r3, [sp, #24]
   21ec2:	f8d8 2004 	ldr.w	r2, [r8, #4]
   21ec6:	443b      	add	r3, r7
   21ec8:	6013      	str	r3, [r2, #0]
      ++planner_index;
   21eca:	f10b 0b01 	add.w	fp, fp, #1
  for (size_t i = 0; i < allocation_info_size; ++i) {
   21ece:	f108 0818 	add.w	r8, r8, #24
   21ed2:	e7e5      	b.n	21ea0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x39c>
   21ed4:	00036a36 	.word	0x00036a36
   21ed8:	00036a77 	.word	0x00036a77
   21edc:	00036ac2 	.word	0x00036ac2
   21ee0:	00036b4e 	.word	0x00036b4e
   21ee4:	00034b9c 	.word	0x00034b9c
   21ee8:	00036b25 	.word	0x00036b25
   21eec:	00036bdf 	.word	0x00036bdf
    GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
   21ef0:	a80d      	add	r0, sp, #52	; 0x34
   21ef2:	f00e f9fe 	bl	302f2 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
                                        memory_allocator_->GetTail());
   21ef6:	a807      	add	r0, sp, #28
   21ef8:	f00e f9ec 	bl	302d4 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
    uint8_t* allocated_tensor_memory =
        memory_allocator_->AllocateFromHead(planner.GetMaximumMemorySize(),
                                            /*alignment=*/1);
    TF_LITE_ENSURE(error_reporter_, allocated_tensor_memory != nullptr);
  }
  return kTfLiteOk;
   21efc:	2600      	movs	r6, #0
}
   21efe:	4630      	mov	r0, r6
   21f00:	b019      	add	sp, #100	; 0x64
   21f02:	ecbd 8b02 	vpop	{d8}
   21f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memory_allocator_->AllocateFromHead(planner.GetMaximumMemorySize(),
   21f0a:	686c      	ldr	r4, [r5, #4]
   21f0c:	a80d      	add	r0, sp, #52	; 0x34
                                            /*alignment=*/1);
   21f0e:	6823      	ldr	r3, [r4, #0]
   21f10:	689e      	ldr	r6, [r3, #8]
        memory_allocator_->AllocateFromHead(planner.GetMaximumMemorySize(),
   21f12:	f00e fb0c 	bl	3052e <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
   21f16:	2201      	movs	r2, #1
   21f18:	4601      	mov	r1, r0
   21f1a:	4620      	mov	r0, r4
   21f1c:	47b0      	blx	r6
    TF_LITE_ENSURE(error_reporter_, allocated_tensor_memory != nullptr);
   21f1e:	2800      	cmp	r0, #0
   21f20:	d1e6      	bne.n	21ef0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3ec>
   21f22:	4b12      	ldr	r3, [pc, #72]	; (21f6c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x468>)
   21f24:	68a9      	ldr	r1, [r5, #8]
   21f26:	9301      	str	r3, [sp, #4]
   21f28:	f44f 736a 	mov.w	r3, #936	; 0x3a8
   21f2c:	4608      	mov	r0, r1
   21f2e:	9300      	str	r3, [sp, #0]
   21f30:	4a0f      	ldr	r2, [pc, #60]	; (21f70 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x46c>)
   21f32:	4b10      	ldr	r3, [pc, #64]	; (21f74 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x470>)
   21f34:	f00d ffde 	bl	2fef4 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   21f38:	e013      	b.n	21f62 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x45e>
        memory_allocator_->GetAvailableMemory();
   21f3a:	6868      	ldr	r0, [r5, #4]
   21f3c:	f00e f9d5 	bl	302ea <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEv>
   21f40:	4606      	mov	r6, r0
    if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
   21f42:	a80d      	add	r0, sp, #52	; 0x34
   21f44:	f00e faf3 	bl	3052e <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
   21f48:	42b0      	cmp	r0, r6
   21f4a:	f8d5 9008 	ldr.w	r9, [r5, #8]
   21f4e:	d99f      	bls.n	21e90 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x38c>
      TF_LITE_REPORT_ERROR(
   21f50:	a80d      	add	r0, sp, #52	; 0x34
   21f52:	f00e faec 	bl	3052e <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
   21f56:	4633      	mov	r3, r6
   21f58:	4602      	mov	r2, r0
   21f5a:	4907      	ldr	r1, [pc, #28]	; (21f78 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x474>)
   21f5c:	4648      	mov	r0, r9
   21f5e:	f00d ffbb 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    TF_LITE_ENSURE(error_reporter_, allocated_tensor_memory != nullptr);
   21f62:	2601      	movs	r6, #1
   21f64:	e787      	b.n	21e76 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x372>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
   21f66:	6803      	ldr	r3, [r0, #0]
   21f68:	deff      	udf	#255	; 0xff
   21f6a:	bf00      	nop
   21f6c:	00036bbc 	.word	0x00036bbc
   21f70:	00034b9c 	.word	0x00034b9c
   21f74:	00036b25 	.word	0x00036b25
   21f78:	00036b67 	.word	0x00036b67

00021f7c <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj>:
}

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}

uint8_t* SimpleMemoryAllocator::AllocateFromHead(size_t size,
                                                 size_t alignment) {
   21f7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21f7e:	4605      	mov	r5, r0
   21f80:	460c      	mov	r4, r1
  uint8_t* const aligned_result = AlignPointerUp(head_, alignment);
   21f82:	6900      	ldr	r0, [r0, #16]
   21f84:	4611      	mov	r1, r2
   21f86:	f00e f8c5 	bl	30114 <_ZN6tflite14AlignPointerUpEPhj>
  const size_t available_memory = tail_ - aligned_result;
   21f8a:	696b      	ldr	r3, [r5, #20]
   21f8c:	1a1b      	subs	r3, r3, r0
  if (available_memory < size) {
   21f8e:	42a3      	cmp	r3, r4
   21f90:	d209      	bcs.n	21fa6 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x2a>
    TF_LITE_REPORT_ERROR(
   21f92:	1ae2      	subs	r2, r4, r3
   21f94:	9200      	str	r2, [sp, #0]
   21f96:	4905      	ldr	r1, [pc, #20]	; (21fac <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x30>)
   21f98:	4622      	mov	r2, r4
   21f9a:	6868      	ldr	r0, [r5, #4]
   21f9c:	f00d ff9c 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory. Requested: %u, available %u, missing: %u",
        size, available_memory, size - available_memory);
    return nullptr;
   21fa0:	2000      	movs	r0, #0
  }
  head_ = aligned_result + size;
  return aligned_result;
}
   21fa2:	b003      	add	sp, #12
   21fa4:	bd30      	pop	{r4, r5, pc}
  head_ = aligned_result + size;
   21fa6:	4404      	add	r4, r0
   21fa8:	612c      	str	r4, [r5, #16]
  return aligned_result;
   21faa:	e7fa      	b.n	21fa2 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x26>
   21fac:	00036bf7 	.word	0x00036bf7

00021fb0 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:

uint8_t* SimpleMemoryAllocator::AllocateFromTail(size_t size,
                                                 size_t alignment) {
   21fb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21fb2:	460d      	mov	r5, r1
   21fb4:	4604      	mov	r4, r0
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
   21fb6:	6940      	ldr	r0, [r0, #20]
   21fb8:	4611      	mov	r1, r2
   21fba:	1b40      	subs	r0, r0, r5
   21fbc:	f00e f8b1 	bl	30122 <_ZN6tflite16AlignPointerDownEPhj>
  if (aligned_result < head_) {
   21fc0:	6923      	ldr	r3, [r4, #16]
   21fc2:	4283      	cmp	r3, r0
   21fc4:	d90a      	bls.n	21fdc <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x2c>
    const size_t missing_memory = head_ - aligned_result;
   21fc6:	1a1b      	subs	r3, r3, r0
    TF_LITE_REPORT_ERROR(
   21fc8:	9300      	str	r3, [sp, #0]
   21fca:	462a      	mov	r2, r5
   21fcc:	4904      	ldr	r1, [pc, #16]	; (21fe0 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x30>)
   21fce:	6860      	ldr	r0, [r4, #4]
   21fd0:	1aeb      	subs	r3, r5, r3
   21fd2:	f00d ff81 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory. Requested: %u, available %u, missing: %u",
        size, size - missing_memory, missing_memory);
    return nullptr;
   21fd6:	2000      	movs	r0, #0
  }
  tail_ = aligned_result;
  return aligned_result;
}
   21fd8:	b003      	add	sp, #12
   21fda:	bd30      	pop	{r4, r5, pc}
  tail_ = aligned_result;
   21fdc:	6160      	str	r0, [r4, #20]
  return aligned_result;
   21fde:	e7fb      	b.n	21fd8 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x28>
   21fe0:	00036bf7 	.word	0x00036bf7

00021fe4 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>:
SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
   21fe4:	b530      	push	{r4, r5, lr}
      tail_(buffer_tail) {}
   21fe6:	4d04      	ldr	r5, [pc, #16]	; (21ff8 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_+0x14>)
   21fe8:	e9c0 2302 	strd	r2, r3, [r0, #8]
   21fec:	e9c0 5100 	strd	r5, r1, [r0]
   21ff0:	e9c0 2304 	strd	r2, r3, [r0, #16]
   21ff4:	bd30      	pop	{r4, r5, pc}
   21ff6:	bf00      	nop
   21ff8:	000331d4 	.word	0x000331d4

00021ffc <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
   21ffc:	b510      	push	{r4, lr}
   21ffe:	b086      	sub	sp, #24
  TFLITE_DCHECK(error_reporter != nullptr);
   22000:	b908      	cbnz	r0, 22006 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0xa>
   22002:	f00e feda 	bl	30dba <abort>
  TFLITE_DCHECK(buffer_head != nullptr);
   22006:	2900      	cmp	r1, #0
   22008:	d0fb      	beq.n	22002 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x6>
      tail_(buffer_tail) {}
   2200a:	4c0d      	ldr	r4, [pc, #52]	; (22040 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x44>)
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
   2200c:	440a      	add	r2, r1
      tail_(buffer_tail) {}
   2200e:	e9cd 1202 	strd	r1, r2, [sp, #8]
   22012:	e9cd 1204 	strd	r1, r2, [sp, #16]
   22016:	e9cd 4000 	strd	r4, r0, [sp]
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
   2201a:	2204      	movs	r2, #4
   2201c:	2118      	movs	r1, #24
   2201e:	4668      	mov	r0, sp
   22020:	f7ff ffc6 	bl	21fb0 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
   22024:	b150      	cbz	r0, 2203c <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x40>
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
   22026:	9b01      	ldr	r3, [sp, #4]
   22028:	6004      	str	r4, [r0, #0]
   2202a:	6043      	str	r3, [r0, #4]
   2202c:	9b02      	ldr	r3, [sp, #8]
   2202e:	6083      	str	r3, [r0, #8]
   22030:	9b03      	ldr	r3, [sp, #12]
   22032:	60c3      	str	r3, [r0, #12]
   22034:	9b04      	ldr	r3, [sp, #16]
   22036:	6103      	str	r3, [r0, #16]
   22038:	9b05      	ldr	r3, [sp, #20]
   2203a:	6143      	str	r3, [r0, #20]
}
   2203c:	b006      	add	sp, #24
   2203e:	bd10      	pop	{r4, pc}
   22040:	000331d4 	.word	0x000331d4

00022044 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:
  // We don't own the scratch buffer, so don't deallocate anything.
}

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used) {
   22044:	b570      	push	{r4, r5, r6, lr}
   22046:	4604      	mov	r4, r0
   22048:	4608      	mov	r0, r1
  if (buffer_count_ >= max_buffer_count_) {
   2204a:	e9d4 1501 	ldrd	r1, r5, [r4, #4]
   2204e:	428d      	cmp	r5, r1
   22050:	db05      	blt.n	2205e <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x1a>
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
   22052:	460a      	mov	r2, r1
   22054:	490b      	ldr	r1, [pc, #44]	; (22084 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x40>)
   22056:	f00d ff3f 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         max_buffer_count_);
    return kTfLiteError;
   2205a:	2001      	movs	r0, #1
  current->last_time_used = last_time_used;
  current->offline_offset = kOnlinePlannedBuffer;
  ++buffer_count_;
  need_to_calculate_offsets_ = true;
  return kTfLiteOk;
}
   2205c:	bd70      	pop	{r4, r5, r6, pc}
  BufferRequirements* current = &requirements_[buffer_count_];
   2205e:	68e0      	ldr	r0, [r4, #12]
   22060:	012e      	lsls	r6, r5, #4
   22062:	eb00 1105 	add.w	r1, r0, r5, lsl #4
  current->size = size;
   22066:	5182      	str	r2, [r0, r6]
  current->first_time_used = first_time_used;
   22068:	608b      	str	r3, [r1, #8]
  current->last_time_used = last_time_used;
   2206a:	9b04      	ldr	r3, [sp, #16]
  ++buffer_count_;
   2206c:	3501      	adds	r5, #1
  current->last_time_used = last_time_used;
   2206e:	60cb      	str	r3, [r1, #12]
  current->offline_offset = kOnlinePlannedBuffer;
   22070:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22074:	604b      	str	r3, [r1, #4]
  need_to_calculate_offsets_ = true;
   22076:	2301      	movs	r3, #1
  return kTfLiteOk;
   22078:	2000      	movs	r0, #0
  ++buffer_count_;
   2207a:	60a5      	str	r5, [r4, #8]
  need_to_calculate_offsets_ = true;
   2207c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  return kTfLiteOk;
   22080:	e7ec      	b.n	2205c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x18>
   22082:	bf00      	nop
   22084:	00036c3b 	.word	0x00036c3b

00022088 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:
GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
   22088:	b510      	push	{r4, lr}
    : buffer_count_(0), need_to_calculate_offsets_(true) {
   2208a:	4c0d      	ldr	r4, [pc, #52]	; (220c0 <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0x38>)
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
   2208c:	60c1      	str	r1, [r0, #12]
    : buffer_count_(0), need_to_calculate_offsets_(true) {
   2208e:	6004      	str	r4, [r0, #0]
   22090:	2400      	movs	r4, #0
   22092:	6084      	str	r4, [r0, #8]
   22094:	2401      	movs	r4, #1
   22096:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
   2209a:	2428      	movs	r4, #40	; 0x28
   2209c:	fbb2 f2f4 	udiv	r2, r2, r4
  next_free += sizeof(ListEntry) * max_buffer_count_;
   220a0:	240c      	movs	r4, #12
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
   220a2:	eb01 1102 	add.w	r1, r1, r2, lsl #4
  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
   220a6:	6101      	str	r1, [r0, #16]
  next_free += sizeof(int) * max_buffer_count_;
   220a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
   220ac:	6141      	str	r1, [r0, #20]
  next_free += sizeof(int) * max_buffer_count_;
   220ae:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
   220b2:	6042      	str	r2, [r0, #4]
  next_free += sizeof(ListEntry) * max_buffer_count_;
   220b4:	fb04 1202 	mla	r2, r4, r2, r1
  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
   220b8:	6181      	str	r1, [r0, #24]
  buffer_offsets_ = reinterpret_cast<int*>(next_free);
   220ba:	6242      	str	r2, [r0, #36]	; 0x24
}
   220bc:	bd10      	pop	{r4, pc}
   220be:	bf00      	nop
   220c0:	000331ec 	.word	0x000331ec

000220c4 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
   220c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   220c6:	4614      	mov	r4, r2
   220c8:	4605      	mov	r5, r0
   220ca:	460f      	mov	r7, r1
   220cc:	461e      	mov	r6, r3
  CalculateOffsetsIfNeeded();
   220ce:	f00e f974 	bl	303ba <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
   220d2:	2c00      	cmp	r4, #0
   220d4:	db02      	blt.n	220dc <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x18>
   220d6:	68ab      	ldr	r3, [r5, #8]
   220d8:	42a3      	cmp	r3, r4
   220da:	dc07      	bgt.n	220ec <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x28>
    TF_LITE_REPORT_ERROR(error_reporter,
   220dc:	4622      	mov	r2, r4
   220de:	4638      	mov	r0, r7
   220e0:	68ab      	ldr	r3, [r5, #8]
   220e2:	4905      	ldr	r1, [pc, #20]	; (220f8 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x34>)
   220e4:	f00d fef8 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   220e8:	2001      	movs	r0, #1
                         buffer_index, buffer_count_);
    return kTfLiteError;
  }
  *offset = buffer_offsets_[buffer_index];
  return kTfLiteOk;
}
   220ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  *offset = buffer_offsets_[buffer_index];
   220ec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  return kTfLiteOk;
   220ee:	2000      	movs	r0, #0
  *offset = buffer_offsets_[buffer_index];
   220f0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   220f4:	6033      	str	r3, [r6, #0]
  return kTfLiteOk;
   220f6:	e7f8      	b.n	220ea <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x26>
   220f8:	00036c58 	.word	0x00036c58

000220fc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
   220fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   22100:	461e      	mov	r6, r3
  TfLiteStatus status = kTfLiteOk;
  *registration = nullptr;
   22102:	2300      	movs	r3, #0
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
   22104:	460f      	mov	r7, r1
  *registration = nullptr;
   22106:	6033      	str	r3, [r6, #0]
    auto field_offset = GetOptionalFieldOffset(field);
   22108:	2104      	movs	r1, #4
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
   2210a:	4605      	mov	r5, r0
   2210c:	4690      	mov	r8, r2
   2210e:	f005 f9b0 	bl	27472 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   22112:	b100      	cbz	r0, 22116 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x1a>
   22114:	5628      	ldrsb	r0, [r5, r0]
    return static_cast<tflite::BuiltinOperator>(GetField<int8_t>(VT_BUILTIN_CODE, 0));
   22116:	b2c4      	uxtb	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
   22118:	2108      	movs	r1, #8
   2211a:	4628      	mov	r0, r5
   2211c:	f005 f9a9 	bl	27472 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   22120:	b158      	cbz	r0, 2213a <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x3e>
   22122:	582a      	ldr	r2, [r5, r0]
  auto builtin_code = opcode->builtin_code();
  int version = opcode->version();

  if (builtin_code > BuiltinOperator_MAX ||
   22124:	2c7e      	cmp	r4, #126	; 0x7e
   22126:	d90a      	bls.n	2213e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x42>
      builtin_code < BuiltinOperator_MIN) {
    TF_LITE_REPORT_ERROR(
   22128:	4622      	mov	r2, r4
   2212a:	4640      	mov	r0, r8
   2212c:	491c      	ldr	r1, [pc, #112]	; (221a0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa4>)
   2212e:	f00d fed3 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    }
  } else if (!opcode->custom_code()) {
    TF_LITE_REPORT_ERROR(
        error_reporter,
        "Operator with CUSTOM builtin_code has no custom_code.\n");
    status = kTfLiteError;
   22132:	2001      	movs	r0, #1
      // while preparing ops.
      status = kTfLiteError;
    }
  }
  return status;
}
   22134:	b002      	add	sp, #8
   22136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2213a:	2201      	movs	r2, #1
   2213c:	e7f2      	b.n	22124 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x28>
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
   2213e:	2c20      	cmp	r4, #32
   22140:	d011      	beq.n	22166 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x6a>
    *registration = op_resolver.FindOp(builtin_code, version);
   22142:	683b      	ldr	r3, [r7, #0]
   22144:	9201      	str	r2, [sp, #4]
   22146:	4621      	mov	r1, r4
   22148:	4638      	mov	r0, r7
   2214a:	681b      	ldr	r3, [r3, #0]
   2214c:	4798      	blx	r3
    if (*registration == nullptr) {
   2214e:	9a01      	ldr	r2, [sp, #4]
    *registration = op_resolver.FindOp(builtin_code, version);
   22150:	6030      	str	r0, [r6, #0]
    if (*registration == nullptr) {
   22152:	bb10      	cbnz	r0, 2219a <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x9e>
      TF_LITE_REPORT_ERROR(
   22154:	4613      	mov	r3, r2
   22156:	4a13      	ldr	r2, [pc, #76]	; (221a4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa8>)
   22158:	4640      	mov	r0, r8
   2215a:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
   2215e:	4912      	ldr	r1, [pc, #72]	; (221a8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xac>)
   22160:	f00d feba 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      status = kTfLiteError;
   22164:	e7e5      	b.n	22132 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x36>
    auto field_offset = GetOptionalFieldOffset(field);
   22166:	2106      	movs	r1, #6
   22168:	4628      	mov	r0, r5
   2216a:	9201      	str	r2, [sp, #4]
   2216c:	f005 f981 	bl	27472 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   22170:	b120      	cbz	r0, 2217c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x80>
   22172:	582b      	ldr	r3, [r5, r0]
    auto p = data_ + field_offset;
   22174:	1829      	adds	r1, r5, r0
  } else if (!opcode->custom_code()) {
   22176:	18c9      	adds	r1, r1, r3
   22178:	9a01      	ldr	r2, [sp, #4]
   2217a:	d104      	bne.n	22186 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x8a>
    TF_LITE_REPORT_ERROR(
   2217c:	4640      	mov	r0, r8
   2217e:	490b      	ldr	r1, [pc, #44]	; (221ac <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xb0>)
   22180:	f00d feaa 	bl	2fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   22184:	e7d5      	b.n	22132 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x36>
    *registration = op_resolver.FindOp(name, version);
   22186:	683b      	ldr	r3, [r7, #0]
   22188:	4638      	mov	r0, r7
   2218a:	685b      	ldr	r3, [r3, #4]
   2218c:	3104      	adds	r1, #4
   2218e:	4798      	blx	r3
   22190:	6030      	str	r0, [r6, #0]
    status = kTfLiteError;
   22192:	fab0 f080 	clz	r0, r0
   22196:	0940      	lsrs	r0, r0, #5
   22198:	e7cc      	b.n	22134 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x38>
  TfLiteStatus status = kTfLiteOk;
   2219a:	2000      	movs	r0, #0
   2219c:	e7ca      	b.n	22134 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x38>
   2219e:	bf00      	nop
   221a0:	00036c81 	.word	0x00036c81
   221a4:	00032f88 	.word	0x00032f88
   221a8:	00036cd5 	.word	0x00036cd5
   221ac:	00036d0a 	.word	0x00036d0a

000221b0 <__cxa_guard_acquire>:
   221b0:	6803      	ldr	r3, [r0, #0]
   221b2:	07db      	lsls	r3, r3, #31
   221b4:	b510      	push	{r4, lr}
   221b6:	d410      	bmi.n	221da <__cxa_guard_acquire+0x2a>
   221b8:	7843      	ldrb	r3, [r0, #1]
   221ba:	b153      	cbz	r3, 221d2 <__cxa_guard_acquire+0x22>
   221bc:	2004      	movs	r0, #4
   221be:	f00e fae0 	bl	30782 <__cxa_allocate_exception>
   221c2:	4604      	mov	r4, r0
   221c4:	f000 f81a 	bl	221fc <_ZN9__gnu_cxx20recursive_init_errorC1Ev>
   221c8:	4a05      	ldr	r2, [pc, #20]	; (221e0 <__cxa_guard_acquire+0x30>)
   221ca:	4906      	ldr	r1, [pc, #24]	; (221e4 <__cxa_guard_acquire+0x34>)
   221cc:	4620      	mov	r0, r4
   221ce:	f00e fb39 	bl	30844 <__cxa_throw>
   221d2:	2301      	movs	r3, #1
   221d4:	7043      	strb	r3, [r0, #1]
   221d6:	4618      	mov	r0, r3
   221d8:	bd10      	pop	{r4, pc}
   221da:	2000      	movs	r0, #0
   221dc:	e7fc      	b.n	221d8 <__cxa_guard_acquire+0x28>
   221de:	bf00      	nop
   221e0:	000221e9 	.word	0x000221e9
   221e4:	00033204 	.word	0x00033204

000221e8 <_ZN9__gnu_cxx20recursive_init_errorD1Ev>:
   221e8:	4b03      	ldr	r3, [pc, #12]	; (221f8 <_ZN9__gnu_cxx20recursive_init_errorD1Ev+0x10>)
   221ea:	b510      	push	{r4, lr}
   221ec:	4604      	mov	r4, r0
   221ee:	6003      	str	r3, [r0, #0]
   221f0:	f00e fadd 	bl	307ae <_ZNSt9exceptionD1Ev>
   221f4:	4620      	mov	r0, r4
   221f6:	bd10      	pop	{r4, pc}
   221f8:	00033218 	.word	0x00033218

000221fc <_ZN9__gnu_cxx20recursive_init_errorC1Ev>:
   221fc:	4b01      	ldr	r3, [pc, #4]	; (22204 <_ZN9__gnu_cxx20recursive_init_errorC1Ev+0x8>)
   221fe:	6003      	str	r3, [r0, #0]
   22200:	4770      	bx	lr
   22202:	bf00      	nop
   22204:	00033218 	.word	0x00033218

00022208 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   22208:	4b03      	ldr	r3, [pc, #12]	; (22218 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   2220a:	b510      	push	{r4, lr}
   2220c:	4604      	mov	r4, r0
   2220e:	6003      	str	r3, [r0, #0]
   22210:	f000 f804 	bl	2221c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   22214:	4620      	mov	r0, r4
   22216:	bd10      	pop	{r4, pc}
   22218:	00033238 	.word	0x00033238

0002221c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   2221c:	4b03      	ldr	r3, [pc, #12]	; (2222c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   2221e:	b510      	push	{r4, lr}
   22220:	4604      	mov	r4, r0
   22222:	6003      	str	r3, [r0, #0]
   22224:	f00e fa28 	bl	30678 <_ZNSt9type_infoD1Ev>
   22228:	4620      	mov	r0, r4
   2222a:	bd10      	pop	{r4, pc}
   2222c:	00033278 	.word	0x00033278

00022230 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>:
   22230:	4a1a      	ldr	r2, [pc, #104]	; (2229c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x6c>)
   22232:	6853      	ldr	r3, [r2, #4]
   22234:	b570      	push	{r4, r5, r6, lr}
   22236:	f1a0 0408 	sub.w	r4, r0, #8
   2223a:	4616      	mov	r6, r2
   2223c:	b123      	cbz	r3, 22248 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x18>
   2223e:	f850 1c08 	ldr.w	r1, [r0, #-8]
   22242:	1865      	adds	r5, r4, r1
   22244:	42ab      	cmp	r3, r5
   22246:	d903      	bls.n	22250 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x20>
   22248:	f840 3c04 	str.w	r3, [r0, #-4]
   2224c:	6074      	str	r4, [r6, #4]
   2224e:	bd70      	pop	{r4, r5, r6, pc}
   22250:	d106      	bne.n	22260 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x30>
   22252:	e9d3 3500 	ldrd	r3, r5, [r3]
   22256:	4419      	add	r1, r3
   22258:	e940 1502 	strd	r1, r5, [r0, #-8]
   2225c:	6054      	str	r4, [r2, #4]
   2225e:	e7f6      	b.n	2224e <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x1e>
   22260:	3204      	adds	r2, #4
   22262:	685e      	ldr	r6, [r3, #4]
   22264:	b14e      	cbz	r6, 2227a <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x4a>
   22266:	42b5      	cmp	r5, r6
   22268:	d202      	bcs.n	22270 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x40>
   2226a:	1d1a      	adds	r2, r3, #4
   2226c:	4633      	mov	r3, r6
   2226e:	e7f8      	b.n	22262 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x32>
   22270:	bf01      	itttt	eq
   22272:	682e      	ldreq	r6, [r5, #0]
   22274:	686d      	ldreq	r5, [r5, #4]
   22276:	1989      	addeq	r1, r1, r6
   22278:	605d      	streq	r5, [r3, #4]
   2227a:	6813      	ldr	r3, [r2, #0]
   2227c:	681d      	ldr	r5, [r3, #0]
   2227e:	195e      	adds	r6, r3, r5
   22280:	42b4      	cmp	r4, r6
   22282:	bf17      	itett	ne
   22284:	685b      	ldrne	r3, [r3, #4]
   22286:	1949      	addeq	r1, r1, r5
   22288:	f840 1c08 	strne.w	r1, [r0, #-8]
   2228c:	f840 3c04 	strne.w	r3, [r0, #-4]
   22290:	bf16      	itet	ne
   22292:	6813      	ldrne	r3, [r2, #0]
   22294:	6019      	streq	r1, [r3, #0]
   22296:	605c      	strne	r4, [r3, #4]
   22298:	e7d9      	b.n	2224e <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x1e>
   2229a:	bf00      	nop
   2229c:	20026060 	.word	0x20026060

000222a0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>:
   222a0:	f100 0308 	add.w	r3, r0, #8
   222a4:	4a0f      	ldr	r2, [pc, #60]	; (222e4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x44>)
   222a6:	2b08      	cmp	r3, #8
   222a8:	f852 0f04 	ldr.w	r0, [r2, #4]!
   222ac:	bf38      	it	cc
   222ae:	2308      	movcc	r3, #8
   222b0:	3307      	adds	r3, #7
   222b2:	f023 0307 	bic.w	r3, r3, #7
   222b6:	b530      	push	{r4, r5, lr}
   222b8:	b168      	cbz	r0, 222d6 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x36>
   222ba:	e9d0 1400 	ldrd	r1, r4, [r0]
   222be:	428b      	cmp	r3, r1
   222c0:	d90a      	bls.n	222d8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x38>
   222c2:	1d02      	adds	r2, r0, #4
   222c4:	4620      	mov	r0, r4
   222c6:	e7f7      	b.n	222b8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x18>
   222c8:	18c5      	adds	r5, r0, r3
   222ca:	606c      	str	r4, [r5, #4]
   222cc:	50c1      	str	r1, [r0, r3]
   222ce:	6810      	ldr	r0, [r2, #0]
   222d0:	6003      	str	r3, [r0, #0]
   222d2:	6015      	str	r5, [r2, #0]
   222d4:	3008      	adds	r0, #8
   222d6:	bd30      	pop	{r4, r5, pc}
   222d8:	1ac9      	subs	r1, r1, r3
   222da:	2907      	cmp	r1, #7
   222dc:	d8f4      	bhi.n	222c8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x28>
   222de:	6014      	str	r4, [r2, #0]
   222e0:	e7f8      	b.n	222d4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x34>
   222e2:	bf00      	nop
   222e4:	20026060 	.word	0x20026060

000222e8 <__cxa_free_exception>:
   222e8:	4a06      	ldr	r2, [pc, #24]	; (22304 <__cxa_free_exception+0x1c>)
   222ea:	3880      	subs	r0, #128	; 0x80
   222ec:	6893      	ldr	r3, [r2, #8]
   222ee:	4298      	cmp	r0, r3
   222f0:	d905      	bls.n	222fe <__cxa_free_exception+0x16>
   222f2:	68d2      	ldr	r2, [r2, #12]
   222f4:	4413      	add	r3, r2
   222f6:	4298      	cmp	r0, r3
   222f8:	d201      	bcs.n	222fe <__cxa_free_exception+0x16>
   222fa:	f7ff bf99 	b.w	22230 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
   222fe:	f003 b943 	b.w	25588 <free>
   22302:	bf00      	nop
   22304:	20026060 	.word	0x20026060

00022308 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
   22308:	b538      	push	{r3, r4, r5, lr}
   2230a:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
   2230e:	4c07      	ldr	r4, [pc, #28]	; (2232c <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
   22310:	4628      	mov	r0, r5
   22312:	60e5      	str	r5, [r4, #12]
   22314:	f003 f930 	bl	25578 <malloc>
   22318:	60a0      	str	r0, [r4, #8]
   2231a:	b910      	cbnz	r0, 22322 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1a>
   2231c:	60e0      	str	r0, [r4, #12]
   2231e:	6060      	str	r0, [r4, #4]
   22320:	bd38      	pop	{r3, r4, r5, pc}
   22322:	2300      	movs	r3, #0
   22324:	6060      	str	r0, [r4, #4]
   22326:	6005      	str	r5, [r0, #0]
   22328:	6043      	str	r3, [r0, #4]
   2232a:	e7f9      	b.n	22320 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x18>
   2232c:	20026060 	.word	0x20026060

00022330 <_ZGTtNKSt9exception4whatEv>:
   22330:	4800      	ldr	r0, [pc, #0]	; (22334 <_ZGTtNKSt9exception4whatEv+0x4>)
   22332:	4770      	bx	lr
   22334:	00036db8 	.word	0x00036db8

00022338 <_ZGTtNKSt13bad_exception4whatEv>:
   22338:	4800      	ldr	r0, [pc, #0]	; (2233c <_ZGTtNKSt13bad_exception4whatEv+0x4>)
   2233a:	4770      	bx	lr
   2233c:	00036dc7 	.word	0x00036dc7

00022340 <_ZSt13get_terminatev>:
   22340:	4b01      	ldr	r3, [pc, #4]	; (22348 <_ZSt13get_terminatev+0x8>)
   22342:	e8d3 0faf 	lda	r0, [r3]
   22346:	4770      	bx	lr
   22348:	20020054 	.word	0x20020054

0002234c <_ZSt14get_unexpectedv>:
   2234c:	4b01      	ldr	r3, [pc, #4]	; (22354 <_ZSt14get_unexpectedv+0x8>)
   2234e:	e8d3 0faf 	lda	r0, [r3]
   22352:	4770      	bx	lr
   22354:	20020050 	.word	0x20020050

00022358 <__cxa_init_primary_exception>:
   22358:	b538      	push	{r3, r4, r5, lr}
   2235a:	2500      	movs	r5, #0
   2235c:	4604      	mov	r4, r0
   2235e:	e940 121e 	strd	r1, r2, [r0, #-120]	; 0x78
   22362:	f840 5c80 	str.w	r5, [r0, #-128]
   22366:	f7ff fff1 	bl	2234c <_ZSt14get_unexpectedv>
   2236a:	f844 0c70 	str.w	r0, [r4, #-112]
   2236e:	f7ff ffe7 	bl	22340 <_ZSt13get_terminatev>
   22372:	2347      	movs	r3, #71	; 0x47
   22374:	f844 0c6c 	str.w	r0, [r4, #-108]
   22378:	f1a4 0080 	sub.w	r0, r4, #128	; 0x80
   2237c:	f804 3c58 	strb.w	r3, [r4, #-88]
   22380:	234e      	movs	r3, #78	; 0x4e
   22382:	f804 5c51 	strb.w	r5, [r4, #-81]
   22386:	f804 3c57 	strb.w	r3, [r4, #-87]
   2238a:	2355      	movs	r3, #85	; 0x55
   2238c:	f804 3c56 	strb.w	r3, [r4, #-86]
   22390:	2343      	movs	r3, #67	; 0x43
   22392:	f804 3c55 	strb.w	r3, [r4, #-85]
   22396:	f804 3c54 	strb.w	r3, [r4, #-84]
   2239a:	232b      	movs	r3, #43	; 0x2b
   2239c:	f804 3c53 	strb.w	r3, [r4, #-83]
   223a0:	f804 3c52 	strb.w	r3, [r4, #-82]
   223a4:	4b01      	ldr	r3, [pc, #4]	; (223ac <__cxa_init_primary_exception+0x54>)
   223a6:	f844 3c50 	str.w	r3, [r4, #-80]
   223aa:	bd38      	pop	{r3, r4, r5, pc}
   223ac:	00030803 	.word	0x00030803

000223b0 <_Znwj>:
   223b0:	2801      	cmp	r0, #1
   223b2:	bf38      	it	cc
   223b4:	2001      	movcc	r0, #1
   223b6:	b510      	push	{r4, lr}
   223b8:	4604      	mov	r4, r0
   223ba:	4620      	mov	r0, r4
   223bc:	f003 f8dc 	bl	25578 <malloc>
   223c0:	b968      	cbnz	r0, 223de <_Znwj+0x2e>
   223c2:	f000 faa3 	bl	2290c <_ZSt15get_new_handlerv>
   223c6:	b940      	cbnz	r0, 223da <_Znwj+0x2a>
   223c8:	2004      	movs	r0, #4
   223ca:	f00e f9da 	bl	30782 <__cxa_allocate_exception>
   223ce:	4b04      	ldr	r3, [pc, #16]	; (223e0 <_Znwj+0x30>)
   223d0:	4a04      	ldr	r2, [pc, #16]	; (223e4 <_Znwj+0x34>)
   223d2:	4905      	ldr	r1, [pc, #20]	; (223e8 <_Znwj+0x38>)
   223d4:	6003      	str	r3, [r0, #0]
   223d6:	f00e fa35 	bl	30844 <__cxa_throw>
   223da:	4780      	blx	r0
   223dc:	e7ed      	b.n	223ba <_Znwj+0xa>
   223de:	bd10      	pop	{r4, pc}
   223e0:	000332e8 	.word	0x000332e8
   223e4:	000223f5 	.word	0x000223f5
   223e8:	000332d4 	.word	0x000332d4

000223ec <_ZNKSt9bad_alloc4whatEv>:
   223ec:	4800      	ldr	r0, [pc, #0]	; (223f0 <_ZNKSt9bad_alloc4whatEv+0x4>)
   223ee:	4770      	bx	lr
   223f0:	00036e3d 	.word	0x00036e3d

000223f4 <_ZNSt9bad_allocD1Ev>:
   223f4:	4b03      	ldr	r3, [pc, #12]	; (22404 <_ZNSt9bad_allocD1Ev+0x10>)
   223f6:	b510      	push	{r4, lr}
   223f8:	4604      	mov	r4, r0
   223fa:	6003      	str	r3, [r0, #0]
   223fc:	f00e f9d7 	bl	307ae <_ZNSt9exceptionD1Ev>
   22400:	4620      	mov	r0, r4
   22402:	bd10      	pop	{r4, pc}
   22404:	000332e8 	.word	0x000332e8

00022408 <__cxa_type_match>:
   22408:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2240c:	461d      	mov	r5, r3
   2240e:	7803      	ldrb	r3, [r0, #0]
   22410:	460e      	mov	r6, r1
   22412:	4602      	mov	r2, r0
   22414:	2b47      	cmp	r3, #71	; 0x47
   22416:	79c1      	ldrb	r1, [r0, #7]
   22418:	d113      	bne.n	22442 <__cxa_type_match+0x3a>
   2241a:	7843      	ldrb	r3, [r0, #1]
   2241c:	2b4e      	cmp	r3, #78	; 0x4e
   2241e:	d110      	bne.n	22442 <__cxa_type_match+0x3a>
   22420:	7883      	ldrb	r3, [r0, #2]
   22422:	2b55      	cmp	r3, #85	; 0x55
   22424:	d10d      	bne.n	22442 <__cxa_type_match+0x3a>
   22426:	78c3      	ldrb	r3, [r0, #3]
   22428:	2b43      	cmp	r3, #67	; 0x43
   2242a:	d10a      	bne.n	22442 <__cxa_type_match+0x3a>
   2242c:	7903      	ldrb	r3, [r0, #4]
   2242e:	2b46      	cmp	r3, #70	; 0x46
   22430:	d107      	bne.n	22442 <__cxa_type_match+0x3a>
   22432:	7943      	ldrb	r3, [r0, #5]
   22434:	2b4f      	cmp	r3, #79	; 0x4f
   22436:	d104      	bne.n	22442 <__cxa_type_match+0x3a>
   22438:	7983      	ldrb	r3, [r0, #6]
   2243a:	2b52      	cmp	r3, #82	; 0x52
   2243c:	d101      	bne.n	22442 <__cxa_type_match+0x3a>
   2243e:	2900      	cmp	r1, #0
   22440:	d030      	beq.n	224a4 <__cxa_type_match+0x9c>
   22442:	4610      	mov	r0, r2
   22444:	f00e fa5f 	bl	30906 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   22448:	f080 0001 	eor.w	r0, r0, #1
   2244c:	2300      	movs	r3, #0
   2244e:	b2c0      	uxtb	r0, r0
   22450:	2400      	movs	r4, #0
   22452:	9401      	str	r4, [sp, #4]
   22454:	bb4b      	cbnz	r3, 224aa <__cxa_type_match+0xa2>
   22456:	bb50      	cbnz	r0, 224ae <__cxa_type_match+0xa6>
   22458:	2901      	cmp	r1, #1
   2245a:	bf0a      	itet	eq
   2245c:	f852 3c20 	ldreq.w	r3, [r2, #-32]
   22460:	f1a2 0320 	subne.w	r3, r2, #32
   22464:	3b78      	subeq	r3, #120	; 0x78
   22466:	2901      	cmp	r1, #1
   22468:	bf0c      	ite	eq
   2246a:	f852 2c20 	ldreq.w	r2, [r2, #-32]
   2246e:	3258      	addne	r2, #88	; 0x58
   22470:	681c      	ldr	r4, [r3, #0]
   22472:	9201      	str	r2, [sp, #4]
   22474:	6823      	ldr	r3, [r4, #0]
   22476:	4620      	mov	r0, r4
   22478:	689b      	ldr	r3, [r3, #8]
   2247a:	4798      	blx	r3
   2247c:	b1c8      	cbz	r0, 224b2 <__cxa_type_match+0xaa>
   2247e:	9b01      	ldr	r3, [sp, #4]
   22480:	2702      	movs	r7, #2
   22482:	681b      	ldr	r3, [r3, #0]
   22484:	9301      	str	r3, [sp, #4]
   22486:	6833      	ldr	r3, [r6, #0]
   22488:	aa01      	add	r2, sp, #4
   2248a:	4621      	mov	r1, r4
   2248c:	4630      	mov	r0, r6
   2248e:	f8d3 8010 	ldr.w	r8, [r3, #16]
   22492:	2301      	movs	r3, #1
   22494:	47c0      	blx	r8
   22496:	b170      	cbz	r0, 224b6 <__cxa_type_match+0xae>
   22498:	9b01      	ldr	r3, [sp, #4]
   2249a:	602b      	str	r3, [r5, #0]
   2249c:	4638      	mov	r0, r7
   2249e:	b002      	add	sp, #8
   224a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   224a4:	2301      	movs	r3, #1
   224a6:	4608      	mov	r0, r1
   224a8:	e7d2      	b.n	22450 <__cxa_type_match+0x48>
   224aa:	4c04      	ldr	r4, [pc, #16]	; (224bc <__cxa_type_match+0xb4>)
   224ac:	e7e2      	b.n	22474 <__cxa_type_match+0x6c>
   224ae:	4c04      	ldr	r4, [pc, #16]	; (224c0 <__cxa_type_match+0xb8>)
   224b0:	e7e0      	b.n	22474 <__cxa_type_match+0x6c>
   224b2:	2701      	movs	r7, #1
   224b4:	e7e7      	b.n	22486 <__cxa_type_match+0x7e>
   224b6:	4607      	mov	r7, r0
   224b8:	e7f0      	b.n	2249c <__cxa_type_match+0x94>
   224ba:	bf00      	nop
   224bc:	0003329c 	.word	0x0003329c
   224c0:	000332a4 	.word	0x000332a4

000224c4 <__cxa_call_unexpected>:
   224c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   224c8:	ed2d 8b02 	vpush	{d8}
   224cc:	b085      	sub	sp, #20
   224ce:	4602      	mov	r2, r0
   224d0:	f00e fa6c 	bl	309ac <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   224d4:	b188      	cbz	r0, 224fa <__cxa_call_unexpected+0x36>
   224d6:	f8d2 a028 	ldr.w	sl, [r2, #40]	; 0x28
   224da:	2600      	movs	r6, #0
   224dc:	e952 7406 	ldrd	r7, r4, [r2, #-24]
   224e0:	e9d2 850c 	ldrd	r8, r5, [r2, #48]	; 0x30
   224e4:	4610      	mov	r0, r2
   224e6:	f00e faaa 	bl	30a3e <__cxa_begin_catch>
   224ea:	b16e      	cbz	r6, 22508 <__cxa_call_unexpected+0x44>
   224ec:	f00e f984 	bl	307f8 <_ZSt10unexpectedv>
   224f0:	f00e faa5 	bl	30a3e <__cxa_begin_catch>
   224f4:	b15e      	cbz	r6, 2250e <__cxa_call_unexpected+0x4a>
   224f6:	f00e f976 	bl	307e6 <_ZSt9terminatev>
   224fa:	4604      	mov	r4, r0
   224fc:	4607      	mov	r7, r0
   224fe:	2601      	movs	r6, #1
   22500:	4605      	mov	r5, r0
   22502:	4680      	mov	r8, r0
   22504:	4682      	mov	sl, r0
   22506:	e7ed      	b.n	224e4 <__cxa_call_unexpected+0x20>
   22508:	4638      	mov	r0, r7
   2250a:	f00e f971 	bl	307f0 <_ZN10__cxxabiv112__unexpectedEPFvvE>
   2250e:	f000 f851 	bl	225b4 <__cxa_get_globals_fast>
   22512:	6807      	ldr	r7, [r0, #0]
   22514:	f04f 0900 	mov.w	r9, #0
   22518:	f8df b094 	ldr.w	fp, [pc, #148]	; 225b0 <__cxa_call_unexpected+0xec>
   2251c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   22520:	2b01      	cmp	r3, #1
   22522:	bf0c      	ite	eq
   22524:	683b      	ldreq	r3, [r7, #0]
   22526:	f107 0378 	addne.w	r3, r7, #120	; 0x78
   2252a:	9302      	str	r3, [sp, #8]
   2252c:	f028 0303 	bic.w	r3, r8, #3
   22530:	9301      	str	r3, [sp, #4]
   22532:	f107 0320 	add.w	r3, r7, #32
   22536:	ee08 3a10 	vmov	s16, r3
   2253a:	45ca      	cmp	sl, r9
   2253c:	dd27      	ble.n	2258e <__cxa_call_unexpected+0xca>
   2253e:	f8d5 8000 	ldr.w	r8, [r5]
   22542:	f1b8 0f00 	cmp.w	r8, #0
   22546:	d000      	beq.n	2254a <__cxa_call_unexpected+0x86>
   22548:	44a8      	add	r8, r5
   2254a:	ab02      	add	r3, sp, #8
   2254c:	2200      	movs	r2, #0
   2254e:	4641      	mov	r1, r8
   22550:	ee18 0a10 	vmov	r0, s16
   22554:	f7ff ff58 	bl	22408 <__cxa_type_match>
   22558:	b138      	cbz	r0, 2256a <__cxa_call_unexpected+0xa6>
   2255a:	f00e f98d 	bl	30878 <__cxa_rethrow>
   2255e:	f00e fa97 	bl	30a90 <__cxa_end_catch>
   22562:	f00e fa95 	bl	30a90 <__cxa_end_catch>
   22566:	f00e f9c8 	bl	308fa <__cxa_end_cleanup>
   2256a:	f8d8 3000 	ldr.w	r3, [r8]
   2256e:	aa03      	add	r2, sp, #12
   22570:	9003      	str	r0, [sp, #12]
   22572:	4659      	mov	r1, fp
   22574:	691b      	ldr	r3, [r3, #16]
   22576:	4640      	mov	r0, r8
   22578:	461f      	mov	r7, r3
   2257a:	2301      	movs	r3, #1
   2257c:	47b8      	blx	r7
   2257e:	9b01      	ldr	r3, [sp, #4]
   22580:	2800      	cmp	r0, #0
   22582:	bf18      	it	ne
   22584:	4606      	movne	r6, r0
   22586:	f109 0901 	add.w	r9, r9, #1
   2258a:	441d      	add	r5, r3
   2258c:	e7d5      	b.n	2253a <__cxa_call_unexpected+0x76>
   2258e:	b146      	cbz	r6, 225a2 <__cxa_call_unexpected+0xde>
   22590:	2004      	movs	r0, #4
   22592:	f00e f8f6 	bl	30782 <__cxa_allocate_exception>
   22596:	4b04      	ldr	r3, [pc, #16]	; (225a8 <__cxa_call_unexpected+0xe4>)
   22598:	4a04      	ldr	r2, [pc, #16]	; (225ac <__cxa_call_unexpected+0xe8>)
   2259a:	4905      	ldr	r1, [pc, #20]	; (225b0 <__cxa_call_unexpected+0xec>)
   2259c:	6003      	str	r3, [r0, #0]
   2259e:	f00e f951 	bl	30844 <__cxa_throw>
   225a2:	4620      	mov	r0, r4
   225a4:	f00e f90c 	bl	307c0 <_ZN10__cxxabiv111__terminateEPFvvE>
   225a8:	000332c8 	.word	0x000332c8
   225ac:	000307b1 	.word	0x000307b1
   225b0:	000332ac 	.word	0x000332ac

000225b4 <__cxa_get_globals_fast>:
   225b4:	4800      	ldr	r0, [pc, #0]	; (225b8 <__cxa_get_globals_fast+0x4>)
   225b6:	4770      	bx	lr
   225b8:	20026070 	.word	0x20026070

000225bc <__cxa_get_globals>:
   225bc:	4800      	ldr	r0, [pc, #0]	; (225c0 <__cxa_get_globals+0x4>)
   225be:	4770      	bx	lr
   225c0:	20026070 	.word	0x20026070

000225c4 <__gxx_personality_v0>:
   225c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   225c8:	2300      	movs	r3, #0
   225ca:	b091      	sub	sp, #68	; 0x44
   225cc:	4606      	mov	r6, r0
   225ce:	460c      	mov	r4, r1
   225d0:	9305      	str	r3, [sp, #20]
   225d2:	f000 0303 	and.w	r3, r0, #3
   225d6:	4617      	mov	r7, r2
   225d8:	2b01      	cmp	r3, #1
   225da:	d00e      	beq.n	225fa <__gxx_personality_v0+0x36>
   225dc:	2b02      	cmp	r3, #2
   225de:	d003      	beq.n	225e8 <__gxx_personality_v0+0x24>
   225e0:	2b00      	cmp	r3, #0
   225e2:	d13b      	bne.n	2265c <__gxx_personality_v0+0x98>
   225e4:	0701      	lsls	r1, r0, #28
   225e6:	d53b      	bpl.n	22660 <__gxx_personality_v0+0x9c>
   225e8:	4639      	mov	r1, r7
   225ea:	4620      	mov	r0, r4
   225ec:	f7ef fa44 	bl	11a78 <__gnu_unwind_frame>
   225f0:	b390      	cbz	r0, 22658 <__gxx_personality_v0+0x94>
   225f2:	2009      	movs	r0, #9
   225f4:	b011      	add	sp, #68	; 0x44
   225f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   225fa:	0702      	lsls	r2, r0, #28
   225fc:	d406      	bmi.n	2260c <__gxx_personality_v0+0x48>
   225fe:	6a0d      	ldr	r5, [r1, #32]
   22600:	4638      	mov	r0, r7
   22602:	210d      	movs	r1, #13
   22604:	f00e fb39 	bl	30c7a <_Unwind_GetGR>
   22608:	4285      	cmp	r5, r0
   2260a:	d02b      	beq.n	22664 <__gxx_personality_v0+0xa0>
   2260c:	2002      	movs	r0, #2
   2260e:	f006 0608 	and.w	r6, r6, #8
   22612:	2300      	movs	r3, #0
   22614:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
   22618:	220c      	movs	r2, #12
   2261a:	4306      	orrs	r6, r0
   2261c:	4619      	mov	r1, r3
   2261e:	4638      	mov	r0, r7
   22620:	f8cd a000 	str.w	sl, [sp]
   22624:	940a      	str	r4, [sp, #40]	; 0x28
   22626:	f7ee fc7d 	bl	10f24 <_Unwind_VRS_Set>
   2262a:	2e06      	cmp	r6, #6
   2262c:	d11c      	bne.n	22668 <__gxx_personality_v0+0xa4>
   2262e:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
   22632:	f1b8 0f00 	cmp.w	r8, #0
   22636:	e9d4 590a 	ldrd	r5, r9, [r4, #40]	; 0x28
   2263a:	bf0c      	ite	eq
   2263c:	f04f 0b01 	moveq.w	fp, #1
   22640:	f04f 0b03 	movne.w	fp, #3
   22644:	f016 0608 	ands.w	r6, r6, #8
   22648:	f000 810f 	beq.w	2286a <__gxx_personality_v0+0x2a6>
   2264c:	f1bb 0f01 	cmp.w	fp, #1
   22650:	f040 8104 	bne.w	2285c <__gxx_personality_v0+0x298>
   22654:	f00e f8c7 	bl	307e6 <_ZSt9terminatev>
   22658:	2008      	movs	r0, #8
   2265a:	e7cb      	b.n	225f4 <__gxx_personality_v0+0x30>
   2265c:	f00e fbad 	bl	30dba <abort>
   22660:	2001      	movs	r0, #1
   22662:	e7d4      	b.n	2260e <__gxx_personality_v0+0x4a>
   22664:	2006      	movs	r0, #6
   22666:	e7d2      	b.n	2260e <__gxx_personality_v0+0x4a>
   22668:	4638      	mov	r0, r7
   2266a:	f7ef fa21 	bl	11ab0 <_Unwind_GetLanguageSpecificData>
   2266e:	4681      	mov	r9, r0
   22670:	2800      	cmp	r0, #0
   22672:	d0b9      	beq.n	225e8 <__gxx_personality_v0+0x24>
   22674:	4652      	mov	r2, sl
   22676:	4601      	mov	r1, r0
   22678:	4638      	mov	r0, r7
   2267a:	f00e facd 	bl	30c18 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   2267e:	4639      	mov	r1, r7
   22680:	4605      	mov	r5, r0
   22682:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   22686:	f00e fa92 	bl	30bae <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   2268a:	210f      	movs	r1, #15
   2268c:	900c      	str	r0, [sp, #48]	; 0x30
   2268e:	4638      	mov	r0, r7
   22690:	f00e faf3 	bl	30c7a <_Unwind_GetGR>
   22694:	f020 0801 	bic.w	r8, r0, #1
   22698:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   2269c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2269e:	42ab      	cmp	r3, r5
   226a0:	f240 80c4 	bls.w	2282c <__gxx_personality_v0+0x268>
   226a4:	462a      	mov	r2, r5
   226a6:	ab06      	add	r3, sp, #24
   226a8:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
   226ac:	2000      	movs	r0, #0
   226ae:	f00e faa2 	bl	30bf6 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
   226b2:	ab07      	add	r3, sp, #28
   226b4:	4602      	mov	r2, r0
   226b6:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
   226ba:	2000      	movs	r0, #0
   226bc:	f00e fa9b 	bl	30bf6 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
   226c0:	ab08      	add	r3, sp, #32
   226c2:	4602      	mov	r2, r0
   226c4:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
   226c8:	2000      	movs	r0, #0
   226ca:	f00e fa94 	bl	30bf6 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
   226ce:	a909      	add	r1, sp, #36	; 0x24
   226d0:	f00e fa02 	bl	30ad8 <_ZL12read_uleb128PKhPm>
   226d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   226d6:	9a06      	ldr	r2, [sp, #24]
   226d8:	4605      	mov	r5, r0
   226da:	4413      	add	r3, r2
   226dc:	4543      	cmp	r3, r8
   226de:	d901      	bls.n	226e4 <__gxx_personality_v0+0x120>
   226e0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   226e2:	e7db      	b.n	2269c <__gxx_personality_v0+0xd8>
   226e4:	9a07      	ldr	r2, [sp, #28]
   226e6:	4413      	add	r3, r2
   226e8:	4543      	cmp	r3, r8
   226ea:	d9d7      	bls.n	2269c <__gxx_personality_v0+0xd8>
   226ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
   226f0:	f1b8 0f00 	cmp.w	r8, #0
   226f4:	d001      	beq.n	226fa <__gxx_personality_v0+0x136>
   226f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   226f8:	4498      	add	r8, r3
   226fa:	9d09      	ldr	r5, [sp, #36]	; 0x24
   226fc:	b115      	cbz	r5, 22704 <__gxx_personality_v0+0x140>
   226fe:	3d01      	subs	r5, #1
   22700:	980e      	ldr	r0, [sp, #56]	; 0x38
   22702:	4405      	add	r5, r0
   22704:	f1b8 0f00 	cmp.w	r8, #0
   22708:	f43f af6e 	beq.w	225e8 <__gxx_personality_v0+0x24>
   2270c:	2d00      	cmp	r5, #0
   2270e:	f000 80fa 	beq.w	22906 <__gxx_personality_v0+0x342>
   22712:	f016 0308 	ands.w	r3, r6, #8
   22716:	9302      	str	r3, [sp, #8]
   22718:	d034      	beq.n	22784 <__gxx_personality_v0+0x1c0>
   2271a:	2347      	movs	r3, #71	; 0x47
   2271c:	7023      	strb	r3, [r4, #0]
   2271e:	234e      	movs	r3, #78	; 0x4e
   22720:	7063      	strb	r3, [r4, #1]
   22722:	2355      	movs	r3, #85	; 0x55
   22724:	70a3      	strb	r3, [r4, #2]
   22726:	2343      	movs	r3, #67	; 0x43
   22728:	70e3      	strb	r3, [r4, #3]
   2272a:	2346      	movs	r3, #70	; 0x46
   2272c:	7123      	strb	r3, [r4, #4]
   2272e:	234f      	movs	r3, #79	; 0x4f
   22730:	7163      	strb	r3, [r4, #5]
   22732:	2352      	movs	r3, #82	; 0x52
   22734:	71a3      	strb	r3, [r4, #6]
   22736:	2300      	movs	r3, #0
   22738:	71e3      	strb	r3, [r4, #7]
   2273a:	f04f 0b00 	mov.w	fp, #0
   2273e:	a907      	add	r1, sp, #28
   22740:	4628      	mov	r0, r5
   22742:	f00e f9d7 	bl	30af4 <_ZL12read_sleb128PKhPl>
   22746:	a908      	add	r1, sp, #32
   22748:	9003      	str	r0, [sp, #12]
   2274a:	f00e f9d3 	bl	30af4 <_ZL12read_sleb128PKhPl>
   2274e:	9907      	ldr	r1, [sp, #28]
   22750:	2900      	cmp	r1, #0
   22752:	d068      	beq.n	22826 <__gxx_personality_v0+0x262>
   22754:	dd3a      	ble.n	227cc <__gxx_personality_v0+0x208>
   22756:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   2275a:	28ff      	cmp	r0, #255	; 0xff
   2275c:	d032      	beq.n	227c4 <__gxx_personality_v0+0x200>
   2275e:	f000 0307 	and.w	r3, r0, #7
   22762:	2b04      	cmp	r3, #4
   22764:	f63f af7a 	bhi.w	2265c <__gxx_personality_v0+0x98>
   22768:	a201      	add	r2, pc, #4	; (adr r2, 22770 <__gxx_personality_v0+0x1ac>)
   2276a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2276e:	bf00      	nop
   22770:	000227c9 	.word	0x000227c9
   22774:	0002265d 	.word	0x0002265d
   22778:	00022797 	.word	0x00022797
   2277c:	000227c9 	.word	0x000227c9
   22780:	000227c1 	.word	0x000227c1
   22784:	79e3      	ldrb	r3, [r4, #7]
   22786:	2b01      	cmp	r3, #1
   22788:	bf0c      	ite	eq
   2278a:	f854 3c20 	ldreq.w	r3, [r4, #-32]
   2278e:	f104 0358 	addne.w	r3, r4, #88	; 0x58
   22792:	9305      	str	r3, [sp, #20]
   22794:	e7d1      	b.n	2273a <__gxx_personality_v0+0x176>
   22796:	2502      	movs	r5, #2
   22798:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2279a:	ab09      	add	r3, sp, #36	; 0x24
   2279c:	fb05 2211 	mls	r2, r5, r1, r2
   227a0:	990c      	ldr	r1, [sp, #48]	; 0x30
   227a2:	f00e f9be 	bl	30b22 <_ZL28read_encoded_value_with_basehjPKhPj>
   227a6:	9909      	ldr	r1, [sp, #36]	; 0x24
   227a8:	b131      	cbz	r1, 227b8 <__gxx_personality_v0+0x1f4>
   227aa:	b37c      	cbz	r4, 2280c <__gxx_personality_v0+0x248>
   227ac:	ab05      	add	r3, sp, #20
   227ae:	2200      	movs	r2, #0
   227b0:	4620      	mov	r0, r4
   227b2:	f7ff fe29 	bl	22408 <__cxa_type_match>
   227b6:	b348      	cbz	r0, 2280c <__gxx_personality_v0+0x248>
   227b8:	9d07      	ldr	r5, [sp, #28]
   227ba:	f04f 0b03 	mov.w	fp, #3
   227be:	e039      	b.n	22834 <__gxx_personality_v0+0x270>
   227c0:	2508      	movs	r5, #8
   227c2:	e7e9      	b.n	22798 <__gxx_personality_v0+0x1d4>
   227c4:	2500      	movs	r5, #0
   227c6:	e7e7      	b.n	22798 <__gxx_personality_v0+0x1d4>
   227c8:	2504      	movs	r5, #4
   227ca:	e7e5      	b.n	22798 <__gxx_personality_v0+0x1d4>
   227cc:	f1c1 517f 	rsb	r1, r1, #1069547520	; 0x3fc00000
   227d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   227d2:	f501 117f 	add.w	r1, r1, #4177920	; 0x3fc000
   227d6:	f501 517f 	add.w	r1, r1, #16320	; 0x3fc0
   227da:	313f      	adds	r1, #63	; 0x3f
   227dc:	eb03 0581 	add.w	r5, r3, r1, lsl #2
   227e0:	b1dc      	cbz	r4, 2281a <__gxx_personality_v0+0x256>
   227e2:	9a02      	ldr	r2, [sp, #8]
   227e4:	b9ca      	cbnz	r2, 2281a <__gxx_personality_v0+0x256>
   227e6:	9b05      	ldr	r3, [sp, #20]
   227e8:	3d04      	subs	r5, #4
   227ea:	9309      	str	r3, [sp, #36]	; 0x24
   227ec:	f855 1f04 	ldr.w	r1, [r5, #4]!
   227f0:	b141      	cbz	r1, 22804 <__gxx_personality_v0+0x240>
   227f2:	ab09      	add	r3, sp, #36	; 0x24
   227f4:	2200      	movs	r2, #0
   227f6:	4429      	add	r1, r5
   227f8:	4620      	mov	r0, r4
   227fa:	f7ff fe05 	bl	22408 <__cxa_type_match>
   227fe:	2800      	cmp	r0, #0
   22800:	d0f4      	beq.n	227ec <__gxx_personality_v0+0x228>
   22802:	2101      	movs	r1, #1
   22804:	f081 0101 	eor.w	r1, r1, #1
   22808:	2900      	cmp	r1, #0
   2280a:	d1d5      	bne.n	227b8 <__gxx_personality_v0+0x1f4>
   2280c:	9d08      	ldr	r5, [sp, #32]
   2280e:	2d00      	cmp	r5, #0
   22810:	d075      	beq.n	228fe <__gxx_personality_v0+0x33a>
   22812:	9b03      	ldr	r3, [sp, #12]
   22814:	442b      	add	r3, r5
   22816:	461d      	mov	r5, r3
   22818:	e791      	b.n	2273e <__gxx_personality_v0+0x17a>
   2281a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
   2281e:	fab1 f181 	clz	r1, r1
   22822:	0949      	lsrs	r1, r1, #5
   22824:	e7f0      	b.n	22808 <__gxx_personality_v0+0x244>
   22826:	f04f 0b01 	mov.w	fp, #1
   2282a:	e7ef      	b.n	2280c <__gxx_personality_v0+0x248>
   2282c:	2500      	movs	r5, #0
   2282e:	f04f 0b01 	mov.w	fp, #1
   22832:	46a8      	mov	r8, r5
   22834:	07f3      	lsls	r3, r6, #31
   22836:	f57f af05 	bpl.w	22644 <__gxx_personality_v0+0x80>
   2283a:	f1bb 0f02 	cmp.w	fp, #2
   2283e:	f43f aed3 	beq.w	225e8 <__gxx_personality_v0+0x24>
   22842:	9e05      	ldr	r6, [sp, #20]
   22844:	210d      	movs	r1, #13
   22846:	4638      	mov	r0, r7
   22848:	f00e fa17 	bl	30c7a <_Unwind_GetGR>
   2284c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
   22850:	e9c4 0608 	strd	r0, r6, [r4, #32]
   22854:	e9c4 590a 	strd	r5, r9, [r4, #40]	; 0x28
   22858:	2006      	movs	r0, #6
   2285a:	e6cb      	b.n	225f4 <__gxx_personality_v0+0x30>
   2285c:	2d00      	cmp	r5, #0
   2285e:	da25      	bge.n	228ac <__gxx_personality_v0+0x2e8>
   22860:	f00d ffca 	bl	307f8 <_ZSt10unexpectedv>
   22864:	f00e f8eb 	bl	30a3e <__cxa_begin_catch>
   22868:	e6f4      	b.n	22654 <__gxx_personality_v0+0x90>
   2286a:	f1bb 0f01 	cmp.w	fp, #1
   2286e:	d102      	bne.n	22876 <__gxx_personality_v0+0x2b2>
   22870:	4620      	mov	r0, r4
   22872:	f00e f8b8 	bl	309e6 <__cxa_call_terminate>
   22876:	2d00      	cmp	r5, #0
   22878:	da18      	bge.n	228ac <__gxx_personality_v0+0x2e8>
   2287a:	4652      	mov	r2, sl
   2287c:	4649      	mov	r1, r9
   2287e:	4638      	mov	r0, r7
   22880:	f00e f9ca 	bl	30c18 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   22884:	4639      	mov	r1, r7
   22886:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   2288a:	f00e f990 	bl	30bae <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   2288e:	43eb      	mvns	r3, r5
   22890:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   22892:	900c      	str	r0, [sp, #48]	; 0x30
   22894:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   22898:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
   2289c:	b10a      	cbz	r2, 228a2 <__gxx_personality_v0+0x2de>
   2289e:	3601      	adds	r6, #1
   228a0:	e7fa      	b.n	22898 <__gxx_personality_v0+0x2d4>
   228a2:	2204      	movs	r2, #4
   228a4:	e9c4 600a 	strd	r6, r0, [r4, #40]	; 0x28
   228a8:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
   228ac:	2300      	movs	r3, #0
   228ae:	ae09      	add	r6, sp, #36	; 0x24
   228b0:	4638      	mov	r0, r7
   228b2:	9409      	str	r4, [sp, #36]	; 0x24
   228b4:	461a      	mov	r2, r3
   228b6:	4619      	mov	r1, r3
   228b8:	9600      	str	r6, [sp, #0]
   228ba:	f7ee fb33 	bl	10f24 <_Unwind_VRS_Set>
   228be:	2300      	movs	r3, #0
   228c0:	2201      	movs	r2, #1
   228c2:	4638      	mov	r0, r7
   228c4:	4619      	mov	r1, r3
   228c6:	9600      	str	r6, [sp, #0]
   228c8:	9509      	str	r5, [sp, #36]	; 0x24
   228ca:	f7ee fb2b 	bl	10f24 <_Unwind_VRS_Set>
   228ce:	210f      	movs	r1, #15
   228d0:	4638      	mov	r0, r7
   228d2:	f00e f9d2 	bl	30c7a <_Unwind_GetGR>
   228d6:	f000 0001 	and.w	r0, r0, #1
   228da:	2300      	movs	r3, #0
   228dc:	220f      	movs	r2, #15
   228de:	ea40 0008 	orr.w	r0, r0, r8
   228e2:	9600      	str	r6, [sp, #0]
   228e4:	4619      	mov	r1, r3
   228e6:	9009      	str	r0, [sp, #36]	; 0x24
   228e8:	4638      	mov	r0, r7
   228ea:	f7ee fb1b 	bl	10f24 <_Unwind_VRS_Set>
   228ee:	f1bb 0f02 	cmp.w	fp, #2
   228f2:	d102      	bne.n	228fa <__gxx_personality_v0+0x336>
   228f4:	4620      	mov	r0, r4
   228f6:	f00e f823 	bl	30940 <__cxa_begin_cleanup>
   228fa:	2007      	movs	r0, #7
   228fc:	e67a      	b.n	225f4 <__gxx_personality_v0+0x30>
   228fe:	f1bb 0f00 	cmp.w	fp, #0
   22902:	f43f ae71 	beq.w	225e8 <__gxx_personality_v0+0x24>
   22906:	f04f 0b02 	mov.w	fp, #2
   2290a:	e793      	b.n	22834 <__gxx_personality_v0+0x270>

0002290c <_ZSt15get_new_handlerv>:
   2290c:	4b01      	ldr	r3, [pc, #4]	; (22914 <_ZSt15get_new_handlerv+0x8>)
   2290e:	e8d3 0faf 	lda	r0, [r3]
   22912:	4770      	bx	lr
   22914:	2002607c 	.word	0x2002607c

00022918 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
   22918:	4b32      	ldr	r3, [pc, #200]	; (229e4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>)
   2291a:	781a      	ldrb	r2, [r3, #0]
   2291c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2291e:	4c32      	ldr	r4, [pc, #200]	; (229e8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xd0>)
   22920:	b132      	cbz	r2, 22930 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x18>
   22922:	6823      	ldr	r3, [r4, #0]
   22924:	4831      	ldr	r0, [pc, #196]	; (229ec <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xd4>)
   22926:	68d9      	ldr	r1, [r3, #12]
   22928:	f002 fcd4 	bl	252d4 <fputs>
   2292c:	f00e fa45 	bl	30dba <abort>
   22930:	2201      	movs	r2, #1
   22932:	701a      	strb	r2, [r3, #0]
   22934:	f00e f9ad 	bl	30c92 <__cxa_current_exception_type>
   22938:	2800      	cmp	r0, #0
   2293a:	d038      	beq.n	229ae <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x96>
   2293c:	6845      	ldr	r5, [r0, #4]
   2293e:	2200      	movs	r2, #0
   22940:	782b      	ldrb	r3, [r5, #0]
   22942:	4611      	mov	r1, r2
   22944:	2b2a      	cmp	r3, #42	; 0x2a
   22946:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2294a:	bf08      	it	eq
   2294c:	3501      	addeq	r5, #1
   2294e:	9301      	str	r3, [sp, #4]
   22950:	ab01      	add	r3, sp, #4
   22952:	4628      	mov	r0, r5
   22954:	f7ed fd48 	bl	103e8 <__cxa_demangle>
   22958:	6823      	ldr	r3, [r4, #0]
   2295a:	4606      	mov	r6, r0
   2295c:	4824      	ldr	r0, [pc, #144]	; (229f0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xd8>)
   2295e:	68d9      	ldr	r1, [r3, #12]
   22960:	f002 fcb8 	bl	252d4 <fputs>
   22964:	9b01      	ldr	r3, [sp, #4]
   22966:	b9f3      	cbnz	r3, 229a6 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8e>
   22968:	6823      	ldr	r3, [r4, #0]
   2296a:	4630      	mov	r0, r6
   2296c:	68d9      	ldr	r1, [r3, #12]
   2296e:	f002 fcb1 	bl	252d4 <fputs>
   22972:	6823      	ldr	r3, [r4, #0]
   22974:	481f      	ldr	r0, [pc, #124]	; (229f4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xdc>)
   22976:	68d9      	ldr	r1, [r3, #12]
   22978:	f002 fcac 	bl	252d4 <fputs>
   2297c:	9b01      	ldr	r3, [sp, #4]
   2297e:	b913      	cbnz	r3, 22986 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6e>
   22980:	4630      	mov	r0, r6
   22982:	f002 fe01 	bl	25588 <free>
   22986:	f00d ff77 	bl	30878 <__cxa_rethrow>
   2298a:	2901      	cmp	r1, #1
   2298c:	d120      	bne.n	229d0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xb8>
   2298e:	f00e f856 	bl	30a3e <__cxa_begin_catch>
   22992:	6803      	ldr	r3, [r0, #0]
   22994:	689b      	ldr	r3, [r3, #8]
   22996:	4798      	blx	r3
   22998:	6823      	ldr	r3, [r4, #0]
   2299a:	4605      	mov	r5, r0
   2299c:	4816      	ldr	r0, [pc, #88]	; (229f8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xe0>)
   2299e:	68d9      	ldr	r1, [r3, #12]
   229a0:	f002 fc98 	bl	252d4 <fputs>
   229a4:	e007      	b.n	229b6 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x9e>
   229a6:	6823      	ldr	r3, [r4, #0]
   229a8:	4628      	mov	r0, r5
   229aa:	68d9      	ldr	r1, [r3, #12]
   229ac:	e7df      	b.n	2296e <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x56>
   229ae:	6823      	ldr	r3, [r4, #0]
   229b0:	4812      	ldr	r0, [pc, #72]	; (229fc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xe4>)
   229b2:	68d9      	ldr	r1, [r3, #12]
   229b4:	e7b8      	b.n	22928 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10>
   229b6:	6823      	ldr	r3, [r4, #0]
   229b8:	4628      	mov	r0, r5
   229ba:	68d9      	ldr	r1, [r3, #12]
   229bc:	f002 fc8a 	bl	252d4 <fputs>
   229c0:	6823      	ldr	r3, [r4, #0]
   229c2:	200a      	movs	r0, #10
   229c4:	68d9      	ldr	r1, [r3, #12]
   229c6:	f002 fc4d 	bl	25264 <fputc>
   229ca:	f00e f861 	bl	30a90 <__cxa_end_catch>
   229ce:	e7ad      	b.n	2292c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x14>
   229d0:	f00e f835 	bl	30a3e <__cxa_begin_catch>
   229d4:	f00e f85c 	bl	30a90 <__cxa_end_catch>
   229d8:	e7a8      	b.n	2292c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x14>
   229da:	f00e f859 	bl	30a90 <__cxa_end_catch>
   229de:	f00d ff8c 	bl	308fa <__cxa_end_cleanup>
   229e2:	bf00      	nop
   229e4:	20027128 	.word	0x20027128
   229e8:	20020058 	.word	0x20020058
   229ec:	00036e59 	.word	0x00036e59
   229f0:	00036e77 	.word	0x00036e77
   229f4:	00036d07 	.word	0x00036d07
   229f8:	00036ed6 	.word	0x00036ed6
   229fc:	00036ea8 	.word	0x00036ea8

00022a00 <frexp>:
   22a00:	b580      	push	{r7, lr}
   22a02:	b08e      	sub	sp, #56	; 0x38
   22a04:	af00      	add	r7, sp, #0
   22a06:	e9c7 0102 	strd	r0, r1, [r7, #8]
   22a0a:	607a      	str	r2, [r7, #4]
   22a0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   22a10:	e9c7 2308 	strd	r2, r3, [r7, #32]
   22a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   22a16:	637b      	str	r3, [r7, #52]	; 0x34
   22a18:	6a3b      	ldr	r3, [r7, #32]
   22a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   22a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   22a1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   22a22:	633b      	str	r3, [r7, #48]	; 0x30
   22a24:	687b      	ldr	r3, [r7, #4]
   22a26:	2200      	movs	r2, #0
   22a28:	601a      	str	r2, [r3, #0]
   22a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   22a2c:	4a23      	ldr	r2, [pc, #140]	; (22abc <frexp+0xbc>)
   22a2e:	4293      	cmp	r3, r2
   22a30:	dc04      	bgt.n	22a3c <frexp+0x3c>
   22a32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   22a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   22a36:	4313      	orrs	r3, r2
   22a38:	2b00      	cmp	r3, #0
   22a3a:	d102      	bne.n	22a42 <frexp+0x42>
   22a3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   22a40:	e037      	b.n	22ab2 <frexp+0xb2>
   22a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   22a44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   22a48:	da18      	bge.n	22a7c <frexp+0x7c>
   22a4a:	f04f 0200 	mov.w	r2, #0
   22a4e:	4b1c      	ldr	r3, [pc, #112]	; (22ac0 <frexp+0xc0>)
   22a50:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   22a54:	f7ed fd2a 	bl	104ac <__aeabi_dmul>
   22a58:	4602      	mov	r2, r0
   22a5a:	460b      	mov	r3, r1
   22a5c:	e9c7 2302 	strd	r2, r3, [r7, #8]
   22a60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   22a64:	e9c7 2306 	strd	r2, r3, [r7, #24]
   22a68:	69fb      	ldr	r3, [r7, #28]
   22a6a:	637b      	str	r3, [r7, #52]	; 0x34
   22a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   22a6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   22a72:	633b      	str	r3, [r7, #48]	; 0x30
   22a74:	687b      	ldr	r3, [r7, #4]
   22a76:	f06f 0235 	mvn.w	r2, #53	; 0x35
   22a7a:	601a      	str	r2, [r3, #0]
   22a7c:	687b      	ldr	r3, [r7, #4]
   22a7e:	681a      	ldr	r2, [r3, #0]
   22a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   22a82:	151b      	asrs	r3, r3, #20
   22a84:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   22a88:	441a      	add	r2, r3
   22a8a:	687b      	ldr	r3, [r7, #4]
   22a8c:	601a      	str	r2, [r3, #0]
   22a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   22a90:	4a0c      	ldr	r2, [pc, #48]	; (22ac4 <frexp+0xc4>)
   22a92:	401a      	ands	r2, r3
   22a94:	4b0c      	ldr	r3, [pc, #48]	; (22ac8 <frexp+0xc8>)
   22a96:	4313      	orrs	r3, r2
   22a98:	637b      	str	r3, [r7, #52]	; 0x34
   22a9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   22a9e:	e9c7 2304 	strd	r2, r3, [r7, #16]
   22aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   22aa4:	617b      	str	r3, [r7, #20]
   22aa6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   22aaa:	e9c7 2302 	strd	r2, r3, [r7, #8]
   22aae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   22ab2:	4610      	mov	r0, r2
   22ab4:	4619      	mov	r1, r3
   22ab6:	3738      	adds	r7, #56	; 0x38
   22ab8:	46bd      	mov	sp, r7
   22aba:	bd80      	pop	{r7, pc}
   22abc:	7fefffff 	.word	0x7fefffff
   22ac0:	43500000 	.word	0x43500000
   22ac4:	800fffff 	.word	0x800fffff
   22ac8:	3fe00000 	.word	0x3fe00000

00022acc <round>:
   22acc:	b580      	push	{r7, lr}
   22ace:	b08c      	sub	sp, #48	; 0x30
   22ad0:	af00      	add	r7, sp, #0
   22ad2:	e9c7 0100 	strd	r0, r1, [r7]
   22ad6:	e9d7 2300 	ldrd	r2, r3, [r7]
   22ada:	e9c7 2304 	strd	r2, r3, [r7, #16]
   22ade:	697b      	ldr	r3, [r7, #20]
   22ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
   22ae2:	693b      	ldr	r3, [r7, #16]
   22ae4:	62bb      	str	r3, [r7, #40]	; 0x28
   22ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   22ae8:	151b      	asrs	r3, r3, #20
   22aea:	f3c3 030a 	ubfx	r3, r3, #0, #11
   22aee:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   22af2:	627b      	str	r3, [r7, #36]	; 0x24
   22af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   22af6:	2b13      	cmp	r3, #19
   22af8:	dc31      	bgt.n	22b5e <round+0x92>
   22afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   22afc:	2b00      	cmp	r3, #0
   22afe:	da0e      	bge.n	22b1e <round+0x52>
   22b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   22b02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   22b06:	62fb      	str	r3, [r7, #44]	; 0x2c
   22b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   22b0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   22b0e:	d103      	bne.n	22b18 <round+0x4c>
   22b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   22b12:	4b37      	ldr	r3, [pc, #220]	; (22bf0 <round+0x124>)
   22b14:	4313      	orrs	r3, r2
   22b16:	62fb      	str	r3, [r7, #44]	; 0x2c
   22b18:	2300      	movs	r3, #0
   22b1a:	62bb      	str	r3, [r7, #40]	; 0x28
   22b1c:	e059      	b.n	22bd2 <round+0x106>
   22b1e:	4a35      	ldr	r2, [pc, #212]	; (22bf4 <round+0x128>)
   22b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   22b22:	fa42 f303 	asr.w	r3, r2, r3
   22b26:	61bb      	str	r3, [r7, #24]
   22b28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   22b2a:	69bb      	ldr	r3, [r7, #24]
   22b2c:	4013      	ands	r3, r2
   22b2e:	2b00      	cmp	r3, #0
   22b30:	d105      	bne.n	22b3e <round+0x72>
   22b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
   22b34:	2b00      	cmp	r3, #0
   22b36:	d102      	bne.n	22b3e <round+0x72>
   22b38:	e9d7 2300 	ldrd	r2, r3, [r7]
   22b3c:	e053      	b.n	22be6 <round+0x11a>
   22b3e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   22b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   22b44:	fa42 f303 	asr.w	r3, r2, r3
   22b48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   22b4a:	4413      	add	r3, r2
   22b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   22b4e:	69bb      	ldr	r3, [r7, #24]
   22b50:	43da      	mvns	r2, r3
   22b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   22b54:	4013      	ands	r3, r2
   22b56:	62fb      	str	r3, [r7, #44]	; 0x2c
   22b58:	2300      	movs	r3, #0
   22b5a:	62bb      	str	r3, [r7, #40]	; 0x28
   22b5c:	e039      	b.n	22bd2 <round+0x106>
   22b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   22b60:	2b33      	cmp	r3, #51	; 0x33
   22b62:	dd0f      	ble.n	22b84 <round+0xb8>
   22b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   22b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   22b6a:	d108      	bne.n	22b7e <round+0xb2>
   22b6c:	e9d7 0100 	ldrd	r0, r1, [r7]
   22b70:	4602      	mov	r2, r0
   22b72:	460b      	mov	r3, r1
   22b74:	f7e9 fb6a 	bl	c24c <__adddf3>
   22b78:	4602      	mov	r2, r0
   22b7a:	460b      	mov	r3, r1
   22b7c:	e033      	b.n	22be6 <round+0x11a>
   22b7e:	e9d7 2300 	ldrd	r2, r3, [r7]
   22b82:	e030      	b.n	22be6 <round+0x11a>
   22b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   22b86:	3b14      	subs	r3, #20
   22b88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22b8c:	fa22 f303 	lsr.w	r3, r2, r3
   22b90:	623b      	str	r3, [r7, #32]
   22b92:	6aba      	ldr	r2, [r7, #40]	; 0x28
   22b94:	6a3b      	ldr	r3, [r7, #32]
   22b96:	4013      	ands	r3, r2
   22b98:	2b00      	cmp	r3, #0
   22b9a:	d102      	bne.n	22ba2 <round+0xd6>
   22b9c:	e9d7 2300 	ldrd	r2, r3, [r7]
   22ba0:	e021      	b.n	22be6 <round+0x11a>
   22ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   22ba4:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
   22ba8:	2201      	movs	r2, #1
   22baa:	fa02 f303 	lsl.w	r3, r2, r3
   22bae:	461a      	mov	r2, r3
   22bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   22bb2:	4413      	add	r3, r2
   22bb4:	61fb      	str	r3, [r7, #28]
   22bb6:	69fa      	ldr	r2, [r7, #28]
   22bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   22bba:	429a      	cmp	r2, r3
   22bbc:	d202      	bcs.n	22bc4 <round+0xf8>
   22bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   22bc0:	3301      	adds	r3, #1
   22bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   22bc4:	69fb      	ldr	r3, [r7, #28]
   22bc6:	62bb      	str	r3, [r7, #40]	; 0x28
   22bc8:	6a3b      	ldr	r3, [r7, #32]
   22bca:	43db      	mvns	r3, r3
   22bcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   22bce:	4013      	ands	r3, r2
   22bd0:	62bb      	str	r3, [r7, #40]	; 0x28
   22bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   22bd4:	60fb      	str	r3, [r7, #12]
   22bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   22bd8:	60bb      	str	r3, [r7, #8]
   22bda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   22bde:	e9c7 2300 	strd	r2, r3, [r7]
   22be2:	e9d7 2300 	ldrd	r2, r3, [r7]
   22be6:	4610      	mov	r0, r2
   22be8:	4619      	mov	r1, r3
   22bea:	3730      	adds	r7, #48	; 0x30
   22bec:	46bd      	mov	sp, r7
   22bee:	bd80      	pop	{r7, pc}
   22bf0:	3ff00000 	.word	0x3ff00000
   22bf4:	000fffff 	.word	0x000fffff

00022bf8 <cosf>:
   22bf8:	b580      	push	{r7, lr}
   22bfa:	b088      	sub	sp, #32
   22bfc:	af00      	add	r7, sp, #0
   22bfe:	6078      	str	r0, [r7, #4]
   22c00:	f04f 0300 	mov.w	r3, #0
   22c04:	61fb      	str	r3, [r7, #28]
   22c06:	687b      	ldr	r3, [r7, #4]
   22c08:	60bb      	str	r3, [r7, #8]
   22c0a:	68bb      	ldr	r3, [r7, #8]
   22c0c:	61bb      	str	r3, [r7, #24]
   22c0e:	69bb      	ldr	r3, [r7, #24]
   22c10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   22c14:	61bb      	str	r3, [r7, #24]
   22c16:	69bb      	ldr	r3, [r7, #24]
   22c18:	4a26      	ldr	r2, [pc, #152]	; (22cb4 <cosf+0xbc>)
   22c1a:	4293      	cmp	r3, r2
   22c1c:	dc05      	bgt.n	22c2a <cosf+0x32>
   22c1e:	69f9      	ldr	r1, [r7, #28]
   22c20:	6878      	ldr	r0, [r7, #4]
   22c22:	f001 f8bb 	bl	23d9c <__kernel_cosf>
   22c26:	4603      	mov	r3, r0
   22c28:	e040      	b.n	22cac <cosf+0xb4>
   22c2a:	69bb      	ldr	r3, [r7, #24]
   22c2c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   22c30:	db06      	blt.n	22c40 <cosf+0x48>
   22c32:	edd7 7a01 	vldr	s15, [r7, #4]
   22c36:	ee77 7ae7 	vsub.f32	s15, s15, s15
   22c3a:	ee17 3a90 	vmov	r3, s15
   22c3e:	e035      	b.n	22cac <cosf+0xb4>
   22c40:	f107 030c 	add.w	r3, r7, #12
   22c44:	4619      	mov	r1, r3
   22c46:	6878      	ldr	r0, [r7, #4]
   22c48:	f000 fe54 	bl	238f4 <__ieee754_rem_pio2f>
   22c4c:	6178      	str	r0, [r7, #20]
   22c4e:	697b      	ldr	r3, [r7, #20]
   22c50:	f003 0303 	and.w	r3, r3, #3
   22c54:	2b02      	cmp	r3, #2
   22c56:	d018      	beq.n	22c8a <cosf+0x92>
   22c58:	2b02      	cmp	r3, #2
   22c5a:	dc20      	bgt.n	22c9e <cosf+0xa6>
   22c5c:	2b00      	cmp	r3, #0
   22c5e:	d002      	beq.n	22c66 <cosf+0x6e>
   22c60:	2b01      	cmp	r3, #1
   22c62:	d008      	beq.n	22c76 <cosf+0x7e>
   22c64:	e01b      	b.n	22c9e <cosf+0xa6>
   22c66:	68fb      	ldr	r3, [r7, #12]
   22c68:	693a      	ldr	r2, [r7, #16]
   22c6a:	4611      	mov	r1, r2
   22c6c:	4618      	mov	r0, r3
   22c6e:	f001 f895 	bl	23d9c <__kernel_cosf>
   22c72:	4603      	mov	r3, r0
   22c74:	e01a      	b.n	22cac <cosf+0xb4>
   22c76:	68fb      	ldr	r3, [r7, #12]
   22c78:	6939      	ldr	r1, [r7, #16]
   22c7a:	2201      	movs	r2, #1
   22c7c:	4618      	mov	r0, r3
   22c7e:	f001 ff1b 	bl	24ab8 <__kernel_sinf>
   22c82:	4603      	mov	r3, r0
   22c84:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   22c88:	e010      	b.n	22cac <cosf+0xb4>
   22c8a:	68fb      	ldr	r3, [r7, #12]
   22c8c:	693a      	ldr	r2, [r7, #16]
   22c8e:	4611      	mov	r1, r2
   22c90:	4618      	mov	r0, r3
   22c92:	f001 f883 	bl	23d9c <__kernel_cosf>
   22c96:	4603      	mov	r3, r0
   22c98:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   22c9c:	e006      	b.n	22cac <cosf+0xb4>
   22c9e:	68fb      	ldr	r3, [r7, #12]
   22ca0:	6939      	ldr	r1, [r7, #16]
   22ca2:	2201      	movs	r2, #1
   22ca4:	4618      	mov	r0, r3
   22ca6:	f001 ff07 	bl	24ab8 <__kernel_sinf>
   22caa:	4603      	mov	r3, r0
   22cac:	4618      	mov	r0, r3
   22cae:	3720      	adds	r7, #32
   22cb0:	46bd      	mov	sp, r7
   22cb2:	bd80      	pop	{r7, pc}
   22cb4:	3f490fd8 	.word	0x3f490fd8

00022cb8 <sinf>:
   22cb8:	b580      	push	{r7, lr}
   22cba:	b088      	sub	sp, #32
   22cbc:	af00      	add	r7, sp, #0
   22cbe:	6078      	str	r0, [r7, #4]
   22cc0:	f04f 0300 	mov.w	r3, #0
   22cc4:	61fb      	str	r3, [r7, #28]
   22cc6:	687b      	ldr	r3, [r7, #4]
   22cc8:	60bb      	str	r3, [r7, #8]
   22cca:	68bb      	ldr	r3, [r7, #8]
   22ccc:	61bb      	str	r3, [r7, #24]
   22cce:	69bb      	ldr	r3, [r7, #24]
   22cd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   22cd4:	61bb      	str	r3, [r7, #24]
   22cd6:	69bb      	ldr	r3, [r7, #24]
   22cd8:	4a27      	ldr	r2, [pc, #156]	; (22d78 <sinf+0xc0>)
   22cda:	4293      	cmp	r3, r2
   22cdc:	dc06      	bgt.n	22cec <sinf+0x34>
   22cde:	2200      	movs	r2, #0
   22ce0:	69f9      	ldr	r1, [r7, #28]
   22ce2:	6878      	ldr	r0, [r7, #4]
   22ce4:	f001 fee8 	bl	24ab8 <__kernel_sinf>
   22ce8:	4603      	mov	r3, r0
   22cea:	e040      	b.n	22d6e <sinf+0xb6>
   22cec:	69bb      	ldr	r3, [r7, #24]
   22cee:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   22cf2:	db06      	blt.n	22d02 <sinf+0x4a>
   22cf4:	edd7 7a01 	vldr	s15, [r7, #4]
   22cf8:	ee77 7ae7 	vsub.f32	s15, s15, s15
   22cfc:	ee17 3a90 	vmov	r3, s15
   22d00:	e035      	b.n	22d6e <sinf+0xb6>
   22d02:	f107 030c 	add.w	r3, r7, #12
   22d06:	4619      	mov	r1, r3
   22d08:	6878      	ldr	r0, [r7, #4]
   22d0a:	f000 fdf3 	bl	238f4 <__ieee754_rem_pio2f>
   22d0e:	6178      	str	r0, [r7, #20]
   22d10:	697b      	ldr	r3, [r7, #20]
   22d12:	f003 0303 	and.w	r3, r3, #3
   22d16:	2b02      	cmp	r3, #2
   22d18:	d016      	beq.n	22d48 <sinf+0x90>
   22d1a:	2b02      	cmp	r3, #2
   22d1c:	dc1e      	bgt.n	22d5c <sinf+0xa4>
   22d1e:	2b00      	cmp	r3, #0
   22d20:	d002      	beq.n	22d28 <sinf+0x70>
   22d22:	2b01      	cmp	r3, #1
   22d24:	d008      	beq.n	22d38 <sinf+0x80>
   22d26:	e019      	b.n	22d5c <sinf+0xa4>
   22d28:	68fb      	ldr	r3, [r7, #12]
   22d2a:	6939      	ldr	r1, [r7, #16]
   22d2c:	2201      	movs	r2, #1
   22d2e:	4618      	mov	r0, r3
   22d30:	f001 fec2 	bl	24ab8 <__kernel_sinf>
   22d34:	4603      	mov	r3, r0
   22d36:	e01a      	b.n	22d6e <sinf+0xb6>
   22d38:	68fb      	ldr	r3, [r7, #12]
   22d3a:	693a      	ldr	r2, [r7, #16]
   22d3c:	4611      	mov	r1, r2
   22d3e:	4618      	mov	r0, r3
   22d40:	f001 f82c 	bl	23d9c <__kernel_cosf>
   22d44:	4603      	mov	r3, r0
   22d46:	e012      	b.n	22d6e <sinf+0xb6>
   22d48:	68fb      	ldr	r3, [r7, #12]
   22d4a:	6939      	ldr	r1, [r7, #16]
   22d4c:	2201      	movs	r2, #1
   22d4e:	4618      	mov	r0, r3
   22d50:	f001 feb2 	bl	24ab8 <__kernel_sinf>
   22d54:	4603      	mov	r3, r0
   22d56:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   22d5a:	e008      	b.n	22d6e <sinf+0xb6>
   22d5c:	68fb      	ldr	r3, [r7, #12]
   22d5e:	693a      	ldr	r2, [r7, #16]
   22d60:	4611      	mov	r1, r2
   22d62:	4618      	mov	r0, r3
   22d64:	f001 f81a 	bl	23d9c <__kernel_cosf>
   22d68:	4603      	mov	r3, r0
   22d6a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   22d6e:	4618      	mov	r0, r3
   22d70:	3720      	adds	r7, #32
   22d72:	46bd      	mov	sp, r7
   22d74:	bd80      	pop	{r7, pc}
   22d76:	bf00      	nop
   22d78:	3f490fd8 	.word	0x3f490fd8

00022d7c <tanhf>:
   22d7c:	b580      	push	{r7, lr}
   22d7e:	ed2d 8b02 	vpush	{d8}
   22d82:	b088      	sub	sp, #32
   22d84:	af00      	add	r7, sp, #0
   22d86:	6078      	str	r0, [r7, #4]
   22d88:	687b      	ldr	r3, [r7, #4]
   22d8a:	60fb      	str	r3, [r7, #12]
   22d8c:	68fb      	ldr	r3, [r7, #12]
   22d8e:	61bb      	str	r3, [r7, #24]
   22d90:	69bb      	ldr	r3, [r7, #24]
   22d92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   22d96:	617b      	str	r3, [r7, #20]
   22d98:	697b      	ldr	r3, [r7, #20]
   22d9a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   22d9e:	db18      	blt.n	22dd2 <tanhf+0x56>
   22da0:	69bb      	ldr	r3, [r7, #24]
   22da2:	2b00      	cmp	r3, #0
   22da4:	db0a      	blt.n	22dbc <tanhf+0x40>
   22da6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   22daa:	ed97 7a01 	vldr	s14, [r7, #4]
   22dae:	eec6 7a87 	vdiv.f32	s15, s13, s14
   22db2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   22db6:	ee77 7a87 	vadd.f32	s15, s15, s14
   22dba:	e071      	b.n	22ea0 <tanhf+0x124>
   22dbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   22dc0:	ed97 7a01 	vldr	s14, [r7, #4]
   22dc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
   22dc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   22dcc:	ee77 7ac7 	vsub.f32	s15, s15, s14
   22dd0:	e066      	b.n	22ea0 <tanhf+0x124>
   22dd2:	697b      	ldr	r3, [r7, #20]
   22dd4:	4a36      	ldr	r2, [pc, #216]	; (22eb0 <tanhf+0x134>)
   22dd6:	4293      	cmp	r3, r2
   22dd8:	dc50      	bgt.n	22e7c <tanhf+0x100>
   22dda:	697b      	ldr	r3, [r7, #20]
   22ddc:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
   22de0:	da0a      	bge.n	22df8 <tanhf+0x7c>
   22de2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   22de6:	edd7 7a01 	vldr	s15, [r7, #4]
   22dea:	ee37 7a27 	vadd.f32	s14, s14, s15
   22dee:	edd7 7a01 	vldr	s15, [r7, #4]
   22df2:	ee67 7a27 	vmul.f32	s15, s14, s15
   22df6:	e053      	b.n	22ea0 <tanhf+0x124>
   22df8:	697b      	ldr	r3, [r7, #20]
   22dfa:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   22dfe:	db1e      	blt.n	22e3e <tanhf+0xc2>
   22e00:	6878      	ldr	r0, [r7, #4]
   22e02:	f00d ff7d 	bl	30d00 <fabsf>
   22e06:	ee07 0a10 	vmov	s14, r0
   22e0a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   22e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
   22e12:	ee17 0a90 	vmov	r0, s15
   22e16:	f001 feff 	bl	24c18 <expm1f>
   22e1a:	6138      	str	r0, [r7, #16]
   22e1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   22e20:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
   22e24:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   22e28:	edd7 7a04 	vldr	s15, [r7, #16]
   22e2c:	ee37 7a27 	vadd.f32	s14, s14, s15
   22e30:	eec6 7a07 	vdiv.f32	s15, s12, s14
   22e34:	ee76 7ae7 	vsub.f32	s15, s13, s15
   22e38:	edc7 7a07 	vstr	s15, [r7, #28]
   22e3c:	e026      	b.n	22e8c <tanhf+0x110>
   22e3e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   22e42:	eeb1 8a67 	vneg.f32	s16, s15
   22e46:	6878      	ldr	r0, [r7, #4]
   22e48:	f00d ff5a 	bl	30d00 <fabsf>
   22e4c:	ee07 0a90 	vmov	s15, r0
   22e50:	ee68 7a27 	vmul.f32	s15, s16, s15
   22e54:	ee17 0a90 	vmov	r0, s15
   22e58:	f001 fede 	bl	24c18 <expm1f>
   22e5c:	6138      	str	r0, [r7, #16]
   22e5e:	edd7 7a04 	vldr	s15, [r7, #16]
   22e62:	eef1 6a67 	vneg.f32	s13, s15
   22e66:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   22e6a:	edd7 7a04 	vldr	s15, [r7, #16]
   22e6e:	ee37 7a27 	vadd.f32	s14, s14, s15
   22e72:	eec6 7a87 	vdiv.f32	s15, s13, s14
   22e76:	edc7 7a07 	vstr	s15, [r7, #28]
   22e7a:	e007      	b.n	22e8c <tanhf+0x110>
   22e7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   22e80:	eddf 7a0c 	vldr	s15, [pc, #48]	; 22eb4 <tanhf+0x138>
   22e84:	ee77 7a67 	vsub.f32	s15, s14, s15
   22e88:	edc7 7a07 	vstr	s15, [r7, #28]
   22e8c:	69bb      	ldr	r3, [r7, #24]
   22e8e:	2b00      	cmp	r3, #0
   22e90:	da04      	bge.n	22e9c <tanhf+0x120>
   22e92:	edd7 7a07 	vldr	s15, [r7, #28]
   22e96:	eef1 7a67 	vneg.f32	s15, s15
   22e9a:	e001      	b.n	22ea0 <tanhf+0x124>
   22e9c:	edd7 7a07 	vldr	s15, [r7, #28]
   22ea0:	ee17 3a90 	vmov	r3, s15
   22ea4:	4618      	mov	r0, r3
   22ea6:	3720      	adds	r7, #32
   22ea8:	46bd      	mov	sp, r7
   22eaa:	ecbd 8b02 	vpop	{d8}
   22eae:	bd80      	pop	{r7, pc}
   22eb0:	41afffff 	.word	0x41afffff
   22eb4:	0da24260 	.word	0x0da24260

00022eb8 <expf>:
   22eb8:	b580      	push	{r7, lr}
   22eba:	b08e      	sub	sp, #56	; 0x38
   22ebc:	af00      	add	r7, sp, #0
   22ebe:	6078      	str	r0, [r7, #4]
   22ec0:	6878      	ldr	r0, [r7, #4]
   22ec2:	f000 f9d7 	bl	23274 <__ieee754_expf>
   22ec6:	6378      	str	r0, [r7, #52]	; 0x34
   22ec8:	4b56      	ldr	r3, [pc, #344]	; (23024 <expf+0x16c>)
   22eca:	f993 3000 	ldrsb.w	r3, [r3]
   22ece:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   22ed2:	d101      	bne.n	22ed8 <expf+0x20>
   22ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   22ed6:	e0a1      	b.n	2301c <expf+0x164>
   22ed8:	6878      	ldr	r0, [r7, #4]
   22eda:	f00d ff26 	bl	30d2a <finitef>
   22ede:	4603      	mov	r3, r0
   22ee0:	2b00      	cmp	r3, #0
   22ee2:	f000 809a 	beq.w	2301a <expf+0x162>
   22ee6:	ed9f 7a50 	vldr	s14, [pc, #320]	; 23028 <expf+0x170>
   22eea:	edd7 7a01 	vldr	s15, [r7, #4]
   22eee:	eef4 7ac7 	vcmpe.f32	s15, s14
   22ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   22ef6:	dd48      	ble.n	22f8a <expf+0xd2>
   22ef8:	2303      	movs	r3, #3
   22efa:	60bb      	str	r3, [r7, #8]
   22efc:	4b4b      	ldr	r3, [pc, #300]	; (2302c <expf+0x174>)
   22efe:	60fb      	str	r3, [r7, #12]
   22f00:	2300      	movs	r3, #0
   22f02:	62bb      	str	r3, [r7, #40]	; 0x28
   22f04:	6878      	ldr	r0, [r7, #4]
   22f06:	f7e9 faff 	bl	c508 <__aeabi_f2d>
   22f0a:	4602      	mov	r2, r0
   22f0c:	460b      	mov	r3, r1
   22f0e:	e9c7 2306 	strd	r2, r3, [r7, #24]
   22f12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   22f16:	e9c7 2304 	strd	r2, r3, [r7, #16]
   22f1a:	4b42      	ldr	r3, [pc, #264]	; (23024 <expf+0x16c>)
   22f1c:	f993 3000 	ldrsb.w	r3, [r3]
   22f20:	2b00      	cmp	r3, #0
   22f22:	d105      	bne.n	22f30 <expf+0x78>
   22f24:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   22f28:	4b41      	ldr	r3, [pc, #260]	; (23030 <expf+0x178>)
   22f2a:	e9c7 2308 	strd	r2, r3, [r7, #32]
   22f2e:	e004      	b.n	22f3a <expf+0x82>
   22f30:	f04f 0200 	mov.w	r2, #0
   22f34:	4b3f      	ldr	r3, [pc, #252]	; (23034 <expf+0x17c>)
   22f36:	e9c7 2308 	strd	r2, r3, [r7, #32]
   22f3a:	4b3a      	ldr	r3, [pc, #232]	; (23024 <expf+0x16c>)
   22f3c:	f993 3000 	ldrsb.w	r3, [r3]
   22f40:	2b02      	cmp	r3, #2
   22f42:	d105      	bne.n	22f50 <expf+0x98>
   22f44:	f003 ff71 	bl	26e2a <__errno>
   22f48:	4603      	mov	r3, r0
   22f4a:	2222      	movs	r2, #34	; 0x22
   22f4c:	601a      	str	r2, [r3, #0]
   22f4e:	e00c      	b.n	22f6a <expf+0xb2>
   22f50:	f107 0308 	add.w	r3, r7, #8
   22f54:	4618      	mov	r0, r3
   22f56:	f00d febb 	bl	30cd0 <matherr>
   22f5a:	4603      	mov	r3, r0
   22f5c:	2b00      	cmp	r3, #0
   22f5e:	d104      	bne.n	22f6a <expf+0xb2>
   22f60:	f003 ff63 	bl	26e2a <__errno>
   22f64:	4603      	mov	r3, r0
   22f66:	2222      	movs	r2, #34	; 0x22
   22f68:	601a      	str	r2, [r3, #0]
   22f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   22f6c:	2b00      	cmp	r3, #0
   22f6e:	d004      	beq.n	22f7a <expf+0xc2>
   22f70:	f003 ff5b 	bl	26e2a <__errno>
   22f74:	4602      	mov	r2, r0
   22f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
   22f78:	6013      	str	r3, [r2, #0]
   22f7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
   22f7e:	4610      	mov	r0, r2
   22f80:	4619      	mov	r1, r3
   22f82:	f7ed fd55 	bl	10a30 <__aeabi_d2f>
   22f86:	4603      	mov	r3, r0
   22f88:	e048      	b.n	2301c <expf+0x164>
   22f8a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 23038 <expf+0x180>
   22f8e:	edd7 7a01 	vldr	s15, [r7, #4]
   22f92:	eef4 7ac7 	vcmpe.f32	s15, s14
   22f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   22f9a:	d53e      	bpl.n	2301a <expf+0x162>
   22f9c:	2304      	movs	r3, #4
   22f9e:	60bb      	str	r3, [r7, #8]
   22fa0:	4b22      	ldr	r3, [pc, #136]	; (2302c <expf+0x174>)
   22fa2:	60fb      	str	r3, [r7, #12]
   22fa4:	2300      	movs	r3, #0
   22fa6:	62bb      	str	r3, [r7, #40]	; 0x28
   22fa8:	6878      	ldr	r0, [r7, #4]
   22faa:	f7e9 faad 	bl	c508 <__aeabi_f2d>
   22fae:	4602      	mov	r2, r0
   22fb0:	460b      	mov	r3, r1
   22fb2:	e9c7 2306 	strd	r2, r3, [r7, #24]
   22fb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   22fba:	e9c7 2304 	strd	r2, r3, [r7, #16]
   22fbe:	f04f 0200 	mov.w	r2, #0
   22fc2:	f04f 0300 	mov.w	r3, #0
   22fc6:	e9c7 2308 	strd	r2, r3, [r7, #32]
   22fca:	4b16      	ldr	r3, [pc, #88]	; (23024 <expf+0x16c>)
   22fcc:	f993 3000 	ldrsb.w	r3, [r3]
   22fd0:	2b02      	cmp	r3, #2
   22fd2:	d105      	bne.n	22fe0 <expf+0x128>
   22fd4:	f003 ff29 	bl	26e2a <__errno>
   22fd8:	4603      	mov	r3, r0
   22fda:	2222      	movs	r2, #34	; 0x22
   22fdc:	601a      	str	r2, [r3, #0]
   22fde:	e00c      	b.n	22ffa <expf+0x142>
   22fe0:	f107 0308 	add.w	r3, r7, #8
   22fe4:	4618      	mov	r0, r3
   22fe6:	f00d fe73 	bl	30cd0 <matherr>
   22fea:	4603      	mov	r3, r0
   22fec:	2b00      	cmp	r3, #0
   22fee:	d104      	bne.n	22ffa <expf+0x142>
   22ff0:	f003 ff1b 	bl	26e2a <__errno>
   22ff4:	4603      	mov	r3, r0
   22ff6:	2222      	movs	r2, #34	; 0x22
   22ff8:	601a      	str	r2, [r3, #0]
   22ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   22ffc:	2b00      	cmp	r3, #0
   22ffe:	d004      	beq.n	2300a <expf+0x152>
   23000:	f003 ff13 	bl	26e2a <__errno>
   23004:	4602      	mov	r2, r0
   23006:	6abb      	ldr	r3, [r7, #40]	; 0x28
   23008:	6013      	str	r3, [r2, #0]
   2300a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
   2300e:	4610      	mov	r0, r2
   23010:	4619      	mov	r1, r3
   23012:	f7ed fd0d 	bl	10a30 <__aeabi_d2f>
   23016:	4603      	mov	r3, r0
   23018:	e000      	b.n	2301c <expf+0x164>
   2301a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2301c:	4618      	mov	r0, r3
   2301e:	3738      	adds	r7, #56	; 0x38
   23020:	46bd      	mov	sp, r7
   23022:	bd80      	pop	{r7, pc}
   23024:	200200bd 	.word	0x200200bd
   23028:	42b17180 	.word	0x42b17180
   2302c:	000323f8 	.word	0x000323f8
   23030:	47efffff 	.word	0x47efffff
   23034:	7ff00000 	.word	0x7ff00000
   23038:	c2cff1b5 	.word	0xc2cff1b5

0002303c <logf>:
   2303c:	b580      	push	{r7, lr}
   2303e:	b08e      	sub	sp, #56	; 0x38
   23040:	af00      	add	r7, sp, #0
   23042:	6078      	str	r0, [r7, #4]
   23044:	6878      	ldr	r0, [r7, #4]
   23046:	f000 fa7f 	bl	23548 <__ieee754_logf>
   2304a:	6378      	str	r0, [r7, #52]	; 0x34
   2304c:	4b46      	ldr	r3, [pc, #280]	; (23168 <logf+0x12c>)
   2304e:	f993 3000 	ldrsb.w	r3, [r3]
   23052:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   23056:	d00f      	beq.n	23078 <logf+0x3c>
   23058:	ed97 7a01 	vldr	s14, [r7, #4]
   2305c:	edd7 7a01 	vldr	s15, [r7, #4]
   23060:	eeb4 7a67 	vcmp.f32	s14, s15
   23064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   23068:	d606      	bvs.n	23078 <logf+0x3c>
   2306a:	edd7 7a01 	vldr	s15, [r7, #4]
   2306e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   23072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   23076:	dd01      	ble.n	2307c <logf+0x40>
   23078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2307a:	e070      	b.n	2315e <logf+0x122>
   2307c:	4b3b      	ldr	r3, [pc, #236]	; (2316c <logf+0x130>)
   2307e:	60fb      	str	r3, [r7, #12]
   23080:	2300      	movs	r3, #0
   23082:	62bb      	str	r3, [r7, #40]	; 0x28
   23084:	6878      	ldr	r0, [r7, #4]
   23086:	f7e9 fa3f 	bl	c508 <__aeabi_f2d>
   2308a:	4602      	mov	r2, r0
   2308c:	460b      	mov	r3, r1
   2308e:	e9c7 2306 	strd	r2, r3, [r7, #24]
   23092:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   23096:	e9c7 2304 	strd	r2, r3, [r7, #16]
   2309a:	4b33      	ldr	r3, [pc, #204]	; (23168 <logf+0x12c>)
   2309c:	f993 3000 	ldrsb.w	r3, [r3]
   230a0:	2b00      	cmp	r3, #0
   230a2:	d105      	bne.n	230b0 <logf+0x74>
   230a4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   230a8:	4b31      	ldr	r3, [pc, #196]	; (23170 <logf+0x134>)
   230aa:	e9c7 2308 	strd	r2, r3, [r7, #32]
   230ae:	e004      	b.n	230ba <logf+0x7e>
   230b0:	f04f 0200 	mov.w	r2, #0
   230b4:	4b2f      	ldr	r3, [pc, #188]	; (23174 <logf+0x138>)
   230b6:	e9c7 2308 	strd	r2, r3, [r7, #32]
   230ba:	edd7 7a01 	vldr	s15, [r7, #4]
   230be:	eef5 7a40 	vcmp.f32	s15, #0.0
   230c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   230c6:	d11a      	bne.n	230fe <logf+0xc2>
   230c8:	2302      	movs	r3, #2
   230ca:	60bb      	str	r3, [r7, #8]
   230cc:	4b26      	ldr	r3, [pc, #152]	; (23168 <logf+0x12c>)
   230ce:	f993 3000 	ldrsb.w	r3, [r3]
   230d2:	2b02      	cmp	r3, #2
   230d4:	d105      	bne.n	230e2 <logf+0xa6>
   230d6:	f003 fea8 	bl	26e2a <__errno>
   230da:	4603      	mov	r3, r0
   230dc:	2222      	movs	r2, #34	; 0x22
   230de:	601a      	str	r2, [r3, #0]
   230e0:	e02e      	b.n	23140 <logf+0x104>
   230e2:	f107 0308 	add.w	r3, r7, #8
   230e6:	4618      	mov	r0, r3
   230e8:	f00d fdf2 	bl	30cd0 <matherr>
   230ec:	4603      	mov	r3, r0
   230ee:	2b00      	cmp	r3, #0
   230f0:	d126      	bne.n	23140 <logf+0x104>
   230f2:	f003 fe9a 	bl	26e2a <__errno>
   230f6:	4603      	mov	r3, r0
   230f8:	2222      	movs	r2, #34	; 0x22
   230fa:	601a      	str	r2, [r3, #0]
   230fc:	e020      	b.n	23140 <logf+0x104>
   230fe:	2301      	movs	r3, #1
   23100:	60bb      	str	r3, [r7, #8]
   23102:	4b19      	ldr	r3, [pc, #100]	; (23168 <logf+0x12c>)
   23104:	f993 3000 	ldrsb.w	r3, [r3]
   23108:	2b02      	cmp	r3, #2
   2310a:	d105      	bne.n	23118 <logf+0xdc>
   2310c:	f003 fe8d 	bl	26e2a <__errno>
   23110:	4603      	mov	r3, r0
   23112:	2221      	movs	r2, #33	; 0x21
   23114:	601a      	str	r2, [r3, #0]
   23116:	e00c      	b.n	23132 <logf+0xf6>
   23118:	f107 0308 	add.w	r3, r7, #8
   2311c:	4618      	mov	r0, r3
   2311e:	f00d fdd7 	bl	30cd0 <matherr>
   23122:	4603      	mov	r3, r0
   23124:	2b00      	cmp	r3, #0
   23126:	d104      	bne.n	23132 <logf+0xf6>
   23128:	f003 fe7f 	bl	26e2a <__errno>
   2312c:	4603      	mov	r3, r0
   2312e:	2221      	movs	r2, #33	; 0x21
   23130:	601a      	str	r2, [r3, #0]
   23132:	4811      	ldr	r0, [pc, #68]	; (23178 <logf+0x13c>)
   23134:	f001 fd5c 	bl	24bf0 <nan>
   23138:	4602      	mov	r2, r0
   2313a:	460b      	mov	r3, r1
   2313c:	e9c7 2308 	strd	r2, r3, [r7, #32]
   23140:	6abb      	ldr	r3, [r7, #40]	; 0x28
   23142:	2b00      	cmp	r3, #0
   23144:	d004      	beq.n	23150 <logf+0x114>
   23146:	f003 fe70 	bl	26e2a <__errno>
   2314a:	4602      	mov	r2, r0
   2314c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2314e:	6013      	str	r3, [r2, #0]
   23150:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
   23154:	4610      	mov	r0, r2
   23156:	4619      	mov	r1, r3
   23158:	f7ed fc6a 	bl	10a30 <__aeabi_d2f>
   2315c:	4603      	mov	r3, r0
   2315e:	4618      	mov	r0, r3
   23160:	3738      	adds	r7, #56	; 0x38
   23162:	46bd      	mov	sp, r7
   23164:	bd80      	pop	{r7, pc}
   23166:	bf00      	nop
   23168:	200200bd 	.word	0x200200bd
   2316c:	00032400 	.word	0x00032400
   23170:	c7efffff 	.word	0xc7efffff
   23174:	fff00000 	.word	0xfff00000
   23178:	00032408 	.word	0x00032408

0002317c <sqrtf>:
   2317c:	b580      	push	{r7, lr}
   2317e:	b08e      	sub	sp, #56	; 0x38
   23180:	af00      	add	r7, sp, #0
   23182:	6078      	str	r0, [r7, #4]
   23184:	6878      	ldr	r0, [r7, #4]
   23186:	f00d fd92 	bl	30cae <__ieee754_sqrtf>
   2318a:	6378      	str	r0, [r7, #52]	; 0x34
   2318c:	4b37      	ldr	r3, [pc, #220]	; (2326c <sqrtf+0xf0>)
   2318e:	f993 3000 	ldrsb.w	r3, [r3]
   23192:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   23196:	d008      	beq.n	231aa <sqrtf+0x2e>
   23198:	ed97 7a01 	vldr	s14, [r7, #4]
   2319c:	edd7 7a01 	vldr	s15, [r7, #4]
   231a0:	eeb4 7a67 	vcmp.f32	s14, s15
   231a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   231a8:	d701      	bvc.n	231ae <sqrtf+0x32>
   231aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   231ac:	e05a      	b.n	23264 <sqrtf+0xe8>
   231ae:	edd7 7a01 	vldr	s15, [r7, #4]
   231b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   231b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   231ba:	d552      	bpl.n	23262 <sqrtf+0xe6>
   231bc:	2301      	movs	r3, #1
   231be:	60bb      	str	r3, [r7, #8]
   231c0:	4b2b      	ldr	r3, [pc, #172]	; (23270 <sqrtf+0xf4>)
   231c2:	60fb      	str	r3, [r7, #12]
   231c4:	2300      	movs	r3, #0
   231c6:	62bb      	str	r3, [r7, #40]	; 0x28
   231c8:	6878      	ldr	r0, [r7, #4]
   231ca:	f7e9 f99d 	bl	c508 <__aeabi_f2d>
   231ce:	4602      	mov	r2, r0
   231d0:	460b      	mov	r3, r1
   231d2:	e9c7 2306 	strd	r2, r3, [r7, #24]
   231d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   231da:	e9c7 2304 	strd	r2, r3, [r7, #16]
   231de:	4b23      	ldr	r3, [pc, #140]	; (2326c <sqrtf+0xf0>)
   231e0:	f993 3000 	ldrsb.w	r3, [r3]
   231e4:	2b00      	cmp	r3, #0
   231e6:	d106      	bne.n	231f6 <sqrtf+0x7a>
   231e8:	f04f 0200 	mov.w	r2, #0
   231ec:	f04f 0300 	mov.w	r3, #0
   231f0:	e9c7 2308 	strd	r2, r3, [r7, #32]
   231f4:	e00d      	b.n	23212 <sqrtf+0x96>
   231f6:	f04f 0200 	mov.w	r2, #0
   231fa:	f04f 0300 	mov.w	r3, #0
   231fe:	f04f 0000 	mov.w	r0, #0
   23202:	f04f 0100 	mov.w	r1, #0
   23206:	f7ed fa7b 	bl	10700 <__aeabi_ddiv>
   2320a:	4602      	mov	r2, r0
   2320c:	460b      	mov	r3, r1
   2320e:	e9c7 2308 	strd	r2, r3, [r7, #32]
   23212:	4b16      	ldr	r3, [pc, #88]	; (2326c <sqrtf+0xf0>)
   23214:	f993 3000 	ldrsb.w	r3, [r3]
   23218:	2b02      	cmp	r3, #2
   2321a:	d105      	bne.n	23228 <sqrtf+0xac>
   2321c:	f003 fe05 	bl	26e2a <__errno>
   23220:	4603      	mov	r3, r0
   23222:	2221      	movs	r2, #33	; 0x21
   23224:	601a      	str	r2, [r3, #0]
   23226:	e00c      	b.n	23242 <sqrtf+0xc6>
   23228:	f107 0308 	add.w	r3, r7, #8
   2322c:	4618      	mov	r0, r3
   2322e:	f00d fd4f 	bl	30cd0 <matherr>
   23232:	4603      	mov	r3, r0
   23234:	2b00      	cmp	r3, #0
   23236:	d104      	bne.n	23242 <sqrtf+0xc6>
   23238:	f003 fdf7 	bl	26e2a <__errno>
   2323c:	4603      	mov	r3, r0
   2323e:	2221      	movs	r2, #33	; 0x21
   23240:	601a      	str	r2, [r3, #0]
   23242:	6abb      	ldr	r3, [r7, #40]	; 0x28
   23244:	2b00      	cmp	r3, #0
   23246:	d004      	beq.n	23252 <sqrtf+0xd6>
   23248:	f003 fdef 	bl	26e2a <__errno>
   2324c:	4602      	mov	r2, r0
   2324e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   23250:	6013      	str	r3, [r2, #0]
   23252:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
   23256:	4610      	mov	r0, r2
   23258:	4619      	mov	r1, r3
   2325a:	f7ed fbe9 	bl	10a30 <__aeabi_d2f>
   2325e:	4603      	mov	r3, r0
   23260:	e000      	b.n	23264 <sqrtf+0xe8>
   23262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   23264:	4618      	mov	r0, r3
   23266:	3738      	adds	r7, #56	; 0x38
   23268:	46bd      	mov	sp, r7
   2326a:	bd80      	pop	{r7, pc}
   2326c:	200200bd 	.word	0x200200bd
   23270:	0003240c 	.word	0x0003240c

00023274 <__ieee754_expf>:
   23274:	b480      	push	{r7}
   23276:	b093      	sub	sp, #76	; 0x4c
   23278:	af00      	add	r7, sp, #0
   2327a:	6078      	str	r0, [r7, #4]
   2327c:	2300      	movs	r3, #0
   2327e:	63fb      	str	r3, [r7, #60]	; 0x3c
   23280:	687b      	ldr	r3, [r7, #4]
   23282:	61bb      	str	r3, [r7, #24]
   23284:	69bb      	ldr	r3, [r7, #24]
   23286:	63bb      	str	r3, [r7, #56]	; 0x38
   23288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2328a:	0fdb      	lsrs	r3, r3, #31
   2328c:	637b      	str	r3, [r7, #52]	; 0x34
   2328e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   23290:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   23294:	633b      	str	r3, [r7, #48]	; 0x30
   23296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   23298:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   2329c:	d904      	bls.n	232a8 <__ieee754_expf+0x34>
   2329e:	edd7 7a01 	vldr	s15, [r7, #4]
   232a2:	ee77 7aa7 	vadd.f32	s15, s15, s15
   232a6:	e123      	b.n	234f0 <__ieee754_expf+0x27c>
   232a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   232aa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   232ae:	d108      	bne.n	232c2 <__ieee754_expf+0x4e>
   232b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   232b2:	2b00      	cmp	r3, #0
   232b4:	d102      	bne.n	232bc <__ieee754_expf+0x48>
   232b6:	edd7 7a01 	vldr	s15, [r7, #4]
   232ba:	e119      	b.n	234f0 <__ieee754_expf+0x27c>
   232bc:	eddf 7a90 	vldr	s15, [pc, #576]	; 23500 <__ieee754_expf+0x28c>
   232c0:	e116      	b.n	234f0 <__ieee754_expf+0x27c>
   232c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   232c4:	4a8f      	ldr	r2, [pc, #572]	; (23504 <__ieee754_expf+0x290>)
   232c6:	4293      	cmp	r3, r2
   232c8:	dd06      	ble.n	232d8 <__ieee754_expf+0x64>
   232ca:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 23508 <__ieee754_expf+0x294>
   232ce:	eddf 7a8e 	vldr	s15, [pc, #568]	; 23508 <__ieee754_expf+0x294>
   232d2:	ee67 7a27 	vmul.f32	s15, s14, s15
   232d6:	e10b      	b.n	234f0 <__ieee754_expf+0x27c>
   232d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   232da:	2b00      	cmp	r3, #0
   232dc:	da0a      	bge.n	232f4 <__ieee754_expf+0x80>
   232de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   232e0:	4a8a      	ldr	r2, [pc, #552]	; (2350c <__ieee754_expf+0x298>)
   232e2:	4293      	cmp	r3, r2
   232e4:	d906      	bls.n	232f4 <__ieee754_expf+0x80>
   232e6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 23510 <__ieee754_expf+0x29c>
   232ea:	eddf 7a89 	vldr	s15, [pc, #548]	; 23510 <__ieee754_expf+0x29c>
   232ee:	ee67 7a27 	vmul.f32	s15, s14, s15
   232f2:	e0fd      	b.n	234f0 <__ieee754_expf+0x27c>
   232f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   232f6:	4a87      	ldr	r2, [pc, #540]	; (23514 <__ieee754_expf+0x2a0>)
   232f8:	4293      	cmp	r3, r2
   232fa:	d953      	bls.n	233a4 <__ieee754_expf+0x130>
   232fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   232fe:	4a86      	ldr	r2, [pc, #536]	; (23518 <__ieee754_expf+0x2a4>)
   23300:	4293      	cmp	r3, r2
   23302:	d818      	bhi.n	23336 <__ieee754_expf+0xc2>
   23304:	4a85      	ldr	r2, [pc, #532]	; (2351c <__ieee754_expf+0x2a8>)
   23306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   23308:	009b      	lsls	r3, r3, #2
   2330a:	4413      	add	r3, r2
   2330c:	edd3 7a00 	vldr	s15, [r3]
   23310:	ed97 7a01 	vldr	s14, [r7, #4]
   23314:	ee77 7a67 	vsub.f32	s15, s14, s15
   23318:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
   2331c:	4a80      	ldr	r2, [pc, #512]	; (23520 <__ieee754_expf+0x2ac>)
   2331e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   23320:	009b      	lsls	r3, r3, #2
   23322:	4413      	add	r3, r2
   23324:	681b      	ldr	r3, [r3, #0]
   23326:	643b      	str	r3, [r7, #64]	; 0x40
   23328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2332a:	f1c3 0201 	rsb	r2, r3, #1
   2332e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   23330:	1ad3      	subs	r3, r2, r3
   23332:	63fb      	str	r3, [r7, #60]	; 0x3c
   23334:	e02d      	b.n	23392 <__ieee754_expf+0x11e>
   23336:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 23524 <__ieee754_expf+0x2b0>
   2333a:	edd7 7a01 	vldr	s15, [r7, #4]
   2333e:	ee27 7a27 	vmul.f32	s14, s14, s15
   23342:	4a79      	ldr	r2, [pc, #484]	; (23528 <__ieee754_expf+0x2b4>)
   23344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   23346:	009b      	lsls	r3, r3, #2
   23348:	4413      	add	r3, r2
   2334a:	edd3 7a00 	vldr	s15, [r3]
   2334e:	ee77 7a27 	vadd.f32	s15, s14, s15
   23352:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   23356:	ee17 3a90 	vmov	r3, s15
   2335a:	63fb      	str	r3, [r7, #60]	; 0x3c
   2335c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2335e:	ee07 3a90 	vmov	s15, r3
   23362:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   23366:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
   2336a:	ed9f 7a70 	vldr	s14, [pc, #448]	; 2352c <__ieee754_expf+0x2b8>
   2336e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   23372:	ee67 7a27 	vmul.f32	s15, s14, s15
   23376:	ed97 7a01 	vldr	s14, [r7, #4]
   2337a:	ee77 7a67 	vsub.f32	s15, s14, s15
   2337e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
   23382:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 23530 <__ieee754_expf+0x2bc>
   23386:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   2338a:	ee67 7a87 	vmul.f32	s15, s15, s14
   2338e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
   23392:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
   23396:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
   2339a:	ee77 7a67 	vsub.f32	s15, s14, s15
   2339e:	edc7 7a01 	vstr	s15, [r7, #4]
   233a2:	e017      	b.n	233d4 <__ieee754_expf+0x160>
   233a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   233a6:	f1b3 5f46 	cmp.w	r3, #830472192	; 0x31800000
   233aa:	d213      	bcs.n	233d4 <__ieee754_expf+0x160>
   233ac:	ed9f 7a56 	vldr	s14, [pc, #344]	; 23508 <__ieee754_expf+0x294>
   233b0:	edd7 7a01 	vldr	s15, [r7, #4]
   233b4:	ee77 7a27 	vadd.f32	s15, s14, s15
   233b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   233bc:	eef4 7ac7 	vcmpe.f32	s15, s14
   233c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   233c4:	dd06      	ble.n	233d4 <__ieee754_expf+0x160>
   233c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   233ca:	edd7 7a01 	vldr	s15, [r7, #4]
   233ce:	ee77 7a27 	vadd.f32	s15, s14, s15
   233d2:	e08d      	b.n	234f0 <__ieee754_expf+0x27c>
   233d4:	edd7 7a01 	vldr	s15, [r7, #4]
   233d8:	ee67 7aa7 	vmul.f32	s15, s15, s15
   233dc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
   233e0:	ed9f 7a54 	vldr	s14, [pc, #336]	; 23534 <__ieee754_expf+0x2c0>
   233e4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   233e8:	ee67 7a27 	vmul.f32	s15, s14, s15
   233ec:	ed9f 7a52 	vldr	s14, [pc, #328]	; 23538 <__ieee754_expf+0x2c4>
   233f0:	ee37 7a87 	vadd.f32	s14, s15, s14
   233f4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   233f8:	ee67 7a27 	vmul.f32	s15, s14, s15
   233fc:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 2353c <__ieee754_expf+0x2c8>
   23400:	ee37 7a87 	vadd.f32	s14, s15, s14
   23404:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   23408:	ee67 7a27 	vmul.f32	s15, s14, s15
   2340c:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 23540 <__ieee754_expf+0x2cc>
   23410:	ee37 7a87 	vadd.f32	s14, s15, s14
   23414:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   23418:	ee67 7a27 	vmul.f32	s15, s14, s15
   2341c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 23544 <__ieee754_expf+0x2d0>
   23420:	ee37 7a87 	vadd.f32	s14, s15, s14
   23424:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   23428:	ee67 7a27 	vmul.f32	s15, s14, s15
   2342c:	ed97 7a01 	vldr	s14, [r7, #4]
   23430:	ee77 7a67 	vsub.f32	s15, s14, s15
   23434:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
   23438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2343a:	2b00      	cmp	r3, #0
   2343c:	d116      	bne.n	2346c <__ieee754_expf+0x1f8>
   2343e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   23442:	ed97 7a01 	vldr	s14, [r7, #4]
   23446:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
   2344a:	ee67 6a27 	vmul.f32	s13, s14, s15
   2344e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
   23452:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   23456:	ee77 7ac7 	vsub.f32	s15, s15, s14
   2345a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   2345e:	edd7 7a01 	vldr	s15, [r7, #4]
   23462:	ee77 7a67 	vsub.f32	s15, s14, s15
   23466:	ee76 7a67 	vsub.f32	s15, s12, s15
   2346a:	e041      	b.n	234f0 <__ieee754_expf+0x27c>
   2346c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   23470:	ed97 7a01 	vldr	s14, [r7, #4]
   23474:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
   23478:	ee67 6a27 	vmul.f32	s13, s14, s15
   2347c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   23480:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
   23484:	ee37 7a67 	vsub.f32	s14, s14, s15
   23488:	eec6 7a87 	vdiv.f32	s15, s13, s14
   2348c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
   23490:	ee37 7a67 	vsub.f32	s14, s14, s15
   23494:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
   23498:	ee77 7a67 	vsub.f32	s15, s14, s15
   2349c:	ee76 7a67 	vsub.f32	s15, s12, s15
   234a0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
   234a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   234a6:	f113 0f7d 	cmn.w	r3, #125	; 0x7d
   234aa:	db0e      	blt.n	234ca <__ieee754_expf+0x256>
   234ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   234ae:	617b      	str	r3, [r7, #20]
   234b0:	697b      	ldr	r3, [r7, #20]
   234b2:	61fb      	str	r3, [r7, #28]
   234b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   234b6:	05db      	lsls	r3, r3, #23
   234b8:	461a      	mov	r2, r3
   234ba:	69fb      	ldr	r3, [r7, #28]
   234bc:	4413      	add	r3, r2
   234be:	613b      	str	r3, [r7, #16]
   234c0:	693b      	ldr	r3, [r7, #16]
   234c2:	627b      	str	r3, [r7, #36]	; 0x24
   234c4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
   234c8:	e012      	b.n	234f0 <__ieee754_expf+0x27c>
   234ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   234cc:	60fb      	str	r3, [r7, #12]
   234ce:	68fb      	ldr	r3, [r7, #12]
   234d0:	623b      	str	r3, [r7, #32]
   234d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   234d4:	3364      	adds	r3, #100	; 0x64
   234d6:	05db      	lsls	r3, r3, #23
   234d8:	461a      	mov	r2, r3
   234da:	6a3b      	ldr	r3, [r7, #32]
   234dc:	4413      	add	r3, r2
   234de:	60bb      	str	r3, [r7, #8]
   234e0:	68bb      	ldr	r3, [r7, #8]
   234e2:	627b      	str	r3, [r7, #36]	; 0x24
   234e4:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 23510 <__ieee754_expf+0x29c>
   234e8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
   234ec:	ee67 7a27 	vmul.f32	s15, s14, s15
   234f0:	ee17 3a90 	vmov	r3, s15
   234f4:	4618      	mov	r0, r3
   234f6:	374c      	adds	r7, #76	; 0x4c
   234f8:	46bd      	mov	sp, r7
   234fa:	f85d 7b04 	ldr.w	r7, [sp], #4
   234fe:	4770      	bx	lr
   23500:	00000000 	.word	0x00000000
   23504:	42b17217 	.word	0x42b17217
   23508:	7149f2ca 	.word	0x7149f2ca
   2350c:	42cff1b5 	.word	0x42cff1b5
   23510:	0d800000 	.word	0x0d800000
   23514:	3eb17218 	.word	0x3eb17218
   23518:	3f851591 	.word	0x3f851591
   2351c:	000332fc 	.word	0x000332fc
   23520:	00033304 	.word	0x00033304
   23524:	3fb8aa3b 	.word	0x3fb8aa3b
   23528:	000332f4 	.word	0x000332f4
   2352c:	3f317180 	.word	0x3f317180
   23530:	3717f7d1 	.word	0x3717f7d1
   23534:	3331bb4c 	.word	0x3331bb4c
   23538:	b5ddea0e 	.word	0xb5ddea0e
   2353c:	388ab355 	.word	0x388ab355
   23540:	bb360b61 	.word	0xbb360b61
   23544:	3e2aaaab 	.word	0x3e2aaaab

00023548 <__ieee754_logf>:
   23548:	b480      	push	{r7}
   2354a:	b093      	sub	sp, #76	; 0x4c
   2354c:	af00      	add	r7, sp, #0
   2354e:	6078      	str	r0, [r7, #4]
   23550:	687b      	ldr	r3, [r7, #4]
   23552:	613b      	str	r3, [r7, #16]
   23554:	693b      	ldr	r3, [r7, #16]
   23556:	643b      	str	r3, [r7, #64]	; 0x40
   23558:	2300      	movs	r3, #0
   2355a:	647b      	str	r3, [r7, #68]	; 0x44
   2355c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2355e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   23562:	2b00      	cmp	r3, #0
   23564:	d108      	bne.n	23578 <__ieee754_logf+0x30>
   23566:	eddf 7ad3 	vldr	s15, [pc, #844]	; 238b4 <__ieee754_logf+0x36c>
   2356a:	eeb1 7a67 	vneg.f32	s14, s15
   2356e:	eddf 6ad2 	vldr	s13, [pc, #840]	; 238b8 <__ieee754_logf+0x370>
   23572:	eec7 7a26 	vdiv.f32	s15, s14, s13
   23576:	e195      	b.n	238a4 <__ieee754_logf+0x35c>
   23578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2357a:	2b00      	cmp	r3, #0
   2357c:	da08      	bge.n	23590 <__ieee754_logf+0x48>
   2357e:	edd7 7a01 	vldr	s15, [r7, #4]
   23582:	ee37 7ae7 	vsub.f32	s14, s15, s15
   23586:	eddf 6acc 	vldr	s13, [pc, #816]	; 238b8 <__ieee754_logf+0x370>
   2358a:	eec7 7a26 	vdiv.f32	s15, s14, s13
   2358e:	e189      	b.n	238a4 <__ieee754_logf+0x35c>
   23590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   23592:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   23596:	db04      	blt.n	235a2 <__ieee754_logf+0x5a>
   23598:	edd7 7a01 	vldr	s15, [r7, #4]
   2359c:	ee77 7aa7 	vadd.f32	s15, s15, s15
   235a0:	e180      	b.n	238a4 <__ieee754_logf+0x35c>
   235a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   235a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   235a8:	da0e      	bge.n	235c8 <__ieee754_logf+0x80>
   235aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   235ac:	3b19      	subs	r3, #25
   235ae:	647b      	str	r3, [r7, #68]	; 0x44
   235b0:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 238b4 <__ieee754_logf+0x36c>
   235b4:	edd7 7a01 	vldr	s15, [r7, #4]
   235b8:	ee67 7a87 	vmul.f32	s15, s15, s14
   235bc:	edc7 7a01 	vstr	s15, [r7, #4]
   235c0:	687b      	ldr	r3, [r7, #4]
   235c2:	60fb      	str	r3, [r7, #12]
   235c4:	68fb      	ldr	r3, [r7, #12]
   235c6:	643b      	str	r3, [r7, #64]	; 0x40
   235c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   235ca:	15db      	asrs	r3, r3, #23
   235cc:	3b7f      	subs	r3, #127	; 0x7f
   235ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   235d0:	4413      	add	r3, r2
   235d2:	647b      	str	r3, [r7, #68]	; 0x44
   235d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   235d6:	f3c3 0316 	ubfx	r3, r3, #0, #23
   235da:	643b      	str	r3, [r7, #64]	; 0x40
   235dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   235de:	4bb7      	ldr	r3, [pc, #732]	; (238bc <__ieee754_logf+0x374>)
   235e0:	4413      	add	r3, r2
   235e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   235e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   235e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   235ea:	f083 527e 	eor.w	r2, r3, #1065353216	; 0x3f800000
   235ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   235f0:	4313      	orrs	r3, r2
   235f2:	60bb      	str	r3, [r7, #8]
   235f4:	68bb      	ldr	r3, [r7, #8]
   235f6:	607b      	str	r3, [r7, #4]
   235f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   235fa:	15db      	asrs	r3, r3, #23
   235fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   235fe:	4413      	add	r3, r2
   23600:	647b      	str	r3, [r7, #68]	; 0x44
   23602:	edd7 7a01 	vldr	s15, [r7, #4]
   23606:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   2360a:	ee77 7ac7 	vsub.f32	s15, s15, s14
   2360e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
   23612:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   23614:	f103 020f 	add.w	r2, r3, #15
   23618:	4ba9      	ldr	r3, [pc, #676]	; (238c0 <__ieee754_logf+0x378>)
   2361a:	4013      	ands	r3, r2
   2361c:	2b00      	cmp	r3, #0
   2361e:	d15e      	bne.n	236de <__ieee754_logf+0x196>
   23620:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 238b8 <__ieee754_logf+0x370>
   23624:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
   23628:	eef4 7a47 	vcmp.f32	s15, s14
   2362c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   23630:	d11b      	bne.n	2366a <__ieee754_logf+0x122>
   23632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   23634:	2b00      	cmp	r3, #0
   23636:	d102      	bne.n	2363e <__ieee754_logf+0xf6>
   23638:	eddf 7a9f 	vldr	s15, [pc, #636]	; 238b8 <__ieee754_logf+0x370>
   2363c:	e132      	b.n	238a4 <__ieee754_logf+0x35c>
   2363e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   23640:	ee07 3a90 	vmov	s15, r3
   23644:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   23648:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
   2364c:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 238c4 <__ieee754_logf+0x37c>
   23650:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
   23654:	ee27 7a27 	vmul.f32	s14, s14, s15
   23658:	eddf 6a9b 	vldr	s13, [pc, #620]	; 238c8 <__ieee754_logf+0x380>
   2365c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
   23660:	ee66 7aa7 	vmul.f32	s15, s13, s15
   23664:	ee77 7a27 	vadd.f32	s15, s14, s15
   23668:	e11c      	b.n	238a4 <__ieee754_logf+0x35c>
   2366a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
   2366e:	ee27 7aa7 	vmul.f32	s14, s15, s15
   23672:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
   23676:	eddf 6a95 	vldr	s13, [pc, #596]	; 238cc <__ieee754_logf+0x384>
   2367a:	ee67 7aa6 	vmul.f32	s15, s15, s13
   2367e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   23682:	ee76 7ae7 	vsub.f32	s15, s13, s15
   23686:	ee67 7a27 	vmul.f32	s15, s14, s15
   2368a:	edc7 7a06 	vstr	s15, [r7, #24]
   2368e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   23690:	2b00      	cmp	r3, #0
   23692:	d106      	bne.n	236a2 <__ieee754_logf+0x15a>
   23694:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
   23698:	edd7 7a06 	vldr	s15, [r7, #24]
   2369c:	ee77 7a67 	vsub.f32	s15, s14, s15
   236a0:	e100      	b.n	238a4 <__ieee754_logf+0x35c>
   236a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   236a4:	ee07 3a90 	vmov	s15, r3
   236a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   236ac:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
   236b0:	ed9f 7a84 	vldr	s14, [pc, #528]	; 238c4 <__ieee754_logf+0x37c>
   236b4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
   236b8:	ee27 7a27 	vmul.f32	s14, s14, s15
   236bc:	eddf 6a82 	vldr	s13, [pc, #520]	; 238c8 <__ieee754_logf+0x380>
   236c0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
   236c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
   236c8:	edd7 6a06 	vldr	s13, [r7, #24]
   236cc:	ee76 6ae7 	vsub.f32	s13, s13, s15
   236d0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
   236d4:	ee76 7ae7 	vsub.f32	s15, s13, s15
   236d8:	ee77 7a67 	vsub.f32	s15, s14, s15
   236dc:	e0e2      	b.n	238a4 <__ieee754_logf+0x35c>
   236de:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
   236e2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   236e6:	ee37 7a87 	vadd.f32	s14, s15, s14
   236ea:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
   236ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
   236f2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
   236f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   236f8:	ee07 3a90 	vmov	s15, r3
   236fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   23700:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
   23704:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
   23708:	ee67 7aa7 	vmul.f32	s15, s15, s15
   2370c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
   23710:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   23712:	4b6f      	ldr	r3, [pc, #444]	; (238d0 <__ieee754_logf+0x388>)
   23714:	4413      	add	r3, r2
   23716:	63fb      	str	r3, [r7, #60]	; 0x3c
   23718:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   2371c:	ee67 7aa7 	vmul.f32	s15, s15, s15
   23720:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
   23724:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   23726:	4b6b      	ldr	r3, [pc, #428]	; (238d4 <__ieee754_logf+0x38c>)
   23728:	1a9b      	subs	r3, r3, r2
   2372a:	627b      	str	r3, [r7, #36]	; 0x24
   2372c:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 238d8 <__ieee754_logf+0x390>
   23730:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
   23734:	ee67 7a27 	vmul.f32	s15, s14, s15
   23738:	ed9f 7a68 	vldr	s14, [pc, #416]	; 238dc <__ieee754_logf+0x394>
   2373c:	ee37 7a87 	vadd.f32	s14, s15, s14
   23740:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
   23744:	ee67 7a27 	vmul.f32	s15, s14, s15
   23748:	ed9f 7a65 	vldr	s14, [pc, #404]	; 238e0 <__ieee754_logf+0x398>
   2374c:	ee77 7a87 	vadd.f32	s15, s15, s14
   23750:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
   23754:	ee67 7a27 	vmul.f32	s15, s14, s15
   23758:	edc7 7a08 	vstr	s15, [r7, #32]
   2375c:	ed9f 7a61 	vldr	s14, [pc, #388]	; 238e4 <__ieee754_logf+0x39c>
   23760:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
   23764:	ee67 7a27 	vmul.f32	s15, s14, s15
   23768:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 238e8 <__ieee754_logf+0x3a0>
   2376c:	ee37 7a87 	vadd.f32	s14, s15, s14
   23770:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
   23774:	ee67 7a27 	vmul.f32	s15, s14, s15
   23778:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 238ec <__ieee754_logf+0x3a4>
   2377c:	ee37 7a87 	vadd.f32	s14, s15, s14
   23780:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
   23784:	ee67 7a27 	vmul.f32	s15, s14, s15
   23788:	ed9f 7a59 	vldr	s14, [pc, #356]	; 238f0 <__ieee754_logf+0x3a8>
   2378c:	ee77 7a87 	vadd.f32	s15, s15, s14
   23790:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
   23794:	ee67 7a27 	vmul.f32	s15, s14, s15
   23798:	edc7 7a07 	vstr	s15, [r7, #28]
   2379c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   237a0:	4313      	orrs	r3, r2
   237a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   237a4:	ed97 7a07 	vldr	s14, [r7, #28]
   237a8:	edd7 7a08 	vldr	s15, [r7, #32]
   237ac:	ee77 7a27 	vadd.f32	s15, s14, s15
   237b0:	edc7 7a06 	vstr	s15, [r7, #24]
   237b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   237b6:	2b00      	cmp	r3, #0
   237b8:	dd44      	ble.n	23844 <__ieee754_logf+0x2fc>
   237ba:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
   237be:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   237c2:	ee67 7a87 	vmul.f32	s15, s15, s14
   237c6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
   237ca:	ee67 7a27 	vmul.f32	s15, s14, s15
   237ce:	edc7 7a05 	vstr	s15, [r7, #20]
   237d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   237d4:	2b00      	cmp	r3, #0
   237d6:	d112      	bne.n	237fe <__ieee754_logf+0x2b6>
   237d8:	ed97 7a05 	vldr	s14, [r7, #20]
   237dc:	edd7 7a06 	vldr	s15, [r7, #24]
   237e0:	ee37 7a27 	vadd.f32	s14, s14, s15
   237e4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
   237e8:	ee67 7a27 	vmul.f32	s15, s14, s15
   237ec:	ed97 7a05 	vldr	s14, [r7, #20]
   237f0:	ee77 7a67 	vsub.f32	s15, s14, s15
   237f4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
   237f8:	ee77 7a67 	vsub.f32	s15, s14, s15
   237fc:	e052      	b.n	238a4 <__ieee754_logf+0x35c>
   237fe:	ed9f 7a31 	vldr	s14, [pc, #196]	; 238c4 <__ieee754_logf+0x37c>
   23802:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
   23806:	ee27 7a27 	vmul.f32	s14, s14, s15
   2380a:	edd7 6a05 	vldr	s13, [r7, #20]
   2380e:	edd7 7a06 	vldr	s15, [r7, #24]
   23812:	ee76 6aa7 	vadd.f32	s13, s13, s15
   23816:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
   2381a:	ee66 6aa7 	vmul.f32	s13, s13, s15
   2381e:	ed9f 6a2a 	vldr	s12, [pc, #168]	; 238c8 <__ieee754_logf+0x380>
   23822:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
   23826:	ee66 7a27 	vmul.f32	s15, s12, s15
   2382a:	ee76 7aa7 	vadd.f32	s15, s13, s15
   2382e:	edd7 6a05 	vldr	s13, [r7, #20]
   23832:	ee76 6ae7 	vsub.f32	s13, s13, s15
   23836:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
   2383a:	ee76 7ae7 	vsub.f32	s15, s13, s15
   2383e:	ee77 7a67 	vsub.f32	s15, s14, s15
   23842:	e02f      	b.n	238a4 <__ieee754_logf+0x35c>
   23844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   23846:	2b00      	cmp	r3, #0
   23848:	d10e      	bne.n	23868 <__ieee754_logf+0x320>
   2384a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
   2384e:	edd7 7a06 	vldr	s15, [r7, #24]
   23852:	ee37 7a67 	vsub.f32	s14, s14, s15
   23856:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
   2385a:	ee67 7a27 	vmul.f32	s15, s14, s15
   2385e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
   23862:	ee77 7a67 	vsub.f32	s15, s14, s15
   23866:	e01d      	b.n	238a4 <__ieee754_logf+0x35c>
   23868:	ed9f 7a16 	vldr	s14, [pc, #88]	; 238c4 <__ieee754_logf+0x37c>
   2386c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
   23870:	ee27 7a27 	vmul.f32	s14, s14, s15
   23874:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
   23878:	edd7 7a06 	vldr	s15, [r7, #24]
   2387c:	ee76 6ae7 	vsub.f32	s13, s13, s15
   23880:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
   23884:	ee66 6aa7 	vmul.f32	s13, s13, s15
   23888:	ed9f 6a0f 	vldr	s12, [pc, #60]	; 238c8 <__ieee754_logf+0x380>
   2388c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
   23890:	ee66 7a27 	vmul.f32	s15, s12, s15
   23894:	ee76 6ae7 	vsub.f32	s13, s13, s15
   23898:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
   2389c:	ee76 7ae7 	vsub.f32	s15, s13, s15
   238a0:	ee77 7a67 	vsub.f32	s15, s14, s15
   238a4:	ee17 3a90 	vmov	r3, s15
   238a8:	4618      	mov	r0, r3
   238aa:	374c      	adds	r7, #76	; 0x4c
   238ac:	46bd      	mov	sp, r7
   238ae:	f85d 7b04 	ldr.w	r7, [sp], #4
   238b2:	4770      	bx	lr
   238b4:	4c000000 	.word	0x4c000000
   238b8:	00000000 	.word	0x00000000
   238bc:	004afb20 	.word	0x004afb20
   238c0:	007ffff0 	.word	0x007ffff0
   238c4:	3f317180 	.word	0x3f317180
   238c8:	3717f7d1 	.word	0x3717f7d1
   238cc:	3eaaaaab 	.word	0x3eaaaaab
   238d0:	ffcf5c30 	.word	0xffcf5c30
   238d4:	0035c288 	.word	0x0035c288
   238d8:	3e1cd04f 	.word	0x3e1cd04f
   238dc:	3e638e29 	.word	0x3e638e29
   238e0:	3ecccccd 	.word	0x3ecccccd
   238e4:	3e178897 	.word	0x3e178897
   238e8:	3e3a3325 	.word	0x3e3a3325
   238ec:	3e924925 	.word	0x3e924925
   238f0:	3f2aaaab 	.word	0x3f2aaaab

000238f4 <__ieee754_rem_pio2f>:
   238f4:	b580      	push	{r7, lr}
   238f6:	b098      	sub	sp, #96	; 0x60
   238f8:	af02      	add	r7, sp, #8
   238fa:	6078      	str	r0, [r7, #4]
   238fc:	6039      	str	r1, [r7, #0]
   238fe:	687b      	ldr	r3, [r7, #4]
   23900:	617b      	str	r3, [r7, #20]
   23902:	697b      	ldr	r3, [r7, #20]
   23904:	643b      	str	r3, [r7, #64]	; 0x40
   23906:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   23908:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   2390c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2390e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   23910:	4ad0      	ldr	r2, [pc, #832]	; (23c54 <__ieee754_rem_pio2f+0x360>)
   23912:	4293      	cmp	r3, r2
   23914:	dc09      	bgt.n	2392a <__ieee754_rem_pio2f+0x36>
   23916:	683b      	ldr	r3, [r7, #0]
   23918:	687a      	ldr	r2, [r7, #4]
   2391a:	601a      	str	r2, [r3, #0]
   2391c:	683b      	ldr	r3, [r7, #0]
   2391e:	3304      	adds	r3, #4
   23920:	f04f 0200 	mov.w	r2, #0
   23924:	601a      	str	r2, [r3, #0]
   23926:	2300      	movs	r3, #0
   23928:	e232      	b.n	23d90 <__ieee754_rem_pio2f+0x49c>
   2392a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2392c:	4aca      	ldr	r2, [pc, #808]	; (23c58 <__ieee754_rem_pio2f+0x364>)
   2392e:	4293      	cmp	r3, r2
   23930:	f300 8096 	bgt.w	23a60 <__ieee754_rem_pio2f+0x16c>
   23934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   23936:	2b00      	cmp	r3, #0
   23938:	dd48      	ble.n	239cc <__ieee754_rem_pio2f+0xd8>
   2393a:	ed9f 7ac8 	vldr	s14, [pc, #800]	; 23c5c <__ieee754_rem_pio2f+0x368>
   2393e:	edd7 7a01 	vldr	s15, [r7, #4]
   23942:	ee77 7ac7 	vsub.f32	s15, s15, s14
   23946:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
   2394a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2394c:	f023 030f 	bic.w	r3, r3, #15
   23950:	4ac3      	ldr	r2, [pc, #780]	; (23c60 <__ieee754_rem_pio2f+0x36c>)
   23952:	4293      	cmp	r3, r2
   23954:	d018      	beq.n	23988 <__ieee754_rem_pio2f+0x94>
   23956:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 23c64 <__ieee754_rem_pio2f+0x370>
   2395a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
   2395e:	ee77 7ac7 	vsub.f32	s15, s15, s14
   23962:	683b      	ldr	r3, [r7, #0]
   23964:	edc3 7a00 	vstr	s15, [r3]
   23968:	683b      	ldr	r3, [r7, #0]
   2396a:	edd3 7a00 	vldr	s15, [r3]
   2396e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
   23972:	ee77 7a67 	vsub.f32	s15, s14, s15
   23976:	ed9f 7abb 	vldr	s14, [pc, #748]	; 23c64 <__ieee754_rem_pio2f+0x370>
   2397a:	683b      	ldr	r3, [r7, #0]
   2397c:	3304      	adds	r3, #4
   2397e:	ee77 7ac7 	vsub.f32	s15, s15, s14
   23982:	edc3 7a00 	vstr	s15, [r3]
   23986:	e01f      	b.n	239c8 <__ieee754_rem_pio2f+0xd4>
   23988:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 23c68 <__ieee754_rem_pio2f+0x374>
   2398c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
   23990:	ee77 7ac7 	vsub.f32	s15, s15, s14
   23994:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
   23998:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 23c6c <__ieee754_rem_pio2f+0x378>
   2399c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
   239a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
   239a4:	683b      	ldr	r3, [r7, #0]
   239a6:	edc3 7a00 	vstr	s15, [r3]
   239aa:	683b      	ldr	r3, [r7, #0]
   239ac:	edd3 7a00 	vldr	s15, [r3]
   239b0:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
   239b4:	ee77 7a67 	vsub.f32	s15, s14, s15
   239b8:	ed9f 7aac 	vldr	s14, [pc, #688]	; 23c6c <__ieee754_rem_pio2f+0x378>
   239bc:	683b      	ldr	r3, [r7, #0]
   239be:	3304      	adds	r3, #4
   239c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
   239c4:	edc3 7a00 	vstr	s15, [r3]
   239c8:	2301      	movs	r3, #1
   239ca:	e1e1      	b.n	23d90 <__ieee754_rem_pio2f+0x49c>
   239cc:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 23c5c <__ieee754_rem_pio2f+0x368>
   239d0:	edd7 7a01 	vldr	s15, [r7, #4]
   239d4:	ee77 7a87 	vadd.f32	s15, s15, s14
   239d8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
   239dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   239de:	f023 030f 	bic.w	r3, r3, #15
   239e2:	4a9f      	ldr	r2, [pc, #636]	; (23c60 <__ieee754_rem_pio2f+0x36c>)
   239e4:	4293      	cmp	r3, r2
   239e6:	d018      	beq.n	23a1a <__ieee754_rem_pio2f+0x126>
   239e8:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 23c64 <__ieee754_rem_pio2f+0x370>
   239ec:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
   239f0:	ee77 7a27 	vadd.f32	s15, s14, s15
   239f4:	683b      	ldr	r3, [r7, #0]
   239f6:	edc3 7a00 	vstr	s15, [r3]
   239fa:	683b      	ldr	r3, [r7, #0]
   239fc:	edd3 7a00 	vldr	s15, [r3]
   23a00:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
   23a04:	ee77 7a67 	vsub.f32	s15, s14, s15
   23a08:	ed9f 7a96 	vldr	s14, [pc, #600]	; 23c64 <__ieee754_rem_pio2f+0x370>
   23a0c:	683b      	ldr	r3, [r7, #0]
   23a0e:	3304      	adds	r3, #4
   23a10:	ee77 7a87 	vadd.f32	s15, s15, s14
   23a14:	edc3 7a00 	vstr	s15, [r3]
   23a18:	e01f      	b.n	23a5a <__ieee754_rem_pio2f+0x166>
   23a1a:	ed9f 7a93 	vldr	s14, [pc, #588]	; 23c68 <__ieee754_rem_pio2f+0x374>
   23a1e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
   23a22:	ee77 7a87 	vadd.f32	s15, s15, s14
   23a26:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
   23a2a:	ed9f 7a90 	vldr	s14, [pc, #576]	; 23c6c <__ieee754_rem_pio2f+0x378>
   23a2e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
   23a32:	ee77 7a27 	vadd.f32	s15, s14, s15
   23a36:	683b      	ldr	r3, [r7, #0]
   23a38:	edc3 7a00 	vstr	s15, [r3]
   23a3c:	683b      	ldr	r3, [r7, #0]
   23a3e:	edd3 7a00 	vldr	s15, [r3]
   23a42:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
   23a46:	ee77 7a67 	vsub.f32	s15, s14, s15
   23a4a:	ed9f 7a88 	vldr	s14, [pc, #544]	; 23c6c <__ieee754_rem_pio2f+0x378>
   23a4e:	683b      	ldr	r3, [r7, #0]
   23a50:	3304      	adds	r3, #4
   23a52:	ee77 7a87 	vadd.f32	s15, s15, s14
   23a56:	edc3 7a00 	vstr	s15, [r3]
   23a5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23a5e:	e197      	b.n	23d90 <__ieee754_rem_pio2f+0x49c>
   23a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   23a62:	4a83      	ldr	r2, [pc, #524]	; (23c70 <__ieee754_rem_pio2f+0x37c>)
   23a64:	4293      	cmp	r3, r2
   23a66:	f300 8111 	bgt.w	23c8c <__ieee754_rem_pio2f+0x398>
   23a6a:	6878      	ldr	r0, [r7, #4]
   23a6c:	f00d f948 	bl	30d00 <fabsf>
   23a70:	6338      	str	r0, [r7, #48]	; 0x30
   23a72:	ed9f 7a80 	vldr	s14, [pc, #512]	; 23c74 <__ieee754_rem_pio2f+0x380>
   23a76:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
   23a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
   23a7e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   23a82:	ee77 7a87 	vadd.f32	s15, s15, s14
   23a86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   23a8a:	ee17 3a90 	vmov	r3, s15
   23a8e:	637b      	str	r3, [r7, #52]	; 0x34
   23a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   23a92:	ee07 3a90 	vmov	s15, r3
   23a96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   23a9a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
   23a9e:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 23c5c <__ieee754_rem_pio2f+0x368>
   23aa2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   23aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
   23aaa:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
   23aae:	ee77 7a67 	vsub.f32	s15, s14, s15
   23ab2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
   23ab6:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 23c64 <__ieee754_rem_pio2f+0x370>
   23aba:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   23abe:	ee67 7a87 	vmul.f32	s15, s15, s14
   23ac2:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
   23ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   23ac8:	2b1f      	cmp	r3, #31
   23aca:	dc13      	bgt.n	23af4 <__ieee754_rem_pio2f+0x200>
   23acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   23ace:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   23ad2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   23ad4:	3a01      	subs	r2, #1
   23ad6:	4968      	ldr	r1, [pc, #416]	; (23c78 <__ieee754_rem_pio2f+0x384>)
   23ad8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   23adc:	4293      	cmp	r3, r2
   23ade:	d009      	beq.n	23af4 <__ieee754_rem_pio2f+0x200>
   23ae0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
   23ae4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
   23ae8:	ee77 7a67 	vsub.f32	s15, s14, s15
   23aec:	683b      	ldr	r3, [r7, #0]
   23aee:	edc3 7a00 	vstr	s15, [r3]
   23af2:	e085      	b.n	23c00 <__ieee754_rem_pio2f+0x30c>
   23af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   23af6:	15db      	asrs	r3, r3, #23
   23af8:	62bb      	str	r3, [r7, #40]	; 0x28
   23afa:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
   23afe:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
   23b02:	ee77 7a67 	vsub.f32	s15, s14, s15
   23b06:	683b      	ldr	r3, [r7, #0]
   23b08:	edc3 7a00 	vstr	s15, [r3]
   23b0c:	683b      	ldr	r3, [r7, #0]
   23b0e:	681b      	ldr	r3, [r3, #0]
   23b10:	613b      	str	r3, [r7, #16]
   23b12:	693b      	ldr	r3, [r7, #16]
   23b14:	627b      	str	r3, [r7, #36]	; 0x24
   23b16:	6aba      	ldr	r2, [r7, #40]	; 0x28
   23b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   23b1a:	0ddb      	lsrs	r3, r3, #23
   23b1c:	b2db      	uxtb	r3, r3
   23b1e:	1ad3      	subs	r3, r2, r3
   23b20:	64bb      	str	r3, [r7, #72]	; 0x48
   23b22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23b24:	2b08      	cmp	r3, #8
   23b26:	dd6b      	ble.n	23c00 <__ieee754_rem_pio2f+0x30c>
   23b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   23b2a:	633b      	str	r3, [r7, #48]	; 0x30
   23b2c:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 23c68 <__ieee754_rem_pio2f+0x374>
   23b30:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   23b34:	ee67 7a87 	vmul.f32	s15, s15, s14
   23b38:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
   23b3c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
   23b40:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
   23b44:	ee77 7a67 	vsub.f32	s15, s14, s15
   23b48:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
   23b4c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 23c6c <__ieee754_rem_pio2f+0x378>
   23b50:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   23b54:	ee27 7a27 	vmul.f32	s14, s14, s15
   23b58:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
   23b5c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
   23b60:	ee76 6ae7 	vsub.f32	s13, s13, s15
   23b64:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
   23b68:	ee76 7ae7 	vsub.f32	s15, s13, s15
   23b6c:	ee77 7a67 	vsub.f32	s15, s14, s15
   23b70:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
   23b74:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
   23b78:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
   23b7c:	ee77 7a67 	vsub.f32	s15, s14, s15
   23b80:	683b      	ldr	r3, [r7, #0]
   23b82:	edc3 7a00 	vstr	s15, [r3]
   23b86:	683b      	ldr	r3, [r7, #0]
   23b88:	681b      	ldr	r3, [r3, #0]
   23b8a:	60fb      	str	r3, [r7, #12]
   23b8c:	68fb      	ldr	r3, [r7, #12]
   23b8e:	627b      	str	r3, [r7, #36]	; 0x24
   23b90:	6aba      	ldr	r2, [r7, #40]	; 0x28
   23b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   23b94:	0ddb      	lsrs	r3, r3, #23
   23b96:	b2db      	uxtb	r3, r3
   23b98:	1ad3      	subs	r3, r2, r3
   23b9a:	64bb      	str	r3, [r7, #72]	; 0x48
   23b9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23b9e:	2b19      	cmp	r3, #25
   23ba0:	dd2e      	ble.n	23c00 <__ieee754_rem_pio2f+0x30c>
   23ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   23ba4:	633b      	str	r3, [r7, #48]	; 0x30
   23ba6:	ed9f 7a35 	vldr	s14, [pc, #212]	; 23c7c <__ieee754_rem_pio2f+0x388>
   23baa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   23bae:	ee67 7a87 	vmul.f32	s15, s15, s14
   23bb2:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
   23bb6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
   23bba:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
   23bbe:	ee77 7a67 	vsub.f32	s15, s14, s15
   23bc2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
   23bc6:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 23c80 <__ieee754_rem_pio2f+0x38c>
   23bca:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   23bce:	ee27 7a27 	vmul.f32	s14, s14, s15
   23bd2:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
   23bd6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
   23bda:	ee76 6ae7 	vsub.f32	s13, s13, s15
   23bde:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
   23be2:	ee76 7ae7 	vsub.f32	s15, s13, s15
   23be6:	ee77 7a67 	vsub.f32	s15, s14, s15
   23bea:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
   23bee:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
   23bf2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
   23bf6:	ee77 7a67 	vsub.f32	s15, s14, s15
   23bfa:	683b      	ldr	r3, [r7, #0]
   23bfc:	edc3 7a00 	vstr	s15, [r3]
   23c00:	683b      	ldr	r3, [r7, #0]
   23c02:	edd3 7a00 	vldr	s15, [r3]
   23c06:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
   23c0a:	ee37 7a67 	vsub.f32	s14, s14, s15
   23c0e:	683b      	ldr	r3, [r7, #0]
   23c10:	3304      	adds	r3, #4
   23c12:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
   23c16:	ee77 7a67 	vsub.f32	s15, s14, s15
   23c1a:	edc3 7a00 	vstr	s15, [r3]
   23c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   23c20:	2b00      	cmp	r3, #0
   23c22:	da14      	bge.n	23c4e <__ieee754_rem_pio2f+0x35a>
   23c24:	683b      	ldr	r3, [r7, #0]
   23c26:	edd3 7a00 	vldr	s15, [r3]
   23c2a:	eef1 7a67 	vneg.f32	s15, s15
   23c2e:	683b      	ldr	r3, [r7, #0]
   23c30:	edc3 7a00 	vstr	s15, [r3]
   23c34:	683b      	ldr	r3, [r7, #0]
   23c36:	3304      	adds	r3, #4
   23c38:	edd3 7a00 	vldr	s15, [r3]
   23c3c:	683b      	ldr	r3, [r7, #0]
   23c3e:	3304      	adds	r3, #4
   23c40:	eef1 7a67 	vneg.f32	s15, s15
   23c44:	edc3 7a00 	vstr	s15, [r3]
   23c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   23c4a:	425b      	negs	r3, r3
   23c4c:	e0a0      	b.n	23d90 <__ieee754_rem_pio2f+0x49c>
   23c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   23c50:	e09e      	b.n	23d90 <__ieee754_rem_pio2f+0x49c>
   23c52:	bf00      	nop
   23c54:	3f490fd8 	.word	0x3f490fd8
   23c58:	4016cbe3 	.word	0x4016cbe3
   23c5c:	3fc90f80 	.word	0x3fc90f80
   23c60:	3fc90fd0 	.word	0x3fc90fd0
   23c64:	37354443 	.word	0x37354443
   23c68:	37354400 	.word	0x37354400
   23c6c:	2e85a308 	.word	0x2e85a308
   23c70:	43490f80 	.word	0x43490f80
   23c74:	3f22f984 	.word	0x3f22f984
   23c78:	00033624 	.word	0x00033624
   23c7c:	2e85a300 	.word	0x2e85a300
   23c80:	248d3132 	.word	0x248d3132
   23c84:	43800000 	.word	0x43800000
   23c88:	00000000 	.word	0x00000000
   23c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   23c8e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   23c92:	db0c      	blt.n	23cae <__ieee754_rem_pio2f+0x3ba>
   23c94:	683b      	ldr	r3, [r7, #0]
   23c96:	3304      	adds	r3, #4
   23c98:	edd7 7a01 	vldr	s15, [r7, #4]
   23c9c:	ee77 7ae7 	vsub.f32	s15, s15, s15
   23ca0:	edc3 7a00 	vstr	s15, [r3]
   23ca4:	681a      	ldr	r2, [r3, #0]
   23ca6:	683b      	ldr	r3, [r7, #0]
   23ca8:	601a      	str	r2, [r3, #0]
   23caa:	2300      	movs	r3, #0
   23cac:	e070      	b.n	23d90 <__ieee754_rem_pio2f+0x49c>
   23cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   23cb0:	15db      	asrs	r3, r3, #23
   23cb2:	3b86      	subs	r3, #134	; 0x86
   23cb4:	63bb      	str	r3, [r7, #56]	; 0x38
   23cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   23cb8:	05db      	lsls	r3, r3, #23
   23cba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   23cbc:	1ad3      	subs	r3, r2, r3
   23cbe:	60bb      	str	r3, [r7, #8]
   23cc0:	68bb      	ldr	r3, [r7, #8]
   23cc2:	657b      	str	r3, [r7, #84]	; 0x54
   23cc4:	2300      	movs	r3, #0
   23cc6:	64bb      	str	r3, [r7, #72]	; 0x48
   23cc8:	e022      	b.n	23d10 <__ieee754_rem_pio2f+0x41c>
   23cca:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
   23cce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   23cd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   23cd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23cd8:	009b      	lsls	r3, r3, #2
   23cda:	f107 0258 	add.w	r2, r7, #88	; 0x58
   23cde:	4413      	add	r3, r2
   23ce0:	3b40      	subs	r3, #64	; 0x40
   23ce2:	edc3 7a00 	vstr	s15, [r3]
   23ce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23ce8:	009b      	lsls	r3, r3, #2
   23cea:	f107 0258 	add.w	r2, r7, #88	; 0x58
   23cee:	4413      	add	r3, r2
   23cf0:	3b40      	subs	r3, #64	; 0x40
   23cf2:	edd3 7a00 	vldr	s15, [r3]
   23cf6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
   23cfa:	ee77 7a67 	vsub.f32	s15, s14, s15
   23cfe:	ed1f 7a1f 	vldr	s14, [pc, #-124]	; 23c84 <__ieee754_rem_pio2f+0x390>
   23d02:	ee67 7a87 	vmul.f32	s15, s15, s14
   23d06:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
   23d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23d0c:	3301      	adds	r3, #1
   23d0e:	64bb      	str	r3, [r7, #72]	; 0x48
   23d10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23d12:	2b01      	cmp	r3, #1
   23d14:	ddd9      	ble.n	23cca <__ieee754_rem_pio2f+0x3d6>
   23d16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   23d18:	623b      	str	r3, [r7, #32]
   23d1a:	2303      	movs	r3, #3
   23d1c:	647b      	str	r3, [r7, #68]	; 0x44
   23d1e:	e002      	b.n	23d26 <__ieee754_rem_pio2f+0x432>
   23d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   23d22:	3b01      	subs	r3, #1
   23d24:	647b      	str	r3, [r7, #68]	; 0x44
   23d26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   23d28:	3b01      	subs	r3, #1
   23d2a:	009b      	lsls	r3, r3, #2
   23d2c:	f107 0258 	add.w	r2, r7, #88	; 0x58
   23d30:	4413      	add	r3, r2
   23d32:	3b40      	subs	r3, #64	; 0x40
   23d34:	edd3 7a00 	vldr	s15, [r3]
   23d38:	ed1f 7a2d 	vldr	s14, [pc, #-180]	; 23c88 <__ieee754_rem_pio2f+0x394>
   23d3c:	eef4 7a47 	vcmp.f32	s15, s14
   23d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   23d44:	d0ec      	beq.n	23d20 <__ieee754_rem_pio2f+0x42c>
   23d46:	f107 0018 	add.w	r0, r7, #24
   23d4a:	4b13      	ldr	r3, [pc, #76]	; (23d98 <__ieee754_rem_pio2f+0x4a4>)
   23d4c:	9301      	str	r3, [sp, #4]
   23d4e:	2302      	movs	r3, #2
   23d50:	9300      	str	r3, [sp, #0]
   23d52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   23d54:	6bba      	ldr	r2, [r7, #56]	; 0x38
   23d56:	6839      	ldr	r1, [r7, #0]
   23d58:	f000 f8e2 	bl	23f20 <__kernel_rem_pio2f>
   23d5c:	6378      	str	r0, [r7, #52]	; 0x34
   23d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   23d60:	2b00      	cmp	r3, #0
   23d62:	da14      	bge.n	23d8e <__ieee754_rem_pio2f+0x49a>
   23d64:	683b      	ldr	r3, [r7, #0]
   23d66:	edd3 7a00 	vldr	s15, [r3]
   23d6a:	eef1 7a67 	vneg.f32	s15, s15
   23d6e:	683b      	ldr	r3, [r7, #0]
   23d70:	edc3 7a00 	vstr	s15, [r3]
   23d74:	683b      	ldr	r3, [r7, #0]
   23d76:	3304      	adds	r3, #4
   23d78:	edd3 7a00 	vldr	s15, [r3]
   23d7c:	683b      	ldr	r3, [r7, #0]
   23d7e:	3304      	adds	r3, #4
   23d80:	eef1 7a67 	vneg.f32	s15, s15
   23d84:	edc3 7a00 	vstr	s15, [r3]
   23d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   23d8a:	425b      	negs	r3, r3
   23d8c:	e000      	b.n	23d90 <__ieee754_rem_pio2f+0x49c>
   23d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   23d90:	4618      	mov	r0, r3
   23d92:	3758      	adds	r7, #88	; 0x58
   23d94:	46bd      	mov	sp, r7
   23d96:	bd80      	pop	{r7, pc}
   23d98:	0003330c 	.word	0x0003330c

00023d9c <__kernel_cosf>:
   23d9c:	b480      	push	{r7}
   23d9e:	b08b      	sub	sp, #44	; 0x2c
   23da0:	af00      	add	r7, sp, #0
   23da2:	6078      	str	r0, [r7, #4]
   23da4:	6039      	str	r1, [r7, #0]
   23da6:	687b      	ldr	r3, [r7, #4]
   23da8:	60fb      	str	r3, [r7, #12]
   23daa:	68fb      	ldr	r3, [r7, #12]
   23dac:	623b      	str	r3, [r7, #32]
   23dae:	6a3b      	ldr	r3, [r7, #32]
   23db0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   23db4:	623b      	str	r3, [r7, #32]
   23db6:	6a3b      	ldr	r3, [r7, #32]
   23db8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   23dbc:	da0a      	bge.n	23dd4 <__kernel_cosf+0x38>
   23dbe:	edd7 7a01 	vldr	s15, [r7, #4]
   23dc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   23dc6:	ee17 3a90 	vmov	r3, s15
   23dca:	2b00      	cmp	r3, #0
   23dcc:	d102      	bne.n	23dd4 <__kernel_cosf+0x38>
   23dce:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   23dd2:	e08b      	b.n	23eec <__kernel_cosf+0x150>
   23dd4:	edd7 7a01 	vldr	s15, [r7, #4]
   23dd8:	ee67 7aa7 	vmul.f32	s15, s15, s15
   23ddc:	edc7 7a07 	vstr	s15, [r7, #28]
   23de0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 23efc <__kernel_cosf+0x160>
   23de4:	edd7 7a07 	vldr	s15, [r7, #28]
   23de8:	ee67 7a27 	vmul.f32	s15, s14, s15
   23dec:	ed9f 7a44 	vldr	s14, [pc, #272]	; 23f00 <__kernel_cosf+0x164>
   23df0:	ee37 7a87 	vadd.f32	s14, s15, s14
   23df4:	edd7 7a07 	vldr	s15, [r7, #28]
   23df8:	ee67 7a27 	vmul.f32	s15, s14, s15
   23dfc:	ed9f 7a41 	vldr	s14, [pc, #260]	; 23f04 <__kernel_cosf+0x168>
   23e00:	ee37 7a87 	vadd.f32	s14, s15, s14
   23e04:	edd7 7a07 	vldr	s15, [r7, #28]
   23e08:	ee67 7a27 	vmul.f32	s15, s14, s15
   23e0c:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 23f08 <__kernel_cosf+0x16c>
   23e10:	ee37 7a87 	vadd.f32	s14, s15, s14
   23e14:	edd7 7a07 	vldr	s15, [r7, #28]
   23e18:	ee67 7a27 	vmul.f32	s15, s14, s15
   23e1c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 23f0c <__kernel_cosf+0x170>
   23e20:	ee37 7a87 	vadd.f32	s14, s15, s14
   23e24:	edd7 7a07 	vldr	s15, [r7, #28]
   23e28:	ee67 7a27 	vmul.f32	s15, s14, s15
   23e2c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 23f10 <__kernel_cosf+0x174>
   23e30:	ee77 7a87 	vadd.f32	s15, s15, s14
   23e34:	ed97 7a07 	vldr	s14, [r7, #28]
   23e38:	ee67 7a27 	vmul.f32	s15, s14, s15
   23e3c:	edc7 7a06 	vstr	s15, [r7, #24]
   23e40:	6a3b      	ldr	r3, [r7, #32]
   23e42:	4a34      	ldr	r2, [pc, #208]	; (23f14 <__kernel_cosf+0x178>)
   23e44:	4293      	cmp	r3, r2
   23e46:	dc1a      	bgt.n	23e7e <__kernel_cosf+0xe2>
   23e48:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   23e4c:	edd7 7a07 	vldr	s15, [r7, #28]
   23e50:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   23e54:	ee27 7a87 	vmul.f32	s14, s15, s14
   23e58:	edd7 6a07 	vldr	s13, [r7, #28]
   23e5c:	edd7 7a06 	vldr	s15, [r7, #24]
   23e60:	ee66 6aa7 	vmul.f32	s13, s13, s15
   23e64:	ed97 6a01 	vldr	s12, [r7, #4]
   23e68:	edd7 7a00 	vldr	s15, [r7]
   23e6c:	ee66 7a27 	vmul.f32	s15, s12, s15
   23e70:	ee76 7ae7 	vsub.f32	s15, s13, s15
   23e74:	ee77 7a67 	vsub.f32	s15, s14, s15
   23e78:	ee75 7ae7 	vsub.f32	s15, s11, s15
   23e7c:	e036      	b.n	23eec <__kernel_cosf+0x150>
   23e7e:	6a3b      	ldr	r3, [r7, #32]
   23e80:	4a25      	ldr	r2, [pc, #148]	; (23f18 <__kernel_cosf+0x17c>)
   23e82:	4293      	cmp	r3, r2
   23e84:	dd02      	ble.n	23e8c <__kernel_cosf+0xf0>
   23e86:	4b25      	ldr	r3, [pc, #148]	; (23f1c <__kernel_cosf+0x180>)
   23e88:	627b      	str	r3, [r7, #36]	; 0x24
   23e8a:	e005      	b.n	23e98 <__kernel_cosf+0xfc>
   23e8c:	6a3b      	ldr	r3, [r7, #32]
   23e8e:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
   23e92:	60bb      	str	r3, [r7, #8]
   23e94:	68bb      	ldr	r3, [r7, #8]
   23e96:	627b      	str	r3, [r7, #36]	; 0x24
   23e98:	edd7 7a07 	vldr	s15, [r7, #28]
   23e9c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   23ea0:	ee27 7a87 	vmul.f32	s14, s15, s14
   23ea4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
   23ea8:	ee77 7a67 	vsub.f32	s15, s14, s15
   23eac:	edc7 7a05 	vstr	s15, [r7, #20]
   23eb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   23eb4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
   23eb8:	ee77 7a67 	vsub.f32	s15, s14, s15
   23ebc:	edc7 7a04 	vstr	s15, [r7, #16]
   23ec0:	ed97 7a07 	vldr	s14, [r7, #28]
   23ec4:	edd7 7a06 	vldr	s15, [r7, #24]
   23ec8:	ee27 7a27 	vmul.f32	s14, s14, s15
   23ecc:	edd7 6a01 	vldr	s13, [r7, #4]
   23ed0:	edd7 7a00 	vldr	s15, [r7]
   23ed4:	ee66 7aa7 	vmul.f32	s15, s13, s15
   23ed8:	ee77 7a67 	vsub.f32	s15, s14, s15
   23edc:	ed97 7a05 	vldr	s14, [r7, #20]
   23ee0:	ee77 7a67 	vsub.f32	s15, s14, s15
   23ee4:	ed97 7a04 	vldr	s14, [r7, #16]
   23ee8:	ee77 7a67 	vsub.f32	s15, s14, s15
   23eec:	ee17 3a90 	vmov	r3, s15
   23ef0:	4618      	mov	r0, r3
   23ef2:	372c      	adds	r7, #44	; 0x2c
   23ef4:	46bd      	mov	sp, r7
   23ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
   23efa:	4770      	bx	lr
   23efc:	ad47d74e 	.word	0xad47d74e
   23f00:	310f74f6 	.word	0x310f74f6
   23f04:	b493f27c 	.word	0xb493f27c
   23f08:	37d00d01 	.word	0x37d00d01
   23f0c:	bab60b61 	.word	0xbab60b61
   23f10:	3d2aaaab 	.word	0x3d2aaaab
   23f14:	3e999999 	.word	0x3e999999
   23f18:	3f480000 	.word	0x3f480000
   23f1c:	3e900000 	.word	0x3e900000

00023f20 <__kernel_rem_pio2f>:
   23f20:	b590      	push	{r4, r7, lr}
   23f22:	b0e5      	sub	sp, #404	; 0x194
   23f24:	af00      	add	r7, sp, #0
   23f26:	f107 040c 	add.w	r4, r7, #12
   23f2a:	6020      	str	r0, [r4, #0]
   23f2c:	f107 0008 	add.w	r0, r7, #8
   23f30:	6001      	str	r1, [r0, #0]
   23f32:	1d39      	adds	r1, r7, #4
   23f34:	600a      	str	r2, [r1, #0]
   23f36:	463a      	mov	r2, r7
   23f38:	6013      	str	r3, [r2, #0]
   23f3a:	4ae9      	ldr	r2, [pc, #932]	; (242e0 <__kernel_rem_pio2f+0x3c0>)
   23f3c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
   23f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   23f44:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   23f48:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
   23f4c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   23f50:	463b      	mov	r3, r7
   23f52:	681b      	ldr	r3, [r3, #0]
   23f54:	3b01      	subs	r3, #1
   23f56:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   23f5a:	1d3b      	adds	r3, r7, #4
   23f5c:	681b      	ldr	r3, [r3, #0]
   23f5e:	3b03      	subs	r3, #3
   23f60:	2b00      	cmp	r3, #0
   23f62:	da00      	bge.n	23f66 <__kernel_rem_pio2f+0x46>
   23f64:	3307      	adds	r3, #7
   23f66:	10db      	asrs	r3, r3, #3
   23f68:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   23f6c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
   23f70:	2b00      	cmp	r3, #0
   23f72:	da02      	bge.n	23f7a <__kernel_rem_pio2f+0x5a>
   23f74:	2300      	movs	r3, #0
   23f76:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   23f7a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
   23f7e:	3301      	adds	r3, #1
   23f80:	00db      	lsls	r3, r3, #3
   23f82:	1d3a      	adds	r2, r7, #4
   23f84:	6812      	ldr	r2, [r2, #0]
   23f86:	1ad3      	subs	r3, r2, r3
   23f88:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
   23f8c:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
   23f90:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
   23f94:	1ad3      	subs	r3, r2, r3
   23f96:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
   23f9a:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
   23f9e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
   23fa2:	4413      	add	r3, r2
   23fa4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
   23fa8:	2300      	movs	r3, #0
   23faa:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   23fae:	e024      	b.n	23ffa <__kernel_rem_pio2f+0xda>
   23fb0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   23fb4:	2b00      	cmp	r3, #0
   23fb6:	db0b      	blt.n	23fd0 <__kernel_rem_pio2f+0xb0>
   23fb8:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   23fbc:	009b      	lsls	r3, r3, #2
   23fbe:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
   23fc2:	4413      	add	r3, r2
   23fc4:	681b      	ldr	r3, [r3, #0]
   23fc6:	ee07 3a90 	vmov	s15, r3
   23fca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   23fce:	e001      	b.n	23fd4 <__kernel_rem_pio2f+0xb4>
   23fd0:	eddf 7ac4 	vldr	s15, [pc, #784]	; 242e4 <__kernel_rem_pio2f+0x3c4>
   23fd4:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   23fd8:	009b      	lsls	r3, r3, #2
   23fda:	f507 72c8 	add.w	r2, r7, #400	; 0x190
   23fde:	4413      	add	r3, r2
   23fe0:	3bdc      	subs	r3, #220	; 0xdc
   23fe2:	edc3 7a00 	vstr	s15, [r3]
   23fe6:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   23fea:	3301      	adds	r3, #1
   23fec:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   23ff0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   23ff4:	3301      	adds	r3, #1
   23ff6:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
   23ffa:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
   23ffe:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
   24002:	429a      	cmp	r2, r3
   24004:	ddd4      	ble.n	23fb0 <__kernel_rem_pio2f+0x90>
   24006:	2300      	movs	r3, #0
   24008:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   2400c:	e040      	b.n	24090 <__kernel_rem_pio2f+0x170>
   2400e:	2300      	movs	r3, #0
   24010:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
   24014:	f04f 0300 	mov.w	r3, #0
   24018:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   2401c:	e024      	b.n	24068 <__kernel_rem_pio2f+0x148>
   2401e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   24022:	009b      	lsls	r3, r3, #2
   24024:	f107 020c 	add.w	r2, r7, #12
   24028:	6812      	ldr	r2, [r2, #0]
   2402a:	4413      	add	r3, r2
   2402c:	ed93 7a00 	vldr	s14, [r3]
   24030:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
   24034:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24038:	441a      	add	r2, r3
   2403a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   2403e:	1ad3      	subs	r3, r2, r3
   24040:	009b      	lsls	r3, r3, #2
   24042:	f507 72c8 	add.w	r2, r7, #400	; 0x190
   24046:	4413      	add	r3, r2
   24048:	3bdc      	subs	r3, #220	; 0xdc
   2404a:	edd3 7a00 	vldr	s15, [r3]
   2404e:	ee67 7a27 	vmul.f32	s15, s14, s15
   24052:	ed97 7a59 	vldr	s14, [r7, #356]	; 0x164
   24056:	ee77 7a27 	vadd.f32	s15, s14, s15
   2405a:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
   2405e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   24062:	3301      	adds	r3, #1
   24064:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
   24068:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
   2406c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
   24070:	429a      	cmp	r2, r3
   24072:	ddd4      	ble.n	2401e <__kernel_rem_pio2f+0xfe>
   24074:	f107 0214 	add.w	r2, r7, #20
   24078:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   2407c:	009b      	lsls	r3, r3, #2
   2407e:	4413      	add	r3, r2
   24080:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   24084:	601a      	str	r2, [r3, #0]
   24086:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   2408a:	3301      	adds	r3, #1
   2408c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   24090:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
   24094:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
   24098:	429a      	cmp	r2, r3
   2409a:	ddb8      	ble.n	2400e <__kernel_rem_pio2f+0xee>
   2409c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
   240a0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   240a4:	2300      	movs	r3, #0
   240a6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   240aa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   240ae:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
   240b2:	f107 0214 	add.w	r2, r7, #20
   240b6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   240ba:	009b      	lsls	r3, r3, #2
   240bc:	4413      	add	r3, r2
   240be:	681b      	ldr	r3, [r3, #0]
   240c0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   240c4:	e03a      	b.n	2413c <__kernel_rem_pio2f+0x21c>
   240c6:	ed9f 7a89 	vldr	s14, [pc, #548]	; 242ec <__kernel_rem_pio2f+0x3cc>
   240ca:	edd7 7a5a 	vldr	s15, [r7, #360]	; 0x168
   240ce:	ee67 7a27 	vmul.f32	s15, s14, s15
   240d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   240d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   240da:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
   240de:	ed9f 7a82 	vldr	s14, [pc, #520]	; 242e8 <__kernel_rem_pio2f+0x3c8>
   240e2:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
   240e6:	ee67 7a27 	vmul.f32	s15, s14, s15
   240ea:	ed97 7a5a 	vldr	s14, [r7, #360]	; 0x168
   240ee:	ee77 7a67 	vsub.f32	s15, s14, s15
   240f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   240f6:	ee17 2a90 	vmov	r2, s15
   240fa:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   240fe:	009b      	lsls	r3, r3, #2
   24100:	f507 71c8 	add.w	r1, r7, #400	; 0x190
   24104:	440b      	add	r3, r1
   24106:	f843 2c8c 	str.w	r2, [r3, #-140]
   2410a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   2410e:	3b01      	subs	r3, #1
   24110:	f107 0214 	add.w	r2, r7, #20
   24114:	009b      	lsls	r3, r3, #2
   24116:	4413      	add	r3, r2
   24118:	edd3 7a00 	vldr	s15, [r3]
   2411c:	ed97 7a59 	vldr	s14, [r7, #356]	; 0x164
   24120:	ee77 7a27 	vadd.f32	s15, s14, s15
   24124:	edc7 7a5a 	vstr	s15, [r7, #360]	; 0x168
   24128:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   2412c:	3301      	adds	r3, #1
   2412e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   24132:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   24136:	3b01      	subs	r3, #1
   24138:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
   2413c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   24140:	2b00      	cmp	r3, #0
   24142:	dcc0      	bgt.n	240c6 <__kernel_rem_pio2f+0x1a6>
   24144:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
   24148:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
   2414c:	f000 ffaa 	bl	250a4 <scalbnf>
   24150:	f8c7 0168 	str.w	r0, [r7, #360]	; 0x168
   24154:	edd7 7a5a 	vldr	s15, [r7, #360]	; 0x168
   24158:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
   2415c:	ee67 7a87 	vmul.f32	s15, s15, s14
   24160:	ee17 0a90 	vmov	r0, s15
   24164:	f00c fdfa 	bl	30d5c <floorf>
   24168:	ee07 0a10 	vmov	s14, r0
   2416c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   24170:	ee67 7a27 	vmul.f32	s15, s14, s15
   24174:	ed97 7a5a 	vldr	s14, [r7, #360]	; 0x168
   24178:	ee77 7a67 	vsub.f32	s15, s14, s15
   2417c:	edc7 7a5a 	vstr	s15, [r7, #360]	; 0x168
   24180:	edd7 7a5a 	vldr	s15, [r7, #360]	; 0x168
   24184:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   24188:	ee17 3a90 	vmov	r3, s15
   2418c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
   24190:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
   24194:	ee07 3a90 	vmov	s15, r3
   24198:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2419c:	ed97 7a5a 	vldr	s14, [r7, #360]	; 0x168
   241a0:	ee77 7a67 	vsub.f32	s15, s14, s15
   241a4:	edc7 7a5a 	vstr	s15, [r7, #360]	; 0x168
   241a8:	2300      	movs	r3, #0
   241aa:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   241ae:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   241b2:	2b00      	cmp	r3, #0
   241b4:	dd43      	ble.n	2423e <__kernel_rem_pio2f+0x31e>
   241b6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   241ba:	3b01      	subs	r3, #1
   241bc:	009b      	lsls	r3, r3, #2
   241be:	f507 72c8 	add.w	r2, r7, #400	; 0x190
   241c2:	4413      	add	r3, r2
   241c4:	f853 2c8c 	ldr.w	r2, [r3, #-140]
   241c8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   241cc:	f1c3 0308 	rsb	r3, r3, #8
   241d0:	fa42 f303 	asr.w	r3, r2, r3
   241d4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   241d8:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
   241dc:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   241e0:	4413      	add	r3, r2
   241e2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
   241e6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   241ea:	3b01      	subs	r3, #1
   241ec:	009b      	lsls	r3, r3, #2
   241ee:	f507 72c8 	add.w	r2, r7, #400	; 0x190
   241f2:	4413      	add	r3, r2
   241f4:	f853 1c8c 	ldr.w	r1, [r3, #-140]
   241f8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   241fc:	f1c3 0308 	rsb	r3, r3, #8
   24200:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
   24204:	409a      	lsls	r2, r3
   24206:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   2420a:	3b01      	subs	r3, #1
   2420c:	1a8a      	subs	r2, r1, r2
   2420e:	009b      	lsls	r3, r3, #2
   24210:	f507 71c8 	add.w	r1, r7, #400	; 0x190
   24214:	440b      	add	r3, r1
   24216:	f843 2c8c 	str.w	r2, [r3, #-140]
   2421a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   2421e:	3b01      	subs	r3, #1
   24220:	009b      	lsls	r3, r3, #2
   24222:	f507 72c8 	add.w	r2, r7, #400	; 0x190
   24226:	4413      	add	r3, r2
   24228:	f853 2c8c 	ldr.w	r2, [r3, #-140]
   2422c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   24230:	f1c3 0307 	rsb	r3, r3, #7
   24234:	fa42 f303 	asr.w	r3, r2, r3
   24238:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   2423c:	e01c      	b.n	24278 <__kernel_rem_pio2f+0x358>
   2423e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   24242:	2b00      	cmp	r3, #0
   24244:	d10c      	bne.n	24260 <__kernel_rem_pio2f+0x340>
   24246:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   2424a:	3b01      	subs	r3, #1
   2424c:	009b      	lsls	r3, r3, #2
   2424e:	f507 72c8 	add.w	r2, r7, #400	; 0x190
   24252:	4413      	add	r3, r2
   24254:	f853 3c8c 	ldr.w	r3, [r3, #-140]
   24258:	121b      	asrs	r3, r3, #8
   2425a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   2425e:	e00b      	b.n	24278 <__kernel_rem_pio2f+0x358>
   24260:	edd7 7a5a 	vldr	s15, [r7, #360]	; 0x168
   24264:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   24268:	eef4 7ac7 	vcmpe.f32	s15, s14
   2426c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   24270:	db02      	blt.n	24278 <__kernel_rem_pio2f+0x358>
   24272:	2302      	movs	r3, #2
   24274:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   24278:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
   2427c:	2b00      	cmp	r3, #0
   2427e:	f340 80a5 	ble.w	243cc <__kernel_rem_pio2f+0x4ac>
   24282:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
   24286:	3301      	adds	r3, #1
   24288:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
   2428c:	2300      	movs	r3, #0
   2428e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
   24292:	2300      	movs	r3, #0
   24294:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   24298:	e03b      	b.n	24312 <__kernel_rem_pio2f+0x3f2>
   2429a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   2429e:	009b      	lsls	r3, r3, #2
   242a0:	f507 72c8 	add.w	r2, r7, #400	; 0x190
   242a4:	4413      	add	r3, r2
   242a6:	f853 3c8c 	ldr.w	r3, [r3, #-140]
   242aa:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
   242ae:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
   242b2:	2b00      	cmp	r3, #0
   242b4:	d11c      	bne.n	242f0 <__kernel_rem_pio2f+0x3d0>
   242b6:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   242ba:	2b00      	cmp	r3, #0
   242bc:	d024      	beq.n	24308 <__kernel_rem_pio2f+0x3e8>
   242be:	2301      	movs	r3, #1
   242c0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
   242c4:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   242c8:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
   242cc:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   242d0:	009b      	lsls	r3, r3, #2
   242d2:	f507 71c8 	add.w	r1, r7, #400	; 0x190
   242d6:	440b      	add	r3, r1
   242d8:	f843 2c8c 	str.w	r2, [r3, #-140]
   242dc:	e014      	b.n	24308 <__kernel_rem_pio2f+0x3e8>
   242de:	bf00      	nop
   242e0:	000336a4 	.word	0x000336a4
   242e4:	00000000 	.word	0x00000000
   242e8:	43800000 	.word	0x43800000
   242ec:	3b800000 	.word	0x3b800000
   242f0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   242f4:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
   242f8:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   242fc:	009b      	lsls	r3, r3, #2
   242fe:	f507 71c8 	add.w	r1, r7, #400	; 0x190
   24302:	440b      	add	r3, r1
   24304:	f843 2c8c 	str.w	r2, [r3, #-140]
   24308:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   2430c:	3301      	adds	r3, #1
   2430e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   24312:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
   24316:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   2431a:	429a      	cmp	r2, r3
   2431c:	dbbd      	blt.n	2429a <__kernel_rem_pio2f+0x37a>
   2431e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   24322:	2b00      	cmp	r3, #0
   24324:	dd32      	ble.n	2438c <__kernel_rem_pio2f+0x46c>
   24326:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   2432a:	2b01      	cmp	r3, #1
   2432c:	d004      	beq.n	24338 <__kernel_rem_pio2f+0x418>
   2432e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   24332:	2b02      	cmp	r3, #2
   24334:	d015      	beq.n	24362 <__kernel_rem_pio2f+0x442>
   24336:	e02a      	b.n	2438e <__kernel_rem_pio2f+0x46e>
   24338:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   2433c:	3b01      	subs	r3, #1
   2433e:	009b      	lsls	r3, r3, #2
   24340:	f507 72c8 	add.w	r2, r7, #400	; 0x190
   24344:	4413      	add	r3, r2
   24346:	f853 2c8c 	ldr.w	r2, [r3, #-140]
   2434a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   2434e:	3b01      	subs	r3, #1
   24350:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   24354:	009b      	lsls	r3, r3, #2
   24356:	f507 71c8 	add.w	r1, r7, #400	; 0x190
   2435a:	440b      	add	r3, r1
   2435c:	f843 2c8c 	str.w	r2, [r3, #-140]
   24360:	e015      	b.n	2438e <__kernel_rem_pio2f+0x46e>
   24362:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   24366:	3b01      	subs	r3, #1
   24368:	009b      	lsls	r3, r3, #2
   2436a:	f507 72c8 	add.w	r2, r7, #400	; 0x190
   2436e:	4413      	add	r3, r2
   24370:	f853 2c8c 	ldr.w	r2, [r3, #-140]
   24374:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   24378:	3b01      	subs	r3, #1
   2437a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   2437e:	009b      	lsls	r3, r3, #2
   24380:	f507 71c8 	add.w	r1, r7, #400	; 0x190
   24384:	440b      	add	r3, r1
   24386:	f843 2c8c 	str.w	r2, [r3, #-140]
   2438a:	e000      	b.n	2438e <__kernel_rem_pio2f+0x46e>
   2438c:	bf00      	nop
   2438e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
   24392:	2b02      	cmp	r3, #2
   24394:	d11a      	bne.n	243cc <__kernel_rem_pio2f+0x4ac>
   24396:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   2439a:	edd7 7a5a 	vldr	s15, [r7, #360]	; 0x168
   2439e:	ee77 7a67 	vsub.f32	s15, s14, s15
   243a2:	edc7 7a5a 	vstr	s15, [r7, #360]	; 0x168
   243a6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
   243aa:	2b00      	cmp	r3, #0
   243ac:	d00e      	beq.n	243cc <__kernel_rem_pio2f+0x4ac>
   243ae:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   243b2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
   243b6:	4618      	mov	r0, r3
   243b8:	f000 fe74 	bl	250a4 <scalbnf>
   243bc:	ee07 0a10 	vmov	s14, r0
   243c0:	edd7 7a5a 	vldr	s15, [r7, #360]	; 0x168
   243c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
   243c8:	edc7 7a5a 	vstr	s15, [r7, #360]	; 0x168
   243cc:	ed1f 7a3b 	vldr	s14, [pc, #-236]	; 242e4 <__kernel_rem_pio2f+0x3c4>
   243d0:	edd7 7a5a 	vldr	s15, [r7, #360]	; 0x168
   243d4:	eef4 7a47 	vcmp.f32	s15, s14
   243d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   243dc:	f040 80ae 	bne.w	2453c <__kernel_rem_pio2f+0x61c>
   243e0:	2300      	movs	r3, #0
   243e2:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
   243e6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   243ea:	3b01      	subs	r3, #1
   243ec:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   243f0:	e011      	b.n	24416 <__kernel_rem_pio2f+0x4f6>
   243f2:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   243f6:	009b      	lsls	r3, r3, #2
   243f8:	f507 72c8 	add.w	r2, r7, #400	; 0x190
   243fc:	4413      	add	r3, r2
   243fe:	f853 3c8c 	ldr.w	r3, [r3, #-140]
   24402:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
   24406:	4313      	orrs	r3, r2
   24408:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
   2440c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24410:	3b01      	subs	r3, #1
   24412:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   24416:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
   2441a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
   2441e:	429a      	cmp	r2, r3
   24420:	dae7      	bge.n	243f2 <__kernel_rem_pio2f+0x4d2>
   24422:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   24426:	2b00      	cmp	r3, #0
   24428:	f040 8088 	bne.w	2453c <__kernel_rem_pio2f+0x61c>
   2442c:	2301      	movs	r3, #1
   2442e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   24432:	e004      	b.n	2443e <__kernel_rem_pio2f+0x51e>
   24434:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   24438:	3301      	adds	r3, #1
   2443a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   2443e:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
   24442:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   24446:	1ad3      	subs	r3, r2, r3
   24448:	009b      	lsls	r3, r3, #2
   2444a:	f507 72c8 	add.w	r2, r7, #400	; 0x190
   2444e:	4413      	add	r3, r2
   24450:	f853 3c8c 	ldr.w	r3, [r3, #-140]
   24454:	2b00      	cmp	r3, #0
   24456:	d0ed      	beq.n	24434 <__kernel_rem_pio2f+0x514>
   24458:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   2445c:	3301      	adds	r3, #1
   2445e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   24462:	e05a      	b.n	2451a <__kernel_rem_pio2f+0x5fa>
   24464:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
   24468:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   2446c:	4413      	add	r3, r2
   2446e:	009b      	lsls	r3, r3, #2
   24470:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
   24474:	4413      	add	r3, r2
   24476:	6819      	ldr	r1, [r3, #0]
   24478:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
   2447c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24480:	4413      	add	r3, r2
   24482:	ee07 1a90 	vmov	s15, r1
   24486:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2448a:	009b      	lsls	r3, r3, #2
   2448c:	f507 72c8 	add.w	r2, r7, #400	; 0x190
   24490:	4413      	add	r3, r2
   24492:	3bdc      	subs	r3, #220	; 0xdc
   24494:	edc3 7a00 	vstr	s15, [r3]
   24498:	2300      	movs	r3, #0
   2449a:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
   2449e:	f04f 0300 	mov.w	r3, #0
   244a2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   244a6:	e024      	b.n	244f2 <__kernel_rem_pio2f+0x5d2>
   244a8:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   244ac:	009b      	lsls	r3, r3, #2
   244ae:	f107 020c 	add.w	r2, r7, #12
   244b2:	6812      	ldr	r2, [r2, #0]
   244b4:	4413      	add	r3, r2
   244b6:	ed93 7a00 	vldr	s14, [r3]
   244ba:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
   244be:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   244c2:	441a      	add	r2, r3
   244c4:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   244c8:	1ad3      	subs	r3, r2, r3
   244ca:	009b      	lsls	r3, r3, #2
   244cc:	f507 72c8 	add.w	r2, r7, #400	; 0x190
   244d0:	4413      	add	r3, r2
   244d2:	3bdc      	subs	r3, #220	; 0xdc
   244d4:	edd3 7a00 	vldr	s15, [r3]
   244d8:	ee67 7a27 	vmul.f32	s15, s14, s15
   244dc:	ed97 7a59 	vldr	s14, [r7, #356]	; 0x164
   244e0:	ee77 7a27 	vadd.f32	s15, s14, s15
   244e4:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
   244e8:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   244ec:	3301      	adds	r3, #1
   244ee:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
   244f2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
   244f6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
   244fa:	429a      	cmp	r2, r3
   244fc:	ddd4      	ble.n	244a8 <__kernel_rem_pio2f+0x588>
   244fe:	f107 0214 	add.w	r2, r7, #20
   24502:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24506:	009b      	lsls	r3, r3, #2
   24508:	4413      	add	r3, r2
   2450a:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   2450e:	601a      	str	r2, [r3, #0]
   24510:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24514:	3301      	adds	r3, #1
   24516:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   2451a:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
   2451e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   24522:	4413      	add	r3, r2
   24524:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
   24528:	429a      	cmp	r2, r3
   2452a:	dd9b      	ble.n	24464 <__kernel_rem_pio2f+0x544>
   2452c:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
   24530:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   24534:	4413      	add	r3, r2
   24536:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   2453a:	e5b3      	b.n	240a4 <__kernel_rem_pio2f+0x184>
   2453c:	edd7 7a5a 	vldr	s15, [r7, #360]	; 0x168
   24540:	eef5 7a40 	vcmp.f32	s15, #0.0
   24544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   24548:	d11f      	bne.n	2458a <__kernel_rem_pio2f+0x66a>
   2454a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   2454e:	3b01      	subs	r3, #1
   24550:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   24554:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   24558:	3b08      	subs	r3, #8
   2455a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
   2455e:	e009      	b.n	24574 <__kernel_rem_pio2f+0x654>
   24560:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   24564:	3b01      	subs	r3, #1
   24566:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   2456a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   2456e:	3b08      	subs	r3, #8
   24570:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
   24574:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   24578:	009b      	lsls	r3, r3, #2
   2457a:	f507 72c8 	add.w	r2, r7, #400	; 0x190
   2457e:	4413      	add	r3, r2
   24580:	f853 3c8c 	ldr.w	r3, [r3, #-140]
   24584:	2b00      	cmp	r3, #0
   24586:	d0eb      	beq.n	24560 <__kernel_rem_pio2f+0x640>
   24588:	e05b      	b.n	24642 <__kernel_rem_pio2f+0x722>
   2458a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   2458e:	425b      	negs	r3, r3
   24590:	4619      	mov	r1, r3
   24592:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
   24596:	f000 fd85 	bl	250a4 <scalbnf>
   2459a:	f8c7 0168 	str.w	r0, [r7, #360]	; 0x168
   2459e:	ed1f 7aae 	vldr	s14, [pc, #-696]	; 242e8 <__kernel_rem_pio2f+0x3c8>
   245a2:	edd7 7a5a 	vldr	s15, [r7, #360]	; 0x168
   245a6:	eef4 7ac7 	vcmpe.f32	s15, s14
   245aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   245ae:	db3a      	blt.n	24626 <__kernel_rem_pio2f+0x706>
   245b0:	ed1f 7ab2 	vldr	s14, [pc, #-712]	; 242ec <__kernel_rem_pio2f+0x3cc>
   245b4:	edd7 7a5a 	vldr	s15, [r7, #360]	; 0x168
   245b8:	ee67 7a27 	vmul.f32	s15, s14, s15
   245bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   245c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   245c4:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
   245c8:	ed1f 7ab9 	vldr	s14, [pc, #-740]	; 242e8 <__kernel_rem_pio2f+0x3c8>
   245cc:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
   245d0:	ee67 7a27 	vmul.f32	s15, s14, s15
   245d4:	ed97 7a5a 	vldr	s14, [r7, #360]	; 0x168
   245d8:	ee77 7a67 	vsub.f32	s15, s14, s15
   245dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   245e0:	ee17 2a90 	vmov	r2, s15
   245e4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   245e8:	009b      	lsls	r3, r3, #2
   245ea:	f507 71c8 	add.w	r1, r7, #400	; 0x190
   245ee:	440b      	add	r3, r1
   245f0:	f843 2c8c 	str.w	r2, [r3, #-140]
   245f4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   245f8:	3301      	adds	r3, #1
   245fa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   245fe:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   24602:	3308      	adds	r3, #8
   24604:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
   24608:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
   2460c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   24610:	ee17 2a90 	vmov	r2, s15
   24614:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   24618:	009b      	lsls	r3, r3, #2
   2461a:	f507 71c8 	add.w	r1, r7, #400	; 0x190
   2461e:	440b      	add	r3, r1
   24620:	f843 2c8c 	str.w	r2, [r3, #-140]
   24624:	e00d      	b.n	24642 <__kernel_rem_pio2f+0x722>
   24626:	edd7 7a5a 	vldr	s15, [r7, #360]	; 0x168
   2462a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   2462e:	ee17 2a90 	vmov	r2, s15
   24632:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   24636:	009b      	lsls	r3, r3, #2
   24638:	f507 71c8 	add.w	r1, r7, #400	; 0x190
   2463c:	440b      	add	r3, r1
   2463e:	f843 2c8c 	str.w	r2, [r3, #-140]
   24642:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   24646:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
   2464a:	4618      	mov	r0, r3
   2464c:	f000 fd2a 	bl	250a4 <scalbnf>
   24650:	f8c7 0164 	str.w	r0, [r7, #356]	; 0x164
   24654:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   24658:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   2465c:	e024      	b.n	246a8 <__kernel_rem_pio2f+0x788>
   2465e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24662:	009b      	lsls	r3, r3, #2
   24664:	f507 72c8 	add.w	r2, r7, #400	; 0x190
   24668:	4413      	add	r3, r2
   2466a:	f853 3c8c 	ldr.w	r3, [r3, #-140]
   2466e:	ee07 3a90 	vmov	s15, r3
   24672:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   24676:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
   2467a:	ee67 7a27 	vmul.f32	s15, s14, s15
   2467e:	f107 0214 	add.w	r2, r7, #20
   24682:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24686:	009b      	lsls	r3, r3, #2
   24688:	4413      	add	r3, r2
   2468a:	edc3 7a00 	vstr	s15, [r3]
   2468e:	ed1f 7ae9 	vldr	s14, [pc, #-932]	; 242ec <__kernel_rem_pio2f+0x3cc>
   24692:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
   24696:	ee67 7a87 	vmul.f32	s15, s15, s14
   2469a:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
   2469e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   246a2:	3b01      	subs	r3, #1
   246a4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   246a8:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   246ac:	2b00      	cmp	r3, #0
   246ae:	dad6      	bge.n	2465e <__kernel_rem_pio2f+0x73e>
   246b0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   246b4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   246b8:	e046      	b.n	24748 <__kernel_rem_pio2f+0x828>
   246ba:	f04f 0300 	mov.w	r3, #0
   246be:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   246c2:	2300      	movs	r3, #0
   246c4:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   246c8:	e01e      	b.n	24708 <__kernel_rem_pio2f+0x7e8>
   246ca:	4ae5      	ldr	r2, [pc, #916]	; (24a60 <__kernel_rem_pio2f+0xb40>)
   246cc:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   246d0:	009b      	lsls	r3, r3, #2
   246d2:	4413      	add	r3, r2
   246d4:	ed93 7a00 	vldr	s14, [r3]
   246d8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
   246dc:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   246e0:	4413      	add	r3, r2
   246e2:	f107 0214 	add.w	r2, r7, #20
   246e6:	009b      	lsls	r3, r3, #2
   246e8:	4413      	add	r3, r2
   246ea:	edd3 7a00 	vldr	s15, [r3]
   246ee:	ee67 7a27 	vmul.f32	s15, s14, s15
   246f2:	ed97 7a59 	vldr	s14, [r7, #356]	; 0x164
   246f6:	ee77 7a27 	vadd.f32	s15, s14, s15
   246fa:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
   246fe:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   24702:	3301      	adds	r3, #1
   24704:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   24708:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
   2470c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
   24710:	429a      	cmp	r2, r3
   24712:	dc08      	bgt.n	24726 <__kernel_rem_pio2f+0x806>
   24714:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
   24718:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   2471c:	1ad3      	subs	r3, r2, r3
   2471e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
   24722:	429a      	cmp	r2, r3
   24724:	ddd1      	ble.n	246ca <__kernel_rem_pio2f+0x7aa>
   24726:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
   2472a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   2472e:	1ad3      	subs	r3, r2, r3
   24730:	f107 0264 	add.w	r2, r7, #100	; 0x64
   24734:	009b      	lsls	r3, r3, #2
   24736:	4413      	add	r3, r2
   24738:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   2473c:	601a      	str	r2, [r3, #0]
   2473e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24742:	3b01      	subs	r3, #1
   24744:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   24748:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   2474c:	2b00      	cmp	r3, #0
   2474e:	dab4      	bge.n	246ba <__kernel_rem_pio2f+0x79a>
   24750:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
   24754:	2b03      	cmp	r3, #3
   24756:	f000 80af 	beq.w	248b8 <__kernel_rem_pio2f+0x998>
   2475a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
   2475e:	2b03      	cmp	r3, #3
   24760:	f300 81a1 	bgt.w	24aa6 <__kernel_rem_pio2f+0xb86>
   24764:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
   24768:	2b00      	cmp	r3, #0
   2476a:	d00b      	beq.n	24784 <__kernel_rem_pio2f+0x864>
   2476c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
   24770:	2b00      	cmp	r3, #0
   24772:	f2c0 8198 	blt.w	24aa6 <__kernel_rem_pio2f+0xb86>
   24776:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
   2477a:	3b01      	subs	r3, #1
   2477c:	2b01      	cmp	r3, #1
   2477e:	f200 8192 	bhi.w	24aa6 <__kernel_rem_pio2f+0xb86>
   24782:	e030      	b.n	247e6 <__kernel_rem_pio2f+0x8c6>
   24784:	f04f 0300 	mov.w	r3, #0
   24788:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   2478c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   24790:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   24794:	e012      	b.n	247bc <__kernel_rem_pio2f+0x89c>
   24796:	f107 0264 	add.w	r2, r7, #100	; 0x64
   2479a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   2479e:	009b      	lsls	r3, r3, #2
   247a0:	4413      	add	r3, r2
   247a2:	edd3 7a00 	vldr	s15, [r3]
   247a6:	ed97 7a59 	vldr	s14, [r7, #356]	; 0x164
   247aa:	ee77 7a27 	vadd.f32	s15, s14, s15
   247ae:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
   247b2:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   247b6:	3b01      	subs	r3, #1
   247b8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   247bc:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   247c0:	2b00      	cmp	r3, #0
   247c2:	dae8      	bge.n	24796 <__kernel_rem_pio2f+0x876>
   247c4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
   247c8:	2b00      	cmp	r3, #0
   247ca:	d004      	beq.n	247d6 <__kernel_rem_pio2f+0x8b6>
   247cc:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
   247d0:	eef1 7a67 	vneg.f32	s15, s15
   247d4:	e001      	b.n	247da <__kernel_rem_pio2f+0x8ba>
   247d6:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
   247da:	f107 0308 	add.w	r3, r7, #8
   247de:	681b      	ldr	r3, [r3, #0]
   247e0:	edc3 7a00 	vstr	s15, [r3]
   247e4:	e15f      	b.n	24aa6 <__kernel_rem_pio2f+0xb86>
   247e6:	f04f 0300 	mov.w	r3, #0
   247ea:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   247ee:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   247f2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   247f6:	e012      	b.n	2481e <__kernel_rem_pio2f+0x8fe>
   247f8:	f107 0264 	add.w	r2, r7, #100	; 0x64
   247fc:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24800:	009b      	lsls	r3, r3, #2
   24802:	4413      	add	r3, r2
   24804:	edd3 7a00 	vldr	s15, [r3]
   24808:	ed97 7a59 	vldr	s14, [r7, #356]	; 0x164
   2480c:	ee77 7a27 	vadd.f32	s15, s14, s15
   24810:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
   24814:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24818:	3b01      	subs	r3, #1
   2481a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   2481e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24822:	2b00      	cmp	r3, #0
   24824:	dae8      	bge.n	247f8 <__kernel_rem_pio2f+0x8d8>
   24826:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
   2482a:	2b00      	cmp	r3, #0
   2482c:	d004      	beq.n	24838 <__kernel_rem_pio2f+0x918>
   2482e:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
   24832:	eef1 7a67 	vneg.f32	s15, s15
   24836:	e001      	b.n	2483c <__kernel_rem_pio2f+0x91c>
   24838:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
   2483c:	f107 0308 	add.w	r3, r7, #8
   24840:	681b      	ldr	r3, [r3, #0]
   24842:	edc3 7a00 	vstr	s15, [r3]
   24846:	f107 0364 	add.w	r3, r7, #100	; 0x64
   2484a:	ed93 7a00 	vldr	s14, [r3]
   2484e:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
   24852:	ee77 7a67 	vsub.f32	s15, s14, s15
   24856:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
   2485a:	2301      	movs	r3, #1
   2485c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   24860:	e012      	b.n	24888 <__kernel_rem_pio2f+0x968>
   24862:	f107 0264 	add.w	r2, r7, #100	; 0x64
   24866:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   2486a:	009b      	lsls	r3, r3, #2
   2486c:	4413      	add	r3, r2
   2486e:	edd3 7a00 	vldr	s15, [r3]
   24872:	ed97 7a59 	vldr	s14, [r7, #356]	; 0x164
   24876:	ee77 7a27 	vadd.f32	s15, s14, s15
   2487a:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
   2487e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24882:	3301      	adds	r3, #1
   24884:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   24888:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
   2488c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   24890:	429a      	cmp	r2, r3
   24892:	dde6      	ble.n	24862 <__kernel_rem_pio2f+0x942>
   24894:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
   24898:	2b00      	cmp	r3, #0
   2489a:	d004      	beq.n	248a6 <__kernel_rem_pio2f+0x986>
   2489c:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
   248a0:	eef1 7a67 	vneg.f32	s15, s15
   248a4:	e001      	b.n	248aa <__kernel_rem_pio2f+0x98a>
   248a6:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
   248aa:	f107 0308 	add.w	r3, r7, #8
   248ae:	681b      	ldr	r3, [r3, #0]
   248b0:	3304      	adds	r3, #4
   248b2:	edc3 7a00 	vstr	s15, [r3]
   248b6:	e0f6      	b.n	24aa6 <__kernel_rem_pio2f+0xb86>
   248b8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   248bc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   248c0:	e042      	b.n	24948 <__kernel_rem_pio2f+0xa28>
   248c2:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   248c6:	3b01      	subs	r3, #1
   248c8:	f107 0264 	add.w	r2, r7, #100	; 0x64
   248cc:	009b      	lsls	r3, r3, #2
   248ce:	4413      	add	r3, r2
   248d0:	ed93 7a00 	vldr	s14, [r3]
   248d4:	f107 0264 	add.w	r2, r7, #100	; 0x64
   248d8:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   248dc:	009b      	lsls	r3, r3, #2
   248de:	4413      	add	r3, r2
   248e0:	edd3 7a00 	vldr	s15, [r3]
   248e4:	ee77 7a27 	vadd.f32	s15, s14, s15
   248e8:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
   248ec:	f107 0264 	add.w	r2, r7, #100	; 0x64
   248f0:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   248f4:	009b      	lsls	r3, r3, #2
   248f6:	4413      	add	r3, r2
   248f8:	ed93 7a00 	vldr	s14, [r3]
   248fc:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24900:	3b01      	subs	r3, #1
   24902:	f107 0264 	add.w	r2, r7, #100	; 0x64
   24906:	009b      	lsls	r3, r3, #2
   24908:	4413      	add	r3, r2
   2490a:	edd3 6a00 	vldr	s13, [r3]
   2490e:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
   24912:	ee76 7ae7 	vsub.f32	s15, s13, s15
   24916:	ee77 7a27 	vadd.f32	s15, s14, s15
   2491a:	f107 0264 	add.w	r2, r7, #100	; 0x64
   2491e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24922:	009b      	lsls	r3, r3, #2
   24924:	4413      	add	r3, r2
   24926:	edc3 7a00 	vstr	s15, [r3]
   2492a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   2492e:	3b01      	subs	r3, #1
   24930:	f107 0264 	add.w	r2, r7, #100	; 0x64
   24934:	009b      	lsls	r3, r3, #2
   24936:	4413      	add	r3, r2
   24938:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   2493c:	601a      	str	r2, [r3, #0]
   2493e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24942:	3b01      	subs	r3, #1
   24944:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   24948:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   2494c:	2b00      	cmp	r3, #0
   2494e:	dcb8      	bgt.n	248c2 <__kernel_rem_pio2f+0x9a2>
   24950:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   24954:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   24958:	e042      	b.n	249e0 <__kernel_rem_pio2f+0xac0>
   2495a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   2495e:	3b01      	subs	r3, #1
   24960:	f107 0264 	add.w	r2, r7, #100	; 0x64
   24964:	009b      	lsls	r3, r3, #2
   24966:	4413      	add	r3, r2
   24968:	ed93 7a00 	vldr	s14, [r3]
   2496c:	f107 0264 	add.w	r2, r7, #100	; 0x64
   24970:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24974:	009b      	lsls	r3, r3, #2
   24976:	4413      	add	r3, r2
   24978:	edd3 7a00 	vldr	s15, [r3]
   2497c:	ee77 7a27 	vadd.f32	s15, s14, s15
   24980:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
   24984:	f107 0264 	add.w	r2, r7, #100	; 0x64
   24988:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   2498c:	009b      	lsls	r3, r3, #2
   2498e:	4413      	add	r3, r2
   24990:	ed93 7a00 	vldr	s14, [r3]
   24994:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24998:	3b01      	subs	r3, #1
   2499a:	f107 0264 	add.w	r2, r7, #100	; 0x64
   2499e:	009b      	lsls	r3, r3, #2
   249a0:	4413      	add	r3, r2
   249a2:	edd3 6a00 	vldr	s13, [r3]
   249a6:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
   249aa:	ee76 7ae7 	vsub.f32	s15, s13, s15
   249ae:	ee77 7a27 	vadd.f32	s15, s14, s15
   249b2:	f107 0264 	add.w	r2, r7, #100	; 0x64
   249b6:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   249ba:	009b      	lsls	r3, r3, #2
   249bc:	4413      	add	r3, r2
   249be:	edc3 7a00 	vstr	s15, [r3]
   249c2:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   249c6:	3b01      	subs	r3, #1
   249c8:	f107 0264 	add.w	r2, r7, #100	; 0x64
   249cc:	009b      	lsls	r3, r3, #2
   249ce:	4413      	add	r3, r2
   249d0:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   249d4:	601a      	str	r2, [r3, #0]
   249d6:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   249da:	3b01      	subs	r3, #1
   249dc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   249e0:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   249e4:	2b01      	cmp	r3, #1
   249e6:	dcb8      	bgt.n	2495a <__kernel_rem_pio2f+0xa3a>
   249e8:	f04f 0300 	mov.w	r3, #0
   249ec:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   249f0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   249f4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   249f8:	e012      	b.n	24a20 <__kernel_rem_pio2f+0xb00>
   249fa:	f107 0264 	add.w	r2, r7, #100	; 0x64
   249fe:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24a02:	009b      	lsls	r3, r3, #2
   24a04:	4413      	add	r3, r2
   24a06:	edd3 7a00 	vldr	s15, [r3]
   24a0a:	ed97 7a59 	vldr	s14, [r7, #356]	; 0x164
   24a0e:	ee77 7a27 	vadd.f32	s15, s14, s15
   24a12:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
   24a16:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24a1a:	3b01      	subs	r3, #1
   24a1c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   24a20:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24a24:	2b01      	cmp	r3, #1
   24a26:	dce8      	bgt.n	249fa <__kernel_rem_pio2f+0xada>
   24a28:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
   24a2c:	2b00      	cmp	r3, #0
   24a2e:	d119      	bne.n	24a64 <__kernel_rem_pio2f+0xb44>
   24a30:	f107 0364 	add.w	r3, r7, #100	; 0x64
   24a34:	681a      	ldr	r2, [r3, #0]
   24a36:	f107 0308 	add.w	r3, r7, #8
   24a3a:	681b      	ldr	r3, [r3, #0]
   24a3c:	601a      	str	r2, [r3, #0]
   24a3e:	f107 0308 	add.w	r3, r7, #8
   24a42:	681b      	ldr	r3, [r3, #0]
   24a44:	3304      	adds	r3, #4
   24a46:	f107 0264 	add.w	r2, r7, #100	; 0x64
   24a4a:	6852      	ldr	r2, [r2, #4]
   24a4c:	601a      	str	r2, [r3, #0]
   24a4e:	f107 0308 	add.w	r3, r7, #8
   24a52:	681b      	ldr	r3, [r3, #0]
   24a54:	3308      	adds	r3, #8
   24a56:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   24a5a:	601a      	str	r2, [r3, #0]
   24a5c:	e023      	b.n	24aa6 <__kernel_rem_pio2f+0xb86>
   24a5e:	bf00      	nop
   24a60:	000336b0 	.word	0x000336b0
   24a64:	f107 0364 	add.w	r3, r7, #100	; 0x64
   24a68:	edd3 7a00 	vldr	s15, [r3]
   24a6c:	eef1 7a67 	vneg.f32	s15, s15
   24a70:	f107 0308 	add.w	r3, r7, #8
   24a74:	681b      	ldr	r3, [r3, #0]
   24a76:	edc3 7a00 	vstr	s15, [r3]
   24a7a:	f107 0364 	add.w	r3, r7, #100	; 0x64
   24a7e:	edd3 7a01 	vldr	s15, [r3, #4]
   24a82:	f107 0308 	add.w	r3, r7, #8
   24a86:	681b      	ldr	r3, [r3, #0]
   24a88:	3304      	adds	r3, #4
   24a8a:	eef1 7a67 	vneg.f32	s15, s15
   24a8e:	edc3 7a00 	vstr	s15, [r3]
   24a92:	f107 0308 	add.w	r3, r7, #8
   24a96:	681b      	ldr	r3, [r3, #0]
   24a98:	3308      	adds	r3, #8
   24a9a:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
   24a9e:	eef1 7a67 	vneg.f32	s15, s15
   24aa2:	edc3 7a00 	vstr	s15, [r3]
   24aa6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
   24aaa:	f003 0307 	and.w	r3, r3, #7
   24aae:	4618      	mov	r0, r3
   24ab0:	f507 77ca 	add.w	r7, r7, #404	; 0x194
   24ab4:	46bd      	mov	sp, r7
   24ab6:	bd90      	pop	{r4, r7, pc}

00024ab8 <__kernel_sinf>:
   24ab8:	b480      	push	{r7}
   24aba:	b08b      	sub	sp, #44	; 0x2c
   24abc:	af00      	add	r7, sp, #0
   24abe:	60f8      	str	r0, [r7, #12]
   24ac0:	60b9      	str	r1, [r7, #8]
   24ac2:	607a      	str	r2, [r7, #4]
   24ac4:	68fb      	ldr	r3, [r7, #12]
   24ac6:	617b      	str	r3, [r7, #20]
   24ac8:	697b      	ldr	r3, [r7, #20]
   24aca:	627b      	str	r3, [r7, #36]	; 0x24
   24acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   24ace:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   24ad2:	627b      	str	r3, [r7, #36]	; 0x24
   24ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   24ad6:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   24ada:	da0a      	bge.n	24af2 <__kernel_sinf+0x3a>
   24adc:	edd7 7a03 	vldr	s15, [r7, #12]
   24ae0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   24ae4:	ee17 3a90 	vmov	r3, s15
   24ae8:	2b00      	cmp	r3, #0
   24aea:	d102      	bne.n	24af2 <__kernel_sinf+0x3a>
   24aec:	edd7 7a03 	vldr	s15, [r7, #12]
   24af0:	e069      	b.n	24bc6 <__kernel_sinf+0x10e>
   24af2:	edd7 7a03 	vldr	s15, [r7, #12]
   24af6:	ee67 7aa7 	vmul.f32	s15, s15, s15
   24afa:	edc7 7a08 	vstr	s15, [r7, #32]
   24afe:	ed97 7a08 	vldr	s14, [r7, #32]
   24b02:	edd7 7a03 	vldr	s15, [r7, #12]
   24b06:	ee67 7a27 	vmul.f32	s15, s14, s15
   24b0a:	edc7 7a07 	vstr	s15, [r7, #28]
   24b0e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 24bd8 <__kernel_sinf+0x120>
   24b12:	edd7 7a08 	vldr	s15, [r7, #32]
   24b16:	ee67 7a27 	vmul.f32	s15, s14, s15
   24b1a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 24bdc <__kernel_sinf+0x124>
   24b1e:	ee37 7a87 	vadd.f32	s14, s15, s14
   24b22:	edd7 7a08 	vldr	s15, [r7, #32]
   24b26:	ee67 7a27 	vmul.f32	s15, s14, s15
   24b2a:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 24be0 <__kernel_sinf+0x128>
   24b2e:	ee37 7a87 	vadd.f32	s14, s15, s14
   24b32:	edd7 7a08 	vldr	s15, [r7, #32]
   24b36:	ee67 7a27 	vmul.f32	s15, s14, s15
   24b3a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 24be4 <__kernel_sinf+0x12c>
   24b3e:	ee37 7a87 	vadd.f32	s14, s15, s14
   24b42:	edd7 7a08 	vldr	s15, [r7, #32]
   24b46:	ee67 7a27 	vmul.f32	s15, s14, s15
   24b4a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 24be8 <__kernel_sinf+0x130>
   24b4e:	ee77 7a87 	vadd.f32	s15, s15, s14
   24b52:	edc7 7a06 	vstr	s15, [r7, #24]
   24b56:	687b      	ldr	r3, [r7, #4]
   24b58:	2b00      	cmp	r3, #0
   24b5a:	d112      	bne.n	24b82 <__kernel_sinf+0xca>
   24b5c:	ed97 7a08 	vldr	s14, [r7, #32]
   24b60:	edd7 7a06 	vldr	s15, [r7, #24]
   24b64:	ee67 7a27 	vmul.f32	s15, s14, s15
   24b68:	ed9f 7a20 	vldr	s14, [pc, #128]	; 24bec <__kernel_sinf+0x134>
   24b6c:	ee37 7a87 	vadd.f32	s14, s15, s14
   24b70:	edd7 7a07 	vldr	s15, [r7, #28]
   24b74:	ee27 7a27 	vmul.f32	s14, s14, s15
   24b78:	edd7 7a03 	vldr	s15, [r7, #12]
   24b7c:	ee77 7a27 	vadd.f32	s15, s14, s15
   24b80:	e021      	b.n	24bc6 <__kernel_sinf+0x10e>
   24b82:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   24b86:	edd7 7a02 	vldr	s15, [r7, #8]
   24b8a:	ee27 7a27 	vmul.f32	s14, s14, s15
   24b8e:	edd7 6a07 	vldr	s13, [r7, #28]
   24b92:	edd7 7a06 	vldr	s15, [r7, #24]
   24b96:	ee66 7aa7 	vmul.f32	s15, s13, s15
   24b9a:	ee37 7a67 	vsub.f32	s14, s14, s15
   24b9e:	edd7 7a08 	vldr	s15, [r7, #32]
   24ba2:	ee27 7a27 	vmul.f32	s14, s14, s15
   24ba6:	edd7 7a02 	vldr	s15, [r7, #8]
   24baa:	ee37 7a67 	vsub.f32	s14, s14, s15
   24bae:	eddf 6a0f 	vldr	s13, [pc, #60]	; 24bec <__kernel_sinf+0x134>
   24bb2:	edd7 7a07 	vldr	s15, [r7, #28]
   24bb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
   24bba:	ee77 7a67 	vsub.f32	s15, s14, s15
   24bbe:	ed97 7a03 	vldr	s14, [r7, #12]
   24bc2:	ee77 7a67 	vsub.f32	s15, s14, s15
   24bc6:	ee17 3a90 	vmov	r3, s15
   24bca:	4618      	mov	r0, r3
   24bcc:	372c      	adds	r7, #44	; 0x2c
   24bce:	46bd      	mov	sp, r7
   24bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
   24bd4:	4770      	bx	lr
   24bd6:	bf00      	nop
   24bd8:	2f2ec9d3 	.word	0x2f2ec9d3
   24bdc:	b2d72f34 	.word	0xb2d72f34
   24be0:	3638ef1b 	.word	0x3638ef1b
   24be4:	b9500d01 	.word	0xb9500d01
   24be8:	3c088889 	.word	0x3c088889
   24bec:	be2aaaab 	.word	0xbe2aaaab

00024bf0 <nan>:
   24bf0:	b480      	push	{r7}
   24bf2:	b085      	sub	sp, #20
   24bf4:	af00      	add	r7, sp, #0
   24bf6:	6078      	str	r0, [r7, #4]
   24bf8:	f04f 0200 	mov.w	r2, #0
   24bfc:	4b05      	ldr	r3, [pc, #20]	; (24c14 <nan+0x24>)
   24bfe:	e9c7 2302 	strd	r2, r3, [r7, #8]
   24c02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   24c06:	4610      	mov	r0, r2
   24c08:	4619      	mov	r1, r3
   24c0a:	3714      	adds	r7, #20
   24c0c:	46bd      	mov	sp, r7
   24c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
   24c12:	4770      	bx	lr
   24c14:	7ff80000 	.word	0x7ff80000

00024c18 <expm1f>:
   24c18:	b480      	push	{r7}
   24c1a:	b09b      	sub	sp, #108	; 0x6c
   24c1c:	af00      	add	r7, sp, #0
   24c1e:	6078      	str	r0, [r7, #4]
   24c20:	687b      	ldr	r3, [r7, #4]
   24c22:	62bb      	str	r3, [r7, #40]	; 0x28
   24c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
   24c26:	653b      	str	r3, [r7, #80]	; 0x50
   24c28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   24c2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   24c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   24c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   24c32:	2b00      	cmp	r3, #0
   24c34:	d102      	bne.n	24c3c <expm1f+0x24>
   24c36:	687b      	ldr	r3, [r7, #4]
   24c38:	667b      	str	r3, [r7, #100]	; 0x64
   24c3a:	e005      	b.n	24c48 <expm1f+0x30>
   24c3c:	edd7 7a01 	vldr	s15, [r7, #4]
   24c40:	eef1 7a67 	vneg.f32	s15, s15
   24c44:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
   24c48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   24c4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   24c4e:	653b      	str	r3, [r7, #80]	; 0x50
   24c50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   24c52:	4ad9      	ldr	r2, [pc, #868]	; (24fb8 <expm1f+0x3a0>)
   24c54:	4293      	cmp	r3, r2
   24c56:	d938      	bls.n	24cca <expm1f+0xb2>
   24c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   24c5a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   24c5e:	d904      	bls.n	24c6a <expm1f+0x52>
   24c60:	edd7 7a01 	vldr	s15, [r7, #4]
   24c64:	ee77 7aa7 	vadd.f32	s15, s15, s15
   24c68:	e214      	b.n	25094 <expm1f+0x47c>
   24c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   24c6c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   24c70:	d108      	bne.n	24c84 <expm1f+0x6c>
   24c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   24c74:	2b00      	cmp	r3, #0
   24c76:	d102      	bne.n	24c7e <expm1f+0x66>
   24c78:	edd7 7a01 	vldr	s15, [r7, #4]
   24c7c:	e20a      	b.n	25094 <expm1f+0x47c>
   24c7e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   24c82:	e207      	b.n	25094 <expm1f+0x47c>
   24c84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   24c86:	2b00      	cmp	r3, #0
   24c88:	d10a      	bne.n	24ca0 <expm1f+0x88>
   24c8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   24c8c:	4acb      	ldr	r2, [pc, #812]	; (24fbc <expm1f+0x3a4>)
   24c8e:	4293      	cmp	r3, r2
   24c90:	d906      	bls.n	24ca0 <expm1f+0x88>
   24c92:	ed9f 7acb 	vldr	s14, [pc, #812]	; 24fc0 <expm1f+0x3a8>
   24c96:	eddf 7aca 	vldr	s15, [pc, #808]	; 24fc0 <expm1f+0x3a8>
   24c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
   24c9e:	e1f9      	b.n	25094 <expm1f+0x47c>
   24ca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   24ca2:	2b00      	cmp	r3, #0
   24ca4:	d011      	beq.n	24cca <expm1f+0xb2>
   24ca6:	ed9f 7ac7 	vldr	s14, [pc, #796]	; 24fc4 <expm1f+0x3ac>
   24caa:	edd7 7a01 	vldr	s15, [r7, #4]
   24cae:	ee77 7a27 	vadd.f32	s15, s14, s15
   24cb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   24cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   24cba:	d506      	bpl.n	24cca <expm1f+0xb2>
   24cbc:	ed9f 7ac1 	vldr	s14, [pc, #772]	; 24fc4 <expm1f+0x3ac>
   24cc0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   24cc4:	ee77 7a67 	vsub.f32	s15, s14, s15
   24cc8:	e1e4      	b.n	25094 <expm1f+0x47c>
   24cca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   24ccc:	4abe      	ldr	r2, [pc, #760]	; (24fc8 <expm1f+0x3b0>)
   24cce:	4293      	cmp	r3, r2
   24cd0:	d96a      	bls.n	24da8 <expm1f+0x190>
   24cd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   24cd4:	4abd      	ldr	r2, [pc, #756]	; (24fcc <expm1f+0x3b4>)
   24cd6:	4293      	cmp	r3, r2
   24cd8:	d821      	bhi.n	24d1e <expm1f+0x106>
   24cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   24cdc:	2b00      	cmp	r3, #0
   24cde:	d10c      	bne.n	24cfa <expm1f+0xe2>
   24ce0:	ed9f 7abb 	vldr	s14, [pc, #748]	; 24fd0 <expm1f+0x3b8>
   24ce4:	edd7 7a01 	vldr	s15, [r7, #4]
   24ce8:	ee77 7ac7 	vsub.f32	s15, s15, s14
   24cec:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
   24cf0:	4bb8      	ldr	r3, [pc, #736]	; (24fd4 <expm1f+0x3bc>)
   24cf2:	65fb      	str	r3, [r7, #92]	; 0x5c
   24cf4:	2301      	movs	r3, #1
   24cf6:	657b      	str	r3, [r7, #84]	; 0x54
   24cf8:	e041      	b.n	24d7e <expm1f+0x166>
   24cfa:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 24fd0 <expm1f+0x3b8>
   24cfe:	edd7 7a01 	vldr	s15, [r7, #4]
   24d02:	ee77 7a87 	vadd.f32	s15, s15, s14
   24d06:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
   24d0a:	eddf 7ab3 	vldr	s15, [pc, #716]	; 24fd8 <expm1f+0x3c0>
   24d0e:	eef1 7a67 	vneg.f32	s15, s15
   24d12:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
   24d16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24d1a:	657b      	str	r3, [r7, #84]	; 0x54
   24d1c:	e02f      	b.n	24d7e <expm1f+0x166>
   24d1e:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 24fdc <expm1f+0x3c4>
   24d22:	edd7 7a01 	vldr	s15, [r7, #4]
   24d26:	ee67 7a27 	vmul.f32	s15, s14, s15
   24d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   24d2c:	2b00      	cmp	r3, #0
   24d2e:	d102      	bne.n	24d36 <expm1f+0x11e>
   24d30:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   24d34:	e001      	b.n	24d3a <expm1f+0x122>
   24d36:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
   24d3a:	ee77 7a27 	vadd.f32	s15, s14, s15
   24d3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   24d42:	ee17 3a90 	vmov	r3, s15
   24d46:	657b      	str	r3, [r7, #84]	; 0x54
   24d48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   24d4a:	ee07 3a90 	vmov	s15, r3
   24d4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   24d52:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
   24d56:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 24fd0 <expm1f+0x3b8>
   24d5a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
   24d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
   24d62:	ed97 7a01 	vldr	s14, [r7, #4]
   24d66:	ee77 7a67 	vsub.f32	s15, s14, s15
   24d6a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
   24d6e:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 24fd8 <expm1f+0x3c0>
   24d72:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
   24d76:	ee67 7a87 	vmul.f32	s15, s15, s14
   24d7a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
   24d7e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
   24d82:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
   24d86:	ee77 7a67 	vsub.f32	s15, s14, s15
   24d8a:	edc7 7a01 	vstr	s15, [r7, #4]
   24d8e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
   24d92:	edd7 7a01 	vldr	s15, [r7, #4]
   24d96:	ee37 7a67 	vsub.f32	s14, s14, s15
   24d9a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
   24d9e:	ee77 7a67 	vsub.f32	s15, s14, s15
   24da2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
   24da6:	e01c      	b.n	24de2 <expm1f+0x1ca>
   24da8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   24daa:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
   24dae:	d216      	bcs.n	24dde <expm1f+0x1c6>
   24db0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 24fc0 <expm1f+0x3a8>
   24db4:	edd7 7a01 	vldr	s15, [r7, #4]
   24db8:	ee77 7a87 	vadd.f32	s15, s15, s14
   24dbc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
   24dc0:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 24fc0 <expm1f+0x3a8>
   24dc4:	edd7 7a01 	vldr	s15, [r7, #4]
   24dc8:	ee77 7a27 	vadd.f32	s15, s14, s15
   24dcc:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
   24dd0:	ee77 7a67 	vsub.f32	s15, s14, s15
   24dd4:	ed97 7a01 	vldr	s14, [r7, #4]
   24dd8:	ee77 7a67 	vsub.f32	s15, s14, s15
   24ddc:	e15a      	b.n	25094 <expm1f+0x47c>
   24dde:	2300      	movs	r3, #0
   24de0:	657b      	str	r3, [r7, #84]	; 0x54
   24de2:	edd7 7a01 	vldr	s15, [r7, #4]
   24de6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   24dea:	ee67 7a87 	vmul.f32	s15, s15, s14
   24dee:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
   24df2:	ed97 7a01 	vldr	s14, [r7, #4]
   24df6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
   24dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
   24dfe:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
   24e02:	ed9f 7a77 	vldr	s14, [pc, #476]	; 24fe0 <expm1f+0x3c8>
   24e06:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
   24e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
   24e0e:	ed9f 7a75 	vldr	s14, [pc, #468]	; 24fe4 <expm1f+0x3cc>
   24e12:	ee37 7a87 	vadd.f32	s14, s15, s14
   24e16:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
   24e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
   24e1e:	ed9f 7a72 	vldr	s14, [pc, #456]	; 24fe8 <expm1f+0x3d0>
   24e22:	ee37 7a87 	vadd.f32	s14, s15, s14
   24e26:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
   24e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
   24e2e:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 24fec <expm1f+0x3d4>
   24e32:	ee37 7a87 	vadd.f32	s14, s15, s14
   24e36:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
   24e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
   24e3e:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 24ff0 <expm1f+0x3d8>
   24e42:	ee37 7a87 	vadd.f32	s14, s15, s14
   24e46:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
   24e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
   24e4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   24e52:	ee77 7a87 	vadd.f32	s15, s15, s14
   24e56:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
   24e5a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
   24e5e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
   24e62:	ee67 7a27 	vmul.f32	s15, s14, s15
   24e66:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
   24e6a:	ee77 7a67 	vsub.f32	s15, s14, s15
   24e6e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
   24e72:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
   24e76:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
   24e7a:	ee77 6a67 	vsub.f32	s13, s14, s15
   24e7e:	ed97 7a01 	vldr	s14, [r7, #4]
   24e82:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
   24e86:	ee67 7a27 	vmul.f32	s15, s14, s15
   24e8a:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
   24e8e:	ee37 7a67 	vsub.f32	s14, s14, s15
   24e92:	eec6 7a87 	vdiv.f32	s15, s13, s14
   24e96:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
   24e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
   24e9e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
   24ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   24ea4:	2b00      	cmp	r3, #0
   24ea6:	d10e      	bne.n	24ec6 <expm1f+0x2ae>
   24ea8:	ed97 7a01 	vldr	s14, [r7, #4]
   24eac:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
   24eb0:	ee27 7a27 	vmul.f32	s14, s14, s15
   24eb4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
   24eb8:	ee77 7a67 	vsub.f32	s15, s14, s15
   24ebc:	ed97 7a01 	vldr	s14, [r7, #4]
   24ec0:	ee77 7a67 	vsub.f32	s15, s14, s15
   24ec4:	e0e6      	b.n	25094 <expm1f+0x47c>
   24ec6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
   24eca:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
   24ece:	ee37 7a67 	vsub.f32	s14, s14, s15
   24ed2:	edd7 7a01 	vldr	s15, [r7, #4]
   24ed6:	ee27 7a27 	vmul.f32	s14, s14, s15
   24eda:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
   24ede:	ee77 7a67 	vsub.f32	s15, s14, s15
   24ee2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
   24ee6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
   24eea:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
   24eee:	ee77 7a67 	vsub.f32	s15, s14, s15
   24ef2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
   24ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   24ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   24efc:	d10e      	bne.n	24f1c <expm1f+0x304>
   24efe:	ed97 7a01 	vldr	s14, [r7, #4]
   24f02:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
   24f06:	ee77 7a67 	vsub.f32	s15, s14, s15
   24f0a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   24f0e:	ee67 7a87 	vmul.f32	s15, s15, s14
   24f12:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   24f16:	ee77 7ac7 	vsub.f32	s15, s15, s14
   24f1a:	e0bb      	b.n	25094 <expm1f+0x47c>
   24f1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   24f1e:	2b01      	cmp	r3, #1
   24f20:	d124      	bne.n	24f6c <expm1f+0x354>
   24f22:	edd7 7a01 	vldr	s15, [r7, #4]
   24f26:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
   24f2a:	eef4 7ac7 	vcmpe.f32	s15, s14
   24f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   24f32:	d50e      	bpl.n	24f52 <expm1f+0x33a>
   24f34:	edd7 7a01 	vldr	s15, [r7, #4]
   24f38:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   24f3c:	ee77 7a87 	vadd.f32	s15, s15, s14
   24f40:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
   24f44:	ee77 7a67 	vsub.f32	s15, s14, s15
   24f48:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
   24f4c:	ee67 7a87 	vmul.f32	s15, s15, s14
   24f50:	e0a0      	b.n	25094 <expm1f+0x47c>
   24f52:	ed97 7a01 	vldr	s14, [r7, #4]
   24f56:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
   24f5a:	ee77 7a67 	vsub.f32	s15, s14, s15
   24f5e:	ee77 7aa7 	vadd.f32	s15, s15, s15
   24f62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   24f66:	ee77 7a87 	vadd.f32	s15, s15, s14
   24f6a:	e093      	b.n	25094 <expm1f+0x47c>
   24f6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   24f6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   24f72:	db02      	blt.n	24f7a <expm1f+0x362>
   24f74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   24f76:	2b38      	cmp	r3, #56	; 0x38
   24f78:	dd3c      	ble.n	24ff4 <expm1f+0x3dc>
   24f7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   24f7e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
   24f82:	edd7 7a01 	vldr	s15, [r7, #4]
   24f86:	ee77 7a67 	vsub.f32	s15, s14, s15
   24f8a:	ee76 7ae7 	vsub.f32	s15, s13, s15
   24f8e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
   24f92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   24f94:	627b      	str	r3, [r7, #36]	; 0x24
   24f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   24f98:	62fb      	str	r3, [r7, #44]	; 0x2c
   24f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   24f9c:	05da      	lsls	r2, r3, #23
   24f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   24fa0:	4413      	add	r3, r2
   24fa2:	623b      	str	r3, [r7, #32]
   24fa4:	6a3b      	ldr	r3, [r7, #32]
   24fa6:	667b      	str	r3, [r7, #100]	; 0x64
   24fa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   24fac:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
   24fb0:	ee77 7ac7 	vsub.f32	s15, s15, s14
   24fb4:	e06e      	b.n	25094 <expm1f+0x47c>
   24fb6:	bf00      	nop
   24fb8:	4195b843 	.word	0x4195b843
   24fbc:	42b17217 	.word	0x42b17217
   24fc0:	7149f2ca 	.word	0x7149f2ca
   24fc4:	0da24260 	.word	0x0da24260
   24fc8:	3eb17218 	.word	0x3eb17218
   24fcc:	3f851591 	.word	0x3f851591
   24fd0:	3f317180 	.word	0x3f317180
   24fd4:	3717f7d1 	.word	0x3717f7d1
   24fd8:	3717f7d1 	.word	0x3717f7d1
   24fdc:	3fb8aa3b 	.word	0x3fb8aa3b
   24fe0:	b457edbb 	.word	0xb457edbb
   24fe4:	36867e54 	.word	0x36867e54
   24fe8:	b8a670cd 	.word	0xb8a670cd
   24fec:	3ad00d01 	.word	0x3ad00d01
   24ff0:	bd088889 	.word	0xbd088889
   24ff4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   24ff8:	64bb      	str	r3, [r7, #72]	; 0x48
   24ffa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   24ffc:	2b16      	cmp	r3, #22
   24ffe:	dc21      	bgt.n	25044 <expm1f+0x42c>
   25000:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   25004:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   25006:	fa42 f303 	asr.w	r3, r2, r3
   2500a:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
   2500e:	61fb      	str	r3, [r7, #28]
   25010:	69fb      	ldr	r3, [r7, #28]
   25012:	64bb      	str	r3, [r7, #72]	; 0x48
   25014:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
   25018:	edd7 7a01 	vldr	s15, [r7, #4]
   2501c:	ee77 7a67 	vsub.f32	s15, s14, s15
   25020:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
   25024:	ee77 7a67 	vsub.f32	s15, s14, s15
   25028:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
   2502c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2502e:	61bb      	str	r3, [r7, #24]
   25030:	69bb      	ldr	r3, [r7, #24]
   25032:	633b      	str	r3, [r7, #48]	; 0x30
   25034:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   25036:	05da      	lsls	r2, r3, #23
   25038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2503a:	4413      	add	r3, r2
   2503c:	617b      	str	r3, [r7, #20]
   2503e:	697b      	ldr	r3, [r7, #20]
   25040:	667b      	str	r3, [r7, #100]	; 0x64
   25042:	e025      	b.n	25090 <expm1f+0x478>
   25044:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   25046:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
   2504a:	05db      	lsls	r3, r3, #23
   2504c:	613b      	str	r3, [r7, #16]
   2504e:	693b      	ldr	r3, [r7, #16]
   25050:	64bb      	str	r3, [r7, #72]	; 0x48
   25052:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
   25056:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
   2505a:	ee77 7a27 	vadd.f32	s15, s14, s15
   2505e:	ed97 7a01 	vldr	s14, [r7, #4]
   25062:	ee77 7a67 	vsub.f32	s15, s14, s15
   25066:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
   2506a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   2506e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
   25072:	ee77 7a87 	vadd.f32	s15, s15, s14
   25076:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
   2507a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2507c:	60fb      	str	r3, [r7, #12]
   2507e:	68fb      	ldr	r3, [r7, #12]
   25080:	637b      	str	r3, [r7, #52]	; 0x34
   25082:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   25084:	05da      	lsls	r2, r3, #23
   25086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   25088:	4413      	add	r3, r2
   2508a:	60bb      	str	r3, [r7, #8]
   2508c:	68bb      	ldr	r3, [r7, #8]
   2508e:	667b      	str	r3, [r7, #100]	; 0x64
   25090:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
   25094:	ee17 3a90 	vmov	r3, s15
   25098:	4618      	mov	r0, r3
   2509a:	376c      	adds	r7, #108	; 0x6c
   2509c:	46bd      	mov	sp, r7
   2509e:	f85d 7b04 	ldr.w	r7, [sp], #4
   250a2:	4770      	bx	lr

000250a4 <scalbnf>:
   250a4:	b580      	push	{r7, lr}
   250a6:	b08a      	sub	sp, #40	; 0x28
   250a8:	af00      	add	r7, sp, #0
   250aa:	6078      	str	r0, [r7, #4]
   250ac:	6039      	str	r1, [r7, #0]
   250ae:	687b      	ldr	r3, [r7, #4]
   250b0:	61bb      	str	r3, [r7, #24]
   250b2:	69bb      	ldr	r3, [r7, #24]
   250b4:	623b      	str	r3, [r7, #32]
   250b6:	6a3b      	ldr	r3, [r7, #32]
   250b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   250bc:	61fb      	str	r3, [r7, #28]
   250be:	69fb      	ldr	r3, [r7, #28]
   250c0:	0ddb      	lsrs	r3, r3, #23
   250c2:	627b      	str	r3, [r7, #36]	; 0x24
   250c4:	69fb      	ldr	r3, [r7, #28]
   250c6:	2b00      	cmp	r3, #0
   250c8:	d102      	bne.n	250d0 <scalbnf+0x2c>
   250ca:	edd7 7a01 	vldr	s15, [r7, #4]
   250ce:	e07d      	b.n	251cc <scalbnf+0x128>
   250d0:	69fb      	ldr	r3, [r7, #28]
   250d2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   250d6:	d304      	bcc.n	250e2 <scalbnf+0x3e>
   250d8:	edd7 7a01 	vldr	s15, [r7, #4]
   250dc:	ee77 7aa7 	vadd.f32	s15, s15, s15
   250e0:	e074      	b.n	251cc <scalbnf+0x128>
   250e2:	69fb      	ldr	r3, [r7, #28]
   250e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   250e8:	d21b      	bcs.n	25122 <scalbnf+0x7e>
   250ea:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 251d8 <scalbnf+0x134>
   250ee:	edd7 7a01 	vldr	s15, [r7, #4]
   250f2:	ee67 7a87 	vmul.f32	s15, s15, s14
   250f6:	edc7 7a01 	vstr	s15, [r7, #4]
   250fa:	687b      	ldr	r3, [r7, #4]
   250fc:	617b      	str	r3, [r7, #20]
   250fe:	697b      	ldr	r3, [r7, #20]
   25100:	623b      	str	r3, [r7, #32]
   25102:	6a3b      	ldr	r3, [r7, #32]
   25104:	15db      	asrs	r3, r3, #23
   25106:	b2db      	uxtb	r3, r3
   25108:	3b19      	subs	r3, #25
   2510a:	627b      	str	r3, [r7, #36]	; 0x24
   2510c:	683b      	ldr	r3, [r7, #0]
   2510e:	4a33      	ldr	r2, [pc, #204]	; (251dc <scalbnf+0x138>)
   25110:	4293      	cmp	r3, r2
   25112:	da06      	bge.n	25122 <scalbnf+0x7e>
   25114:	ed9f 7a32 	vldr	s14, [pc, #200]	; 251e0 <scalbnf+0x13c>
   25118:	edd7 7a01 	vldr	s15, [r7, #4]
   2511c:	ee67 7a27 	vmul.f32	s15, s14, s15
   25120:	e054      	b.n	251cc <scalbnf+0x128>
   25122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   25124:	683b      	ldr	r3, [r7, #0]
   25126:	4413      	add	r3, r2
   25128:	627b      	str	r3, [r7, #36]	; 0x24
   2512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2512c:	2bfe      	cmp	r3, #254	; 0xfe
   2512e:	dd0b      	ble.n	25148 <scalbnf+0xa4>
   25130:	4b2c      	ldr	r3, [pc, #176]	; (251e4 <scalbnf+0x140>)
   25132:	6879      	ldr	r1, [r7, #4]
   25134:	4618      	mov	r0, r3
   25136:	f00b fe22 	bl	30d7e <copysignf>
   2513a:	ee07 0a10 	vmov	s14, r0
   2513e:	eddf 7a2a 	vldr	s15, [pc, #168]	; 251e8 <scalbnf+0x144>
   25142:	ee67 7a27 	vmul.f32	s15, s14, s15
   25146:	e041      	b.n	251cc <scalbnf+0x128>
   25148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2514a:	2b00      	cmp	r3, #0
   2514c:	dd0b      	ble.n	25166 <scalbnf+0xc2>
   2514e:	6a3b      	ldr	r3, [r7, #32]
   25150:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   25154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   25156:	05d2      	lsls	r2, r2, #23
   25158:	4313      	orrs	r3, r2
   2515a:	613b      	str	r3, [r7, #16]
   2515c:	693b      	ldr	r3, [r7, #16]
   2515e:	607b      	str	r3, [r7, #4]
   25160:	edd7 7a01 	vldr	s15, [r7, #4]
   25164:	e032      	b.n	251cc <scalbnf+0x128>
   25166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   25168:	f113 0f16 	cmn.w	r3, #22
   2516c:	da1c      	bge.n	251a8 <scalbnf+0x104>
   2516e:	683b      	ldr	r3, [r7, #0]
   25170:	f24c 3250 	movw	r2, #50000	; 0xc350
   25174:	4293      	cmp	r3, r2
   25176:	dd0b      	ble.n	25190 <scalbnf+0xec>
   25178:	4b1a      	ldr	r3, [pc, #104]	; (251e4 <scalbnf+0x140>)
   2517a:	6879      	ldr	r1, [r7, #4]
   2517c:	4618      	mov	r0, r3
   2517e:	f00b fdfe 	bl	30d7e <copysignf>
   25182:	ee07 0a10 	vmov	s14, r0
   25186:	eddf 7a18 	vldr	s15, [pc, #96]	; 251e8 <scalbnf+0x144>
   2518a:	ee67 7a27 	vmul.f32	s15, s14, s15
   2518e:	e01d      	b.n	251cc <scalbnf+0x128>
   25190:	4b16      	ldr	r3, [pc, #88]	; (251ec <scalbnf+0x148>)
   25192:	6879      	ldr	r1, [r7, #4]
   25194:	4618      	mov	r0, r3
   25196:	f00b fdf2 	bl	30d7e <copysignf>
   2519a:	ee07 0a10 	vmov	s14, r0
   2519e:	eddf 7a10 	vldr	s15, [pc, #64]	; 251e0 <scalbnf+0x13c>
   251a2:	ee67 7a27 	vmul.f32	s15, s14, s15
   251a6:	e011      	b.n	251cc <scalbnf+0x128>
   251a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   251aa:	3319      	adds	r3, #25
   251ac:	627b      	str	r3, [r7, #36]	; 0x24
   251ae:	6a3b      	ldr	r3, [r7, #32]
   251b0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   251b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   251b6:	05d2      	lsls	r2, r2, #23
   251b8:	4313      	orrs	r3, r2
   251ba:	60fb      	str	r3, [r7, #12]
   251bc:	68fb      	ldr	r3, [r7, #12]
   251be:	607b      	str	r3, [r7, #4]
   251c0:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 251f0 <scalbnf+0x14c>
   251c4:	edd7 7a01 	vldr	s15, [r7, #4]
   251c8:	ee67 7a27 	vmul.f32	s15, s14, s15
   251cc:	ee17 3a90 	vmov	r3, s15
   251d0:	4618      	mov	r0, r3
   251d2:	3728      	adds	r7, #40	; 0x28
   251d4:	46bd      	mov	sp, r7
   251d6:	bd80      	pop	{r7, pc}
   251d8:	4c000000 	.word	0x4c000000
   251dc:	ffff3cb0 	.word	0xffff3cb0
   251e0:	0da24260 	.word	0x0da24260
   251e4:	7149f2ca 	.word	0x7149f2ca
   251e8:	7149f2ca 	.word	0x7149f2ca
   251ec:	0da24260 	.word	0x0da24260
   251f0:	33000000 	.word	0x33000000

000251f4 <fiprintf>:
   251f4:	b40e      	push	{r1, r2, r3}
   251f6:	b503      	push	{r0, r1, lr}
   251f8:	ab03      	add	r3, sp, #12
   251fa:	4601      	mov	r1, r0
   251fc:	4805      	ldr	r0, [pc, #20]	; (25214 <fiprintf+0x20>)
   251fe:	f853 2b04 	ldr.w	r2, [r3], #4
   25202:	6800      	ldr	r0, [r0, #0]
   25204:	9301      	str	r3, [sp, #4]
   25206:	f000 fa71 	bl	256ec <_vfiprintf_r>
   2520a:	b002      	add	sp, #8
   2520c:	f85d eb04 	ldr.w	lr, [sp], #4
   25210:	b003      	add	sp, #12
   25212:	4770      	bx	lr
   25214:	20020058 	.word	0x20020058

00025218 <_fputc_r>:
   25218:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2521a:	4614      	mov	r4, r2
   2521c:	4605      	mov	r5, r0
   2521e:	b128      	cbz	r0, 2522c <_fputc_r+0x14>
   25220:	6983      	ldr	r3, [r0, #24]
   25222:	b91b      	cbnz	r3, 2522c <_fputc_r+0x14>
   25224:	9101      	str	r1, [sp, #4]
   25226:	f000 fec7 	bl	25fb8 <__sinit>
   2522a:	9901      	ldr	r1, [sp, #4]
   2522c:	4b0a      	ldr	r3, [pc, #40]	; (25258 <_fputc_r+0x40>)
   2522e:	429c      	cmp	r4, r3
   25230:	d107      	bne.n	25242 <_fputc_r+0x2a>
   25232:	686c      	ldr	r4, [r5, #4]
   25234:	4622      	mov	r2, r4
   25236:	4628      	mov	r0, r5
   25238:	b003      	add	sp, #12
   2523a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   2523e:	f000 bc91 	b.w	25b64 <_putc_r>
   25242:	4b06      	ldr	r3, [pc, #24]	; (2525c <_fputc_r+0x44>)
   25244:	429c      	cmp	r4, r3
   25246:	d101      	bne.n	2524c <_fputc_r+0x34>
   25248:	68ac      	ldr	r4, [r5, #8]
   2524a:	e7f3      	b.n	25234 <_fputc_r+0x1c>
   2524c:	4b04      	ldr	r3, [pc, #16]	; (25260 <_fputc_r+0x48>)
   2524e:	429c      	cmp	r4, r3
   25250:	bf08      	it	eq
   25252:	68ec      	ldreq	r4, [r5, #12]
   25254:	e7ee      	b.n	25234 <_fputc_r+0x1c>
   25256:	bf00      	nop
   25258:	00033700 	.word	0x00033700
   2525c:	00033720 	.word	0x00033720
   25260:	000336e0 	.word	0x000336e0

00025264 <fputc>:
   25264:	4b02      	ldr	r3, [pc, #8]	; (25270 <fputc+0xc>)
   25266:	460a      	mov	r2, r1
   25268:	4601      	mov	r1, r0
   2526a:	6818      	ldr	r0, [r3, #0]
   2526c:	f7ff bfd4 	b.w	25218 <_fputc_r>
   25270:	20020058 	.word	0x20020058

00025274 <_fputs_r>:
   25274:	b530      	push	{r4, r5, lr}
   25276:	b087      	sub	sp, #28
   25278:	4604      	mov	r4, r0
   2527a:	4608      	mov	r0, r1
   2527c:	4615      	mov	r5, r2
   2527e:	9101      	str	r1, [sp, #4]
   25280:	f7ec fc4a 	bl	11b18 <strlen>
   25284:	ab01      	add	r3, sp, #4
   25286:	9005      	str	r0, [sp, #20]
   25288:	9002      	str	r0, [sp, #8]
   2528a:	9303      	str	r3, [sp, #12]
   2528c:	2301      	movs	r3, #1
   2528e:	9304      	str	r3, [sp, #16]
   25290:	b124      	cbz	r4, 2529c <_fputs_r+0x28>
   25292:	69a3      	ldr	r3, [r4, #24]
   25294:	b913      	cbnz	r3, 2529c <_fputs_r+0x28>
   25296:	4620      	mov	r0, r4
   25298:	f000 fe8e 	bl	25fb8 <__sinit>
   2529c:	4b0a      	ldr	r3, [pc, #40]	; (252c8 <_fputs_r+0x54>)
   2529e:	429d      	cmp	r5, r3
   252a0:	d107      	bne.n	252b2 <_fputs_r+0x3e>
   252a2:	6865      	ldr	r5, [r4, #4]
   252a4:	aa03      	add	r2, sp, #12
   252a6:	4629      	mov	r1, r5
   252a8:	4620      	mov	r0, r4
   252aa:	f000 f81b 	bl	252e4 <__sfvwrite_r>
   252ae:	b007      	add	sp, #28
   252b0:	bd30      	pop	{r4, r5, pc}
   252b2:	4b06      	ldr	r3, [pc, #24]	; (252cc <_fputs_r+0x58>)
   252b4:	429d      	cmp	r5, r3
   252b6:	d101      	bne.n	252bc <_fputs_r+0x48>
   252b8:	68a5      	ldr	r5, [r4, #8]
   252ba:	e7f3      	b.n	252a4 <_fputs_r+0x30>
   252bc:	4b04      	ldr	r3, [pc, #16]	; (252d0 <_fputs_r+0x5c>)
   252be:	429d      	cmp	r5, r3
   252c0:	bf08      	it	eq
   252c2:	68e5      	ldreq	r5, [r4, #12]
   252c4:	e7ee      	b.n	252a4 <_fputs_r+0x30>
   252c6:	bf00      	nop
   252c8:	00033700 	.word	0x00033700
   252cc:	00033720 	.word	0x00033720
   252d0:	000336e0 	.word	0x000336e0

000252d4 <fputs>:
   252d4:	4b02      	ldr	r3, [pc, #8]	; (252e0 <fputs+0xc>)
   252d6:	460a      	mov	r2, r1
   252d8:	4601      	mov	r1, r0
   252da:	6818      	ldr	r0, [r3, #0]
   252dc:	f7ff bfca 	b.w	25274 <_fputs_r>
   252e0:	20020058 	.word	0x20020058

000252e4 <__sfvwrite_r>:
   252e4:	6893      	ldr	r3, [r2, #8]
   252e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   252ea:	4606      	mov	r6, r0
   252ec:	460c      	mov	r4, r1
   252ee:	4690      	mov	r8, r2
   252f0:	b91b      	cbnz	r3, 252fa <__sfvwrite_r+0x16>
   252f2:	2000      	movs	r0, #0
   252f4:	b003      	add	sp, #12
   252f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   252fa:	898b      	ldrh	r3, [r1, #12]
   252fc:	0718      	lsls	r0, r3, #28
   252fe:	d550      	bpl.n	253a2 <__sfvwrite_r+0xbe>
   25300:	690b      	ldr	r3, [r1, #16]
   25302:	2b00      	cmp	r3, #0
   25304:	d04d      	beq.n	253a2 <__sfvwrite_r+0xbe>
   25306:	89a3      	ldrh	r3, [r4, #12]
   25308:	f8d8 7000 	ldr.w	r7, [r8]
   2530c:	f013 0902 	ands.w	r9, r3, #2
   25310:	d16c      	bne.n	253ec <__sfvwrite_r+0x108>
   25312:	f013 0301 	ands.w	r3, r3, #1
   25316:	f000 809c 	beq.w	25452 <__sfvwrite_r+0x16e>
   2531a:	4648      	mov	r0, r9
   2531c:	46ca      	mov	sl, r9
   2531e:	46cb      	mov	fp, r9
   25320:	f1bb 0f00 	cmp.w	fp, #0
   25324:	f000 8103 	beq.w	2552e <__sfvwrite_r+0x24a>
   25328:	b950      	cbnz	r0, 25340 <__sfvwrite_r+0x5c>
   2532a:	465a      	mov	r2, fp
   2532c:	210a      	movs	r1, #10
   2532e:	4650      	mov	r0, sl
   25330:	f00b fd4a 	bl	30dc8 <memchr>
   25334:	2800      	cmp	r0, #0
   25336:	f000 80ff 	beq.w	25538 <__sfvwrite_r+0x254>
   2533a:	3001      	adds	r0, #1
   2533c:	eba0 090a 	sub.w	r9, r0, sl
   25340:	45d9      	cmp	r9, fp
   25342:	6820      	ldr	r0, [r4, #0]
   25344:	6921      	ldr	r1, [r4, #16]
   25346:	464a      	mov	r2, r9
   25348:	bf28      	it	cs
   2534a:	465a      	movcs	r2, fp
   2534c:	6963      	ldr	r3, [r4, #20]
   2534e:	4288      	cmp	r0, r1
   25350:	f240 80f5 	bls.w	2553e <__sfvwrite_r+0x25a>
   25354:	68a5      	ldr	r5, [r4, #8]
   25356:	441d      	add	r5, r3
   25358:	42aa      	cmp	r2, r5
   2535a:	f340 80f0 	ble.w	2553e <__sfvwrite_r+0x25a>
   2535e:	4651      	mov	r1, sl
   25360:	462a      	mov	r2, r5
   25362:	f00b fd5a 	bl	30e1a <memmove>
   25366:	6823      	ldr	r3, [r4, #0]
   25368:	4621      	mov	r1, r4
   2536a:	4630      	mov	r0, r6
   2536c:	442b      	add	r3, r5
   2536e:	6023      	str	r3, [r4, #0]
   25370:	f000 fdce 	bl	25f10 <_fflush_r>
   25374:	2800      	cmp	r0, #0
   25376:	d167      	bne.n	25448 <__sfvwrite_r+0x164>
   25378:	ebb9 0905 	subs.w	r9, r9, r5
   2537c:	f040 80f7 	bne.w	2556e <__sfvwrite_r+0x28a>
   25380:	4621      	mov	r1, r4
   25382:	4630      	mov	r0, r6
   25384:	f000 fdc4 	bl	25f10 <_fflush_r>
   25388:	2800      	cmp	r0, #0
   2538a:	d15d      	bne.n	25448 <__sfvwrite_r+0x164>
   2538c:	f8d8 2008 	ldr.w	r2, [r8, #8]
   25390:	44aa      	add	sl, r5
   25392:	ebab 0b05 	sub.w	fp, fp, r5
   25396:	1b55      	subs	r5, r2, r5
   25398:	f8c8 5008 	str.w	r5, [r8, #8]
   2539c:	2d00      	cmp	r5, #0
   2539e:	d1bf      	bne.n	25320 <__sfvwrite_r+0x3c>
   253a0:	e7a7      	b.n	252f2 <__sfvwrite_r+0xe>
   253a2:	4621      	mov	r1, r4
   253a4:	4630      	mov	r0, r6
   253a6:	f000 fcb7 	bl	25d18 <__swsetup_r>
   253aa:	2800      	cmp	r0, #0
   253ac:	d0ab      	beq.n	25306 <__sfvwrite_r+0x22>
   253ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   253b2:	e79f      	b.n	252f4 <__sfvwrite_r+0x10>
   253b4:	e9d7 b900 	ldrd	fp, r9, [r7]
   253b8:	3708      	adds	r7, #8
   253ba:	f1b9 0f00 	cmp.w	r9, #0
   253be:	d0f9      	beq.n	253b4 <__sfvwrite_r+0xd0>
   253c0:	45d1      	cmp	r9, sl
   253c2:	464b      	mov	r3, r9
   253c4:	465a      	mov	r2, fp
   253c6:	6a21      	ldr	r1, [r4, #32]
   253c8:	bf28      	it	cs
   253ca:	4653      	movcs	r3, sl
   253cc:	4630      	mov	r0, r6
   253ce:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   253d0:	47a8      	blx	r5
   253d2:	2800      	cmp	r0, #0
   253d4:	dd38      	ble.n	25448 <__sfvwrite_r+0x164>
   253d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   253da:	4483      	add	fp, r0
   253dc:	eba9 0900 	sub.w	r9, r9, r0
   253e0:	1a18      	subs	r0, r3, r0
   253e2:	f8c8 0008 	str.w	r0, [r8, #8]
   253e6:	2800      	cmp	r0, #0
   253e8:	d1e7      	bne.n	253ba <__sfvwrite_r+0xd6>
   253ea:	e782      	b.n	252f2 <__sfvwrite_r+0xe>
   253ec:	f04f 0b00 	mov.w	fp, #0
   253f0:	f8df a180 	ldr.w	sl, [pc, #384]	; 25574 <__sfvwrite_r+0x290>
   253f4:	46d9      	mov	r9, fp
   253f6:	e7e0      	b.n	253ba <__sfvwrite_r+0xd6>
   253f8:	e9d7 9a00 	ldrd	r9, sl, [r7]
   253fc:	3708      	adds	r7, #8
   253fe:	f1ba 0f00 	cmp.w	sl, #0
   25402:	d0f9      	beq.n	253f8 <__sfvwrite_r+0x114>
   25404:	89a3      	ldrh	r3, [r4, #12]
   25406:	68a2      	ldr	r2, [r4, #8]
   25408:	0599      	lsls	r1, r3, #22
   2540a:	6820      	ldr	r0, [r4, #0]
   2540c:	d563      	bpl.n	254d6 <__sfvwrite_r+0x1f2>
   2540e:	4552      	cmp	r2, sl
   25410:	d836      	bhi.n	25480 <__sfvwrite_r+0x19c>
   25412:	f413 6f90 	tst.w	r3, #1152	; 0x480
   25416:	d033      	beq.n	25480 <__sfvwrite_r+0x19c>
   25418:	6921      	ldr	r1, [r4, #16]
   2541a:	6965      	ldr	r5, [r4, #20]
   2541c:	eba0 0b01 	sub.w	fp, r0, r1
   25420:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   25424:	f10b 0201 	add.w	r2, fp, #1
   25428:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   2542c:	4452      	add	r2, sl
   2542e:	106d      	asrs	r5, r5, #1
   25430:	4295      	cmp	r5, r2
   25432:	bf38      	it	cc
   25434:	4615      	movcc	r5, r2
   25436:	055b      	lsls	r3, r3, #21
   25438:	d53d      	bpl.n	254b6 <__sfvwrite_r+0x1d2>
   2543a:	4629      	mov	r1, r5
   2543c:	4630      	mov	r0, r6
   2543e:	f000 f8fb 	bl	25638 <_malloc_r>
   25442:	b948      	cbnz	r0, 25458 <__sfvwrite_r+0x174>
   25444:	230c      	movs	r3, #12
   25446:	6033      	str	r3, [r6, #0]
   25448:	89a3      	ldrh	r3, [r4, #12]
   2544a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2544e:	81a3      	strh	r3, [r4, #12]
   25450:	e7ad      	b.n	253ae <__sfvwrite_r+0xca>
   25452:	4699      	mov	r9, r3
   25454:	469a      	mov	sl, r3
   25456:	e7d2      	b.n	253fe <__sfvwrite_r+0x11a>
   25458:	465a      	mov	r2, fp
   2545a:	6921      	ldr	r1, [r4, #16]
   2545c:	9001      	str	r0, [sp, #4]
   2545e:	f00b fccf 	bl	30e00 <memcpy>
   25462:	89a2      	ldrh	r2, [r4, #12]
   25464:	9b01      	ldr	r3, [sp, #4]
   25466:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   2546a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   2546e:	81a2      	strh	r2, [r4, #12]
   25470:	6123      	str	r3, [r4, #16]
   25472:	4652      	mov	r2, sl
   25474:	445b      	add	r3, fp
   25476:	6165      	str	r5, [r4, #20]
   25478:	eba5 050b 	sub.w	r5, r5, fp
   2547c:	6023      	str	r3, [r4, #0]
   2547e:	60a5      	str	r5, [r4, #8]
   25480:	4552      	cmp	r2, sl
   25482:	4649      	mov	r1, r9
   25484:	6820      	ldr	r0, [r4, #0]
   25486:	4655      	mov	r5, sl
   25488:	bf28      	it	cs
   2548a:	4652      	movcs	r2, sl
   2548c:	9201      	str	r2, [sp, #4]
   2548e:	f00b fcc4 	bl	30e1a <memmove>
   25492:	68a3      	ldr	r3, [r4, #8]
   25494:	9a01      	ldr	r2, [sp, #4]
   25496:	1a9b      	subs	r3, r3, r2
   25498:	60a3      	str	r3, [r4, #8]
   2549a:	6823      	ldr	r3, [r4, #0]
   2549c:	441a      	add	r2, r3
   2549e:	6022      	str	r2, [r4, #0]
   254a0:	f8d8 0008 	ldr.w	r0, [r8, #8]
   254a4:	44a9      	add	r9, r5
   254a6:	ebaa 0a05 	sub.w	sl, sl, r5
   254aa:	1b45      	subs	r5, r0, r5
   254ac:	f8c8 5008 	str.w	r5, [r8, #8]
   254b0:	2d00      	cmp	r5, #0
   254b2:	d1a4      	bne.n	253fe <__sfvwrite_r+0x11a>
   254b4:	e71d      	b.n	252f2 <__sfvwrite_r+0xe>
   254b6:	462a      	mov	r2, r5
   254b8:	4630      	mov	r0, r6
   254ba:	f00b fcd0 	bl	30e5e <_realloc_r>
   254be:	4603      	mov	r3, r0
   254c0:	2800      	cmp	r0, #0
   254c2:	d1d5      	bne.n	25470 <__sfvwrite_r+0x18c>
   254c4:	6921      	ldr	r1, [r4, #16]
   254c6:	4630      	mov	r0, r6
   254c8:	f000 f866 	bl	25598 <_free_r>
   254cc:	89a3      	ldrh	r3, [r4, #12]
   254ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   254d2:	81a3      	strh	r3, [r4, #12]
   254d4:	e7b6      	b.n	25444 <__sfvwrite_r+0x160>
   254d6:	6923      	ldr	r3, [r4, #16]
   254d8:	4283      	cmp	r3, r0
   254da:	d302      	bcc.n	254e2 <__sfvwrite_r+0x1fe>
   254dc:	6961      	ldr	r1, [r4, #20]
   254de:	4551      	cmp	r1, sl
   254e0:	d915      	bls.n	2550e <__sfvwrite_r+0x22a>
   254e2:	4552      	cmp	r2, sl
   254e4:	4649      	mov	r1, r9
   254e6:	bf28      	it	cs
   254e8:	4652      	movcs	r2, sl
   254ea:	4615      	mov	r5, r2
   254ec:	f00b fc95 	bl	30e1a <memmove>
   254f0:	68a3      	ldr	r3, [r4, #8]
   254f2:	6822      	ldr	r2, [r4, #0]
   254f4:	1b5b      	subs	r3, r3, r5
   254f6:	442a      	add	r2, r5
   254f8:	60a3      	str	r3, [r4, #8]
   254fa:	6022      	str	r2, [r4, #0]
   254fc:	2b00      	cmp	r3, #0
   254fe:	d1cf      	bne.n	254a0 <__sfvwrite_r+0x1bc>
   25500:	4621      	mov	r1, r4
   25502:	4630      	mov	r0, r6
   25504:	f000 fd04 	bl	25f10 <_fflush_r>
   25508:	2800      	cmp	r0, #0
   2550a:	d0c9      	beq.n	254a0 <__sfvwrite_r+0x1bc>
   2550c:	e79c      	b.n	25448 <__sfvwrite_r+0x164>
   2550e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   25512:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   25514:	464a      	mov	r2, r9
   25516:	4630      	mov	r0, r6
   25518:	459a      	cmp	sl, r3
   2551a:	bf38      	it	cc
   2551c:	4653      	movcc	r3, sl
   2551e:	fb93 f3f1 	sdiv	r3, r3, r1
   25522:	434b      	muls	r3, r1
   25524:	6a21      	ldr	r1, [r4, #32]
   25526:	47a8      	blx	r5
   25528:	1e05      	subs	r5, r0, #0
   2552a:	dcb9      	bgt.n	254a0 <__sfvwrite_r+0x1bc>
   2552c:	e78c      	b.n	25448 <__sfvwrite_r+0x164>
   2552e:	e9d7 ab00 	ldrd	sl, fp, [r7]
   25532:	2000      	movs	r0, #0
   25534:	3708      	adds	r7, #8
   25536:	e6f3      	b.n	25320 <__sfvwrite_r+0x3c>
   25538:	f10b 0901 	add.w	r9, fp, #1
   2553c:	e700      	b.n	25340 <__sfvwrite_r+0x5c>
   2553e:	4293      	cmp	r3, r2
   25540:	dc08      	bgt.n	25554 <__sfvwrite_r+0x270>
   25542:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   25544:	4652      	mov	r2, sl
   25546:	6a21      	ldr	r1, [r4, #32]
   25548:	4630      	mov	r0, r6
   2554a:	47a8      	blx	r5
   2554c:	1e05      	subs	r5, r0, #0
   2554e:	f73f af13 	bgt.w	25378 <__sfvwrite_r+0x94>
   25552:	e779      	b.n	25448 <__sfvwrite_r+0x164>
   25554:	4651      	mov	r1, sl
   25556:	9201      	str	r2, [sp, #4]
   25558:	f00b fc5f 	bl	30e1a <memmove>
   2555c:	9a01      	ldr	r2, [sp, #4]
   2555e:	68a3      	ldr	r3, [r4, #8]
   25560:	4615      	mov	r5, r2
   25562:	1a9b      	subs	r3, r3, r2
   25564:	60a3      	str	r3, [r4, #8]
   25566:	6823      	ldr	r3, [r4, #0]
   25568:	4413      	add	r3, r2
   2556a:	6023      	str	r3, [r4, #0]
   2556c:	e704      	b.n	25378 <__sfvwrite_r+0x94>
   2556e:	2001      	movs	r0, #1
   25570:	e70c      	b.n	2538c <__sfvwrite_r+0xa8>
   25572:	bf00      	nop
   25574:	7ffffc00 	.word	0x7ffffc00

00025578 <malloc>:
   25578:	4b02      	ldr	r3, [pc, #8]	; (25584 <malloc+0xc>)
   2557a:	4601      	mov	r1, r0
   2557c:	6818      	ldr	r0, [r3, #0]
   2557e:	f000 b85b 	b.w	25638 <_malloc_r>
   25582:	bf00      	nop
   25584:	20020058 	.word	0x20020058

00025588 <free>:
   25588:	4b02      	ldr	r3, [pc, #8]	; (25594 <free+0xc>)
   2558a:	4601      	mov	r1, r0
   2558c:	6818      	ldr	r0, [r3, #0]
   2558e:	f000 b803 	b.w	25598 <_free_r>
   25592:	bf00      	nop
   25594:	20020058 	.word	0x20020058

00025598 <_free_r>:
   25598:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2559a:	2900      	cmp	r1, #0
   2559c:	d047      	beq.n	2562e <_free_r+0x96>
   2559e:	f851 3c04 	ldr.w	r3, [r1, #-4]
   255a2:	1f0c      	subs	r4, r1, #4
   255a4:	9001      	str	r0, [sp, #4]
   255a6:	2b00      	cmp	r3, #0
   255a8:	bfb8      	it	lt
   255aa:	18e4      	addlt	r4, r4, r3
   255ac:	f00b fdcd 	bl	3114a <__malloc_lock>
   255b0:	4a20      	ldr	r2, [pc, #128]	; (25634 <_free_r+0x9c>)
   255b2:	9801      	ldr	r0, [sp, #4]
   255b4:	6813      	ldr	r3, [r2, #0]
   255b6:	4615      	mov	r5, r2
   255b8:	b933      	cbnz	r3, 255c8 <_free_r+0x30>
   255ba:	6063      	str	r3, [r4, #4]
   255bc:	6014      	str	r4, [r2, #0]
   255be:	b003      	add	sp, #12
   255c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   255c4:	f00b bdc2 	b.w	3114c <__malloc_unlock>
   255c8:	42a3      	cmp	r3, r4
   255ca:	d90b      	bls.n	255e4 <_free_r+0x4c>
   255cc:	6821      	ldr	r1, [r4, #0]
   255ce:	1862      	adds	r2, r4, r1
   255d0:	4293      	cmp	r3, r2
   255d2:	bf02      	ittt	eq
   255d4:	681a      	ldreq	r2, [r3, #0]
   255d6:	685b      	ldreq	r3, [r3, #4]
   255d8:	1852      	addeq	r2, r2, r1
   255da:	6063      	str	r3, [r4, #4]
   255dc:	bf08      	it	eq
   255de:	6022      	streq	r2, [r4, #0]
   255e0:	602c      	str	r4, [r5, #0]
   255e2:	e7ec      	b.n	255be <_free_r+0x26>
   255e4:	461a      	mov	r2, r3
   255e6:	685b      	ldr	r3, [r3, #4]
   255e8:	b10b      	cbz	r3, 255ee <_free_r+0x56>
   255ea:	42a3      	cmp	r3, r4
   255ec:	d9fa      	bls.n	255e4 <_free_r+0x4c>
   255ee:	6811      	ldr	r1, [r2, #0]
   255f0:	1855      	adds	r5, r2, r1
   255f2:	42a5      	cmp	r5, r4
   255f4:	d10b      	bne.n	2560e <_free_r+0x76>
   255f6:	6824      	ldr	r4, [r4, #0]
   255f8:	4421      	add	r1, r4
   255fa:	1854      	adds	r4, r2, r1
   255fc:	6011      	str	r1, [r2, #0]
   255fe:	42a3      	cmp	r3, r4
   25600:	d1dd      	bne.n	255be <_free_r+0x26>
   25602:	681c      	ldr	r4, [r3, #0]
   25604:	685b      	ldr	r3, [r3, #4]
   25606:	4421      	add	r1, r4
   25608:	6053      	str	r3, [r2, #4]
   2560a:	6011      	str	r1, [r2, #0]
   2560c:	e7d7      	b.n	255be <_free_r+0x26>
   2560e:	d902      	bls.n	25616 <_free_r+0x7e>
   25610:	230c      	movs	r3, #12
   25612:	6003      	str	r3, [r0, #0]
   25614:	e7d3      	b.n	255be <_free_r+0x26>
   25616:	6825      	ldr	r5, [r4, #0]
   25618:	1961      	adds	r1, r4, r5
   2561a:	428b      	cmp	r3, r1
   2561c:	bf02      	ittt	eq
   2561e:	6819      	ldreq	r1, [r3, #0]
   25620:	685b      	ldreq	r3, [r3, #4]
   25622:	1949      	addeq	r1, r1, r5
   25624:	6063      	str	r3, [r4, #4]
   25626:	bf08      	it	eq
   25628:	6021      	streq	r1, [r4, #0]
   2562a:	6054      	str	r4, [r2, #4]
   2562c:	e7c7      	b.n	255be <_free_r+0x26>
   2562e:	b003      	add	sp, #12
   25630:	bd30      	pop	{r4, r5, pc}
   25632:	bf00      	nop
   25634:	20026080 	.word	0x20026080

00025638 <_malloc_r>:
   25638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2563a:	1ccd      	adds	r5, r1, #3
   2563c:	4606      	mov	r6, r0
   2563e:	f025 0503 	bic.w	r5, r5, #3
   25642:	3508      	adds	r5, #8
   25644:	2d0c      	cmp	r5, #12
   25646:	bf38      	it	cc
   25648:	250c      	movcc	r5, #12
   2564a:	2d00      	cmp	r5, #0
   2564c:	db01      	blt.n	25652 <_malloc_r+0x1a>
   2564e:	42a9      	cmp	r1, r5
   25650:	d903      	bls.n	2565a <_malloc_r+0x22>
   25652:	230c      	movs	r3, #12
   25654:	6033      	str	r3, [r6, #0]
   25656:	2000      	movs	r0, #0
   25658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2565a:	f00b fd76 	bl	3114a <__malloc_lock>
   2565e:	4921      	ldr	r1, [pc, #132]	; (256e4 <_malloc_r+0xac>)
   25660:	680a      	ldr	r2, [r1, #0]
   25662:	4614      	mov	r4, r2
   25664:	b99c      	cbnz	r4, 2568e <_malloc_r+0x56>
   25666:	4f20      	ldr	r7, [pc, #128]	; (256e8 <_malloc_r+0xb0>)
   25668:	683b      	ldr	r3, [r7, #0]
   2566a:	b923      	cbnz	r3, 25676 <_malloc_r+0x3e>
   2566c:	4621      	mov	r1, r4
   2566e:	4630      	mov	r0, r6
   25670:	f000 fab6 	bl	25be0 <_sbrk_r>
   25674:	6038      	str	r0, [r7, #0]
   25676:	4629      	mov	r1, r5
   25678:	4630      	mov	r0, r6
   2567a:	f000 fab1 	bl	25be0 <_sbrk_r>
   2567e:	1c43      	adds	r3, r0, #1
   25680:	d123      	bne.n	256ca <_malloc_r+0x92>
   25682:	230c      	movs	r3, #12
   25684:	4630      	mov	r0, r6
   25686:	6033      	str	r3, [r6, #0]
   25688:	f00b fd60 	bl	3114c <__malloc_unlock>
   2568c:	e7e3      	b.n	25656 <_malloc_r+0x1e>
   2568e:	6823      	ldr	r3, [r4, #0]
   25690:	1b5b      	subs	r3, r3, r5
   25692:	d417      	bmi.n	256c4 <_malloc_r+0x8c>
   25694:	2b0b      	cmp	r3, #11
   25696:	d903      	bls.n	256a0 <_malloc_r+0x68>
   25698:	6023      	str	r3, [r4, #0]
   2569a:	441c      	add	r4, r3
   2569c:	6025      	str	r5, [r4, #0]
   2569e:	e004      	b.n	256aa <_malloc_r+0x72>
   256a0:	6863      	ldr	r3, [r4, #4]
   256a2:	42a2      	cmp	r2, r4
   256a4:	bf0c      	ite	eq
   256a6:	600b      	streq	r3, [r1, #0]
   256a8:	6053      	strne	r3, [r2, #4]
   256aa:	4630      	mov	r0, r6
   256ac:	f00b fd4e 	bl	3114c <__malloc_unlock>
   256b0:	f104 000b 	add.w	r0, r4, #11
   256b4:	1d23      	adds	r3, r4, #4
   256b6:	f020 0007 	bic.w	r0, r0, #7
   256ba:	1ac2      	subs	r2, r0, r3
   256bc:	d0cc      	beq.n	25658 <_malloc_r+0x20>
   256be:	1a1b      	subs	r3, r3, r0
   256c0:	50a3      	str	r3, [r4, r2]
   256c2:	e7c9      	b.n	25658 <_malloc_r+0x20>
   256c4:	4622      	mov	r2, r4
   256c6:	6864      	ldr	r4, [r4, #4]
   256c8:	e7cc      	b.n	25664 <_malloc_r+0x2c>
   256ca:	1cc4      	adds	r4, r0, #3
   256cc:	f024 0403 	bic.w	r4, r4, #3
   256d0:	42a0      	cmp	r0, r4
   256d2:	d0e3      	beq.n	2569c <_malloc_r+0x64>
   256d4:	1a21      	subs	r1, r4, r0
   256d6:	4630      	mov	r0, r6
   256d8:	f000 fa82 	bl	25be0 <_sbrk_r>
   256dc:	3001      	adds	r0, #1
   256de:	d1dd      	bne.n	2569c <_malloc_r+0x64>
   256e0:	e7cf      	b.n	25682 <_malloc_r+0x4a>
   256e2:	bf00      	nop
   256e4:	20026080 	.word	0x20026080
   256e8:	20026084 	.word	0x20026084

000256ec <_vfiprintf_r>:
   256ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   256f0:	460d      	mov	r5, r1
   256f2:	b09d      	sub	sp, #116	; 0x74
   256f4:	4614      	mov	r4, r2
   256f6:	4698      	mov	r8, r3
   256f8:	4606      	mov	r6, r0
   256fa:	b118      	cbz	r0, 25704 <_vfiprintf_r+0x18>
   256fc:	6983      	ldr	r3, [r0, #24]
   256fe:	b90b      	cbnz	r3, 25704 <_vfiprintf_r+0x18>
   25700:	f000 fc5a 	bl	25fb8 <__sinit>
   25704:	4b7c      	ldr	r3, [pc, #496]	; (258f8 <_vfiprintf_r+0x20c>)
   25706:	429d      	cmp	r5, r3
   25708:	d161      	bne.n	257ce <_vfiprintf_r+0xe2>
   2570a:	6875      	ldr	r5, [r6, #4]
   2570c:	89ab      	ldrh	r3, [r5, #12]
   2570e:	071b      	lsls	r3, r3, #28
   25710:	d567      	bpl.n	257e2 <_vfiprintf_r+0xf6>
   25712:	692b      	ldr	r3, [r5, #16]
   25714:	2b00      	cmp	r3, #0
   25716:	d064      	beq.n	257e2 <_vfiprintf_r+0xf6>
   25718:	2300      	movs	r3, #0
   2571a:	f8cd 800c 	str.w	r8, [sp, #12]
   2571e:	f04f 0901 	mov.w	r9, #1
   25722:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 258fc <_vfiprintf_r+0x210>
   25726:	9309      	str	r3, [sp, #36]	; 0x24
   25728:	2320      	movs	r3, #32
   2572a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   2572e:	2330      	movs	r3, #48	; 0x30
   25730:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   25734:	4623      	mov	r3, r4
   25736:	469a      	mov	sl, r3
   25738:	f813 2b01 	ldrb.w	r2, [r3], #1
   2573c:	b10a      	cbz	r2, 25742 <_vfiprintf_r+0x56>
   2573e:	2a25      	cmp	r2, #37	; 0x25
   25740:	d1f9      	bne.n	25736 <_vfiprintf_r+0x4a>
   25742:	ebba 0b04 	subs.w	fp, sl, r4
   25746:	d00b      	beq.n	25760 <_vfiprintf_r+0x74>
   25748:	465b      	mov	r3, fp
   2574a:	4622      	mov	r2, r4
   2574c:	4629      	mov	r1, r5
   2574e:	4630      	mov	r0, r6
   25750:	f00b fbc2 	bl	30ed8 <__sfputs_r>
   25754:	3001      	adds	r0, #1
   25756:	f000 80c0 	beq.w	258da <_vfiprintf_r+0x1ee>
   2575a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2575c:	445a      	add	r2, fp
   2575e:	9209      	str	r2, [sp, #36]	; 0x24
   25760:	f89a 3000 	ldrb.w	r3, [sl]
   25764:	2b00      	cmp	r3, #0
   25766:	f000 80b8 	beq.w	258da <_vfiprintf_r+0x1ee>
   2576a:	2300      	movs	r3, #0
   2576c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25770:	f10a 0a01 	add.w	sl, sl, #1
   25774:	9304      	str	r3, [sp, #16]
   25776:	9307      	str	r3, [sp, #28]
   25778:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   2577c:	931a      	str	r3, [sp, #104]	; 0x68
   2577e:	e9cd 2305 	strd	r2, r3, [sp, #20]
   25782:	4654      	mov	r4, sl
   25784:	2205      	movs	r2, #5
   25786:	485d      	ldr	r0, [pc, #372]	; (258fc <_vfiprintf_r+0x210>)
   25788:	f814 1b01 	ldrb.w	r1, [r4], #1
   2578c:	f00b fb1c 	bl	30dc8 <memchr>
   25790:	9a04      	ldr	r2, [sp, #16]
   25792:	2800      	cmp	r0, #0
   25794:	d130      	bne.n	257f8 <_vfiprintf_r+0x10c>
   25796:	06d0      	lsls	r0, r2, #27
   25798:	bf44      	itt	mi
   2579a:	2320      	movmi	r3, #32
   2579c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   257a0:	0711      	lsls	r1, r2, #28
   257a2:	bf44      	itt	mi
   257a4:	232b      	movmi	r3, #43	; 0x2b
   257a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   257aa:	f89a 3000 	ldrb.w	r3, [sl]
   257ae:	2b2a      	cmp	r3, #42	; 0x2a
   257b0:	d02a      	beq.n	25808 <_vfiprintf_r+0x11c>
   257b2:	9a07      	ldr	r2, [sp, #28]
   257b4:	4654      	mov	r4, sl
   257b6:	2000      	movs	r0, #0
   257b8:	f04f 0c0a 	mov.w	ip, #10
   257bc:	4621      	mov	r1, r4
   257be:	f811 3b01 	ldrb.w	r3, [r1], #1
   257c2:	3b30      	subs	r3, #48	; 0x30
   257c4:	2b09      	cmp	r3, #9
   257c6:	d963      	bls.n	25890 <_vfiprintf_r+0x1a4>
   257c8:	b358      	cbz	r0, 25822 <_vfiprintf_r+0x136>
   257ca:	9207      	str	r2, [sp, #28]
   257cc:	e029      	b.n	25822 <_vfiprintf_r+0x136>
   257ce:	4b4c      	ldr	r3, [pc, #304]	; (25900 <_vfiprintf_r+0x214>)
   257d0:	429d      	cmp	r5, r3
   257d2:	d101      	bne.n	257d8 <_vfiprintf_r+0xec>
   257d4:	68b5      	ldr	r5, [r6, #8]
   257d6:	e799      	b.n	2570c <_vfiprintf_r+0x20>
   257d8:	4b4a      	ldr	r3, [pc, #296]	; (25904 <_vfiprintf_r+0x218>)
   257da:	429d      	cmp	r5, r3
   257dc:	bf08      	it	eq
   257de:	68f5      	ldreq	r5, [r6, #12]
   257e0:	e794      	b.n	2570c <_vfiprintf_r+0x20>
   257e2:	4629      	mov	r1, r5
   257e4:	4630      	mov	r0, r6
   257e6:	f000 fa97 	bl	25d18 <__swsetup_r>
   257ea:	2800      	cmp	r0, #0
   257ec:	d094      	beq.n	25718 <_vfiprintf_r+0x2c>
   257ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   257f2:	b01d      	add	sp, #116	; 0x74
   257f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   257f8:	eba0 0308 	sub.w	r3, r0, r8
   257fc:	46a2      	mov	sl, r4
   257fe:	fa09 f303 	lsl.w	r3, r9, r3
   25802:	4313      	orrs	r3, r2
   25804:	9304      	str	r3, [sp, #16]
   25806:	e7bc      	b.n	25782 <_vfiprintf_r+0x96>
   25808:	9b03      	ldr	r3, [sp, #12]
   2580a:	1d19      	adds	r1, r3, #4
   2580c:	681b      	ldr	r3, [r3, #0]
   2580e:	2b00      	cmp	r3, #0
   25810:	9103      	str	r1, [sp, #12]
   25812:	bfbb      	ittet	lt
   25814:	425b      	neglt	r3, r3
   25816:	f042 0202 	orrlt.w	r2, r2, #2
   2581a:	9307      	strge	r3, [sp, #28]
   2581c:	9307      	strlt	r3, [sp, #28]
   2581e:	bfb8      	it	lt
   25820:	9204      	strlt	r2, [sp, #16]
   25822:	7823      	ldrb	r3, [r4, #0]
   25824:	2b2e      	cmp	r3, #46	; 0x2e
   25826:	d10c      	bne.n	25842 <_vfiprintf_r+0x156>
   25828:	7863      	ldrb	r3, [r4, #1]
   2582a:	2b2a      	cmp	r3, #42	; 0x2a
   2582c:	d135      	bne.n	2589a <_vfiprintf_r+0x1ae>
   2582e:	9b03      	ldr	r3, [sp, #12]
   25830:	3402      	adds	r4, #2
   25832:	1d1a      	adds	r2, r3, #4
   25834:	681b      	ldr	r3, [r3, #0]
   25836:	2b00      	cmp	r3, #0
   25838:	9203      	str	r2, [sp, #12]
   2583a:	bfb8      	it	lt
   2583c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   25840:	9305      	str	r3, [sp, #20]
   25842:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 25914 <_vfiprintf_r+0x228>
   25846:	2203      	movs	r2, #3
   25848:	7821      	ldrb	r1, [r4, #0]
   2584a:	4650      	mov	r0, sl
   2584c:	f00b fabc 	bl	30dc8 <memchr>
   25850:	b140      	cbz	r0, 25864 <_vfiprintf_r+0x178>
   25852:	2340      	movs	r3, #64	; 0x40
   25854:	eba0 000a 	sub.w	r0, r0, sl
   25858:	3401      	adds	r4, #1
   2585a:	fa03 f000 	lsl.w	r0, r3, r0
   2585e:	9b04      	ldr	r3, [sp, #16]
   25860:	4303      	orrs	r3, r0
   25862:	9304      	str	r3, [sp, #16]
   25864:	f814 1b01 	ldrb.w	r1, [r4], #1
   25868:	2206      	movs	r2, #6
   2586a:	4827      	ldr	r0, [pc, #156]	; (25908 <_vfiprintf_r+0x21c>)
   2586c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   25870:	f00b faaa 	bl	30dc8 <memchr>
   25874:	2800      	cmp	r0, #0
   25876:	d035      	beq.n	258e4 <_vfiprintf_r+0x1f8>
   25878:	4b24      	ldr	r3, [pc, #144]	; (2590c <_vfiprintf_r+0x220>)
   2587a:	bb1b      	cbnz	r3, 258c4 <_vfiprintf_r+0x1d8>
   2587c:	9b03      	ldr	r3, [sp, #12]
   2587e:	3307      	adds	r3, #7
   25880:	f023 0307 	bic.w	r3, r3, #7
   25884:	3308      	adds	r3, #8
   25886:	9303      	str	r3, [sp, #12]
   25888:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2588a:	443b      	add	r3, r7
   2588c:	9309      	str	r3, [sp, #36]	; 0x24
   2588e:	e751      	b.n	25734 <_vfiprintf_r+0x48>
   25890:	fb0c 3202 	mla	r2, ip, r2, r3
   25894:	460c      	mov	r4, r1
   25896:	2001      	movs	r0, #1
   25898:	e790      	b.n	257bc <_vfiprintf_r+0xd0>
   2589a:	2300      	movs	r3, #0
   2589c:	3401      	adds	r4, #1
   2589e:	f04f 0c0a 	mov.w	ip, #10
   258a2:	4619      	mov	r1, r3
   258a4:	9305      	str	r3, [sp, #20]
   258a6:	4620      	mov	r0, r4
   258a8:	f810 2b01 	ldrb.w	r2, [r0], #1
   258ac:	3a30      	subs	r2, #48	; 0x30
   258ae:	2a09      	cmp	r2, #9
   258b0:	d903      	bls.n	258ba <_vfiprintf_r+0x1ce>
   258b2:	2b00      	cmp	r3, #0
   258b4:	d0c5      	beq.n	25842 <_vfiprintf_r+0x156>
   258b6:	9105      	str	r1, [sp, #20]
   258b8:	e7c3      	b.n	25842 <_vfiprintf_r+0x156>
   258ba:	fb0c 2101 	mla	r1, ip, r1, r2
   258be:	4604      	mov	r4, r0
   258c0:	2301      	movs	r3, #1
   258c2:	e7f0      	b.n	258a6 <_vfiprintf_r+0x1ba>
   258c4:	ab03      	add	r3, sp, #12
   258c6:	462a      	mov	r2, r5
   258c8:	a904      	add	r1, sp, #16
   258ca:	4630      	mov	r0, r6
   258cc:	9300      	str	r3, [sp, #0]
   258ce:	4b10      	ldr	r3, [pc, #64]	; (25910 <_vfiprintf_r+0x224>)
   258d0:	e000      	b.n	258d4 <_vfiprintf_r+0x1e8>
   258d2:	bf00      	nop
   258d4:	1c42      	adds	r2, r0, #1
   258d6:	4607      	mov	r7, r0
   258d8:	d1d6      	bne.n	25888 <_vfiprintf_r+0x19c>
   258da:	89ab      	ldrh	r3, [r5, #12]
   258dc:	065b      	lsls	r3, r3, #25
   258de:	d486      	bmi.n	257ee <_vfiprintf_r+0x102>
   258e0:	9809      	ldr	r0, [sp, #36]	; 0x24
   258e2:	e786      	b.n	257f2 <_vfiprintf_r+0x106>
   258e4:	ab03      	add	r3, sp, #12
   258e6:	462a      	mov	r2, r5
   258e8:	a904      	add	r1, sp, #16
   258ea:	4630      	mov	r0, r6
   258ec:	9300      	str	r3, [sp, #0]
   258ee:	4b08      	ldr	r3, [pc, #32]	; (25910 <_vfiprintf_r+0x224>)
   258f0:	f000 f812 	bl	25918 <_printf_i>
   258f4:	e7ee      	b.n	258d4 <_vfiprintf_r+0x1e8>
   258f6:	bf00      	nop
   258f8:	00033700 	.word	0x00033700
   258fc:	00037675 	.word	0x00037675
   25900:	00033720 	.word	0x00033720
   25904:	000336e0 	.word	0x000336e0
   25908:	0003767f 	.word	0x0003767f
   2590c:	00000000 	.word	0x00000000
   25910:	00030ed9 	.word	0x00030ed9
   25914:	0003767b 	.word	0x0003767b

00025918 <_printf_i>:
   25918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   2591c:	460c      	mov	r4, r1
   2591e:	4691      	mov	r9, r2
   25920:	4680      	mov	r8, r0
   25922:	469a      	mov	sl, r3
   25924:	7e27      	ldrb	r7, [r4, #24]
   25926:	f104 0243 	add.w	r2, r4, #67	; 0x43
   2592a:	990c      	ldr	r1, [sp, #48]	; 0x30
   2592c:	2f78      	cmp	r7, #120	; 0x78
   2592e:	d807      	bhi.n	25940 <_printf_i+0x28>
   25930:	2f62      	cmp	r7, #98	; 0x62
   25932:	d80a      	bhi.n	2594a <_printf_i+0x32>
   25934:	2f00      	cmp	r7, #0
   25936:	f000 80d8 	beq.w	25aea <_printf_i+0x1d2>
   2593a:	2f58      	cmp	r7, #88	; 0x58
   2593c:	f000 80a3 	beq.w	25a86 <_printf_i+0x16e>
   25940:	f104 0642 	add.w	r6, r4, #66	; 0x42
   25944:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   25948:	e03a      	b.n	259c0 <_printf_i+0xa8>
   2594a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   2594e:	2b15      	cmp	r3, #21
   25950:	d8f6      	bhi.n	25940 <_printf_i+0x28>
   25952:	a001      	add	r0, pc, #4	; (adr r0, 25958 <_printf_i+0x40>)
   25954:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   25958:	000259b1 	.word	0x000259b1
   2595c:	000259c5 	.word	0x000259c5
   25960:	00025941 	.word	0x00025941
   25964:	00025941 	.word	0x00025941
   25968:	00025941 	.word	0x00025941
   2596c:	00025941 	.word	0x00025941
   25970:	000259c5 	.word	0x000259c5
   25974:	00025941 	.word	0x00025941
   25978:	00025941 	.word	0x00025941
   2597c:	00025941 	.word	0x00025941
   25980:	00025941 	.word	0x00025941
   25984:	00025ad1 	.word	0x00025ad1
   25988:	000259f5 	.word	0x000259f5
   2598c:	00025ab3 	.word	0x00025ab3
   25990:	00025941 	.word	0x00025941
   25994:	00025941 	.word	0x00025941
   25998:	00025af3 	.word	0x00025af3
   2599c:	00025941 	.word	0x00025941
   259a0:	000259f5 	.word	0x000259f5
   259a4:	00025941 	.word	0x00025941
   259a8:	00025941 	.word	0x00025941
   259ac:	00025abb 	.word	0x00025abb
   259b0:	680b      	ldr	r3, [r1, #0]
   259b2:	f104 0642 	add.w	r6, r4, #66	; 0x42
   259b6:	1d1a      	adds	r2, r3, #4
   259b8:	681b      	ldr	r3, [r3, #0]
   259ba:	600a      	str	r2, [r1, #0]
   259bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   259c0:	2301      	movs	r3, #1
   259c2:	e0a3      	b.n	25b0c <_printf_i+0x1f4>
   259c4:	6825      	ldr	r5, [r4, #0]
   259c6:	6808      	ldr	r0, [r1, #0]
   259c8:	062e      	lsls	r6, r5, #24
   259ca:	f100 0304 	add.w	r3, r0, #4
   259ce:	d50a      	bpl.n	259e6 <_printf_i+0xce>
   259d0:	6805      	ldr	r5, [r0, #0]
   259d2:	600b      	str	r3, [r1, #0]
   259d4:	2d00      	cmp	r5, #0
   259d6:	da03      	bge.n	259e0 <_printf_i+0xc8>
   259d8:	232d      	movs	r3, #45	; 0x2d
   259da:	426d      	negs	r5, r5
   259dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   259e0:	485e      	ldr	r0, [pc, #376]	; (25b5c <_printf_i+0x244>)
   259e2:	230a      	movs	r3, #10
   259e4:	e019      	b.n	25a1a <_printf_i+0x102>
   259e6:	f015 0f40 	tst.w	r5, #64	; 0x40
   259ea:	6805      	ldr	r5, [r0, #0]
   259ec:	600b      	str	r3, [r1, #0]
   259ee:	bf18      	it	ne
   259f0:	b22d      	sxthne	r5, r5
   259f2:	e7ef      	b.n	259d4 <_printf_i+0xbc>
   259f4:	680b      	ldr	r3, [r1, #0]
   259f6:	6825      	ldr	r5, [r4, #0]
   259f8:	1d18      	adds	r0, r3, #4
   259fa:	6008      	str	r0, [r1, #0]
   259fc:	0628      	lsls	r0, r5, #24
   259fe:	d501      	bpl.n	25a04 <_printf_i+0xec>
   25a00:	681d      	ldr	r5, [r3, #0]
   25a02:	e002      	b.n	25a0a <_printf_i+0xf2>
   25a04:	0669      	lsls	r1, r5, #25
   25a06:	d5fb      	bpl.n	25a00 <_printf_i+0xe8>
   25a08:	881d      	ldrh	r5, [r3, #0]
   25a0a:	2f6f      	cmp	r7, #111	; 0x6f
   25a0c:	4853      	ldr	r0, [pc, #332]	; (25b5c <_printf_i+0x244>)
   25a0e:	bf0c      	ite	eq
   25a10:	2308      	moveq	r3, #8
   25a12:	230a      	movne	r3, #10
   25a14:	2100      	movs	r1, #0
   25a16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   25a1a:	6866      	ldr	r6, [r4, #4]
   25a1c:	2e00      	cmp	r6, #0
   25a1e:	60a6      	str	r6, [r4, #8]
   25a20:	bfa2      	ittt	ge
   25a22:	6821      	ldrge	r1, [r4, #0]
   25a24:	f021 0104 	bicge.w	r1, r1, #4
   25a28:	6021      	strge	r1, [r4, #0]
   25a2a:	b90d      	cbnz	r5, 25a30 <_printf_i+0x118>
   25a2c:	2e00      	cmp	r6, #0
   25a2e:	d04d      	beq.n	25acc <_printf_i+0x1b4>
   25a30:	4616      	mov	r6, r2
   25a32:	fbb5 f1f3 	udiv	r1, r5, r3
   25a36:	fb03 5711 	mls	r7, r3, r1, r5
   25a3a:	5dc7      	ldrb	r7, [r0, r7]
   25a3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
   25a40:	462f      	mov	r7, r5
   25a42:	460d      	mov	r5, r1
   25a44:	42bb      	cmp	r3, r7
   25a46:	d9f4      	bls.n	25a32 <_printf_i+0x11a>
   25a48:	2b08      	cmp	r3, #8
   25a4a:	d10b      	bne.n	25a64 <_printf_i+0x14c>
   25a4c:	6823      	ldr	r3, [r4, #0]
   25a4e:	07df      	lsls	r7, r3, #31
   25a50:	d508      	bpl.n	25a64 <_printf_i+0x14c>
   25a52:	6923      	ldr	r3, [r4, #16]
   25a54:	6861      	ldr	r1, [r4, #4]
   25a56:	4299      	cmp	r1, r3
   25a58:	bfde      	ittt	le
   25a5a:	2330      	movle	r3, #48	; 0x30
   25a5c:	f806 3c01 	strble.w	r3, [r6, #-1]
   25a60:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
   25a64:	1b92      	subs	r2, r2, r6
   25a66:	6122      	str	r2, [r4, #16]
   25a68:	464b      	mov	r3, r9
   25a6a:	aa03      	add	r2, sp, #12
   25a6c:	4621      	mov	r1, r4
   25a6e:	4640      	mov	r0, r8
   25a70:	f8cd a000 	str.w	sl, [sp]
   25a74:	f00b fa42 	bl	30efc <_printf_common>
   25a78:	3001      	adds	r0, #1
   25a7a:	d14c      	bne.n	25b16 <_printf_i+0x1fe>
   25a7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25a80:	b004      	add	sp, #16
   25a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25a86:	4835      	ldr	r0, [pc, #212]	; (25b5c <_printf_i+0x244>)
   25a88:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   25a8c:	6823      	ldr	r3, [r4, #0]
   25a8e:	680e      	ldr	r6, [r1, #0]
   25a90:	061f      	lsls	r7, r3, #24
   25a92:	f856 5b04 	ldr.w	r5, [r6], #4
   25a96:	600e      	str	r6, [r1, #0]
   25a98:	d514      	bpl.n	25ac4 <_printf_i+0x1ac>
   25a9a:	07d9      	lsls	r1, r3, #31
   25a9c:	bf44      	itt	mi
   25a9e:	f043 0320 	orrmi.w	r3, r3, #32
   25aa2:	6023      	strmi	r3, [r4, #0]
   25aa4:	b91d      	cbnz	r5, 25aae <_printf_i+0x196>
   25aa6:	6823      	ldr	r3, [r4, #0]
   25aa8:	f023 0320 	bic.w	r3, r3, #32
   25aac:	6023      	str	r3, [r4, #0]
   25aae:	2310      	movs	r3, #16
   25ab0:	e7b0      	b.n	25a14 <_printf_i+0xfc>
   25ab2:	6823      	ldr	r3, [r4, #0]
   25ab4:	f043 0320 	orr.w	r3, r3, #32
   25ab8:	6023      	str	r3, [r4, #0]
   25aba:	2378      	movs	r3, #120	; 0x78
   25abc:	4828      	ldr	r0, [pc, #160]	; (25b60 <_printf_i+0x248>)
   25abe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   25ac2:	e7e3      	b.n	25a8c <_printf_i+0x174>
   25ac4:	065e      	lsls	r6, r3, #25
   25ac6:	bf48      	it	mi
   25ac8:	b2ad      	uxthmi	r5, r5
   25aca:	e7e6      	b.n	25a9a <_printf_i+0x182>
   25acc:	4616      	mov	r6, r2
   25ace:	e7bb      	b.n	25a48 <_printf_i+0x130>
   25ad0:	680b      	ldr	r3, [r1, #0]
   25ad2:	6826      	ldr	r6, [r4, #0]
   25ad4:	1d1d      	adds	r5, r3, #4
   25ad6:	6960      	ldr	r0, [r4, #20]
   25ad8:	600d      	str	r5, [r1, #0]
   25ada:	0635      	lsls	r5, r6, #24
   25adc:	681b      	ldr	r3, [r3, #0]
   25ade:	d501      	bpl.n	25ae4 <_printf_i+0x1cc>
   25ae0:	6018      	str	r0, [r3, #0]
   25ae2:	e002      	b.n	25aea <_printf_i+0x1d2>
   25ae4:	0671      	lsls	r1, r6, #25
   25ae6:	d5fb      	bpl.n	25ae0 <_printf_i+0x1c8>
   25ae8:	8018      	strh	r0, [r3, #0]
   25aea:	2300      	movs	r3, #0
   25aec:	4616      	mov	r6, r2
   25aee:	6123      	str	r3, [r4, #16]
   25af0:	e7ba      	b.n	25a68 <_printf_i+0x150>
   25af2:	680b      	ldr	r3, [r1, #0]
   25af4:	1d1a      	adds	r2, r3, #4
   25af6:	600a      	str	r2, [r1, #0]
   25af8:	2100      	movs	r1, #0
   25afa:	681e      	ldr	r6, [r3, #0]
   25afc:	6862      	ldr	r2, [r4, #4]
   25afe:	4630      	mov	r0, r6
   25b00:	f00b f962 	bl	30dc8 <memchr>
   25b04:	b108      	cbz	r0, 25b0a <_printf_i+0x1f2>
   25b06:	1b80      	subs	r0, r0, r6
   25b08:	6060      	str	r0, [r4, #4]
   25b0a:	6863      	ldr	r3, [r4, #4]
   25b0c:	6123      	str	r3, [r4, #16]
   25b0e:	2300      	movs	r3, #0
   25b10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   25b14:	e7a8      	b.n	25a68 <_printf_i+0x150>
   25b16:	6923      	ldr	r3, [r4, #16]
   25b18:	4632      	mov	r2, r6
   25b1a:	4649      	mov	r1, r9
   25b1c:	4640      	mov	r0, r8
   25b1e:	47d0      	blx	sl
   25b20:	3001      	adds	r0, #1
   25b22:	d0ab      	beq.n	25a7c <_printf_i+0x164>
   25b24:	6823      	ldr	r3, [r4, #0]
   25b26:	079b      	lsls	r3, r3, #30
   25b28:	d413      	bmi.n	25b52 <_printf_i+0x23a>
   25b2a:	68e0      	ldr	r0, [r4, #12]
   25b2c:	9b03      	ldr	r3, [sp, #12]
   25b2e:	4298      	cmp	r0, r3
   25b30:	bfb8      	it	lt
   25b32:	4618      	movlt	r0, r3
   25b34:	e7a4      	b.n	25a80 <_printf_i+0x168>
   25b36:	2301      	movs	r3, #1
   25b38:	4632      	mov	r2, r6
   25b3a:	4649      	mov	r1, r9
   25b3c:	4640      	mov	r0, r8
   25b3e:	47d0      	blx	sl
   25b40:	3001      	adds	r0, #1
   25b42:	d09b      	beq.n	25a7c <_printf_i+0x164>
   25b44:	3501      	adds	r5, #1
   25b46:	68e3      	ldr	r3, [r4, #12]
   25b48:	9903      	ldr	r1, [sp, #12]
   25b4a:	1a5b      	subs	r3, r3, r1
   25b4c:	42ab      	cmp	r3, r5
   25b4e:	dcf2      	bgt.n	25b36 <_printf_i+0x21e>
   25b50:	e7eb      	b.n	25b2a <_printf_i+0x212>
   25b52:	2500      	movs	r5, #0
   25b54:	f104 0619 	add.w	r6, r4, #25
   25b58:	e7f5      	b.n	25b46 <_printf_i+0x22e>
   25b5a:	bf00      	nop
   25b5c:	00037686 	.word	0x00037686
   25b60:	00037697 	.word	0x00037697

00025b64 <_putc_r>:
   25b64:	b570      	push	{r4, r5, r6, lr}
   25b66:	460d      	mov	r5, r1
   25b68:	4614      	mov	r4, r2
   25b6a:	4606      	mov	r6, r0
   25b6c:	b118      	cbz	r0, 25b76 <_putc_r+0x12>
   25b6e:	6983      	ldr	r3, [r0, #24]
   25b70:	b90b      	cbnz	r3, 25b76 <_putc_r+0x12>
   25b72:	f000 fa21 	bl	25fb8 <__sinit>
   25b76:	4b13      	ldr	r3, [pc, #76]	; (25bc4 <_putc_r+0x60>)
   25b78:	429c      	cmp	r4, r3
   25b7a:	d111      	bne.n	25ba0 <_putc_r+0x3c>
   25b7c:	6874      	ldr	r4, [r6, #4]
   25b7e:	68a3      	ldr	r3, [r4, #8]
   25b80:	3b01      	subs	r3, #1
   25b82:	2b00      	cmp	r3, #0
   25b84:	60a3      	str	r3, [r4, #8]
   25b86:	da05      	bge.n	25b94 <_putc_r+0x30>
   25b88:	69a2      	ldr	r2, [r4, #24]
   25b8a:	4293      	cmp	r3, r2
   25b8c:	db12      	blt.n	25bb4 <_putc_r+0x50>
   25b8e:	b2eb      	uxtb	r3, r5
   25b90:	2b0a      	cmp	r3, #10
   25b92:	d00f      	beq.n	25bb4 <_putc_r+0x50>
   25b94:	6823      	ldr	r3, [r4, #0]
   25b96:	b2e8      	uxtb	r0, r5
   25b98:	1c5a      	adds	r2, r3, #1
   25b9a:	6022      	str	r2, [r4, #0]
   25b9c:	701d      	strb	r5, [r3, #0]
   25b9e:	bd70      	pop	{r4, r5, r6, pc}
   25ba0:	4b09      	ldr	r3, [pc, #36]	; (25bc8 <_putc_r+0x64>)
   25ba2:	429c      	cmp	r4, r3
   25ba4:	d101      	bne.n	25baa <_putc_r+0x46>
   25ba6:	68b4      	ldr	r4, [r6, #8]
   25ba8:	e7e9      	b.n	25b7e <_putc_r+0x1a>
   25baa:	4b08      	ldr	r3, [pc, #32]	; (25bcc <_putc_r+0x68>)
   25bac:	429c      	cmp	r4, r3
   25bae:	bf08      	it	eq
   25bb0:	68f4      	ldreq	r4, [r6, #12]
   25bb2:	e7e4      	b.n	25b7e <_putc_r+0x1a>
   25bb4:	4622      	mov	r2, r4
   25bb6:	4629      	mov	r1, r5
   25bb8:	4630      	mov	r0, r6
   25bba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   25bbe:	f000 b859 	b.w	25c74 <__swbuf_r>
   25bc2:	bf00      	nop
   25bc4:	00033700 	.word	0x00033700
   25bc8:	00033720 	.word	0x00033720
   25bcc:	000336e0 	.word	0x000336e0

00025bd0 <realloc>:
   25bd0:	4b02      	ldr	r3, [pc, #8]	; (25bdc <realloc+0xc>)
   25bd2:	460a      	mov	r2, r1
   25bd4:	4601      	mov	r1, r0
   25bd6:	6818      	ldr	r0, [r3, #0]
   25bd8:	f00b b941 	b.w	30e5e <_realloc_r>
   25bdc:	20020058 	.word	0x20020058

00025be0 <_sbrk_r>:
   25be0:	b538      	push	{r3, r4, r5, lr}
   25be2:	2300      	movs	r3, #0
   25be4:	4d05      	ldr	r5, [pc, #20]	; (25bfc <_sbrk_r+0x1c>)
   25be6:	4604      	mov	r4, r0
   25be8:	4608      	mov	r0, r1
   25bea:	602b      	str	r3, [r5, #0]
   25bec:	f7ee fabc 	bl	14168 <_sbrk>
   25bf0:	1c43      	adds	r3, r0, #1
   25bf2:	d102      	bne.n	25bfa <_sbrk_r+0x1a>
   25bf4:	682b      	ldr	r3, [r5, #0]
   25bf6:	b103      	cbz	r3, 25bfa <_sbrk_r+0x1a>
   25bf8:	6023      	str	r3, [r4, #0]
   25bfa:	bd38      	pop	{r3, r4, r5, pc}
   25bfc:	2002712c 	.word	0x2002712c

00025c00 <raise>:
   25c00:	4b02      	ldr	r3, [pc, #8]	; (25c0c <raise+0xc>)
   25c02:	4601      	mov	r1, r0
   25c04:	6818      	ldr	r0, [r3, #0]
   25c06:	f00b b9e9 	b.w	30fdc <_raise_r>
   25c0a:	bf00      	nop
   25c0c:	20020058 	.word	0x20020058

00025c10 <_kill_r>:
   25c10:	b538      	push	{r3, r4, r5, lr}
   25c12:	2300      	movs	r3, #0
   25c14:	4d06      	ldr	r5, [pc, #24]	; (25c30 <_kill_r+0x20>)
   25c16:	4604      	mov	r4, r0
   25c18:	4608      	mov	r0, r1
   25c1a:	4611      	mov	r1, r2
   25c1c:	602b      	str	r3, [r5, #0]
   25c1e:	f001 f8fb 	bl	26e18 <_kill>
   25c22:	1c43      	adds	r3, r0, #1
   25c24:	d102      	bne.n	25c2c <_kill_r+0x1c>
   25c26:	682b      	ldr	r3, [r5, #0]
   25c28:	b103      	cbz	r3, 25c2c <_kill_r+0x1c>
   25c2a:	6023      	str	r3, [r4, #0]
   25c2c:	bd38      	pop	{r3, r4, r5, pc}
   25c2e:	bf00      	nop
   25c30:	2002712c 	.word	0x2002712c

00025c34 <siprintf>:
   25c34:	b40e      	push	{r1, r2, r3}
   25c36:	b500      	push	{lr}
   25c38:	b09a      	sub	sp, #104	; 0x68
   25c3a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   25c3e:	ab1b      	add	r3, sp, #108	; 0x6c
   25c40:	9001      	str	r0, [sp, #4]
   25c42:	9005      	str	r0, [sp, #20]
   25c44:	9106      	str	r1, [sp, #24]
   25c46:	9103      	str	r1, [sp, #12]
   25c48:	4808      	ldr	r0, [pc, #32]	; (25c6c <siprintf+0x38>)
   25c4a:	4909      	ldr	r1, [pc, #36]	; (25c70 <siprintf+0x3c>)
   25c4c:	f853 2b04 	ldr.w	r2, [r3], #4
   25c50:	9104      	str	r1, [sp, #16]
   25c52:	a901      	add	r1, sp, #4
   25c54:	6800      	ldr	r0, [r0, #0]
   25c56:	9300      	str	r3, [sp, #0]
   25c58:	f000 fa5a 	bl	26110 <_svfiprintf_r>
   25c5c:	9b01      	ldr	r3, [sp, #4]
   25c5e:	2200      	movs	r2, #0
   25c60:	701a      	strb	r2, [r3, #0]
   25c62:	b01a      	add	sp, #104	; 0x68
   25c64:	f85d eb04 	ldr.w	lr, [sp], #4
   25c68:	b003      	add	sp, #12
   25c6a:	4770      	bx	lr
   25c6c:	20020058 	.word	0x20020058
   25c70:	ffff0208 	.word	0xffff0208

00025c74 <__swbuf_r>:
   25c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25c76:	460e      	mov	r6, r1
   25c78:	4614      	mov	r4, r2
   25c7a:	4605      	mov	r5, r0
   25c7c:	b118      	cbz	r0, 25c86 <__swbuf_r+0x12>
   25c7e:	6983      	ldr	r3, [r0, #24]
   25c80:	b90b      	cbnz	r3, 25c86 <__swbuf_r+0x12>
   25c82:	f000 f999 	bl	25fb8 <__sinit>
   25c86:	4b21      	ldr	r3, [pc, #132]	; (25d0c <__swbuf_r+0x98>)
   25c88:	429c      	cmp	r4, r3
   25c8a:	d12b      	bne.n	25ce4 <__swbuf_r+0x70>
   25c8c:	686c      	ldr	r4, [r5, #4]
   25c8e:	69a3      	ldr	r3, [r4, #24]
   25c90:	60a3      	str	r3, [r4, #8]
   25c92:	89a3      	ldrh	r3, [r4, #12]
   25c94:	071a      	lsls	r2, r3, #28
   25c96:	d52f      	bpl.n	25cf8 <__swbuf_r+0x84>
   25c98:	6923      	ldr	r3, [r4, #16]
   25c9a:	b36b      	cbz	r3, 25cf8 <__swbuf_r+0x84>
   25c9c:	6923      	ldr	r3, [r4, #16]
   25c9e:	b2f6      	uxtb	r6, r6
   25ca0:	6820      	ldr	r0, [r4, #0]
   25ca2:	4637      	mov	r7, r6
   25ca4:	1ac0      	subs	r0, r0, r3
   25ca6:	6963      	ldr	r3, [r4, #20]
   25ca8:	4283      	cmp	r3, r0
   25caa:	dc04      	bgt.n	25cb6 <__swbuf_r+0x42>
   25cac:	4621      	mov	r1, r4
   25cae:	4628      	mov	r0, r5
   25cb0:	f000 f92e 	bl	25f10 <_fflush_r>
   25cb4:	bb30      	cbnz	r0, 25d04 <__swbuf_r+0x90>
   25cb6:	68a3      	ldr	r3, [r4, #8]
   25cb8:	3001      	adds	r0, #1
   25cba:	3b01      	subs	r3, #1
   25cbc:	60a3      	str	r3, [r4, #8]
   25cbe:	6823      	ldr	r3, [r4, #0]
   25cc0:	1c5a      	adds	r2, r3, #1
   25cc2:	6022      	str	r2, [r4, #0]
   25cc4:	701e      	strb	r6, [r3, #0]
   25cc6:	6963      	ldr	r3, [r4, #20]
   25cc8:	4283      	cmp	r3, r0
   25cca:	d004      	beq.n	25cd6 <__swbuf_r+0x62>
   25ccc:	89a3      	ldrh	r3, [r4, #12]
   25cce:	07db      	lsls	r3, r3, #31
   25cd0:	d506      	bpl.n	25ce0 <__swbuf_r+0x6c>
   25cd2:	2e0a      	cmp	r6, #10
   25cd4:	d104      	bne.n	25ce0 <__swbuf_r+0x6c>
   25cd6:	4621      	mov	r1, r4
   25cd8:	4628      	mov	r0, r5
   25cda:	f000 f919 	bl	25f10 <_fflush_r>
   25cde:	b988      	cbnz	r0, 25d04 <__swbuf_r+0x90>
   25ce0:	4638      	mov	r0, r7
   25ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25ce4:	4b0a      	ldr	r3, [pc, #40]	; (25d10 <__swbuf_r+0x9c>)
   25ce6:	429c      	cmp	r4, r3
   25ce8:	d101      	bne.n	25cee <__swbuf_r+0x7a>
   25cea:	68ac      	ldr	r4, [r5, #8]
   25cec:	e7cf      	b.n	25c8e <__swbuf_r+0x1a>
   25cee:	4b09      	ldr	r3, [pc, #36]	; (25d14 <__swbuf_r+0xa0>)
   25cf0:	429c      	cmp	r4, r3
   25cf2:	bf08      	it	eq
   25cf4:	68ec      	ldreq	r4, [r5, #12]
   25cf6:	e7ca      	b.n	25c8e <__swbuf_r+0x1a>
   25cf8:	4621      	mov	r1, r4
   25cfa:	4628      	mov	r0, r5
   25cfc:	f000 f80c 	bl	25d18 <__swsetup_r>
   25d00:	2800      	cmp	r0, #0
   25d02:	d0cb      	beq.n	25c9c <__swbuf_r+0x28>
   25d04:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   25d08:	e7ea      	b.n	25ce0 <__swbuf_r+0x6c>
   25d0a:	bf00      	nop
   25d0c:	00033700 	.word	0x00033700
   25d10:	00033720 	.word	0x00033720
   25d14:	000336e0 	.word	0x000336e0

00025d18 <__swsetup_r>:
   25d18:	4b32      	ldr	r3, [pc, #200]	; (25de4 <__swsetup_r+0xcc>)
   25d1a:	b570      	push	{r4, r5, r6, lr}
   25d1c:	681d      	ldr	r5, [r3, #0]
   25d1e:	4606      	mov	r6, r0
   25d20:	460c      	mov	r4, r1
   25d22:	b125      	cbz	r5, 25d2e <__swsetup_r+0x16>
   25d24:	69ab      	ldr	r3, [r5, #24]
   25d26:	b913      	cbnz	r3, 25d2e <__swsetup_r+0x16>
   25d28:	4628      	mov	r0, r5
   25d2a:	f000 f945 	bl	25fb8 <__sinit>
   25d2e:	4b2e      	ldr	r3, [pc, #184]	; (25de8 <__swsetup_r+0xd0>)
   25d30:	429c      	cmp	r4, r3
   25d32:	d10f      	bne.n	25d54 <__swsetup_r+0x3c>
   25d34:	686c      	ldr	r4, [r5, #4]
   25d36:	89a3      	ldrh	r3, [r4, #12]
   25d38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   25d3c:	0719      	lsls	r1, r3, #28
   25d3e:	d42c      	bmi.n	25d9a <__swsetup_r+0x82>
   25d40:	06dd      	lsls	r5, r3, #27
   25d42:	d411      	bmi.n	25d68 <__swsetup_r+0x50>
   25d44:	2309      	movs	r3, #9
   25d46:	6033      	str	r3, [r6, #0]
   25d48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   25d4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25d50:	81a3      	strh	r3, [r4, #12]
   25d52:	e03e      	b.n	25dd2 <__swsetup_r+0xba>
   25d54:	4b25      	ldr	r3, [pc, #148]	; (25dec <__swsetup_r+0xd4>)
   25d56:	429c      	cmp	r4, r3
   25d58:	d101      	bne.n	25d5e <__swsetup_r+0x46>
   25d5a:	68ac      	ldr	r4, [r5, #8]
   25d5c:	e7eb      	b.n	25d36 <__swsetup_r+0x1e>
   25d5e:	4b24      	ldr	r3, [pc, #144]	; (25df0 <__swsetup_r+0xd8>)
   25d60:	429c      	cmp	r4, r3
   25d62:	bf08      	it	eq
   25d64:	68ec      	ldreq	r4, [r5, #12]
   25d66:	e7e6      	b.n	25d36 <__swsetup_r+0x1e>
   25d68:	0758      	lsls	r0, r3, #29
   25d6a:	d512      	bpl.n	25d92 <__swsetup_r+0x7a>
   25d6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   25d6e:	b141      	cbz	r1, 25d82 <__swsetup_r+0x6a>
   25d70:	f104 0344 	add.w	r3, r4, #68	; 0x44
   25d74:	4299      	cmp	r1, r3
   25d76:	d002      	beq.n	25d7e <__swsetup_r+0x66>
   25d78:	4630      	mov	r0, r6
   25d7a:	f7ff fc0d 	bl	25598 <_free_r>
   25d7e:	2300      	movs	r3, #0
   25d80:	6363      	str	r3, [r4, #52]	; 0x34
   25d82:	89a3      	ldrh	r3, [r4, #12]
   25d84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   25d88:	81a3      	strh	r3, [r4, #12]
   25d8a:	2300      	movs	r3, #0
   25d8c:	6063      	str	r3, [r4, #4]
   25d8e:	6923      	ldr	r3, [r4, #16]
   25d90:	6023      	str	r3, [r4, #0]
   25d92:	89a3      	ldrh	r3, [r4, #12]
   25d94:	f043 0308 	orr.w	r3, r3, #8
   25d98:	81a3      	strh	r3, [r4, #12]
   25d9a:	6923      	ldr	r3, [r4, #16]
   25d9c:	b94b      	cbnz	r3, 25db2 <__swsetup_r+0x9a>
   25d9e:	89a3      	ldrh	r3, [r4, #12]
   25da0:	f403 7320 	and.w	r3, r3, #640	; 0x280
   25da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   25da8:	d003      	beq.n	25db2 <__swsetup_r+0x9a>
   25daa:	4621      	mov	r1, r4
   25dac:	4630      	mov	r0, r6
   25dae:	f000 f96f 	bl	26090 <__smakebuf_r>
   25db2:	89a0      	ldrh	r0, [r4, #12]
   25db4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   25db8:	f010 0301 	ands.w	r3, r0, #1
   25dbc:	d00a      	beq.n	25dd4 <__swsetup_r+0xbc>
   25dbe:	2300      	movs	r3, #0
   25dc0:	60a3      	str	r3, [r4, #8]
   25dc2:	6963      	ldr	r3, [r4, #20]
   25dc4:	425b      	negs	r3, r3
   25dc6:	61a3      	str	r3, [r4, #24]
   25dc8:	6923      	ldr	r3, [r4, #16]
   25dca:	b943      	cbnz	r3, 25dde <__swsetup_r+0xc6>
   25dcc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   25dd0:	d1ba      	bne.n	25d48 <__swsetup_r+0x30>
   25dd2:	bd70      	pop	{r4, r5, r6, pc}
   25dd4:	0781      	lsls	r1, r0, #30
   25dd6:	bf58      	it	pl
   25dd8:	6963      	ldrpl	r3, [r4, #20]
   25dda:	60a3      	str	r3, [r4, #8]
   25ddc:	e7f4      	b.n	25dc8 <__swsetup_r+0xb0>
   25dde:	2000      	movs	r0, #0
   25de0:	e7f7      	b.n	25dd2 <__swsetup_r+0xba>
   25de2:	bf00      	nop
   25de4:	20020058 	.word	0x20020058
   25de8:	00033700 	.word	0x00033700
   25dec:	00033720 	.word	0x00033720
   25df0:	000336e0 	.word	0x000336e0

00025df4 <__sflush_r>:
   25df4:	898b      	ldrh	r3, [r1, #12]
   25df6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   25dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25dfe:	4605      	mov	r5, r0
   25e00:	0718      	lsls	r0, r3, #28
   25e02:	460c      	mov	r4, r1
   25e04:	d45f      	bmi.n	25ec6 <__sflush_r+0xd2>
   25e06:	684b      	ldr	r3, [r1, #4]
   25e08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   25e0c:	2b00      	cmp	r3, #0
   25e0e:	818a      	strh	r2, [r1, #12]
   25e10:	dc05      	bgt.n	25e1e <__sflush_r+0x2a>
   25e12:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   25e14:	2b00      	cmp	r3, #0
   25e16:	dc02      	bgt.n	25e1e <__sflush_r+0x2a>
   25e18:	2000      	movs	r0, #0
   25e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25e1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   25e20:	2e00      	cmp	r6, #0
   25e22:	d0f9      	beq.n	25e18 <__sflush_r+0x24>
   25e24:	2300      	movs	r3, #0
   25e26:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   25e2a:	682f      	ldr	r7, [r5, #0]
   25e2c:	602b      	str	r3, [r5, #0]
   25e2e:	d036      	beq.n	25e9e <__sflush_r+0xaa>
   25e30:	6d60      	ldr	r0, [r4, #84]	; 0x54
   25e32:	89a3      	ldrh	r3, [r4, #12]
   25e34:	075a      	lsls	r2, r3, #29
   25e36:	d505      	bpl.n	25e44 <__sflush_r+0x50>
   25e38:	6863      	ldr	r3, [r4, #4]
   25e3a:	1ac0      	subs	r0, r0, r3
   25e3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   25e3e:	b10b      	cbz	r3, 25e44 <__sflush_r+0x50>
   25e40:	6c23      	ldr	r3, [r4, #64]	; 0x40
   25e42:	1ac0      	subs	r0, r0, r3
   25e44:	2300      	movs	r3, #0
   25e46:	4602      	mov	r2, r0
   25e48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   25e4a:	4628      	mov	r0, r5
   25e4c:	6a21      	ldr	r1, [r4, #32]
   25e4e:	47b0      	blx	r6
   25e50:	1c43      	adds	r3, r0, #1
   25e52:	89a3      	ldrh	r3, [r4, #12]
   25e54:	d106      	bne.n	25e64 <__sflush_r+0x70>
   25e56:	6829      	ldr	r1, [r5, #0]
   25e58:	291d      	cmp	r1, #29
   25e5a:	d830      	bhi.n	25ebe <__sflush_r+0xca>
   25e5c:	4a2b      	ldr	r2, [pc, #172]	; (25f0c <__sflush_r+0x118>)
   25e5e:	40ca      	lsrs	r2, r1
   25e60:	07d6      	lsls	r6, r2, #31
   25e62:	d52c      	bpl.n	25ebe <__sflush_r+0xca>
   25e64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   25e68:	2200      	movs	r2, #0
   25e6a:	b21b      	sxth	r3, r3
   25e6c:	6062      	str	r2, [r4, #4]
   25e6e:	6922      	ldr	r2, [r4, #16]
   25e70:	04d9      	lsls	r1, r3, #19
   25e72:	81a3      	strh	r3, [r4, #12]
   25e74:	6022      	str	r2, [r4, #0]
   25e76:	d504      	bpl.n	25e82 <__sflush_r+0x8e>
   25e78:	1c42      	adds	r2, r0, #1
   25e7a:	d101      	bne.n	25e80 <__sflush_r+0x8c>
   25e7c:	682b      	ldr	r3, [r5, #0]
   25e7e:	b903      	cbnz	r3, 25e82 <__sflush_r+0x8e>
   25e80:	6560      	str	r0, [r4, #84]	; 0x54
   25e82:	6b61      	ldr	r1, [r4, #52]	; 0x34
   25e84:	602f      	str	r7, [r5, #0]
   25e86:	2900      	cmp	r1, #0
   25e88:	d0c6      	beq.n	25e18 <__sflush_r+0x24>
   25e8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
   25e8e:	4299      	cmp	r1, r3
   25e90:	d002      	beq.n	25e98 <__sflush_r+0xa4>
   25e92:	4628      	mov	r0, r5
   25e94:	f7ff fb80 	bl	25598 <_free_r>
   25e98:	2000      	movs	r0, #0
   25e9a:	6360      	str	r0, [r4, #52]	; 0x34
   25e9c:	e7bd      	b.n	25e1a <__sflush_r+0x26>
   25e9e:	6a21      	ldr	r1, [r4, #32]
   25ea0:	2301      	movs	r3, #1
   25ea2:	4628      	mov	r0, r5
   25ea4:	47b0      	blx	r6
   25ea6:	1c41      	adds	r1, r0, #1
   25ea8:	d1c3      	bne.n	25e32 <__sflush_r+0x3e>
   25eaa:	682b      	ldr	r3, [r5, #0]
   25eac:	2b00      	cmp	r3, #0
   25eae:	d0c0      	beq.n	25e32 <__sflush_r+0x3e>
   25eb0:	2b1d      	cmp	r3, #29
   25eb2:	d001      	beq.n	25eb8 <__sflush_r+0xc4>
   25eb4:	2b16      	cmp	r3, #22
   25eb6:	d101      	bne.n	25ebc <__sflush_r+0xc8>
   25eb8:	602f      	str	r7, [r5, #0]
   25eba:	e7ad      	b.n	25e18 <__sflush_r+0x24>
   25ebc:	89a3      	ldrh	r3, [r4, #12]
   25ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   25ec2:	81a3      	strh	r3, [r4, #12]
   25ec4:	e7a9      	b.n	25e1a <__sflush_r+0x26>
   25ec6:	690f      	ldr	r7, [r1, #16]
   25ec8:	2f00      	cmp	r7, #0
   25eca:	d0a5      	beq.n	25e18 <__sflush_r+0x24>
   25ecc:	079b      	lsls	r3, r3, #30
   25ece:	680e      	ldr	r6, [r1, #0]
   25ed0:	600f      	str	r7, [r1, #0]
   25ed2:	bf0c      	ite	eq
   25ed4:	694b      	ldreq	r3, [r1, #20]
   25ed6:	2300      	movne	r3, #0
   25ed8:	eba6 0807 	sub.w	r8, r6, r7
   25edc:	608b      	str	r3, [r1, #8]
   25ede:	f1b8 0f00 	cmp.w	r8, #0
   25ee2:	dd99      	ble.n	25e18 <__sflush_r+0x24>
   25ee4:	4643      	mov	r3, r8
   25ee6:	463a      	mov	r2, r7
   25ee8:	6a21      	ldr	r1, [r4, #32]
   25eea:	4628      	mov	r0, r5
   25eec:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   25eee:	47b0      	blx	r6
   25ef0:	2800      	cmp	r0, #0
   25ef2:	dc06      	bgt.n	25f02 <__sflush_r+0x10e>
   25ef4:	89a3      	ldrh	r3, [r4, #12]
   25ef6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25efa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   25efe:	81a3      	strh	r3, [r4, #12]
   25f00:	e78b      	b.n	25e1a <__sflush_r+0x26>
   25f02:	4407      	add	r7, r0
   25f04:	eba8 0800 	sub.w	r8, r8, r0
   25f08:	e7e9      	b.n	25ede <__sflush_r+0xea>
   25f0a:	bf00      	nop
   25f0c:	20400001 	.word	0x20400001

00025f10 <_fflush_r>:
   25f10:	b538      	push	{r3, r4, r5, lr}
   25f12:	690b      	ldr	r3, [r1, #16]
   25f14:	4605      	mov	r5, r0
   25f16:	460c      	mov	r4, r1
   25f18:	b1db      	cbz	r3, 25f52 <_fflush_r+0x42>
   25f1a:	b118      	cbz	r0, 25f24 <_fflush_r+0x14>
   25f1c:	6983      	ldr	r3, [r0, #24]
   25f1e:	b90b      	cbnz	r3, 25f24 <_fflush_r+0x14>
   25f20:	f000 f84a 	bl	25fb8 <__sinit>
   25f24:	4b0c      	ldr	r3, [pc, #48]	; (25f58 <_fflush_r+0x48>)
   25f26:	429c      	cmp	r4, r3
   25f28:	d109      	bne.n	25f3e <_fflush_r+0x2e>
   25f2a:	686c      	ldr	r4, [r5, #4]
   25f2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   25f30:	b17b      	cbz	r3, 25f52 <_fflush_r+0x42>
   25f32:	4621      	mov	r1, r4
   25f34:	4628      	mov	r0, r5
   25f36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   25f3a:	f7ff bf5b 	b.w	25df4 <__sflush_r>
   25f3e:	4b07      	ldr	r3, [pc, #28]	; (25f5c <_fflush_r+0x4c>)
   25f40:	429c      	cmp	r4, r3
   25f42:	d101      	bne.n	25f48 <_fflush_r+0x38>
   25f44:	68ac      	ldr	r4, [r5, #8]
   25f46:	e7f1      	b.n	25f2c <_fflush_r+0x1c>
   25f48:	4b05      	ldr	r3, [pc, #20]	; (25f60 <_fflush_r+0x50>)
   25f4a:	429c      	cmp	r4, r3
   25f4c:	bf08      	it	eq
   25f4e:	68ec      	ldreq	r4, [r5, #12]
   25f50:	e7ec      	b.n	25f2c <_fflush_r+0x1c>
   25f52:	2000      	movs	r0, #0
   25f54:	bd38      	pop	{r3, r4, r5, pc}
   25f56:	bf00      	nop
   25f58:	00033700 	.word	0x00033700
   25f5c:	00033720 	.word	0x00033720
   25f60:	000336e0 	.word	0x000336e0

00025f64 <std>:
   25f64:	2300      	movs	r3, #0
   25f66:	b510      	push	{r4, lr}
   25f68:	4604      	mov	r4, r0
   25f6a:	6083      	str	r3, [r0, #8]
   25f6c:	8181      	strh	r1, [r0, #12]
   25f6e:	4619      	mov	r1, r3
   25f70:	6603      	str	r3, [r0, #96]	; 0x60
   25f72:	81c2      	strh	r2, [r0, #14]
   25f74:	2208      	movs	r2, #8
   25f76:	6183      	str	r3, [r0, #24]
   25f78:	e9c0 3300 	strd	r3, r3, [r0]
   25f7c:	e9c0 3304 	strd	r3, r3, [r0, #16]
   25f80:	3058      	adds	r0, #88	; 0x58
   25f82:	f00a ff64 	bl	30e4e <memset>
   25f86:	4b05      	ldr	r3, [pc, #20]	; (25f9c <std+0x38>)
   25f88:	6224      	str	r4, [r4, #32]
   25f8a:	6263      	str	r3, [r4, #36]	; 0x24
   25f8c:	4b04      	ldr	r3, [pc, #16]	; (25fa0 <std+0x3c>)
   25f8e:	62a3      	str	r3, [r4, #40]	; 0x28
   25f90:	4b04      	ldr	r3, [pc, #16]	; (25fa4 <std+0x40>)
   25f92:	62e3      	str	r3, [r4, #44]	; 0x2c
   25f94:	4b04      	ldr	r3, [pc, #16]	; (25fa8 <std+0x44>)
   25f96:	6323      	str	r3, [r4, #48]	; 0x30
   25f98:	bd10      	pop	{r4, pc}
   25f9a:	bf00      	nop
   25f9c:	00031215 	.word	0x00031215
   25fa0:	00031237 	.word	0x00031237
   25fa4:	0003126f 	.word	0x0003126f
   25fa8:	00031293 	.word	0x00031293

00025fac <_cleanup_r>:
   25fac:	4901      	ldr	r1, [pc, #4]	; (25fb4 <_cleanup_r+0x8>)
   25fae:	f00b b882 	b.w	310b6 <_fwalk_reent>
   25fb2:	bf00      	nop
   25fb4:	00025f11 	.word	0x00025f11

00025fb8 <__sinit>:
   25fb8:	6983      	ldr	r3, [r0, #24]
   25fba:	b510      	push	{r4, lr}
   25fbc:	4604      	mov	r4, r0
   25fbe:	bb33      	cbnz	r3, 2600e <__sinit+0x56>
   25fc0:	6503      	str	r3, [r0, #80]	; 0x50
   25fc2:	4a13      	ldr	r2, [pc, #76]	; (26010 <__sinit+0x58>)
   25fc4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
   25fc8:	4b12      	ldr	r3, [pc, #72]	; (26014 <__sinit+0x5c>)
   25fca:	6282      	str	r2, [r0, #40]	; 0x28
   25fcc:	681b      	ldr	r3, [r3, #0]
   25fce:	4298      	cmp	r0, r3
   25fd0:	bf04      	itt	eq
   25fd2:	2301      	moveq	r3, #1
   25fd4:	6183      	streq	r3, [r0, #24]
   25fd6:	f000 f81f 	bl	26018 <__sfp>
   25fda:	6060      	str	r0, [r4, #4]
   25fdc:	4620      	mov	r0, r4
   25fde:	f000 f81b 	bl	26018 <__sfp>
   25fe2:	60a0      	str	r0, [r4, #8]
   25fe4:	4620      	mov	r0, r4
   25fe6:	f000 f817 	bl	26018 <__sfp>
   25fea:	2200      	movs	r2, #0
   25fec:	2104      	movs	r1, #4
   25fee:	60e0      	str	r0, [r4, #12]
   25ff0:	6860      	ldr	r0, [r4, #4]
   25ff2:	f7ff ffb7 	bl	25f64 <std>
   25ff6:	2201      	movs	r2, #1
   25ff8:	2109      	movs	r1, #9
   25ffa:	68a0      	ldr	r0, [r4, #8]
   25ffc:	f7ff ffb2 	bl	25f64 <std>
   26000:	2202      	movs	r2, #2
   26002:	2112      	movs	r1, #18
   26004:	68e0      	ldr	r0, [r4, #12]
   26006:	f7ff ffad 	bl	25f64 <std>
   2600a:	2301      	movs	r3, #1
   2600c:	61a3      	str	r3, [r4, #24]
   2600e:	bd10      	pop	{r4, pc}
   26010:	00025fad 	.word	0x00025fad
   26014:	000336dc 	.word	0x000336dc

00026018 <__sfp>:
   26018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2601a:	4b1b      	ldr	r3, [pc, #108]	; (26088 <__sfp+0x70>)
   2601c:	4607      	mov	r7, r0
   2601e:	681e      	ldr	r6, [r3, #0]
   26020:	69b3      	ldr	r3, [r6, #24]
   26022:	b913      	cbnz	r3, 2602a <__sfp+0x12>
   26024:	4630      	mov	r0, r6
   26026:	f7ff ffc7 	bl	25fb8 <__sinit>
   2602a:	3648      	adds	r6, #72	; 0x48
   2602c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   26030:	3b01      	subs	r3, #1
   26032:	d503      	bpl.n	2603c <__sfp+0x24>
   26034:	6833      	ldr	r3, [r6, #0]
   26036:	b1db      	cbz	r3, 26070 <__sfp+0x58>
   26038:	6836      	ldr	r6, [r6, #0]
   2603a:	e7f7      	b.n	2602c <__sfp+0x14>
   2603c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   26040:	b9a5      	cbnz	r5, 2606c <__sfp+0x54>
   26042:	4b12      	ldr	r3, [pc, #72]	; (2608c <__sfp+0x74>)
   26044:	2208      	movs	r2, #8
   26046:	4629      	mov	r1, r5
   26048:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2604c:	6625      	str	r5, [r4, #96]	; 0x60
   2604e:	60a5      	str	r5, [r4, #8]
   26050:	e9c4 5500 	strd	r5, r5, [r4]
   26054:	e9c4 3503 	strd	r3, r5, [r4, #12]
   26058:	e9c4 5505 	strd	r5, r5, [r4, #20]
   2605c:	f00a fef7 	bl	30e4e <memset>
   26060:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   26064:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   26068:	4620      	mov	r0, r4
   2606a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2606c:	3464      	adds	r4, #100	; 0x64
   2606e:	e7df      	b.n	26030 <__sfp+0x18>
   26070:	2104      	movs	r1, #4
   26072:	4638      	mov	r0, r7
   26074:	f00b f809 	bl	3108a <__sfmoreglue>
   26078:	4604      	mov	r4, r0
   2607a:	6030      	str	r0, [r6, #0]
   2607c:	2800      	cmp	r0, #0
   2607e:	d1db      	bne.n	26038 <__sfp+0x20>
   26080:	230c      	movs	r3, #12
   26082:	603b      	str	r3, [r7, #0]
   26084:	e7f0      	b.n	26068 <__sfp+0x50>
   26086:	bf00      	nop
   26088:	000336dc 	.word	0x000336dc
   2608c:	ffff0001 	.word	0xffff0001

00026090 <__smakebuf_r>:
   26090:	898b      	ldrh	r3, [r1, #12]
   26092:	b573      	push	{r0, r1, r4, r5, r6, lr}
   26094:	079d      	lsls	r5, r3, #30
   26096:	4606      	mov	r6, r0
   26098:	460c      	mov	r4, r1
   2609a:	d507      	bpl.n	260ac <__smakebuf_r+0x1c>
   2609c:	f104 0347 	add.w	r3, r4, #71	; 0x47
   260a0:	6023      	str	r3, [r4, #0]
   260a2:	6123      	str	r3, [r4, #16]
   260a4:	2301      	movs	r3, #1
   260a6:	6163      	str	r3, [r4, #20]
   260a8:	b002      	add	sp, #8
   260aa:	bd70      	pop	{r4, r5, r6, pc}
   260ac:	ab01      	add	r3, sp, #4
   260ae:	466a      	mov	r2, sp
   260b0:	f00b f820 	bl	310f4 <__swhatbuf_r>
   260b4:	9900      	ldr	r1, [sp, #0]
   260b6:	4605      	mov	r5, r0
   260b8:	4630      	mov	r0, r6
   260ba:	f7ff fabd 	bl	25638 <_malloc_r>
   260be:	b948      	cbnz	r0, 260d4 <__smakebuf_r+0x44>
   260c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   260c4:	059a      	lsls	r2, r3, #22
   260c6:	d4ef      	bmi.n	260a8 <__smakebuf_r+0x18>
   260c8:	f023 0303 	bic.w	r3, r3, #3
   260cc:	f043 0302 	orr.w	r3, r3, #2
   260d0:	81a3      	strh	r3, [r4, #12]
   260d2:	e7e3      	b.n	2609c <__smakebuf_r+0xc>
   260d4:	4b0d      	ldr	r3, [pc, #52]	; (2610c <__smakebuf_r+0x7c>)
   260d6:	62b3      	str	r3, [r6, #40]	; 0x28
   260d8:	89a3      	ldrh	r3, [r4, #12]
   260da:	6020      	str	r0, [r4, #0]
   260dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   260e0:	6120      	str	r0, [r4, #16]
   260e2:	81a3      	strh	r3, [r4, #12]
   260e4:	9b00      	ldr	r3, [sp, #0]
   260e6:	6163      	str	r3, [r4, #20]
   260e8:	9b01      	ldr	r3, [sp, #4]
   260ea:	b15b      	cbz	r3, 26104 <__smakebuf_r+0x74>
   260ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   260f0:	4630      	mov	r0, r6
   260f2:	f000 f941 	bl	26378 <_isatty_r>
   260f6:	b128      	cbz	r0, 26104 <__smakebuf_r+0x74>
   260f8:	89a3      	ldrh	r3, [r4, #12]
   260fa:	f023 0303 	bic.w	r3, r3, #3
   260fe:	f043 0301 	orr.w	r3, r3, #1
   26102:	81a3      	strh	r3, [r4, #12]
   26104:	89a0      	ldrh	r0, [r4, #12]
   26106:	4305      	orrs	r5, r0
   26108:	81a5      	strh	r5, [r4, #12]
   2610a:	e7cd      	b.n	260a8 <__smakebuf_r+0x18>
   2610c:	00025fad 	.word	0x00025fad

00026110 <_svfiprintf_r>:
   26110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26114:	4698      	mov	r8, r3
   26116:	898b      	ldrh	r3, [r1, #12]
   26118:	b09d      	sub	sp, #116	; 0x74
   2611a:	4607      	mov	r7, r0
   2611c:	061b      	lsls	r3, r3, #24
   2611e:	460d      	mov	r5, r1
   26120:	4614      	mov	r4, r2
   26122:	d50e      	bpl.n	26142 <_svfiprintf_r+0x32>
   26124:	690b      	ldr	r3, [r1, #16]
   26126:	b963      	cbnz	r3, 26142 <_svfiprintf_r+0x32>
   26128:	2140      	movs	r1, #64	; 0x40
   2612a:	f7ff fa85 	bl	25638 <_malloc_r>
   2612e:	6028      	str	r0, [r5, #0]
   26130:	6128      	str	r0, [r5, #16]
   26132:	b920      	cbnz	r0, 2613e <_svfiprintf_r+0x2e>
   26134:	230c      	movs	r3, #12
   26136:	603b      	str	r3, [r7, #0]
   26138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2613c:	e0d1      	b.n	262e2 <_svfiprintf_r+0x1d2>
   2613e:	2340      	movs	r3, #64	; 0x40
   26140:	616b      	str	r3, [r5, #20]
   26142:	2300      	movs	r3, #0
   26144:	f8cd 800c 	str.w	r8, [sp, #12]
   26148:	f04f 0901 	mov.w	r9, #1
   2614c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 262fc <_svfiprintf_r+0x1ec>
   26150:	9309      	str	r3, [sp, #36]	; 0x24
   26152:	2320      	movs	r3, #32
   26154:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   26158:	2330      	movs	r3, #48	; 0x30
   2615a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   2615e:	4623      	mov	r3, r4
   26160:	469a      	mov	sl, r3
   26162:	f813 2b01 	ldrb.w	r2, [r3], #1
   26166:	b10a      	cbz	r2, 2616c <_svfiprintf_r+0x5c>
   26168:	2a25      	cmp	r2, #37	; 0x25
   2616a:	d1f9      	bne.n	26160 <_svfiprintf_r+0x50>
   2616c:	ebba 0b04 	subs.w	fp, sl, r4
   26170:	d00b      	beq.n	2618a <_svfiprintf_r+0x7a>
   26172:	465b      	mov	r3, fp
   26174:	4622      	mov	r2, r4
   26176:	4629      	mov	r1, r5
   26178:	4638      	mov	r0, r7
   2617a:	f00a fff0 	bl	3115e <__ssputs_r>
   2617e:	3001      	adds	r0, #1
   26180:	f000 80aa 	beq.w	262d8 <_svfiprintf_r+0x1c8>
   26184:	9a09      	ldr	r2, [sp, #36]	; 0x24
   26186:	445a      	add	r2, fp
   26188:	9209      	str	r2, [sp, #36]	; 0x24
   2618a:	f89a 3000 	ldrb.w	r3, [sl]
   2618e:	2b00      	cmp	r3, #0
   26190:	f000 80a2 	beq.w	262d8 <_svfiprintf_r+0x1c8>
   26194:	2300      	movs	r3, #0
   26196:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2619a:	f10a 0a01 	add.w	sl, sl, #1
   2619e:	9304      	str	r3, [sp, #16]
   261a0:	9307      	str	r3, [sp, #28]
   261a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   261a6:	931a      	str	r3, [sp, #104]	; 0x68
   261a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
   261ac:	4654      	mov	r4, sl
   261ae:	2205      	movs	r2, #5
   261b0:	4852      	ldr	r0, [pc, #328]	; (262fc <_svfiprintf_r+0x1ec>)
   261b2:	f814 1b01 	ldrb.w	r1, [r4], #1
   261b6:	f00a fe07 	bl	30dc8 <memchr>
   261ba:	9a04      	ldr	r2, [sp, #16]
   261bc:	b9d8      	cbnz	r0, 261f6 <_svfiprintf_r+0xe6>
   261be:	06d0      	lsls	r0, r2, #27
   261c0:	bf44      	itt	mi
   261c2:	2320      	movmi	r3, #32
   261c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   261c8:	0711      	lsls	r1, r2, #28
   261ca:	bf44      	itt	mi
   261cc:	232b      	movmi	r3, #43	; 0x2b
   261ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   261d2:	f89a 3000 	ldrb.w	r3, [sl]
   261d6:	2b2a      	cmp	r3, #42	; 0x2a
   261d8:	d015      	beq.n	26206 <_svfiprintf_r+0xf6>
   261da:	9a07      	ldr	r2, [sp, #28]
   261dc:	4654      	mov	r4, sl
   261de:	2000      	movs	r0, #0
   261e0:	f04f 0c0a 	mov.w	ip, #10
   261e4:	4621      	mov	r1, r4
   261e6:	f811 3b01 	ldrb.w	r3, [r1], #1
   261ea:	3b30      	subs	r3, #48	; 0x30
   261ec:	2b09      	cmp	r3, #9
   261ee:	d94e      	bls.n	2628e <_svfiprintf_r+0x17e>
   261f0:	b1b0      	cbz	r0, 26220 <_svfiprintf_r+0x110>
   261f2:	9207      	str	r2, [sp, #28]
   261f4:	e014      	b.n	26220 <_svfiprintf_r+0x110>
   261f6:	eba0 0308 	sub.w	r3, r0, r8
   261fa:	46a2      	mov	sl, r4
   261fc:	fa09 f303 	lsl.w	r3, r9, r3
   26200:	4313      	orrs	r3, r2
   26202:	9304      	str	r3, [sp, #16]
   26204:	e7d2      	b.n	261ac <_svfiprintf_r+0x9c>
   26206:	9b03      	ldr	r3, [sp, #12]
   26208:	1d19      	adds	r1, r3, #4
   2620a:	681b      	ldr	r3, [r3, #0]
   2620c:	2b00      	cmp	r3, #0
   2620e:	9103      	str	r1, [sp, #12]
   26210:	bfbb      	ittet	lt
   26212:	425b      	neglt	r3, r3
   26214:	f042 0202 	orrlt.w	r2, r2, #2
   26218:	9307      	strge	r3, [sp, #28]
   2621a:	9307      	strlt	r3, [sp, #28]
   2621c:	bfb8      	it	lt
   2621e:	9204      	strlt	r2, [sp, #16]
   26220:	7823      	ldrb	r3, [r4, #0]
   26222:	2b2e      	cmp	r3, #46	; 0x2e
   26224:	d10c      	bne.n	26240 <_svfiprintf_r+0x130>
   26226:	7863      	ldrb	r3, [r4, #1]
   26228:	2b2a      	cmp	r3, #42	; 0x2a
   2622a:	d135      	bne.n	26298 <_svfiprintf_r+0x188>
   2622c:	9b03      	ldr	r3, [sp, #12]
   2622e:	3402      	adds	r4, #2
   26230:	1d1a      	adds	r2, r3, #4
   26232:	681b      	ldr	r3, [r3, #0]
   26234:	2b00      	cmp	r3, #0
   26236:	9203      	str	r2, [sp, #12]
   26238:	bfb8      	it	lt
   2623a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   2623e:	9305      	str	r3, [sp, #20]
   26240:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 2630c <_svfiprintf_r+0x1fc>
   26244:	2203      	movs	r2, #3
   26246:	7821      	ldrb	r1, [r4, #0]
   26248:	4650      	mov	r0, sl
   2624a:	f00a fdbd 	bl	30dc8 <memchr>
   2624e:	b140      	cbz	r0, 26262 <_svfiprintf_r+0x152>
   26250:	2340      	movs	r3, #64	; 0x40
   26252:	eba0 000a 	sub.w	r0, r0, sl
   26256:	3401      	adds	r4, #1
   26258:	fa03 f000 	lsl.w	r0, r3, r0
   2625c:	9b04      	ldr	r3, [sp, #16]
   2625e:	4303      	orrs	r3, r0
   26260:	9304      	str	r3, [sp, #16]
   26262:	f814 1b01 	ldrb.w	r1, [r4], #1
   26266:	2206      	movs	r2, #6
   26268:	4825      	ldr	r0, [pc, #148]	; (26300 <_svfiprintf_r+0x1f0>)
   2626a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   2626e:	f00a fdab 	bl	30dc8 <memchr>
   26272:	2800      	cmp	r0, #0
   26274:	d038      	beq.n	262e8 <_svfiprintf_r+0x1d8>
   26276:	4b23      	ldr	r3, [pc, #140]	; (26304 <_svfiprintf_r+0x1f4>)
   26278:	bb1b      	cbnz	r3, 262c2 <_svfiprintf_r+0x1b2>
   2627a:	9b03      	ldr	r3, [sp, #12]
   2627c:	3307      	adds	r3, #7
   2627e:	f023 0307 	bic.w	r3, r3, #7
   26282:	3308      	adds	r3, #8
   26284:	9303      	str	r3, [sp, #12]
   26286:	9b09      	ldr	r3, [sp, #36]	; 0x24
   26288:	4433      	add	r3, r6
   2628a:	9309      	str	r3, [sp, #36]	; 0x24
   2628c:	e767      	b.n	2615e <_svfiprintf_r+0x4e>
   2628e:	fb0c 3202 	mla	r2, ip, r2, r3
   26292:	460c      	mov	r4, r1
   26294:	2001      	movs	r0, #1
   26296:	e7a5      	b.n	261e4 <_svfiprintf_r+0xd4>
   26298:	2300      	movs	r3, #0
   2629a:	3401      	adds	r4, #1
   2629c:	f04f 0c0a 	mov.w	ip, #10
   262a0:	4619      	mov	r1, r3
   262a2:	9305      	str	r3, [sp, #20]
   262a4:	4620      	mov	r0, r4
   262a6:	f810 2b01 	ldrb.w	r2, [r0], #1
   262aa:	3a30      	subs	r2, #48	; 0x30
   262ac:	2a09      	cmp	r2, #9
   262ae:	d903      	bls.n	262b8 <_svfiprintf_r+0x1a8>
   262b0:	2b00      	cmp	r3, #0
   262b2:	d0c5      	beq.n	26240 <_svfiprintf_r+0x130>
   262b4:	9105      	str	r1, [sp, #20]
   262b6:	e7c3      	b.n	26240 <_svfiprintf_r+0x130>
   262b8:	fb0c 2101 	mla	r1, ip, r1, r2
   262bc:	4604      	mov	r4, r0
   262be:	2301      	movs	r3, #1
   262c0:	e7f0      	b.n	262a4 <_svfiprintf_r+0x194>
   262c2:	ab03      	add	r3, sp, #12
   262c4:	462a      	mov	r2, r5
   262c6:	a904      	add	r1, sp, #16
   262c8:	4638      	mov	r0, r7
   262ca:	9300      	str	r3, [sp, #0]
   262cc:	4b0e      	ldr	r3, [pc, #56]	; (26308 <_svfiprintf_r+0x1f8>)
   262ce:	e000      	b.n	262d2 <_svfiprintf_r+0x1c2>
   262d0:	bf00      	nop
   262d2:	1c42      	adds	r2, r0, #1
   262d4:	4606      	mov	r6, r0
   262d6:	d1d6      	bne.n	26286 <_svfiprintf_r+0x176>
   262d8:	89ab      	ldrh	r3, [r5, #12]
   262da:	065b      	lsls	r3, r3, #25
   262dc:	f53f af2c 	bmi.w	26138 <_svfiprintf_r+0x28>
   262e0:	9809      	ldr	r0, [sp, #36]	; 0x24
   262e2:	b01d      	add	sp, #116	; 0x74
   262e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   262e8:	ab03      	add	r3, sp, #12
   262ea:	462a      	mov	r2, r5
   262ec:	a904      	add	r1, sp, #16
   262ee:	4638      	mov	r0, r7
   262f0:	9300      	str	r3, [sp, #0]
   262f2:	4b05      	ldr	r3, [pc, #20]	; (26308 <_svfiprintf_r+0x1f8>)
   262f4:	f7ff fb10 	bl	25918 <_printf_i>
   262f8:	e7eb      	b.n	262d2 <_svfiprintf_r+0x1c2>
   262fa:	bf00      	nop
   262fc:	00037675 	.word	0x00037675
   26300:	0003767f 	.word	0x0003767f
   26304:	00000000 	.word	0x00000000
   26308:	0003115f 	.word	0x0003115f
   2630c:	0003767b 	.word	0x0003767b

00026310 <_write_r>:
   26310:	b538      	push	{r3, r4, r5, lr}
   26312:	4604      	mov	r4, r0
   26314:	4d06      	ldr	r5, [pc, #24]	; (26330 <_write_r+0x20>)
   26316:	4608      	mov	r0, r1
   26318:	4611      	mov	r1, r2
   2631a:	2200      	movs	r2, #0
   2631c:	602a      	str	r2, [r5, #0]
   2631e:	461a      	mov	r2, r3
   26320:	f000 fd6f 	bl	26e02 <_write>
   26324:	1c43      	adds	r3, r0, #1
   26326:	d102      	bne.n	2632e <_write_r+0x1e>
   26328:	682b      	ldr	r3, [r5, #0]
   2632a:	b103      	cbz	r3, 2632e <_write_r+0x1e>
   2632c:	6023      	str	r3, [r4, #0]
   2632e:	bd38      	pop	{r3, r4, r5, pc}
   26330:	2002712c 	.word	0x2002712c

00026334 <_close_r>:
   26334:	b538      	push	{r3, r4, r5, lr}
   26336:	2300      	movs	r3, #0
   26338:	4d05      	ldr	r5, [pc, #20]	; (26350 <_close_r+0x1c>)
   2633a:	4604      	mov	r4, r0
   2633c:	4608      	mov	r0, r1
   2633e:	602b      	str	r3, [r5, #0]
   26340:	f000 fd63 	bl	26e0a <_close>
   26344:	1c43      	adds	r3, r0, #1
   26346:	d102      	bne.n	2634e <_close_r+0x1a>
   26348:	682b      	ldr	r3, [r5, #0]
   2634a:	b103      	cbz	r3, 2634e <_close_r+0x1a>
   2634c:	6023      	str	r3, [r4, #0]
   2634e:	bd38      	pop	{r3, r4, r5, pc}
   26350:	2002712c 	.word	0x2002712c

00026354 <_fstat_r>:
   26354:	b538      	push	{r3, r4, r5, lr}
   26356:	2300      	movs	r3, #0
   26358:	4d06      	ldr	r5, [pc, #24]	; (26374 <_fstat_r+0x20>)
   2635a:	4604      	mov	r4, r0
   2635c:	4608      	mov	r0, r1
   2635e:	4611      	mov	r1, r2
   26360:	602b      	str	r3, [r5, #0]
   26362:	f000 fd5d 	bl	26e20 <_fstat>
   26366:	1c43      	adds	r3, r0, #1
   26368:	d102      	bne.n	26370 <_fstat_r+0x1c>
   2636a:	682b      	ldr	r3, [r5, #0]
   2636c:	b103      	cbz	r3, 26370 <_fstat_r+0x1c>
   2636e:	6023      	str	r3, [r4, #0]
   26370:	bd38      	pop	{r3, r4, r5, pc}
   26372:	bf00      	nop
   26374:	2002712c 	.word	0x2002712c

00026378 <_isatty_r>:
   26378:	b538      	push	{r3, r4, r5, lr}
   2637a:	2300      	movs	r3, #0
   2637c:	4d05      	ldr	r5, [pc, #20]	; (26394 <_isatty_r+0x1c>)
   2637e:	4604      	mov	r4, r0
   26380:	4608      	mov	r0, r1
   26382:	602b      	str	r3, [r5, #0]
   26384:	f000 fd46 	bl	26e14 <_isatty>
   26388:	1c43      	adds	r3, r0, #1
   2638a:	d102      	bne.n	26392 <_isatty_r+0x1a>
   2638c:	682b      	ldr	r3, [r5, #0]
   2638e:	b103      	cbz	r3, 26392 <_isatty_r+0x1a>
   26390:	6023      	str	r3, [r4, #0]
   26392:	bd38      	pop	{r3, r4, r5, pc}
   26394:	2002712c 	.word	0x2002712c

00026398 <_lseek_r>:
   26398:	b538      	push	{r3, r4, r5, lr}
   2639a:	4604      	mov	r4, r0
   2639c:	4d06      	ldr	r5, [pc, #24]	; (263b8 <_lseek_r+0x20>)
   2639e:	4608      	mov	r0, r1
   263a0:	4611      	mov	r1, r2
   263a2:	2200      	movs	r2, #0
   263a4:	602a      	str	r2, [r5, #0]
   263a6:	461a      	mov	r2, r3
   263a8:	f000 fd32 	bl	26e10 <_lseek>
   263ac:	1c43      	adds	r3, r0, #1
   263ae:	d102      	bne.n	263b6 <_lseek_r+0x1e>
   263b0:	682b      	ldr	r3, [r5, #0]
   263b2:	b103      	cbz	r3, 263b6 <_lseek_r+0x1e>
   263b4:	6023      	str	r3, [r4, #0]
   263b6:	bd38      	pop	{r3, r4, r5, pc}
   263b8:	2002712c 	.word	0x2002712c

000263bc <_read_r>:
   263bc:	b538      	push	{r3, r4, r5, lr}
   263be:	4604      	mov	r4, r0
   263c0:	4d06      	ldr	r5, [pc, #24]	; (263dc <_read_r+0x20>)
   263c2:	4608      	mov	r0, r1
   263c4:	4611      	mov	r1, r2
   263c6:	2200      	movs	r2, #0
   263c8:	602a      	str	r2, [r5, #0]
   263ca:	461a      	mov	r2, r3
   263cc:	f000 fd15 	bl	26dfa <_read>
   263d0:	1c43      	adds	r3, r0, #1
   263d2:	d102      	bne.n	263da <_read_r+0x1e>
   263d4:	682b      	ldr	r3, [r5, #0]
   263d6:	b103      	cbz	r3, 263da <_read_r+0x1e>
   263d8:	6023      	str	r3, [r4, #0]
   263da:	bd38      	pop	{r3, r4, r5, pc}
   263dc:	2002712c 	.word	0x2002712c

000263e0 <main>:

// This is the default main used on systems that have the standard C entry
// point. Other devices (for example FreeRTOS or ESP32) that have different
// requirements for entry code (like an app_main function) should specialize
// this main.cc file in a target-specific subfolder.
int main(int argc, char* argv[]) {
   263e0:	b508      	push	{r3, lr}
  
  setup();
   263e2:	f7eb fd15 	bl	11e10 <setup>
  while (true) {
    loop();
   263e6:	f7eb fdbb 	bl	11f60 <loop>
  while (true) {
   263ea:	e7fc      	b.n	263e6 <main+0x6>

000263ec <_ZN6tflite18MicroErrorReporterD1Ev>:

namespace tflite {

class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
   263ec:	4770      	bx	lr

000263ee <_ZN6tflite14AllOpsResolverD1Ev>:
// The magic number in the template parameter is the maximum number of ops that
// can be added to AllOpsResolver. It can be increased if needed. And most
// applications that care about the memory footprint will want to directly use
// MicroMutableOpResolver and have an application specific template parameter.
// The examples directory has sample code for this.
class AllOpsResolver : public MicroMutableOpResolver<128> {
   263ee:	4770      	bx	lr

000263f0 <_ZN6tflite18MicroErrorReporterD0Ev>:
   263f0:	b510      	push	{r4, lr}
   263f2:	4604      	mov	r4, r0
   263f4:	f00a f8b8 	bl	30568 <_ZdlPv>
   263f8:	4620      	mov	r0, r4
   263fa:	bd10      	pop	{r4, pc}

000263fc <_ZN6tflite14AllOpsResolverD0Ev>:
   263fc:	b510      	push	{r4, lr}
   263fe:	4604      	mov	r4, r0
   26400:	f00a f8b2 	bl	30568 <_ZdlPv>
   26404:	4620      	mov	r0, r4
   26406:	bd10      	pop	{r4, pc}

00026408 <__assert_func>:
limitations under the License.
==============================================================================*/

extern "C" {

void __assert_func(const char *, int, const char *, const char *) {}
   26408:	4770      	bx	lr

0002640a <arch_printk_char_out>:
}
   2640a:	2000      	movs	r0, #0
   2640c:	4770      	bx	lr

0002640e <print_err>:
{
   2640e:	b570      	push	{r4, r5, r6, lr}
   26410:	460d      	mov	r5, r1
   26412:	4604      	mov	r4, r0
	out('E', ctx);
   26414:	2045      	movs	r0, #69	; 0x45
   26416:	47a0      	blx	r4
	out('R', ctx);
   26418:	4629      	mov	r1, r5
   2641a:	2052      	movs	r0, #82	; 0x52
   2641c:	47a0      	blx	r4
	out('R', ctx);
   2641e:	4629      	mov	r1, r5
   26420:	4623      	mov	r3, r4
}
   26422:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   26426:	2052      	movs	r0, #82	; 0x52
   26428:	4718      	bx	r3

0002642a <str_out>:
{
   2642a:	b530      	push	{r4, r5, lr}
   2642c:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2642e:	680c      	ldr	r4, [r1, #0]
   26430:	1c55      	adds	r5, r2, #1
   26432:	b114      	cbz	r4, 2643a <str_out+0x10>
   26434:	684b      	ldr	r3, [r1, #4]
   26436:	4293      	cmp	r3, r2
   26438:	dc01      	bgt.n	2643e <str_out+0x14>
		ctx->count++;
   2643a:	608d      	str	r5, [r1, #8]
}
   2643c:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   2643e:	3b01      	subs	r3, #1
   26440:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   26442:	bf08      	it	eq
   26444:	2200      	moveq	r2, #0
   26446:	608d      	str	r5, [r1, #8]
   26448:	bf0c      	ite	eq
   2644a:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   2644c:	54a0      	strbne	r0, [r4, r2]
   2644e:	e7f5      	b.n	2643c <str_out+0x12>

00026450 <printk>:
{
   26450:	b40f      	push	{r0, r1, r2, r3}
   26452:	b507      	push	{r0, r1, r2, lr}
   26454:	a904      	add	r1, sp, #16
   26456:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2645a:	9101      	str	r1, [sp, #4]
		log_printk(fmt, ap);
   2645c:	f000 f95e 	bl	2671c <log_printk>
}
   26460:	b003      	add	sp, #12
   26462:	f85d eb04 	ldr.w	lr, [sp], #4
   26466:	b004      	add	sp, #16
   26468:	4770      	bx	lr

0002646a <snprintk>:
{
   2646a:	b40c      	push	{r2, r3}
   2646c:	b507      	push	{r0, r1, r2, lr}
   2646e:	ab04      	add	r3, sp, #16
   26470:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   26474:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   26476:	f7eb fffd 	bl	12474 <vsnprintk>
}
   2647a:	b003      	add	sp, #12
   2647c:	f85d eb04 	ldr.w	lr, [sp], #4
   26480:	b002      	add	sp, #8
   26482:	4770      	bx	lr

00026484 <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   26484:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   26486:	f7ef fa19 	bl	158bc <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   2648a:	2000      	movs	r0, #0
   2648c:	bd08      	pop	{r3, pc}

0002648e <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, k_timeout_t timeout)
{
   2648e:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   26490:	f7ef fa34 	bl	158fc <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   26494:	f110 0f0b 	cmn.w	r0, #11
   26498:	d005      	beq.n	264a6 <sys_sem_take+0x18>
   2649a:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   2649e:	bf08      	it	eq
   264a0:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   264a4:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   264a6:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   264aa:	e7fb      	b.n	264a4 <sys_sem_take+0x16>

000264ac <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   264ac:	4604      	mov	r4, r0
   264ae:	b508      	push	{r3, lr}
   264b0:	4608      	mov	r0, r1
   264b2:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   264b4:	461a      	mov	r2, r3
   264b6:	47a0      	blx	r4
	return z_impl_k_current_get();
   264b8:	f7ef f9fa 	bl	158b0 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   264bc:	f7ed fc46 	bl	13d4c <z_impl_k_thread_abort>

000264c0 <chunk_field>:
}

static inline size_t chunk_field(struct z_heap *h, chunkid_t c,
				 enum chunk_fields f)
{
	void *cmem = &h->buf[c];
   264c0:	6803      	ldr	r3, [r0, #0]
   264c2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3

	if (big_heap(h)) {
   264c6:	6883      	ldr	r3, [r0, #8]
   264c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((u32_t *)cmem)[f];
   264cc:	bf2c      	ite	cs
   264ce:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((u16_t *)cmem)[f];
   264d2:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   264d6:	4770      	bx	lr

000264d8 <chunk_set>:

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
   264d8:	b510      	push	{r4, lr}
	CHECK(c >= h->chunk0 && c < h->len);
	CHECK((val & ~((h->size_mask << 1) + 1)) == 0);
	CHECK((val & h->size_mask) < h->len);

	void *cmem = &h->buf[c];
   264da:	6804      	ldr	r4, [r0, #0]

	if (big_heap(h)) {
   264dc:	6880      	ldr	r0, [r0, #8]
	void *cmem = &h->buf[c];
   264de:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if (big_heap(h)) {
   264e2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((u32_t *)cmem)[f] = (u32_t) val;
   264e6:	bf2c      	ite	cs
   264e8:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		((u16_t *)cmem)[f] = (u16_t) val;
   264ec:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   264f0:	bd10      	pop	{r4, pc}

000264f2 <free_list_add>:
		chunk_set(h, second, FREE_PREV, first);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   264f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   264f6:	4604      	mov	r4, r0
	return (chunk_field(h, c, SIZE_AND_USED) & ~h->size_mask) != 0;
}

static ALWAYS_INLINE chunkid_t size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   264f8:	2200      	movs	r2, #0
   264fa:	460d      	mov	r5, r1
   264fc:	f7ff ffe0 	bl	264c0 <chunk_field>
   26500:	68e2      	ldr	r2, [r4, #12]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   26502:	68a3      	ldr	r3, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   26504:	4010      	ands	r0, r2
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   26506:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
}

static int bucket_idx(struct z_heap *h, size_t sz)
{
	/* A chunk of size 2 is the minimum size on big heaps */
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   2650a:	fab0 f280 	clz	r2, r0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   2650e:	bf34      	ite	cc
   26510:	2000      	movcc	r0, #0
   26512:	2001      	movcs	r0, #1
	int b = bucket_idx(h, size(h, c));

	if (h->buckets[b].list_size++ == 0) {
   26514:	6863      	ldr	r3, [r4, #4]
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   26516:	f1c0 001f 	rsb	r0, r0, #31
   2651a:	1a80      	subs	r0, r0, r2
   2651c:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   26520:	684a      	ldr	r2, [r1, #4]
   26522:	1c56      	adds	r6, r2, #1
   26524:	604e      	str	r6, [r1, #4]
   26526:	b9a2      	cbnz	r2, 26552 <free_list_add+0x60>
		CHECK(h->buckets[b].next == 0);
		CHECK((h->avail_buckets & (1 << b)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << b);
   26528:	2201      	movs	r2, #1
   2652a:	fa02 f100 	lsl.w	r1, r2, r0
   2652e:	6962      	ldr	r2, [r4, #20]
   26530:	430a      	orrs	r2, r1
   26532:	6162      	str	r2, [r4, #20]
		h->buckets[b].next = c;
		chunk_set(h, c, FREE_PREV, c);
   26534:	4629      	mov	r1, r5
		h->buckets[b].next = c;
   26536:	f843 5030 	str.w	r5, [r3, r0, lsl #3]
		chunk_set(h, c, FREE_PREV, c);
   2653a:	2202      	movs	r2, #2
   2653c:	462b      	mov	r3, r5
   2653e:	4620      	mov	r0, r4
   26540:	f7ff ffca 	bl	264d8 <chunk_set>
		chunk_set(h, c, FREE_NEXT, c);
   26544:	2203      	movs	r2, #3
   26546:	4629      	mov	r1, r5
		chunkid_t first = free_prev(h, second);

		chunk_set(h, c, FREE_PREV, first);
		chunk_set(h, c, FREE_NEXT, second);
		chunk_set(h, first, FREE_NEXT, c);
		chunk_set(h, second, FREE_PREV, c);
   26548:	4620      	mov	r0, r4
	}

	CHECK(h->avail_buckets & (1 << bucket_idx(h, size(h, c))));
}
   2654a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chunk_set(h, second, FREE_PREV, c);
   2654e:	f7ff bfc3 	b.w	264d8 <chunk_set>
		chunkid_t second = h->buckets[b].next;
   26552:	f853 7030 	ldr.w	r7, [r3, r0, lsl #3]
	return chunk_field(h, c, FREE_PREV);
   26556:	2202      	movs	r2, #2
   26558:	4639      	mov	r1, r7
   2655a:	4620      	mov	r0, r4
   2655c:	f7ff ffb0 	bl	264c0 <chunk_field>
   26560:	4606      	mov	r6, r0
		chunk_set(h, c, FREE_PREV, first);
   26562:	4603      	mov	r3, r0
   26564:	2202      	movs	r2, #2
   26566:	4629      	mov	r1, r5
   26568:	4620      	mov	r0, r4
   2656a:	f7ff ffb5 	bl	264d8 <chunk_set>
		chunk_set(h, c, FREE_NEXT, second);
   2656e:	463b      	mov	r3, r7
   26570:	2203      	movs	r2, #3
   26572:	4629      	mov	r1, r5
   26574:	4620      	mov	r0, r4
   26576:	f7ff ffaf 	bl	264d8 <chunk_set>
		chunk_set(h, first, FREE_NEXT, c);
   2657a:	2203      	movs	r2, #3
   2657c:	4631      	mov	r1, r6
   2657e:	462b      	mov	r3, r5
   26580:	4620      	mov	r0, r4
   26582:	f7ff ffa9 	bl	264d8 <chunk_set>
		chunk_set(h, second, FREE_PREV, c);
   26586:	2202      	movs	r2, #2
   26588:	4639      	mov	r1, r7
   2658a:	e7dd      	b.n	26548 <free_list_add+0x56>

0002658c <sys_heap_init>:

	return NULL;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   2658c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	CHECK(bytes < 0x800000000ULL);
#endif

	/* Round the start up, the end down */
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
   2658e:	188b      	adds	r3, r1, r2

	heap->heap = (struct z_heap *)addr;
	h->buf = (u64_t *)addr;
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
	h->len = buf_sz;
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   26590:	f647 72ff 	movw	r2, #32767	; 0x7fff
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
   26594:	1dcc      	adds	r4, r1, #7
   26596:	f024 0407 	bic.w	r4, r4, #7
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
   2659a:	f023 0307 	bic.w	r3, r3, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   2659e:	1b1b      	subs	r3, r3, r4
   265a0:	08db      	lsrs	r3, r3, #3
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   265a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   265a6:	bf2c      	ite	cs
   265a8:	f06f 4100 	mvncs.w	r1, #2147483648	; 0x80000000
   265ac:	4611      	movcc	r1, r2
	heap->heap = (struct z_heap *)addr;
   265ae:	6004      	str	r4, [r0, #0]
	h->avail_buckets = 0;
   265b0:	2000      	movs	r0, #0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   265b2:	4293      	cmp	r3, r2
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   265b4:	60e1      	str	r1, [r4, #12]
   265b6:	bf94      	ite	ls
   265b8:	2100      	movls	r1, #0
   265ba:	2101      	movhi	r1, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   265bc:	fab3 f683 	clz	r6, r3
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   265c0:	4617      	mov	r7, r2
				* sizeof(struct z_heap_bucket));

	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);

	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
		heap->heap->buckets[i].list_size = 0;
   265c2:	4684      	mov	ip, r0
	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
   265c4:	f1c1 0120 	rsb	r1, r1, #32
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
   265c8:	f104 0518 	add.w	r5, r4, #24
	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
   265cc:	1b89      	subs	r1, r1, r6
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   265ce:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
	h->len = buf_sz;
   265d2:	e9c4 5301 	strd	r5, r3, [r4, #4]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
   265d6:	3103      	adds	r1, #3
	h->buf = (u64_t *)addr;
   265d8:	6024      	str	r4, [r4, #0]
	h->avail_buckets = 0;
   265da:	6160      	str	r0, [r4, #20]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
   265dc:	6121      	str	r1, [r4, #16]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   265de:	68a2      	ldr	r2, [r4, #8]
   265e0:	42ba      	cmp	r2, r7
   265e2:	bf94      	ite	ls
   265e4:	2200      	movls	r2, #0
   265e6:	2201      	movhi	r2, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   265e8:	f1c2 021f 	rsb	r2, r2, #31
   265ec:	1b92      	subs	r2, r2, r6
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   265ee:	4290      	cmp	r0, r2
   265f0:	dd0a      	ble.n	26608 <sys_heap_init+0x7c>
		heap->heap->buckets[i].next = 0;
	}

	chunk_set(h, h->chunk0, SIZE_AND_USED, buf_sz - h->chunk0);
   265f2:	4620      	mov	r0, r4
   265f4:	1a5b      	subs	r3, r3, r1
   265f6:	2200      	movs	r2, #0
   265f8:	f7ff ff6e 	bl	264d8 <chunk_set>
	free_list_add(h, h->chunk0);
   265fc:	4620      	mov	r0, r4
   265fe:	6921      	ldr	r1, [r4, #16]
}
   26600:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, h->chunk0);
   26604:	f7ff bf75 	b.w	264f2 <free_list_add>
		heap->heap->buckets[i].list_size = 0;
   26608:	f8c5 c004 	str.w	ip, [r5, #4]
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   2660c:	3001      	adds	r0, #1
		heap->heap->buckets[i].next = 0;
   2660e:	f845 cb08 	str.w	ip, [r5], #8
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   26612:	e7e4      	b.n	265de <sys_heap_init+0x52>

00026614 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   26614:	4770      	bx	lr

00026616 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   26616:	f7ee ba55 	b.w	14ac4 <SystemInit>

0002661a <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   2661a:	2300      	movs	r3, #0
	list->head = NULL;
   2661c:	e9c0 3300 	strd	r3, r3, [r0]
}
   26620:	4770      	bx	lr

00026622 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   26622:	6803      	ldr	r3, [r0, #0]
   26624:	b923      	cbnz	r3, 26630 <log_list_add_tail+0xe>
		list->head = msg;
   26626:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   26628:	2300      	movs	r3, #0
	list->tail = msg;
   2662a:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   2662c:	600b      	str	r3, [r1, #0]
}
   2662e:	4770      	bx	lr
		list->tail->next = msg;
   26630:	6843      	ldr	r3, [r0, #4]
   26632:	6019      	str	r1, [r3, #0]
   26634:	e7f8      	b.n	26628 <log_list_add_tail+0x6>

00026636 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   26636:	6800      	ldr	r0, [r0, #0]
   26638:	4770      	bx	lr

0002663a <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
   2663a:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
   2663c:	b10b      	cbz	r3, 26642 <log_list_head_get+0x8>
		list->head = list->head->next;
   2663e:	681a      	ldr	r2, [r3, #0]
   26640:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
   26642:	4618      	mov	r0, r3
   26644:	4770      	bx	lr

00026646 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   26646:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   26648:	f7ec fa1c 	bl	12a84 <log_msg_chunk_alloc>

	if (msg != NULL) {
   2664c:	b118      	cbz	r0, 26656 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   2664e:	2301      	movs	r3, #1
   26650:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   26652:	2300      	movs	r3, #0
   26654:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
   26656:	bd08      	pop	{r3, pc}

00026658 <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   26658:	f7ec bee6 	b.w	13428 <z_timer_cycle_get_32>

0002665c <dummy_timestamp>:
   2665c:	2000      	movs	r0, #0
   2665e:	4770      	bx	lr

00026660 <log_0>:
{
   26660:	b513      	push	{r0, r1, r4, lr}
   26662:	4604      	mov	r4, r0
   26664:	9101      	str	r1, [sp, #4]
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   26666:	f7ff ffee 	bl	26646 <z_log_msg_std_alloc>

	if (msg != NULL) {
   2666a:	b130      	cbz	r0, 2667a <log_0+0x1a>
		msg_finalize(msg, src_level);
   2666c:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   2666e:	6104      	str	r4, [r0, #16]
}
   26670:	b002      	add	sp, #8
   26672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   26676:	f7ec b927 	b.w	128c8 <msg_finalize>
}
   2667a:	b002      	add	sp, #8
   2667c:	bd10      	pop	{r4, pc}

0002667e <log_1>:
{
   2667e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   26680:	460c      	mov	r4, r1
   26682:	4611      	mov	r1, r2
   26684:	4605      	mov	r5, r0
   26686:	9101      	str	r1, [sp, #4]
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   26688:	f7ff ffdd 	bl	26646 <z_log_msg_std_alloc>

	if (msg != NULL) {
   2668c:	b160      	cbz	r0, 266a8 <log_1+0x2a>
		msg->str = str;
   2668e:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   26690:	2501      	movs	r5, #1
   26692:	7a42      	ldrb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   26694:	6144      	str	r4, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
   26696:	f365 1207 	bfi	r2, r5, #4, #4
   2669a:	7242      	strb	r2, [r0, #9]
		msg_finalize(msg, src_level);
   2669c:	9901      	ldr	r1, [sp, #4]
}
   2669e:	b003      	add	sp, #12
   266a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		msg_finalize(msg, src_level);
   266a4:	f7ec b910 	b.w	128c8 <msg_finalize>
}
   266a8:	b003      	add	sp, #12
   266aa:	bd30      	pop	{r4, r5, pc}

000266ac <log_2>:
{
   266ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   266ae:	460e      	mov	r6, r1
   266b0:	4619      	mov	r1, r3
   266b2:	4607      	mov	r7, r0
   266b4:	4615      	mov	r5, r2
   266b6:	9101      	str	r1, [sp, #4]
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   266b8:	f7ff ffc5 	bl	26646 <z_log_msg_std_alloc>

	if (msg != NULL) {
   266bc:	b168      	cbz	r0, 266da <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   266be:	2202      	movs	r2, #2
   266c0:	7a43      	ldrb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   266c2:	e9c0 6505 	strd	r6, r5, [r0, #20]
		msg->hdr.params.std.nargs = 2U;
   266c6:	f362 1307 	bfi	r3, r2, #4, #4
   266ca:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   266cc:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   266ce:	6107      	str	r7, [r0, #16]
}
   266d0:	b003      	add	sp, #12
   266d2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		msg_finalize(msg, src_level);
   266d6:	f7ec b8f7 	b.w	128c8 <msg_finalize>
}
   266da:	b003      	add	sp, #12
   266dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000266de <log_3>:
{
   266de:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   266e2:	460f      	mov	r7, r1
   266e4:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   266e8:	4680      	mov	r8, r0
   266ea:	4616      	mov	r6, r2
   266ec:	461d      	mov	r5, r3
   266ee:	9101      	str	r1, [sp, #4]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   266f0:	f7ff ffa9 	bl	26646 <z_log_msg_std_alloc>

	if (msg != NULL) {
   266f4:	b178      	cbz	r0, 26716 <log_3+0x38>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   266f6:	2203      	movs	r2, #3
   266f8:	7a43      	ldrb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   266fa:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->hdr.params.std.nargs = 3U;
   266fe:	f362 1307 	bfi	r3, r2, #4, #4
   26702:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   26704:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   26706:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->payload.single.args[2] = arg3;
   2670a:	61c5      	str	r5, [r0, #28]
}
   2670c:	b002      	add	sp, #8
   2670e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   26712:	f7ec b8d9 	b.w	128c8 <msg_finalize>
}
   26716:	b002      	add	sp, #8
   26718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002671c <log_printk>:
{
   2671c:	b500      	push	{lr}
   2671e:	b0c3      	sub	sp, #268	; 0x10c
   26720:	4602      	mov	r2, r0
   26722:	460b      	mov	r3, r1
			length = vsnprintk(str, sizeof(str), fmt, ap);
   26724:	a801      	add	r0, sp, #4
   26726:	f240 1101 	movw	r1, #257	; 0x101
   2672a:	f7eb fea3 	bl	12474 <vsnprintk>
			msg = log_msg_hexdump_create(NULL, str, length);
   2672e:	f240 1201 	movw	r2, #257	; 0x101
   26732:	4282      	cmp	r2, r0
   26734:	bf28      	it	cs
   26736:	4602      	movcs	r2, r0
   26738:	a901      	add	r1, sp, #4
   2673a:	2000      	movs	r0, #0
   2673c:	f000 f898 	bl	26870 <log_msg_hexdump_create>
			if (msg == NULL) {
   26740:	b118      	cbz	r0, 2674a <log_printk+0x2e>
			msg_finalize(msg, src_level_union.structure);
   26742:	f04f 0100 	mov.w	r1, #0
   26746:	f7ec f8bf 	bl	128c8 <msg_finalize>
}
   2674a:	b043      	add	sp, #268	; 0x10c
   2674c:	f85d fb04 	ldr.w	pc, [sp], #4

00026750 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   26750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26754:	461c      	mov	r4, r3
   26756:	460e      	mov	r6, r1
	u32_t available_len = msg->hdr.params.hexdump.length;
   26758:	8901      	ldrh	r1, [r0, #8]
{
   2675a:	f89d 8020 	ldrb.w	r8, [sp, #32]
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
   2675e:	ebb4 0f91 	cmp.w	r4, r1, lsr #2
	u32_t available_len = msg->hdr.params.hexdump.length;
   26762:	ea4f 0391 	mov.w	r3, r1, lsr #2
	if (offset >= available_len) {
   26766:	d303      	bcc.n	26770 <log_msg_hexdump_data_op+0x20>
		*length = 0;
   26768:	2300      	movs	r3, #0
   2676a:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   2676c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   26770:	6811      	ldr	r1, [r2, #0]
   26772:	4421      	add	r1, r4
   26774:	4299      	cmp	r1, r3
		*length = available_len - offset;
   26776:	bf84      	itt	hi
   26778:	1b19      	subhi	r1, r3, r4
   2677a:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   2677c:	2b0c      	cmp	r3, #12
	req_len = *length;
   2677e:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   26782:	d92a      	bls.n	267da <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   26784:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   26786:	6947      	ldr	r7, [r0, #20]
	if (offset < chunk_len) {
   26788:	d82d      	bhi.n	267e6 <log_msg_hexdump_data_op+0x96>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   2678a:	2308      	movs	r3, #8
		head_data = msg->payload.ext.data.bytes;
   2678c:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   2678e:	454b      	cmp	r3, r9
   26790:	bf28      	it	cs
   26792:	464b      	movcs	r3, r9
   26794:	4420      	add	r0, r4
   26796:	461d      	mov	r5, r3
   26798:	461a      	mov	r2, r3
		if (put_op) {
   2679a:	f1b8 0f00 	cmp.w	r8, #0
   2679e:	d01f      	beq.n	267e0 <log_msg_hexdump_data_op+0x90>
   267a0:	4631      	mov	r1, r6
   267a2:	f00a fb2d 	bl	30e00 <memcpy>
		req_len -= cpy_len;
   267a6:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   267aa:	442e      	add	r6, r5
	while (req_len > 0) {
   267ac:	f1b9 0f00 	cmp.w	r9, #0
   267b0:	d0dc      	beq.n	2676c <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   267b2:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   267b6:	454d      	cmp	r5, r9
   267b8:	bf28      	it	cs
   267ba:	464d      	movcs	r5, r9
		if (put_op) {
   267bc:	1d20      	adds	r0, r4, #4
   267be:	462a      	mov	r2, r5
   267c0:	4438      	add	r0, r7
   267c2:	f1b8 0f00 	cmp.w	r8, #0
   267c6:	d014      	beq.n	267f2 <log_msg_hexdump_data_op+0xa2>
   267c8:	4631      	mov	r1, r6
   267ca:	f00a fb19 	bl	30e00 <memcpy>
		offset = 0;
   267ce:	2400      	movs	r4, #0
		cont = cont->next;
   267d0:	683f      	ldr	r7, [r7, #0]
		req_len -= cpy_len;
   267d2:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   267d6:	442e      	add	r6, r5
   267d8:	e7e8      	b.n	267ac <log_msg_hexdump_data_op+0x5c>
	struct log_msg_cont *cont = NULL;
   267da:	2700      	movs	r7, #0
		head_data = msg->payload.single.bytes;
   267dc:	3014      	adds	r0, #20
	if (offset < chunk_len) {
   267de:	e7d6      	b.n	2678e <log_msg_hexdump_data_op+0x3e>
   267e0:	4601      	mov	r1, r0
   267e2:	4630      	mov	r0, r6
   267e4:	e7dd      	b.n	267a2 <log_msg_hexdump_data_op+0x52>
		offset -= chunk_len;
   267e6:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   267e8:	2c1b      	cmp	r4, #27
   267ea:	d9df      	bls.n	267ac <log_msg_hexdump_data_op+0x5c>
			cont = cont->next;
   267ec:	683f      	ldr	r7, [r7, #0]
			offset -= chunk_len;
   267ee:	3c1c      	subs	r4, #28
   267f0:	e7fa      	b.n	267e8 <log_msg_hexdump_data_op+0x98>
   267f2:	4601      	mov	r1, r0
   267f4:	4630      	mov	r0, r6
   267f6:	e7e8      	b.n	267ca <log_msg_hexdump_data_op+0x7a>

000267f8 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   267f8:	3004      	adds	r0, #4
   267fa:	e8d0 3fef 	ldaex	r3, [r0]
   267fe:	3301      	adds	r3, #1
   26800:	e8c0 3fe2 	stlex	r2, r3, [r0]
   26804:	2a00      	cmp	r2, #0
   26806:	d1f8      	bne.n	267fa <log_msg_get+0x2>
}
   26808:	4770      	bx	lr

0002680a <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   2680a:	7a40      	ldrb	r0, [r0, #9]
}
   2680c:	0900      	lsrs	r0, r0, #4
   2680e:	4770      	bx	lr

00026810 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   26810:	7a43      	ldrb	r3, [r0, #9]
   26812:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   26816:	ea4f 1213 	mov.w	r2, r3, lsr #4
   2681a:	d216      	bcs.n	2684a <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   2681c:	2a03      	cmp	r2, #3
   2681e:	d803      	bhi.n	26828 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   26820:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   26824:	6948      	ldr	r0, [r1, #20]
   26826:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   26828:	2901      	cmp	r1, #1
   2682a:	d803      	bhi.n	26834 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   2682c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   26830:	6988      	ldr	r0, [r1, #24]
   26832:	4770      	bx	lr
	cont = msg->payload.ext.next;
   26834:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   26836:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   26838:	2906      	cmp	r1, #6
   2683a:	d803      	bhi.n	26844 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   2683c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   26840:	6848      	ldr	r0, [r1, #4]
   26842:	4770      	bx	lr
		cont = cont->next;
   26844:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   26846:	3907      	subs	r1, #7
		cont = cont->next;
   26848:	e7f6      	b.n	26838 <log_msg_arg_get+0x28>
		return 0;
   2684a:	2000      	movs	r0, #0
}
   2684c:	4770      	bx	lr

0002684e <log_msg_put>:
{
   2684e:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   26850:	1d02      	adds	r2, r0, #4
   26852:	e8d2 1fef 	ldaex	r1, [r2]
   26856:	3901      	subs	r1, #1
   26858:	e8c2 1fec 	stlex	ip, r1, [r2]
   2685c:	f1bc 0f00 	cmp.w	ip, #0
   26860:	d1f7      	bne.n	26852 <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   26862:	685b      	ldr	r3, [r3, #4]
   26864:	b90b      	cbnz	r3, 2686a <log_msg_put+0x1c>
		msg_free(msg);
   26866:	f7ec b921 	b.w	12aac <msg_free>
}
   2686a:	4770      	bx	lr

0002686c <log_msg_str_get>:
}
   2686c:	6900      	ldr	r0, [r0, #16]
   2686e:	4770      	bx	lr

00026870 <log_msg_hexdump_create>:
{
   26870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   26874:	f643 75ff 	movw	r5, #16383	; 0x3fff
   26878:	4295      	cmp	r5, r2
{
   2687a:	4680      	mov	r8, r0
   2687c:	460e      	mov	r6, r1
   2687e:	4617      	mov	r7, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   26880:	bf28      	it	cs
   26882:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   26884:	f7ec f8fe 	bl	12a84 <log_msg_chunk_alloc>
	if (msg == NULL) {
   26888:	4604      	mov	r4, r0
   2688a:	b378      	cbz	r0, 268ec <log_msg_hexdump_create+0x7c>
	msg->hdr.ref_cnt = 1;
   2688c:	2301      	movs	r3, #1
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   2688e:	8902      	ldrh	r2, [r0, #8]
	msg->hdr.ref_cnt = 1;
   26890:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   26892:	00ab      	lsls	r3, r5, #2
   26894:	f043 0301 	orr.w	r3, r3, #1
   26898:	f002 0202 	and.w	r2, r2, #2
   2689c:	4313      	orrs	r3, r2
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   2689e:	2f0c      	cmp	r7, #12
	msg->str = str;
   268a0:	f8c0 8010 	str.w	r8, [r0, #16]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   268a4:	8103      	strh	r3, [r0, #8]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   268a6:	f100 0814 	add.w	r8, r0, #20
   268aa:	d916      	bls.n	268da <log_msg_hexdump_create+0x6a>
   268ac:	6833      	ldr	r3, [r6, #0]
		msg->hdr.params.generic.ext = 1;
   268ae:	7a02      	ldrb	r2, [r0, #8]
   268b0:	6183      	str	r3, [r0, #24]
   268b2:	6873      	ldr	r3, [r6, #4]
   268b4:	f042 0202 	orr.w	r2, r2, #2
   268b8:	61c3      	str	r3, [r0, #28]
		msg->payload.ext.next = NULL;
   268ba:	2300      	movs	r3, #0
   268bc:	4699      	mov	r9, r3
   268be:	6143      	str	r3, [r0, #20]
		msg->hdr.params.generic.ext = 1;
   268c0:	7202      	strb	r2, [r0, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   268c2:	3608      	adds	r6, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   268c4:	3d08      	subs	r5, #8
	while (length > 0) {
   268c6:	b18d      	cbz	r5, 268ec <log_msg_hexdump_create+0x7c>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   268c8:	f7ec f8dc 	bl	12a84 <log_msg_chunk_alloc>
		if (cont == NULL) {
   268cc:	4607      	mov	r7, r0
   268ce:	b980      	cbnz	r0, 268f2 <log_msg_hexdump_create+0x82>
			msg_free(msg);
   268d0:	4620      	mov	r0, r4
   268d2:	f7ec f8eb 	bl	12aac <msg_free>
			return NULL;
   268d6:	463c      	mov	r4, r7
   268d8:	e008      	b.n	268ec <log_msg_hexdump_create+0x7c>
   268da:	462a      	mov	r2, r5
   268dc:	4631      	mov	r1, r6
   268de:	4640      	mov	r0, r8
   268e0:	f00a fa8e 	bl	30e00 <memcpy>
		msg->hdr.params.generic.ext = 0;
   268e4:	7a23      	ldrb	r3, [r4, #8]
   268e6:	f36f 0341 	bfc	r3, #1, #1
   268ea:	7223      	strb	r3, [r4, #8]
}
   268ec:	4620      	mov	r0, r4
   268ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   268f2:	2d1c      	cmp	r5, #28
   268f4:	462f      	mov	r7, r5
   268f6:	bf28      	it	cs
   268f8:	271c      	movcs	r7, #28
		*prev_cont = cont;
   268fa:	f8c8 0000 	str.w	r0, [r8]
   268fe:	4631      	mov	r1, r6
		cont->next = NULL;
   26900:	f8c0 9000 	str.w	r9, [r0]
		prev_cont = &cont->next;
   26904:	4680      	mov	r8, r0
   26906:	463a      	mov	r2, r7
   26908:	3004      	adds	r0, #4
   2690a:	f00a fa79 	bl	30e00 <memcpy>
		data += chunk_length;
   2690e:	443e      	add	r6, r7
		length -= chunk_length;
   26910:	1bed      	subs	r5, r5, r7
   26912:	e7d8      	b.n	268c6 <log_msg_hexdump_create+0x56>

00026914 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
   26914:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   26916:	2400      	movs	r4, #0
   26918:	9400      	str	r4, [sp, #0]
   2691a:	f7ff ff19 	bl	26750 <log_msg_hexdump_data_op>
}
   2691e:	b002      	add	sp, #8
   26920:	bd10      	pop	{r4, pc}

00026922 <buffer_write>:
{
   26922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26924:	4606      	mov	r6, r0
   26926:	460d      	mov	r5, r1
   26928:	4614      	mov	r4, r2
   2692a:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   2692c:	4621      	mov	r1, r4
   2692e:	4628      	mov	r0, r5
   26930:	463a      	mov	r2, r7
   26932:	47b0      	blx	r6
	} while (len != 0);
   26934:	1a24      	subs	r4, r4, r0
		buf += processed;
   26936:	4405      	add	r5, r0
	} while (len != 0);
   26938:	d1f8      	bne.n	2692c <buffer_write+0xa>
}
   2693a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002693c <std_print>:
{
   2693c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26940:	b08e      	sub	sp, #56	; 0x38
   26942:	af0e      	add	r7, sp, #56	; 0x38
   26944:	4680      	mov	r8, r0
   26946:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   26948:	f7ff ff90 	bl	2686c <log_msg_str_get>
   2694c:	4606      	mov	r6, r0
	u32_t nargs = log_msg_nargs_get(msg);
   2694e:	4640      	mov	r0, r8
   26950:	f7ff ff5b 	bl	2680a <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   26954:	f04f 0900 	mov.w	r9, #0
	u32_t nargs = log_msg_nargs_get(msg);
   26958:	4682      	mov	sl, r0
	u32_t *args = alloca(sizeof(u32_t)*nargs);
   2695a:	0083      	lsls	r3, r0, #2
   2695c:	3307      	adds	r3, #7
   2695e:	f023 0307 	bic.w	r3, r3, #7
   26962:	ebad 0d03 	sub.w	sp, sp, r3
   26966:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   26968:	45d1      	cmp	r9, sl
   2696a:	d116      	bne.n	2699a <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   2696c:	4640      	mov	r0, r8
   2696e:	f7ff ff4c 	bl	2680a <log_msg_nargs_get>
   26972:	280f      	cmp	r0, #15
   26974:	d81e      	bhi.n	269b4 <std_print+0x78>
   26976:	e8df f010 	tbh	[pc, r0, lsl #1]
   2697a:	0019      	.short	0x0019
   2697c:	00260020 	.word	0x00260020
   26980:	0036002d 	.word	0x0036002d
   26984:	004e0041 	.word	0x004e0041
   26988:	006e005d 	.word	0x006e005d
   2698c:	00960081 	.word	0x00960081
   26990:	00c600ad 	.word	0x00c600ad
   26994:	00fe00e1 	.word	0x00fe00e1
   26998:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
   2699a:	4649      	mov	r1, r9
   2699c:	4640      	mov	r0, r8
   2699e:	f7ff ff37 	bl	26810 <log_msg_arg_get>
   269a2:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   269a6:	f109 0901 	add.w	r9, r9, #1
   269aa:	e7dd      	b.n	26968 <std_print+0x2c>
		print_formatted(log_output, str);
   269ac:	4631      	mov	r1, r6
   269ae:	4628      	mov	r0, r5
   269b0:	f7ec f8ba 	bl	12b28 <print_formatted>
}
   269b4:	46bd      	mov	sp, r7
   269b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   269ba:	4631      	mov	r1, r6
   269bc:	4628      	mov	r0, r5
   269be:	6822      	ldr	r2, [r4, #0]
   269c0:	f7ec f8b2 	bl	12b28 <print_formatted>
		break;
   269c4:	e7f6      	b.n	269b4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   269c6:	4631      	mov	r1, r6
   269c8:	e9d4 2300 	ldrd	r2, r3, [r4]
   269cc:	4628      	mov	r0, r5
   269ce:	f7ec f8ab 	bl	12b28 <print_formatted>
		break;
   269d2:	e7ef      	b.n	269b4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   269d4:	68a3      	ldr	r3, [r4, #8]
   269d6:	4631      	mov	r1, r6
   269d8:	9300      	str	r3, [sp, #0]
   269da:	4628      	mov	r0, r5
   269dc:	e9d4 2300 	ldrd	r2, r3, [r4]
   269e0:	f7ec f8a2 	bl	12b28 <print_formatted>
		break;
   269e4:	e7e6      	b.n	269b4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   269e6:	68e3      	ldr	r3, [r4, #12]
   269e8:	4631      	mov	r1, r6
   269ea:	9301      	str	r3, [sp, #4]
   269ec:	68a3      	ldr	r3, [r4, #8]
   269ee:	4628      	mov	r0, r5
   269f0:	9300      	str	r3, [sp, #0]
   269f2:	e9d4 2300 	ldrd	r2, r3, [r4]
   269f6:	f7ec f897 	bl	12b28 <print_formatted>
		break;
   269fa:	e7db      	b.n	269b4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   269fc:	6923      	ldr	r3, [r4, #16]
   269fe:	4631      	mov	r1, r6
   26a00:	9302      	str	r3, [sp, #8]
   26a02:	68e3      	ldr	r3, [r4, #12]
   26a04:	4628      	mov	r0, r5
   26a06:	9301      	str	r3, [sp, #4]
   26a08:	68a3      	ldr	r3, [r4, #8]
   26a0a:	9300      	str	r3, [sp, #0]
   26a0c:	e9d4 2300 	ldrd	r2, r3, [r4]
   26a10:	f7ec f88a 	bl	12b28 <print_formatted>
		break;
   26a14:	e7ce      	b.n	269b4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   26a16:	6963      	ldr	r3, [r4, #20]
   26a18:	4631      	mov	r1, r6
   26a1a:	9303      	str	r3, [sp, #12]
   26a1c:	6923      	ldr	r3, [r4, #16]
   26a1e:	4628      	mov	r0, r5
   26a20:	9302      	str	r3, [sp, #8]
   26a22:	68e3      	ldr	r3, [r4, #12]
   26a24:	9301      	str	r3, [sp, #4]
   26a26:	68a3      	ldr	r3, [r4, #8]
   26a28:	9300      	str	r3, [sp, #0]
   26a2a:	e9d4 2300 	ldrd	r2, r3, [r4]
   26a2e:	f7ec f87b 	bl	12b28 <print_formatted>
		break;
   26a32:	e7bf      	b.n	269b4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   26a34:	69a3      	ldr	r3, [r4, #24]
   26a36:	4631      	mov	r1, r6
   26a38:	9304      	str	r3, [sp, #16]
   26a3a:	6963      	ldr	r3, [r4, #20]
   26a3c:	4628      	mov	r0, r5
   26a3e:	9303      	str	r3, [sp, #12]
   26a40:	6923      	ldr	r3, [r4, #16]
   26a42:	9302      	str	r3, [sp, #8]
   26a44:	68e3      	ldr	r3, [r4, #12]
   26a46:	9301      	str	r3, [sp, #4]
   26a48:	68a3      	ldr	r3, [r4, #8]
   26a4a:	9300      	str	r3, [sp, #0]
   26a4c:	e9d4 2300 	ldrd	r2, r3, [r4]
   26a50:	f7ec f86a 	bl	12b28 <print_formatted>
		break;
   26a54:	e7ae      	b.n	269b4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   26a56:	69e3      	ldr	r3, [r4, #28]
   26a58:	4631      	mov	r1, r6
   26a5a:	9305      	str	r3, [sp, #20]
   26a5c:	69a3      	ldr	r3, [r4, #24]
   26a5e:	4628      	mov	r0, r5
   26a60:	9304      	str	r3, [sp, #16]
   26a62:	6963      	ldr	r3, [r4, #20]
   26a64:	9303      	str	r3, [sp, #12]
   26a66:	6923      	ldr	r3, [r4, #16]
   26a68:	9302      	str	r3, [sp, #8]
   26a6a:	68e3      	ldr	r3, [r4, #12]
   26a6c:	9301      	str	r3, [sp, #4]
   26a6e:	68a3      	ldr	r3, [r4, #8]
   26a70:	9300      	str	r3, [sp, #0]
   26a72:	e9d4 2300 	ldrd	r2, r3, [r4]
   26a76:	f7ec f857 	bl	12b28 <print_formatted>
		break;
   26a7a:	e79b      	b.n	269b4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   26a7c:	6a23      	ldr	r3, [r4, #32]
   26a7e:	4631      	mov	r1, r6
   26a80:	9306      	str	r3, [sp, #24]
   26a82:	69e3      	ldr	r3, [r4, #28]
   26a84:	4628      	mov	r0, r5
   26a86:	9305      	str	r3, [sp, #20]
   26a88:	69a3      	ldr	r3, [r4, #24]
   26a8a:	9304      	str	r3, [sp, #16]
   26a8c:	6963      	ldr	r3, [r4, #20]
   26a8e:	9303      	str	r3, [sp, #12]
   26a90:	6923      	ldr	r3, [r4, #16]
   26a92:	9302      	str	r3, [sp, #8]
   26a94:	68e3      	ldr	r3, [r4, #12]
   26a96:	9301      	str	r3, [sp, #4]
   26a98:	68a3      	ldr	r3, [r4, #8]
   26a9a:	9300      	str	r3, [sp, #0]
   26a9c:	e9d4 2300 	ldrd	r2, r3, [r4]
   26aa0:	f7ec f842 	bl	12b28 <print_formatted>
		break;
   26aa4:	e786      	b.n	269b4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   26aa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   26aa8:	4631      	mov	r1, r6
   26aaa:	9307      	str	r3, [sp, #28]
   26aac:	6a23      	ldr	r3, [r4, #32]
   26aae:	4628      	mov	r0, r5
   26ab0:	9306      	str	r3, [sp, #24]
   26ab2:	69e3      	ldr	r3, [r4, #28]
   26ab4:	9305      	str	r3, [sp, #20]
   26ab6:	69a3      	ldr	r3, [r4, #24]
   26ab8:	9304      	str	r3, [sp, #16]
   26aba:	6963      	ldr	r3, [r4, #20]
   26abc:	9303      	str	r3, [sp, #12]
   26abe:	6923      	ldr	r3, [r4, #16]
   26ac0:	9302      	str	r3, [sp, #8]
   26ac2:	68e3      	ldr	r3, [r4, #12]
   26ac4:	9301      	str	r3, [sp, #4]
   26ac6:	68a3      	ldr	r3, [r4, #8]
   26ac8:	9300      	str	r3, [sp, #0]
   26aca:	e9d4 2300 	ldrd	r2, r3, [r4]
   26ace:	f7ec f82b 	bl	12b28 <print_formatted>
		break;
   26ad2:	e76f      	b.n	269b4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   26ad4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   26ad6:	4631      	mov	r1, r6
   26ad8:	9308      	str	r3, [sp, #32]
   26ada:	6a63      	ldr	r3, [r4, #36]	; 0x24
   26adc:	4628      	mov	r0, r5
   26ade:	9307      	str	r3, [sp, #28]
   26ae0:	6a23      	ldr	r3, [r4, #32]
   26ae2:	9306      	str	r3, [sp, #24]
   26ae4:	69e3      	ldr	r3, [r4, #28]
   26ae6:	9305      	str	r3, [sp, #20]
   26ae8:	69a3      	ldr	r3, [r4, #24]
   26aea:	9304      	str	r3, [sp, #16]
   26aec:	6963      	ldr	r3, [r4, #20]
   26aee:	9303      	str	r3, [sp, #12]
   26af0:	6923      	ldr	r3, [r4, #16]
   26af2:	9302      	str	r3, [sp, #8]
   26af4:	68e3      	ldr	r3, [r4, #12]
   26af6:	9301      	str	r3, [sp, #4]
   26af8:	68a3      	ldr	r3, [r4, #8]
   26afa:	9300      	str	r3, [sp, #0]
   26afc:	e9d4 2300 	ldrd	r2, r3, [r4]
   26b00:	f7ec f812 	bl	12b28 <print_formatted>
		break;
   26b04:	e756      	b.n	269b4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   26b06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   26b08:	4631      	mov	r1, r6
   26b0a:	9309      	str	r3, [sp, #36]	; 0x24
   26b0c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   26b0e:	4628      	mov	r0, r5
   26b10:	9308      	str	r3, [sp, #32]
   26b12:	6a63      	ldr	r3, [r4, #36]	; 0x24
   26b14:	9307      	str	r3, [sp, #28]
   26b16:	6a23      	ldr	r3, [r4, #32]
   26b18:	9306      	str	r3, [sp, #24]
   26b1a:	69e3      	ldr	r3, [r4, #28]
   26b1c:	9305      	str	r3, [sp, #20]
   26b1e:	69a3      	ldr	r3, [r4, #24]
   26b20:	9304      	str	r3, [sp, #16]
   26b22:	6963      	ldr	r3, [r4, #20]
   26b24:	9303      	str	r3, [sp, #12]
   26b26:	6923      	ldr	r3, [r4, #16]
   26b28:	9302      	str	r3, [sp, #8]
   26b2a:	68e3      	ldr	r3, [r4, #12]
   26b2c:	9301      	str	r3, [sp, #4]
   26b2e:	68a3      	ldr	r3, [r4, #8]
   26b30:	9300      	str	r3, [sp, #0]
   26b32:	e9d4 2300 	ldrd	r2, r3, [r4]
   26b36:	f7eb fff7 	bl	12b28 <print_formatted>
		break;
   26b3a:	e73b      	b.n	269b4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   26b3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   26b3e:	4631      	mov	r1, r6
   26b40:	930a      	str	r3, [sp, #40]	; 0x28
   26b42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   26b44:	4628      	mov	r0, r5
   26b46:	9309      	str	r3, [sp, #36]	; 0x24
   26b48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   26b4a:	9308      	str	r3, [sp, #32]
   26b4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   26b4e:	9307      	str	r3, [sp, #28]
   26b50:	6a23      	ldr	r3, [r4, #32]
   26b52:	9306      	str	r3, [sp, #24]
   26b54:	69e3      	ldr	r3, [r4, #28]
   26b56:	9305      	str	r3, [sp, #20]
   26b58:	69a3      	ldr	r3, [r4, #24]
   26b5a:	9304      	str	r3, [sp, #16]
   26b5c:	6963      	ldr	r3, [r4, #20]
   26b5e:	9303      	str	r3, [sp, #12]
   26b60:	6923      	ldr	r3, [r4, #16]
   26b62:	9302      	str	r3, [sp, #8]
   26b64:	68e3      	ldr	r3, [r4, #12]
   26b66:	9301      	str	r3, [sp, #4]
   26b68:	68a3      	ldr	r3, [r4, #8]
   26b6a:	9300      	str	r3, [sp, #0]
   26b6c:	e9d4 2300 	ldrd	r2, r3, [r4]
   26b70:	f7eb ffda 	bl	12b28 <print_formatted>
		break;
   26b74:	e71e      	b.n	269b4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   26b76:	6b63      	ldr	r3, [r4, #52]	; 0x34
   26b78:	4631      	mov	r1, r6
   26b7a:	930b      	str	r3, [sp, #44]	; 0x2c
   26b7c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   26b7e:	4628      	mov	r0, r5
   26b80:	930a      	str	r3, [sp, #40]	; 0x28
   26b82:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   26b84:	9309      	str	r3, [sp, #36]	; 0x24
   26b86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   26b88:	9308      	str	r3, [sp, #32]
   26b8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   26b8c:	9307      	str	r3, [sp, #28]
   26b8e:	6a23      	ldr	r3, [r4, #32]
   26b90:	9306      	str	r3, [sp, #24]
   26b92:	69e3      	ldr	r3, [r4, #28]
   26b94:	9305      	str	r3, [sp, #20]
   26b96:	69a3      	ldr	r3, [r4, #24]
   26b98:	9304      	str	r3, [sp, #16]
   26b9a:	6963      	ldr	r3, [r4, #20]
   26b9c:	9303      	str	r3, [sp, #12]
   26b9e:	6923      	ldr	r3, [r4, #16]
   26ba0:	9302      	str	r3, [sp, #8]
   26ba2:	68e3      	ldr	r3, [r4, #12]
   26ba4:	9301      	str	r3, [sp, #4]
   26ba6:	68a3      	ldr	r3, [r4, #8]
   26ba8:	9300      	str	r3, [sp, #0]
   26baa:	e9d4 2300 	ldrd	r2, r3, [r4]
   26bae:	f7eb ffbb 	bl	12b28 <print_formatted>
		break;
   26bb2:	e6ff      	b.n	269b4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   26bb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   26bb6:	4631      	mov	r1, r6
   26bb8:	930c      	str	r3, [sp, #48]	; 0x30
   26bba:	6b63      	ldr	r3, [r4, #52]	; 0x34
   26bbc:	4628      	mov	r0, r5
   26bbe:	930b      	str	r3, [sp, #44]	; 0x2c
   26bc0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   26bc2:	930a      	str	r3, [sp, #40]	; 0x28
   26bc4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   26bc6:	9309      	str	r3, [sp, #36]	; 0x24
   26bc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   26bca:	9308      	str	r3, [sp, #32]
   26bcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   26bce:	9307      	str	r3, [sp, #28]
   26bd0:	6a23      	ldr	r3, [r4, #32]
   26bd2:	9306      	str	r3, [sp, #24]
   26bd4:	69e3      	ldr	r3, [r4, #28]
   26bd6:	9305      	str	r3, [sp, #20]
   26bd8:	69a3      	ldr	r3, [r4, #24]
   26bda:	9304      	str	r3, [sp, #16]
   26bdc:	6963      	ldr	r3, [r4, #20]
   26bde:	9303      	str	r3, [sp, #12]
   26be0:	6923      	ldr	r3, [r4, #16]
   26be2:	9302      	str	r3, [sp, #8]
   26be4:	68e3      	ldr	r3, [r4, #12]
   26be6:	9301      	str	r3, [sp, #4]
   26be8:	68a3      	ldr	r3, [r4, #8]
   26bea:	9300      	str	r3, [sp, #0]
   26bec:	e9d4 2300 	ldrd	r2, r3, [r4]
   26bf0:	f7eb ff9a 	bl	12b28 <print_formatted>
}
   26bf4:	e6de      	b.n	269b4 <std_print+0x78>

00026bf6 <log_output_flush>:
		     log_output->control_block->offset,
   26bf6:	6842      	ldr	r2, [r0, #4]
{
   26bf8:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   26bfa:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   26bfe:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   26c00:	6881      	ldr	r1, [r0, #8]
   26c02:	6800      	ldr	r0, [r0, #0]
   26c04:	f7ff fe8d 	bl	26922 <buffer_write>
	log_output->control_block->offset = 0;
   26c08:	2200      	movs	r2, #0
   26c0a:	6863      	ldr	r3, [r4, #4]
   26c0c:	601a      	str	r2, [r3, #0]
}
   26c0e:	bd10      	pop	{r4, pc}

00026c10 <out_func>:
{
   26c10:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   26c12:	684b      	ldr	r3, [r1, #4]
{
   26c14:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   26c16:	681a      	ldr	r2, [r3, #0]
   26c18:	68cb      	ldr	r3, [r1, #12]
{
   26c1a:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   26c1c:	429a      	cmp	r2, r3
   26c1e:	d102      	bne.n	26c26 <out_func+0x16>
		log_output_flush(out_ctx);
   26c20:	4608      	mov	r0, r1
   26c22:	f7ff ffe8 	bl	26bf6 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   26c26:	6863      	ldr	r3, [r4, #4]
   26c28:	e8d3 2fef 	ldaex	r2, [r3]
   26c2c:	1c51      	adds	r1, r2, #1
   26c2e:	e8c3 1fe0 	stlex	r0, r1, [r3]
   26c32:	2800      	cmp	r0, #0
   26c34:	d1f8      	bne.n	26c28 <out_func+0x18>
	out_ctx->buf[idx] = (u8_t)c;
   26c36:	68a3      	ldr	r3, [r4, #8]
}
   26c38:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (u8_t)c;
   26c3a:	549d      	strb	r5, [r3, r2]
}
   26c3c:	bd38      	pop	{r3, r4, r5, pc}

00026c3e <__cxa_atexit>:
{
	ARG_UNUSED(destructor);
	ARG_UNUSED(objptr);
	ARG_UNUSED(dso);
	return 0;
}
   26c3e:	2000      	movs	r0, #0
   26c40:	4770      	bx	lr

00026c42 <get_status>:
	if (data->started) {
   26c42:	220c      	movs	r2, #12
	data = get_sub_data(dev, type);
   26c44:	68c3      	ldr	r3, [r0, #12]
	return &data->subsys[type];
   26c46:	b2c9      	uxtb	r1, r1
	if (data->started) {
   26c48:	fb02 3101 	mla	r1, r2, r1, r3
   26c4c:	7a4b      	ldrb	r3, [r1, #9]
   26c4e:	b923      	cbnz	r3, 26c5a <get_status+0x18>
	if (data->ref > 0) {
   26c50:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
   26c52:	fab0 f080 	clz	r0, r0
   26c56:	0940      	lsrs	r0, r0, #5
   26c58:	4770      	bx	lr
   26c5a:	2002      	movs	r0, #2
}
   26c5c:	4770      	bx	lr

00026c5e <clock_stop>:
{
   26c5e:	b570      	push	{r4, r5, r6, lr}
   26c60:	b2c9      	uxtb	r1, r1
	config = get_sub_config(dev, type);
   26c62:	6844      	ldr	r4, [r0, #4]
	data = get_sub_data(dev, type);
   26c64:	68c5      	ldr	r5, [r0, #12]
	__asm__ volatile(
   26c66:	f04f 0320 	mov.w	r3, #32
   26c6a:	f3ef 8611 	mrs	r6, BASEPRI
   26c6e:	f383 8811 	msr	BASEPRI, r3
   26c72:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
   26c76:	230c      	movs	r3, #12
   26c78:	434b      	muls	r3, r1
   26c7a:	18ea      	adds	r2, r5, r3
   26c7c:	7a10      	ldrb	r0, [r2, #8]
   26c7e:	b1a0      	cbz	r0, 26caa <clock_stop+0x4c>
	data->ref--;
   26c80:	3801      	subs	r0, #1
   26c82:	b2c0      	uxtb	r0, r0
   26c84:	7210      	strb	r0, [r2, #8]
	if (data->ref == 0) {
   26c86:	b998      	cbnz	r0, 26cb0 <clock_stop+0x52>
		nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
   26c88:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	list->head = NULL;
   26c8c:	50e8      	str	r0, [r5, r3]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26c8e:	78cb      	ldrb	r3, [r1, #3]
   26c90:	2101      	movs	r1, #1
   26c92:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   26c96:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
	list->tail = NULL;
   26c9a:	6050      	str	r0, [r2, #4]
   26c9c:	6019      	str	r1, [r3, #0]
		data->started = false;
   26c9e:	7250      	strb	r0, [r2, #9]
	__asm__ volatile(
   26ca0:	f386 8811 	msr	BASEPRI, r6
   26ca4:	f3bf 8f6f 	isb	sy
}
   26ca8:	bd70      	pop	{r4, r5, r6, pc}
		err = -EALREADY;
   26caa:	f06f 0077 	mvn.w	r0, #119	; 0x77
   26cae:	e7f7      	b.n	26ca0 <clock_stop+0x42>
	int err = 0;
   26cb0:	2000      	movs	r0, #0
   26cb2:	e7f5      	b.n	26ca0 <clock_stop+0x42>

00026cb4 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   26cb4:	2200      	movs	r2, #0
   26cb6:	f7ec ba09 	b.w	130cc <clock_async_start>

00026cba <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   26cba:	4770      	bx	lr

00026cbc <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   26cbc:	4770      	bx	lr

00026cbe <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   26cbe:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   26cc0:	68c1      	ldr	r1, [r0, #12]
  if (RdOff <= WrOff) {
   26cc2:	428b      	cmp	r3, r1
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   26cc4:	bf97      	itett	ls
   26cc6:	6882      	ldrls	r2, [r0, #8]
    r = RdOff - WrOff - 1u;
   26cc8:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   26ccc:	18d2      	addls	r2, r2, r3
   26cce:	f102 32ff 	addls.w	r2, r2, #4294967295	; 0xffffffff
   26cd2:	bf94      	ite	ls
   26cd4:	1a50      	subls	r0, r2, r1
    r = RdOff - WrOff - 1u;
   26cd6:	1a58      	subhi	r0, r3, r1
}
   26cd8:	4770      	bx	lr

00026cda <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   26cda:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   26cde:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   26ce2:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   26ce4:	eba9 0804 	sub.w	r8, r9, r4
   26ce8:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
   26cea:	4590      	cmp	r8, r2
   26cec:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   26cee:	460f      	mov	r7, r1
  if (Rem > NumBytes) {
   26cf0:	4414      	add	r4, r2
   26cf2:	d904      	bls.n	26cfe <_WriteNoCheck+0x24>
   26cf4:	f00a f884 	bl	30e00 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   26cf8:	60ec      	str	r4, [r5, #12]
}
   26cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26cfe:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   26d00:	eba4 0409 	sub.w	r4, r4, r9
   26d04:	f00a f87c 	bl	30e00 <memcpy>
   26d08:	4622      	mov	r2, r4
   26d0a:	6868      	ldr	r0, [r5, #4]
   26d0c:	eb07 0108 	add.w	r1, r7, r8
   26d10:	e7f0      	b.n	26cf4 <_WriteNoCheck+0x1a>

00026d12 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   26d12:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26d16:	4606      	mov	r6, r0
   26d18:	4689      	mov	r9, r1
   26d1a:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   26d1c:	f04f 0800 	mov.w	r8, #0
  WrOff = pRing->WrOff;
   26d20:	68c5      	ldr	r5, [r0, #12]
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   26d22:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
   26d24:	68b3      	ldr	r3, [r6, #8]
   26d26:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   26d28:	bf28      	it	cs
   26d2a:	18e4      	addcs	r4, r4, r3
   26d2c:	3c01      	subs	r4, #1
   26d2e:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   26d30:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   26d32:	42bc      	cmp	r4, r7
   26d34:	bf28      	it	cs
   26d36:	463c      	movcs	r4, r7
   26d38:	4294      	cmp	r4, r2
   26d3a:	bf28      	it	cs
   26d3c:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   26d3e:	6870      	ldr	r0, [r6, #4]
   26d40:	4649      	mov	r1, r9
   26d42:	4428      	add	r0, r5
   26d44:	4622      	mov	r2, r4
   26d46:	f00a f85b 	bl	30e00 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   26d4a:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   26d4c:	4425      	add	r5, r4
      WrOff = 0u;
   26d4e:	42ab      	cmp	r3, r5
   26d50:	bf08      	it	eq
   26d52:	2500      	moveq	r5, #0
  } while (NumBytes);
   26d54:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   26d56:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   26d58:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   26d5a:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   26d5c:	d1e1      	bne.n	26d22 <_WriteBlocking+0x10>
}
   26d5e:	4640      	mov	r0, r8
   26d60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00026d64 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   26d64:	f7ec bb7a 	b.w	1345c <_DoInit>

00026d68 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(struct device *unused)
{
   26d68:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   26d6a:	f7ff fffb 	bl	26d64 <SEGGER_RTT_Init>

	return 0;
}
   26d6e:	2000      	movs	r0, #0
   26d70:	bd08      	pop	{r3, pc}

00026d72 <z_irq_spurious>:
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   26d72:	2100      	movs	r1, #0
   26d74:	2001      	movs	r0, #1
   26d76:	f7ec bceb 	b.w	13750 <z_arm_fatal_error>

00026d7a <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   26d7a:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   26d7c:	6800      	ldr	r0, [r0, #0]
   26d7e:	f7ec bce7 	b.w	13750 <z_arm_fatal_error>

00026d82 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   26d82:	b508      	push	{r3, lr}
	handler();
   26d84:	f7ec fd1c 	bl	137c0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   26d88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   26d8c:	f7ec bfb2 	b.w	13cf4 <z_arm_exc_exit>

00026d90 <__aeabi_atexit>:
 * @param dso Dynamic Shared Object handle for shared libraries
 *
 * Wrapper for __cxa_atexit()
 */
int __aeabi_atexit(void *objptr, void (*destructor)(void *), void *dso)
{
   26d90:	460b      	mov	r3, r1
	return __cxa_atexit(destructor, objptr, dso);
   26d92:	4601      	mov	r1, r0
   26d94:	4618      	mov	r0, r3
   26d96:	f7ff bf52 	b.w	26c3e <__cxa_atexit>

00026d9a <mpu_configure_region>:
{
   26d9a:	b530      	push	{r4, r5, lr}
	p_attr->rbar = attr->rbar &
   26d9c:	890a      	ldrh	r2, [r1, #8]
   26d9e:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
   26da0:	680b      	ldr	r3, [r1, #0]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   26da2:	684c      	ldr	r4, [r1, #4]
   26da4:	f002 021f 	and.w	r2, r2, #31
{
   26da8:	b085      	sub	sp, #20
   26daa:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	region_conf.base = new_region->start;
   26dae:	9300      	str	r3, [sp, #0]
   26db0:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   26db4:	f023 031f 	bic.w	r3, r3, #31
   26db8:	1e62      	subs	r2, r4, #1
   26dba:	4413      	add	r3, r2
   26dbc:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   26dc0:	280f      	cmp	r0, #15
   26dc2:	4604      	mov	r4, r0
   26dc4:	9303      	str	r3, [sp, #12]
   26dc6:	d905      	bls.n	26dd4 <mpu_configure_region+0x3a>
   26dc8:	f7ed f828 	bl	13e1c <region_allocate_and_init.part.0>
   26dcc:	4604      	mov	r4, r0
}
   26dce:	4620      	mov	r0, r4
   26dd0:	b005      	add	sp, #20
   26dd2:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
   26dd4:	4669      	mov	r1, sp
   26dd6:	f7ed f809 	bl	13dec <region_init>
	return region_allocate_and_init(index,
   26dda:	e7f8      	b.n	26dce <mpu_configure_region+0x34>

00026ddc <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   26ddc:	e840 f000 	tt	r0, r0
   26de0:	b2c3      	uxtb	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   26de2:	f410 3f80 	tst.w	r0, #65536	; 0x10000
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   26de6:	bf14      	ite	ne
   26de8:	4618      	movne	r0, r3
   26dea:	f06f 0015 	mvneq.w	r0, #21
   26dee:	4770      	bx	lr

00026df0 <_stdout_hook_default>:
}
   26df0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26df4:	4770      	bx	lr

00026df6 <_stdin_hook_default>:
}
   26df6:	2000      	movs	r0, #0
   26df8:	4770      	bx	lr

00026dfa <_read>:
{
   26dfa:	4608      	mov	r0, r1
	return z_impl_zephyr_read_stdin(buf, nbytes);
   26dfc:	4611      	mov	r1, r2
   26dfe:	f7ed b97f 	b.w	14100 <z_impl_zephyr_read_stdin>

00026e02 <_write>:
{
   26e02:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
   26e04:	4611      	mov	r1, r2
   26e06:	f7ed b98f 	b.w	14128 <z_impl_zephyr_write_stdout>

00026e0a <_close>:
   26e0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26e0e:	4770      	bx	lr

00026e10 <_lseek>:
}
   26e10:	2000      	movs	r0, #0
   26e12:	4770      	bx	lr

00026e14 <_isatty>:
}
   26e14:	2001      	movs	r0, #1
   26e16:	4770      	bx	lr

00026e18 <_kill>:
}
   26e18:	2000      	movs	r0, #0
   26e1a:	4770      	bx	lr

00026e1c <_getpid>:
}
   26e1c:	2000      	movs	r0, #0
   26e1e:	4770      	bx	lr

00026e20 <_fstat>:
	st->st_mode = S_IFCHR;
   26e20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   26e24:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   26e26:	604b      	str	r3, [r1, #4]
}
   26e28:	4770      	bx	lr

00026e2a <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   26e2a:	f7ed bf69 	b.w	14d00 <z_impl_z_errno>

00026e2e <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26e2e:	6843      	ldr	r3, [r0, #4]
}
   26e30:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26e32:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   26e34:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   26e36:	600b      	str	r3, [r1, #0]
}
   26e38:	4770      	bx	lr

00026e3a <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26e3a:	6843      	ldr	r3, [r0, #4]
   26e3c:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   26e3e:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   26e40:	4042      	eors	r2, r0
   26e42:	400a      	ands	r2, r1
   26e44:	4042      	eors	r2, r0
    p_reg->OUT = value;
   26e46:	605a      	str	r2, [r3, #4]
}
   26e48:	2000      	movs	r0, #0
   26e4a:	4770      	bx	lr

00026e4c <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26e4c:	6843      	ldr	r3, [r0, #4]
}
   26e4e:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26e50:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   26e52:	6099      	str	r1, [r3, #8]
}
   26e54:	4770      	bx	lr

00026e56 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26e56:	6843      	ldr	r3, [r0, #4]
}
   26e58:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26e5a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   26e5c:	60d9      	str	r1, [r3, #12]
}
   26e5e:	4770      	bx	lr

00026e60 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26e60:	6843      	ldr	r3, [r0, #4]
}
   26e62:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26e64:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   26e66:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   26e68:	4059      	eors	r1, r3
    p_reg->OUT = value;
   26e6a:	6051      	str	r1, [r2, #4]
}
   26e6c:	4770      	bx	lr

00026e6e <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   26e6e:	68c3      	ldr	r3, [r0, #12]
{
   26e70:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   26e72:	6858      	ldr	r0, [r3, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   26e74:	b158      	cbz	r0, 26e8e <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26e76:	2400      	movs	r4, #0
   26e78:	4281      	cmp	r1, r0
   26e7a:	d113      	bne.n	26ea4 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   26e7c:	6808      	ldr	r0, [r1, #0]
   26e7e:	b95c      	cbnz	r4, 26e98 <gpio_nrfx_manage_callback+0x2a>
   26e80:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   26e82:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   26e84:	42a1      	cmp	r1, r4
   26e86:	d100      	bne.n	26e8a <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   26e88:	6098      	str	r0, [r3, #8]
	parent->next = child;
   26e8a:	2000      	movs	r0, #0
   26e8c:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   26e8e:	b972      	cbnz	r2, 26eae <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   26e90:	2000      	movs	r0, #0
}
   26e92:	bd30      	pop	{r4, r5, pc}
   26e94:	4628      	mov	r0, r5
   26e96:	e7ef      	b.n	26e78 <gpio_nrfx_manage_callback+0xa>
   26e98:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   26e9a:	6898      	ldr	r0, [r3, #8]
   26e9c:	4281      	cmp	r1, r0
	list->tail = node;
   26e9e:	bf08      	it	eq
   26ea0:	609c      	streq	r4, [r3, #8]
}
   26ea2:	e7f2      	b.n	26e8a <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   26ea4:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26ea6:	4604      	mov	r4, r0
   26ea8:	2d00      	cmp	r5, #0
   26eaa:	d1f3      	bne.n	26e94 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   26eac:	b13a      	cbz	r2, 26ebe <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   26eae:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   26eb0:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   26eb2:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   26eb4:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   26eb6:	2800      	cmp	r0, #0
   26eb8:	d1ea      	bne.n	26e90 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   26eba:	6099      	str	r1, [r3, #8]
}
   26ebc:	e7e9      	b.n	26e92 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   26ebe:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   26ec2:	e7e6      	b.n	26e92 <gpio_nrfx_manage_callback+0x24>

00026ec4 <gpio_nrfx_pin_disable_callback>:
	WRITE_BIT(data->int_en, pin, enable);
   26ec4:	2201      	movs	r2, #1
{
   26ec6:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
   26ec8:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
   26eca:	408a      	lsls	r2, r1
   26ecc:	6923      	ldr	r3, [r4, #16]
   26ece:	ea23 0302 	bic.w	r3, r3, r2
   26ed2:	6123      	str	r3, [r4, #16]
}
   26ed4:	f85d 4b04 	ldr.w	r4, [sp], #4
	return gpiote_pin_int_cfg(port, pin);
   26ed8:	f7ed b9dc 	b.w	14294 <gpiote_pin_int_cfg>

00026edc <gpio_nrfx_pin_enable_callback>:
	WRITE_BIT(data->int_en, pin, enable);
   26edc:	2201      	movs	r2, #1
{
   26ede:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
   26ee0:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
   26ee2:	408a      	lsls	r2, r1
   26ee4:	6923      	ldr	r3, [r4, #16]
   26ee6:	4313      	orrs	r3, r2
   26ee8:	6123      	str	r3, [r4, #16]
}
   26eea:	f85d 4b04 	ldr.w	r4, [sp], #4
	return gpiote_pin_int_cfg(port, pin);
   26eee:	f7ed b9d1 	b.w	14294 <gpiote_pin_int_cfg>

00026ef2 <any_other_channel_is_active>:
{
   26ef2:	2300      	movs	r3, #0
   26ef4:	b530      	push	{r4, r5, lr}
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
   26ef6:	1d0c      	adds	r4, r1, #4
		if (i != channel && pwm_channel_is_active(i, data)) {
   26ef8:	b2da      	uxtb	r2, r3
   26efa:	4282      	cmp	r2, r0
   26efc:	d007      	beq.n	26f0e <any_other_channel_is_active+0x1c>
	u16_t pulse_cycle =
   26efe:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
   26f02:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
   26f06:	b112      	cbz	r2, 26f0e <any_other_channel_is_active+0x1c>
   26f08:	898d      	ldrh	r5, [r1, #12]
   26f0a:	4295      	cmp	r5, r2
   26f0c:	d804      	bhi.n	26f18 <any_other_channel_is_active+0x26>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
   26f0e:	3301      	adds	r3, #1
   26f10:	2b04      	cmp	r3, #4
   26f12:	d1f1      	bne.n	26ef8 <any_other_channel_is_active+0x6>
	return false;
   26f14:	2000      	movs	r0, #0
}
   26f16:	bd30      	pop	{r4, r5, pc}
			return true;
   26f18:	2001      	movs	r0, #1
   26f1a:	e7fc      	b.n	26f16 <any_other_channel_is_active+0x24>

00026f1c <uarte_nrfx_config_get>:
{
   26f1c:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   26f1e:	68c2      	ldr	r2, [r0, #12]
   26f20:	e892 0003 	ldmia.w	r2, {r0, r1}
   26f24:	e883 0003 	stmia.w	r3, {r0, r1}
}
   26f28:	2000      	movs	r0, #0
   26f2a:	4770      	bx	lr

00026f2c <uarte_nrfx_err_check>:
	return config->uarte_regs;
   26f2c:	6843      	ldr	r3, [r0, #4]
   26f2e:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   26f30:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   26f34:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   26f38:	4770      	bx	lr

00026f3a <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   26f3a:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   26f3c:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   26f3e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26f40:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   26f44:	b138      	cbz	r0, 26f56 <uarte_nrfx_poll_in+0x1c>
	*c = data->rx_data;
   26f46:	7b12      	ldrb	r2, [r2, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26f48:	2000      	movs	r0, #0
   26f4a:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26f4c:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26f4e:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26f52:	601a      	str	r2, [r3, #0]
	return 0;
   26f54:	4770      	bx	lr
		return -1;
   26f56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   26f5a:	4770      	bx	lr

00026f5c <uarte_nrfx_poll_out>:
{
   26f5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   26f60:	6843      	ldr	r3, [r0, #4]
{
   26f62:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   26f66:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   26f68:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
   26f6a:	f000 f983 	bl	27274 <k_is_in_isr>
   26f6e:	b9c0      	cbnz	r0, 26fa2 <uarte_nrfx_poll_out+0x46>
   26f70:	2564      	movs	r5, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   26f72:	f04f 0801 	mov.w	r8, #1
   26f76:	f106 0708 	add.w	r7, r6, #8
   26f7a:	e8d7 3fef 	ldaex	r3, [r7]
   26f7e:	2b00      	cmp	r3, #0
   26f80:	d103      	bne.n	26f8a <uarte_nrfx_poll_out+0x2e>
   26f82:	e8c7 8fe2 	stlex	r2, r8, [r7]
   26f86:	2a00      	cmp	r2, #0
   26f88:	d1f7      	bne.n	26f7a <uarte_nrfx_poll_out+0x1e>
		while (atomic_cas((atomic_t *) lock,
   26f8a:	d00c      	beq.n	26fa6 <uarte_nrfx_poll_out+0x4a>
	return z_impl_k_sleep(timeout);
   26f8c:	2021      	movs	r0, #33	; 0x21
   26f8e:	2100      	movs	r1, #0
   26f90:	3d01      	subs	r5, #1
   26f92:	f7ee fc6d 	bl	15870 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   26f96:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   26f9a:	d1ee      	bne.n	26f7a <uarte_nrfx_poll_out+0x1e>
}
   26f9c:	b002      	add	sp, #8
   26f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
   26fa2:	2301      	movs	r3, #1
   26fa4:	60b3      	str	r3, [r6, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26fa6:	2300      	movs	r3, #0
   26fa8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   26fac:	f10d 0307 	add.w	r3, sp, #7
   26fb0:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   26fb4:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26fb6:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    p_reg->TXD.MAXCNT = length;
   26fba:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26fbe:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26fc0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
   26fc4:	b923      	cbnz	r3, 26fd0 <uarte_nrfx_poll_out+0x74>
   26fc6:	2001      	movs	r0, #1
   26fc8:	f000 f807 	bl	26fda <nrfx_busy_wait>
   26fcc:	3d01      	subs	r5, #1
   26fce:	d1f7      	bne.n	26fc0 <uarte_nrfx_poll_out+0x64>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26fd0:	2301      	movs	r3, #1
   26fd2:	60e3      	str	r3, [r4, #12]
	*lock = 0;
   26fd4:	2300      	movs	r3, #0
   26fd6:	60b3      	str	r3, [r6, #8]
   26fd8:	e7e0      	b.n	26f9c <uarte_nrfx_poll_out+0x40>

00026fda <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   26fda:	f000 b951 	b.w	27280 <z_impl_k_busy_wait>

00026fde <start_playback.isra.0>:
static uint32_t start_playback(nrfx_pwm_t const * p_instance,
   26fde:	b510      	push	{r4, lr}
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   26fe0:	2402      	movs	r4, #2
    p_cb->flags = flags;
   26fe2:	724a      	strb	r2, [r1, #9]
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   26fe4:	720c      	strb	r4, [r1, #8]
    if (p_cb->handler)
   26fe6:	6809      	ldr	r1, [r1, #0]
   26fe8:	b171      	cbz	r1, 27008 <start_playback.isra.0+0x2a>
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
   26fea:	f012 0f04 	tst.w	r2, #4
   26fee:	bf0c      	ite	eq
   26ff0:	2182      	moveq	r1, #130	; 0x82
   26ff2:	2192      	movne	r1, #146	; 0x92
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
   26ff4:	0714      	lsls	r4, r2, #28
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
   26ff6:	bf48      	it	mi
   26ff8:	f041 0120 	orrmi.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
   26ffc:	06d4      	lsls	r4, r2, #27
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
   26ffe:	bf48      	it	mi
   27000:	f021 0180 	bicmi.w	r1, r1, #128	; 0x80
    p_reg->INTEN = mask;
   27004:	f8c0 1300 	str.w	r1, [r0, #768]	; 0x300
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
   27008:	0612      	lsls	r2, r2, #24
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2700a:	f04f 0100 	mov.w	r1, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2700e:	bf58      	it	pl
   27010:	2201      	movpl	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27012:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27016:	bf56      	itet	pl
   27018:	50c2      	strpl	r2, [r0, r3]
    return ((uint32_t)p_reg + (uint32_t)task);
   2701a:	18c0      	addmi	r0, r0, r3
    return 0;
   2701c:	4608      	movpl	r0, r1
}
   2701e:	bd10      	pop	{r4, pc}

00027020 <nrfx_pwm_stop>:
    p_reg->SHORTS = mask;
   27020:	2200      	movs	r2, #0
{
   27022:	b538      	push	{r3, r4, r5, lr}
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
   27024:	6803      	ldr	r3, [r0, #0]
{
   27026:	4605      	mov	r5, r0
   27028:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2702c:	2201      	movs	r2, #1
   2702e:	605a      	str	r2, [r3, #4]
   27030:	460c      	mov	r4, r1
    if (nrfx_pwm_is_stopped(p_instance))
   27032:	f7ed fe17 	bl	14c64 <nrfx_pwm_is_stopped>
   27036:	b938      	cbnz	r0, 27048 <nrfx_pwm_stop+0x28>
            if (nrfx_pwm_is_stopped(p_instance))
   27038:	4628      	mov	r0, r5
   2703a:	f7ed fe13 	bl	14c64 <nrfx_pwm_is_stopped>
   2703e:	b918      	cbnz	r0, 27048 <nrfx_pwm_stop+0x28>
        } while (wait_until_stopped);
   27040:	2c00      	cmp	r4, #0
   27042:	d1f9      	bne.n	27038 <nrfx_pwm_stop+0x18>
}
   27044:	4620      	mov	r0, r4
   27046:	bd38      	pop	{r3, r4, r5, pc}
        ret_val = true;
   27048:	2401      	movs	r4, #1
   2704a:	e7fb      	b.n	27044 <nrfx_pwm_stop+0x24>

0002704c <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   2704c:	f7ff be36 	b.w	26cbc <z_clock_idle_exit>

00027050 <k_mem_slab_init>:
{
   27050:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   27052:	2400      	movs	r4, #0
   27054:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   27056:	ea41 0402 	orr.w	r4, r1, r2
   2705a:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   2705e:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   27062:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   27064:	d10c      	bne.n	27080 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   27066:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   27068:	42a3      	cmp	r3, r4
   2706a:	d103      	bne.n	27074 <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
   2706c:	e9c0 0000 	strd	r0, r0, [r0]
}
   27070:	2000      	movs	r0, #0
}
   27072:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   27074:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   27076:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   27078:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   2707a:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   2707c:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   2707e:	e7f3      	b.n	27068 <k_mem_slab_init+0x18>
		return -EINVAL;
   27080:	f06f 0015 	mvn.w	r0, #21
	return rc;
   27084:	e7f5      	b.n	27072 <k_mem_slab_init+0x22>

00027086 <z_find_first_thread_to_unpend>:
{
   27086:	b510      	push	{r4, lr}
	__asm__ volatile(
   27088:	f04f 0320 	mov.w	r3, #32
   2708c:	f3ef 8411 	mrs	r4, BASEPRI
   27090:	f383 8811 	msr	BASEPRI, r3
   27094:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   27098:	f000 f83f 	bl	2711a <z_priq_dumb_best>
	__asm__ volatile(
   2709c:	f384 8811 	msr	BASEPRI, r4
   270a0:	f3bf 8f6f 	isb	sy
}
   270a4:	bd10      	pop	{r4, pc}

000270a6 <z_unpend_thread_no_timeout>:
{
   270a6:	b538      	push	{r3, r4, r5, lr}
   270a8:	4604      	mov	r4, r0
	__asm__ volatile(
   270aa:	f04f 0320 	mov.w	r3, #32
   270ae:	f3ef 8511 	mrs	r5, BASEPRI
   270b2:	f383 8811 	msr	BASEPRI, r3
   270b6:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   270ba:	4601      	mov	r1, r0
   270bc:	6880      	ldr	r0, [r0, #8]
   270be:	f7ee f903 	bl	152c8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   270c2:	7b63      	ldrb	r3, [r4, #13]
   270c4:	f023 0302 	bic.w	r3, r3, #2
   270c8:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
   270ca:	2300      	movs	r3, #0
   270cc:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   270ce:	f385 8811 	msr	BASEPRI, r5
   270d2:	f3bf 8f6f 	isb	sy
}
   270d6:	bd38      	pop	{r3, r4, r5, pc}

000270d8 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   270d8:	b921      	cbnz	r1, 270e4 <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   270da:	f3ef 8005 	mrs	r0, IPSR
   270de:	b908      	cbnz	r0, 270e4 <z_reschedule+0xc>
   270e0:	f7ec ba76 	b.w	135d0 <arch_swap>
   270e4:	f381 8811 	msr	BASEPRI, r1
   270e8:	f3bf 8f6f 	isb	sy
}
   270ec:	4770      	bx	lr

000270ee <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   270ee:	4603      	mov	r3, r0
   270f0:	b920      	cbnz	r0, 270fc <z_reschedule_irqlock+0xe>
   270f2:	f3ef 8205 	mrs	r2, IPSR
   270f6:	b90a      	cbnz	r2, 270fc <z_reschedule_irqlock+0xe>
   270f8:	f7ec ba6a 	b.w	135d0 <arch_swap>
   270fc:	f383 8811 	msr	BASEPRI, r3
   27100:	f3bf 8f6f 	isb	sy
}
   27104:	4770      	bx	lr

00027106 <z_reschedule_unlocked>:
	__asm__ volatile(
   27106:	f04f 0320 	mov.w	r3, #32
   2710a:	f3ef 8011 	mrs	r0, BASEPRI
   2710e:	f383 8811 	msr	BASEPRI, r3
   27112:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   27116:	f7ff bfea 	b.w	270ee <z_reschedule_irqlock>

0002711a <z_priq_dumb_best>:
	return list->head == list;
   2711a:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2711c:	4298      	cmp	r0, r3
   2711e:	d004      	beq.n	2712a <z_priq_dumb_best+0x10>
	if (n != NULL) {
   27120:	2b00      	cmp	r3, #0
   27122:	bf38      	it	cc
   27124:	2300      	movcc	r3, #0
   27126:	4618      	mov	r0, r3
   27128:	4770      	bx	lr
	struct k_thread *thread = NULL;
   2712a:	2000      	movs	r0, #0
}
   2712c:	4770      	bx	lr

0002712e <z_ready_thread>:
{
   2712e:	b510      	push	{r4, lr}
   27130:	f04f 0320 	mov.w	r3, #32
   27134:	f3ef 8411 	mrs	r4, BASEPRI
   27138:	f383 8811 	msr	BASEPRI, r3
   2713c:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   27140:	f7ee f918 	bl	15374 <ready_thread>
	__asm__ volatile(
   27144:	f384 8811 	msr	BASEPRI, r4
   27148:	f3bf 8f6f 	isb	sy
}
   2714c:	bd10      	pop	{r4, pc}

0002714e <z_thread_timeout>:
{
   2714e:	b538      	push	{r3, r4, r5, lr}
	if (thread->base.pended_on != NULL) {
   27150:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   27154:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   27156:	f1a0 0118 	sub.w	r1, r0, #24
	if (thread->base.pended_on != NULL) {
   2715a:	b1c3      	cbz	r3, 2718e <z_thread_timeout+0x40>
	__asm__ volatile(
   2715c:	f04f 0320 	mov.w	r3, #32
   27160:	f3ef 8511 	mrs	r5, BASEPRI
   27164:	f383 8811 	msr	BASEPRI, r3
   27168:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2716c:	f850 0c10 	ldr.w	r0, [r0, #-16]
   27170:	f7ee f8aa 	bl	152c8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   27174:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   27178:	f023 0302 	bic.w	r3, r3, #2
   2717c:	f804 3c0b 	strb.w	r3, [r4, #-11]
		thread->base.pended_on = NULL;
   27180:	2300      	movs	r3, #0
   27182:	f844 3c10 	str.w	r3, [r4, #-16]
	__asm__ volatile(
   27186:	f385 8811 	msr	BASEPRI, r5
   2718a:	f3bf 8f6f 	isb	sy
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2718e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	z_ready_thread(thread);
   27192:	4608      	mov	r0, r1
   27194:	f023 0314 	bic.w	r3, r3, #20
   27198:	f804 3c0b 	strb.w	r3, [r4, #-11]
}
   2719c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
   271a0:	f7ff bfc5 	b.w	2712e <z_ready_thread>

000271a4 <z_remove_thread_from_ready_q>:
{
   271a4:	b510      	push	{r4, lr}
	__asm__ volatile(
   271a6:	f04f 0320 	mov.w	r3, #32
   271aa:	f3ef 8411 	mrs	r4, BASEPRI
   271ae:	f383 8811 	msr	BASEPRI, r3
   271b2:	f3bf 8f6f 	isb	sy
		unready_thread(thread);
   271b6:	f7ee fa3b 	bl	15630 <unready_thread>
	__asm__ volatile(
   271ba:	f384 8811 	msr	BASEPRI, r4
   271be:	f3bf 8f6f 	isb	sy
}
   271c2:	bd10      	pop	{r4, pc}

000271c4 <add_to_waitq_locked>:
{
   271c4:	b538      	push	{r3, r4, r5, lr}
   271c6:	4604      	mov	r4, r0
   271c8:	460d      	mov	r5, r1
	unready_thread(thread);
   271ca:	f7ee fa31 	bl	15630 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   271ce:	7b63      	ldrb	r3, [r4, #13]
   271d0:	f043 0302 	orr.w	r3, r3, #2
   271d4:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   271d6:	b1c5      	cbz	r5, 2720a <add_to_waitq_locked+0x46>
	return list->head == list;
   271d8:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   271da:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   271dc:	429d      	cmp	r5, r3
   271de:	bf08      	it	eq
   271e0:	2300      	moveq	r3, #0
   271e2:	2b00      	cmp	r3, #0
   271e4:	bf38      	it	cc
   271e6:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   271e8:	b183      	cbz	r3, 2720c <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
   271ea:	f994 100e 	ldrsb.w	r1, [r4, #14]
   271ee:	f993 200e 	ldrsb.w	r2, [r3, #14]
   271f2:	4291      	cmp	r1, r2
   271f4:	db04      	blt.n	27200 <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
   271f6:	686a      	ldr	r2, [r5, #4]
   271f8:	429a      	cmp	r2, r3
   271fa:	d007      	beq.n	2720c <add_to_waitq_locked+0x48>
   271fc:	681b      	ldr	r3, [r3, #0]
   271fe:	e7f3      	b.n	271e8 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
   27200:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   27202:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   27206:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   27208:	605c      	str	r4, [r3, #4]
}
   2720a:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   2720c:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   2720e:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   27210:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   27212:	686b      	ldr	r3, [r5, #4]
   27214:	601c      	str	r4, [r3, #0]
	list->tail = node;
   27216:	606c      	str	r4, [r5, #4]
   27218:	e7f7      	b.n	2720a <add_to_waitq_locked+0x46>

0002721a <z_unpend_first_thread>:
{
   2721a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2721c:	f04f 0320 	mov.w	r3, #32
   27220:	f3ef 8211 	mrs	r2, BASEPRI
   27224:	f383 8811 	msr	BASEPRI, r3
   27228:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   2722c:	f7ff ff75 	bl	2711a <z_priq_dumb_best>
   27230:	4604      	mov	r4, r0
	__asm__ volatile(
   27232:	f382 8811 	msr	BASEPRI, r2
   27236:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   2723a:	b1c8      	cbz	r0, 27270 <z_unpend_first_thread+0x56>
	__asm__ volatile(
   2723c:	f04f 0320 	mov.w	r3, #32
   27240:	f3ef 8511 	mrs	r5, BASEPRI
   27244:	f383 8811 	msr	BASEPRI, r3
   27248:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2724c:	4601      	mov	r1, r0
   2724e:	6880      	ldr	r0, [r0, #8]
   27250:	f7ee f83a 	bl	152c8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   27254:	7b63      	ldrb	r3, [r4, #13]
   27256:	f023 0302 	bic.w	r3, r3, #2
   2725a:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
   2725c:	2300      	movs	r3, #0
   2725e:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   27260:	f385 8811 	msr	BASEPRI, r5
   27264:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   27268:	f104 0018 	add.w	r0, r4, #24
   2726c:	f000 f80f 	bl	2728e <z_abort_timeout>
}
   27270:	4620      	mov	r0, r4
   27272:	bd38      	pop	{r3, r4, r5, pc}

00027274 <k_is_in_isr>:
   27274:	f3ef 8005 	mrs	r0, IPSR
}
   27278:	3800      	subs	r0, #0
   2727a:	bf18      	it	ne
   2727c:	2001      	movne	r0, #1
   2727e:	4770      	bx	lr

00027280 <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   27280:	f7eb b920 	b.w	124c4 <arch_busy_wait>

00027284 <z_impl_k_thread_name_set>:
}
   27284:	f06f 0057 	mvn.w	r0, #87	; 0x57
   27288:	4770      	bx	lr

0002728a <k_thread_name_get>:
}
   2728a:	2000      	movs	r0, #0
   2728c:	4770      	bx	lr

0002728e <z_abort_timeout>:
{
   2728e:	b510      	push	{r4, lr}
	__asm__ volatile(
   27290:	f04f 0220 	mov.w	r2, #32
   27294:	f3ef 8411 	mrs	r4, BASEPRI
   27298:	f382 8811 	msr	BASEPRI, r2
   2729c:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   272a0:	6803      	ldr	r3, [r0, #0]
   272a2:	b13b      	cbz	r3, 272b4 <z_abort_timeout+0x26>
			remove_timeout(to);
   272a4:	f7ee fc12 	bl	15acc <remove_timeout>
			ret = 0;
   272a8:	2000      	movs	r0, #0
	__asm__ volatile(
   272aa:	f384 8811 	msr	BASEPRI, r4
   272ae:	f3bf 8f6f 	isb	sy
}
   272b2:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   272b4:	f06f 0015 	mvn.w	r0, #21
   272b8:	e7f7      	b.n	272aa <z_abort_timeout+0x1c>

000272ba <z_get_next_timeout_expiry>:
{
   272ba:	b510      	push	{r4, lr}
	__asm__ volatile(
   272bc:	f04f 0320 	mov.w	r3, #32
   272c0:	f3ef 8411 	mrs	r4, BASEPRI
   272c4:	f383 8811 	msr	BASEPRI, r3
   272c8:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   272cc:	f7ee fc12 	bl	15af4 <next_timeout>
	__asm__ volatile(
   272d0:	f384 8811 	msr	BASEPRI, r4
   272d4:	f3bf 8f6f 	isb	sy
}
   272d8:	bd10      	pop	{r4, pc}

000272da <z_set_timeout_expiry>:
{
   272da:	b537      	push	{r0, r1, r2, r4, r5, lr}
   272dc:	4604      	mov	r4, r0
   272de:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
   272e0:	f04f 0320 	mov.w	r3, #32
   272e4:	f3ef 8511 	mrs	r5, BASEPRI
   272e8:	f383 8811 	msr	BASEPRI, r3
   272ec:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
   272f0:	f7ee fc00 	bl	15af4 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   272f4:	2801      	cmp	r0, #1
   272f6:	dd05      	ble.n	27304 <z_set_timeout_expiry+0x2a>
   272f8:	42a0      	cmp	r0, r4
   272fa:	9901      	ldr	r1, [sp, #4]
   272fc:	dd02      	ble.n	27304 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
   272fe:	4620      	mov	r0, r4
   27300:	f7ec f814 	bl	1332c <z_clock_set_timeout>
	__asm__ volatile(
   27304:	f385 8811 	msr	BASEPRI, r5
   27308:	f3bf 8f6f 	isb	sy
}
   2730c:	b003      	add	sp, #12
   2730e:	bd30      	pop	{r4, r5, pc}

00027310 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   27310:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   27312:	f7ee fcd9 	bl	15cc8 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   27316:	bd08      	pop	{r3, pc}

00027318 <k_timer_init>:
	timer->status = 0U;
   27318:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2731a:	e9c0 1206 	strd	r1, r2, [r0, #24]
	sys_dlist_init(&w->waitq);
   2731e:	f100 0210 	add.w	r2, r0, #16
	list->tail = (sys_dnode_t *)list;
   27322:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
   27326:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2732a:	6283      	str	r3, [r0, #40]	; 0x28
	timer->user_data = NULL;
   2732c:	62c3      	str	r3, [r0, #44]	; 0x2c
}
   2732e:	4770      	bx	lr

00027330 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   27330:	b510      	push	{r4, lr}
   27332:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   27334:	f7ff ffab 	bl	2728e <z_abort_timeout>

	if (inactive) {
   27338:	b9d8      	cbnz	r0, 27372 <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   2733a:	69e3      	ldr	r3, [r4, #28]
   2733c:	b10b      	cbz	r3, 27342 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2733e:	4620      	mov	r0, r4
   27340:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   27342:	f104 0010 	add.w	r0, r4, #16
   27346:	2100      	movs	r1, #0
   27348:	f7ff fe9d 	bl	27086 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   2734c:	4604      	mov	r4, r0
   2734e:	b180      	cbz	r0, 27372 <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   27350:	f7ff fea9 	bl	270a6 <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   27354:	4620      	mov	r0, r4
   27356:	f7ff feea 	bl	2712e <z_ready_thread>
	__asm__ volatile(
   2735a:	f04f 0320 	mov.w	r3, #32
   2735e:	f3ef 8011 	mrs	r0, BASEPRI
   27362:	f383 8811 	msr	BASEPRI, r3
   27366:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   2736a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   2736e:	f7ff bebe 	b.w	270ee <z_reschedule_irqlock>
   27372:	bd10      	pop	{r4, pc}

00027374 <k_heap_init>:
{
   27374:	b410      	push	{r4}
   27376:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2737a:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2737e:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   27382:	f7ff b903 	b.w	2658c <sys_heap_init>

00027386 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   27386:	4770      	bx	lr

00027388 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
                                   int version) const final {
    return FindOp(op);
   27388:	6803      	ldr	r3, [r0, #0]
   2738a:	691b      	ldr	r3, [r3, #16]
   2738c:	4718      	bx	r3

0002738e <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:
  }

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
    return FindOp(op);
   2738e:	6803      	ldr	r3, [r0, #0]
   27390:	695b      	ldr	r3, [r3, #20]
   27392:	4718      	bx	r3

00027394 <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpENS_15BuiltinOperatorE>:
    if (op == BuiltinOperator_CUSTOM) return nullptr;
   27394:	2920      	cmp	r1, #32
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
   27396:	b570      	push	{r4, r5, r6, lr}
    if (op == BuiltinOperator_CUSTOM) return nullptr;
   27398:	d010      	beq.n	273bc <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpENS_15BuiltinOperatorE+0x28>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   2739a:	f241 0304 	movw	r3, #4100	; 0x1004
   2739e:	58c4      	ldr	r4, [r0, r3]
   273a0:	2300      	movs	r3, #0
      if (registration.builtin_code == op) {
   273a2:	f100 0518 	add.w	r5, r0, #24
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   273a6:	429c      	cmp	r4, r3
   273a8:	d008      	beq.n	273bc <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpENS_15BuiltinOperatorE+0x28>
   273aa:	015a      	lsls	r2, r3, #5
      if (registration.builtin_code == op) {
   273ac:	58ae      	ldr	r6, [r5, r2]
   273ae:	428e      	cmp	r6, r1
   273b0:	d102      	bne.n	273b8 <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpENS_15BuiltinOperatorE+0x24>
      const TfLiteRegistration& registration = registrations_[i];
   273b2:	3204      	adds	r2, #4
   273b4:	4410      	add	r0, r2
  }
   273b6:	bd70      	pop	{r4, r5, r6, pc}
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   273b8:	3301      	adds	r3, #1
   273ba:	e7f4      	b.n	273a6 <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpENS_15BuiltinOperatorE+0x12>
    if (op == BuiltinOperator_CUSTOM) return nullptr;
   273bc:	2000      	movs	r0, #0
   273be:	e7fa      	b.n	273b6 <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpENS_15BuiltinOperatorE+0x22>

000273c0 <_ZNK6tflite22MicroMutableOpResolverILj128EE15GetOpDataParserENS_15BuiltinOperatorE>:
  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
   273c0:	b538      	push	{r3, r4, r5, lr}
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
   273c2:	f241 2388 	movw	r3, #4744	; 0x1288
   273c6:	58c4      	ldr	r4, [r0, r3]
   273c8:	2c80      	cmp	r4, #128	; 0x80
   273ca:	d80e      	bhi.n	273ea <_ZNK6tflite22MicroMutableOpResolverILj128EE15GetOpDataParserENS_15BuiltinOperatorE+0x2a>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
   273cc:	2300      	movs	r3, #0
   273ce:	f500 5280 	add.w	r2, r0, #4096	; 0x1000
   273d2:	3208      	adds	r2, #8
   273d4:	429c      	cmp	r4, r3
   273d6:	d00c      	beq.n	273f2 <_ZNK6tflite22MicroMutableOpResolverILj128EE15GetOpDataParserENS_15BuiltinOperatorE+0x32>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
   273d8:	f812 5b01 	ldrb.w	r5, [r2], #1
   273dc:	428d      	cmp	r5, r1
   273de:	d106      	bne.n	273ee <_ZNK6tflite22MicroMutableOpResolverILj128EE15GetOpDataParserENS_15BuiltinOperatorE+0x2e>
   273e0:	f203 4322 	addw	r3, r3, #1058	; 0x422
   273e4:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
  }
   273e8:	bd38      	pop	{r3, r4, r5, pc}
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
   273ea:	f009 fce6 	bl	30dba <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
   273ee:	3301      	adds	r3, #1
   273f0:	e7f0      	b.n	273d4 <_ZNK6tflite22MicroMutableOpResolverILj128EE15GetOpDataParserENS_15BuiltinOperatorE+0x14>
    return nullptr;
   273f2:	2000      	movs	r0, #0
   273f4:	e7f8      	b.n	273e8 <_ZNK6tflite22MicroMutableOpResolverILj128EE15GetOpDataParserENS_15BuiltinOperatorE+0x28>

000273f6 <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
   273f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   273fa:	4604      	mov	r4, r0
   273fc:	4688      	mov	r8, r1
   273fe:	4606      	mov	r6, r0
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   27400:	2500      	movs	r5, #0
   27402:	f500 5780 	add.w	r7, r0, #4096	; 0x1000
   27406:	3704      	adds	r7, #4
   27408:	683b      	ldr	r3, [r7, #0]
   2740a:	42ab      	cmp	r3, r5
   2740c:	d910      	bls.n	27430 <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpEPKc+0x3a>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
   2740e:	69b3      	ldr	r3, [r6, #24]
   27410:	2b20      	cmp	r3, #32
   27412:	d002      	beq.n	2741a <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpEPKc+0x24>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   27414:	3501      	adds	r5, #1
   27416:	3620      	adds	r6, #32
   27418:	e7f6      	b.n	27408 <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpEPKc+0x12>
          (strcmp(registration.custom_name, op) == 0)) {
   2741a:	4641      	mov	r1, r8
   2741c:	69f0      	ldr	r0, [r6, #28]
   2741e:	f7ea fb71 	bl	11b04 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
   27422:	2800      	cmp	r0, #0
   27424:	d1f6      	bne.n	27414 <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpEPKc+0x1e>
      const TfLiteRegistration& registration = registrations_[i];
   27426:	eb04 1045 	add.w	r0, r4, r5, lsl #5
   2742a:	3004      	adds	r0, #4
  }
   2742c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return nullptr;
   27430:	2000      	movs	r0, #0
   27432:	e7fb      	b.n	2742c <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpEPKc+0x36>

00027434 <_ZN6tflite8internal13ContextHelper24AllocatePersistentBufferEP13TfLiteContextjPPv>:
      ->allocator_->AllocatePersistentBuffer(bytes, ptr);
   27434:	68c3      	ldr	r3, [r0, #12]
   27436:	6818      	ldr	r0, [r3, #0]
   27438:	f7f9 bfca 	b.w	213d0 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv>

0002743c <_ZN6tflite8internal13ContextHelper27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
  ContextHelper* helper = reinterpret_cast<ContextHelper*>(ctx->impl_);
   2743c:	68c0      	ldr	r0, [r0, #12]
                                                        int* buffer_idx) {
   2743e:	4613      	mov	r3, r2
  return helper->allocator_->RequestScratchBufferInArena(
   27440:	460a      	mov	r2, r1
   27442:	6881      	ldr	r1, [r0, #8]
   27444:	6800      	ldr	r0, [r0, #0]
   27446:	f7f9 bfd9 	b.w	213fc <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi>

0002744a <_ZN6tflite8internal13ContextHelper16GetScratchBufferEP13TfLiteContexti>:
      ->allocator_->GetScratchBuffer(buffer_idx);
   2744a:	68c3      	ldr	r3, [r0, #12]
   2744c:	6818      	ldr	r0, [r3, #0]
   2744e:	f7fa b807 	b.w	21460 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi>

00027452 <_ZN6tflite8internal13ContextHelper13ReportOpErrorEP13TfLiteContextPKcz>:
                                  const char* format, ...) {
   27452:	b40e      	push	{r1, r2, r3}
   27454:	b503      	push	{r0, r1, lr}
  ContextHelper* helper = static_cast<ContextHelper*>(context->impl_);
   27456:	68c3      	ldr	r3, [r0, #12]
                                  const char* format, ...) {
   27458:	aa03      	add	r2, sp, #12
  TF_LITE_REPORT_ERROR(helper->error_reporter_, format, args);
   2745a:	6858      	ldr	r0, [r3, #4]
                                  const char* format, ...) {
   2745c:	f852 1b04 	ldr.w	r1, [r2], #4
  TF_LITE_REPORT_ERROR(helper->error_reporter_, format, args);
   27460:	6803      	ldr	r3, [r0, #0]
  va_start(args, format);
   27462:	9201      	str	r2, [sp, #4]
  TF_LITE_REPORT_ERROR(helper->error_reporter_, format, args);
   27464:	689b      	ldr	r3, [r3, #8]
   27466:	4798      	blx	r3
}
   27468:	b002      	add	sp, #8
   2746a:	f85d eb04 	ldr.w	lr, [sp], #4
   2746e:	b003      	add	sp, #12
   27470:	4770      	bx	lr

00027472 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>:
    return data_ - ReadScalar<soffset_t>(data_);
   27472:	6803      	ldr	r3, [r0, #0]
   27474:	1ac0      	subs	r0, r0, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   27476:	8803      	ldrh	r3, [r0, #0]
   27478:	428b      	cmp	r3, r1
   2747a:	bf8c      	ite	hi
   2747c:	5a40      	ldrhhi	r0, [r0, r1]
   2747e:	2000      	movls	r0, #0
  }
   27480:	4770      	bx	lr

00027482 <_ZN6tflite13ScopedProfileD1Ev>:
  ~ScopedProfile() {
   27482:	b510      	push	{r4, lr}
   27484:	4604      	mov	r4, r0
    if (profiler_) {
   27486:	6800      	ldr	r0, [r0, #0]
   27488:	b118      	cbz	r0, 27492 <_ZN6tflite13ScopedProfileD1Ev+0x10>
      profiler_->EndEvent(event_handle_);
   2748a:	6803      	ldr	r3, [r0, #0]
   2748c:	6861      	ldr	r1, [r4, #4]
   2748e:	691b      	ldr	r3, [r3, #16]
   27490:	4798      	blx	r3
  }
   27492:	4620      	mov	r0, r4
   27494:	bd10      	pop	{r4, pc}

00027496 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE>:
MicroInterpreter::MicroInterpreter(const Model* model,
   27496:	b570      	push	{r4, r5, r6, lr}
   27498:	461d      	mov	r5, r3
      context_helper_(error_reporter_, &allocator_) {
   2749a:	2300      	movs	r3, #0
MicroInterpreter::MicroInterpreter(const Model* model,
   2749c:	9e05      	ldr	r6, [sp, #20]
   2749e:	4604      	mov	r4, r0
      context_helper_(error_reporter_, &allocator_) {
   274a0:	e9c0 3100 	strd	r3, r1, [r0]
   274a4:	e9c0 2602 	strd	r2, r6, [r0, #8]
   274a8:	4619      	mov	r1, r3
   274aa:	2250      	movs	r2, #80	; 0x50
   274ac:	3010      	adds	r0, #16
   274ae:	f009 fcce 	bl	30e4e <memset>
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
   274b2:	4632      	mov	r2, r6
   274b4:	9904      	ldr	r1, [sp, #16]
   274b6:	4628      	mov	r0, r5
   274b8:	f7f9 ff6e 	bl	21398 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>
      context_helper_(error_reporter_, &allocator_) {
   274bc:	f44f 7380 	mov.w	r3, #256	; 0x100
   274c0:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
   274c4:	68e3      	ldr	r3, [r4, #12]
   274c6:	6620      	str	r0, [r4, #96]	; 0x60
      : allocator_(allocator), error_reporter_(error_reporter) {}
   274c8:	e9c4 031b 	strd	r0, r3, [r4, #108]	; 0x6c
   274cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  Init(profiler);
   274d0:	4620      	mov	r0, r4
   274d2:	9906      	ldr	r1, [sp, #24]
   274d4:	6763      	str	r3, [r4, #116]	; 0x74
   274d6:	f7ee ffa9 	bl	1642c <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE>
}
   274da:	4620      	mov	r0, r4
   274dc:	bd70      	pop	{r4, r5, r6, pc}

000274de <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
   274de:	b510      	push	{r4, lr}
   274e0:	4604      	mov	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
   274e2:	f7ff ffc6 	bl	27472 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   274e6:	b110      	cbz	r0, 274ee <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t+0x10>
    auto p = data_ + field_offset;
   274e8:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   274ea:	5820      	ldr	r0, [r4, r0]
   274ec:	4418      	add	r0, r3
  }
   274ee:	bd10      	pop	{r4, pc}

000274f0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
   274f0:	b510      	push	{r4, lr}
   274f2:	4604      	mov	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
   274f4:	f7ff ffbd 	bl	27472 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   274f8:	b110      	cbz	r0, 27500 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x10>
    auto p = data_ + field_offset;
   274fa:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   274fc:	5820      	ldr	r0, [r4, r0]
   274fe:	4418      	add	r0, r3
  }
   27500:	bd10      	pop	{r4, pc}

00027502 <_ZN6tflite16MicroInterpreterD1Ev>:
MicroInterpreter::~MicroInterpreter() {
   27502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (node_and_registrations_ != nullptr) {
   27504:	6803      	ldr	r3, [r0, #0]
MicroInterpreter::~MicroInterpreter() {
   27506:	4604      	mov	r4, r0
  if (node_and_registrations_ != nullptr) {
   27508:	b1b3      	cbz	r3, 27538 <_ZN6tflite16MicroInterpreterD1Ev+0x36>
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
   2750a:	2500      	movs	r5, #0
      TfLiteNode* node = &(node_and_registrations_[i].node);
   2750c:	2628      	movs	r6, #40	; 0x28
        registration->free(&context_, node->user_data);
   2750e:	f100 0710 	add.w	r7, r0, #16
    return const_cast<Table *>(this)->GetPointer<P>(field);
   27512:	210a      	movs	r1, #10
   27514:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   27516:	f7ff ffeb 	bl	274f0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
   2751a:	6803      	ldr	r3, [r0, #0]
   2751c:	42ab      	cmp	r3, r5
   2751e:	d90b      	bls.n	27538 <_ZN6tflite16MicroInterpreterD1Ev+0x36>
      TfLiteNode* node = &(node_and_registrations_[i].node);
   27520:	6823      	ldr	r3, [r4, #0]
   27522:	fb06 3305 	mla	r3, r6, r5, r3
      const TfLiteRegistration* registration =
   27526:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      if (registration != nullptr && registration->free != nullptr) {
   27528:	b122      	cbz	r2, 27534 <_ZN6tflite16MicroInterpreterD1Ev+0x32>
   2752a:	6852      	ldr	r2, [r2, #4]
   2752c:	b112      	cbz	r2, 27534 <_ZN6tflite16MicroInterpreterD1Ev+0x32>
        registration->free(&context_, node->user_data);
   2752e:	4638      	mov	r0, r7
   27530:	6919      	ldr	r1, [r3, #16]
   27532:	4790      	blx	r2
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
   27534:	3501      	adds	r5, #1
   27536:	e7ec      	b.n	27512 <_ZN6tflite16MicroInterpreterD1Ev+0x10>
}
   27538:	4620      	mov	r0, r4
   2753a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002753c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
   2753c:	b530      	push	{r4, r5, lr}
   2753e:	4603      	mov	r3, r0
  char* current = main;
   27540:	4604      	mov	r4, r0
   27542:	4620      	mov	r0, r4
  while (*current != 0) {
   27544:	f814 5b01 	ldrb.w	r5, [r4], #1
   27548:	2d00      	cmp	r5, #0
   2754a:	d1fa      	bne.n	27542 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x6>
  char* current_end = main + (main_max_length - 1);
   2754c:	3901      	subs	r1, #1
   2754e:	440b      	add	r3, r1
   27550:	3a01      	subs	r2, #1
  while ((*to_append != 0) && (current < current_end)) {
   27552:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   27556:	b121      	cbz	r1, 27562 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x26>
   27558:	4298      	cmp	r0, r3
   2755a:	d202      	bcs.n	27562 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x26>
    *current = *to_append;
   2755c:	f800 1b01 	strb.w	r1, [r0], #1
  while ((*to_append != 0) && (current < current_end)) {
   27560:	e7f7      	b.n	27552 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x16>
  *current = 0;
   27562:	2300      	movs	r3, #0
   27564:	7003      	strb	r3, [r0, #0]
}
   27566:	bd30      	pop	{r4, r5, pc}

00027568 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>:
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
   27568:	b570      	push	{r4, r5, r6, lr}
   2756a:	460c      	mov	r4, r1
    int32_t digit = i % base;
   2756c:	fbb0 f6f2 	udiv	r6, r0, r2
   27570:	fb02 0516 	mls	r5, r2, r6, r0
    if (digit < 10) {
   27574:	b26b      	sxtb	r3, r5
   27576:	2d09      	cmp	r5, #9
    *buffer++ = character;
   27578:	4625      	mov	r5, r4
      character = '0' + digit;
   2757a:	bf94      	ite	ls
   2757c:	3330      	addls	r3, #48	; 0x30
      character = 'a' + (digit - 10);
   2757e:	3357      	addhi	r3, #87	; 0x57
   27580:	b2db      	uxtb	r3, r3
  } while (i > 0);
   27582:	4282      	cmp	r2, r0
    *buffer++ = character;
   27584:	f805 3b01 	strb.w	r3, [r5], #1
  } while (i > 0);
   27588:	d90a      	bls.n	275a0 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x38>
  *buffer = 0;
   2758a:	2300      	movs	r3, #0
   2758c:	702b      	strb	r3, [r5, #0]
  while (p1 < p2) {
   2758e:	42a1      	cmp	r1, r4
   27590:	d209      	bcs.n	275a6 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x3e>
    char tmp = *p1;
   27592:	780b      	ldrb	r3, [r1, #0]
    *p1++ = *p2;
   27594:	7822      	ldrb	r2, [r4, #0]
   27596:	f801 2b01 	strb.w	r2, [r1], #1
    *p2-- = tmp;
   2759a:	f804 3901 	strb.w	r3, [r4], #-1
  while (p1 < p2) {
   2759e:	e7f6      	b.n	2758e <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x26>
   275a0:	462c      	mov	r4, r5
    i /= base;
   275a2:	4630      	mov	r0, r6
   275a4:	e7e2      	b.n	2756c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x4>
}
   275a6:	4628      	mov	r0, r5
   275a8:	bd70      	pop	{r4, r5, r6, pc}

000275aa <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode>:
}
   275aa:	2000      	movs	r0, #0
   275ac:	4770      	bx	lr

000275ae <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode>:
   275ae:	2000      	movs	r0, #0
   275b0:	4770      	bx	lr

000275b2 <_ZN6tflite12RuntimeShapeD1Ev>:
    if (size_ > kMaxSmallSize) {
   275b2:	6803      	ldr	r3, [r0, #0]
  ~RuntimeShape() {
   275b4:	b510      	push	{r4, lr}
    if (size_ > kMaxSmallSize) {
   275b6:	2b05      	cmp	r3, #5
  ~RuntimeShape() {
   275b8:	4604      	mov	r4, r0
    if (size_ > kMaxSmallSize) {
   275ba:	dd03      	ble.n	275c4 <_ZN6tflite12RuntimeShapeD1Ev+0x12>
      delete[] dims_pointer_;
   275bc:	6840      	ldr	r0, [r0, #4]
   275be:	b108      	cbz	r0, 275c4 <_ZN6tflite12RuntimeShapeD1Ev+0x12>
   275c0:	f008 ffd4 	bl	3056c <_ZdaPv>
  }
   275c4:	4620      	mov	r0, r4
   275c6:	bd10      	pop	{r4, pc}

000275c8 <_ZNK6tflite12RuntimeShape4DimsEi>:
    TFLITE_DCHECK_GE(i, 0);
   275c8:	2900      	cmp	r1, #0
  inline int32 Dims(int i) const {
   275ca:	b508      	push	{r3, lr}
    TFLITE_DCHECK_GE(i, 0);
   275cc:	da01      	bge.n	275d2 <_ZNK6tflite12RuntimeShape4DimsEi+0xa>
   275ce:	f009 fbf4 	bl	30dba <abort>
    TFLITE_DCHECK_LT(i, size_);
   275d2:	6803      	ldr	r3, [r0, #0]
   275d4:	428b      	cmp	r3, r1
   275d6:	ddfa      	ble.n	275ce <_ZNK6tflite12RuntimeShape4DimsEi+0x6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   275d8:	2b05      	cmp	r3, #5
   275da:	bfcb      	itete	gt
   275dc:	6843      	ldrgt	r3, [r0, #4]
   275de:	eb00 0081 	addle.w	r0, r0, r1, lsl #2
   275e2:	f853 0021 	ldrgt.w	r0, [r3, r1, lsl #2]
   275e6:	6840      	ldrle	r0, [r0, #4]
  }
   275e8:	bd08      	pop	{r3, pc}

000275ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>:
                            const RuntimeShape& check_shape_0) {
   275ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   275ee:	680b      	ldr	r3, [r1, #0]
   275f0:	6806      	ldr	r6, [r0, #0]
                            const RuntimeShape& check_shape_0) {
   275f2:	4604      	mov	r4, r0
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   275f4:	429e      	cmp	r6, r3
                            const RuntimeShape& check_shape_0) {
   275f6:	460f      	mov	r7, r1
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   275f8:	d001      	beq.n	275fe <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x14>
   275fa:	f009 fbde 	bl	30dba <abort>
  for (int i = 0; i < dims_count; ++i) {
   275fe:	2500      	movs	r5, #0
   27600:	42b5      	cmp	r5, r6
   27602:	da0c      	bge.n	2761e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x34>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   27604:	4629      	mov	r1, r5
   27606:	4620      	mov	r0, r4
   27608:	f7ff ffde 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2760c:	4629      	mov	r1, r5
   2760e:	4680      	mov	r8, r0
   27610:	4638      	mov	r0, r7
   27612:	f7ff ffd9 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   27616:	4580      	cmp	r8, r0
   27618:	d1ef      	bne.n	275fa <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x10>
  for (int i = 0; i < dims_count; ++i) {
   2761a:	3501      	adds	r5, #1
   2761c:	e7f0      	b.n	27600 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x16>
    for (int i = 0; i < size_; i++) {
   2761e:	2300      	movs	r3, #0
    int buffer_size = 1;
   27620:	2001      	movs	r0, #1
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   27622:	2e05      	cmp	r6, #5
   27624:	bfcc      	ite	gt
   27626:	6864      	ldrgt	r4, [r4, #4]
   27628:	3404      	addle	r4, #4
    for (int i = 0; i < size_; i++) {
   2762a:	429e      	cmp	r6, r3
   2762c:	dd04      	ble.n	27638 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x4e>
      buffer_size *= dims_data[i];
   2762e:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   27632:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   27634:	4350      	muls	r0, r2
    for (int i = 0; i < size_; i++) {
   27636:	e7f8      	b.n	2762a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x40>
}
   27638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
   2763c:	b570      	push	{r4, r5, r6, lr}
   2763e:	4604      	mov	r4, r0
  if (tensor == nullptr) {
   27640:	b911      	cbnz	r1, 27648 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0xc>
  RuntimeShape() : size_(0) {}
   27642:	6001      	str	r1, [r0, #0]

  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
   27644:	4620      	mov	r0, r4
   27646:	bd70      	pop	{r4, r5, r6, pc}
  const int dims_size = dims->size;
   27648:	688d      	ldr	r5, [r1, #8]
   2764a:	f855 3b04 	ldr.w	r3, [r5], #4
    if (dimensions_count > kMaxSmallSize) {
   2764e:	2b05      	cmp	r3, #5
    size_ = dimensions_count;
   27650:	6003      	str	r3, [r0, #0]
    if (dimensions_count > kMaxSmallSize) {
   27652:	ea4f 0683 	mov.w	r6, r3, lsl #2
   27656:	dc05      	bgt.n	27664 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x28>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   27658:	1d20      	adds	r0, r4, #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
   2765a:	4632      	mov	r2, r6
   2765c:	4629      	mov	r1, r5
   2765e:	f009 fbcf 	bl	30e00 <memcpy>
  }
   27662:	e7ef      	b.n	27644 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x8>
      dims_pointer_ = new int32[dimensions_count];
   27664:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
   27668:	4283      	cmp	r3, r0
   2766a:	bfb4      	ite	lt
   2766c:	4630      	movlt	r0, r6
   2766e:	f04f 30ff 	movge.w	r0, #4294967295	; 0xffffffff
   27672:	f008 ff8a 	bl	3058a <_Znaj>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   27676:	6823      	ldr	r3, [r4, #0]
      dims_pointer_ = new int32[dimensions_count];
   27678:	6060      	str	r0, [r4, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   2767a:	2b05      	cmp	r3, #5
   2767c:	dced      	bgt.n	2765a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x1e>
   2767e:	e7eb      	b.n	27658 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x1c>

00027680 <_ZN6tflite12RuntimeShape6SetDimEii>:
    TFLITE_DCHECK_GE(i, 0);
   27680:	2900      	cmp	r1, #0
  inline void SetDim(int i, int32 val) {
   27682:	b508      	push	{r3, lr}
    TFLITE_DCHECK_GE(i, 0);
   27684:	da01      	bge.n	2768a <_ZN6tflite12RuntimeShape6SetDimEii+0xa>
   27686:	f009 fb98 	bl	30dba <abort>
    TFLITE_DCHECK_LT(i, size_);
   2768a:	6803      	ldr	r3, [r0, #0]
   2768c:	428b      	cmp	r3, r1
   2768e:	ddfa      	ble.n	27686 <_ZN6tflite12RuntimeShape6SetDimEii+0x6>
    if (size_ > kMaxSmallSize) {
   27690:	2b05      	cmp	r3, #5
      dims_pointer_[i] = val;
   27692:	bfcb      	itete	gt
   27694:	6843      	ldrgt	r3, [r0, #4]
      dims_[i] = val;
   27696:	eb00 0081 	addle.w	r0, r0, r1, lsl #2
      dims_pointer_[i] = val;
   2769a:	f843 2021 	strgt.w	r2, [r3, r1, lsl #2]
      dims_[i] = val;
   2769e:	6042      	strle	r2, [r0, #4]
  }
   276a0:	bd08      	pop	{r3, pc}

000276a2 <_ZN6tflite12RuntimeShape6ResizeEi>:
  inline void Resize(int dimensions_count) {
   276a2:	b538      	push	{r3, r4, r5, lr}
    if (size_ > kMaxSmallSize) {
   276a4:	6803      	ldr	r3, [r0, #0]
  inline void Resize(int dimensions_count) {
   276a6:	4605      	mov	r5, r0
    if (size_ > kMaxSmallSize) {
   276a8:	2b05      	cmp	r3, #5
  inline void Resize(int dimensions_count) {
   276aa:	460c      	mov	r4, r1
    if (size_ > kMaxSmallSize) {
   276ac:	dd03      	ble.n	276b6 <_ZN6tflite12RuntimeShape6ResizeEi+0x14>
      delete[] dims_pointer_;
   276ae:	6840      	ldr	r0, [r0, #4]
   276b0:	b108      	cbz	r0, 276b6 <_ZN6tflite12RuntimeShape6ResizeEi+0x14>
   276b2:	f008 ff5b 	bl	3056c <_ZdaPv>
    if (dimensions_count > kMaxSmallSize) {
   276b6:	2c05      	cmp	r4, #5
    size_ = dimensions_count;
   276b8:	602c      	str	r4, [r5, #0]
    if (dimensions_count > kMaxSmallSize) {
   276ba:	dd09      	ble.n	276d0 <_ZN6tflite12RuntimeShape6ResizeEi+0x2e>
      dims_pointer_ = new int32[dimensions_count];
   276bc:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   276c0:	429c      	cmp	r4, r3
   276c2:	bfac      	ite	ge
   276c4:	f04f 30ff 	movge.w	r0, #4294967295	; 0xffffffff
   276c8:	00a0      	lsllt	r0, r4, #2
   276ca:	f008 ff5e 	bl	3058a <_Znaj>
   276ce:	6068      	str	r0, [r5, #4]
  }
   276d0:	bd38      	pop	{r3, r4, r5, pc}

000276d2 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   276d2:	6801      	ldr	r1, [r0, #0]
    for (int i = 0; i < size_; i++) {
   276d4:	2200      	movs	r2, #0
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   276d6:	2905      	cmp	r1, #5
   276d8:	bfcc      	ite	gt
   276da:	6843      	ldrgt	r3, [r0, #4]
   276dc:	1d03      	addle	r3, r0, #4
    int buffer_size = 1;
   276de:	2001      	movs	r0, #1
  inline int FlatSize() const {
   276e0:	b510      	push	{r4, lr}
    for (int i = 0; i < size_; i++) {
   276e2:	428a      	cmp	r2, r1
   276e4:	da04      	bge.n	276f0 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x1e>
      buffer_size *= dims_data[i];
   276e6:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    for (int i = 0; i < size_; i++) {
   276ea:	3201      	adds	r2, #1
      buffer_size *= dims_data[i];
   276ec:	4360      	muls	r0, r4
    for (int i = 0; i < size_; i++) {
   276ee:	e7f8      	b.n	276e2 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x10>
  }
   276f0:	bd10      	pop	{r4, pc}

000276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>:
  RuntimeShape(int new_shape_size, const RuntimeShape& shape, int pad_value)
   276f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      : size_(0) {
   276f6:	2700      	movs	r7, #0
  RuntimeShape(int new_shape_size, const RuntimeShape& shape, int pad_value)
   276f8:	4698      	mov	r8, r3
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   276fa:	6813      	ldr	r3, [r2, #0]
  RuntimeShape(int new_shape_size, const RuntimeShape& shape, int pad_value)
   276fc:	4605      	mov	r5, r0
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   276fe:	4299      	cmp	r1, r3
  RuntimeShape(int new_shape_size, const RuntimeShape& shape, int pad_value)
   27700:	460e      	mov	r6, r1
   27702:	4614      	mov	r4, r2
      : size_(0) {
   27704:	6007      	str	r7, [r0, #0]
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   27706:	da01      	bge.n	2770c <_ZN6tflite12RuntimeShapeC1EiRKS0_i+0x1a>
   27708:	f009 fb57 	bl	30dba <abort>
    Resize(new_shape_size);
   2770c:	f7ff ffc9 	bl	276a2 <_ZN6tflite12RuntimeShape6ResizeEi>
    const int size_increase = new_shape_size - shape.DimensionsCount();
   27710:	6820      	ldr	r0, [r4, #0]
   27712:	1a36      	subs	r6, r6, r0
    for (int i = 0; i < size_increase; ++i) {
   27714:	42b7      	cmp	r7, r6
   27716:	da06      	bge.n	27726 <_ZN6tflite12RuntimeShapeC1EiRKS0_i+0x34>
      SetDim(i, pad_value);
   27718:	4639      	mov	r1, r7
   2771a:	4642      	mov	r2, r8
   2771c:	4628      	mov	r0, r5
   2771e:	f7ff ffaf 	bl	27680 <_ZN6tflite12RuntimeShape6SetDimEii>
    for (int i = 0; i < size_increase; ++i) {
   27722:	3701      	adds	r7, #1
   27724:	e7f6      	b.n	27714 <_ZN6tflite12RuntimeShapeC1EiRKS0_i+0x22>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   27726:	682b      	ldr	r3, [r5, #0]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   27728:	6822      	ldr	r2, [r4, #0]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   2772a:	2b05      	cmp	r3, #5
   2772c:	bfcc      	ite	gt
   2772e:	6868      	ldrgt	r0, [r5, #4]
   27730:	1d28      	addle	r0, r5, #4
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   27732:	2a05      	cmp	r2, #5
   27734:	bfc8      	it	gt
   27736:	6861      	ldrgt	r1, [r4, #4]
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   27738:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   2773c:	bfd8      	it	le
   2773e:	1d21      	addle	r1, r4, #4
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   27740:	0092      	lsls	r2, r2, #2
   27742:	f009 fb5d 	bl	30e00 <memcpy>
  }
   27746:	4628      	mov	r0, r5
   27748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
   2774c:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   2774e:	6804      	ldr	r4, [r0, #0]
inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
   27750:	9d04      	ldr	r5, [sp, #16]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   27752:	2c04      	cmp	r4, #4
   27754:	d001      	beq.n	2775a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xe>
   27756:	f009 fb30 	bl	30dba <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   2775a:	2900      	cmp	r1, #0
   2775c:	dbfb      	blt.n	27756 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   2775e:	6844      	ldr	r4, [r0, #4]
   27760:	428c      	cmp	r4, r1
   27762:	ddf8      	ble.n	27756 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   27764:	2a00      	cmp	r2, #0
   27766:	dbf6      	blt.n	27756 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   27768:	6884      	ldr	r4, [r0, #8]
   2776a:	4294      	cmp	r4, r2
   2776c:	ddf3      	ble.n	27756 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   2776e:	2b00      	cmp	r3, #0
   27770:	dbf1      	blt.n	27756 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   27772:	68c6      	ldr	r6, [r0, #12]
   27774:	429e      	cmp	r6, r3
   27776:	ddee      	ble.n	27756 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   27778:	2d00      	cmp	r5, #0
   2777a:	dbec      	blt.n	27756 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   2777c:	6900      	ldr	r0, [r0, #16]
   2777e:	42a8      	cmp	r0, r5
   27780:	dde9      	ble.n	27756 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   27782:	fb01 2204 	mla	r2, r1, r4, r2
   27786:	fb06 3302 	mla	r3, r6, r2, r3
}
   2778a:	fb00 5003 	mla	r0, r0, r3, r5
   2778e:	bd70      	pop	{r4, r5, r6, pc}

00027790 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>:
                                const RuntimeShape& check_shape_1) {
   27790:	b570      	push	{r4, r5, r6, lr}
   27792:	460d      	mov	r5, r1
   27794:	4616      	mov	r6, r2
  const int size_1 = shape.FlatSize();
   27796:	f7ff ff9c 	bl	276d2 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   2779a:	4604      	mov	r4, r0
  const int size_2 = check_shape_0.FlatSize();
   2779c:	4628      	mov	r0, r5
   2779e:	f7ff ff98 	bl	276d2 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   277a2:	4605      	mov	r5, r0
  const int size_3 = check_shape_1.FlatSize();
   277a4:	4630      	mov	r0, r6
   277a6:	f7ff ff94 	bl	276d2 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
  TFLITE_CHECK_EQ(size_1, size_2);
   277aa:	42ac      	cmp	r4, r5
   277ac:	d001      	beq.n	277b2 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_+0x22>
   277ae:	f009 fb04 	bl	30dba <abort>
  TFLITE_CHECK_EQ(size_2, size_3);
   277b2:	4284      	cmp	r4, r0
   277b4:	d1fb      	bne.n	277ae <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_+0x1e>
}
   277b6:	bd70      	pop	{r4, r5, r6, pc}

000277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>:
                            int i3) {
   277b8:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   277ba:	2900      	cmp	r1, #0
                            int i3) {
   277bc:	9d04      	ldr	r5, [sp, #16]
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   277be:	db02      	blt.n	277c6 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
   277c0:	6804      	ldr	r4, [r0, #0]
   277c2:	428c      	cmp	r4, r1
   277c4:	dc01      	bgt.n	277ca <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0x12>
   277c6:	f009 faf8 	bl	30dba <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
   277ca:	2a00      	cmp	r2, #0
   277cc:	dbfb      	blt.n	277c6 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
   277ce:	6844      	ldr	r4, [r0, #4]
   277d0:	4294      	cmp	r4, r2
   277d2:	ddf8      	ble.n	277c6 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
   277d4:	2b00      	cmp	r3, #0
   277d6:	dbf6      	blt.n	277c6 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
   277d8:	6884      	ldr	r4, [r0, #8]
   277da:	429c      	cmp	r4, r3
   277dc:	ddf3      	ble.n	277c6 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
   277de:	2d00      	cmp	r5, #0
   277e0:	dbf1      	blt.n	277c6 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
   277e2:	68c4      	ldr	r4, [r0, #12]
   277e4:	42ac      	cmp	r4, r5
   277e6:	ddee      	ble.n	277c6 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
         i3 * desc.strides[3];
   277e8:	69c4      	ldr	r4, [r0, #28]
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
   277ea:	6946      	ldr	r6, [r0, #20]
         i3 * desc.strides[3];
   277ec:	436c      	muls	r4, r5
   277ee:	fb06 4202 	mla	r2, r6, r2, r4
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
   277f2:	6984      	ldr	r4, [r0, #24]
   277f4:	6900      	ldr	r0, [r0, #16]
         i3 * desc.strides[3];
   277f6:	fb04 2303 	mla	r3, r4, r3, r2
}
   277fa:	fb00 3001 	mla	r0, r0, r1, r3
   277fe:	bd70      	pop	{r4, r5, r6, pc}

00027800 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>:
}

inline void Add(const ArithmeticParams& params,
                const RuntimeShape& input1_shape, const uint8* input1_data,
                const RuntimeShape& input2_shape, const uint8* input2_data,
                const RuntimeShape& output_shape, uint8* output_data) {
   27800:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27804:	4604      	mov	r4, r0
   27806:	4690      	mov	r8, r2
   27808:	4608      	mov	r0, r1
   2780a:	4619      	mov	r1, r3
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   2780c:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	; 0x2c
   27810:	429a      	cmp	r2, r3
                const RuntimeShape& output_shape, uint8* output_data) {
   27812:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   27814:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   27816:	dd01      	ble.n	2781c <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x1c>
   27818:	f009 facf 	bl	30dba <abort>
                   params.quantized_activation_max);
  const int flat_size =
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
   2781c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2781e:	f7ff ffb7 	bl	27790 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>

  TFLITE_DCHECK_GT(params.input1_offset, -256);
   27822:	6862      	ldr	r2, [r4, #4]
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
   27824:	4681      	mov	r9, r0
  TFLITE_DCHECK_GT(params.input1_offset, -256);
   27826:	f112 0fff 	cmn.w	r2, #255	; 0xff
   2782a:	dbf5      	blt.n	27818 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x18>
  TFLITE_DCHECK_GT(params.input2_offset, -256);
  TFLITE_DCHECK_LT(params.input1_offset, 256);
   2782c:	2aff      	cmp	r2, #255	; 0xff
  TFLITE_DCHECK_GT(params.input2_offset, -256);
   2782e:	68a3      	ldr	r3, [r4, #8]
  TFLITE_DCHECK_LT(params.input1_offset, 256);
   27830:	dcf2      	bgt.n	27818 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x18>
  TFLITE_DCHECK_LT(params.input2_offset, 256);
   27832:	33ff      	adds	r3, #255	; 0xff
   27834:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
   27838:	d8ee      	bhi.n	27818 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x18>
  for (int i = 0; i < size; ++i) {
   2783a:	2700      	movs	r7, #0
   2783c:	45b9      	cmp	r9, r7
   2783e:	dd28      	ble.n	27892 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x92>
    const int32 input2_val = params.input2_offset + input2_data[i];
   27840:	f816 a007 	ldrb.w	sl, [r6, r7]
   27844:	68a3      	ldr	r3, [r4, #8]
    const int32 input1_val = params.input1_offset + input1_data[i];
   27846:	6862      	ldr	r2, [r4, #4]
    const int32 input2_val = params.input2_offset + input2_data[i];
   27848:	449a      	add	sl, r3
    const int32 input1_val = params.input1_offset + input1_data[i];
   2784a:	f818 3007 	ldrb.w	r3, [r8, r7]
    const int32 shifted_input1_val = input1_val * (1 << params.left_shift);
   2784e:	69a0      	ldr	r0, [r4, #24]
    const int32 input1_val = params.input1_offset + input1_data[i];
   27850:	4413      	add	r3, r2
    const int32 shifted_input2_val = input2_val * (1 << params.left_shift);
   27852:	fa0a fa00 	lsl.w	sl, sl, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   27856:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
   2785a:	fa03 f000 	lsl.w	r0, r3, r0
   2785e:	f7ef f9c1 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   27862:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   27866:	4683      	mov	fp, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   27868:	4650      	mov	r0, sl
   2786a:	f7ef f9bb 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2786e:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   27872:	4458      	add	r0, fp
   27874:	f7ef f9b6 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
            raw_sum, params.output_multiplier, params.output_shift) +
   27878:	68e3      	ldr	r3, [r4, #12]
   2787a:	4403      	add	r3, r0
    output_data[i] = static_cast<uint8>(clamped_output);
   2787c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2787e:	4283      	cmp	r3, r0
   27880:	bfb8      	it	lt
   27882:	4603      	movlt	r3, r0
   27884:	6b20      	ldr	r0, [r4, #48]	; 0x30
   27886:	4283      	cmp	r3, r0
   27888:	bfa8      	it	ge
   2788a:	4603      	movge	r3, r0
   2788c:	55eb      	strb	r3, [r5, r7]
  for (int i = 0; i < size; ++i) {
   2788e:	3701      	adds	r7, #1
   27890:	e7d4      	b.n	2783c <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x3c>
  AddElementwise(flat_size, params, input1_data, input2_data, output_data);
}
   27892:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00027896 <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>:
}

inline void Add(const ArithmeticParams& params,
                const RuntimeShape& input1_shape, const int8_t* input1_data,
                const RuntimeShape& input2_shape, const int8_t* input2_data,
                const RuntimeShape& output_shape, int8_t* output_data) {
   27896:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2789a:	4604      	mov	r4, r0
   2789c:	4690      	mov	r8, r2
   2789e:	4608      	mov	r0, r1
   278a0:	4619      	mov	r1, r3
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   278a2:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	; 0x2c
   278a6:	429a      	cmp	r2, r3
                const RuntimeShape& output_shape, int8_t* output_data) {
   278a8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   278aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   278ac:	dd01      	ble.n	278b2 <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x1c>
   278ae:	f009 fa84 	bl	30dba <abort>
                   params.quantized_activation_max);
  const int flat_size =
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
   278b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   278b4:	f7ff ff6c 	bl	27790 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>

  const int32_t int8_max_value = std::numeric_limits<int8_t>::max();
  TFLITE_DCHECK_GE(params.input1_offset, -1 * int8_max_value);
   278b8:	6862      	ldr	r2, [r4, #4]
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
   278ba:	4681      	mov	r9, r0
  TFLITE_DCHECK_GE(params.input1_offset, -1 * int8_max_value);
   278bc:	f112 0f7f 	cmn.w	r2, #127	; 0x7f
   278c0:	dbf5      	blt.n	278ae <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x18>
  TFLITE_DCHECK_GE(params.input2_offset, -1 * int8_max_value);
  TFLITE_DCHECK_LE(params.input1_offset, int8_max_value);
   278c2:	2a7f      	cmp	r2, #127	; 0x7f
  TFLITE_DCHECK_GE(params.input2_offset, -1 * int8_max_value);
   278c4:	68a3      	ldr	r3, [r4, #8]
  TFLITE_DCHECK_LE(params.input1_offset, int8_max_value);
   278c6:	dcf2      	bgt.n	278ae <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x18>
  TFLITE_DCHECK_LE(params.input2_offset, int8_max_value);
   278c8:	337f      	adds	r3, #127	; 0x7f
   278ca:	2bfe      	cmp	r3, #254	; 0xfe
   278cc:	d8ef      	bhi.n	278ae <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x18>
  for (int i = 0; i < size; ++i) {
   278ce:	2700      	movs	r7, #0
   278d0:	45b9      	cmp	r9, r7
   278d2:	dd28      	ble.n	27926 <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x90>
    const int32 input2_val = params.input2_offset + input2_data[i];
   278d4:	f916 a007 	ldrsb.w	sl, [r6, r7]
   278d8:	68a3      	ldr	r3, [r4, #8]
    const int32 input1_val = params.input1_offset + input1_data[i];
   278da:	6862      	ldr	r2, [r4, #4]
    const int32 input2_val = params.input2_offset + input2_data[i];
   278dc:	449a      	add	sl, r3
    const int32 input1_val = params.input1_offset + input1_data[i];
   278de:	f918 3007 	ldrsb.w	r3, [r8, r7]
    const int32 shifted_input1_val = input1_val * (1 << params.left_shift);
   278e2:	69a0      	ldr	r0, [r4, #24]
    const int32 input1_val = params.input1_offset + input1_data[i];
   278e4:	4413      	add	r3, r2
    const int32 shifted_input2_val = input2_val * (1 << params.left_shift);
   278e6:	fa0a fa00 	lsl.w	sl, sl, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   278ea:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
   278ee:	fa03 f000 	lsl.w	r0, r3, r0
   278f2:	f7ef f977 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   278f6:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   278fa:	4683      	mov	fp, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   278fc:	4650      	mov	r0, sl
   278fe:	f7ef f971 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   27902:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   27906:	4458      	add	r0, fp
   27908:	f7ef f96c 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
            raw_sum, params.output_multiplier, params.output_shift) +
   2790c:	68e3      	ldr	r3, [r4, #12]
   2790e:	4403      	add	r3, r0
    output_data[i] = static_cast<int8_t>(clamped_output);
   27910:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   27912:	4283      	cmp	r3, r0
   27914:	bfb8      	it	lt
   27916:	4603      	movlt	r3, r0
   27918:	6b20      	ldr	r0, [r4, #48]	; 0x30
   2791a:	4283      	cmp	r3, r0
   2791c:	bfa8      	it	ge
   2791e:	4603      	movge	r3, r0
   27920:	55eb      	strb	r3, [r5, r7]
  for (int i = 0; i < size; ++i) {
   27922:	3701      	adds	r7, #1
   27924:	e7d4      	b.n	278d0 <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x3a>
  AddElementwise(flat_size, params, input1_data, input2_data, output_data);
}
   27926:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002792a <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>:
//
// Returns true iff there is some sort of broadcast, which includes five-fold
// patterns and falling back to generic broadcast.
inline bool ProcessBroadcastShapes(const RuntimeShape& shape0,
                                   const RuntimeShape& shape1,
                                   tflite::ArithmeticParams* params) {
   2792a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2792e:	680b      	ldr	r3, [r1, #0]
   27930:	6804      	ldr	r4, [r0, #0]
  RuntimeShape(int shape_size, int32 value) : size_(0) {
   27932:	2600      	movs	r6, #0
   27934:	429c      	cmp	r4, r3
   27936:	bfb8      	it	lt
   27938:	461c      	movlt	r4, r3
  const int dims_count =
      std::max(shape0.DimensionsCount(), shape1.DimensionsCount());

  params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
   2793a:	2304      	movs	r3, #4
                                   tflite::ArithmeticParams* params) {
   2793c:	b092      	sub	sp, #72	; 0x48
   2793e:	4680      	mov	r8, r0
   27940:	460f      	mov	r7, r1
    Resize(shape_size);
   27942:	4668      	mov	r0, sp
   27944:	4621      	mov	r1, r4
  params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
   27946:	7013      	strb	r3, [r2, #0]
                                   tflite::ArithmeticParams* params) {
   27948:	4615      	mov	r5, r2
  RuntimeShape(int shape_size, int32 value) : size_(0) {
   2794a:	9600      	str	r6, [sp, #0]
    Resize(shape_size);
   2794c:	f7ff fea9 	bl	276a2 <_ZN6tflite12RuntimeShape6ResizeEi>
    for (int i = 0; i < shape_size; ++i) {
   27950:	42a6      	cmp	r6, r4
   27952:	da06      	bge.n	27962 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x38>
      SetDim(i, value);
   27954:	4631      	mov	r1, r6
   27956:	2201      	movs	r2, #1
   27958:	4668      	mov	r0, sp
   2795a:	f7ff fe91 	bl	27680 <_ZN6tflite12RuntimeShape6SetDimEii>
    for (int i = 0; i < shape_size; ++i) {
   2795e:	3601      	adds	r6, #1
   27960:	e7f6      	b.n	27950 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x26>
    return RuntimeShape(new_shape_size, shape, 1);
   27962:	2301      	movs	r3, #1
   27964:	4642      	mov	r2, r8
   27966:	4621      	mov	r1, r4
   27968:	a806      	add	r0, sp, #24
   2796a:	f7ff fec2 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2796e:	2301      	movs	r3, #1
   27970:	463a      	mov	r2, r7
   27972:	4621      	mov	r1, r4
   27974:	a80c      	add	r0, sp, #48	; 0x30
   27976:	f7ff febc 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
    return this->size_ == comp.size_ &&
   2797a:	9a06      	ldr	r2, [sp, #24]
   2797c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2797e:	429a      	cmp	r2, r3
   27980:	d11b      	bne.n	279ba <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x90>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   27982:	2a05      	cmp	r2, #5
   27984:	bfcc      	ite	gt
   27986:	9807      	ldrgt	r0, [sp, #28]
   27988:	a807      	addle	r0, sp, #28
   2798a:	2b05      	cmp	r3, #5
   2798c:	bfcc      	ite	gt
   2798e:	990d      	ldrgt	r1, [sp, #52]	; 0x34
   27990:	a90d      	addle	r1, sp, #52	; 0x34
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32)) == 0;
   27992:	0092      	lsls	r2, r2, #2
   27994:	f009 fa26 	bl	30de4 <memcmp>
    return this->size_ == comp.size_ &&
   27998:	b978      	cbnz	r0, 279ba <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x90>
  auto extended_shape0 = RuntimeShape::ExtendedShape(dims_count, shape0);
  auto extended_shape1 = RuntimeShape::ExtendedShape(dims_count, shape1);

  // Check for "exact" match, implicitly accepting any scalar shapes.
  if (extended_shape0 == extended_shape1) {
    params->broadcast_category = BroadcastableOpCategory::kNonBroadcast;
   2799a:	2301      	movs	r3, #1
    return false;
   2799c:	4604      	mov	r4, r0
    params->broadcast_category = BroadcastableOpCategory::kNonBroadcast;
   2799e:	702b      	strb	r3, [r5, #0]
  auto extended_shape1 = RuntimeShape::ExtendedShape(dims_count, shape1);
   279a0:	a80c      	add	r0, sp, #48	; 0x30
   279a2:	f7ff fe06 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  auto extended_shape0 = RuntimeShape::ExtendedShape(dims_count, shape0);
   279a6:	a806      	add	r0, sp, #24
   279a8:	f7ff fe03 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape scalar_shape(dims_count, 1);
   279ac:	4668      	mov	r0, sp
   279ae:	f7ff fe00 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  // loop.
  if (i >= 0) {
    params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
  }
  return true;
}
   279b2:	4620      	mov	r0, r4
   279b4:	b012      	add	sp, #72	; 0x48
   279b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (int i = dims_count - 1; i >= 0; --i) {
   279ba:	3c01      	subs	r4, #1
   279bc:	4626      	mov	r6, r4
   279be:	2e00      	cmp	r6, #0
   279c0:	db10      	blt.n	279e4 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xba>
    if (extended_shape0.Dims(i) == extended_shape1.Dims(i)) {
   279c2:	4631      	mov	r1, r6
   279c4:	a806      	add	r0, sp, #24
   279c6:	f7ff fdff 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   279ca:	4631      	mov	r1, r6
   279cc:	4607      	mov	r7, r0
   279ce:	a80c      	add	r0, sp, #48	; 0x30
   279d0:	f7ff fdfa 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   279d4:	4287      	cmp	r7, r0
   279d6:	d101      	bne.n	279dc <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xb2>
  for (int i = dims_count - 1; i >= 0; --i) {
   279d8:	3e01      	subs	r6, #1
   279da:	e7f0      	b.n	279be <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x94>
    } else if (extended_shape0.Dims(i) == 1) {
   279dc:	2f01      	cmp	r7, #1
   279de:	d107      	bne.n	279f0 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xc6>
      params->broadcast_category =
   279e0:	2302      	movs	r3, #2
      params->broadcast_category =
   279e2:	702b      	strb	r3, [r5, #0]
  if (params->broadcast_category !=
   279e4:	782b      	ldrb	r3, [r5, #0]
   279e6:	1e9a      	subs	r2, r3, #2
   279e8:	2a01      	cmp	r2, #1
   279ea:	d909      	bls.n	27a00 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xd6>
    TFLITE_DCHECK(false);
   279ec:	f009 f9e5 	bl	30dba <abort>
    } else if (extended_shape1.Dims(i) == 1) {
   279f0:	2801      	cmp	r0, #1
   279f2:	d101      	bne.n	279f8 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xce>
      params->broadcast_category =
   279f4:	2303      	movs	r3, #3
   279f6:	e7f4      	b.n	279e2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xb8>
      params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
   279f8:	2304      	movs	r3, #4
   279fa:	702b      	strb	r3, [r5, #0]
  return true;
   279fc:	2401      	movs	r4, #1
   279fe:	e7cf      	b.n	279a0 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x76>
  const RuntimeShape* shape_a =
   27a00:	2b03      	cmp	r3, #3
  params->broadcast_shape[0] = 1;
   27a02:	f04f 0301 	mov.w	r3, #1
  params->broadcast_shape[1] = 1;
   27a06:	e9c5 3314 	strd	r3, r3, [r5, #80]	; 0x50
  params->broadcast_shape[3] = 1;
   27a0a:	e9c5 3316 	strd	r3, r3, [r5, #88]	; 0x58
  const RuntimeShape* shape_a =
   27a0e:	bf19      	ittee	ne
   27a10:	f10d 0818 	addne.w	r8, sp, #24
  const RuntimeShape* shape_b =
   27a14:	af0c      	addne	r7, sp, #48	; 0x30
  const RuntimeShape* shape_a =
   27a16:	f10d 0830 	addeq.w	r8, sp, #48	; 0x30
  const RuntimeShape* shape_b =
   27a1a:	af06      	addeq	r7, sp, #24
  params->broadcast_shape[4] = 1;
   27a1c:	662b      	str	r3, [r5, #96]	; 0x60
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   27a1e:	2c00      	cmp	r4, #0
   27a20:	dbec      	blt.n	279fc <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xd2>
   27a22:	4621      	mov	r1, r4
   27a24:	4640      	mov	r0, r8
   27a26:	f7ff fdcf 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   27a2a:	4621      	mov	r1, r4
   27a2c:	4606      	mov	r6, r0
   27a2e:	4638      	mov	r0, r7
   27a30:	f7ff fdca 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   27a34:	4286      	cmp	r6, r0
   27a36:	d104      	bne.n	27a42 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x118>
    params->broadcast_shape[4] *= shape_b->Dims(i);
   27a38:	6e28      	ldr	r0, [r5, #96]	; 0x60
    --i;
   27a3a:	3c01      	subs	r4, #1
    params->broadcast_shape[4] *= shape_b->Dims(i);
   27a3c:	4346      	muls	r6, r0
   27a3e:	662e      	str	r6, [r5, #96]	; 0x60
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   27a40:	e7ed      	b.n	27a1e <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xf4>
  while (i >= 0 && shape_a->Dims(i) == 1) {
   27a42:	4621      	mov	r1, r4
   27a44:	4640      	mov	r0, r8
   27a46:	f7ff fdbf 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   27a4a:	2801      	cmp	r0, #1
   27a4c:	d10a      	bne.n	27a64 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x13a>
    params->broadcast_shape[3] *= shape_b->Dims(i);
   27a4e:	4621      	mov	r1, r4
   27a50:	4638      	mov	r0, r7
   27a52:	f7ff fdb9 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   27a56:	6deb      	ldr	r3, [r5, #92]	; 0x5c
  while (i >= 0 && shape_a->Dims(i) == 1) {
   27a58:	3c01      	subs	r4, #1
    params->broadcast_shape[3] *= shape_b->Dims(i);
   27a5a:	fb00 f003 	mul.w	r0, r0, r3
   27a5e:	65e8      	str	r0, [r5, #92]	; 0x5c
  while (i >= 0 && shape_a->Dims(i) == 1) {
   27a60:	d2ef      	bcs.n	27a42 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x118>
   27a62:	e7cb      	b.n	279fc <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xd2>
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   27a64:	4621      	mov	r1, r4
   27a66:	4640      	mov	r0, r8
   27a68:	f7ff fdae 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   27a6c:	4621      	mov	r1, r4
   27a6e:	4606      	mov	r6, r0
   27a70:	4638      	mov	r0, r7
   27a72:	f7ff fda9 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   27a76:	4286      	cmp	r6, r0
   27a78:	d106      	bne.n	27a88 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x15e>
    params->broadcast_shape[2] *= shape_a->Dims(i);
   27a7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   27a7c:	3c01      	subs	r4, #1
    params->broadcast_shape[2] *= shape_a->Dims(i);
   27a7e:	fb06 f600 	mul.w	r6, r6, r0
   27a82:	65ae      	str	r6, [r5, #88]	; 0x58
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   27a84:	d2ee      	bcs.n	27a64 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x13a>
   27a86:	e7b9      	b.n	279fc <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xd2>
  while (i >= 0 && shape_b->Dims(i) == 1) {
   27a88:	4621      	mov	r1, r4
   27a8a:	4638      	mov	r0, r7
   27a8c:	f7ff fd9c 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   27a90:	2801      	cmp	r0, #1
   27a92:	d10a      	bne.n	27aaa <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x180>
    params->broadcast_shape[1] *= shape_a->Dims(i);
   27a94:	4621      	mov	r1, r4
   27a96:	4640      	mov	r0, r8
   27a98:	f7ff fd96 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   27a9c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
  while (i >= 0 && shape_b->Dims(i) == 1) {
   27a9e:	3c01      	subs	r4, #1
    params->broadcast_shape[1] *= shape_a->Dims(i);
   27aa0:	fb00 f003 	mul.w	r0, r0, r3
   27aa4:	6568      	str	r0, [r5, #84]	; 0x54
  while (i >= 0 && shape_b->Dims(i) == 1) {
   27aa6:	d2ef      	bcs.n	27a88 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x15e>
   27aa8:	e7a8      	b.n	279fc <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xd2>
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   27aaa:	4621      	mov	r1, r4
   27aac:	4640      	mov	r0, r8
   27aae:	f7ff fd8b 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   27ab2:	4621      	mov	r1, r4
   27ab4:	4606      	mov	r6, r0
   27ab6:	4638      	mov	r0, r7
   27ab8:	f7ff fd86 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   27abc:	4286      	cmp	r6, r0
   27abe:	d19b      	bne.n	279f8 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xce>
    params->broadcast_shape[0] *= shape_b->Dims(i);
   27ac0:	6d28      	ldr	r0, [r5, #80]	; 0x50
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   27ac2:	3c01      	subs	r4, #1
    params->broadcast_shape[0] *= shape_b->Dims(i);
   27ac4:	fb06 f600 	mul.w	r6, r6, r0
   27ac8:	652e      	str	r6, [r5, #80]	; 0x50
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   27aca:	d2ee      	bcs.n	27aaa <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x180>
   27acc:	e796      	b.n	279fc <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xd2>

00027ace <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>:
inline void CopyDimsToDesc(const RuntimeShape& input_shape,
   27ace:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27ad0:	4606      	mov	r6, r0
  for (int i = N - 1; i >= 0; --i) {
   27ad2:	2403      	movs	r4, #3
  int desc_stride = 1;
   27ad4:	2701      	movs	r7, #1
   27ad6:	f101 050c 	add.w	r5, r1, #12
    desc_out->extents[i] = input_shape.Dims(i);
   27ada:	4621      	mov	r1, r4
   27adc:	4630      	mov	r0, r6
   27ade:	f7ff fd73 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   27ae2:	f845 0904 	str.w	r0, [r5], #-4
    desc_stride *= input_shape.Dims(i);
   27ae6:	4621      	mov	r1, r4
    desc_out->strides[i] = desc_stride;
   27ae8:	616f      	str	r7, [r5, #20]
    desc_stride *= input_shape.Dims(i);
   27aea:	4630      	mov	r0, r6
   27aec:	f7ff fd6c 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = N - 1; i >= 0; --i) {
   27af0:	3c01      	subs	r4, #1
    desc_stride *= input_shape.Dims(i);
   27af2:	fb00 f707 	mul.w	r7, r0, r7
  for (int i = N - 1; i >= 0; --i) {
   27af6:	d2f0      	bcs.n	27ada <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE+0xc>
}
   27af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027afa <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>:
inline void NdArrayDescsForElementwiseBroadcast(
   27afa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27afe:	460c      	mov	r4, r1
   27b00:	461e      	mov	r6, r3
  TFLITE_DCHECK(desc0_out != nullptr);
   27b02:	4615      	mov	r5, r2
inline void NdArrayDescsForElementwiseBroadcast(
   27b04:	b08d      	sub	sp, #52	; 0x34
  TFLITE_DCHECK(desc0_out != nullptr);
   27b06:	b90a      	cbnz	r2, 27b0c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x12>
   27b08:	f009 f957 	bl	30dba <abort>
  TFLITE_DCHECK(desc1_out != nullptr);
   27b0c:	2b00      	cmp	r3, #0
   27b0e:	d0fb      	beq.n	27b08 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xe>
    return RuntimeShape(new_shape_size, shape, 1);
   27b10:	4602      	mov	r2, r0
   27b12:	2301      	movs	r3, #1
   27b14:	2104      	movs	r1, #4
   27b16:	4668      	mov	r0, sp
   27b18:	f7ff fdeb 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   27b1c:	4622      	mov	r2, r4
  for (int i = 0; i < N; ++i) {
   27b1e:	2400      	movs	r4, #0
   27b20:	2301      	movs	r3, #1
   27b22:	2104      	movs	r1, #4
   27b24:	a806      	add	r0, sp, #24
   27b26:	f7ff fde4 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  CopyDimsToDesc<N>(extended_input0_shape, desc0_out);
   27b2a:	4629      	mov	r1, r5
   27b2c:	4668      	mov	r0, sp
   27b2e:	f7ff ffce 	bl	27ace <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
  CopyDimsToDesc<N>(extended_input1_shape, desc1_out);
   27b32:	4631      	mov	r1, r6
   27b34:	a806      	add	r0, sp, #24
   27b36:	f7ff ffca 	bl	27ace <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
   27b3a:	f04f 0810 	mov.w	r8, #16
   27b3e:	46a1      	mov	r9, r4
    const int extent0 = extended_input0_shape.Dims(i);
   27b40:	4621      	mov	r1, r4
   27b42:	4668      	mov	r0, sp
   27b44:	f7ff fd40 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int extent1 = extended_input1_shape.Dims(i);
   27b48:	4621      	mov	r1, r4
    const int extent0 = extended_input0_shape.Dims(i);
   27b4a:	4607      	mov	r7, r0
    const int extent1 = extended_input1_shape.Dims(i);
   27b4c:	a806      	add	r0, sp, #24
   27b4e:	f7ff fd3b 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
    if (extent0 != extent1) {
   27b52:	4287      	cmp	r7, r0
   27b54:	d005      	beq.n	27b62 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x68>
      if (extent0 == 1) {
   27b56:	2f01      	cmp	r7, #1
   27b58:	d111      	bne.n	27b7e <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x84>
        desc0_out->strides[i] = 0;
   27b5a:	f845 9008 	str.w	r9, [r5, r8]
        desc0_out->extents[i] = extent1;
   27b5e:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
  for (int i = 0; i < N; ++i) {
   27b62:	3401      	adds	r4, #1
   27b64:	2c04      	cmp	r4, #4
   27b66:	f108 0804 	add.w	r8, r8, #4
   27b6a:	d1e9      	bne.n	27b40 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x46>
  auto extended_input1_shape = RuntimeShape::ExtendedShape(N, input1_shape);
   27b6c:	a806      	add	r0, sp, #24
   27b6e:	f7ff fd20 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  auto extended_input0_shape = RuntimeShape::ExtendedShape(N, input0_shape);
   27b72:	4668      	mov	r0, sp
   27b74:	f7ff fd1d 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   27b78:	b00d      	add	sp, #52	; 0x34
   27b7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        TFLITE_DCHECK_EQ(extent1, 1);
   27b7e:	2801      	cmp	r0, #1
   27b80:	d1c2      	bne.n	27b08 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xe>
        desc1_out->strides[i] = 0;
   27b82:	f846 9008 	str.w	r9, [r6, r8]
        desc1_out->extents[i] = extent0;
   27b86:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
   27b8a:	e7ea      	b.n	27b62 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x68>

00027b8c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf>:
                               const RuntimeShape& input1_shape,
                               const float* input1_data,
                               const RuntimeShape& input2_shape,
                               const float* input2_data,
                               const RuntimeShape& output_shape,
                               float* output_data) {
   27b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27b90:	ed2d 8b04 	vpush	{d8-d9}
   27b94:	b09b      	sub	sp, #108	; 0x6c
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   27b96:	af0a      	add	r7, sp, #40	; 0x28
                               float* output_data) {
   27b98:	9203      	str	r2, [sp, #12]
   27b9a:	4683      	mov	fp, r0
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   27b9c:	463a      	mov	r2, r7
                               float* output_data) {
   27b9e:	4608      	mov	r0, r1
   27ba0:	4619      	mov	r1, r3
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   27ba2:	ab12      	add	r3, sp, #72	; 0x48
   27ba4:	f7ff ffa9 	bl	27afa <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
   27ba8:	2301      	movs	r3, #1
   27baa:	2104      	movs	r1, #4
   27bac:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   27bae:	a804      	add	r0, sp, #16
   27bb0:	f7ff fd9f 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   27bb4:	2400      	movs	r4, #0
   27bb6:	2100      	movs	r1, #0
   27bb8:	a804      	add	r0, sp, #16
   27bba:	f7ff fd05 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   27bbe:	42a0      	cmp	r0, r4
   27bc0:	dd5c      	ble.n	27c7c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0xf0>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   27bc2:	2500      	movs	r5, #0
   27bc4:	f10d 0810 	add.w	r8, sp, #16
   27bc8:	2101      	movs	r1, #1
   27bca:	4640      	mov	r0, r8
   27bcc:	f7ff fcfc 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   27bd0:	42a8      	cmp	r0, r5
   27bd2:	dd51      	ble.n	27c78 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0xec>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   27bd4:	2600      	movs	r6, #0
   27bd6:	2102      	movs	r1, #2
   27bd8:	4640      	mov	r0, r8
   27bda:	f7ff fcf5 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   27bde:	42b0      	cmp	r0, r6
   27be0:	dd48      	ble.n	27c74 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0xe8>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   27be2:	f04f 0900 	mov.w	r9, #0
   27be6:	2103      	movs	r1, #3
   27be8:	4640      	mov	r0, r8
   27bea:	f7ff fced 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   27bee:	4548      	cmp	r0, r9
   27bf0:	dd3e      	ble.n	27c70 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0xe4>
          output_data[Offset(extended_output_shape, b, y, x, c)] =
              ActivationFunctionWithMinMax(
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] +
   27bf2:	4633      	mov	r3, r6
   27bf4:	462a      	mov	r2, r5
   27bf6:	4621      	mov	r1, r4
   27bf8:	f8cd 9000 	str.w	r9, [sp]
   27bfc:	4638      	mov	r0, r7
   27bfe:	f7ff fddb 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   27c02:	4682      	mov	sl, r0
                      input2_data[SubscriptToIndex(desc2, b, y, x, c)],
   27c04:	4633      	mov	r3, r6
   27c06:	462a      	mov	r2, r5
   27c08:	4621      	mov	r1, r4
   27c0a:	f8cd 9000 	str.w	r9, [sp]
   27c0e:	a812      	add	r0, sp, #72	; 0x48
   27c10:	f7ff fdd2 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] +
   27c14:	9b03      	ldr	r3, [sp, #12]
                  params.float_activation_min, params.float_activation_max);
   27c16:	ed9b 8a0d 	vldr	s16, [fp, #52]	; 0x34
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] +
   27c1a:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
                      input2_data[SubscriptToIndex(desc2, b, y, x, c)],
   27c1e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
              ActivationFunctionWithMinMax(
   27c20:	edda 8a00 	vldr	s17, [sl]
                      input2_data[SubscriptToIndex(desc2, b, y, x, c)],
   27c24:	eb03 0080 	add.w	r0, r3, r0, lsl #2
              ActivationFunctionWithMinMax(
   27c28:	edd0 7a00 	vldr	s15, [r0]
   27c2c:	ee78 8aa7 	vadd.f32	s17, s17, s15
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   27c30:	4633      	mov	r3, r6
   27c32:	f8cd 9000 	str.w	r9, [sp]
   27c36:	462a      	mov	r2, r5
   27c38:	4621      	mov	r1, r4
   27c3a:	4640      	mov	r0, r8
   27c3c:	f7ff fd86 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   27c40:	eef4 8ac8 	vcmpe.f32	s17, s16
   27c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                  params.float_activation_min, params.float_activation_max);
   27c48:	ed9b 9a0e 	vldr	s18, [fp, #56]	; 0x38
   27c4c:	bf58      	it	pl
   27c4e:	eeb0 8a68 	vmovpl.f32	s16, s17
	return __b;
   27c52:	eeb4 9a48 	vcmp.f32	s18, s16
   27c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   27c5a:	bf48      	it	mi
   27c5c:	eeb0 8a49 	vmovmi.f32	s16, s18
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   27c60:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   27c62:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   27c66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   27c6a:	ed80 8a00 	vstr	s16, [r0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   27c6e:	e7ba      	b.n	27be6 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x5a>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   27c70:	3601      	adds	r6, #1
   27c72:	e7b0      	b.n	27bd6 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x4a>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   27c74:	3501      	adds	r5, #1
   27c76:	e7a5      	b.n	27bc4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x38>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   27c78:	3401      	adds	r4, #1
   27c7a:	e79c      	b.n	27bb6 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x2a>
      RuntimeShape::ExtendedShape(4, output_shape);
   27c7c:	a804      	add	r0, sp, #16
   27c7e:	f7ff fc98 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
        }
      }
    }
  }
}
   27c82:	b01b      	add	sp, #108	; 0x6c
   27c84:	ecbd 8b04 	vpop	{d8-d9}
   27c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00027c8c <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>:
                               const RuntimeShape& input1_shape,
                               const int8_t* input1_data,
                               const RuntimeShape& input2_shape,
                               const int8_t* input2_data,
                               const RuntimeShape& output_shape,
                               int8_t* output_data) {
   27c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27c90:	b09b      	sub	sp, #108	; 0x6c
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   27c92:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
                               int8_t* output_data) {
   27c96:	9202      	str	r2, [sp, #8]
   27c98:	4604      	mov	r4, r0
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   27c9a:	465a      	mov	r2, fp
                               int8_t* output_data) {
   27c9c:	4608      	mov	r0, r1
   27c9e:	4619      	mov	r1, r3
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   27ca0:	ab12      	add	r3, sp, #72	; 0x48
   27ca2:	f7ff ff2a 	bl	27afa <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
   27ca6:	2301      	movs	r3, #1
   27ca8:	2104      	movs	r1, #4
   27caa:	9a25      	ldr	r2, [sp, #148]	; 0x94
   27cac:	a804      	add	r0, sp, #16
   27cae:	f7ff fd20 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   27cb2:	2600      	movs	r6, #0
   27cb4:	2100      	movs	r1, #0
   27cb6:	a804      	add	r0, sp, #16
   27cb8:	f7ff fc86 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   27cbc:	42b0      	cmp	r0, r6
   27cbe:	dd65      	ble.n	27d8c <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x100>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   27cc0:	2700      	movs	r7, #0
   27cc2:	f10d 0910 	add.w	r9, sp, #16
   27cc6:	2101      	movs	r1, #1
   27cc8:	4648      	mov	r0, r9
   27cca:	f7ff fc7d 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   27cce:	42b8      	cmp	r0, r7
   27cd0:	dd5a      	ble.n	27d88 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0xfc>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   27cd2:	f04f 0800 	mov.w	r8, #0
   27cd6:	2102      	movs	r1, #2
   27cd8:	4648      	mov	r0, r9
   27cda:	f7ff fc75 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   27cde:	4540      	cmp	r0, r8
   27ce0:	dd50      	ble.n	27d84 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0xf8>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   27ce2:	f04f 0a00 	mov.w	sl, #0
   27ce6:	2103      	movs	r1, #3
   27ce8:	4648      	mov	r0, r9
   27cea:	f7ff fc6d 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   27cee:	4550      	cmp	r0, sl
   27cf0:	dd45      	ble.n	27d7e <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0xf2>
          const int32_t input1_val =
              params.input1_offset +
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   27cf2:	4643      	mov	r3, r8
   27cf4:	463a      	mov	r2, r7
   27cf6:	4631      	mov	r1, r6
   27cf8:	f8cd a000 	str.w	sl, [sp]
   27cfc:	4658      	mov	r0, fp
   27cfe:	f7ff fd5b 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   27d02:	9b02      	ldr	r3, [sp, #8]
          const int32_t input2_val =
              params.input2_offset +
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   27d04:	463a      	mov	r2, r7
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   27d06:	561d      	ldrsb	r5, [r3, r0]
   27d08:	6863      	ldr	r3, [r4, #4]
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   27d0a:	4631      	mov	r1, r6
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   27d0c:	441d      	add	r5, r3
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   27d0e:	f8cd a000 	str.w	sl, [sp]
   27d12:	4643      	mov	r3, r8
   27d14:	a812      	add	r0, sp, #72	; 0x48
   27d16:	f7ff fd4f 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   27d1a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   27d1c:	68a2      	ldr	r2, [r4, #8]
   27d1e:	561b      	ldrsb	r3, [r3, r0]
          const int32_t shifted_input1_val =
              input1_val * (1 << params.left_shift);
   27d20:	f8d4 c018 	ldr.w	ip, [r4, #24]
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   27d24:	4413      	add	r3, r2
          const int32_t shifted_input2_val =
   27d26:	fa03 f30c 	lsl.w	r3, r3, ip
              input2_val * (1 << params.left_shift);
          const int32_t scaled_input1_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   27d2a:	fa05 f00c 	lsl.w	r0, r5, ip
   27d2e:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
          const int32_t shifted_input2_val =
   27d32:	9303      	str	r3, [sp, #12]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   27d34:	f7ee ff56 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
                  shifted_input1_val, params.input1_multiplier,
                  params.input1_shift);
          const int32_t scaled_input2_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   27d38:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
   27d3c:	9b03      	ldr	r3, [sp, #12]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   27d3e:	4605      	mov	r5, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   27d40:	4618      	mov	r0, r3
   27d42:	f7ee ff4f 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
                  shifted_input2_val, params.input2_multiplier,
                  params.input2_shift);
          const int32_t raw_sum = scaled_input1_val + scaled_input2_val;
          const int32_t raw_output =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   27d46:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   27d4a:	4428      	add	r0, r5
   27d4c:	f7ee ff4a 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
                  raw_sum, params.output_multiplier, params.output_shift) +
   27d50:	68e5      	ldr	r5, [r4, #12]
              params.output_offset;
          const int32_t clamped_output =
              std::min(params.quantized_activation_max,
                       std::max(params.quantized_activation_min, raw_output));
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   27d52:	4643      	mov	r3, r8
                  raw_sum, params.output_multiplier, params.output_shift) +
   27d54:	4405      	add	r5, r0
   27d56:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   27d58:	f8cd a000 	str.w	sl, [sp]
   27d5c:	4285      	cmp	r5, r0
   27d5e:	bfb8      	it	lt
   27d60:	4605      	movlt	r5, r0
   27d62:	6b20      	ldr	r0, [r4, #48]	; 0x30
   27d64:	463a      	mov	r2, r7
   27d66:	4285      	cmp	r5, r0
   27d68:	bfa8      	it	ge
   27d6a:	4605      	movge	r5, r0
   27d6c:	4631      	mov	r1, r6
   27d6e:	4648      	mov	r0, r9
   27d70:	f7ff fcec 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   27d74:	9b26      	ldr	r3, [sp, #152]	; 0x98
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   27d76:	f10a 0a01 	add.w	sl, sl, #1
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   27d7a:	541d      	strb	r5, [r3, r0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   27d7c:	e7b3      	b.n	27ce6 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x5a>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   27d7e:	f108 0801 	add.w	r8, r8, #1
   27d82:	e7a8      	b.n	27cd6 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x4a>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   27d84:	3701      	adds	r7, #1
   27d86:	e79c      	b.n	27cc2 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x36>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   27d88:	3601      	adds	r6, #1
   27d8a:	e793      	b.n	27cb4 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x28>
      RuntimeShape::ExtendedShape(4, output_shape);
   27d8c:	a804      	add	r0, sp, #16
   27d8e:	f7ff fc10 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
              static_cast<int8_t>(clamped_output);
        }
      }
    }
  }
}
   27d92:	b01b      	add	sp, #108	; 0x6c
   27d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00027d98 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>:
                               const RuntimeShape& input1_shape,
                               const uint8* input1_data,
                               const RuntimeShape& input2_shape,
                               const uint8* input2_data,
                               const RuntimeShape& output_shape,
                               uint8* output_data) {
   27d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27d9c:	b09b      	sub	sp, #108	; 0x6c
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   27d9e:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
                               uint8* output_data) {
   27da2:	9202      	str	r2, [sp, #8]
   27da4:	4604      	mov	r4, r0
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   27da6:	465a      	mov	r2, fp
                               uint8* output_data) {
   27da8:	4608      	mov	r0, r1
   27daa:	4619      	mov	r1, r3
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   27dac:	ab12      	add	r3, sp, #72	; 0x48
   27dae:	f7ff fea4 	bl	27afa <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
   27db2:	2301      	movs	r3, #1
   27db4:	2104      	movs	r1, #4
   27db6:	9a25      	ldr	r2, [sp, #148]	; 0x94
   27db8:	a804      	add	r0, sp, #16
   27dba:	f7ff fc9a 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   27dbe:	2600      	movs	r6, #0
   27dc0:	2100      	movs	r1, #0
   27dc2:	a804      	add	r0, sp, #16
   27dc4:	f7ff fc00 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   27dc8:	42b0      	cmp	r0, r6
   27dca:	dd65      	ble.n	27e98 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x100>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   27dcc:	2700      	movs	r7, #0
   27dce:	f10d 0910 	add.w	r9, sp, #16
   27dd2:	2101      	movs	r1, #1
   27dd4:	4648      	mov	r0, r9
   27dd6:	f7ff fbf7 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   27dda:	42b8      	cmp	r0, r7
   27ddc:	dd5a      	ble.n	27e94 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xfc>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   27dde:	f04f 0800 	mov.w	r8, #0
   27de2:	2102      	movs	r1, #2
   27de4:	4648      	mov	r0, r9
   27de6:	f7ff fbef 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   27dea:	4540      	cmp	r0, r8
   27dec:	dd50      	ble.n	27e90 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xf8>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   27dee:	f04f 0a00 	mov.w	sl, #0
   27df2:	2103      	movs	r1, #3
   27df4:	4648      	mov	r0, r9
   27df6:	f7ff fbe7 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   27dfa:	4550      	cmp	r0, sl
   27dfc:	dd45      	ble.n	27e8a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xf2>
          const int32 input1_val =
              params.input1_offset +
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   27dfe:	4643      	mov	r3, r8
   27e00:	463a      	mov	r2, r7
   27e02:	4631      	mov	r1, r6
   27e04:	f8cd a000 	str.w	sl, [sp]
   27e08:	4658      	mov	r0, fp
   27e0a:	f7ff fcd5 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   27e0e:	9b02      	ldr	r3, [sp, #8]
          const int32 input2_val =
              params.input2_offset +
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   27e10:	463a      	mov	r2, r7
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   27e12:	5c1d      	ldrb	r5, [r3, r0]
   27e14:	6863      	ldr	r3, [r4, #4]
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   27e16:	4631      	mov	r1, r6
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   27e18:	441d      	add	r5, r3
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   27e1a:	f8cd a000 	str.w	sl, [sp]
   27e1e:	4643      	mov	r3, r8
   27e20:	a812      	add	r0, sp, #72	; 0x48
   27e22:	f7ff fcc9 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   27e26:	9b24      	ldr	r3, [sp, #144]	; 0x90
   27e28:	68a2      	ldr	r2, [r4, #8]
   27e2a:	5c1b      	ldrb	r3, [r3, r0]
          const int32 shifted_input1_val =
              input1_val * (1 << params.left_shift);
   27e2c:	f8d4 c018 	ldr.w	ip, [r4, #24]
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   27e30:	4413      	add	r3, r2
          const int32 shifted_input2_val =
   27e32:	fa03 f30c 	lsl.w	r3, r3, ip
              input2_val * (1 << params.left_shift);
          const int32 scaled_input1_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   27e36:	fa05 f00c 	lsl.w	r0, r5, ip
   27e3a:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
          const int32 shifted_input2_val =
   27e3e:	9303      	str	r3, [sp, #12]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   27e40:	f7ee fed0 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
                  shifted_input1_val, params.input1_multiplier,
                  params.input1_shift);
          const int32 scaled_input2_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   27e44:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
   27e48:	9b03      	ldr	r3, [sp, #12]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   27e4a:	4605      	mov	r5, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   27e4c:	4618      	mov	r0, r3
   27e4e:	f7ee fec9 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
                  shifted_input2_val, params.input2_multiplier,
                  params.input2_shift);
          const int32 raw_sum = scaled_input1_val + scaled_input2_val;
          const int32 raw_output =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   27e52:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   27e56:	4428      	add	r0, r5
   27e58:	f7ee fec4 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
                  raw_sum, params.output_multiplier, params.output_shift) +
   27e5c:	68e5      	ldr	r5, [r4, #12]
              params.output_offset;
          const int32 clamped_output =
              std::min(params.quantized_activation_max,
                       std::max(params.quantized_activation_min, raw_output));
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   27e5e:	4643      	mov	r3, r8
                  raw_sum, params.output_multiplier, params.output_shift) +
   27e60:	4405      	add	r5, r0
   27e62:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   27e64:	f8cd a000 	str.w	sl, [sp]
   27e68:	4285      	cmp	r5, r0
   27e6a:	bfb8      	it	lt
   27e6c:	4605      	movlt	r5, r0
   27e6e:	6b20      	ldr	r0, [r4, #48]	; 0x30
   27e70:	463a      	mov	r2, r7
   27e72:	4285      	cmp	r5, r0
   27e74:	bfa8      	it	ge
   27e76:	4605      	movge	r5, r0
   27e78:	4631      	mov	r1, r6
   27e7a:	4648      	mov	r0, r9
   27e7c:	f7ff fc66 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   27e80:	9b26      	ldr	r3, [sp, #152]	; 0x98
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   27e82:	f10a 0a01 	add.w	sl, sl, #1
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   27e86:	541d      	strb	r5, [r3, r0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   27e88:	e7b3      	b.n	27df2 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x5a>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   27e8a:	f108 0801 	add.w	r8, r8, #1
   27e8e:	e7a8      	b.n	27de2 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x4a>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   27e90:	3701      	adds	r7, #1
   27e92:	e79c      	b.n	27dce <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x36>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   27e94:	3601      	adds	r6, #1
   27e96:	e793      	b.n	27dc0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x28>
      RuntimeShape::ExtendedShape(4, output_shape);
   27e98:	a804      	add	r0, sp, #16
   27e9a:	f7ff fb8a 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
              static_cast<uint8>(clamped_output);
        }
      }
    }
  }
}
   27e9e:	b01b      	add	sp, #108	; 0x6c
   27ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00027ea4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0>:
TfLiteStatus EvalAddQuantized(TfLiteContext* context, TfLiteNode* node,
   27ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
   27ea6:	4614      	mov	r4, r2
   27ea8:	461e      	mov	r6, r3
    op_params.left_shift = data->left_shift;
   27eaa:	6a43      	ldr	r3, [r0, #36]	; 0x24
TfLiteStatus EvalAddQuantized(TfLiteContext* context, TfLiteNode* node,
   27eac:	b0b1      	sub	sp, #196	; 0xc4
    op_params.left_shift = data->left_shift;
   27eae:	931c      	str	r3, [sp, #112]	; 0x70
    op_params.input1_offset = data->input1_offset;
   27eb0:	6a83      	ldr	r3, [r0, #40]	; 0x28
TfLiteStatus EvalAddQuantized(TfLiteContext* context, TfLiteNode* node,
   27eb2:	460d      	mov	r5, r1
    op_params.input1_offset = data->input1_offset;
   27eb4:	9317      	str	r3, [sp, #92]	; 0x5c
    op_params.input1_multiplier = data->input1_multiplier;
   27eb6:	6943      	ldr	r3, [r0, #20]
   27eb8:	931d      	str	r3, [sp, #116]	; 0x74
    op_params.input1_shift = data->input1_shift;
   27eba:	6843      	ldr	r3, [r0, #4]
   27ebc:	931e      	str	r3, [sp, #120]	; 0x78
    op_params.input2_offset = data->input2_offset;
   27ebe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   27ec0:	9318      	str	r3, [sp, #96]	; 0x60
    op_params.input2_multiplier = data->input2_multiplier;
   27ec2:	6983      	ldr	r3, [r0, #24]
   27ec4:	931f      	str	r3, [sp, #124]	; 0x7c
    op_params.input2_shift = data->input2_shift;
   27ec6:	6883      	ldr	r3, [r0, #8]
   27ec8:	9320      	str	r3, [sp, #128]	; 0x80
    op_params.output_offset = data->output_offset;
   27eca:	6b03      	ldr	r3, [r0, #48]	; 0x30
   27ecc:	9319      	str	r3, [sp, #100]	; 0x64
    op_params.output_multiplier = data->output_multiplier;
   27ece:	69c3      	ldr	r3, [r0, #28]
   27ed0:	931a      	str	r3, [sp, #104]	; 0x68
    op_params.output_shift = data->output_shift;
   27ed2:	6a03      	ldr	r3, [r0, #32]
   27ed4:	931b      	str	r3, [sp, #108]	; 0x6c
  params->quantized_activation_min = min;
   27ed6:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
   27eda:	a810      	add	r0, sp, #64	; 0x40
  params->quantized_activation_max = max;
   27edc:	e9cd 2321 	strd	r2, r3, [sp, #132]	; 0x84
   27ee0:	f7ff fbac 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   27ee4:	4621      	mov	r1, r4
   27ee6:	a80a      	add	r0, sp, #40	; 0x28
   27ee8:	f7ff fba8 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bool need_broadcast = reference_ops::ProcessBroadcastShapes(
   27eec:	a90a      	add	r1, sp, #40	; 0x28
   27eee:	aa16      	add	r2, sp, #88	; 0x58
   27ef0:	a810      	add	r0, sp, #64	; 0x40
   27ef2:	f7ff fd1a 	bl	2792a <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>
   27ef6:	4607      	mov	r7, r0
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
   27ef8:	a80a      	add	r0, sp, #40	; 0x28
   27efa:	f7ff fb5a 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   27efe:	a810      	add	r0, sp, #64	; 0x40
   27f00:	f7ff fb57 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
    if (output->type == kTfLiteInt8) {
   27f04:	7833      	ldrb	r3, [r6, #0]
        TF_LITE_ADD(reference_integer_ops, BroadcastAdd4DSlow, int8_t);
   27f06:	4629      	mov	r1, r5
    if (output->type == kTfLiteInt8) {
   27f08:	2b09      	cmp	r3, #9
        TF_LITE_ADD(reference_integer_ops, BroadcastAdd4DSlow, int8_t);
   27f0a:	a810      	add	r0, sp, #64	; 0x40
    if (output->type == kTfLiteInt8) {
   27f0c:	d13e      	bne.n	27f8c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xe8>
      if (need_broadcast) {
   27f0e:	b31f      	cbz	r7, 27f58 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xb4>
        TF_LITE_ADD(reference_integer_ops, BroadcastAdd4DSlow, int8_t);
   27f10:	f7ff fb94 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   27f14:	b105      	cbz	r5, 27f18 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x74>
   27f16:	686d      	ldr	r5, [r5, #4]
   27f18:	4621      	mov	r1, r4
   27f1a:	a80a      	add	r0, sp, #40	; 0x28
   27f1c:	f7ff fb8e 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   27f20:	b104      	cbz	r4, 27f24 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x80>
   27f22:	6864      	ldr	r4, [r4, #4]
   27f24:	4631      	mov	r1, r6
   27f26:	a804      	add	r0, sp, #16
   27f28:	f7ff fb88 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   27f2c:	6873      	ldr	r3, [r6, #4]
   27f2e:	462a      	mov	r2, r5
   27f30:	9302      	str	r3, [sp, #8]
   27f32:	ab04      	add	r3, sp, #16
   27f34:	e9cd 4300 	strd	r4, r3, [sp]
   27f38:	a910      	add	r1, sp, #64	; 0x40
   27f3a:	ab0a      	add	r3, sp, #40	; 0x28
   27f3c:	a816      	add	r0, sp, #88	; 0x58
   27f3e:	f7ff fea5 	bl	27c8c <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>
        TF_LITE_ADD(reference_ops, Add, uint8_t);
   27f42:	a804      	add	r0, sp, #16
   27f44:	f7ff fb35 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   27f48:	a80a      	add	r0, sp, #40	; 0x28
   27f4a:	f7ff fb32 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   27f4e:	a810      	add	r0, sp, #64	; 0x40
   27f50:	f7ff fb2f 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   27f54:	b031      	add	sp, #196	; 0xc4
   27f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
        TF_LITE_ADD(reference_integer_ops, Add, int8_t);
   27f58:	f7ff fb70 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   27f5c:	b105      	cbz	r5, 27f60 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xbc>
   27f5e:	686d      	ldr	r5, [r5, #4]
   27f60:	4621      	mov	r1, r4
   27f62:	a80a      	add	r0, sp, #40	; 0x28
   27f64:	f7ff fb6a 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   27f68:	b104      	cbz	r4, 27f6c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xc8>
   27f6a:	6864      	ldr	r4, [r4, #4]
   27f6c:	4631      	mov	r1, r6
   27f6e:	a804      	add	r0, sp, #16
   27f70:	f7ff fb64 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   27f74:	6873      	ldr	r3, [r6, #4]
   27f76:	462a      	mov	r2, r5
   27f78:	9302      	str	r3, [sp, #8]
   27f7a:	ab04      	add	r3, sp, #16
   27f7c:	e9cd 4300 	strd	r4, r3, [sp]
   27f80:	a910      	add	r1, sp, #64	; 0x40
   27f82:	ab0a      	add	r3, sp, #40	; 0x28
   27f84:	a816      	add	r0, sp, #88	; 0x58
   27f86:	f7ff fc86 	bl	27896 <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>
   27f8a:	e7da      	b.n	27f42 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x9e>
      if (need_broadcast) {
   27f8c:	b1cf      	cbz	r7, 27fc2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x11e>
        TF_LITE_ADD(reference_ops, BroadcastAdd4DSlow, uint8_t);
   27f8e:	f7ff fb55 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   27f92:	b105      	cbz	r5, 27f96 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xf2>
   27f94:	686d      	ldr	r5, [r5, #4]
   27f96:	4621      	mov	r1, r4
   27f98:	a80a      	add	r0, sp, #40	; 0x28
   27f9a:	f7ff fb4f 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   27f9e:	b104      	cbz	r4, 27fa2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xfe>
   27fa0:	6864      	ldr	r4, [r4, #4]
   27fa2:	4631      	mov	r1, r6
   27fa4:	a804      	add	r0, sp, #16
   27fa6:	f7ff fb49 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   27faa:	6873      	ldr	r3, [r6, #4]
   27fac:	462a      	mov	r2, r5
   27fae:	9302      	str	r3, [sp, #8]
   27fb0:	ab04      	add	r3, sp, #16
   27fb2:	e9cd 4300 	strd	r4, r3, [sp]
   27fb6:	a910      	add	r1, sp, #64	; 0x40
   27fb8:	ab0a      	add	r3, sp, #40	; 0x28
   27fba:	a816      	add	r0, sp, #88	; 0x58
   27fbc:	f7ff feec 	bl	27d98 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>
   27fc0:	e7bf      	b.n	27f42 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x9e>
        TF_LITE_ADD(reference_ops, Add, uint8_t);
   27fc2:	f7ff fb3b 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   27fc6:	b105      	cbz	r5, 27fca <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x126>
   27fc8:	686d      	ldr	r5, [r5, #4]
   27fca:	4621      	mov	r1, r4
   27fcc:	a80a      	add	r0, sp, #40	; 0x28
   27fce:	f7ff fb35 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   27fd2:	b104      	cbz	r4, 27fd6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x132>
   27fd4:	6864      	ldr	r4, [r4, #4]
   27fd6:	4631      	mov	r1, r6
   27fd8:	a804      	add	r0, sp, #16
   27fda:	f7ff fb2f 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   27fde:	6873      	ldr	r3, [r6, #4]
   27fe0:	462a      	mov	r2, r5
   27fe2:	9302      	str	r3, [sp, #8]
   27fe4:	ab04      	add	r3, sp, #16
   27fe6:	e9cd 4300 	strd	r4, r3, [sp]
   27fea:	a910      	add	r1, sp, #64	; 0x40
   27fec:	ab0a      	add	r3, sp, #40	; 0x28
   27fee:	a816      	add	r0, sp, #88	; 0x58
   27ff0:	f7ff fc06 	bl	27800 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>
   27ff4:	e7a5      	b.n	27f42 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x9e>

00027ff6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>:
                              TfLiteTensor* output) {
   27ff6:	b508      	push	{r3, lr}
   27ff8:	4618      	mov	r0, r3
   27ffa:	9b04      	ldr	r3, [sp, #16]
  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
   27ffc:	781a      	ldrb	r2, [r3, #0]
   27ffe:	2a03      	cmp	r2, #3
   28000:	d001      	beq.n	28006 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x10>
   28002:	2a09      	cmp	r2, #9
   28004:	d103      	bne.n	2800e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x18>
   28006:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   2800a:	f7ff ff4b 	bl	27ea4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0>
}
   2800e:	2000      	movs	r0, #0
   28010:	bd08      	pop	{r3, pc}

00028012 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>:
namespace tflite {

namespace reference_ops {

template <typename T1, typename T2, typename T3, typename Cmp>
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   28012:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               const T3* input2_data, const RuntimeShape& output_shape,
               T2* output_data, const Cmp& cmp) {
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   28016:	6807      	ldr	r7, [r0, #0]
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   28018:	b085      	sub	sp, #20
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   2801a:	2f00      	cmp	r7, #0
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   2801c:	4605      	mov	r5, r0
   2801e:	461e      	mov	r6, r3
   28020:	9102      	str	r1, [sp, #8]
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   28022:	dc01      	bgt.n	28028 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x16>
   28024:	f008 fec9 	bl	30dba <abort>
  TFLITE_DCHECK_EQ(input1_shape.DimensionsCount() - 1,
   28028:	6831      	ldr	r1, [r6, #0]
   2802a:	1e7b      	subs	r3, r7, #1
   2802c:	428b      	cmp	r3, r1
   2802e:	d1f9      	bne.n	28024 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x12>
                   output_shape.DimensionsCount());
  int axis = input2_data[0];
   28030:	6814      	ldr	r4, [r2, #0]
    axis += input1_shape.DimensionsCount();
  }
  const int axis_size = input1_shape.Dims(axis);

  int outer_size = 1;
  for (int i = 0; i < axis; ++i) {
   28032:	f04f 0800 	mov.w	r8, #0
  if (axis < 0) {
   28036:	2c00      	cmp	r4, #0
    axis += input1_shape.DimensionsCount();
   28038:	bfb8      	it	lt
   2803a:	19e4      	addlt	r4, r4, r7
  const int axis_size = input1_shape.Dims(axis);
   2803c:	4621      	mov	r1, r4
   2803e:	f7ff fac3 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  int outer_size = 1;
   28042:	f04f 0b01 	mov.w	fp, #1
  const int axis_size = input1_shape.Dims(axis);
   28046:	9001      	str	r0, [sp, #4]
  for (int i = 0; i < axis; ++i) {
   28048:	4544      	cmp	r4, r8
   2804a:	dd0f      	ble.n	2806c <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x5a>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i));
   2804c:	4641      	mov	r1, r8
   2804e:	4628      	mov	r0, r5
   28050:	f7ff faba 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28054:	4641      	mov	r1, r8
   28056:	4681      	mov	r9, r0
   28058:	4630      	mov	r0, r6
   2805a:	f7ff fab5 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2805e:	4581      	cmp	r9, r0
   28060:	d1e0      	bne.n	28024 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x12>
    outer_size *= input1_shape.Dims(i);
   28062:	fb09 fb0b 	mul.w	fp, r9, fp
  for (int i = 0; i < axis; ++i) {
   28066:	f108 0801 	add.w	r8, r8, #1
   2806a:	e7ed      	b.n	28048 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x36>
  }

  int inner_size = 1;
  const int dims_count = input1_shape.DimensionsCount();
  for (int i = axis + 1; i < dims_count; ++i) {
   2806c:	f104 0801 	add.w	r8, r4, #1
  int inner_size = 1;
   28070:	2401      	movs	r4, #1
  for (int i = axis + 1; i < dims_count; ++i) {
   28072:	45b8      	cmp	r8, r7
   28074:	db2d      	blt.n	280d2 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xc0>
   28076:	9b01      	ldr	r3, [sp, #4]
   28078:	9400      	str	r4, [sp, #0]
   2807a:	fb03 fe04 	mul.w	lr, r3, r4
   2807e:	00a3      	lsls	r3, r4, #2
   28080:	9303      	str	r3, [sp, #12]
   28082:	2300      	movs	r3, #0
   28084:	4618      	mov	r0, r3
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
    inner_size *= input1_shape.Dims(i);
  }
  for (int outer = 0; outer < outer_size; ++outer) {
   28086:	461d      	mov	r5, r3
   28088:	45ab      	cmp	fp, r5
   2808a:	dd3f      	ble.n	2810c <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xfa>
    for (int inner = 0; inner < inner_size; ++inner) {
   2808c:	2700      	movs	r7, #0
   2808e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   28090:	9900      	ldr	r1, [sp, #0]
   28092:	eb02 0880 	add.w	r8, r2, r0, lsl #2
   28096:	9a02      	ldr	r2, [sp, #8]
   28098:	eb02 0681 	add.w	r6, r2, r1, lsl #2
   2809c:	eb02 0a83 	add.w	sl, r2, r3, lsl #2
   280a0:	42bc      	cmp	r4, r7
   280a2:	dd2c      	ble.n	280fe <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xec>
      auto min_max_value = input1_data[outer * axis_size * inner_size + inner];
   280a4:	ecfa 7a01 	vldmia	sl!, {s15}
   280a8:	46b4      	mov	ip, r6
      T2 min_max_index = 0;
      for (int i = 1; i < axis_size; ++i) {
   280aa:	2201      	movs	r2, #1
      T2 min_max_index = 0;
   280ac:	f04f 0900 	mov.w	r9, #0
      for (int i = 1; i < axis_size; ++i) {
   280b0:	9901      	ldr	r1, [sp, #4]
   280b2:	428a      	cmp	r2, r1
   280b4:	da1e      	bge.n	280f4 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xe2>
        const auto& curr_value =
            input1_data[(outer * axis_size + i) * inner_size + inner];
        if (cmp(curr_value, min_max_value)) {
   280b6:	ed9c 7a00 	vldr	s14, [ip]
   280ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
   280be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   280c2:	9903      	ldr	r1, [sp, #12]
   280c4:	bfc4      	itt	gt
   280c6:	4691      	movgt	r9, r2
          min_max_value = curr_value;
   280c8:	eef0 7a47 	vmovgt.f32	s15, s14
      for (int i = 1; i < axis_size; ++i) {
   280cc:	3201      	adds	r2, #1
   280ce:	448c      	add	ip, r1
   280d0:	e7ee      	b.n	280b0 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x9e>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
   280d2:	4641      	mov	r1, r8
   280d4:	4628      	mov	r0, r5
   280d6:	f7ff fa77 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   280da:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
   280de:	4681      	mov	r9, r0
   280e0:	4630      	mov	r0, r6
   280e2:	f7ff fa71 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   280e6:	4581      	cmp	r9, r0
   280e8:	d19c      	bne.n	28024 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x12>
    inner_size *= input1_shape.Dims(i);
   280ea:	fb09 f404 	mul.w	r4, r9, r4
  for (int i = axis + 1; i < dims_count; ++i) {
   280ee:	f108 0801 	add.w	r8, r8, #1
   280f2:	e7be      	b.n	28072 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x60>
          min_max_index = static_cast<T2>(i);
        }
      }
      output_data[outer * inner_size + inner] = min_max_index;
   280f4:	f848 9b04 	str.w	r9, [r8], #4
    for (int inner = 0; inner < inner_size; ++inner) {
   280f8:	3701      	adds	r7, #1
   280fa:	3604      	adds	r6, #4
   280fc:	e7d0      	b.n	280a0 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x8e>
  for (int outer = 0; outer < outer_size; ++outer) {
   280fe:	9a00      	ldr	r2, [sp, #0]
   28100:	3501      	adds	r5, #1
   28102:	4472      	add	r2, lr
   28104:	4420      	add	r0, r4
   28106:	4473      	add	r3, lr
   28108:	9200      	str	r2, [sp, #0]
   2810a:	e7bd      	b.n	28088 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x76>
    }
  }
}
   2810c:	b005      	add	sp, #20
   2810e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00028112 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>:
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   28112:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   28116:	6807      	ldr	r7, [r0, #0]
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   28118:	b085      	sub	sp, #20
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   2811a:	2f00      	cmp	r7, #0
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   2811c:	4605      	mov	r5, r0
   2811e:	461e      	mov	r6, r3
   28120:	9102      	str	r1, [sp, #8]
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   28122:	dc01      	bgt.n	28128 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x16>
   28124:	f008 fe49 	bl	30dba <abort>
  TFLITE_DCHECK_EQ(input1_shape.DimensionsCount() - 1,
   28128:	6831      	ldr	r1, [r6, #0]
   2812a:	1e7b      	subs	r3, r7, #1
   2812c:	428b      	cmp	r3, r1
   2812e:	d1f9      	bne.n	28124 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x12>
  int axis = input2_data[0];
   28130:	6814      	ldr	r4, [r2, #0]
  for (int i = 0; i < axis; ++i) {
   28132:	f04f 0800 	mov.w	r8, #0
  if (axis < 0) {
   28136:	2c00      	cmp	r4, #0
    axis += input1_shape.DimensionsCount();
   28138:	bfb8      	it	lt
   2813a:	19e4      	addlt	r4, r4, r7
  const int axis_size = input1_shape.Dims(axis);
   2813c:	4621      	mov	r1, r4
   2813e:	f7ff fa43 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  int outer_size = 1;
   28142:	f04f 0b01 	mov.w	fp, #1
  const int axis_size = input1_shape.Dims(axis);
   28146:	9001      	str	r0, [sp, #4]
  for (int i = 0; i < axis; ++i) {
   28148:	4544      	cmp	r4, r8
   2814a:	dd0f      	ble.n	2816c <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x5a>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i));
   2814c:	4641      	mov	r1, r8
   2814e:	4628      	mov	r0, r5
   28150:	f7ff fa3a 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28154:	4641      	mov	r1, r8
   28156:	4681      	mov	r9, r0
   28158:	4630      	mov	r0, r6
   2815a:	f7ff fa35 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2815e:	4581      	cmp	r9, r0
   28160:	d1e0      	bne.n	28124 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x12>
    outer_size *= input1_shape.Dims(i);
   28162:	fb09 fb0b 	mul.w	fp, r9, fp
  for (int i = 0; i < axis; ++i) {
   28166:	f108 0801 	add.w	r8, r8, #1
   2816a:	e7ed      	b.n	28148 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x36>
  for (int i = axis + 1; i < dims_count; ++i) {
   2816c:	f104 0801 	add.w	r8, r4, #1
  int inner_size = 1;
   28170:	2401      	movs	r4, #1
  for (int i = axis + 1; i < dims_count; ++i) {
   28172:	45b8      	cmp	r8, r7
   28174:	db2d      	blt.n	281d2 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xc0>
   28176:	9b01      	ldr	r3, [sp, #4]
   28178:	9400      	str	r4, [sp, #0]
   2817a:	fb03 fe04 	mul.w	lr, r3, r4
   2817e:	00a3      	lsls	r3, r4, #2
   28180:	9303      	str	r3, [sp, #12]
   28182:	2300      	movs	r3, #0
   28184:	4618      	mov	r0, r3
  for (int outer = 0; outer < outer_size; ++outer) {
   28186:	461d      	mov	r5, r3
   28188:	45ab      	cmp	fp, r5
   2818a:	dd3f      	ble.n	2820c <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xfa>
    for (int inner = 0; inner < inner_size; ++inner) {
   2818c:	2700      	movs	r7, #0
   2818e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   28190:	9900      	ldr	r1, [sp, #0]
   28192:	eb02 0880 	add.w	r8, r2, r0, lsl #2
   28196:	9a02      	ldr	r2, [sp, #8]
   28198:	eb02 0681 	add.w	r6, r2, r1, lsl #2
   2819c:	eb02 0a83 	add.w	sl, r2, r3, lsl #2
   281a0:	42bc      	cmp	r4, r7
   281a2:	dd2c      	ble.n	281fe <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xec>
      auto min_max_value = input1_data[outer * axis_size * inner_size + inner];
   281a4:	ecfa 7a01 	vldmia	sl!, {s15}
   281a8:	46b4      	mov	ip, r6
      for (int i = 1; i < axis_size; ++i) {
   281aa:	2201      	movs	r2, #1
      T2 min_max_index = 0;
   281ac:	f04f 0900 	mov.w	r9, #0
      for (int i = 1; i < axis_size; ++i) {
   281b0:	9901      	ldr	r1, [sp, #4]
   281b2:	428a      	cmp	r2, r1
   281b4:	da1e      	bge.n	281f4 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xe2>
        if (cmp(curr_value, min_max_value)) {
   281b6:	ed9c 7a00 	vldr	s14, [ip]
   281ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
   281be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   281c2:	9903      	ldr	r1, [sp, #12]
   281c4:	bf44      	itt	mi
   281c6:	4691      	movmi	r9, r2
          min_max_value = curr_value;
   281c8:	eef0 7a47 	vmovmi.f32	s15, s14
      for (int i = 1; i < axis_size; ++i) {
   281cc:	3201      	adds	r2, #1
   281ce:	448c      	add	ip, r1
   281d0:	e7ee      	b.n	281b0 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x9e>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
   281d2:	4641      	mov	r1, r8
   281d4:	4628      	mov	r0, r5
   281d6:	f7ff f9f7 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   281da:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
   281de:	4681      	mov	r9, r0
   281e0:	4630      	mov	r0, r6
   281e2:	f7ff f9f1 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   281e6:	4581      	cmp	r9, r0
   281e8:	d19c      	bne.n	28124 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x12>
    inner_size *= input1_shape.Dims(i);
   281ea:	fb09 f404 	mul.w	r4, r9, r4
  for (int i = axis + 1; i < dims_count; ++i) {
   281ee:	f108 0801 	add.w	r8, r8, #1
   281f2:	e7be      	b.n	28172 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x60>
      output_data[outer * inner_size + inner] = min_max_index;
   281f4:	f848 9b04 	str.w	r9, [r8], #4
    for (int inner = 0; inner < inner_size; ++inner) {
   281f8:	3701      	adds	r7, #1
   281fa:	3604      	adds	r6, #4
   281fc:	e7d0      	b.n	281a0 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x8e>
  for (int outer = 0; outer < outer_size; ++outer) {
   281fe:	9a00      	ldr	r2, [sp, #0]
   28200:	3501      	adds	r5, #1
   28202:	4472      	add	r2, lr
   28204:	4420      	add	r0, r4
   28206:	4473      	add	r3, lr
   28208:	9200      	str	r2, [sp, #0]
   2820a:	e7bd      	b.n	28188 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x76>
}
   2820c:	b005      	add	sp, #20
   2820e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00028212 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>:
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   28212:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   28216:	f8d0 a000 	ldr.w	sl, [r0]
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   2821a:	4606      	mov	r6, r0
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   2821c:	f1ba 0f00 	cmp.w	sl, #0
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   28220:	4689      	mov	r9, r1
   28222:	4698      	mov	r8, r3
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   28224:	dc01      	bgt.n	2822a <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x18>
   28226:	f008 fdc8 	bl	30dba <abort>
  TFLITE_DCHECK_EQ(input1_shape.DimensionsCount() - 1,
   2822a:	f8d8 1000 	ldr.w	r1, [r8]
   2822e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   28232:	428b      	cmp	r3, r1
   28234:	d1f7      	bne.n	28226 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
  int axis = input2_data[0];
   28236:	6814      	ldr	r4, [r2, #0]
  for (int i = 0; i < axis; ++i) {
   28238:	f04f 0b00 	mov.w	fp, #0
  if (axis < 0) {
   2823c:	2c00      	cmp	r4, #0
    axis += input1_shape.DimensionsCount();
   2823e:	bfb8      	it	lt
   28240:	4454      	addlt	r4, sl
  const int axis_size = input1_shape.Dims(axis);
   28242:	4621      	mov	r1, r4
   28244:	f7ff f9c0 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  int outer_size = 1;
   28248:	2701      	movs	r7, #1
  const int axis_size = input1_shape.Dims(axis);
   2824a:	4605      	mov	r5, r0
  for (int i = 0; i < axis; ++i) {
   2824c:	455c      	cmp	r4, fp
   2824e:	dd0f      	ble.n	28270 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x5e>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i));
   28250:	4659      	mov	r1, fp
   28252:	4630      	mov	r0, r6
   28254:	f7ff f9b8 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28258:	4659      	mov	r1, fp
   2825a:	9001      	str	r0, [sp, #4]
   2825c:	4640      	mov	r0, r8
   2825e:	f7ff f9b3 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28262:	9b01      	ldr	r3, [sp, #4]
   28264:	4283      	cmp	r3, r0
   28266:	d1de      	bne.n	28226 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
    outer_size *= input1_shape.Dims(i);
   28268:	435f      	muls	r7, r3
  for (int i = 0; i < axis; ++i) {
   2826a:	f10b 0b01 	add.w	fp, fp, #1
   2826e:	e7ed      	b.n	2824c <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x3a>
  for (int i = axis + 1; i < dims_count; ++i) {
   28270:	f104 0b01 	add.w	fp, r4, #1
  int inner_size = 1;
   28274:	2401      	movs	r4, #1
  for (int i = axis + 1; i < dims_count; ++i) {
   28276:	45d3      	cmp	fp, sl
   28278:	db22      	blt.n	282c0 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xae>
   2827a:	fb05 f304 	mul.w	r3, r5, r4
   2827e:	9301      	str	r3, [sp, #4]
   28280:	2300      	movs	r3, #0
  for (int outer = 0; outer < outer_size; ++outer) {
   28282:	461e      	mov	r6, r3
   28284:	eb09 0104 	add.w	r1, r9, r4
   28288:	42b7      	cmp	r7, r6
   2828a:	dd33      	ble.n	282f4 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xe2>
   2828c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2828e:	eba1 0904 	sub.w	r9, r1, r4
   28292:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    for (int inner = 0; inner < inner_size; ++inner) {
   28296:	2200      	movs	r2, #0
   28298:	4294      	cmp	r4, r2
   2829a:	dd26      	ble.n	282ea <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xd8>
      for (int i = 1; i < axis_size; ++i) {
   2829c:	2001      	movs	r0, #1
      T2 min_max_index = 0;
   2829e:	f04f 0800 	mov.w	r8, #0
      auto min_max_value = input1_data[outer * axis_size * inner_size + inner];
   282a2:	f819 ab01 	ldrb.w	sl, [r9], #1
   282a6:	eb02 0c01 	add.w	ip, r2, r1
      for (int i = 1; i < axis_size; ++i) {
   282aa:	42a8      	cmp	r0, r5
   282ac:	da19      	bge.n	282e2 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xd0>
        if (cmp(curr_value, min_max_value)) {
   282ae:	f89c b000 	ldrb.w	fp, [ip]
   282b2:	44a4      	add	ip, r4
   282b4:	45d3      	cmp	fp, sl
   282b6:	bf84      	itt	hi
   282b8:	4680      	movhi	r8, r0
   282ba:	46da      	movhi	sl, fp
      for (int i = 1; i < axis_size; ++i) {
   282bc:	3001      	adds	r0, #1
   282be:	e7f4      	b.n	282aa <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x98>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
   282c0:	4659      	mov	r1, fp
   282c2:	4630      	mov	r0, r6
   282c4:	f7ff f980 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   282c8:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
   282cc:	9001      	str	r0, [sp, #4]
   282ce:	4640      	mov	r0, r8
   282d0:	f7ff f97a 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   282d4:	9b01      	ldr	r3, [sp, #4]
   282d6:	4283      	cmp	r3, r0
   282d8:	d1a5      	bne.n	28226 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
    inner_size *= input1_shape.Dims(i);
   282da:	435c      	muls	r4, r3
  for (int i = axis + 1; i < dims_count; ++i) {
   282dc:	f10b 0b01 	add.w	fp, fp, #1
   282e0:	e7c9      	b.n	28276 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x64>
      output_data[outer * inner_size + inner] = min_max_index;
   282e2:	f84e 8b04 	str.w	r8, [lr], #4
    for (int inner = 0; inner < inner_size; ++inner) {
   282e6:	3201      	adds	r2, #1
   282e8:	e7d6      	b.n	28298 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x86>
  for (int outer = 0; outer < outer_size; ++outer) {
   282ea:	9a01      	ldr	r2, [sp, #4]
   282ec:	3601      	adds	r6, #1
   282ee:	4423      	add	r3, r4
   282f0:	4411      	add	r1, r2
   282f2:	e7c9      	b.n	28288 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x76>
}
   282f4:	b003      	add	sp, #12
   282f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000282fa <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>:
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   282fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   282fe:	f8d0 a000 	ldr.w	sl, [r0]
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   28302:	4606      	mov	r6, r0
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   28304:	f1ba 0f00 	cmp.w	sl, #0
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   28308:	4689      	mov	r9, r1
   2830a:	4698      	mov	r8, r3
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   2830c:	dc01      	bgt.n	28312 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x18>
   2830e:	f008 fd54 	bl	30dba <abort>
  TFLITE_DCHECK_EQ(input1_shape.DimensionsCount() - 1,
   28312:	f8d8 1000 	ldr.w	r1, [r8]
   28316:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   2831a:	428b      	cmp	r3, r1
   2831c:	d1f7      	bne.n	2830e <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
  int axis = input2_data[0];
   2831e:	6814      	ldr	r4, [r2, #0]
  for (int i = 0; i < axis; ++i) {
   28320:	f04f 0b00 	mov.w	fp, #0
  if (axis < 0) {
   28324:	2c00      	cmp	r4, #0
    axis += input1_shape.DimensionsCount();
   28326:	bfb8      	it	lt
   28328:	4454      	addlt	r4, sl
  const int axis_size = input1_shape.Dims(axis);
   2832a:	4621      	mov	r1, r4
   2832c:	f7ff f94c 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  int outer_size = 1;
   28330:	2701      	movs	r7, #1
  const int axis_size = input1_shape.Dims(axis);
   28332:	4605      	mov	r5, r0
  for (int i = 0; i < axis; ++i) {
   28334:	455c      	cmp	r4, fp
   28336:	dd0f      	ble.n	28358 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x5e>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i));
   28338:	4659      	mov	r1, fp
   2833a:	4630      	mov	r0, r6
   2833c:	f7ff f944 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28340:	4659      	mov	r1, fp
   28342:	9001      	str	r0, [sp, #4]
   28344:	4640      	mov	r0, r8
   28346:	f7ff f93f 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2834a:	9b01      	ldr	r3, [sp, #4]
   2834c:	4283      	cmp	r3, r0
   2834e:	d1de      	bne.n	2830e <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
    outer_size *= input1_shape.Dims(i);
   28350:	435f      	muls	r7, r3
  for (int i = 0; i < axis; ++i) {
   28352:	f10b 0b01 	add.w	fp, fp, #1
   28356:	e7ed      	b.n	28334 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x3a>
  for (int i = axis + 1; i < dims_count; ++i) {
   28358:	f104 0b01 	add.w	fp, r4, #1
  int inner_size = 1;
   2835c:	2401      	movs	r4, #1
  for (int i = axis + 1; i < dims_count; ++i) {
   2835e:	45d3      	cmp	fp, sl
   28360:	db22      	blt.n	283a8 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xae>
   28362:	fb05 f304 	mul.w	r3, r5, r4
   28366:	9301      	str	r3, [sp, #4]
   28368:	2300      	movs	r3, #0
  for (int outer = 0; outer < outer_size; ++outer) {
   2836a:	461e      	mov	r6, r3
   2836c:	eb09 0104 	add.w	r1, r9, r4
   28370:	42b7      	cmp	r7, r6
   28372:	dd33      	ble.n	283dc <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xe2>
   28374:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   28376:	eba1 0904 	sub.w	r9, r1, r4
   2837a:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    for (int inner = 0; inner < inner_size; ++inner) {
   2837e:	2200      	movs	r2, #0
   28380:	4294      	cmp	r4, r2
   28382:	dd26      	ble.n	283d2 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xd8>
      for (int i = 1; i < axis_size; ++i) {
   28384:	2001      	movs	r0, #1
      T2 min_max_index = 0;
   28386:	f04f 0800 	mov.w	r8, #0
      auto min_max_value = input1_data[outer * axis_size * inner_size + inner];
   2838a:	f819 ab01 	ldrb.w	sl, [r9], #1
   2838e:	eb02 0c01 	add.w	ip, r2, r1
      for (int i = 1; i < axis_size; ++i) {
   28392:	42a8      	cmp	r0, r5
   28394:	da19      	bge.n	283ca <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xd0>
        if (cmp(curr_value, min_max_value)) {
   28396:	f89c b000 	ldrb.w	fp, [ip]
   2839a:	44a4      	add	ip, r4
   2839c:	45d3      	cmp	fp, sl
   2839e:	bf3c      	itt	cc
   283a0:	4680      	movcc	r8, r0
   283a2:	46da      	movcc	sl, fp
      for (int i = 1; i < axis_size; ++i) {
   283a4:	3001      	adds	r0, #1
   283a6:	e7f4      	b.n	28392 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x98>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
   283a8:	4659      	mov	r1, fp
   283aa:	4630      	mov	r0, r6
   283ac:	f7ff f90c 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   283b0:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
   283b4:	9001      	str	r0, [sp, #4]
   283b6:	4640      	mov	r0, r8
   283b8:	f7ff f906 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   283bc:	9b01      	ldr	r3, [sp, #4]
   283be:	4283      	cmp	r3, r0
   283c0:	d1a5      	bne.n	2830e <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
    inner_size *= input1_shape.Dims(i);
   283c2:	435c      	muls	r4, r3
  for (int i = axis + 1; i < dims_count; ++i) {
   283c4:	f10b 0b01 	add.w	fp, fp, #1
   283c8:	e7c9      	b.n	2835e <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x64>
      output_data[outer * inner_size + inner] = min_max_index;
   283ca:	f84e 8b04 	str.w	r8, [lr], #4
    for (int inner = 0; inner < inner_size; ++inner) {
   283ce:	3201      	adds	r2, #1
   283d0:	e7d6      	b.n	28380 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x86>
  for (int outer = 0; outer < outer_size; ++outer) {
   283d2:	9a01      	ldr	r2, [sp, #4]
   283d4:	3601      	adds	r6, #1
   283d6:	4423      	add	r3, r4
   283d8:	4411      	add	r1, r2
   283da:	e7c9      	b.n	28370 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x76>
}
   283dc:	b003      	add	sp, #12
   283de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000283e2 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>:
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   283e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   283e6:	f8d0 a000 	ldr.w	sl, [r0]
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   283ea:	4606      	mov	r6, r0
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   283ec:	f1ba 0f00 	cmp.w	sl, #0
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   283f0:	4689      	mov	r9, r1
   283f2:	4698      	mov	r8, r3
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   283f4:	dc01      	bgt.n	283fa <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x18>
   283f6:	f008 fce0 	bl	30dba <abort>
  TFLITE_DCHECK_EQ(input1_shape.DimensionsCount() - 1,
   283fa:	f8d8 1000 	ldr.w	r1, [r8]
   283fe:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   28402:	428b      	cmp	r3, r1
   28404:	d1f7      	bne.n	283f6 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
  int axis = input2_data[0];
   28406:	6814      	ldr	r4, [r2, #0]
  for (int i = 0; i < axis; ++i) {
   28408:	f04f 0b00 	mov.w	fp, #0
  if (axis < 0) {
   2840c:	2c00      	cmp	r4, #0
    axis += input1_shape.DimensionsCount();
   2840e:	bfb8      	it	lt
   28410:	4454      	addlt	r4, sl
  const int axis_size = input1_shape.Dims(axis);
   28412:	4621      	mov	r1, r4
   28414:	f7ff f8d8 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  int outer_size = 1;
   28418:	2701      	movs	r7, #1
  const int axis_size = input1_shape.Dims(axis);
   2841a:	4605      	mov	r5, r0
  for (int i = 0; i < axis; ++i) {
   2841c:	455c      	cmp	r4, fp
   2841e:	dd0f      	ble.n	28440 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x5e>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i));
   28420:	4659      	mov	r1, fp
   28422:	4630      	mov	r0, r6
   28424:	f7ff f8d0 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28428:	4659      	mov	r1, fp
   2842a:	9001      	str	r0, [sp, #4]
   2842c:	4640      	mov	r0, r8
   2842e:	f7ff f8cb 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28432:	9b01      	ldr	r3, [sp, #4]
   28434:	4283      	cmp	r3, r0
   28436:	d1de      	bne.n	283f6 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
    outer_size *= input1_shape.Dims(i);
   28438:	435f      	muls	r7, r3
  for (int i = 0; i < axis; ++i) {
   2843a:	f10b 0b01 	add.w	fp, fp, #1
   2843e:	e7ed      	b.n	2841c <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x3a>
  for (int i = axis + 1; i < dims_count; ++i) {
   28440:	f104 0b01 	add.w	fp, r4, #1
  int inner_size = 1;
   28444:	2401      	movs	r4, #1
  for (int i = axis + 1; i < dims_count; ++i) {
   28446:	45d3      	cmp	fp, sl
   28448:	db22      	blt.n	28490 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xae>
   2844a:	fb05 f304 	mul.w	r3, r5, r4
   2844e:	9301      	str	r3, [sp, #4]
   28450:	2300      	movs	r3, #0
  for (int outer = 0; outer < outer_size; ++outer) {
   28452:	461e      	mov	r6, r3
   28454:	eb09 0104 	add.w	r1, r9, r4
   28458:	42b7      	cmp	r7, r6
   2845a:	dd33      	ble.n	284c4 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xe2>
   2845c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2845e:	eba1 0904 	sub.w	r9, r1, r4
   28462:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    for (int inner = 0; inner < inner_size; ++inner) {
   28466:	2200      	movs	r2, #0
   28468:	4294      	cmp	r4, r2
   2846a:	dd26      	ble.n	284ba <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xd8>
      for (int i = 1; i < axis_size; ++i) {
   2846c:	2001      	movs	r0, #1
      T2 min_max_index = 0;
   2846e:	f04f 0800 	mov.w	r8, #0
      auto min_max_value = input1_data[outer * axis_size * inner_size + inner];
   28472:	f919 ab01 	ldrsb.w	sl, [r9], #1
   28476:	eb02 0c01 	add.w	ip, r2, r1
      for (int i = 1; i < axis_size; ++i) {
   2847a:	42a8      	cmp	r0, r5
   2847c:	da19      	bge.n	284b2 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xd0>
        if (cmp(curr_value, min_max_value)) {
   2847e:	f99c b000 	ldrsb.w	fp, [ip]
   28482:	44a4      	add	ip, r4
   28484:	45d3      	cmp	fp, sl
   28486:	bfc4      	itt	gt
   28488:	4680      	movgt	r8, r0
   2848a:	46da      	movgt	sl, fp
      for (int i = 1; i < axis_size; ++i) {
   2848c:	3001      	adds	r0, #1
   2848e:	e7f4      	b.n	2847a <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x98>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
   28490:	4659      	mov	r1, fp
   28492:	4630      	mov	r0, r6
   28494:	f7ff f898 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28498:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
   2849c:	9001      	str	r0, [sp, #4]
   2849e:	4640      	mov	r0, r8
   284a0:	f7ff f892 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   284a4:	9b01      	ldr	r3, [sp, #4]
   284a6:	4283      	cmp	r3, r0
   284a8:	d1a5      	bne.n	283f6 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
    inner_size *= input1_shape.Dims(i);
   284aa:	435c      	muls	r4, r3
  for (int i = axis + 1; i < dims_count; ++i) {
   284ac:	f10b 0b01 	add.w	fp, fp, #1
   284b0:	e7c9      	b.n	28446 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x64>
      output_data[outer * inner_size + inner] = min_max_index;
   284b2:	f84e 8b04 	str.w	r8, [lr], #4
    for (int inner = 0; inner < inner_size; ++inner) {
   284b6:	3201      	adds	r2, #1
   284b8:	e7d6      	b.n	28468 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x86>
  for (int outer = 0; outer < outer_size; ++outer) {
   284ba:	9a01      	ldr	r2, [sp, #4]
   284bc:	3601      	adds	r6, #1
   284be:	4423      	add	r3, r4
   284c0:	4411      	add	r1, r2
   284c2:	e7c9      	b.n	28458 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x76>
}
   284c4:	b003      	add	sp, #12
   284c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000284ca <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>:
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   284ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   284ce:	f8d0 a000 	ldr.w	sl, [r0]
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   284d2:	4606      	mov	r6, r0
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   284d4:	f1ba 0f00 	cmp.w	sl, #0
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   284d8:	4689      	mov	r9, r1
   284da:	4698      	mov	r8, r3
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   284dc:	dc01      	bgt.n	284e2 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x18>
   284de:	f008 fc6c 	bl	30dba <abort>
  TFLITE_DCHECK_EQ(input1_shape.DimensionsCount() - 1,
   284e2:	f8d8 1000 	ldr.w	r1, [r8]
   284e6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   284ea:	428b      	cmp	r3, r1
   284ec:	d1f7      	bne.n	284de <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
  int axis = input2_data[0];
   284ee:	6814      	ldr	r4, [r2, #0]
  for (int i = 0; i < axis; ++i) {
   284f0:	f04f 0b00 	mov.w	fp, #0
  if (axis < 0) {
   284f4:	2c00      	cmp	r4, #0
    axis += input1_shape.DimensionsCount();
   284f6:	bfb8      	it	lt
   284f8:	4454      	addlt	r4, sl
  const int axis_size = input1_shape.Dims(axis);
   284fa:	4621      	mov	r1, r4
   284fc:	f7ff f864 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  int outer_size = 1;
   28500:	2701      	movs	r7, #1
  const int axis_size = input1_shape.Dims(axis);
   28502:	4605      	mov	r5, r0
  for (int i = 0; i < axis; ++i) {
   28504:	455c      	cmp	r4, fp
   28506:	dd0f      	ble.n	28528 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x5e>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i));
   28508:	4659      	mov	r1, fp
   2850a:	4630      	mov	r0, r6
   2850c:	f7ff f85c 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28510:	4659      	mov	r1, fp
   28512:	9001      	str	r0, [sp, #4]
   28514:	4640      	mov	r0, r8
   28516:	f7ff f857 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2851a:	9b01      	ldr	r3, [sp, #4]
   2851c:	4283      	cmp	r3, r0
   2851e:	d1de      	bne.n	284de <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
    outer_size *= input1_shape.Dims(i);
   28520:	435f      	muls	r7, r3
  for (int i = 0; i < axis; ++i) {
   28522:	f10b 0b01 	add.w	fp, fp, #1
   28526:	e7ed      	b.n	28504 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x3a>
  for (int i = axis + 1; i < dims_count; ++i) {
   28528:	f104 0b01 	add.w	fp, r4, #1
  int inner_size = 1;
   2852c:	2401      	movs	r4, #1
  for (int i = axis + 1; i < dims_count; ++i) {
   2852e:	45d3      	cmp	fp, sl
   28530:	db22      	blt.n	28578 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xae>
   28532:	fb05 f304 	mul.w	r3, r5, r4
   28536:	9301      	str	r3, [sp, #4]
   28538:	2300      	movs	r3, #0
  for (int outer = 0; outer < outer_size; ++outer) {
   2853a:	461e      	mov	r6, r3
   2853c:	eb09 0104 	add.w	r1, r9, r4
   28540:	42b7      	cmp	r7, r6
   28542:	dd33      	ble.n	285ac <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xe2>
   28544:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   28546:	eba1 0904 	sub.w	r9, r1, r4
   2854a:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    for (int inner = 0; inner < inner_size; ++inner) {
   2854e:	2200      	movs	r2, #0
   28550:	4294      	cmp	r4, r2
   28552:	dd26      	ble.n	285a2 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xd8>
      for (int i = 1; i < axis_size; ++i) {
   28554:	2001      	movs	r0, #1
      T2 min_max_index = 0;
   28556:	f04f 0800 	mov.w	r8, #0
      auto min_max_value = input1_data[outer * axis_size * inner_size + inner];
   2855a:	f919 ab01 	ldrsb.w	sl, [r9], #1
   2855e:	eb02 0c01 	add.w	ip, r2, r1
      for (int i = 1; i < axis_size; ++i) {
   28562:	42a8      	cmp	r0, r5
   28564:	da19      	bge.n	2859a <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xd0>
        if (cmp(curr_value, min_max_value)) {
   28566:	f99c b000 	ldrsb.w	fp, [ip]
   2856a:	44a4      	add	ip, r4
   2856c:	45d3      	cmp	fp, sl
   2856e:	bfbc      	itt	lt
   28570:	4680      	movlt	r8, r0
   28572:	46da      	movlt	sl, fp
      for (int i = 1; i < axis_size; ++i) {
   28574:	3001      	adds	r0, #1
   28576:	e7f4      	b.n	28562 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x98>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
   28578:	4659      	mov	r1, fp
   2857a:	4630      	mov	r0, r6
   2857c:	f7ff f824 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28580:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
   28584:	9001      	str	r0, [sp, #4]
   28586:	4640      	mov	r0, r8
   28588:	f7ff f81e 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2858c:	9b01      	ldr	r3, [sp, #4]
   2858e:	4283      	cmp	r3, r0
   28590:	d1a5      	bne.n	284de <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
    inner_size *= input1_shape.Dims(i);
   28592:	435c      	muls	r4, r3
  for (int i = axis + 1; i < dims_count; ++i) {
   28594:	f10b 0b01 	add.w	fp, fp, #1
   28598:	e7c9      	b.n	2852e <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x64>
      output_data[outer * inner_size + inner] = min_max_index;
   2859a:	f84e 8b04 	str.w	r8, [lr], #4
    for (int inner = 0; inner < inner_size; ++inner) {
   2859e:	3201      	adds	r2, #1
   285a0:	e7d6      	b.n	28550 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x86>
  for (int outer = 0; outer < outer_size; ++outer) {
   285a2:	9a01      	ldr	r2, [sp, #4]
   285a4:	3601      	adds	r6, #1
   285a6:	4423      	add	r3, r4
   285a8:	4411      	add	r1, r2
   285aa:	e7c9      	b.n	28540 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x76>
}
   285ac:	b003      	add	sp, #12
   285ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000285b2 <_ZN6tflite3ops5micro11arg_min_max10ArgMinEvalEP13TfLiteContextP10TfLiteNode>:
  return Eval(context, node, false);
   285b2:	2200      	movs	r2, #0
   285b4:	f7ee bcea 	b.w	16f8c <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb>

000285b8 <_ZN6tflite3ops5micro11arg_min_max10ArgMaxEvalEP13TfLiteContextP10TfLiteNode>:
  return Eval(context, node, true);
   285b8:	2201      	movs	r2, #1
   285ba:	f7ee bce7 	b.w	16f8c <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb>

000285be <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi>:
  inline void ReplaceWith(int dimensions_count, const int32* dims_data) {
   285be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ > kMaxSmallSize) {
   285c0:	6803      	ldr	r3, [r0, #0]
  inline void ReplaceWith(int dimensions_count, const int32* dims_data) {
   285c2:	4604      	mov	r4, r0
    if (size_ > kMaxSmallSize) {
   285c4:	2b05      	cmp	r3, #5
  inline void ReplaceWith(int dimensions_count, const int32* dims_data) {
   285c6:	460d      	mov	r5, r1
   285c8:	4616      	mov	r6, r2
    if (size_ > kMaxSmallSize) {
   285ca:	dd03      	ble.n	285d4 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi+0x16>
      delete[] dims_pointer_;
   285cc:	6840      	ldr	r0, [r0, #4]
   285ce:	b108      	cbz	r0, 285d4 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi+0x16>
   285d0:	f007 ffcc 	bl	3056c <_ZdaPv>
    if (dimensions_count > kMaxSmallSize) {
   285d4:	2d05      	cmp	r5, #5
    size_ = dimensions_count;
   285d6:	6025      	str	r5, [r4, #0]
    if (dimensions_count > kMaxSmallSize) {
   285d8:	ea4f 0785 	mov.w	r7, r5, lsl #2
   285dc:	dc06      	bgt.n	285ec <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi+0x2e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   285de:	1d20      	adds	r0, r4, #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
   285e0:	463a      	mov	r2, r7
   285e2:	4631      	mov	r1, r6
  }
   285e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
   285e8:	f008 bc0a 	b.w	30e00 <memcpy>
      dims_pointer_ = new int32[dimensions_count];
   285ec:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
   285f0:	4285      	cmp	r5, r0
   285f2:	bfb4      	ite	lt
   285f4:	4638      	movlt	r0, r7
   285f6:	f04f 30ff 	movge.w	r0, #4294967295	; 0xffffffff
   285fa:	f007 ffc6 	bl	3058a <_Znaj>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   285fe:	6823      	ldr	r3, [r4, #0]
      dims_pointer_ = new int32[dimensions_count];
   28600:	6060      	str	r0, [r4, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   28602:	2b05      	cmp	r3, #5
   28604:	dcec      	bgt.n	285e0 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi+0x22>
   28606:	e7ea      	b.n	285de <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi+0x20>

00028608 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->inputs->data[index]];
   28608:	680b      	ldr	r3, [r1, #0]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   2860a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2860e:	685a      	ldr	r2, [r3, #4]
  return &context->tensors[node->outputs->data[index]];
   28610:	684b      	ldr	r3, [r1, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   28612:	6884      	ldr	r4, [r0, #8]
   28614:	685d      	ldr	r5, [r3, #4]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   28616:	b08c      	sub	sp, #48	; 0x30
   28618:	eb04 1585 	add.w	r5, r4, r5, lsl #6
  if (tensor == nullptr) {
   2861c:	eb14 1482 	adds.w	r4, r4, r2, lsl #6
   28620:	d108      	bne.n	28634 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x2c>
  RuntimeShape() : size_(0) {}
   28622:	9400      	str	r4, [sp, #0]
   28624:	b985      	cbnz	r5, 28648 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x40>
   28626:	9506      	str	r5, [sp, #24]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   28628:	9f00      	ldr	r7, [sp, #0]
   2862a:	9b06      	ldr	r3, [sp, #24]
   2862c:	429f      	cmp	r7, r3
   2862e:	d015      	beq.n	2865c <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x54>
   28630:	f008 fbc3 	bl	30dba <abort>
  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
   28634:	2300      	movs	r3, #0
  const int dims_size = dims->size;
   28636:	68a2      	ldr	r2, [r4, #8]
    ReplaceWith(dimensions_count, dims_data);
   28638:	4668      	mov	r0, sp
   2863a:	f852 1b04 	ldr.w	r1, [r2], #4
  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
   2863e:	9300      	str	r3, [sp, #0]
    ReplaceWith(dimensions_count, dims_data);
   28640:	f7ff ffbd 	bl	285be <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   28644:	6864      	ldr	r4, [r4, #4]
   28646:	e7ed      	b.n	28624 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x1c>
  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
   28648:	2300      	movs	r3, #0
  const int dims_size = dims->size;
   2864a:	68aa      	ldr	r2, [r5, #8]
    ReplaceWith(dimensions_count, dims_data);
   2864c:	a806      	add	r0, sp, #24
   2864e:	f852 1b04 	ldr.w	r1, [r2], #4
  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
   28652:	9306      	str	r3, [sp, #24]
    ReplaceWith(dimensions_count, dims_data);
   28654:	f7ff ffb3 	bl	285be <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   28658:	686d      	ldr	r5, [r5, #4]
   2865a:	e7e5      	b.n	28628 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x20>
  for (int i = 0; i < dims_count; ++i) {
   2865c:	2600      	movs	r6, #0
   2865e:	42b7      	cmp	r7, r6
   28660:	dd0c      	ble.n	2867c <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x74>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   28662:	4631      	mov	r1, r6
   28664:	4668      	mov	r0, sp
   28666:	f7fe ffaf 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2866a:	4631      	mov	r1, r6
   2866c:	4680      	mov	r8, r0
   2866e:	a806      	add	r0, sp, #24
   28670:	f7fe ffaa 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28674:	4580      	cmp	r8, r0
   28676:	d1db      	bne.n	28630 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x28>
  for (int i = 0; i < dims_count; ++i) {
   28678:	3601      	adds	r6, #1
   2867a:	e7f0      	b.n	2865e <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x56>
    for (int i = 0; i < size_; i++) {
   2867c:	2300      	movs	r3, #0
    int buffer_size = 1;
   2867e:	2101      	movs	r1, #1
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   28680:	2f05      	cmp	r7, #5
   28682:	bfcc      	ite	gt
   28684:	9a01      	ldrgt	r2, [sp, #4]
   28686:	aa01      	addle	r2, sp, #4
    for (int i = 0; i < size_; i++) {
   28688:	429f      	cmp	r7, r3
   2868a:	dc0b      	bgt.n	286a4 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x9c>
   2868c:	462b      	mov	r3, r5

inline void Ceil(const RuntimeShape& input_shape, const float* input_data,
                 const RuntimeShape& output_shape, float* output_data) {
  const int flat_size = MatchingFlatSize(input_shape, output_shape);

  for (int i = 0; i < flat_size; ++i) {
   2868e:	2200      	movs	r2, #0
   28690:	428a      	cmp	r2, r1
   28692:	da0c      	bge.n	286ae <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0xa6>
    output_data[i] = std::ceil(input_data[i]);
   28694:	ecf4 7a01 	vldmia	r4!, {s15}
  { return __builtin_ceilf(__x); }
   28698:	fefa 7a67 	vrintp.f32	s15, s15
  for (int i = 0; i < flat_size; ++i) {
   2869c:	3201      	adds	r2, #1
    output_data[i] = std::ceil(input_data[i]);
   2869e:	ece3 7a01 	vstmia	r3!, {s15}
  for (int i = 0; i < flat_size; ++i) {
   286a2:	e7f5      	b.n	28690 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x88>
      buffer_size *= dims_data[i];
   286a4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   286a8:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   286aa:	4341      	muls	r1, r0
    for (int i = 0; i < size_; i++) {
   286ac:	e7ec      	b.n	28688 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x80>
                      GetTensorShape(output), GetTensorData<float>(output));
   286ae:	a806      	add	r0, sp, #24
   286b0:	f7fe ff7f 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Ceil(GetTensorShape(input), GetTensorData<float>(input),
   286b4:	4668      	mov	r0, sp
   286b6:	f7fe ff7c 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   286ba:	2000      	movs	r0, #0
   286bc:	b00c      	add	sp, #48	; 0x30
   286be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000286c2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>:
                            const RuntimeShape& check_shape_1) {
   286c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   286c6:	6805      	ldr	r5, [r0, #0]
   286c8:	680b      	ldr	r3, [r1, #0]
                            const RuntimeShape& check_shape_1) {
   286ca:	4604      	mov	r4, r0
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   286cc:	429d      	cmp	r5, r3
                            const RuntimeShape& check_shape_1) {
   286ce:	4688      	mov	r8, r1
   286d0:	4617      	mov	r7, r2
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   286d2:	d001      	beq.n	286d8 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x16>
   286d4:	f008 fb71 	bl	30dba <abort>
  for (int i = 0; i < dims_count; ++i) {
   286d8:	2600      	movs	r6, #0
   286da:	42ae      	cmp	r6, r5
   286dc:	da0c      	bge.n	286f8 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x36>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   286de:	4631      	mov	r1, r6
   286e0:	4620      	mov	r0, r4
   286e2:	f7fe ff71 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   286e6:	4631      	mov	r1, r6
   286e8:	4681      	mov	r9, r0
   286ea:	4640      	mov	r0, r8
   286ec:	f7fe ff6c 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   286f0:	4581      	cmp	r9, r0
   286f2:	d1ef      	bne.n	286d4 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x12>
  for (int i = 0; i < dims_count; ++i) {
   286f4:	3601      	adds	r6, #1
   286f6:	e7f0      	b.n	286da <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x18>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   286f8:	683b      	ldr	r3, [r7, #0]
   286fa:	429d      	cmp	r5, r3
   286fc:	d1ea      	bne.n	286d4 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x12>
  for (int i = 0; i < dims_count; ++i) {
   286fe:	2600      	movs	r6, #0
   28700:	42b5      	cmp	r5, r6
   28702:	dd0c      	ble.n	2871e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x5c>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   28704:	4631      	mov	r1, r6
   28706:	4620      	mov	r0, r4
   28708:	f7fe ff5e 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2870c:	4631      	mov	r1, r6
   2870e:	4680      	mov	r8, r0
   28710:	4638      	mov	r0, r7
   28712:	f7fe ff59 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28716:	4580      	cmp	r8, r0
   28718:	d1dc      	bne.n	286d4 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x12>
  for (int i = 0; i < dims_count; ++i) {
   2871a:	3601      	adds	r6, #1
   2871c:	e7f0      	b.n	28700 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x3e>
    for (int i = 0; i < size_; i++) {
   2871e:	2300      	movs	r3, #0
    int buffer_size = 1;
   28720:	2001      	movs	r0, #1
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   28722:	2d05      	cmp	r5, #5
   28724:	bfcc      	ite	gt
   28726:	6864      	ldrgt	r4, [r4, #4]
   28728:	3404      	addle	r4, #4
    for (int i = 0; i < size_; i++) {
   2872a:	429d      	cmp	r5, r3
   2872c:	dd04      	ble.n	28738 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x76>
      buffer_size *= dims_data[i];
   2872e:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   28732:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   28734:	4350      	muls	r0, r2
    for (int i = 0; i < size_; i++) {
   28736:	e7f8      	b.n	2872a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x68>
}
   28738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002873c <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>:
    const RuntimeShape& unextended_output_shape) {
   2873c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28740:	461f      	mov	r7, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   28742:	680b      	ldr	r3, [r1, #0]
    const RuntimeShape& unextended_output_shape) {
   28744:	4606      	mov	r6, r0
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   28746:	2b04      	cmp	r3, #4
    const RuntimeShape& unextended_output_shape) {
   28748:	4614      	mov	r4, r2
   2874a:	b09c      	sub	sp, #112	; 0x70
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   2874c:	dd01      	ble.n	28752 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_+0x16>
   2874e:	f008 fb34 	bl	30dba <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   28752:	6813      	ldr	r3, [r2, #0]
   28754:	2b04      	cmp	r3, #4
   28756:	dcfa      	bgt.n	2874e <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_+0x12>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   28758:	683b      	ldr	r3, [r7, #0]
   2875a:	2b04      	cmp	r3, #4
   2875c:	dcf7      	bgt.n	2874e <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_+0x12>
    return RuntimeShape(new_shape_size, shape, 1);
   2875e:	460a      	mov	r2, r1
   28760:	2301      	movs	r3, #1
   28762:	2104      	movs	r1, #4
   28764:	4668      	mov	r0, sp
   28766:	f7fe ffc4 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2876a:	4622      	mov	r2, r4
  for (int i = 0; i < N; ++i) {
   2876c:	2400      	movs	r4, #0
   2876e:	2301      	movs	r3, #1
   28770:	2104      	movs	r1, #4
   28772:	a806      	add	r0, sp, #24
   28774:	f7fe ffbd 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  CopyDimsToDesc<N>(extended_input0_shape, desc0_out);
   28778:	4668      	mov	r0, sp
   2877a:	a90c      	add	r1, sp, #48	; 0x30
   2877c:	f7ff f9a7 	bl	27ace <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
  CopyDimsToDesc<N>(extended_input1_shape, desc1_out);
   28780:	a914      	add	r1, sp, #80	; 0x50
   28782:	a806      	add	r0, sp, #24
   28784:	f7ff f9a3 	bl	27ace <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
  for (int i = 0; i < N; ++i) {
   28788:	46a2      	mov	sl, r4
   2878a:	f10d 0950 	add.w	r9, sp, #80	; 0x50
   2878e:	f10d 0830 	add.w	r8, sp, #48	; 0x30
    const int extent0 = extended_input0_shape.Dims(i);
   28792:	4621      	mov	r1, r4
   28794:	4668      	mov	r0, sp
   28796:	f7fe ff17 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int extent1 = extended_input1_shape.Dims(i);
   2879a:	4621      	mov	r1, r4
    const int extent0 = extended_input0_shape.Dims(i);
   2879c:	4605      	mov	r5, r0
    const int extent1 = extended_input1_shape.Dims(i);
   2879e:	a806      	add	r0, sp, #24
   287a0:	f7fe ff12 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
    if (extent0 != extent1) {
   287a4:	4285      	cmp	r5, r0
   287a6:	d005      	beq.n	287b4 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_+0x78>
      if (extent0 == 1) {
   287a8:	2d01      	cmp	r5, #1
   287aa:	d12c      	bne.n	28806 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_+0xca>
        desc0_out->strides[i] = 0;
   287ac:	f8c8 a010 	str.w	sl, [r8, #16]
        desc0_out->extents[i] = extent1;
   287b0:	f8c8 0000 	str.w	r0, [r8]
  for (int i = 0; i < N; ++i) {
   287b4:	3401      	adds	r4, #1
   287b6:	2c04      	cmp	r4, #4
   287b8:	f109 0904 	add.w	r9, r9, #4
   287bc:	f108 0804 	add.w	r8, r8, #4
   287c0:	d1e7      	bne.n	28792 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_+0x56>
  auto extended_input1_shape = RuntimeShape::ExtendedShape(N, input1_shape);
   287c2:	a806      	add	r0, sp, #24
   287c4:	f7fe fef5 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  auto extended_input0_shape = RuntimeShape::ExtendedShape(N, input0_shape);
   287c8:	4668      	mov	r0, sp
   287ca:	f7fe fef2 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
          desc2};
   287ce:	f106 0518 	add.w	r5, r6, #24
   287d2:	463a      	mov	r2, r7
   287d4:	4621      	mov	r1, r4
   287d6:	2301      	movs	r3, #1
   287d8:	4630      	mov	r0, r6
   287da:	ac0c      	add	r4, sp, #48	; 0x30
   287dc:	f7fe ff89 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   287e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   287e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   287e4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   287e8:	ac14      	add	r4, sp, #80	; 0x50
   287ea:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   287ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   287f0:	f106 0538 	add.w	r5, r6, #56	; 0x38
   287f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   287f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   287fa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
   287fe:	4630      	mov	r0, r6
   28800:	b01c      	add	sp, #112	; 0x70
   28802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        TFLITE_DCHECK_EQ(extent1, 1);
   28806:	2801      	cmp	r0, #1
   28808:	d1a1      	bne.n	2874e <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_+0x12>
        desc1_out->strides[i] = 0;
   2880a:	f8c9 a010 	str.w	sl, [r9, #16]
        desc1_out->extents[i] = extent0;
   2880e:	f8c9 5000 	str.w	r5, [r9]
   28812:	e7cf      	b.n	287b4 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_+0x78>

00028814 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_7EqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   28814:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   28818:	b098      	sub	sp, #96	; 0x60
   2881a:	4693      	mov	fp, r2
  const BroadcastComparison4DSlowCommon dims =
   2881c:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   2881e:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   28820:	9b21      	ldr	r3, [sp, #132]	; 0x84
   28822:	f7ff ff8b 	bl	2873c <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   28826:	2400      	movs	r4, #0
   28828:	2100      	movs	r1, #0
   2882a:	a802      	add	r0, sp, #8
   2882c:	f7fe fecc 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28830:	42a0      	cmp	r0, r4
   28832:	dd45      	ble.n	288c0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_7EqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xac>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   28834:	2500      	movs	r5, #0
   28836:	2101      	movs	r1, #1
   28838:	a802      	add	r0, sp, #8
   2883a:	f7fe fec5 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2883e:	42a8      	cmp	r0, r5
   28840:	dd3c      	ble.n	288bc <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_7EqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa8>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   28842:	2600      	movs	r6, #0
   28844:	2102      	movs	r1, #2
   28846:	a802      	add	r0, sp, #8
   28848:	f7fe febe 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2884c:	42b0      	cmp	r0, r6
   2884e:	dd33      	ble.n	288b8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_7EqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa4>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28850:	2700      	movs	r7, #0
   28852:	2103      	movs	r1, #3
   28854:	a802      	add	r0, sp, #8
   28856:	f7fe feb7 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2885a:	42b8      	cmp	r0, r7
   2885c:	dd2a      	ble.n	288b4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_7EqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   2885e:	4633      	mov	r3, r6
   28860:	462a      	mov	r2, r5
   28862:	4621      	mov	r1, r4
   28864:	9700      	str	r7, [sp, #0]
   28866:	a808      	add	r0, sp, #32
   28868:	f7fe ffa6 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   2886c:	4633      	mov	r3, r6
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   2886e:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   28870:	462a      	mov	r2, r5
   28872:	4621      	mov	r1, r4
   28874:	9700      	str	r7, [sp, #0]
   28876:	a810      	add	r0, sp, #64	; 0x40
   28878:	f7fe ff9e 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   2887c:	4681      	mov	r9, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   2887e:	462a      	mov	r2, r5
   28880:	4633      	mov	r3, r6
   28882:	9700      	str	r7, [sp, #0]
   28884:	4621      	mov	r1, r4
   28886:	a802      	add	r0, sp, #8
   28888:	f7fe ff60 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   2888c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   2888e:	eb0b 0a8a 	add.w	sl, fp, sl, lsl #2
   28892:	eb03 0989 	add.w	r9, r3, r9, lsl #2
  return lhs == rhs;
   28896:	ed9a 7a00 	vldr	s14, [sl]
   2889a:	edd9 7a00 	vldr	s15, [r9]
   2889e:	eeb4 7a67 	vcmp.f32	s14, s15
   288a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   288a6:	bf0c      	ite	eq
   288a8:	2201      	moveq	r2, #1
   288aa:	2200      	movne	r2, #0
   288ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   288ae:	3701      	adds	r7, #1
  return lhs == rhs;
   288b0:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   288b2:	e7ce      	b.n	28852 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_7EqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   288b4:	3601      	adds	r6, #1
   288b6:	e7c5      	b.n	28844 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_7EqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   288b8:	3501      	adds	r5, #1
   288ba:	e7bc      	b.n	28836 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_7EqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   288bc:	3401      	adds	r4, #1
   288be:	e7b3      	b.n	28828 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_7EqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   288c0:	a802      	add	r0, sp, #8
   288c2:	f7fe fe76 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   288c6:	b018      	add	sp, #96	; 0x60
   288c8:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

000288cc <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_10NotEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   288cc:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   288d0:	b098      	sub	sp, #96	; 0x60
   288d2:	4693      	mov	fp, r2
  const BroadcastComparison4DSlowCommon dims =
   288d4:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   288d6:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   288d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
   288da:	f7ff ff2f 	bl	2873c <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   288de:	2400      	movs	r4, #0
   288e0:	2100      	movs	r1, #0
   288e2:	a802      	add	r0, sp, #8
   288e4:	f7fe fe70 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   288e8:	42a0      	cmp	r0, r4
   288ea:	dd45      	ble.n	28978 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_10NotEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xac>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   288ec:	2500      	movs	r5, #0
   288ee:	2101      	movs	r1, #1
   288f0:	a802      	add	r0, sp, #8
   288f2:	f7fe fe69 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   288f6:	42a8      	cmp	r0, r5
   288f8:	dd3c      	ble.n	28974 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_10NotEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa8>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   288fa:	2600      	movs	r6, #0
   288fc:	2102      	movs	r1, #2
   288fe:	a802      	add	r0, sp, #8
   28900:	f7fe fe62 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28904:	42b0      	cmp	r0, r6
   28906:	dd33      	ble.n	28970 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_10NotEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa4>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28908:	2700      	movs	r7, #0
   2890a:	2103      	movs	r1, #3
   2890c:	a802      	add	r0, sp, #8
   2890e:	f7fe fe5b 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28912:	42b8      	cmp	r0, r7
   28914:	dd2a      	ble.n	2896c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_10NotEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28916:	4633      	mov	r3, r6
   28918:	462a      	mov	r2, r5
   2891a:	4621      	mov	r1, r4
   2891c:	9700      	str	r7, [sp, #0]
   2891e:	a808      	add	r0, sp, #32
   28920:	f7fe ff4a 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   28924:	4633      	mov	r3, r6
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28926:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   28928:	462a      	mov	r2, r5
   2892a:	4621      	mov	r1, r4
   2892c:	9700      	str	r7, [sp, #0]
   2892e:	a810      	add	r0, sp, #64	; 0x40
   28930:	f7fe ff42 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   28934:	4681      	mov	r9, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   28936:	462a      	mov	r2, r5
   28938:	4633      	mov	r3, r6
   2893a:	9700      	str	r7, [sp, #0]
   2893c:	4621      	mov	r1, r4
   2893e:	a802      	add	r0, sp, #8
   28940:	f7fe ff04 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28944:	9b20      	ldr	r3, [sp, #128]	; 0x80
   28946:	eb0b 0a8a 	add.w	sl, fp, sl, lsl #2
   2894a:	eb03 0989 	add.w	r9, r3, r9, lsl #2
  return lhs != rhs;
   2894e:	ed9a 7a00 	vldr	s14, [sl]
   28952:	edd9 7a00 	vldr	s15, [r9]
   28956:	eeb4 7a67 	vcmp.f32	s14, s15
   2895a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2895e:	bf14      	ite	ne
   28960:	2201      	movne	r2, #1
   28962:	2200      	moveq	r2, #0
   28964:	9b22      	ldr	r3, [sp, #136]	; 0x88
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28966:	3701      	adds	r7, #1
  return lhs != rhs;
   28968:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   2896a:	e7ce      	b.n	2890a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_10NotEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   2896c:	3601      	adds	r6, #1
   2896e:	e7c5      	b.n	288fc <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_10NotEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   28970:	3501      	adds	r5, #1
   28972:	e7bc      	b.n	288ee <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_10NotEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   28974:	3401      	adds	r4, #1
   28976:	e7b3      	b.n	288e0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_10NotEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   28978:	a802      	add	r0, sp, #8
   2897a:	f7fe fe1a 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   2897e:	b018      	add	sp, #96	; 0x60
   28980:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

00028984 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_9GreaterFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   28984:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   28988:	b098      	sub	sp, #96	; 0x60
   2898a:	4693      	mov	fp, r2
  const BroadcastComparison4DSlowCommon dims =
   2898c:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   2898e:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   28990:	9b21      	ldr	r3, [sp, #132]	; 0x84
   28992:	f7ff fed3 	bl	2873c <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   28996:	2400      	movs	r4, #0
   28998:	2100      	movs	r1, #0
   2899a:	a802      	add	r0, sp, #8
   2899c:	f7fe fe14 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   289a0:	42a0      	cmp	r0, r4
   289a2:	dd45      	ble.n	28a30 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_9GreaterFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xac>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   289a4:	2500      	movs	r5, #0
   289a6:	2101      	movs	r1, #1
   289a8:	a802      	add	r0, sp, #8
   289aa:	f7fe fe0d 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   289ae:	42a8      	cmp	r0, r5
   289b0:	dd3c      	ble.n	28a2c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_9GreaterFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa8>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   289b2:	2600      	movs	r6, #0
   289b4:	2102      	movs	r1, #2
   289b6:	a802      	add	r0, sp, #8
   289b8:	f7fe fe06 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   289bc:	42b0      	cmp	r0, r6
   289be:	dd33      	ble.n	28a28 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_9GreaterFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa4>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   289c0:	2700      	movs	r7, #0
   289c2:	2103      	movs	r1, #3
   289c4:	a802      	add	r0, sp, #8
   289c6:	f7fe fdff 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   289ca:	42b8      	cmp	r0, r7
   289cc:	dd2a      	ble.n	28a24 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_9GreaterFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   289ce:	4633      	mov	r3, r6
   289d0:	462a      	mov	r2, r5
   289d2:	4621      	mov	r1, r4
   289d4:	9700      	str	r7, [sp, #0]
   289d6:	a808      	add	r0, sp, #32
   289d8:	f7fe feee 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   289dc:	4633      	mov	r3, r6
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   289de:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   289e0:	462a      	mov	r2, r5
   289e2:	4621      	mov	r1, r4
   289e4:	9700      	str	r7, [sp, #0]
   289e6:	a810      	add	r0, sp, #64	; 0x40
   289e8:	f7fe fee6 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   289ec:	4681      	mov	r9, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   289ee:	462a      	mov	r2, r5
   289f0:	4633      	mov	r3, r6
   289f2:	9700      	str	r7, [sp, #0]
   289f4:	4621      	mov	r1, r4
   289f6:	a802      	add	r0, sp, #8
   289f8:	f7fe fea8 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   289fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
   289fe:	eb0b 0a8a 	add.w	sl, fp, sl, lsl #2
   28a02:	eb03 0989 	add.w	r9, r3, r9, lsl #2
  return lhs > rhs;
   28a06:	ed9a 7a00 	vldr	s14, [sl]
   28a0a:	edd9 7a00 	vldr	s15, [r9]
   28a0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
   28a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28a16:	bfcc      	ite	gt
   28a18:	2201      	movgt	r2, #1
   28a1a:	2200      	movle	r2, #0
   28a1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28a1e:	3701      	adds	r7, #1
  return lhs > rhs;
   28a20:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28a22:	e7ce      	b.n	289c2 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_9GreaterFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   28a24:	3601      	adds	r6, #1
   28a26:	e7c5      	b.n	289b4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_9GreaterFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   28a28:	3501      	adds	r5, #1
   28a2a:	e7bc      	b.n	289a6 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_9GreaterFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   28a2c:	3401      	adds	r4, #1
   28a2e:	e7b3      	b.n	28998 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_9GreaterFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   28a30:	a802      	add	r0, sp, #8
   28a32:	f7fe fdbe 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   28a36:	b018      	add	sp, #96	; 0x60
   28a38:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

00028a3c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_14GreaterEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   28a3c:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   28a40:	b098      	sub	sp, #96	; 0x60
   28a42:	4693      	mov	fp, r2
  const BroadcastComparison4DSlowCommon dims =
   28a44:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   28a46:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   28a48:	9b21      	ldr	r3, [sp, #132]	; 0x84
   28a4a:	f7ff fe77 	bl	2873c <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   28a4e:	2400      	movs	r4, #0
   28a50:	2100      	movs	r1, #0
   28a52:	a802      	add	r0, sp, #8
   28a54:	f7fe fdb8 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28a58:	42a0      	cmp	r0, r4
   28a5a:	dd45      	ble.n	28ae8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_14GreaterEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xac>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   28a5c:	2500      	movs	r5, #0
   28a5e:	2101      	movs	r1, #1
   28a60:	a802      	add	r0, sp, #8
   28a62:	f7fe fdb1 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28a66:	42a8      	cmp	r0, r5
   28a68:	dd3c      	ble.n	28ae4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_14GreaterEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa8>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   28a6a:	2600      	movs	r6, #0
   28a6c:	2102      	movs	r1, #2
   28a6e:	a802      	add	r0, sp, #8
   28a70:	f7fe fdaa 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28a74:	42b0      	cmp	r0, r6
   28a76:	dd33      	ble.n	28ae0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_14GreaterEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa4>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28a78:	2700      	movs	r7, #0
   28a7a:	2103      	movs	r1, #3
   28a7c:	a802      	add	r0, sp, #8
   28a7e:	f7fe fda3 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28a82:	42b8      	cmp	r0, r7
   28a84:	dd2a      	ble.n	28adc <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_14GreaterEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28a86:	4633      	mov	r3, r6
   28a88:	462a      	mov	r2, r5
   28a8a:	4621      	mov	r1, r4
   28a8c:	9700      	str	r7, [sp, #0]
   28a8e:	a808      	add	r0, sp, #32
   28a90:	f7fe fe92 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   28a94:	4633      	mov	r3, r6
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28a96:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   28a98:	462a      	mov	r2, r5
   28a9a:	4621      	mov	r1, r4
   28a9c:	9700      	str	r7, [sp, #0]
   28a9e:	a810      	add	r0, sp, #64	; 0x40
   28aa0:	f7fe fe8a 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   28aa4:	4681      	mov	r9, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   28aa6:	462a      	mov	r2, r5
   28aa8:	4633      	mov	r3, r6
   28aaa:	9700      	str	r7, [sp, #0]
   28aac:	4621      	mov	r1, r4
   28aae:	a802      	add	r0, sp, #8
   28ab0:	f7fe fe4c 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28ab4:	9b20      	ldr	r3, [sp, #128]	; 0x80
   28ab6:	eb0b 0a8a 	add.w	sl, fp, sl, lsl #2
   28aba:	eb03 0989 	add.w	r9, r3, r9, lsl #2
  return lhs >= rhs;
   28abe:	ed9a 7a00 	vldr	s14, [sl]
   28ac2:	edd9 7a00 	vldr	s15, [r9]
   28ac6:	eeb4 7ae7 	vcmpe.f32	s14, s15
   28aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28ace:	bfac      	ite	ge
   28ad0:	2201      	movge	r2, #1
   28ad2:	2200      	movlt	r2, #0
   28ad4:	9b22      	ldr	r3, [sp, #136]	; 0x88
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28ad6:	3701      	adds	r7, #1
  return lhs >= rhs;
   28ad8:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28ada:	e7ce      	b.n	28a7a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_14GreaterEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   28adc:	3601      	adds	r6, #1
   28ade:	e7c5      	b.n	28a6c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_14GreaterEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   28ae0:	3501      	adds	r5, #1
   28ae2:	e7bc      	b.n	28a5e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_14GreaterEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   28ae4:	3401      	adds	r4, #1
   28ae6:	e7b3      	b.n	28a50 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_14GreaterEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   28ae8:	a802      	add	r0, sp, #8
   28aea:	f7fe fd62 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   28aee:	b018      	add	sp, #96	; 0x60
   28af0:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

00028af4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_6LessFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   28af4:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   28af8:	b098      	sub	sp, #96	; 0x60
   28afa:	4693      	mov	fp, r2
  const BroadcastComparison4DSlowCommon dims =
   28afc:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   28afe:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   28b00:	9b21      	ldr	r3, [sp, #132]	; 0x84
   28b02:	f7ff fe1b 	bl	2873c <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   28b06:	2400      	movs	r4, #0
   28b08:	2100      	movs	r1, #0
   28b0a:	a802      	add	r0, sp, #8
   28b0c:	f7fe fd5c 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28b10:	42a0      	cmp	r0, r4
   28b12:	dd45      	ble.n	28ba0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_6LessFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xac>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   28b14:	2500      	movs	r5, #0
   28b16:	2101      	movs	r1, #1
   28b18:	a802      	add	r0, sp, #8
   28b1a:	f7fe fd55 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28b1e:	42a8      	cmp	r0, r5
   28b20:	dd3c      	ble.n	28b9c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_6LessFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa8>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   28b22:	2600      	movs	r6, #0
   28b24:	2102      	movs	r1, #2
   28b26:	a802      	add	r0, sp, #8
   28b28:	f7fe fd4e 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28b2c:	42b0      	cmp	r0, r6
   28b2e:	dd33      	ble.n	28b98 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_6LessFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa4>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28b30:	2700      	movs	r7, #0
   28b32:	2103      	movs	r1, #3
   28b34:	a802      	add	r0, sp, #8
   28b36:	f7fe fd47 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28b3a:	42b8      	cmp	r0, r7
   28b3c:	dd2a      	ble.n	28b94 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_6LessFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28b3e:	4633      	mov	r3, r6
   28b40:	462a      	mov	r2, r5
   28b42:	4621      	mov	r1, r4
   28b44:	9700      	str	r7, [sp, #0]
   28b46:	a808      	add	r0, sp, #32
   28b48:	f7fe fe36 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   28b4c:	4633      	mov	r3, r6
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28b4e:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   28b50:	462a      	mov	r2, r5
   28b52:	4621      	mov	r1, r4
   28b54:	9700      	str	r7, [sp, #0]
   28b56:	a810      	add	r0, sp, #64	; 0x40
   28b58:	f7fe fe2e 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   28b5c:	4681      	mov	r9, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   28b5e:	462a      	mov	r2, r5
   28b60:	4633      	mov	r3, r6
   28b62:	9700      	str	r7, [sp, #0]
   28b64:	4621      	mov	r1, r4
   28b66:	a802      	add	r0, sp, #8
   28b68:	f7fe fdf0 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28b6c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   28b6e:	eb0b 0a8a 	add.w	sl, fp, sl, lsl #2
   28b72:	eb03 0989 	add.w	r9, r3, r9, lsl #2
  return lhs < rhs;
   28b76:	ed9a 7a00 	vldr	s14, [sl]
   28b7a:	edd9 7a00 	vldr	s15, [r9]
   28b7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
   28b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28b86:	bf4c      	ite	mi
   28b88:	2201      	movmi	r2, #1
   28b8a:	2200      	movpl	r2, #0
   28b8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28b8e:	3701      	adds	r7, #1
  return lhs < rhs;
   28b90:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28b92:	e7ce      	b.n	28b32 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_6LessFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   28b94:	3601      	adds	r6, #1
   28b96:	e7c5      	b.n	28b24 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_6LessFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   28b98:	3501      	adds	r5, #1
   28b9a:	e7bc      	b.n	28b16 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_6LessFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   28b9c:	3401      	adds	r4, #1
   28b9e:	e7b3      	b.n	28b08 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_6LessFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   28ba0:	a802      	add	r0, sp, #8
   28ba2:	f7fe fd06 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   28ba6:	b018      	add	sp, #96	; 0x60
   28ba8:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

00028bac <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_11LessEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   28bac:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   28bb0:	b098      	sub	sp, #96	; 0x60
   28bb2:	4693      	mov	fp, r2
  const BroadcastComparison4DSlowCommon dims =
   28bb4:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   28bb6:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   28bb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
   28bba:	f7ff fdbf 	bl	2873c <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   28bbe:	2400      	movs	r4, #0
   28bc0:	2100      	movs	r1, #0
   28bc2:	a802      	add	r0, sp, #8
   28bc4:	f7fe fd00 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28bc8:	42a0      	cmp	r0, r4
   28bca:	dd45      	ble.n	28c58 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_11LessEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xac>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   28bcc:	2500      	movs	r5, #0
   28bce:	2101      	movs	r1, #1
   28bd0:	a802      	add	r0, sp, #8
   28bd2:	f7fe fcf9 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28bd6:	42a8      	cmp	r0, r5
   28bd8:	dd3c      	ble.n	28c54 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_11LessEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa8>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   28bda:	2600      	movs	r6, #0
   28bdc:	2102      	movs	r1, #2
   28bde:	a802      	add	r0, sp, #8
   28be0:	f7fe fcf2 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28be4:	42b0      	cmp	r0, r6
   28be6:	dd33      	ble.n	28c50 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_11LessEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa4>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28be8:	2700      	movs	r7, #0
   28bea:	2103      	movs	r1, #3
   28bec:	a802      	add	r0, sp, #8
   28bee:	f7fe fceb 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28bf2:	42b8      	cmp	r0, r7
   28bf4:	dd2a      	ble.n	28c4c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_11LessEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28bf6:	4633      	mov	r3, r6
   28bf8:	462a      	mov	r2, r5
   28bfa:	4621      	mov	r1, r4
   28bfc:	9700      	str	r7, [sp, #0]
   28bfe:	a808      	add	r0, sp, #32
   28c00:	f7fe fdda 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   28c04:	4633      	mov	r3, r6
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28c06:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   28c08:	462a      	mov	r2, r5
   28c0a:	4621      	mov	r1, r4
   28c0c:	9700      	str	r7, [sp, #0]
   28c0e:	a810      	add	r0, sp, #64	; 0x40
   28c10:	f7fe fdd2 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   28c14:	4681      	mov	r9, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   28c16:	462a      	mov	r2, r5
   28c18:	4633      	mov	r3, r6
   28c1a:	9700      	str	r7, [sp, #0]
   28c1c:	4621      	mov	r1, r4
   28c1e:	a802      	add	r0, sp, #8
   28c20:	f7fe fd94 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28c24:	9b20      	ldr	r3, [sp, #128]	; 0x80
   28c26:	eb0b 0a8a 	add.w	sl, fp, sl, lsl #2
   28c2a:	eb03 0989 	add.w	r9, r3, r9, lsl #2
  return lhs <= rhs;
   28c2e:	ed9a 7a00 	vldr	s14, [sl]
   28c32:	edd9 7a00 	vldr	s15, [r9]
   28c36:	eeb4 7ae7 	vcmpe.f32	s14, s15
   28c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28c3e:	bf94      	ite	ls
   28c40:	2201      	movls	r2, #1
   28c42:	2200      	movhi	r2, #0
   28c44:	9b22      	ldr	r3, [sp, #136]	; 0x88
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28c46:	3701      	adds	r7, #1
  return lhs <= rhs;
   28c48:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28c4a:	e7ce      	b.n	28bea <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_11LessEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   28c4c:	3601      	adds	r6, #1
   28c4e:	e7c5      	b.n	28bdc <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_11LessEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   28c50:	3501      	adds	r5, #1
   28c52:	e7bc      	b.n	28bce <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_11LessEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   28c54:	3401      	adds	r4, #1
   28c56:	e7b3      	b.n	28bc0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_11LessEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   28c58:	a802      	add	r0, sp, #8
   28c5a:	f7fe fcaa 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   28c5e:	b018      	add	sp, #96	; 0x60
   28c60:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

00028c64 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_7EqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   28c64:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   28c68:	b098      	sub	sp, #96	; 0x60
   28c6a:	4691      	mov	r9, r2
  const BroadcastComparison4DSlowCommon dims =
   28c6c:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   28c6e:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   28c70:	9b21      	ldr	r3, [sp, #132]	; 0x84
   28c72:	f7ff fd63 	bl	2873c <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   28c76:	2400      	movs	r4, #0
   28c78:	2100      	movs	r1, #0
   28c7a:	a802      	add	r0, sp, #8
   28c7c:	f7fe fca4 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28c80:	42a0      	cmp	r0, r4
   28c82:	dd3d      	ble.n	28d00 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_7EqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   28c84:	2500      	movs	r5, #0
   28c86:	2101      	movs	r1, #1
   28c88:	a802      	add	r0, sp, #8
   28c8a:	f7fe fc9d 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28c8e:	42a8      	cmp	r0, r5
   28c90:	dd34      	ble.n	28cfc <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_7EqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x98>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   28c92:	2600      	movs	r6, #0
   28c94:	2102      	movs	r1, #2
   28c96:	a802      	add	r0, sp, #8
   28c98:	f7fe fc96 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28c9c:	42b0      	cmp	r0, r6
   28c9e:	dd2b      	ble.n	28cf8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_7EqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x94>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28ca0:	2700      	movs	r7, #0
   28ca2:	2103      	movs	r1, #3
   28ca4:	a802      	add	r0, sp, #8
   28ca6:	f7fe fc8f 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28caa:	42b8      	cmp	r0, r7
   28cac:	dd22      	ble.n	28cf4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_7EqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x90>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28cae:	4633      	mov	r3, r6
   28cb0:	462a      	mov	r2, r5
   28cb2:	4621      	mov	r1, r4
   28cb4:	9700      	str	r7, [sp, #0]
   28cb6:	a808      	add	r0, sp, #32
   28cb8:	f7fe fd7e 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   28cbc:	4633      	mov	r3, r6
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28cbe:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   28cc0:	462a      	mov	r2, r5
   28cc2:	4621      	mov	r1, r4
   28cc4:	9700      	str	r7, [sp, #0]
   28cc6:	a810      	add	r0, sp, #64	; 0x40
   28cc8:	f7fe fd76 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   28ccc:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   28cce:	4633      	mov	r3, r6
   28cd0:	462a      	mov	r2, r5
   28cd2:	4621      	mov	r1, r4
   28cd4:	9700      	str	r7, [sp, #0]
   28cd6:	a802      	add	r0, sp, #8
   28cd8:	f7fe fd38 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs == rhs;
   28cdc:	9b20      	ldr	r3, [sp, #128]	; 0x80
   28cde:	f819 200b 	ldrb.w	r2, [r9, fp]
   28ce2:	f813 100a 	ldrb.w	r1, [r3, sl]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28ce6:	3701      	adds	r7, #1
  return lhs == rhs;
   28ce8:	1a53      	subs	r3, r2, r1
   28cea:	425a      	negs	r2, r3
   28cec:	415a      	adcs	r2, r3
   28cee:	9b22      	ldr	r3, [sp, #136]	; 0x88
   28cf0:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28cf2:	e7d6      	b.n	28ca2 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_7EqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   28cf4:	3601      	adds	r6, #1
   28cf6:	e7cd      	b.n	28c94 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_7EqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   28cf8:	3501      	adds	r5, #1
   28cfa:	e7c4      	b.n	28c86 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_7EqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   28cfc:	3401      	adds	r4, #1
   28cfe:	e7bb      	b.n	28c78 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_7EqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   28d00:	a802      	add	r0, sp, #8
   28d02:	f7fe fc56 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   28d06:	b018      	add	sp, #96	; 0x60
   28d08:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

00028d0c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   28d0c:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   28d10:	b098      	sub	sp, #96	; 0x60
   28d12:	4691      	mov	r9, r2
  const BroadcastComparison4DSlowCommon dims =
   28d14:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   28d16:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   28d18:	9b21      	ldr	r3, [sp, #132]	; 0x84
   28d1a:	f7ff fd0f 	bl	2873c <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   28d1e:	2400      	movs	r4, #0
   28d20:	2100      	movs	r1, #0
   28d22:	a802      	add	r0, sp, #8
   28d24:	f7fe fc50 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28d28:	42a0      	cmp	r0, r4
   28d2a:	dd3d      	ble.n	28da8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   28d2c:	2500      	movs	r5, #0
   28d2e:	2101      	movs	r1, #1
   28d30:	a802      	add	r0, sp, #8
   28d32:	f7fe fc49 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28d36:	42a8      	cmp	r0, r5
   28d38:	dd34      	ble.n	28da4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x98>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   28d3a:	2600      	movs	r6, #0
   28d3c:	2102      	movs	r1, #2
   28d3e:	a802      	add	r0, sp, #8
   28d40:	f7fe fc42 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28d44:	42b0      	cmp	r0, r6
   28d46:	dd2b      	ble.n	28da0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x94>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28d48:	2700      	movs	r7, #0
   28d4a:	2103      	movs	r1, #3
   28d4c:	a802      	add	r0, sp, #8
   28d4e:	f7fe fc3b 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28d52:	42b8      	cmp	r0, r7
   28d54:	dd22      	ble.n	28d9c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x90>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28d56:	4633      	mov	r3, r6
   28d58:	462a      	mov	r2, r5
   28d5a:	4621      	mov	r1, r4
   28d5c:	9700      	str	r7, [sp, #0]
   28d5e:	a808      	add	r0, sp, #32
   28d60:	f7fe fd2a 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   28d64:	4633      	mov	r3, r6
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28d66:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   28d68:	462a      	mov	r2, r5
   28d6a:	4621      	mov	r1, r4
   28d6c:	9700      	str	r7, [sp, #0]
   28d6e:	a810      	add	r0, sp, #64	; 0x40
   28d70:	f7fe fd22 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   28d74:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   28d76:	4633      	mov	r3, r6
   28d78:	462a      	mov	r2, r5
   28d7a:	4621      	mov	r1, r4
   28d7c:	9700      	str	r7, [sp, #0]
   28d7e:	a802      	add	r0, sp, #8
   28d80:	f7fe fce4 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs == rhs;
   28d84:	9b20      	ldr	r3, [sp, #128]	; 0x80
   28d86:	f859 202b 	ldr.w	r2, [r9, fp, lsl #2]
   28d8a:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28d8e:	3701      	adds	r7, #1
  return lhs == rhs;
   28d90:	1a53      	subs	r3, r2, r1
   28d92:	425a      	negs	r2, r3
   28d94:	415a      	adcs	r2, r3
   28d96:	9b22      	ldr	r3, [sp, #136]	; 0x88
   28d98:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28d9a:	e7d6      	b.n	28d4a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   28d9c:	3601      	adds	r6, #1
   28d9e:	e7cd      	b.n	28d3c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   28da0:	3501      	adds	r5, #1
   28da2:	e7c4      	b.n	28d2e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   28da4:	3401      	adds	r4, #1
   28da6:	e7bb      	b.n	28d20 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   28da8:	a802      	add	r0, sp, #8
   28daa:	f7fe fc02 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   28dae:	b018      	add	sp, #96	; 0x60
   28db0:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

00028db4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_7EqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   28db4:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
   28db8:	b098      	sub	sp, #96	; 0x60
   28dba:	4616      	mov	r6, r2
  const BroadcastComparison4DSlowCommon dims =
   28dbc:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   28dbe:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   28dc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
   28dc2:	f7ff fcbb 	bl	2873c <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   28dc6:	2400      	movs	r4, #0
   28dc8:	2100      	movs	r1, #0
   28dca:	a802      	add	r0, sp, #8
   28dcc:	f7fe fbfc 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28dd0:	42a0      	cmp	r0, r4
   28dd2:	dd45      	ble.n	28e60 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_7EqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xac>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   28dd4:	2500      	movs	r5, #0
   28dd6:	2101      	movs	r1, #1
   28dd8:	a802      	add	r0, sp, #8
   28dda:	f7fe fbf5 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28dde:	42a8      	cmp	r0, r5
   28de0:	dd3c      	ble.n	28e5c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_7EqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa8>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   28de2:	f04f 0800 	mov.w	r8, #0
   28de6:	2102      	movs	r1, #2
   28de8:	a802      	add	r0, sp, #8
   28dea:	f7fe fbed 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28dee:	4540      	cmp	r0, r8
   28df0:	dd32      	ble.n	28e58 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_7EqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa4>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28df2:	2700      	movs	r7, #0
   28df4:	2103      	movs	r1, #3
   28df6:	a802      	add	r0, sp, #8
   28df8:	f7fe fbe6 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28dfc:	42b8      	cmp	r0, r7
   28dfe:	dd28      	ble.n	28e52 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_7EqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9e>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28e00:	4643      	mov	r3, r8
   28e02:	462a      	mov	r2, r5
   28e04:	4621      	mov	r1, r4
   28e06:	9700      	str	r7, [sp, #0]
   28e08:	a808      	add	r0, sp, #32
   28e0a:	f7fe fcd5 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   28e0e:	4643      	mov	r3, r8
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28e10:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   28e12:	462a      	mov	r2, r5
   28e14:	4621      	mov	r1, r4
   28e16:	9700      	str	r7, [sp, #0]
   28e18:	a810      	add	r0, sp, #64	; 0x40
   28e1a:	f7fe fccd 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   28e1e:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   28e20:	4643      	mov	r3, r8
   28e22:	462a      	mov	r2, r5
   28e24:	9700      	str	r7, [sp, #0]
   28e26:	4621      	mov	r1, r4
   28e28:	a802      	add	r0, sp, #8
   28e2a:	f7fe fc8f 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28e2e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   28e30:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
   28e34:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
  return lhs == rhs;
   28e38:	e9d3 2300 	ldrd	r2, r3, [r3]
   28e3c:	e9db ab00 	ldrd	sl, fp, [fp]
   28e40:	459b      	cmp	fp, r3
   28e42:	bf06      	itte	eq
   28e44:	4592      	cmpeq	sl, r2
   28e46:	2301      	moveq	r3, #1
   28e48:	2300      	movne	r3, #0
   28e4a:	9a22      	ldr	r2, [sp, #136]	; 0x88
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28e4c:	3701      	adds	r7, #1
  return lhs == rhs;
   28e4e:	5413      	strb	r3, [r2, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28e50:	e7d0      	b.n	28df4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_7EqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x40>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   28e52:	f108 0801 	add.w	r8, r8, #1
   28e56:	e7c6      	b.n	28de6 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_7EqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x32>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   28e58:	3501      	adds	r5, #1
   28e5a:	e7bc      	b.n	28dd6 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_7EqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   28e5c:	3401      	adds	r4, #1
   28e5e:	e7b3      	b.n	28dc8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_7EqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   28e60:	a802      	add	r0, sp, #8
   28e62:	f7fe fba6 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   28e66:	b018      	add	sp, #96	; 0x60
   28e68:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}

00028e6c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_10NotEqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   28e6c:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   28e70:	b098      	sub	sp, #96	; 0x60
   28e72:	4691      	mov	r9, r2
  const BroadcastComparison4DSlowCommon dims =
   28e74:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   28e76:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   28e78:	9b21      	ldr	r3, [sp, #132]	; 0x84
   28e7a:	f7ff fc5f 	bl	2873c <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   28e7e:	2400      	movs	r4, #0
   28e80:	2100      	movs	r1, #0
   28e82:	a802      	add	r0, sp, #8
   28e84:	f7fe fba0 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28e88:	42a0      	cmp	r0, r4
   28e8a:	dd3b      	ble.n	28f04 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_10NotEqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x98>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   28e8c:	2500      	movs	r5, #0
   28e8e:	2101      	movs	r1, #1
   28e90:	a802      	add	r0, sp, #8
   28e92:	f7fe fb99 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28e96:	42a8      	cmp	r0, r5
   28e98:	dd32      	ble.n	28f00 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_10NotEqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x94>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   28e9a:	2600      	movs	r6, #0
   28e9c:	2102      	movs	r1, #2
   28e9e:	a802      	add	r0, sp, #8
   28ea0:	f7fe fb92 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28ea4:	42b0      	cmp	r0, r6
   28ea6:	dd29      	ble.n	28efc <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_10NotEqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x90>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28ea8:	2700      	movs	r7, #0
   28eaa:	2103      	movs	r1, #3
   28eac:	a802      	add	r0, sp, #8
   28eae:	f7fe fb8b 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28eb2:	42b8      	cmp	r0, r7
   28eb4:	dd20      	ble.n	28ef8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_10NotEqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x8c>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28eb6:	4633      	mov	r3, r6
   28eb8:	462a      	mov	r2, r5
   28eba:	4621      	mov	r1, r4
   28ebc:	9700      	str	r7, [sp, #0]
   28ebe:	a808      	add	r0, sp, #32
   28ec0:	f7fe fc7a 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   28ec4:	4633      	mov	r3, r6
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28ec6:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   28ec8:	462a      	mov	r2, r5
   28eca:	4621      	mov	r1, r4
   28ecc:	9700      	str	r7, [sp, #0]
   28ece:	a810      	add	r0, sp, #64	; 0x40
   28ed0:	f7fe fc72 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   28ed4:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   28ed6:	4633      	mov	r3, r6
   28ed8:	462a      	mov	r2, r5
   28eda:	4621      	mov	r1, r4
   28edc:	9700      	str	r7, [sp, #0]
   28ede:	a802      	add	r0, sp, #8
   28ee0:	f7fe fc34 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs != rhs;
   28ee4:	9b20      	ldr	r3, [sp, #128]	; 0x80
   28ee6:	f819 200b 	ldrb.w	r2, [r9, fp]
   28eea:	f813 100a 	ldrb.w	r1, [r3, sl]
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   28eee:	9b22      	ldr	r3, [sp, #136]	; 0x88
  return lhs != rhs;
   28ef0:	404a      	eors	r2, r1
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   28ef2:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28ef4:	3701      	adds	r7, #1
   28ef6:	e7d8      	b.n	28eaa <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_10NotEqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   28ef8:	3601      	adds	r6, #1
   28efa:	e7cf      	b.n	28e9c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_10NotEqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   28efc:	3501      	adds	r5, #1
   28efe:	e7c6      	b.n	28e8e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_10NotEqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   28f00:	3401      	adds	r4, #1
   28f02:	e7bd      	b.n	28e80 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_10NotEqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   28f04:	a802      	add	r0, sp, #8
   28f06:	f7fe fb54 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   28f0a:	b018      	add	sp, #96	; 0x60
   28f0c:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

00028f10 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   28f10:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   28f14:	b098      	sub	sp, #96	; 0x60
   28f16:	4691      	mov	r9, r2
  const BroadcastComparison4DSlowCommon dims =
   28f18:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   28f1a:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   28f1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
   28f1e:	f7ff fc0d 	bl	2873c <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   28f22:	2400      	movs	r4, #0
   28f24:	2100      	movs	r1, #0
   28f26:	a802      	add	r0, sp, #8
   28f28:	f7fe fb4e 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28f2c:	42a0      	cmp	r0, r4
   28f2e:	dd3d      	ble.n	28fac <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   28f30:	2500      	movs	r5, #0
   28f32:	2101      	movs	r1, #1
   28f34:	a802      	add	r0, sp, #8
   28f36:	f7fe fb47 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28f3a:	42a8      	cmp	r0, r5
   28f3c:	dd34      	ble.n	28fa8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x98>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   28f3e:	2600      	movs	r6, #0
   28f40:	2102      	movs	r1, #2
   28f42:	a802      	add	r0, sp, #8
   28f44:	f7fe fb40 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28f48:	42b0      	cmp	r0, r6
   28f4a:	dd2b      	ble.n	28fa4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x94>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28f4c:	2700      	movs	r7, #0
   28f4e:	2103      	movs	r1, #3
   28f50:	a802      	add	r0, sp, #8
   28f52:	f7fe fb39 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28f56:	42b8      	cmp	r0, r7
   28f58:	dd22      	ble.n	28fa0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x90>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28f5a:	4633      	mov	r3, r6
   28f5c:	462a      	mov	r2, r5
   28f5e:	4621      	mov	r1, r4
   28f60:	9700      	str	r7, [sp, #0]
   28f62:	a808      	add	r0, sp, #32
   28f64:	f7fe fc28 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   28f68:	4633      	mov	r3, r6
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28f6a:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   28f6c:	462a      	mov	r2, r5
   28f6e:	4621      	mov	r1, r4
   28f70:	9700      	str	r7, [sp, #0]
   28f72:	a810      	add	r0, sp, #64	; 0x40
   28f74:	f7fe fc20 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   28f78:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   28f7a:	4633      	mov	r3, r6
   28f7c:	462a      	mov	r2, r5
   28f7e:	4621      	mov	r1, r4
   28f80:	9700      	str	r7, [sp, #0]
   28f82:	a802      	add	r0, sp, #8
   28f84:	f7fe fbe2 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs != rhs;
   28f88:	9b20      	ldr	r3, [sp, #128]	; 0x80
   28f8a:	f859 202b 	ldr.w	r2, [r9, fp, lsl #2]
   28f8e:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
   28f92:	9b22      	ldr	r3, [sp, #136]	; 0x88
   28f94:	1a52      	subs	r2, r2, r1
   28f96:	bf18      	it	ne
   28f98:	2201      	movne	r2, #1
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28f9a:	3701      	adds	r7, #1
  return lhs != rhs;
   28f9c:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28f9e:	e7d6      	b.n	28f4e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   28fa0:	3601      	adds	r6, #1
   28fa2:	e7cd      	b.n	28f40 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   28fa4:	3501      	adds	r5, #1
   28fa6:	e7c4      	b.n	28f32 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   28fa8:	3401      	adds	r4, #1
   28faa:	e7bb      	b.n	28f24 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   28fac:	a802      	add	r0, sp, #8
   28fae:	f7fe fb00 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   28fb2:	b018      	add	sp, #96	; 0x60
   28fb4:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

00028fb8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_10NotEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   28fb8:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
   28fbc:	b098      	sub	sp, #96	; 0x60
   28fbe:	4616      	mov	r6, r2
  const BroadcastComparison4DSlowCommon dims =
   28fc0:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   28fc2:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   28fc4:	9b21      	ldr	r3, [sp, #132]	; 0x84
   28fc6:	f7ff fbb9 	bl	2873c <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   28fca:	2400      	movs	r4, #0
   28fcc:	2100      	movs	r1, #0
   28fce:	a802      	add	r0, sp, #8
   28fd0:	f7fe fafa 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28fd4:	42a0      	cmp	r0, r4
   28fd6:	dd45      	ble.n	29064 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_10NotEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xac>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   28fd8:	2500      	movs	r5, #0
   28fda:	2101      	movs	r1, #1
   28fdc:	a802      	add	r0, sp, #8
   28fde:	f7fe faf3 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28fe2:	42a8      	cmp	r0, r5
   28fe4:	dd3c      	ble.n	29060 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_10NotEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa8>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   28fe6:	f04f 0800 	mov.w	r8, #0
   28fea:	2102      	movs	r1, #2
   28fec:	a802      	add	r0, sp, #8
   28fee:	f7fe faeb 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   28ff2:	4540      	cmp	r0, r8
   28ff4:	dd32      	ble.n	2905c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_10NotEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa4>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28ff6:	2700      	movs	r7, #0
   28ff8:	2103      	movs	r1, #3
   28ffa:	a802      	add	r0, sp, #8
   28ffc:	f7fe fae4 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   29000:	42b8      	cmp	r0, r7
   29002:	dd28      	ble.n	29056 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_10NotEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9e>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   29004:	4643      	mov	r3, r8
   29006:	462a      	mov	r2, r5
   29008:	4621      	mov	r1, r4
   2900a:	9700      	str	r7, [sp, #0]
   2900c:	a808      	add	r0, sp, #32
   2900e:	f7fe fbd3 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   29012:	4643      	mov	r3, r8
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   29014:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   29016:	462a      	mov	r2, r5
   29018:	4621      	mov	r1, r4
   2901a:	9700      	str	r7, [sp, #0]
   2901c:	a810      	add	r0, sp, #64	; 0x40
   2901e:	f7fe fbcb 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   29022:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   29024:	4643      	mov	r3, r8
   29026:	462a      	mov	r2, r5
   29028:	9700      	str	r7, [sp, #0]
   2902a:	4621      	mov	r1, r4
   2902c:	a802      	add	r0, sp, #8
   2902e:	f7fe fb8d 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   29032:	9b20      	ldr	r3, [sp, #128]	; 0x80
   29034:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
   29038:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
  return lhs != rhs;
   2903c:	e9d3 2300 	ldrd	r2, r3, [r3]
   29040:	e9db ab00 	ldrd	sl, fp, [fp]
   29044:	459b      	cmp	fp, r3
   29046:	bf0a      	itet	eq
   29048:	4592      	cmpeq	sl, r2
   2904a:	2301      	movne	r3, #1
   2904c:	2300      	moveq	r3, #0
   2904e:	9a22      	ldr	r2, [sp, #136]	; 0x88
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29050:	3701      	adds	r7, #1
  return lhs != rhs;
   29052:	5413      	strb	r3, [r2, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29054:	e7d0      	b.n	28ff8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_10NotEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x40>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29056:	f108 0801 	add.w	r8, r8, #1
   2905a:	e7c6      	b.n	28fea <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_10NotEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x32>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   2905c:	3501      	adds	r5, #1
   2905e:	e7bc      	b.n	28fda <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_10NotEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29060:	3401      	adds	r4, #1
   29062:	e7b3      	b.n	28fcc <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_10NotEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   29064:	a802      	add	r0, sp, #8
   29066:	f7fe faa4 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   2906a:	b018      	add	sp, #96	; 0x60
   2906c:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}

00029070 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   29070:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   29074:	b098      	sub	sp, #96	; 0x60
   29076:	4691      	mov	r9, r2
  const BroadcastComparison4DSlowCommon dims =
   29078:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   2907a:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   2907c:	9b21      	ldr	r3, [sp, #132]	; 0x84
   2907e:	f7ff fb5d 	bl	2873c <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29082:	2400      	movs	r4, #0
   29084:	2100      	movs	r1, #0
   29086:	a802      	add	r0, sp, #8
   29088:	f7fe fa9e 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2908c:	42a0      	cmp	r0, r4
   2908e:	dd3e      	ble.n	2910e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9e>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29090:	2500      	movs	r5, #0
   29092:	2101      	movs	r1, #1
   29094:	a802      	add	r0, sp, #8
   29096:	f7fe fa97 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2909a:	42a8      	cmp	r0, r5
   2909c:	dd35      	ble.n	2910a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9a>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   2909e:	2600      	movs	r6, #0
   290a0:	2102      	movs	r1, #2
   290a2:	a802      	add	r0, sp, #8
   290a4:	f7fe fa90 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   290a8:	42b0      	cmp	r0, r6
   290aa:	dd2c      	ble.n	29106 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x96>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   290ac:	2700      	movs	r7, #0
   290ae:	2103      	movs	r1, #3
   290b0:	a802      	add	r0, sp, #8
   290b2:	f7fe fa89 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   290b6:	42b8      	cmp	r0, r7
   290b8:	dd23      	ble.n	29102 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x92>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   290ba:	4633      	mov	r3, r6
   290bc:	462a      	mov	r2, r5
   290be:	4621      	mov	r1, r4
   290c0:	9700      	str	r7, [sp, #0]
   290c2:	a808      	add	r0, sp, #32
   290c4:	f7fe fb78 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   290c8:	4633      	mov	r3, r6
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   290ca:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   290cc:	462a      	mov	r2, r5
   290ce:	4621      	mov	r1, r4
   290d0:	9700      	str	r7, [sp, #0]
   290d2:	a810      	add	r0, sp, #64	; 0x40
   290d4:	f7fe fb70 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   290d8:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   290da:	4633      	mov	r3, r6
   290dc:	462a      	mov	r2, r5
   290de:	4621      	mov	r1, r4
   290e0:	9700      	str	r7, [sp, #0]
   290e2:	a802      	add	r0, sp, #8
   290e4:	f7fe fb32 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs > rhs;
   290e8:	9b20      	ldr	r3, [sp, #128]	; 0x80
   290ea:	f859 202b 	ldr.w	r2, [r9, fp, lsl #2]
   290ee:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
   290f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   290f4:	428a      	cmp	r2, r1
   290f6:	bfd4      	ite	le
   290f8:	2200      	movle	r2, #0
   290fa:	2201      	movgt	r2, #1
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   290fc:	3701      	adds	r7, #1
  return lhs > rhs;
   290fe:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29100:	e7d5      	b.n	290ae <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29102:	3601      	adds	r6, #1
   29104:	e7cc      	b.n	290a0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29106:	3501      	adds	r5, #1
   29108:	e7c3      	b.n	29092 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   2910a:	3401      	adds	r4, #1
   2910c:	e7ba      	b.n	29084 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   2910e:	a802      	add	r0, sp, #8
   29110:	f7fe fa4f 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   29114:	b018      	add	sp, #96	; 0x60
   29116:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

0002911a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_9GreaterFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   2911a:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
   2911e:	b098      	sub	sp, #96	; 0x60
   29120:	4616      	mov	r6, r2
  const BroadcastComparison4DSlowCommon dims =
   29122:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   29124:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   29126:	9b21      	ldr	r3, [sp, #132]	; 0x84
   29128:	f7ff fb08 	bl	2873c <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   2912c:	2400      	movs	r4, #0
   2912e:	2100      	movs	r1, #0
   29130:	a802      	add	r0, sp, #8
   29132:	f7fe fa49 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   29136:	42a0      	cmp	r0, r4
   29138:	dd46      	ble.n	291c8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_9GreaterFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xae>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   2913a:	2500      	movs	r5, #0
   2913c:	2101      	movs	r1, #1
   2913e:	a802      	add	r0, sp, #8
   29140:	f7fe fa42 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   29144:	42a8      	cmp	r0, r5
   29146:	dd3d      	ble.n	291c4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_9GreaterFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xaa>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29148:	f04f 0800 	mov.w	r8, #0
   2914c:	2102      	movs	r1, #2
   2914e:	a802      	add	r0, sp, #8
   29150:	f7fe fa3a 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   29154:	4540      	cmp	r0, r8
   29156:	dd33      	ble.n	291c0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_9GreaterFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa6>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29158:	2700      	movs	r7, #0
   2915a:	2103      	movs	r1, #3
   2915c:	a802      	add	r0, sp, #8
   2915e:	f7fe fa33 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   29162:	42b8      	cmp	r0, r7
   29164:	dd29      	ble.n	291ba <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_9GreaterFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   29166:	4643      	mov	r3, r8
   29168:	462a      	mov	r2, r5
   2916a:	4621      	mov	r1, r4
   2916c:	9700      	str	r7, [sp, #0]
   2916e:	a808      	add	r0, sp, #32
   29170:	f7fe fb22 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   29174:	4643      	mov	r3, r8
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   29176:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   29178:	462a      	mov	r2, r5
   2917a:	4621      	mov	r1, r4
   2917c:	9700      	str	r7, [sp, #0]
   2917e:	a810      	add	r0, sp, #64	; 0x40
   29180:	f7fe fb1a 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   29184:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   29186:	4643      	mov	r3, r8
   29188:	462a      	mov	r2, r5
   2918a:	9700      	str	r7, [sp, #0]
   2918c:	4621      	mov	r1, r4
   2918e:	a802      	add	r0, sp, #8
   29190:	f7fe fadc 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   29194:	9b20      	ldr	r3, [sp, #128]	; 0x80
   29196:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
   2919a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
  return lhs > rhs;
   2919e:	e9d3 2300 	ldrd	r2, r3, [r3]
   291a2:	e9db ab00 	ldrd	sl, fp, [fp]
   291a6:	4552      	cmp	r2, sl
   291a8:	eb73 030b 	sbcs.w	r3, r3, fp
   291ac:	bfb4      	ite	lt
   291ae:	2301      	movlt	r3, #1
   291b0:	2300      	movge	r3, #0
   291b2:	9a22      	ldr	r2, [sp, #136]	; 0x88
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   291b4:	3701      	adds	r7, #1
  return lhs > rhs;
   291b6:	5413      	strb	r3, [r2, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   291b8:	e7cf      	b.n	2915a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_9GreaterFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x40>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   291ba:	f108 0801 	add.w	r8, r8, #1
   291be:	e7c5      	b.n	2914c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_9GreaterFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x32>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   291c0:	3501      	adds	r5, #1
   291c2:	e7bb      	b.n	2913c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_9GreaterFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   291c4:	3401      	adds	r4, #1
   291c6:	e7b2      	b.n	2912e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_9GreaterFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   291c8:	a802      	add	r0, sp, #8
   291ca:	f7fe f9f2 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   291ce:	b018      	add	sp, #96	; 0x60
   291d0:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}

000291d4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   291d4:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   291d8:	b098      	sub	sp, #96	; 0x60
   291da:	4691      	mov	r9, r2
  const BroadcastComparison4DSlowCommon dims =
   291dc:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   291de:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   291e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
   291e2:	f7ff faab 	bl	2873c <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   291e6:	2400      	movs	r4, #0
   291e8:	2100      	movs	r1, #0
   291ea:	a802      	add	r0, sp, #8
   291ec:	f7fe f9ec 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   291f0:	42a0      	cmp	r0, r4
   291f2:	dd3e      	ble.n	29272 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9e>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   291f4:	2500      	movs	r5, #0
   291f6:	2101      	movs	r1, #1
   291f8:	a802      	add	r0, sp, #8
   291fa:	f7fe f9e5 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   291fe:	42a8      	cmp	r0, r5
   29200:	dd35      	ble.n	2926e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9a>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29202:	2600      	movs	r6, #0
   29204:	2102      	movs	r1, #2
   29206:	a802      	add	r0, sp, #8
   29208:	f7fe f9de 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2920c:	42b0      	cmp	r0, r6
   2920e:	dd2c      	ble.n	2926a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x96>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29210:	2700      	movs	r7, #0
   29212:	2103      	movs	r1, #3
   29214:	a802      	add	r0, sp, #8
   29216:	f7fe f9d7 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2921a:	42b8      	cmp	r0, r7
   2921c:	dd23      	ble.n	29266 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x92>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   2921e:	4633      	mov	r3, r6
   29220:	462a      	mov	r2, r5
   29222:	4621      	mov	r1, r4
   29224:	9700      	str	r7, [sp, #0]
   29226:	a808      	add	r0, sp, #32
   29228:	f7fe fac6 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   2922c:	4633      	mov	r3, r6
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   2922e:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   29230:	462a      	mov	r2, r5
   29232:	4621      	mov	r1, r4
   29234:	9700      	str	r7, [sp, #0]
   29236:	a810      	add	r0, sp, #64	; 0x40
   29238:	f7fe fabe 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   2923c:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   2923e:	4633      	mov	r3, r6
   29240:	462a      	mov	r2, r5
   29242:	4621      	mov	r1, r4
   29244:	9700      	str	r7, [sp, #0]
   29246:	a802      	add	r0, sp, #8
   29248:	f7fe fa80 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs >= rhs;
   2924c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   2924e:	f859 202b 	ldr.w	r2, [r9, fp, lsl #2]
   29252:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
   29256:	9b22      	ldr	r3, [sp, #136]	; 0x88
   29258:	428a      	cmp	r2, r1
   2925a:	bfb4      	ite	lt
   2925c:	2200      	movlt	r2, #0
   2925e:	2201      	movge	r2, #1
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29260:	3701      	adds	r7, #1
  return lhs >= rhs;
   29262:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29264:	e7d5      	b.n	29212 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29266:	3601      	adds	r6, #1
   29268:	e7cc      	b.n	29204 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   2926a:	3501      	adds	r5, #1
   2926c:	e7c3      	b.n	291f6 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   2926e:	3401      	adds	r4, #1
   29270:	e7ba      	b.n	291e8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   29272:	a802      	add	r0, sp, #8
   29274:	f7fe f99d 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   29278:	b018      	add	sp, #96	; 0x60
   2927a:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

0002927e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_14GreaterEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   2927e:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
   29282:	b098      	sub	sp, #96	; 0x60
   29284:	4616      	mov	r6, r2
  const BroadcastComparison4DSlowCommon dims =
   29286:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   29288:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   2928a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   2928c:	f7ff fa56 	bl	2873c <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29290:	2400      	movs	r4, #0
   29292:	2100      	movs	r1, #0
   29294:	a802      	add	r0, sp, #8
   29296:	f7fe f997 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2929a:	42a0      	cmp	r0, r4
   2929c:	dd46      	ble.n	2932c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_14GreaterEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xae>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   2929e:	2500      	movs	r5, #0
   292a0:	2101      	movs	r1, #1
   292a2:	a802      	add	r0, sp, #8
   292a4:	f7fe f990 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   292a8:	42a8      	cmp	r0, r5
   292aa:	dd3d      	ble.n	29328 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_14GreaterEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xaa>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   292ac:	f04f 0800 	mov.w	r8, #0
   292b0:	2102      	movs	r1, #2
   292b2:	a802      	add	r0, sp, #8
   292b4:	f7fe f988 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   292b8:	4540      	cmp	r0, r8
   292ba:	dd33      	ble.n	29324 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_14GreaterEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa6>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   292bc:	2700      	movs	r7, #0
   292be:	2103      	movs	r1, #3
   292c0:	a802      	add	r0, sp, #8
   292c2:	f7fe f981 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   292c6:	42b8      	cmp	r0, r7
   292c8:	dd29      	ble.n	2931e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_14GreaterEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   292ca:	4643      	mov	r3, r8
   292cc:	462a      	mov	r2, r5
   292ce:	4621      	mov	r1, r4
   292d0:	9700      	str	r7, [sp, #0]
   292d2:	a808      	add	r0, sp, #32
   292d4:	f7fe fa70 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   292d8:	4643      	mov	r3, r8
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   292da:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   292dc:	462a      	mov	r2, r5
   292de:	4621      	mov	r1, r4
   292e0:	9700      	str	r7, [sp, #0]
   292e2:	a810      	add	r0, sp, #64	; 0x40
   292e4:	f7fe fa68 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   292e8:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   292ea:	4643      	mov	r3, r8
   292ec:	462a      	mov	r2, r5
   292ee:	9700      	str	r7, [sp, #0]
   292f0:	4621      	mov	r1, r4
   292f2:	a802      	add	r0, sp, #8
   292f4:	f7fe fa2a 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   292f8:	9b20      	ldr	r3, [sp, #128]	; 0x80
   292fa:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
   292fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
  return lhs >= rhs;
   29302:	e9d3 2300 	ldrd	r2, r3, [r3]
   29306:	e9db ab00 	ldrd	sl, fp, [fp]
   2930a:	4592      	cmp	sl, r2
   2930c:	eb7b 0303 	sbcs.w	r3, fp, r3
   29310:	bfac      	ite	ge
   29312:	2301      	movge	r3, #1
   29314:	2300      	movlt	r3, #0
   29316:	9a22      	ldr	r2, [sp, #136]	; 0x88
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29318:	3701      	adds	r7, #1
  return lhs >= rhs;
   2931a:	5413      	strb	r3, [r2, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   2931c:	e7cf      	b.n	292be <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_14GreaterEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x40>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   2931e:	f108 0801 	add.w	r8, r8, #1
   29322:	e7c5      	b.n	292b0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_14GreaterEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x32>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29324:	3501      	adds	r5, #1
   29326:	e7bb      	b.n	292a0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_14GreaterEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29328:	3401      	adds	r4, #1
   2932a:	e7b2      	b.n	29292 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_14GreaterEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   2932c:	a802      	add	r0, sp, #8
   2932e:	f7fe f940 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   29332:	b018      	add	sp, #96	; 0x60
   29334:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}

00029338 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   29338:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   2933c:	b098      	sub	sp, #96	; 0x60
   2933e:	4691      	mov	r9, r2
  const BroadcastComparison4DSlowCommon dims =
   29340:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   29342:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   29344:	9b21      	ldr	r3, [sp, #132]	; 0x84
   29346:	f7ff f9f9 	bl	2873c <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   2934a:	2400      	movs	r4, #0
   2934c:	2100      	movs	r1, #0
   2934e:	a802      	add	r0, sp, #8
   29350:	f7fe f93a 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   29354:	42a0      	cmp	r0, r4
   29356:	dd3e      	ble.n	293d6 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9e>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29358:	2500      	movs	r5, #0
   2935a:	2101      	movs	r1, #1
   2935c:	a802      	add	r0, sp, #8
   2935e:	f7fe f933 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   29362:	42a8      	cmp	r0, r5
   29364:	dd35      	ble.n	293d2 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9a>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29366:	2600      	movs	r6, #0
   29368:	2102      	movs	r1, #2
   2936a:	a802      	add	r0, sp, #8
   2936c:	f7fe f92c 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   29370:	42b0      	cmp	r0, r6
   29372:	dd2c      	ble.n	293ce <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x96>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29374:	2700      	movs	r7, #0
   29376:	2103      	movs	r1, #3
   29378:	a802      	add	r0, sp, #8
   2937a:	f7fe f925 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2937e:	42b8      	cmp	r0, r7
   29380:	dd23      	ble.n	293ca <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x92>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   29382:	4633      	mov	r3, r6
   29384:	462a      	mov	r2, r5
   29386:	4621      	mov	r1, r4
   29388:	9700      	str	r7, [sp, #0]
   2938a:	a808      	add	r0, sp, #32
   2938c:	f7fe fa14 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   29390:	4633      	mov	r3, r6
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   29392:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   29394:	462a      	mov	r2, r5
   29396:	4621      	mov	r1, r4
   29398:	9700      	str	r7, [sp, #0]
   2939a:	a810      	add	r0, sp, #64	; 0x40
   2939c:	f7fe fa0c 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   293a0:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   293a2:	4633      	mov	r3, r6
   293a4:	462a      	mov	r2, r5
   293a6:	4621      	mov	r1, r4
   293a8:	9700      	str	r7, [sp, #0]
   293aa:	a802      	add	r0, sp, #8
   293ac:	f7fe f9ce 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs < rhs;
   293b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
   293b2:	f859 202b 	ldr.w	r2, [r9, fp, lsl #2]
   293b6:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
   293ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
   293bc:	428a      	cmp	r2, r1
   293be:	bfac      	ite	ge
   293c0:	2200      	movge	r2, #0
   293c2:	2201      	movlt	r2, #1
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   293c4:	3701      	adds	r7, #1
  return lhs < rhs;
   293c6:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   293c8:	e7d5      	b.n	29376 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   293ca:	3601      	adds	r6, #1
   293cc:	e7cc      	b.n	29368 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   293ce:	3501      	adds	r5, #1
   293d0:	e7c3      	b.n	2935a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   293d2:	3401      	adds	r4, #1
   293d4:	e7ba      	b.n	2934c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   293d6:	a802      	add	r0, sp, #8
   293d8:	f7fe f8eb 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   293dc:	b018      	add	sp, #96	; 0x60
   293de:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

000293e2 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_6LessFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   293e2:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
   293e6:	b098      	sub	sp, #96	; 0x60
   293e8:	4616      	mov	r6, r2
  const BroadcastComparison4DSlowCommon dims =
   293ea:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   293ec:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   293ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
   293f0:	f7ff f9a4 	bl	2873c <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   293f4:	2400      	movs	r4, #0
   293f6:	2100      	movs	r1, #0
   293f8:	a802      	add	r0, sp, #8
   293fa:	f7fe f8e5 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   293fe:	42a0      	cmp	r0, r4
   29400:	dd46      	ble.n	29490 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_6LessFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xae>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29402:	2500      	movs	r5, #0
   29404:	2101      	movs	r1, #1
   29406:	a802      	add	r0, sp, #8
   29408:	f7fe f8de 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2940c:	42a8      	cmp	r0, r5
   2940e:	dd3d      	ble.n	2948c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_6LessFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xaa>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29410:	f04f 0800 	mov.w	r8, #0
   29414:	2102      	movs	r1, #2
   29416:	a802      	add	r0, sp, #8
   29418:	f7fe f8d6 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2941c:	4540      	cmp	r0, r8
   2941e:	dd33      	ble.n	29488 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_6LessFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa6>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29420:	2700      	movs	r7, #0
   29422:	2103      	movs	r1, #3
   29424:	a802      	add	r0, sp, #8
   29426:	f7fe f8cf 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2942a:	42b8      	cmp	r0, r7
   2942c:	dd29      	ble.n	29482 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_6LessFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   2942e:	4643      	mov	r3, r8
   29430:	462a      	mov	r2, r5
   29432:	4621      	mov	r1, r4
   29434:	9700      	str	r7, [sp, #0]
   29436:	a808      	add	r0, sp, #32
   29438:	f7fe f9be 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   2943c:	4643      	mov	r3, r8
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   2943e:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   29440:	462a      	mov	r2, r5
   29442:	4621      	mov	r1, r4
   29444:	9700      	str	r7, [sp, #0]
   29446:	a810      	add	r0, sp, #64	; 0x40
   29448:	f7fe f9b6 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   2944c:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   2944e:	4643      	mov	r3, r8
   29450:	462a      	mov	r2, r5
   29452:	9700      	str	r7, [sp, #0]
   29454:	4621      	mov	r1, r4
   29456:	a802      	add	r0, sp, #8
   29458:	f7fe f978 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   2945c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   2945e:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
   29462:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
  return lhs < rhs;
   29466:	e9d3 2300 	ldrd	r2, r3, [r3]
   2946a:	e9db ab00 	ldrd	sl, fp, [fp]
   2946e:	4592      	cmp	sl, r2
   29470:	eb7b 0303 	sbcs.w	r3, fp, r3
   29474:	bfb4      	ite	lt
   29476:	2301      	movlt	r3, #1
   29478:	2300      	movge	r3, #0
   2947a:	9a22      	ldr	r2, [sp, #136]	; 0x88
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   2947c:	3701      	adds	r7, #1
  return lhs < rhs;
   2947e:	5413      	strb	r3, [r2, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29480:	e7cf      	b.n	29422 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_6LessFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x40>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29482:	f108 0801 	add.w	r8, r8, #1
   29486:	e7c5      	b.n	29414 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_6LessFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x32>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29488:	3501      	adds	r5, #1
   2948a:	e7bb      	b.n	29404 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_6LessFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   2948c:	3401      	adds	r4, #1
   2948e:	e7b2      	b.n	293f6 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_6LessFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   29490:	a802      	add	r0, sp, #8
   29492:	f7fe f88e 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   29496:	b018      	add	sp, #96	; 0x60
   29498:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}

0002949c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   2949c:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   294a0:	b098      	sub	sp, #96	; 0x60
   294a2:	4691      	mov	r9, r2
  const BroadcastComparison4DSlowCommon dims =
   294a4:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   294a6:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   294a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
   294aa:	f7ff f947 	bl	2873c <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   294ae:	2400      	movs	r4, #0
   294b0:	2100      	movs	r1, #0
   294b2:	a802      	add	r0, sp, #8
   294b4:	f7fe f888 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   294b8:	42a0      	cmp	r0, r4
   294ba:	dd3e      	ble.n	2953a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9e>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   294bc:	2500      	movs	r5, #0
   294be:	2101      	movs	r1, #1
   294c0:	a802      	add	r0, sp, #8
   294c2:	f7fe f881 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   294c6:	42a8      	cmp	r0, r5
   294c8:	dd35      	ble.n	29536 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9a>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   294ca:	2600      	movs	r6, #0
   294cc:	2102      	movs	r1, #2
   294ce:	a802      	add	r0, sp, #8
   294d0:	f7fe f87a 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   294d4:	42b0      	cmp	r0, r6
   294d6:	dd2c      	ble.n	29532 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x96>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   294d8:	2700      	movs	r7, #0
   294da:	2103      	movs	r1, #3
   294dc:	a802      	add	r0, sp, #8
   294de:	f7fe f873 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   294e2:	42b8      	cmp	r0, r7
   294e4:	dd23      	ble.n	2952e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x92>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   294e6:	4633      	mov	r3, r6
   294e8:	462a      	mov	r2, r5
   294ea:	4621      	mov	r1, r4
   294ec:	9700      	str	r7, [sp, #0]
   294ee:	a808      	add	r0, sp, #32
   294f0:	f7fe f962 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   294f4:	4633      	mov	r3, r6
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   294f6:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   294f8:	462a      	mov	r2, r5
   294fa:	4621      	mov	r1, r4
   294fc:	9700      	str	r7, [sp, #0]
   294fe:	a810      	add	r0, sp, #64	; 0x40
   29500:	f7fe f95a 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   29504:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   29506:	4633      	mov	r3, r6
   29508:	462a      	mov	r2, r5
   2950a:	4621      	mov	r1, r4
   2950c:	9700      	str	r7, [sp, #0]
   2950e:	a802      	add	r0, sp, #8
   29510:	f7fe f91c 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs <= rhs;
   29514:	9b20      	ldr	r3, [sp, #128]	; 0x80
   29516:	f859 202b 	ldr.w	r2, [r9, fp, lsl #2]
   2951a:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
   2951e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   29520:	428a      	cmp	r2, r1
   29522:	bfcc      	ite	gt
   29524:	2200      	movgt	r2, #0
   29526:	2201      	movle	r2, #1
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29528:	3701      	adds	r7, #1
  return lhs <= rhs;
   2952a:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   2952c:	e7d5      	b.n	294da <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   2952e:	3601      	adds	r6, #1
   29530:	e7cc      	b.n	294cc <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29532:	3501      	adds	r5, #1
   29534:	e7c3      	b.n	294be <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29536:	3401      	adds	r4, #1
   29538:	e7ba      	b.n	294b0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   2953a:	a802      	add	r0, sp, #8
   2953c:	f7fe f839 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   29540:	b018      	add	sp, #96	; 0x60
   29542:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

00029546 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_11LessEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   29546:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
   2954a:	b098      	sub	sp, #96	; 0x60
   2954c:	4616      	mov	r6, r2
  const BroadcastComparison4DSlowCommon dims =
   2954e:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   29550:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   29552:	9b21      	ldr	r3, [sp, #132]	; 0x84
   29554:	f7ff f8f2 	bl	2873c <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29558:	2400      	movs	r4, #0
   2955a:	2100      	movs	r1, #0
   2955c:	a802      	add	r0, sp, #8
   2955e:	f7fe f833 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   29562:	42a0      	cmp	r0, r4
   29564:	dd46      	ble.n	295f4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_11LessEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xae>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29566:	2500      	movs	r5, #0
   29568:	2101      	movs	r1, #1
   2956a:	a802      	add	r0, sp, #8
   2956c:	f7fe f82c 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   29570:	42a8      	cmp	r0, r5
   29572:	dd3d      	ble.n	295f0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_11LessEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xaa>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29574:	f04f 0800 	mov.w	r8, #0
   29578:	2102      	movs	r1, #2
   2957a:	a802      	add	r0, sp, #8
   2957c:	f7fe f824 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   29580:	4540      	cmp	r0, r8
   29582:	dd33      	ble.n	295ec <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_11LessEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa6>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29584:	2700      	movs	r7, #0
   29586:	2103      	movs	r1, #3
   29588:	a802      	add	r0, sp, #8
   2958a:	f7fe f81d 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2958e:	42b8      	cmp	r0, r7
   29590:	dd29      	ble.n	295e6 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_11LessEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   29592:	4643      	mov	r3, r8
   29594:	462a      	mov	r2, r5
   29596:	4621      	mov	r1, r4
   29598:	9700      	str	r7, [sp, #0]
   2959a:	a808      	add	r0, sp, #32
   2959c:	f7fe f90c 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   295a0:	4643      	mov	r3, r8
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   295a2:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   295a4:	462a      	mov	r2, r5
   295a6:	4621      	mov	r1, r4
   295a8:	9700      	str	r7, [sp, #0]
   295aa:	a810      	add	r0, sp, #64	; 0x40
   295ac:	f7fe f904 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   295b0:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   295b2:	4643      	mov	r3, r8
   295b4:	462a      	mov	r2, r5
   295b6:	9700      	str	r7, [sp, #0]
   295b8:	4621      	mov	r1, r4
   295ba:	a802      	add	r0, sp, #8
   295bc:	f7fe f8c6 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   295c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
   295c2:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
   295c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
  return lhs <= rhs;
   295ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   295ce:	e9db ab00 	ldrd	sl, fp, [fp]
   295d2:	4552      	cmp	r2, sl
   295d4:	eb73 030b 	sbcs.w	r3, r3, fp
   295d8:	bfac      	ite	ge
   295da:	2301      	movge	r3, #1
   295dc:	2300      	movlt	r3, #0
   295de:	9a22      	ldr	r2, [sp, #136]	; 0x88
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   295e0:	3701      	adds	r7, #1
  return lhs <= rhs;
   295e2:	5413      	strb	r3, [r2, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   295e4:	e7cf      	b.n	29586 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_11LessEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x40>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   295e6:	f108 0801 	add.w	r8, r8, #1
   295ea:	e7c5      	b.n	29578 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_11LessEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x32>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   295ec:	3501      	adds	r5, #1
   295ee:	e7bb      	b.n	29568 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_11LessEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   295f0:	3401      	adds	r4, #1
   295f2:	e7b2      	b.n	2955a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_11LessEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   295f4:	a802      	add	r0, sp, #8
   295f6:	f7fd ffdc 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   295fa:	b018      	add	sp, #96	; 0x60
   295fc:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}

00029600 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   29600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29604:	ed2d 8b04 	vpush	{d8-d9}
   29608:	4604      	mov	r4, r0
   2960a:	b09d      	sub	sp, #116	; 0x74
   2960c:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   2960e:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   29610:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   29612:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   29614:	f7ff f892 	bl	2873c <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   29618:	e9d4 6300 	ldrd	r6, r3, [r4]
   2961c:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   2961e:	68a3      	ldr	r3, [r4, #8]
   29620:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   29624:	68e3      	ldr	r3, [r4, #12]
   29626:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   2962a:	6923      	ldr	r3, [r4, #16]
   2962c:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   2962e:	6963      	ldr	r3, [r4, #20]
   29630:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   29634:	69a3      	ldr	r3, [r4, #24]
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29636:	2400      	movs	r4, #0
  int input2_shift = op_params.input2_shift;
   29638:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   2963c:	2100      	movs	r1, #0
   2963e:	a806      	add	r0, sp, #24
   29640:	f7fd ffc2 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   29644:	42a0      	cmp	r0, r4
   29646:	dd5f      	ble.n	29708 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x108>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29648:	2500      	movs	r5, #0
   2964a:	af06      	add	r7, sp, #24
   2964c:	2101      	movs	r1, #1
   2964e:	4638      	mov	r0, r7
   29650:	f7fd ffba 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   29654:	42a8      	cmp	r0, r5
   29656:	dd55      	ble.n	29704 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x104>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29658:	f04f 0800 	mov.w	r8, #0
   2965c:	2102      	movs	r1, #2
   2965e:	4638      	mov	r0, r7
   29660:	f7fd ffb2 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   29664:	4540      	cmp	r0, r8
   29666:	dd4b      	ble.n	29700 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x100>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29668:	f04f 0900 	mov.w	r9, #0
   2966c:	2103      	movs	r1, #3
   2966e:	4638      	mov	r0, r7
   29670:	f7fd ffaa 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   29674:	4548      	cmp	r0, r9
   29676:	dd40      	ble.n	296fa <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfa>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   29678:	4643      	mov	r3, r8
   2967a:	462a      	mov	r2, r5
   2967c:	4621      	mov	r1, r4
   2967e:	f8cd 9000 	str.w	r9, [sp]
   29682:	a80c      	add	r0, sp, #48	; 0x30
   29684:	f7fe f898 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   29688:	9b05      	ldr	r3, [sp, #20]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   2968a:	462a      	mov	r2, r5
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   2968c:	f813 a000 	ldrb.w	sl, [r3, r0]
          const int32 input1_val =
   29690:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29692:	4621      	mov	r1, r4
          const int32 input1_val =
   29694:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29696:	f8cd 9000 	str.w	r9, [sp]
   2969a:	4643      	mov	r3, r8
   2969c:	a814      	add	r0, sp, #80	; 0x50
   2969e:	f7fe f88b 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   296a2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   296a4:	ee18 2a90 	vmov	r2, s17
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   296a8:	f813 b000 	ldrb.w	fp, [r3, r0]
          const int32 input2_val =
   296ac:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   296ae:	ee18 1a10 	vmov	r1, s16
   296b2:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   296b6:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   296b8:	f7ed fa94 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   296bc:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   296c0:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   296c2:	ee19 2a90 	vmov	r2, s19
   296c6:	ee19 1a10 	vmov	r1, s18
   296ca:	4658      	mov	r0, fp
   296cc:	f7ed fa8a 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
   296d0:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   296d2:	4643      	mov	r3, r8
   296d4:	f8cd 9000 	str.w	r9, [sp]
   296d8:	462a      	mov	r2, r5
   296da:	4621      	mov	r1, r4
   296dc:	4638      	mov	r0, r7
   296de:	f7fe f835 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs == rhs;
   296e2:	ebaa 030b 	sub.w	r3, sl, fp
   296e6:	f1d3 0a00 	rsbs	sl, r3, #0
   296ea:	eb4a 0a03 	adc.w	sl, sl, r3
   296ee:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   296f0:	f109 0901 	add.w	r9, r9, #1
  return lhs == rhs;
   296f4:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   296f8:	e7b8      	b.n	2966c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   296fa:	f108 0801 	add.w	r8, r8, #1
   296fe:	e7ad      	b.n	2965c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29700:	3501      	adds	r5, #1
   29702:	e7a2      	b.n	2964a <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29704:	3401      	adds	r4, #1
   29706:	e799      	b.n	2963c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   29708:	a806      	add	r0, sp, #24
   2970a:	f7fd ff52 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   2970e:	b01d      	add	sp, #116	; 0x74
   29710:	ecbd 8b04 	vpop	{d8-d9}
   29714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00029718 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   29718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2971c:	ed2d 8b04 	vpush	{d8-d9}
   29720:	4604      	mov	r4, r0
   29722:	b09d      	sub	sp, #116	; 0x74
   29724:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   29726:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   29728:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   2972a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   2972c:	f7ff f806 	bl	2873c <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   29730:	e9d4 6300 	ldrd	r6, r3, [r4]
   29734:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   29736:	68a3      	ldr	r3, [r4, #8]
   29738:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   2973c:	68e3      	ldr	r3, [r4, #12]
   2973e:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   29742:	6923      	ldr	r3, [r4, #16]
   29744:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   29746:	6963      	ldr	r3, [r4, #20]
   29748:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   2974c:	69a3      	ldr	r3, [r4, #24]
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   2974e:	2400      	movs	r4, #0
  int input2_shift = op_params.input2_shift;
   29750:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29754:	2100      	movs	r1, #0
   29756:	a806      	add	r0, sp, #24
   29758:	f7fd ff36 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2975c:	42a0      	cmp	r0, r4
   2975e:	dd5f      	ble.n	29820 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x108>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29760:	2500      	movs	r5, #0
   29762:	af06      	add	r7, sp, #24
   29764:	2101      	movs	r1, #1
   29766:	4638      	mov	r0, r7
   29768:	f7fd ff2e 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2976c:	42a8      	cmp	r0, r5
   2976e:	dd55      	ble.n	2981c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x104>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29770:	f04f 0800 	mov.w	r8, #0
   29774:	2102      	movs	r1, #2
   29776:	4638      	mov	r0, r7
   29778:	f7fd ff26 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2977c:	4540      	cmp	r0, r8
   2977e:	dd4b      	ble.n	29818 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x100>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29780:	f04f 0900 	mov.w	r9, #0
   29784:	2103      	movs	r1, #3
   29786:	4638      	mov	r0, r7
   29788:	f7fd ff1e 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2978c:	4548      	cmp	r0, r9
   2978e:	dd40      	ble.n	29812 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfa>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   29790:	4643      	mov	r3, r8
   29792:	462a      	mov	r2, r5
   29794:	4621      	mov	r1, r4
   29796:	f8cd 9000 	str.w	r9, [sp]
   2979a:	a80c      	add	r0, sp, #48	; 0x30
   2979c:	f7fe f80c 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   297a0:	9b05      	ldr	r3, [sp, #20]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   297a2:	462a      	mov	r2, r5
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   297a4:	f913 a000 	ldrsb.w	sl, [r3, r0]
          const int32 input1_val =
   297a8:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   297aa:	4621      	mov	r1, r4
          const int32 input1_val =
   297ac:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   297ae:	f8cd 9000 	str.w	r9, [sp]
   297b2:	4643      	mov	r3, r8
   297b4:	a814      	add	r0, sp, #80	; 0x50
   297b6:	f7fd ffff 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   297ba:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   297bc:	ee18 2a90 	vmov	r2, s17
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   297c0:	f913 b000 	ldrsb.w	fp, [r3, r0]
          const int32 input2_val =
   297c4:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   297c6:	ee18 1a10 	vmov	r1, s16
   297ca:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   297ce:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   297d0:	f7ed fa08 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   297d4:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   297d8:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   297da:	ee19 2a90 	vmov	r2, s19
   297de:	ee19 1a10 	vmov	r1, s18
   297e2:	4658      	mov	r0, fp
   297e4:	f7ed f9fe 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
   297e8:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   297ea:	4643      	mov	r3, r8
   297ec:	f8cd 9000 	str.w	r9, [sp]
   297f0:	462a      	mov	r2, r5
   297f2:	4621      	mov	r1, r4
   297f4:	4638      	mov	r0, r7
   297f6:	f7fd ffa9 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs == rhs;
   297fa:	ebaa 030b 	sub.w	r3, sl, fp
   297fe:	f1d3 0a00 	rsbs	sl, r3, #0
   29802:	eb4a 0a03 	adc.w	sl, sl, r3
   29806:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29808:	f109 0901 	add.w	r9, r9, #1
  return lhs == rhs;
   2980c:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29810:	e7b8      	b.n	29784 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29812:	f108 0801 	add.w	r8, r8, #1
   29816:	e7ad      	b.n	29774 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29818:	3501      	adds	r5, #1
   2981a:	e7a2      	b.n	29762 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   2981c:	3401      	adds	r4, #1
   2981e:	e799      	b.n	29754 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   29820:	a806      	add	r0, sp, #24
   29822:	f7fd fec6 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   29826:	b01d      	add	sp, #116	; 0x74
   29828:	ecbd 8b04 	vpop	{d8-d9}
   2982c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00029830 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   29830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29834:	ed2d 8b04 	vpush	{d8-d9}
   29838:	4604      	mov	r4, r0
   2983a:	b09d      	sub	sp, #116	; 0x74
   2983c:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   2983e:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   29840:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   29842:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   29844:	f7fe ff7a 	bl	2873c <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   29848:	e9d4 6300 	ldrd	r6, r3, [r4]
   2984c:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   2984e:	68a3      	ldr	r3, [r4, #8]
   29850:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   29854:	68e3      	ldr	r3, [r4, #12]
   29856:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   2985a:	6923      	ldr	r3, [r4, #16]
   2985c:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   2985e:	6963      	ldr	r3, [r4, #20]
   29860:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   29864:	69a3      	ldr	r3, [r4, #24]
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29866:	2400      	movs	r4, #0
  int input2_shift = op_params.input2_shift;
   29868:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   2986c:	2100      	movs	r1, #0
   2986e:	a806      	add	r0, sp, #24
   29870:	f7fd feaa 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   29874:	42a0      	cmp	r0, r4
   29876:	dd5e      	ble.n	29936 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x106>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29878:	2500      	movs	r5, #0
   2987a:	af06      	add	r7, sp, #24
   2987c:	2101      	movs	r1, #1
   2987e:	4638      	mov	r0, r7
   29880:	f7fd fea2 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   29884:	42a8      	cmp	r0, r5
   29886:	dd54      	ble.n	29932 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x102>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29888:	f04f 0800 	mov.w	r8, #0
   2988c:	2102      	movs	r1, #2
   2988e:	4638      	mov	r0, r7
   29890:	f7fd fe9a 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   29894:	4540      	cmp	r0, r8
   29896:	dd4a      	ble.n	2992e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfe>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29898:	f04f 0900 	mov.w	r9, #0
   2989c:	2103      	movs	r1, #3
   2989e:	4638      	mov	r0, r7
   298a0:	f7fd fe92 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   298a4:	4548      	cmp	r0, r9
   298a6:	dd3f      	ble.n	29928 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xf8>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   298a8:	4643      	mov	r3, r8
   298aa:	462a      	mov	r2, r5
   298ac:	4621      	mov	r1, r4
   298ae:	f8cd 9000 	str.w	r9, [sp]
   298b2:	a80c      	add	r0, sp, #48	; 0x30
   298b4:	f7fd ff80 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   298b8:	9b05      	ldr	r3, [sp, #20]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   298ba:	462a      	mov	r2, r5
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   298bc:	f813 a000 	ldrb.w	sl, [r3, r0]
          const int32 input1_val =
   298c0:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   298c2:	4621      	mov	r1, r4
          const int32 input1_val =
   298c4:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   298c6:	f8cd 9000 	str.w	r9, [sp]
   298ca:	4643      	mov	r3, r8
   298cc:	a814      	add	r0, sp, #80	; 0x50
   298ce:	f7fd ff73 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   298d2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   298d4:	ee18 2a90 	vmov	r2, s17
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   298d8:	f813 b000 	ldrb.w	fp, [r3, r0]
          const int32 input2_val =
   298dc:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   298de:	ee18 1a10 	vmov	r1, s16
   298e2:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   298e6:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   298e8:	f7ed f97c 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   298ec:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   298f0:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   298f2:	ee19 2a90 	vmov	r2, s19
   298f6:	ee19 1a10 	vmov	r1, s18
   298fa:	4658      	mov	r0, fp
   298fc:	f7ed f972 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
   29900:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   29902:	4643      	mov	r3, r8
   29904:	f8cd 9000 	str.w	r9, [sp]
   29908:	462a      	mov	r2, r5
   2990a:	4621      	mov	r1, r4
   2990c:	4638      	mov	r0, r7
   2990e:	f7fd ff1d 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs != rhs;
   29912:	ebba 0a0b 	subs.w	sl, sl, fp
   29916:	bf18      	it	ne
   29918:	f04f 0a01 	movne.w	sl, #1
   2991c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   2991e:	f109 0901 	add.w	r9, r9, #1
  return lhs != rhs;
   29922:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29926:	e7b9      	b.n	2989c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29928:	f108 0801 	add.w	r8, r8, #1
   2992c:	e7ae      	b.n	2988c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   2992e:	3501      	adds	r5, #1
   29930:	e7a3      	b.n	2987a <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29932:	3401      	adds	r4, #1
   29934:	e79a      	b.n	2986c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   29936:	a806      	add	r0, sp, #24
   29938:	f7fd fe3b 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   2993c:	b01d      	add	sp, #116	; 0x74
   2993e:	ecbd 8b04 	vpop	{d8-d9}
   29942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00029946 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   29946:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2994a:	ed2d 8b04 	vpush	{d8-d9}
   2994e:	4604      	mov	r4, r0
   29950:	b09d      	sub	sp, #116	; 0x74
   29952:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   29954:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   29956:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   29958:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   2995a:	f7fe feef 	bl	2873c <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   2995e:	e9d4 6300 	ldrd	r6, r3, [r4]
   29962:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   29964:	68a3      	ldr	r3, [r4, #8]
   29966:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   2996a:	68e3      	ldr	r3, [r4, #12]
   2996c:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   29970:	6923      	ldr	r3, [r4, #16]
   29972:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   29974:	6963      	ldr	r3, [r4, #20]
   29976:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   2997a:	69a3      	ldr	r3, [r4, #24]
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   2997c:	2400      	movs	r4, #0
  int input2_shift = op_params.input2_shift;
   2997e:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29982:	2100      	movs	r1, #0
   29984:	a806      	add	r0, sp, #24
   29986:	f7fd fe1f 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2998a:	42a0      	cmp	r0, r4
   2998c:	dd5e      	ble.n	29a4c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x106>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   2998e:	2500      	movs	r5, #0
   29990:	af06      	add	r7, sp, #24
   29992:	2101      	movs	r1, #1
   29994:	4638      	mov	r0, r7
   29996:	f7fd fe17 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2999a:	42a8      	cmp	r0, r5
   2999c:	dd54      	ble.n	29a48 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x102>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   2999e:	f04f 0800 	mov.w	r8, #0
   299a2:	2102      	movs	r1, #2
   299a4:	4638      	mov	r0, r7
   299a6:	f7fd fe0f 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   299aa:	4540      	cmp	r0, r8
   299ac:	dd4a      	ble.n	29a44 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfe>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   299ae:	f04f 0900 	mov.w	r9, #0
   299b2:	2103      	movs	r1, #3
   299b4:	4638      	mov	r0, r7
   299b6:	f7fd fe07 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   299ba:	4548      	cmp	r0, r9
   299bc:	dd3f      	ble.n	29a3e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xf8>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   299be:	4643      	mov	r3, r8
   299c0:	462a      	mov	r2, r5
   299c2:	4621      	mov	r1, r4
   299c4:	f8cd 9000 	str.w	r9, [sp]
   299c8:	a80c      	add	r0, sp, #48	; 0x30
   299ca:	f7fd fef5 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   299ce:	9b05      	ldr	r3, [sp, #20]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   299d0:	462a      	mov	r2, r5
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   299d2:	f913 a000 	ldrsb.w	sl, [r3, r0]
          const int32 input1_val =
   299d6:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   299d8:	4621      	mov	r1, r4
          const int32 input1_val =
   299da:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   299dc:	f8cd 9000 	str.w	r9, [sp]
   299e0:	4643      	mov	r3, r8
   299e2:	a814      	add	r0, sp, #80	; 0x50
   299e4:	f7fd fee8 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   299e8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   299ea:	ee18 2a90 	vmov	r2, s17
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   299ee:	f913 b000 	ldrsb.w	fp, [r3, r0]
          const int32 input2_val =
   299f2:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   299f4:	ee18 1a10 	vmov	r1, s16
   299f8:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   299fc:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   299fe:	f7ed f8f1 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   29a02:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29a06:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29a08:	ee19 2a90 	vmov	r2, s19
   29a0c:	ee19 1a10 	vmov	r1, s18
   29a10:	4658      	mov	r0, fp
   29a12:	f7ed f8e7 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
   29a16:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   29a18:	4643      	mov	r3, r8
   29a1a:	f8cd 9000 	str.w	r9, [sp]
   29a1e:	462a      	mov	r2, r5
   29a20:	4621      	mov	r1, r4
   29a22:	4638      	mov	r0, r7
   29a24:	f7fd fe92 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs != rhs;
   29a28:	ebba 0a0b 	subs.w	sl, sl, fp
   29a2c:	bf18      	it	ne
   29a2e:	f04f 0a01 	movne.w	sl, #1
   29a32:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29a34:	f109 0901 	add.w	r9, r9, #1
  return lhs != rhs;
   29a38:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29a3c:	e7b9      	b.n	299b2 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29a3e:	f108 0801 	add.w	r8, r8, #1
   29a42:	e7ae      	b.n	299a2 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29a44:	3501      	adds	r5, #1
   29a46:	e7a3      	b.n	29990 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29a48:	3401      	adds	r4, #1
   29a4a:	e79a      	b.n	29982 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   29a4c:	a806      	add	r0, sp, #24
   29a4e:	f7fd fdb0 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   29a52:	b01d      	add	sp, #116	; 0x74
   29a54:	ecbd 8b04 	vpop	{d8-d9}
   29a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00029a5c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   29a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29a60:	ed2d 8b04 	vpush	{d8-d9}
   29a64:	4604      	mov	r4, r0
   29a66:	b09d      	sub	sp, #116	; 0x74
   29a68:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   29a6a:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   29a6c:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   29a6e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   29a70:	f7fe fe64 	bl	2873c <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   29a74:	e9d4 6300 	ldrd	r6, r3, [r4]
   29a78:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   29a7a:	68a3      	ldr	r3, [r4, #8]
   29a7c:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   29a80:	68e3      	ldr	r3, [r4, #12]
   29a82:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   29a86:	6923      	ldr	r3, [r4, #16]
   29a88:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   29a8a:	6963      	ldr	r3, [r4, #20]
   29a8c:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   29a90:	69a3      	ldr	r3, [r4, #24]
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29a92:	2400      	movs	r4, #0
  int input2_shift = op_params.input2_shift;
   29a94:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29a98:	2100      	movs	r1, #0
   29a9a:	a806      	add	r0, sp, #24
   29a9c:	f7fd fd94 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   29aa0:	42a0      	cmp	r0, r4
   29aa2:	dd5f      	ble.n	29b64 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x108>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29aa4:	2500      	movs	r5, #0
   29aa6:	af06      	add	r7, sp, #24
   29aa8:	2101      	movs	r1, #1
   29aaa:	4638      	mov	r0, r7
   29aac:	f7fd fd8c 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   29ab0:	42a8      	cmp	r0, r5
   29ab2:	dd55      	ble.n	29b60 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x104>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29ab4:	f04f 0800 	mov.w	r8, #0
   29ab8:	2102      	movs	r1, #2
   29aba:	4638      	mov	r0, r7
   29abc:	f7fd fd84 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   29ac0:	4540      	cmp	r0, r8
   29ac2:	dd4b      	ble.n	29b5c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x100>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29ac4:	f04f 0900 	mov.w	r9, #0
   29ac8:	2103      	movs	r1, #3
   29aca:	4638      	mov	r0, r7
   29acc:	f7fd fd7c 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   29ad0:	4548      	cmp	r0, r9
   29ad2:	dd40      	ble.n	29b56 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfa>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   29ad4:	4643      	mov	r3, r8
   29ad6:	462a      	mov	r2, r5
   29ad8:	4621      	mov	r1, r4
   29ada:	f8cd 9000 	str.w	r9, [sp]
   29ade:	a80c      	add	r0, sp, #48	; 0x30
   29ae0:	f7fd fe6a 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   29ae4:	9b05      	ldr	r3, [sp, #20]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29ae6:	462a      	mov	r2, r5
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   29ae8:	f813 a000 	ldrb.w	sl, [r3, r0]
          const int32 input1_val =
   29aec:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29aee:	4621      	mov	r1, r4
          const int32 input1_val =
   29af0:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29af2:	f8cd 9000 	str.w	r9, [sp]
   29af6:	4643      	mov	r3, r8
   29af8:	a814      	add	r0, sp, #80	; 0x50
   29afa:	f7fd fe5d 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   29afe:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29b00:	ee18 2a90 	vmov	r2, s17
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29b04:	f813 b000 	ldrb.w	fp, [r3, r0]
          const int32 input2_val =
   29b08:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29b0a:	ee18 1a10 	vmov	r1, s16
   29b0e:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   29b12:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29b14:	f7ed f866 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   29b18:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29b1c:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29b1e:	ee19 2a90 	vmov	r2, s19
   29b22:	ee19 1a10 	vmov	r1, s18
   29b26:	4658      	mov	r0, fp
   29b28:	f7ed f85c 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
   29b2c:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   29b2e:	4643      	mov	r3, r8
   29b30:	f8cd 9000 	str.w	r9, [sp]
   29b34:	462a      	mov	r2, r5
   29b36:	4621      	mov	r1, r4
   29b38:	4638      	mov	r0, r7
   29b3a:	f7fd fe07 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs > rhs;
   29b3e:	45da      	cmp	sl, fp
   29b40:	bfd4      	ite	le
   29b42:	f04f 0a00 	movle.w	sl, #0
   29b46:	f04f 0a01 	movgt.w	sl, #1
   29b4a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29b4c:	f109 0901 	add.w	r9, r9, #1
  return lhs > rhs;
   29b50:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29b54:	e7b8      	b.n	29ac8 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29b56:	f108 0801 	add.w	r8, r8, #1
   29b5a:	e7ad      	b.n	29ab8 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29b5c:	3501      	adds	r5, #1
   29b5e:	e7a2      	b.n	29aa6 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29b60:	3401      	adds	r4, #1
   29b62:	e799      	b.n	29a98 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   29b64:	a806      	add	r0, sp, #24
   29b66:	f7fd fd24 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   29b6a:	b01d      	add	sp, #116	; 0x74
   29b6c:	ecbd 8b04 	vpop	{d8-d9}
   29b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00029b74 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   29b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29b78:	ed2d 8b04 	vpush	{d8-d9}
   29b7c:	4604      	mov	r4, r0
   29b7e:	b09d      	sub	sp, #116	; 0x74
   29b80:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   29b82:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   29b84:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   29b86:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   29b88:	f7fe fdd8 	bl	2873c <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   29b8c:	e9d4 6300 	ldrd	r6, r3, [r4]
   29b90:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   29b92:	68a3      	ldr	r3, [r4, #8]
   29b94:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   29b98:	68e3      	ldr	r3, [r4, #12]
   29b9a:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   29b9e:	6923      	ldr	r3, [r4, #16]
   29ba0:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   29ba2:	6963      	ldr	r3, [r4, #20]
   29ba4:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   29ba8:	69a3      	ldr	r3, [r4, #24]
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29baa:	2400      	movs	r4, #0
  int input2_shift = op_params.input2_shift;
   29bac:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29bb0:	2100      	movs	r1, #0
   29bb2:	a806      	add	r0, sp, #24
   29bb4:	f7fd fd08 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   29bb8:	42a0      	cmp	r0, r4
   29bba:	dd5f      	ble.n	29c7c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x108>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29bbc:	2500      	movs	r5, #0
   29bbe:	af06      	add	r7, sp, #24
   29bc0:	2101      	movs	r1, #1
   29bc2:	4638      	mov	r0, r7
   29bc4:	f7fd fd00 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   29bc8:	42a8      	cmp	r0, r5
   29bca:	dd55      	ble.n	29c78 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x104>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29bcc:	f04f 0800 	mov.w	r8, #0
   29bd0:	2102      	movs	r1, #2
   29bd2:	4638      	mov	r0, r7
   29bd4:	f7fd fcf8 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   29bd8:	4540      	cmp	r0, r8
   29bda:	dd4b      	ble.n	29c74 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x100>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29bdc:	f04f 0900 	mov.w	r9, #0
   29be0:	2103      	movs	r1, #3
   29be2:	4638      	mov	r0, r7
   29be4:	f7fd fcf0 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   29be8:	4548      	cmp	r0, r9
   29bea:	dd40      	ble.n	29c6e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfa>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   29bec:	4643      	mov	r3, r8
   29bee:	462a      	mov	r2, r5
   29bf0:	4621      	mov	r1, r4
   29bf2:	f8cd 9000 	str.w	r9, [sp]
   29bf6:	a80c      	add	r0, sp, #48	; 0x30
   29bf8:	f7fd fdde 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   29bfc:	9b05      	ldr	r3, [sp, #20]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29bfe:	462a      	mov	r2, r5
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   29c00:	f913 a000 	ldrsb.w	sl, [r3, r0]
          const int32 input1_val =
   29c04:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29c06:	4621      	mov	r1, r4
          const int32 input1_val =
   29c08:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29c0a:	f8cd 9000 	str.w	r9, [sp]
   29c0e:	4643      	mov	r3, r8
   29c10:	a814      	add	r0, sp, #80	; 0x50
   29c12:	f7fd fdd1 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   29c16:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29c18:	ee18 2a90 	vmov	r2, s17
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29c1c:	f913 b000 	ldrsb.w	fp, [r3, r0]
          const int32 input2_val =
   29c20:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29c22:	ee18 1a10 	vmov	r1, s16
   29c26:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   29c2a:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29c2c:	f7ec ffda 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   29c30:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29c34:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29c36:	ee19 2a90 	vmov	r2, s19
   29c3a:	ee19 1a10 	vmov	r1, s18
   29c3e:	4658      	mov	r0, fp
   29c40:	f7ec ffd0 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
   29c44:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   29c46:	4643      	mov	r3, r8
   29c48:	f8cd 9000 	str.w	r9, [sp]
   29c4c:	462a      	mov	r2, r5
   29c4e:	4621      	mov	r1, r4
   29c50:	4638      	mov	r0, r7
   29c52:	f7fd fd7b 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs > rhs;
   29c56:	45da      	cmp	sl, fp
   29c58:	bfd4      	ite	le
   29c5a:	f04f 0a00 	movle.w	sl, #0
   29c5e:	f04f 0a01 	movgt.w	sl, #1
   29c62:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29c64:	f109 0901 	add.w	r9, r9, #1
  return lhs > rhs;
   29c68:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29c6c:	e7b8      	b.n	29be0 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29c6e:	f108 0801 	add.w	r8, r8, #1
   29c72:	e7ad      	b.n	29bd0 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29c74:	3501      	adds	r5, #1
   29c76:	e7a2      	b.n	29bbe <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29c78:	3401      	adds	r4, #1
   29c7a:	e799      	b.n	29bb0 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   29c7c:	a806      	add	r0, sp, #24
   29c7e:	f7fd fc98 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   29c82:	b01d      	add	sp, #116	; 0x74
   29c84:	ecbd 8b04 	vpop	{d8-d9}
   29c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00029c8c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   29c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29c90:	ed2d 8b04 	vpush	{d8-d9}
   29c94:	4604      	mov	r4, r0
   29c96:	b09d      	sub	sp, #116	; 0x74
   29c98:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   29c9a:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   29c9c:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   29c9e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   29ca0:	f7fe fd4c 	bl	2873c <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   29ca4:	e9d4 6300 	ldrd	r6, r3, [r4]
   29ca8:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   29caa:	68a3      	ldr	r3, [r4, #8]
   29cac:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   29cb0:	68e3      	ldr	r3, [r4, #12]
   29cb2:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   29cb6:	6923      	ldr	r3, [r4, #16]
   29cb8:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   29cba:	6963      	ldr	r3, [r4, #20]
   29cbc:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   29cc0:	69a3      	ldr	r3, [r4, #24]
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29cc2:	2400      	movs	r4, #0
  int input2_shift = op_params.input2_shift;
   29cc4:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29cc8:	2100      	movs	r1, #0
   29cca:	a806      	add	r0, sp, #24
   29ccc:	f7fd fc7c 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   29cd0:	42a0      	cmp	r0, r4
   29cd2:	dd5f      	ble.n	29d94 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x108>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29cd4:	2500      	movs	r5, #0
   29cd6:	af06      	add	r7, sp, #24
   29cd8:	2101      	movs	r1, #1
   29cda:	4638      	mov	r0, r7
   29cdc:	f7fd fc74 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   29ce0:	42a8      	cmp	r0, r5
   29ce2:	dd55      	ble.n	29d90 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x104>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29ce4:	f04f 0800 	mov.w	r8, #0
   29ce8:	2102      	movs	r1, #2
   29cea:	4638      	mov	r0, r7
   29cec:	f7fd fc6c 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   29cf0:	4540      	cmp	r0, r8
   29cf2:	dd4b      	ble.n	29d8c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x100>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29cf4:	f04f 0900 	mov.w	r9, #0
   29cf8:	2103      	movs	r1, #3
   29cfa:	4638      	mov	r0, r7
   29cfc:	f7fd fc64 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   29d00:	4548      	cmp	r0, r9
   29d02:	dd40      	ble.n	29d86 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfa>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   29d04:	4643      	mov	r3, r8
   29d06:	462a      	mov	r2, r5
   29d08:	4621      	mov	r1, r4
   29d0a:	f8cd 9000 	str.w	r9, [sp]
   29d0e:	a80c      	add	r0, sp, #48	; 0x30
   29d10:	f7fd fd52 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   29d14:	9b05      	ldr	r3, [sp, #20]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29d16:	462a      	mov	r2, r5
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   29d18:	f813 a000 	ldrb.w	sl, [r3, r0]
          const int32 input1_val =
   29d1c:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29d1e:	4621      	mov	r1, r4
          const int32 input1_val =
   29d20:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29d22:	f8cd 9000 	str.w	r9, [sp]
   29d26:	4643      	mov	r3, r8
   29d28:	a814      	add	r0, sp, #80	; 0x50
   29d2a:	f7fd fd45 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   29d2e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29d30:	ee18 2a90 	vmov	r2, s17
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29d34:	f813 b000 	ldrb.w	fp, [r3, r0]
          const int32 input2_val =
   29d38:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29d3a:	ee18 1a10 	vmov	r1, s16
   29d3e:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   29d42:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29d44:	f7ec ff4e 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   29d48:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29d4c:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29d4e:	ee19 2a90 	vmov	r2, s19
   29d52:	ee19 1a10 	vmov	r1, s18
   29d56:	4658      	mov	r0, fp
   29d58:	f7ec ff44 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
   29d5c:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   29d5e:	4643      	mov	r3, r8
   29d60:	f8cd 9000 	str.w	r9, [sp]
   29d64:	462a      	mov	r2, r5
   29d66:	4621      	mov	r1, r4
   29d68:	4638      	mov	r0, r7
   29d6a:	f7fd fcef 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs >= rhs;
   29d6e:	45da      	cmp	sl, fp
   29d70:	bfb4      	ite	lt
   29d72:	f04f 0a00 	movlt.w	sl, #0
   29d76:	f04f 0a01 	movge.w	sl, #1
   29d7a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29d7c:	f109 0901 	add.w	r9, r9, #1
  return lhs >= rhs;
   29d80:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29d84:	e7b8      	b.n	29cf8 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29d86:	f108 0801 	add.w	r8, r8, #1
   29d8a:	e7ad      	b.n	29ce8 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29d8c:	3501      	adds	r5, #1
   29d8e:	e7a2      	b.n	29cd6 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29d90:	3401      	adds	r4, #1
   29d92:	e799      	b.n	29cc8 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   29d94:	a806      	add	r0, sp, #24
   29d96:	f7fd fc0c 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   29d9a:	b01d      	add	sp, #116	; 0x74
   29d9c:	ecbd 8b04 	vpop	{d8-d9}
   29da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00029da4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   29da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29da8:	ed2d 8b04 	vpush	{d8-d9}
   29dac:	4604      	mov	r4, r0
   29dae:	b09d      	sub	sp, #116	; 0x74
   29db0:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   29db2:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   29db4:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   29db6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   29db8:	f7fe fcc0 	bl	2873c <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   29dbc:	e9d4 6300 	ldrd	r6, r3, [r4]
   29dc0:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   29dc2:	68a3      	ldr	r3, [r4, #8]
   29dc4:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   29dc8:	68e3      	ldr	r3, [r4, #12]
   29dca:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   29dce:	6923      	ldr	r3, [r4, #16]
   29dd0:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   29dd2:	6963      	ldr	r3, [r4, #20]
   29dd4:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   29dd8:	69a3      	ldr	r3, [r4, #24]
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29dda:	2400      	movs	r4, #0
  int input2_shift = op_params.input2_shift;
   29ddc:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29de0:	2100      	movs	r1, #0
   29de2:	a806      	add	r0, sp, #24
   29de4:	f7fd fbf0 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   29de8:	42a0      	cmp	r0, r4
   29dea:	dd5f      	ble.n	29eac <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x108>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29dec:	2500      	movs	r5, #0
   29dee:	af06      	add	r7, sp, #24
   29df0:	2101      	movs	r1, #1
   29df2:	4638      	mov	r0, r7
   29df4:	f7fd fbe8 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   29df8:	42a8      	cmp	r0, r5
   29dfa:	dd55      	ble.n	29ea8 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x104>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29dfc:	f04f 0800 	mov.w	r8, #0
   29e00:	2102      	movs	r1, #2
   29e02:	4638      	mov	r0, r7
   29e04:	f7fd fbe0 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   29e08:	4540      	cmp	r0, r8
   29e0a:	dd4b      	ble.n	29ea4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x100>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29e0c:	f04f 0900 	mov.w	r9, #0
   29e10:	2103      	movs	r1, #3
   29e12:	4638      	mov	r0, r7
   29e14:	f7fd fbd8 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   29e18:	4548      	cmp	r0, r9
   29e1a:	dd40      	ble.n	29e9e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfa>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   29e1c:	4643      	mov	r3, r8
   29e1e:	462a      	mov	r2, r5
   29e20:	4621      	mov	r1, r4
   29e22:	f8cd 9000 	str.w	r9, [sp]
   29e26:	a80c      	add	r0, sp, #48	; 0x30
   29e28:	f7fd fcc6 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   29e2c:	9b05      	ldr	r3, [sp, #20]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29e2e:	462a      	mov	r2, r5
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   29e30:	f913 a000 	ldrsb.w	sl, [r3, r0]
          const int32 input1_val =
   29e34:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29e36:	4621      	mov	r1, r4
          const int32 input1_val =
   29e38:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29e3a:	f8cd 9000 	str.w	r9, [sp]
   29e3e:	4643      	mov	r3, r8
   29e40:	a814      	add	r0, sp, #80	; 0x50
   29e42:	f7fd fcb9 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   29e46:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29e48:	ee18 2a90 	vmov	r2, s17
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29e4c:	f913 b000 	ldrsb.w	fp, [r3, r0]
          const int32 input2_val =
   29e50:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29e52:	ee18 1a10 	vmov	r1, s16
   29e56:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   29e5a:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29e5c:	f7ec fec2 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   29e60:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29e64:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29e66:	ee19 2a90 	vmov	r2, s19
   29e6a:	ee19 1a10 	vmov	r1, s18
   29e6e:	4658      	mov	r0, fp
   29e70:	f7ec feb8 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
   29e74:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   29e76:	4643      	mov	r3, r8
   29e78:	f8cd 9000 	str.w	r9, [sp]
   29e7c:	462a      	mov	r2, r5
   29e7e:	4621      	mov	r1, r4
   29e80:	4638      	mov	r0, r7
   29e82:	f7fd fc63 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs >= rhs;
   29e86:	45da      	cmp	sl, fp
   29e88:	bfb4      	ite	lt
   29e8a:	f04f 0a00 	movlt.w	sl, #0
   29e8e:	f04f 0a01 	movge.w	sl, #1
   29e92:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29e94:	f109 0901 	add.w	r9, r9, #1
  return lhs >= rhs;
   29e98:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29e9c:	e7b8      	b.n	29e10 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29e9e:	f108 0801 	add.w	r8, r8, #1
   29ea2:	e7ad      	b.n	29e00 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29ea4:	3501      	adds	r5, #1
   29ea6:	e7a2      	b.n	29dee <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29ea8:	3401      	adds	r4, #1
   29eaa:	e799      	b.n	29de0 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   29eac:	a806      	add	r0, sp, #24
   29eae:	f7fd fb80 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   29eb2:	b01d      	add	sp, #116	; 0x74
   29eb4:	ecbd 8b04 	vpop	{d8-d9}
   29eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00029ebc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   29ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29ec0:	ed2d 8b04 	vpush	{d8-d9}
   29ec4:	4604      	mov	r4, r0
   29ec6:	b09d      	sub	sp, #116	; 0x74
   29ec8:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   29eca:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   29ecc:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   29ece:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   29ed0:	f7fe fc34 	bl	2873c <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   29ed4:	e9d4 6300 	ldrd	r6, r3, [r4]
   29ed8:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   29eda:	68a3      	ldr	r3, [r4, #8]
   29edc:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   29ee0:	68e3      	ldr	r3, [r4, #12]
   29ee2:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   29ee6:	6923      	ldr	r3, [r4, #16]
   29ee8:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   29eea:	6963      	ldr	r3, [r4, #20]
   29eec:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   29ef0:	69a3      	ldr	r3, [r4, #24]
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29ef2:	2400      	movs	r4, #0
  int input2_shift = op_params.input2_shift;
   29ef4:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29ef8:	2100      	movs	r1, #0
   29efa:	a806      	add	r0, sp, #24
   29efc:	f7fd fb64 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   29f00:	42a0      	cmp	r0, r4
   29f02:	dd5f      	ble.n	29fc4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x108>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29f04:	2500      	movs	r5, #0
   29f06:	af06      	add	r7, sp, #24
   29f08:	2101      	movs	r1, #1
   29f0a:	4638      	mov	r0, r7
   29f0c:	f7fd fb5c 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   29f10:	42a8      	cmp	r0, r5
   29f12:	dd55      	ble.n	29fc0 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x104>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29f14:	f04f 0800 	mov.w	r8, #0
   29f18:	2102      	movs	r1, #2
   29f1a:	4638      	mov	r0, r7
   29f1c:	f7fd fb54 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   29f20:	4540      	cmp	r0, r8
   29f22:	dd4b      	ble.n	29fbc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x100>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29f24:	f04f 0900 	mov.w	r9, #0
   29f28:	2103      	movs	r1, #3
   29f2a:	4638      	mov	r0, r7
   29f2c:	f7fd fb4c 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   29f30:	4548      	cmp	r0, r9
   29f32:	dd40      	ble.n	29fb6 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfa>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   29f34:	4643      	mov	r3, r8
   29f36:	462a      	mov	r2, r5
   29f38:	4621      	mov	r1, r4
   29f3a:	f8cd 9000 	str.w	r9, [sp]
   29f3e:	a80c      	add	r0, sp, #48	; 0x30
   29f40:	f7fd fc3a 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   29f44:	9b05      	ldr	r3, [sp, #20]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29f46:	462a      	mov	r2, r5
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   29f48:	f813 a000 	ldrb.w	sl, [r3, r0]
          const int32 input1_val =
   29f4c:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29f4e:	4621      	mov	r1, r4
          const int32 input1_val =
   29f50:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29f52:	f8cd 9000 	str.w	r9, [sp]
   29f56:	4643      	mov	r3, r8
   29f58:	a814      	add	r0, sp, #80	; 0x50
   29f5a:	f7fd fc2d 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   29f5e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29f60:	ee18 2a90 	vmov	r2, s17
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29f64:	f813 b000 	ldrb.w	fp, [r3, r0]
          const int32 input2_val =
   29f68:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29f6a:	ee18 1a10 	vmov	r1, s16
   29f6e:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   29f72:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29f74:	f7ec fe36 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   29f78:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29f7c:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29f7e:	ee19 2a90 	vmov	r2, s19
   29f82:	ee19 1a10 	vmov	r1, s18
   29f86:	4658      	mov	r0, fp
   29f88:	f7ec fe2c 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
   29f8c:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   29f8e:	4643      	mov	r3, r8
   29f90:	f8cd 9000 	str.w	r9, [sp]
   29f94:	462a      	mov	r2, r5
   29f96:	4621      	mov	r1, r4
   29f98:	4638      	mov	r0, r7
   29f9a:	f7fd fbd7 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs < rhs;
   29f9e:	45da      	cmp	sl, fp
   29fa0:	bfac      	ite	ge
   29fa2:	f04f 0a00 	movge.w	sl, #0
   29fa6:	f04f 0a01 	movlt.w	sl, #1
   29faa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29fac:	f109 0901 	add.w	r9, r9, #1
  return lhs < rhs;
   29fb0:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29fb4:	e7b8      	b.n	29f28 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29fb6:	f108 0801 	add.w	r8, r8, #1
   29fba:	e7ad      	b.n	29f18 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29fbc:	3501      	adds	r5, #1
   29fbe:	e7a2      	b.n	29f06 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29fc0:	3401      	adds	r4, #1
   29fc2:	e799      	b.n	29ef8 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   29fc4:	a806      	add	r0, sp, #24
   29fc6:	f7fd faf4 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   29fca:	b01d      	add	sp, #116	; 0x74
   29fcc:	ecbd 8b04 	vpop	{d8-d9}
   29fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00029fd4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   29fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29fd8:	ed2d 8b04 	vpush	{d8-d9}
   29fdc:	4604      	mov	r4, r0
   29fde:	b09d      	sub	sp, #116	; 0x74
   29fe0:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   29fe2:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   29fe4:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   29fe6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   29fe8:	f7fe fba8 	bl	2873c <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   29fec:	e9d4 6300 	ldrd	r6, r3, [r4]
   29ff0:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   29ff2:	68a3      	ldr	r3, [r4, #8]
   29ff4:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   29ff8:	68e3      	ldr	r3, [r4, #12]
   29ffa:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   29ffe:	6923      	ldr	r3, [r4, #16]
   2a000:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   2a002:	6963      	ldr	r3, [r4, #20]
   2a004:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   2a008:	69a3      	ldr	r3, [r4, #24]
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   2a00a:	2400      	movs	r4, #0
  int input2_shift = op_params.input2_shift;
   2a00c:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   2a010:	2100      	movs	r1, #0
   2a012:	a806      	add	r0, sp, #24
   2a014:	f7fd fad8 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a018:	42a0      	cmp	r0, r4
   2a01a:	dd5f      	ble.n	2a0dc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x108>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   2a01c:	2500      	movs	r5, #0
   2a01e:	af06      	add	r7, sp, #24
   2a020:	2101      	movs	r1, #1
   2a022:	4638      	mov	r0, r7
   2a024:	f7fd fad0 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a028:	42a8      	cmp	r0, r5
   2a02a:	dd55      	ble.n	2a0d8 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x104>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   2a02c:	f04f 0800 	mov.w	r8, #0
   2a030:	2102      	movs	r1, #2
   2a032:	4638      	mov	r0, r7
   2a034:	f7fd fac8 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a038:	4540      	cmp	r0, r8
   2a03a:	dd4b      	ble.n	2a0d4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x100>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   2a03c:	f04f 0900 	mov.w	r9, #0
   2a040:	2103      	movs	r1, #3
   2a042:	4638      	mov	r0, r7
   2a044:	f7fd fac0 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a048:	4548      	cmp	r0, r9
   2a04a:	dd40      	ble.n	2a0ce <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfa>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   2a04c:	4643      	mov	r3, r8
   2a04e:	462a      	mov	r2, r5
   2a050:	4621      	mov	r1, r4
   2a052:	f8cd 9000 	str.w	r9, [sp]
   2a056:	a80c      	add	r0, sp, #48	; 0x30
   2a058:	f7fd fbae 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   2a05c:	9b05      	ldr	r3, [sp, #20]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   2a05e:	462a      	mov	r2, r5
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   2a060:	f913 a000 	ldrsb.w	sl, [r3, r0]
          const int32 input1_val =
   2a064:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   2a066:	4621      	mov	r1, r4
          const int32 input1_val =
   2a068:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   2a06a:	f8cd 9000 	str.w	r9, [sp]
   2a06e:	4643      	mov	r3, r8
   2a070:	a814      	add	r0, sp, #80	; 0x50
   2a072:	f7fd fba1 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   2a076:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2a078:	ee18 2a90 	vmov	r2, s17
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   2a07c:	f913 b000 	ldrsb.w	fp, [r3, r0]
          const int32 input2_val =
   2a080:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2a082:	ee18 1a10 	vmov	r1, s16
   2a086:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   2a08a:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2a08c:	f7ec fdaa 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   2a090:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2a094:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2a096:	ee19 2a90 	vmov	r2, s19
   2a09a:	ee19 1a10 	vmov	r1, s18
   2a09e:	4658      	mov	r0, fp
   2a0a0:	f7ec fda0 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
   2a0a4:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   2a0a6:	4643      	mov	r3, r8
   2a0a8:	f8cd 9000 	str.w	r9, [sp]
   2a0ac:	462a      	mov	r2, r5
   2a0ae:	4621      	mov	r1, r4
   2a0b0:	4638      	mov	r0, r7
   2a0b2:	f7fd fb4b 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs < rhs;
   2a0b6:	45da      	cmp	sl, fp
   2a0b8:	bfac      	ite	ge
   2a0ba:	f04f 0a00 	movge.w	sl, #0
   2a0be:	f04f 0a01 	movlt.w	sl, #1
   2a0c2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   2a0c4:	f109 0901 	add.w	r9, r9, #1
  return lhs < rhs;
   2a0c8:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   2a0cc:	e7b8      	b.n	2a040 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   2a0ce:	f108 0801 	add.w	r8, r8, #1
   2a0d2:	e7ad      	b.n	2a030 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   2a0d4:	3501      	adds	r5, #1
   2a0d6:	e7a2      	b.n	2a01e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   2a0d8:	3401      	adds	r4, #1
   2a0da:	e799      	b.n	2a010 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   2a0dc:	a806      	add	r0, sp, #24
   2a0de:	f7fd fa68 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   2a0e2:	b01d      	add	sp, #116	; 0x74
   2a0e4:	ecbd 8b04 	vpop	{d8-d9}
   2a0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002a0ec <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   2a0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a0f0:	ed2d 8b04 	vpush	{d8-d9}
   2a0f4:	4604      	mov	r4, r0
   2a0f6:	b09d      	sub	sp, #116	; 0x74
   2a0f8:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   2a0fa:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   2a0fc:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   2a0fe:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   2a100:	f7fe fb1c 	bl	2873c <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   2a104:	e9d4 6300 	ldrd	r6, r3, [r4]
   2a108:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   2a10a:	68a3      	ldr	r3, [r4, #8]
   2a10c:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   2a110:	68e3      	ldr	r3, [r4, #12]
   2a112:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   2a116:	6923      	ldr	r3, [r4, #16]
   2a118:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   2a11a:	6963      	ldr	r3, [r4, #20]
   2a11c:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   2a120:	69a3      	ldr	r3, [r4, #24]
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   2a122:	2400      	movs	r4, #0
  int input2_shift = op_params.input2_shift;
   2a124:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   2a128:	2100      	movs	r1, #0
   2a12a:	a806      	add	r0, sp, #24
   2a12c:	f7fd fa4c 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a130:	42a0      	cmp	r0, r4
   2a132:	dd5f      	ble.n	2a1f4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x108>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   2a134:	2500      	movs	r5, #0
   2a136:	af06      	add	r7, sp, #24
   2a138:	2101      	movs	r1, #1
   2a13a:	4638      	mov	r0, r7
   2a13c:	f7fd fa44 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a140:	42a8      	cmp	r0, r5
   2a142:	dd55      	ble.n	2a1f0 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x104>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   2a144:	f04f 0800 	mov.w	r8, #0
   2a148:	2102      	movs	r1, #2
   2a14a:	4638      	mov	r0, r7
   2a14c:	f7fd fa3c 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a150:	4540      	cmp	r0, r8
   2a152:	dd4b      	ble.n	2a1ec <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x100>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   2a154:	f04f 0900 	mov.w	r9, #0
   2a158:	2103      	movs	r1, #3
   2a15a:	4638      	mov	r0, r7
   2a15c:	f7fd fa34 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a160:	4548      	cmp	r0, r9
   2a162:	dd40      	ble.n	2a1e6 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfa>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   2a164:	4643      	mov	r3, r8
   2a166:	462a      	mov	r2, r5
   2a168:	4621      	mov	r1, r4
   2a16a:	f8cd 9000 	str.w	r9, [sp]
   2a16e:	a80c      	add	r0, sp, #48	; 0x30
   2a170:	f7fd fb22 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   2a174:	9b05      	ldr	r3, [sp, #20]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   2a176:	462a      	mov	r2, r5
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   2a178:	f813 a000 	ldrb.w	sl, [r3, r0]
          const int32 input1_val =
   2a17c:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   2a17e:	4621      	mov	r1, r4
          const int32 input1_val =
   2a180:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   2a182:	f8cd 9000 	str.w	r9, [sp]
   2a186:	4643      	mov	r3, r8
   2a188:	a814      	add	r0, sp, #80	; 0x50
   2a18a:	f7fd fb15 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   2a18e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2a190:	ee18 2a90 	vmov	r2, s17
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   2a194:	f813 b000 	ldrb.w	fp, [r3, r0]
          const int32 input2_val =
   2a198:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2a19a:	ee18 1a10 	vmov	r1, s16
   2a19e:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   2a1a2:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2a1a4:	f7ec fd1e 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   2a1a8:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2a1ac:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2a1ae:	ee19 2a90 	vmov	r2, s19
   2a1b2:	ee19 1a10 	vmov	r1, s18
   2a1b6:	4658      	mov	r0, fp
   2a1b8:	f7ec fd14 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
   2a1bc:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   2a1be:	4643      	mov	r3, r8
   2a1c0:	f8cd 9000 	str.w	r9, [sp]
   2a1c4:	462a      	mov	r2, r5
   2a1c6:	4621      	mov	r1, r4
   2a1c8:	4638      	mov	r0, r7
   2a1ca:	f7fd fabf 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs <= rhs;
   2a1ce:	45da      	cmp	sl, fp
   2a1d0:	bfcc      	ite	gt
   2a1d2:	f04f 0a00 	movgt.w	sl, #0
   2a1d6:	f04f 0a01 	movle.w	sl, #1
   2a1da:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   2a1dc:	f109 0901 	add.w	r9, r9, #1
  return lhs <= rhs;
   2a1e0:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   2a1e4:	e7b8      	b.n	2a158 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   2a1e6:	f108 0801 	add.w	r8, r8, #1
   2a1ea:	e7ad      	b.n	2a148 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   2a1ec:	3501      	adds	r5, #1
   2a1ee:	e7a2      	b.n	2a136 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   2a1f0:	3401      	adds	r4, #1
   2a1f2:	e799      	b.n	2a128 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   2a1f4:	a806      	add	r0, sp, #24
   2a1f6:	f7fd f9dc 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   2a1fa:	b01d      	add	sp, #116	; 0x74
   2a1fc:	ecbd 8b04 	vpop	{d8-d9}
   2a200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002a204 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   2a204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a208:	ed2d 8b04 	vpush	{d8-d9}
   2a20c:	4604      	mov	r4, r0
   2a20e:	b09d      	sub	sp, #116	; 0x74
   2a210:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   2a212:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   2a214:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   2a216:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   2a218:	f7fe fa90 	bl	2873c <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   2a21c:	e9d4 6300 	ldrd	r6, r3, [r4]
   2a220:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   2a222:	68a3      	ldr	r3, [r4, #8]
   2a224:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   2a228:	68e3      	ldr	r3, [r4, #12]
   2a22a:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   2a22e:	6923      	ldr	r3, [r4, #16]
   2a230:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   2a232:	6963      	ldr	r3, [r4, #20]
   2a234:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   2a238:	69a3      	ldr	r3, [r4, #24]
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   2a23a:	2400      	movs	r4, #0
  int input2_shift = op_params.input2_shift;
   2a23c:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   2a240:	2100      	movs	r1, #0
   2a242:	a806      	add	r0, sp, #24
   2a244:	f7fd f9c0 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a248:	42a0      	cmp	r0, r4
   2a24a:	dd5f      	ble.n	2a30c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x108>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   2a24c:	2500      	movs	r5, #0
   2a24e:	af06      	add	r7, sp, #24
   2a250:	2101      	movs	r1, #1
   2a252:	4638      	mov	r0, r7
   2a254:	f7fd f9b8 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a258:	42a8      	cmp	r0, r5
   2a25a:	dd55      	ble.n	2a308 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x104>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   2a25c:	f04f 0800 	mov.w	r8, #0
   2a260:	2102      	movs	r1, #2
   2a262:	4638      	mov	r0, r7
   2a264:	f7fd f9b0 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a268:	4540      	cmp	r0, r8
   2a26a:	dd4b      	ble.n	2a304 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x100>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   2a26c:	f04f 0900 	mov.w	r9, #0
   2a270:	2103      	movs	r1, #3
   2a272:	4638      	mov	r0, r7
   2a274:	f7fd f9a8 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a278:	4548      	cmp	r0, r9
   2a27a:	dd40      	ble.n	2a2fe <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfa>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   2a27c:	4643      	mov	r3, r8
   2a27e:	462a      	mov	r2, r5
   2a280:	4621      	mov	r1, r4
   2a282:	f8cd 9000 	str.w	r9, [sp]
   2a286:	a80c      	add	r0, sp, #48	; 0x30
   2a288:	f7fd fa96 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   2a28c:	9b05      	ldr	r3, [sp, #20]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   2a28e:	462a      	mov	r2, r5
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   2a290:	f913 a000 	ldrsb.w	sl, [r3, r0]
          const int32 input1_val =
   2a294:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   2a296:	4621      	mov	r1, r4
          const int32 input1_val =
   2a298:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   2a29a:	f8cd 9000 	str.w	r9, [sp]
   2a29e:	4643      	mov	r3, r8
   2a2a0:	a814      	add	r0, sp, #80	; 0x50
   2a2a2:	f7fd fa89 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   2a2a6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2a2a8:	ee18 2a90 	vmov	r2, s17
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   2a2ac:	f913 b000 	ldrsb.w	fp, [r3, r0]
          const int32 input2_val =
   2a2b0:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2a2b2:	ee18 1a10 	vmov	r1, s16
   2a2b6:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   2a2ba:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2a2bc:	f7ec fc92 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   2a2c0:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2a2c4:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2a2c6:	ee19 2a90 	vmov	r2, s19
   2a2ca:	ee19 1a10 	vmov	r1, s18
   2a2ce:	4658      	mov	r0, fp
   2a2d0:	f7ec fc88 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
   2a2d4:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   2a2d6:	4643      	mov	r3, r8
   2a2d8:	f8cd 9000 	str.w	r9, [sp]
   2a2dc:	462a      	mov	r2, r5
   2a2de:	4621      	mov	r1, r4
   2a2e0:	4638      	mov	r0, r7
   2a2e2:	f7fd fa33 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs <= rhs;
   2a2e6:	45da      	cmp	sl, fp
   2a2e8:	bfcc      	ite	gt
   2a2ea:	f04f 0a00 	movgt.w	sl, #0
   2a2ee:	f04f 0a01 	movle.w	sl, #1
   2a2f2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   2a2f4:	f109 0901 	add.w	r9, r9, #1
  return lhs <= rhs;
   2a2f8:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   2a2fc:	e7b8      	b.n	2a270 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   2a2fe:	f108 0801 	add.w	r8, r8, #1
   2a302:	e7ad      	b.n	2a260 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   2a304:	3501      	adds	r5, #1
   2a306:	e7a2      	b.n	2a24e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   2a308:	3401      	adds	r4, #1
   2a30a:	e799      	b.n	2a240 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   2a30c:	a806      	add	r0, sp, #24
   2a30e:	f7fd f950 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   2a312:	b01d      	add	sp, #116	; 0x74
   2a314:	ecbd 8b04 	vpop	{d8-d9}
   2a318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
                       const RuntimeShape& shape2, int index2) {
   2a31c:	b570      	push	{r4, r5, r6, lr}
   2a31e:	4615      	mov	r5, r2
   2a320:	461e      	mov	r6, r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   2a322:	f7fd f951 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a326:	4631      	mov	r1, r6
   2a328:	4604      	mov	r4, r0
   2a32a:	4628      	mov	r0, r5
   2a32c:	f7fd f94c 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a330:	4284      	cmp	r4, r0
   2a332:	d001      	beq.n	2a338 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x1c>
   2a334:	f006 fd41 	bl	30dba <abort>
}
   2a338:	bd70      	pop	{r4, r5, r6, pc}

0002a33a <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph>:
// when optimizng this routine further.
inline void ConcatenationWithScaling(const ConcatenationParams& params,
                                     const RuntimeShape* const* input_shapes,
                                     const uint8* const* input_data,
                                     const RuntimeShape& output_shape,
                                     uint8* output_data) {
   2a33a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a33e:	ed2d 8b04 	vpush	{d8-d9}
   2a342:	469b      	mov	fp, r3
  int axis = params.axis;
  const int32* input_zeropoint = params.input_zeropoint;
   2a344:	6843      	ldr	r3, [r0, #4]
                                     uint8* output_data) {
   2a346:	b08f      	sub	sp, #60	; 0x3c
  const int32* input_zeropoint = params.input_zeropoint;
   2a348:	9306      	str	r3, [sp, #24]
  const float* input_scale = params.input_scale;
   2a34a:	6883      	ldr	r3, [r0, #8]
  int axis = params.axis;
   2a34c:	f990 4000 	ldrsb.w	r4, [r0]
  const float* input_scale = params.input_scale;
   2a350:	9307      	str	r3, [sp, #28]
  int inputs_count = params.inputs_count;
   2a352:	8983      	ldrh	r3, [r0, #12]
  const int32 output_zeropoint = params.output_zeropoint;
  const float output_scale = params.output_scale;

  const int concat_dimensions = output_shape.DimensionsCount();
   2a354:	f8db 5000 	ldr.w	r5, [fp]
  int inputs_count = params.inputs_count;
   2a358:	9303      	str	r3, [sp, #12]
  const int32 output_zeropoint = params.output_zeropoint;
   2a35a:	6903      	ldr	r3, [r0, #16]
  TFLITE_DCHECK_LT(axis, concat_dimensions);
   2a35c:	42ac      	cmp	r4, r5
  const float output_scale = params.output_scale;
   2a35e:	ed90 9a05 	vldr	s18, [r0, #20]
                                     uint8* output_data) {
   2a362:	9105      	str	r1, [sp, #20]
   2a364:	9208      	str	r2, [sp, #32]
  const int32 output_zeropoint = params.output_zeropoint;
   2a366:	9304      	str	r3, [sp, #16]
  TFLITE_DCHECK_LT(axis, concat_dimensions);
   2a368:	db01      	blt.n	2a36e <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x34>
   2a36a:	f006 fd26 	bl	30dba <abort>

  int64_t concat_size = 0;
  for (int i = 0; i < inputs_count; i++) {
   2a36e:	f04f 0800 	mov.w	r8, #0
  int64_t concat_size = 0;
   2a372:	2600      	movs	r6, #0
   2a374:	2700      	movs	r7, #0
  for (int i = 0; i < inputs_count; i++) {
   2a376:	9b03      	ldr	r3, [sp, #12]
   2a378:	4598      	cmp	r8, r3
   2a37a:	da1f      	bge.n	2a3bc <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x82>
    TFLITE_DCHECK_EQ(input_shapes[i]->DimensionsCount(), concat_dimensions);
   2a37c:	9b05      	ldr	r3, [sp, #20]
   2a37e:	f853 a028 	ldr.w	sl, [r3, r8, lsl #2]
   2a382:	f8da 3000 	ldr.w	r3, [sl]
   2a386:	429d      	cmp	r5, r3
   2a388:	d1ef      	bne.n	2a36a <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x30>
    for (int j = 0; j < concat_dimensions; j++) {
   2a38a:	f04f 0900 	mov.w	r9, #0
   2a38e:	45a9      	cmp	r9, r5
   2a390:	da0a      	bge.n	2a3a8 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x6e>
      if (j != axis) {
   2a392:	45a1      	cmp	r9, r4
   2a394:	d005      	beq.n	2a3a2 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x68>
        MatchingDim(*input_shapes[i], j, output_shape, j);
   2a396:	464b      	mov	r3, r9
   2a398:	465a      	mov	r2, fp
   2a39a:	4649      	mov	r1, r9
   2a39c:	4650      	mov	r0, sl
   2a39e:	f7ff ffbd 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    for (int j = 0; j < concat_dimensions; j++) {
   2a3a2:	f109 0901 	add.w	r9, r9, #1
   2a3a6:	e7f2      	b.n	2a38e <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x54>
      }
    }
    concat_size += input_shapes[i]->Dims(axis);
   2a3a8:	4621      	mov	r1, r4
   2a3aa:	4650      	mov	r0, sl
   2a3ac:	f7fd f90c 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a3b0:	1836      	adds	r6, r6, r0
   2a3b2:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
  for (int i = 0; i < inputs_count; i++) {
   2a3b6:	f108 0801 	add.w	r8, r8, #1
   2a3ba:	e7dc      	b.n	2a376 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x3c>
  }
  TFLITE_DCHECK_EQ(concat_size, output_shape.Dims(axis));
   2a3bc:	4621      	mov	r1, r4
   2a3be:	4658      	mov	r0, fp
   2a3c0:	f7fd f902 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a3c4:	17c1      	asrs	r1, r0, #31
   2a3c6:	42b9      	cmp	r1, r7
   2a3c8:	bf08      	it	eq
   2a3ca:	42b0      	cmpeq	r0, r6
   2a3cc:	d1cd      	bne.n	2a36a <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x30>
  int64_t outer_size = 1;
  for (int i = 0; i < axis; ++i) {
   2a3ce:	2600      	movs	r6, #0
  int64_t outer_size = 1;
   2a3d0:	f04f 0901 	mov.w	r9, #1
   2a3d4:	f04f 0a00 	mov.w	sl, #0
  for (int i = 0; i < axis; ++i) {
   2a3d8:	42a6      	cmp	r6, r4
   2a3da:	da0d      	bge.n	2a3f8 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0xbe>
    outer_size *= output_shape.Dims(i);
   2a3dc:	4631      	mov	r1, r6
   2a3de:	4658      	mov	r0, fp
   2a3e0:	f7fd f8f2 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a3e4:	17c3      	asrs	r3, r0, #31
   2a3e6:	fb09 f303 	mul.w	r3, r9, r3
   2a3ea:	fb00 330a 	mla	r3, r0, sl, r3
   2a3ee:	fba9 9a00 	umull	r9, sl, r9, r0
  for (int i = 0; i < axis; ++i) {
   2a3f2:	3601      	adds	r6, #1
    outer_size *= output_shape.Dims(i);
   2a3f4:	449a      	add	sl, r3
  for (int i = 0; i < axis; ++i) {
   2a3f6:	e7ef      	b.n	2a3d8 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x9e>
  }
  // For all input arrays,
  // FlatSize() = outer_size * Dims(axis) * base_inner_size;
  int64_t base_inner_size = 1;
   2a3f8:	2201      	movs	r2, #1
   2a3fa:	2300      	movs	r3, #0
   2a3fc:	e9cd 2300 	strd	r2, r3, [sp]
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   2a400:	1c66      	adds	r6, r4, #1
   2a402:	42ae      	cmp	r6, r5
   2a404:	d012      	beq.n	2a42c <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0xf2>
    base_inner_size *= output_shape.Dims(i);
   2a406:	4631      	mov	r1, r6
   2a408:	4658      	mov	r0, fp
   2a40a:	f7fd f8dd 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a40e:	9900      	ldr	r1, [sp, #0]
   2a410:	17c3      	asrs	r3, r0, #31
   2a412:	434b      	muls	r3, r1
   2a414:	9a01      	ldr	r2, [sp, #4]
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   2a416:	3601      	adds	r6, #1
    base_inner_size *= output_shape.Dims(i);
   2a418:	fb00 3302 	mla	r3, r0, r2, r3
   2a41c:	fba1 1200 	umull	r1, r2, r1, r0
   2a420:	e9cd 1200 	strd	r1, r2, [sp]
   2a424:	9a01      	ldr	r2, [sp, #4]
   2a426:	4413      	add	r3, r2
   2a428:	9301      	str	r3, [sp, #4]
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   2a42a:	e7ea      	b.n	2a402 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0xc8>
  }

  const float inverse_output_scale = 1.f / output_scale;
   2a42c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  uint8* output_ptr = output_data;
  for (int k = 0; k < outer_size; k++) {
   2a430:	f04f 0800 	mov.w	r8, #0
  const float inverse_output_scale = 1.f / output_scale;
   2a434:	eec7 9a89 	vdiv.f32	s19, s15, s18
  for (int k = 0; k < outer_size; k++) {
   2a438:	4642      	mov	r2, r8
   2a43a:	45c8      	cmp	r8, r9
   2a43c:	ea4f 73e2 	mov.w	r3, r2, asr #31
   2a440:	eb73 030a 	sbcs.w	r3, r3, sl
   2a444:	da68      	bge.n	2a518 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x1de>
    for (int i = 0; i < inputs_count; ++i) {
   2a446:	2500      	movs	r5, #0
   2a448:	f8dd b01c 	ldr.w	fp, [sp, #28]
   2a44c:	9b03      	ldr	r3, [sp, #12]
   2a44e:	429d      	cmp	r5, r3
   2a450:	da5f      	bge.n	2a512 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x1d8>
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
   2a452:	9b05      	ldr	r3, [sp, #20]
   2a454:	4621      	mov	r1, r4
   2a456:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   2a45a:	f7fd f8b5 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a45e:	9b00      	ldr	r3, [sp, #0]
      const uint8* input_ptr = input_data[i] + k * copy_size;
      if (input_zeropoint[i] == output_zeropoint &&
   2a460:	9a06      	ldr	r2, [sp, #24]
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
   2a462:	fb00 f603 	mul.w	r6, r0, r3
      const uint8* input_ptr = input_data[i] + k * copy_size;
   2a466:	9b08      	ldr	r3, [sp, #32]
      if (input_zeropoint[i] == output_zeropoint &&
   2a468:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
   2a46c:	9904      	ldr	r1, [sp, #16]
      const uint8* input_ptr = input_data[i] + k * copy_size;
   2a46e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
      if (input_zeropoint[i] == output_zeropoint &&
   2a472:	428a      	cmp	r2, r1
   2a474:	ecfb 8a01 	vldmia	fp!, {s17}
      const uint8* input_ptr = input_data[i] + k * copy_size;
   2a478:	fb06 3308 	mla	r3, r6, r8, r3
      if (input_zeropoint[i] == output_zeropoint &&
   2a47c:	d10e      	bne.n	2a49c <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x162>
   2a47e:	eef4 8a49 	vcmp.f32	s17, s18
   2a482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2a486:	d109      	bne.n	2a49c <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x162>
          input_scale[i] == output_scale) {
        memcpy(output_ptr, input_ptr, copy_size);
   2a488:	4632      	mov	r2, r6
   2a48a:	4619      	mov	r1, r3
   2a48c:	981c      	ldr	r0, [sp, #112]	; 0x70
   2a48e:	f006 fcb7 	bl	30e00 <memcpy>
                                output_zeropoint;
          output_ptr[j] = static_cast<uint8_t>(
              std::max<int32_t>(std::min<int32_t>(255, value), 0));
        }
      }
      output_ptr += copy_size;
   2a492:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    for (int i = 0; i < inputs_count; ++i) {
   2a494:	3501      	adds	r5, #1
      output_ptr += copy_size;
   2a496:	4433      	add	r3, r6
   2a498:	931c      	str	r3, [sp, #112]	; 0x70
    for (int i = 0; i < inputs_count; ++i) {
   2a49a:	e7d7      	b.n	2a44c <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x112>
        const float bias = -input_zeropoint[i] * scale;
   2a49c:	4252      	negs	r2, r2
   2a49e:	ee08 2a10 	vmov	s16, r2
        const float scale = input_scale[i] * inverse_output_scale;
   2a4a2:	ee68 8aa9 	vmul.f32	s17, s17, s19
        const float bias = -input_zeropoint[i] * scale;
   2a4a6:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
        for (int j = 0; j < copy_size; ++j) {
   2a4aa:	2700      	movs	r7, #0
        const float bias = -input_zeropoint[i] * scale;
   2a4ac:	ee28 8a28 	vmul.f32	s16, s16, s17
        for (int j = 0; j < copy_size; ++j) {
   2a4b0:	42b7      	cmp	r7, r6
   2a4b2:	daee      	bge.n	2a492 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x158>
                                    input_ptr[j] * scale + bias)) +
   2a4b4:	5dda      	ldrb	r2, [r3, r7]
   2a4b6:	eeb0 7a48 	vmov.f32	s14, s16
   2a4ba:	ee07 2a90 	vmov	s15, r2
   2a4be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2a4c2:	eea7 7aa8 	vfma.f32	s14, s15, s17
   2a4c6:	ee17 0a10 	vmov	r0, s14
   2a4ca:	9309      	str	r3, [sp, #36]	; 0x24
   2a4cc:	f7e2 f81c 	bl	c508 <__aeabi_f2d>
   2a4d0:	f7f8 fafc 	bl	22acc <round>
   2a4d4:	f7e6 faac 	bl	10a30 <__aeabi_d2f>
          const int32_t value = static_cast<int32_t>(tflite::TfLiteRound(
   2a4d8:	ee07 0a90 	vmov	s15, r0
   2a4dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   2a4e0:	ee17 0a90 	vmov	r0, s15
                                    input_ptr[j] * scale + bias)) +
   2a4e4:	9b04      	ldr	r3, [sp, #16]
   2a4e6:	aa0b      	add	r2, sp, #44	; 0x2c
   2a4e8:	4418      	add	r0, r3
              std::max<int32_t>(std::min<int32_t>(255, value), 0));
   2a4ea:	23ff      	movs	r3, #255	; 0xff
      if (__b < __a)
   2a4ec:	28fe      	cmp	r0, #254	; 0xfe
   2a4ee:	930c      	str	r3, [sp, #48]	; 0x30
	return __b;
   2a4f0:	ab0c      	add	r3, sp, #48	; 0x30
   2a4f2:	bfcc      	ite	gt
   2a4f4:	4619      	movgt	r1, r3
   2a4f6:	4611      	movle	r1, r2
                                output_zeropoint;
   2a4f8:	900b      	str	r0, [sp, #44]	; 0x2c
              std::max<int32_t>(std::min<int32_t>(255, value), 0));
   2a4fa:	2000      	movs	r0, #0
   2a4fc:	900d      	str	r0, [sp, #52]	; 0x34
      if (__a < __b)
   2a4fe:	6808      	ldr	r0, [r1, #0]
   2a500:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2a502:	2800      	cmp	r0, #0
	return __b;
   2a504:	bfb8      	it	lt
   2a506:	a90d      	addlt	r1, sp, #52	; 0x34
          output_ptr[j] = static_cast<uint8_t>(
   2a508:	6809      	ldr	r1, [r1, #0]
   2a50a:	981c      	ldr	r0, [sp, #112]	; 0x70
   2a50c:	55c1      	strb	r1, [r0, r7]
        for (int j = 0; j < copy_size; ++j) {
   2a50e:	3701      	adds	r7, #1
   2a510:	e7ce      	b.n	2a4b0 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x176>
  for (int k = 0; k < outer_size; k++) {
   2a512:	f108 0801 	add.w	r8, r8, #1
   2a516:	e78f      	b.n	2a438 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0xfe>
    }
  }
}
   2a518:	b00f      	add	sp, #60	; 0x3c
   2a51a:	ecbd 8b04 	vpop	{d8-d9}
   2a51e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002a522 <_ZN6tflite3ops5micro13concatenation18GetAllTensorShapesERK13TfLiteContextRK14TfLiteIntArrayPNS_12RuntimeShapeE.isra.0>:
inline void GetAllTensorShapes(const TfLiteContext& context,
   2a522:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a524:	4607      	mov	r7, r0
   2a526:	460e      	mov	r6, r1
   2a528:	4614      	mov	r4, r2
   2a52a:	2501      	movs	r5, #1
   2a52c:	b087      	sub	sp, #28
  for (int i = 0; i < tensor_list.size; ++i) {
   2a52e:	6832      	ldr	r2, [r6, #0]
   2a530:	1e6b      	subs	r3, r5, #1
   2a532:	429a      	cmp	r2, r3
   2a534:	dd15      	ble.n	2a562 <_ZN6tflite3ops5micro13concatenation18GetAllTensorShapesERK13TfLiteContextRK14TfLiteIntArrayPNS_12RuntimeShapeE.isra.0+0x40>
    const TfLiteTensor* t = &context.tensors[tensor_list.data[i]];
   2a536:	683b      	ldr	r3, [r7, #0]
   2a538:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
    RuntimeShape shape = GetTensorShape(t);
   2a53c:	4668      	mov	r0, sp
   2a53e:	eb03 1181 	add.w	r1, r3, r1, lsl #6
   2a542:	f7fd f87b 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    all_shapes[i].ReplaceWith(shape.DimensionsCount(), shape.DimsData());
   2a546:	9900      	ldr	r1, [sp, #0]
   2a548:	4620      	mov	r0, r4
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   2a54a:	2905      	cmp	r1, #5
   2a54c:	bfcc      	ite	gt
   2a54e:	9a01      	ldrgt	r2, [sp, #4]
   2a550:	aa01      	addle	r2, sp, #4
   2a552:	f7fe f834 	bl	285be <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi>
    RuntimeShape shape = GetTensorShape(t);
   2a556:	4668      	mov	r0, sp
   2a558:	f7fd f82b 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  for (int i = 0; i < tensor_list.size; ++i) {
   2a55c:	3501      	adds	r5, #1
   2a55e:	3418      	adds	r4, #24
   2a560:	e7e5      	b.n	2a52e <_ZN6tflite3ops5micro13concatenation18GetAllTensorShapesERK13TfLiteContextRK14TfLiteIntArrayPNS_12RuntimeShapeE.isra.0+0xc>
}
   2a562:	b007      	add	sp, #28
   2a564:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a566 <_ZN6tflite3ops5micro13concatenation17GetShapesPointersEPKNS_12RuntimeShapeEjPS5_>:
                              const RuntimeShape* pointers[]) {
   2a566:	b530      	push	{r4, r5, lr}
  for (size_t i = 0; i < num; ++i) {
   2a568:	2300      	movs	r3, #0
    pointers[i] = &shapes[i];
   2a56a:	2518      	movs	r5, #24
  for (size_t i = 0; i < num; ++i) {
   2a56c:	428b      	cmp	r3, r1
   2a56e:	d005      	beq.n	2a57c <_ZN6tflite3ops5micro13concatenation17GetShapesPointersEPKNS_12RuntimeShapeEjPS5_+0x16>
    pointers[i] = &shapes[i];
   2a570:	fb05 0403 	mla	r4, r5, r3, r0
   2a574:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
  for (size_t i = 0; i < num; ++i) {
   2a578:	3301      	adds	r3, #1
   2a57a:	e7f7      	b.n	2a56c <_ZN6tflite3ops5micro13concatenation17GetShapesPointersEPKNS_12RuntimeShapeEjPS5_+0x6>
}
   2a57c:	bd30      	pop	{r4, r5, pc}

0002a57e <_ZN6tflite3ops5micro13concatenation18EvalQuantizedUInt8EP13TfLiteContextP10TfLiteNode>:
void EvalQuantizedUInt8(TfLiteContext* context, TfLiteNode* node) {
   2a57e:	b5f0      	push	{r4, r5, r6, r7, lr}
  RuntimeShape() : size_(0) {}
   2a580:	2200      	movs	r2, #0
   2a582:	4604      	mov	r4, r0
   2a584:	460e      	mov	r6, r1
   2a586:	250a      	movs	r5, #10
   2a588:	b0f3      	sub	sp, #460	; 0x1cc
   2a58a:	ab36      	add	r3, sp, #216	; 0xd8
  RuntimeShape inputs_shape[kMaxInputNum];
   2a58c:	3d01      	subs	r5, #1
   2a58e:	f843 2b18 	str.w	r2, [r3], #24
   2a592:	d1fb      	bne.n	2a58c <_ZN6tflite3ops5micro13concatenation18EvalQuantizedUInt8EP13TfLiteContextP10TfLiteNode+0xe>
  GetAllTensorShapes(*context, *node->inputs, inputs_shape);
   2a594:	f104 0008 	add.w	r0, r4, #8
   2a598:	6831      	ldr	r1, [r6, #0]
   2a59a:	aa36      	add	r2, sp, #216	; 0xd8
   2a59c:	f7ff ffc1 	bl	2a522 <_ZN6tflite3ops5micro13concatenation18GetAllTensorShapesERK13TfLiteContextRK14TfLiteIntArrayPNS_12RuntimeShapeE.isra.0>
  GetShapesPointers(inputs_shape, node->inputs->size, inputs_shape_ptr);
   2a5a0:	6833      	ldr	r3, [r6, #0]
   2a5a2:	aa0e      	add	r2, sp, #56	; 0x38
   2a5a4:	6819      	ldr	r1, [r3, #0]
   2a5a6:	a836      	add	r0, sp, #216	; 0xd8
   2a5a8:	f7ff ffdd 	bl	2a566 <_ZN6tflite3ops5micro13concatenation17GetShapesPointersEPKNS_12RuntimeShapeEjPS5_>
  GetAllTensorData(*context, *node->inputs, inputs_data);
   2a5ac:	6837      	ldr	r7, [r6, #0]
inline void GetAllTensorData(const TfLiteContext& context,
   2a5ae:	68a4      	ldr	r4, [r4, #8]
  for (int i = 0; i < tensor_list.size; ++i) {
   2a5b0:	463a      	mov	r2, r7
   2a5b2:	f852 cb04 	ldr.w	ip, [r2], #4
    all_data[i] = GetTensorData<T>(t);
   2a5b6:	a818      	add	r0, sp, #96	; 0x60
  for (int i = 0; i < tensor_list.size; ++i) {
   2a5b8:	4611      	mov	r1, r2
   2a5ba:	45ac      	cmp	ip, r5
   2a5bc:	dc13      	bgt.n	2a5e6 <_ZN6tflite3ops5micro13concatenation18EvalQuantizedUInt8EP13TfLiteContextP10TfLiteNode+0x68>
   2a5be:	a822      	add	r0, sp, #136	; 0x88
  for (int i = 0; i < tensor_list.size; ++i) {
   2a5c0:	2300      	movs	r3, #0
   2a5c2:	4684      	mov	ip, r0
   2a5c4:	ad2c      	add	r5, sp, #176	; 0xb0
   2a5c6:	6839      	ldr	r1, [r7, #0]
   2a5c8:	4299      	cmp	r1, r3
   2a5ca:	dd16      	ble.n	2a5fa <_ZN6tflite3ops5micro13concatenation18EvalQuantizedUInt8EP13TfLiteContextP10TfLiteNode+0x7c>
    const TfLiteTensor* t = &context.tensors[tensor_list.data[i]];
   2a5cc:	f852 1b04 	ldr.w	r1, [r2], #4
   2a5d0:	eb04 1181 	add.w	r1, r4, r1, lsl #6
    scales[i] = t->params.scale;
   2a5d4:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    zero_points[i] = t->params.zero_point;
   2a5d8:	6909      	ldr	r1, [r1, #16]
    scales[i] = t->params.scale;
   2a5da:	f840 eb04 	str.w	lr, [r0], #4
    zero_points[i] = t->params.zero_point;
   2a5de:	f845 1023 	str.w	r1, [r5, r3, lsl #2]
  for (int i = 0; i < tensor_list.size; ++i) {
   2a5e2:	3301      	adds	r3, #1
   2a5e4:	e7ef      	b.n	2a5c6 <_ZN6tflite3ops5micro13concatenation18EvalQuantizedUInt8EP13TfLiteContextP10TfLiteNode+0x48>
    const TfLiteTensor* t = &context.tensors[tensor_list.data[i]];
   2a5e6:	f851 3b04 	ldr.w	r3, [r1], #4
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   2a5ea:	eb14 1383 	adds.w	r3, r4, r3, lsl #6
   2a5ee:	bf18      	it	ne
   2a5f0:	685b      	ldrne	r3, [r3, #4]
    all_data[i] = GetTensorData<T>(t);
   2a5f2:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
  for (int i = 0; i < tensor_list.size; ++i) {
   2a5f6:	3501      	adds	r5, #1
   2a5f8:	e7df      	b.n	2a5ba <_ZN6tflite3ops5micro13concatenation18EvalQuantizedUInt8EP13TfLiteContextP10TfLiteNode+0x3c>
   2a5fa:	6873      	ldr	r3, [r6, #4]
                                          inputs_data, GetTensorShape(output),
   2a5fc:	a808      	add	r0, sp, #32
   2a5fe:	685b      	ldr	r3, [r3, #4]
   2a600:	eb04 1483 	add.w	r4, r4, r3, lsl #6
  op_params.axis = CalculatePositiveAxis(params->axis, output);
   2a604:	6973      	ldr	r3, [r6, #20]
   2a606:	681b      	ldr	r3, [r3, #0]
  if (axis >= 0) {
   2a608:	2b00      	cmp	r3, #0
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   2a60a:	bfbc      	itt	lt
   2a60c:	68a2      	ldrlt	r2, [r4, #8]
    return NumDimensions(output_tensor) + axis;
   2a60e:	6812      	ldrlt	r2, [r2, #0]
  op_params.inputs_count = NumInputs(node);
   2a610:	f8ad 1014 	strh.w	r1, [sp, #20]
    return NumDimensions(output_tensor) + axis;
   2a614:	bfb8      	it	lt
   2a616:	189b      	addlt	r3, r3, r2
  op_params.axis = CalculatePositiveAxis(params->axis, output);
   2a618:	f88d 3008 	strb.w	r3, [sp, #8]
  op_params.output_zeropoint = output->params.zero_point;
   2a61c:	6923      	ldr	r3, [r4, #16]
                                          inputs_data, GetTensorShape(output),
   2a61e:	4621      	mov	r1, r4
  op_params.output_zeropoint = output->params.zero_point;
   2a620:	9306      	str	r3, [sp, #24]
  op_params.output_scale = output->params.scale;
   2a622:	68e3      	ldr	r3, [r4, #12]
  op_params.input_scale = inputs_scale;
   2a624:	e9cd 5c03 	strd	r5, ip, [sp, #12]
  op_params.output_scale = output->params.scale;
   2a628:	9307      	str	r3, [sp, #28]
                                          inputs_data, GetTensorShape(output),
   2a62a:	f7fd f807 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::ConcatenationWithScaling(op_params, inputs_shape_ptr,
   2a62e:	6863      	ldr	r3, [r4, #4]
   2a630:	aa18      	add	r2, sp, #96	; 0x60
   2a632:	9300      	str	r3, [sp, #0]
   2a634:	a90e      	add	r1, sp, #56	; 0x38
   2a636:	ab08      	add	r3, sp, #32
   2a638:	a802      	add	r0, sp, #8
   2a63a:	f7ff fe7e 	bl	2a33a <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph>
                                          inputs_data, GetTensorShape(output),
   2a63e:	a808      	add	r0, sp, #32
   2a640:	f7fc ffb7 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   2a644:	2409      	movs	r4, #9
  RuntimeShape inputs_shape[kMaxInputNum];
   2a646:	2518      	movs	r5, #24
   2a648:	ab36      	add	r3, sp, #216	; 0xd8
   2a64a:	fb05 3004 	mla	r0, r5, r4, r3
   2a64e:	f7fc ffb0 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   2a652:	3c01      	subs	r4, #1
   2a654:	d2f8      	bcs.n	2a648 <_ZN6tflite3ops5micro13concatenation18EvalQuantizedUInt8EP13TfLiteContextP10TfLiteNode+0xca>
}
   2a656:	b073      	add	sp, #460	; 0x1cc
   2a658:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a65a <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>:
inline void Concatenation(const ConcatenationParams& params,
   2a65a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a65e:	469b      	mov	fp, r3
  int axis = params.axis;
   2a660:	f990 8000 	ldrsb.w	r8, [r0]
  const int concat_dimensions = output_shape.DimensionsCount();
   2a664:	f8db 9000 	ldr.w	r9, [fp]
  int inputs_count = params.inputs_count;
   2a668:	8983      	ldrh	r3, [r0, #12]
inline void Concatenation(const ConcatenationParams& params,
   2a66a:	b085      	sub	sp, #20
  TFLITE_DCHECK_LT(axis, concat_dimensions);
   2a66c:	45c8      	cmp	r8, r9
inline void Concatenation(const ConcatenationParams& params,
   2a66e:	e9cd 1201 	strd	r1, r2, [sp, #4]
  int inputs_count = params.inputs_count;
   2a672:	9300      	str	r3, [sp, #0]
  TFLITE_DCHECK_LT(axis, concat_dimensions);
   2a674:	db01      	blt.n	2a67a <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x20>
   2a676:	f006 fba0 	bl	30dba <abort>
  for (int i = 0; i < inputs_count; i++) {
   2a67a:	2400      	movs	r4, #0
  int64_t concat_size = 0;
   2a67c:	2600      	movs	r6, #0
   2a67e:	2700      	movs	r7, #0
  for (int i = 0; i < inputs_count; i++) {
   2a680:	9b00      	ldr	r3, [sp, #0]
   2a682:	429c      	cmp	r4, r3
   2a684:	da1d      	bge.n	2a6c2 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x68>
    TFLITE_DCHECK_EQ(input_shapes[i]->DimensionsCount(), concat_dimensions);
   2a686:	9b01      	ldr	r3, [sp, #4]
   2a688:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   2a68c:	682b      	ldr	r3, [r5, #0]
   2a68e:	4599      	cmp	r9, r3
   2a690:	d1f1      	bne.n	2a676 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1c>
    for (int j = 0; j < concat_dimensions; j++) {
   2a692:	f04f 0a00 	mov.w	sl, #0
   2a696:	45ca      	cmp	sl, r9
   2a698:	da0a      	bge.n	2a6b0 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x56>
      if (j != axis) {
   2a69a:	45c2      	cmp	sl, r8
   2a69c:	d005      	beq.n	2a6aa <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x50>
        MatchingDim(*input_shapes[i], j, output_shape, j);
   2a69e:	4653      	mov	r3, sl
   2a6a0:	465a      	mov	r2, fp
   2a6a2:	4651      	mov	r1, sl
   2a6a4:	4628      	mov	r0, r5
   2a6a6:	f7ff fe39 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    for (int j = 0; j < concat_dimensions; j++) {
   2a6aa:	f10a 0a01 	add.w	sl, sl, #1
   2a6ae:	e7f2      	b.n	2a696 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x3c>
    concat_size += input_shapes[i]->Dims(axis);
   2a6b0:	4641      	mov	r1, r8
   2a6b2:	4628      	mov	r0, r5
   2a6b4:	f7fc ff88 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a6b8:	1836      	adds	r6, r6, r0
   2a6ba:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
  for (int i = 0; i < inputs_count; i++) {
   2a6be:	3401      	adds	r4, #1
   2a6c0:	e7de      	b.n	2a680 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x26>
  TFLITE_DCHECK_EQ(concat_size, output_shape.Dims(axis));
   2a6c2:	4641      	mov	r1, r8
   2a6c4:	4658      	mov	r0, fp
   2a6c6:	f7fc ff7f 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a6ca:	17c1      	asrs	r1, r0, #31
   2a6cc:	42b9      	cmp	r1, r7
   2a6ce:	bf08      	it	eq
   2a6d0:	42b0      	cmpeq	r0, r6
   2a6d2:	d1d0      	bne.n	2a676 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1c>
  for (int i = 0; i < axis; ++i) {
   2a6d4:	2600      	movs	r6, #0
  int64_t outer_size = 1;
   2a6d6:	2401      	movs	r4, #1
   2a6d8:	2500      	movs	r5, #0
  for (int i = 0; i < axis; ++i) {
   2a6da:	4546      	cmp	r6, r8
   2a6dc:	da0c      	bge.n	2a6f8 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x9e>
    outer_size *= output_shape.Dims(i);
   2a6de:	4631      	mov	r1, r6
   2a6e0:	4658      	mov	r0, fp
   2a6e2:	f7fc ff71 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a6e6:	17c1      	asrs	r1, r0, #31
   2a6e8:	4361      	muls	r1, r4
   2a6ea:	fb00 1105 	mla	r1, r0, r5, r1
   2a6ee:	fba4 4500 	umull	r4, r5, r4, r0
  for (int i = 0; i < axis; ++i) {
   2a6f2:	3601      	adds	r6, #1
    outer_size *= output_shape.Dims(i);
   2a6f4:	440d      	add	r5, r1
  for (int i = 0; i < axis; ++i) {
   2a6f6:	e7f0      	b.n	2a6da <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x80>
  int64_t base_inner_size = 1;
   2a6f8:	2601      	movs	r6, #1
   2a6fa:	2700      	movs	r7, #0
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   2a6fc:	f108 0a01 	add.w	sl, r8, #1
   2a700:	45ca      	cmp	sl, r9
   2a702:	d00d      	beq.n	2a720 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xc6>
    base_inner_size *= output_shape.Dims(i);
   2a704:	4651      	mov	r1, sl
   2a706:	4658      	mov	r0, fp
   2a708:	f7fc ff5e 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a70c:	17c3      	asrs	r3, r0, #31
   2a70e:	4373      	muls	r3, r6
   2a710:	fb00 3307 	mla	r3, r0, r7, r3
   2a714:	fba6 6700 	umull	r6, r7, r6, r0
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   2a718:	f10a 0a01 	add.w	sl, sl, #1
    base_inner_size *= output_shape.Dims(i);
   2a71c:	441f      	add	r7, r3
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   2a71e:	e7ef      	b.n	2a700 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xa6>
  for (int k = 0; k < outer_size; k++) {
   2a720:	f04f 0a00 	mov.w	sl, #0
   2a724:	4650      	mov	r0, sl
   2a726:	45a2      	cmp	sl, r4
   2a728:	ea4f 71e0 	mov.w	r1, r0, asr #31
   2a72c:	eb71 0305 	sbcs.w	r3, r1, r5
   2a730:	da21      	bge.n	2a776 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x11c>
    for (int i = 0; i < inputs_count; ++i) {
   2a732:	f04f 0900 	mov.w	r9, #0
   2a736:	9b00      	ldr	r3, [sp, #0]
   2a738:	4599      	cmp	r9, r3
   2a73a:	da19      	bge.n	2a770 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x116>
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
   2a73c:	9b01      	ldr	r3, [sp, #4]
   2a73e:	4641      	mov	r1, r8
   2a740:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
   2a744:	f7fc ff40 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a748:	4370      	muls	r0, r6
      const Scalar* input_ptr = input_data[i] + k * copy_size;
   2a74a:	9b02      	ldr	r3, [sp, #8]
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
   2a74c:	0082      	lsls	r2, r0, #2
      const Scalar* input_ptr = input_data[i] + k * copy_size;
   2a74e:	fb00 f00a 	mul.w	r0, r0, sl
   2a752:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
   2a756:	9203      	str	r2, [sp, #12]
   2a758:	eb01 0180 	add.w	r1, r1, r0, lsl #2
   2a75c:	980e      	ldr	r0, [sp, #56]	; 0x38
   2a75e:	f006 fb4f 	bl	30e00 <memcpy>
      output_ptr += copy_size;
   2a762:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2a764:	9a03      	ldr	r2, [sp, #12]
    for (int i = 0; i < inputs_count; ++i) {
   2a766:	f109 0901 	add.w	r9, r9, #1
      output_ptr += copy_size;
   2a76a:	4413      	add	r3, r2
   2a76c:	930e      	str	r3, [sp, #56]	; 0x38
    for (int i = 0; i < inputs_count; ++i) {
   2a76e:	e7e2      	b.n	2a736 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xdc>
  for (int k = 0; k < outer_size; k++) {
   2a770:	f10a 0a01 	add.w	sl, sl, #1
   2a774:	e7d6      	b.n	2a724 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xca>
}
   2a776:	b005      	add	sp, #20
   2a778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002a77c <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode>:
void EvalUnquantized(TfLiteContext* context, TfLiteNode* node) {
   2a77c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a77e:	2200      	movs	r2, #0
   2a780:	4604      	mov	r4, r0
   2a782:	460e      	mov	r6, r1
   2a784:	250a      	movs	r5, #10
   2a786:	b0df      	sub	sp, #380	; 0x17c
   2a788:	ab22      	add	r3, sp, #136	; 0x88
  RuntimeShape inputs_shape[kMaxInputNum];
   2a78a:	3d01      	subs	r5, #1
   2a78c:	f843 2b18 	str.w	r2, [r3], #24
   2a790:	d1fb      	bne.n	2a78a <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode+0xe>
  GetAllTensorShapes(*context, *node->inputs, inputs_shape);
   2a792:	f104 0008 	add.w	r0, r4, #8
   2a796:	6831      	ldr	r1, [r6, #0]
   2a798:	aa22      	add	r2, sp, #136	; 0x88
   2a79a:	f7ff fec2 	bl	2a522 <_ZN6tflite3ops5micro13concatenation18GetAllTensorShapesERK13TfLiteContextRK14TfLiteIntArrayPNS_12RuntimeShapeE.isra.0>
  GetShapesPointers(inputs_shape, node->inputs->size, inputs_shape_ptr);
   2a79e:	6833      	ldr	r3, [r6, #0]
   2a7a0:	aa0e      	add	r2, sp, #56	; 0x38
   2a7a2:	6819      	ldr	r1, [r3, #0]
   2a7a4:	a822      	add	r0, sp, #136	; 0x88
   2a7a6:	f7ff fede 	bl	2a566 <_ZN6tflite3ops5micro13concatenation17GetShapesPointersEPKNS_12RuntimeShapeEjPS5_>
  for (int i = 0; i < tensor_list.size; ++i) {
   2a7aa:	6831      	ldr	r1, [r6, #0]
   2a7ac:	68a4      	ldr	r4, [r4, #8]
   2a7ae:	f851 2b04 	ldr.w	r2, [r1], #4
   2a7b2:	af18      	add	r7, sp, #96	; 0x60
   2a7b4:	42aa      	cmp	r2, r5
   2a7b6:	dd09      	ble.n	2a7cc <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode+0x50>
    const TfLiteTensor* t = &context.tensors[tensor_list.data[i]];
   2a7b8:	f851 3b04 	ldr.w	r3, [r1], #4
   2a7bc:	eb14 1383 	adds.w	r3, r4, r3, lsl #6
   2a7c0:	bf18      	it	ne
   2a7c2:	685b      	ldrne	r3, [r3, #4]
    all_data[i] = GetTensorData<T>(t);
   2a7c4:	f847 3025 	str.w	r3, [r7, r5, lsl #2]
  for (int i = 0; i < tensor_list.size; ++i) {
   2a7c8:	3501      	adds	r5, #1
   2a7ca:	e7f3      	b.n	2a7b4 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode+0x38>
  return &context->tensors[node->outputs->data[index]];
   2a7cc:	6873      	ldr	r3, [r6, #4]
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   2a7ce:	a808      	add	r0, sp, #32
   2a7d0:	6859      	ldr	r1, [r3, #4]
  op_params.axis = CalculatePositiveAxis(params->axis, output);
   2a7d2:	6973      	ldr	r3, [r6, #20]
   2a7d4:	eb04 1481 	add.w	r4, r4, r1, lsl #6
   2a7d8:	681b      	ldr	r3, [r3, #0]
  if (axis >= 0) {
   2a7da:	2b00      	cmp	r3, #0
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   2a7dc:	bfbc      	itt	lt
   2a7de:	68a1      	ldrlt	r1, [r4, #8]
    return NumDimensions(output_tensor) + axis;
   2a7e0:	6809      	ldrlt	r1, [r1, #0]
  op_params.inputs_count = NumInputs(node);
   2a7e2:	f8ad 2014 	strh.w	r2, [sp, #20]
    return NumDimensions(output_tensor) + axis;
   2a7e6:	bfb8      	it	lt
   2a7e8:	185b      	addlt	r3, r3, r1
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   2a7ea:	4621      	mov	r1, r4
  op_params.axis = CalculatePositiveAxis(params->axis, output);
   2a7ec:	f88d 3008 	strb.w	r3, [sp, #8]
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   2a7f0:	f7fc ff24 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   2a7f4:	b104      	cbz	r4, 2a7f8 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode+0x7c>
   2a7f6:	6864      	ldr	r4, [r4, #4]
   2a7f8:	463a      	mov	r2, r7
   2a7fa:	9400      	str	r4, [sp, #0]
   2a7fc:	ab08      	add	r3, sp, #32
   2a7fe:	a90e      	add	r1, sp, #56	; 0x38
   2a800:	a802      	add	r0, sp, #8
   2a802:	f7ff ff2a 	bl	2a65a <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>
                               GetTensorShape(output),
   2a806:	a808      	add	r0, sp, #32
   2a808:	f7fc fed3 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   2a80c:	2409      	movs	r4, #9
  RuntimeShape inputs_shape[kMaxInputNum];
   2a80e:	2518      	movs	r5, #24
   2a810:	ab22      	add	r3, sp, #136	; 0x88
   2a812:	fb05 3004 	mla	r0, r5, r4, r3
   2a816:	f7fc fecc 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   2a81a:	3c01      	subs	r4, #1
   2a81c:	d2f8      	bcs.n	2a810 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode+0x94>
}
   2a81e:	b05f      	add	sp, #380	; 0x17c
   2a820:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a822 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>:
inline void Concatenation(const ConcatenationParams& params,
   2a822:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a826:	469b      	mov	fp, r3
  int axis = params.axis;
   2a828:	f990 8000 	ldrsb.w	r8, [r0]
  const int concat_dimensions = output_shape.DimensionsCount();
   2a82c:	f8db 9000 	ldr.w	r9, [fp]
  int inputs_count = params.inputs_count;
   2a830:	8983      	ldrh	r3, [r0, #12]
inline void Concatenation(const ConcatenationParams& params,
   2a832:	b085      	sub	sp, #20
  TFLITE_DCHECK_LT(axis, concat_dimensions);
   2a834:	45c8      	cmp	r8, r9
inline void Concatenation(const ConcatenationParams& params,
   2a836:	e9cd 1201 	strd	r1, r2, [sp, #4]
  int inputs_count = params.inputs_count;
   2a83a:	9300      	str	r3, [sp, #0]
  TFLITE_DCHECK_LT(axis, concat_dimensions);
   2a83c:	db01      	blt.n	2a842 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x20>
   2a83e:	f006 fabc 	bl	30dba <abort>
  for (int i = 0; i < inputs_count; i++) {
   2a842:	2400      	movs	r4, #0
  int64_t concat_size = 0;
   2a844:	2600      	movs	r6, #0
   2a846:	2700      	movs	r7, #0
  for (int i = 0; i < inputs_count; i++) {
   2a848:	9b00      	ldr	r3, [sp, #0]
   2a84a:	429c      	cmp	r4, r3
   2a84c:	da1d      	bge.n	2a88a <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x68>
    TFLITE_DCHECK_EQ(input_shapes[i]->DimensionsCount(), concat_dimensions);
   2a84e:	9b01      	ldr	r3, [sp, #4]
   2a850:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   2a854:	682b      	ldr	r3, [r5, #0]
   2a856:	4599      	cmp	r9, r3
   2a858:	d1f1      	bne.n	2a83e <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1c>
    for (int j = 0; j < concat_dimensions; j++) {
   2a85a:	f04f 0a00 	mov.w	sl, #0
   2a85e:	45ca      	cmp	sl, r9
   2a860:	da0a      	bge.n	2a878 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x56>
      if (j != axis) {
   2a862:	45c2      	cmp	sl, r8
   2a864:	d005      	beq.n	2a872 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x50>
        MatchingDim(*input_shapes[i], j, output_shape, j);
   2a866:	4653      	mov	r3, sl
   2a868:	465a      	mov	r2, fp
   2a86a:	4651      	mov	r1, sl
   2a86c:	4628      	mov	r0, r5
   2a86e:	f7ff fd55 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    for (int j = 0; j < concat_dimensions; j++) {
   2a872:	f10a 0a01 	add.w	sl, sl, #1
   2a876:	e7f2      	b.n	2a85e <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x3c>
    concat_size += input_shapes[i]->Dims(axis);
   2a878:	4641      	mov	r1, r8
   2a87a:	4628      	mov	r0, r5
   2a87c:	f7fc fea4 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a880:	1836      	adds	r6, r6, r0
   2a882:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
  for (int i = 0; i < inputs_count; i++) {
   2a886:	3401      	adds	r4, #1
   2a888:	e7de      	b.n	2a848 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x26>
  TFLITE_DCHECK_EQ(concat_size, output_shape.Dims(axis));
   2a88a:	4641      	mov	r1, r8
   2a88c:	4658      	mov	r0, fp
   2a88e:	f7fc fe9b 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a892:	17c1      	asrs	r1, r0, #31
   2a894:	42b9      	cmp	r1, r7
   2a896:	bf08      	it	eq
   2a898:	42b0      	cmpeq	r0, r6
   2a89a:	d1d0      	bne.n	2a83e <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1c>
  for (int i = 0; i < axis; ++i) {
   2a89c:	2600      	movs	r6, #0
  int64_t outer_size = 1;
   2a89e:	2401      	movs	r4, #1
   2a8a0:	2500      	movs	r5, #0
  for (int i = 0; i < axis; ++i) {
   2a8a2:	4546      	cmp	r6, r8
   2a8a4:	da0c      	bge.n	2a8c0 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x9e>
    outer_size *= output_shape.Dims(i);
   2a8a6:	4631      	mov	r1, r6
   2a8a8:	4658      	mov	r0, fp
   2a8aa:	f7fc fe8d 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a8ae:	17c1      	asrs	r1, r0, #31
   2a8b0:	4361      	muls	r1, r4
   2a8b2:	fb00 1105 	mla	r1, r0, r5, r1
   2a8b6:	fba4 4500 	umull	r4, r5, r4, r0
  for (int i = 0; i < axis; ++i) {
   2a8ba:	3601      	adds	r6, #1
    outer_size *= output_shape.Dims(i);
   2a8bc:	440d      	add	r5, r1
  for (int i = 0; i < axis; ++i) {
   2a8be:	e7f0      	b.n	2a8a2 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x80>
  int64_t base_inner_size = 1;
   2a8c0:	2601      	movs	r6, #1
   2a8c2:	2700      	movs	r7, #0
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   2a8c4:	f108 0a01 	add.w	sl, r8, #1
   2a8c8:	45ca      	cmp	sl, r9
   2a8ca:	d00d      	beq.n	2a8e8 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xc6>
    base_inner_size *= output_shape.Dims(i);
   2a8cc:	4651      	mov	r1, sl
   2a8ce:	4658      	mov	r0, fp
   2a8d0:	f7fc fe7a 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a8d4:	17c3      	asrs	r3, r0, #31
   2a8d6:	4373      	muls	r3, r6
   2a8d8:	fb00 3307 	mla	r3, r0, r7, r3
   2a8dc:	fba6 6700 	umull	r6, r7, r6, r0
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   2a8e0:	f10a 0a01 	add.w	sl, sl, #1
    base_inner_size *= output_shape.Dims(i);
   2a8e4:	441f      	add	r7, r3
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   2a8e6:	e7ef      	b.n	2a8c8 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xa6>
  for (int k = 0; k < outer_size; k++) {
   2a8e8:	f04f 0a00 	mov.w	sl, #0
   2a8ec:	4650      	mov	r0, sl
   2a8ee:	45a2      	cmp	sl, r4
   2a8f0:	ea4f 71e0 	mov.w	r1, r0, asr #31
   2a8f4:	eb71 0305 	sbcs.w	r3, r1, r5
   2a8f8:	da21      	bge.n	2a93e <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x11c>
    for (int i = 0; i < inputs_count; ++i) {
   2a8fa:	f04f 0900 	mov.w	r9, #0
   2a8fe:	9b00      	ldr	r3, [sp, #0]
   2a900:	4599      	cmp	r9, r3
   2a902:	da19      	bge.n	2a938 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x116>
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
   2a904:	9b01      	ldr	r3, [sp, #4]
   2a906:	4641      	mov	r1, r8
   2a908:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
   2a90c:	f7fc fe5c 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a910:	4370      	muls	r0, r6
      const Scalar* input_ptr = input_data[i] + k * copy_size;
   2a912:	9b02      	ldr	r3, [sp, #8]
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
   2a914:	0082      	lsls	r2, r0, #2
      const Scalar* input_ptr = input_data[i] + k * copy_size;
   2a916:	fb00 f00a 	mul.w	r0, r0, sl
   2a91a:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
   2a91e:	9203      	str	r2, [sp, #12]
   2a920:	eb01 0180 	add.w	r1, r1, r0, lsl #2
   2a924:	980e      	ldr	r0, [sp, #56]	; 0x38
   2a926:	f006 fa6b 	bl	30e00 <memcpy>
      output_ptr += copy_size;
   2a92a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2a92c:	9a03      	ldr	r2, [sp, #12]
    for (int i = 0; i < inputs_count; ++i) {
   2a92e:	f109 0901 	add.w	r9, r9, #1
      output_ptr += copy_size;
   2a932:	4413      	add	r3, r2
   2a934:	930e      	str	r3, [sp, #56]	; 0x38
    for (int i = 0; i < inputs_count; ++i) {
   2a936:	e7e2      	b.n	2a8fe <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xdc>
  for (int k = 0; k < outer_size; k++) {
   2a938:	f10a 0a01 	add.w	sl, sl, #1
   2a93c:	e7d6      	b.n	2a8ec <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xca>
}
   2a93e:	b005      	add	sp, #20
   2a940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002a944 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIiEEvP13TfLiteContextP10TfLiteNode>:
void EvalUnquantized(TfLiteContext* context, TfLiteNode* node) {
   2a944:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a946:	2200      	movs	r2, #0
   2a948:	4604      	mov	r4, r0
   2a94a:	460e      	mov	r6, r1
   2a94c:	250a      	movs	r5, #10
   2a94e:	b0df      	sub	sp, #380	; 0x17c
   2a950:	ab22      	add	r3, sp, #136	; 0x88
  RuntimeShape inputs_shape[kMaxInputNum];
   2a952:	3d01      	subs	r5, #1
   2a954:	f843 2b18 	str.w	r2, [r3], #24
   2a958:	d1fb      	bne.n	2a952 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIiEEvP13TfLiteContextP10TfLiteNode+0xe>
  GetAllTensorShapes(*context, *node->inputs, inputs_shape);
   2a95a:	f104 0008 	add.w	r0, r4, #8
   2a95e:	6831      	ldr	r1, [r6, #0]
   2a960:	aa22      	add	r2, sp, #136	; 0x88
   2a962:	f7ff fdde 	bl	2a522 <_ZN6tflite3ops5micro13concatenation18GetAllTensorShapesERK13TfLiteContextRK14TfLiteIntArrayPNS_12RuntimeShapeE.isra.0>
  GetShapesPointers(inputs_shape, node->inputs->size, inputs_shape_ptr);
   2a966:	6833      	ldr	r3, [r6, #0]
   2a968:	aa0e      	add	r2, sp, #56	; 0x38
   2a96a:	6819      	ldr	r1, [r3, #0]
   2a96c:	a822      	add	r0, sp, #136	; 0x88
   2a96e:	f7ff fdfa 	bl	2a566 <_ZN6tflite3ops5micro13concatenation17GetShapesPointersEPKNS_12RuntimeShapeEjPS5_>
  for (int i = 0; i < tensor_list.size; ++i) {
   2a972:	6831      	ldr	r1, [r6, #0]
   2a974:	68a4      	ldr	r4, [r4, #8]
   2a976:	f851 2b04 	ldr.w	r2, [r1], #4
   2a97a:	af18      	add	r7, sp, #96	; 0x60
   2a97c:	42aa      	cmp	r2, r5
   2a97e:	dd09      	ble.n	2a994 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIiEEvP13TfLiteContextP10TfLiteNode+0x50>
    const TfLiteTensor* t = &context.tensors[tensor_list.data[i]];
   2a980:	f851 3b04 	ldr.w	r3, [r1], #4
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   2a984:	eb14 1383 	adds.w	r3, r4, r3, lsl #6
   2a988:	bf18      	it	ne
   2a98a:	685b      	ldrne	r3, [r3, #4]
    all_data[i] = GetTensorData<T>(t);
   2a98c:	f847 3025 	str.w	r3, [r7, r5, lsl #2]
  for (int i = 0; i < tensor_list.size; ++i) {
   2a990:	3501      	adds	r5, #1
   2a992:	e7f3      	b.n	2a97c <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIiEEvP13TfLiteContextP10TfLiteNode+0x38>
  return &context->tensors[node->outputs->data[index]];
   2a994:	6873      	ldr	r3, [r6, #4]
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   2a996:	a808      	add	r0, sp, #32
   2a998:	6859      	ldr	r1, [r3, #4]
  op_params.axis = CalculatePositiveAxis(params->axis, output);
   2a99a:	6973      	ldr	r3, [r6, #20]
   2a99c:	eb04 1481 	add.w	r4, r4, r1, lsl #6
   2a9a0:	681b      	ldr	r3, [r3, #0]
  if (axis >= 0) {
   2a9a2:	2b00      	cmp	r3, #0
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   2a9a4:	bfbc      	itt	lt
   2a9a6:	68a1      	ldrlt	r1, [r4, #8]
    return NumDimensions(output_tensor) + axis;
   2a9a8:	6809      	ldrlt	r1, [r1, #0]
  op_params.inputs_count = NumInputs(node);
   2a9aa:	f8ad 2014 	strh.w	r2, [sp, #20]
    return NumDimensions(output_tensor) + axis;
   2a9ae:	bfb8      	it	lt
   2a9b0:	185b      	addlt	r3, r3, r1
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   2a9b2:	4621      	mov	r1, r4
  op_params.axis = CalculatePositiveAxis(params->axis, output);
   2a9b4:	f88d 3008 	strb.w	r3, [sp, #8]
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   2a9b8:	f7fc fe40 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   2a9bc:	b104      	cbz	r4, 2a9c0 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIiEEvP13TfLiteContextP10TfLiteNode+0x7c>
   2a9be:	6864      	ldr	r4, [r4, #4]
   2a9c0:	463a      	mov	r2, r7
   2a9c2:	9400      	str	r4, [sp, #0]
   2a9c4:	ab08      	add	r3, sp, #32
   2a9c6:	a90e      	add	r1, sp, #56	; 0x38
   2a9c8:	a802      	add	r0, sp, #8
   2a9ca:	f7ff ff2a 	bl	2a822 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>
                               GetTensorShape(output),
   2a9ce:	a808      	add	r0, sp, #32
   2a9d0:	f7fc fdef 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   2a9d4:	2409      	movs	r4, #9
  RuntimeShape inputs_shape[kMaxInputNum];
   2a9d6:	2518      	movs	r5, #24
   2a9d8:	ab22      	add	r3, sp, #136	; 0x88
   2a9da:	fb05 3004 	mla	r0, r5, r4, r3
   2a9de:	f7fc fde8 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   2a9e2:	3c01      	subs	r4, #1
   2a9e4:	d2f8      	bcs.n	2a9d8 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIiEEvP13TfLiteContextP10TfLiteNode+0x94>
}
   2a9e6:	b05f      	add	sp, #380	; 0x17c
   2a9e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a9ea <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>:
inline void Concatenation(const ConcatenationParams& params,
   2a9ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a9ee:	469b      	mov	fp, r3
  int axis = params.axis;
   2a9f0:	f990 8000 	ldrsb.w	r8, [r0]
  const int concat_dimensions = output_shape.DimensionsCount();
   2a9f4:	f8db 9000 	ldr.w	r9, [fp]
  int inputs_count = params.inputs_count;
   2a9f8:	8983      	ldrh	r3, [r0, #12]
inline void Concatenation(const ConcatenationParams& params,
   2a9fa:	b085      	sub	sp, #20
  TFLITE_DCHECK_LT(axis, concat_dimensions);
   2a9fc:	45c8      	cmp	r8, r9
inline void Concatenation(const ConcatenationParams& params,
   2a9fe:	e9cd 1201 	strd	r1, r2, [sp, #4]
  int inputs_count = params.inputs_count;
   2aa02:	9300      	str	r3, [sp, #0]
  TFLITE_DCHECK_LT(axis, concat_dimensions);
   2aa04:	db01      	blt.n	2aa0a <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x20>
   2aa06:	f006 f9d8 	bl	30dba <abort>
  for (int i = 0; i < inputs_count; i++) {
   2aa0a:	2400      	movs	r4, #0
  int64_t concat_size = 0;
   2aa0c:	2600      	movs	r6, #0
   2aa0e:	2700      	movs	r7, #0
  for (int i = 0; i < inputs_count; i++) {
   2aa10:	9b00      	ldr	r3, [sp, #0]
   2aa12:	429c      	cmp	r4, r3
   2aa14:	da1d      	bge.n	2aa52 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x68>
    TFLITE_DCHECK_EQ(input_shapes[i]->DimensionsCount(), concat_dimensions);
   2aa16:	9b01      	ldr	r3, [sp, #4]
   2aa18:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   2aa1c:	682b      	ldr	r3, [r5, #0]
   2aa1e:	4599      	cmp	r9, r3
   2aa20:	d1f1      	bne.n	2aa06 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1c>
    for (int j = 0; j < concat_dimensions; j++) {
   2aa22:	f04f 0a00 	mov.w	sl, #0
   2aa26:	45ca      	cmp	sl, r9
   2aa28:	da0a      	bge.n	2aa40 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x56>
      if (j != axis) {
   2aa2a:	45c2      	cmp	sl, r8
   2aa2c:	d005      	beq.n	2aa3a <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x50>
        MatchingDim(*input_shapes[i], j, output_shape, j);
   2aa2e:	4653      	mov	r3, sl
   2aa30:	465a      	mov	r2, fp
   2aa32:	4651      	mov	r1, sl
   2aa34:	4628      	mov	r0, r5
   2aa36:	f7ff fc71 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    for (int j = 0; j < concat_dimensions; j++) {
   2aa3a:	f10a 0a01 	add.w	sl, sl, #1
   2aa3e:	e7f2      	b.n	2aa26 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x3c>
    concat_size += input_shapes[i]->Dims(axis);
   2aa40:	4641      	mov	r1, r8
   2aa42:	4628      	mov	r0, r5
   2aa44:	f7fc fdc0 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2aa48:	1836      	adds	r6, r6, r0
   2aa4a:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
  for (int i = 0; i < inputs_count; i++) {
   2aa4e:	3401      	adds	r4, #1
   2aa50:	e7de      	b.n	2aa10 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x26>
  TFLITE_DCHECK_EQ(concat_size, output_shape.Dims(axis));
   2aa52:	4641      	mov	r1, r8
   2aa54:	4658      	mov	r0, fp
   2aa56:	f7fc fdb7 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2aa5a:	17c1      	asrs	r1, r0, #31
   2aa5c:	42b9      	cmp	r1, r7
   2aa5e:	bf08      	it	eq
   2aa60:	42b0      	cmpeq	r0, r6
   2aa62:	d1d0      	bne.n	2aa06 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1c>
  for (int i = 0; i < axis; ++i) {
   2aa64:	2600      	movs	r6, #0
  int64_t outer_size = 1;
   2aa66:	2401      	movs	r4, #1
   2aa68:	2500      	movs	r5, #0
  for (int i = 0; i < axis; ++i) {
   2aa6a:	4546      	cmp	r6, r8
   2aa6c:	da0c      	bge.n	2aa88 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x9e>
    outer_size *= output_shape.Dims(i);
   2aa6e:	4631      	mov	r1, r6
   2aa70:	4658      	mov	r0, fp
   2aa72:	f7fc fda9 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2aa76:	17c1      	asrs	r1, r0, #31
   2aa78:	4361      	muls	r1, r4
   2aa7a:	fb00 1105 	mla	r1, r0, r5, r1
   2aa7e:	fba4 4500 	umull	r4, r5, r4, r0
  for (int i = 0; i < axis; ++i) {
   2aa82:	3601      	adds	r6, #1
    outer_size *= output_shape.Dims(i);
   2aa84:	440d      	add	r5, r1
  for (int i = 0; i < axis; ++i) {
   2aa86:	e7f0      	b.n	2aa6a <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x80>
  int64_t base_inner_size = 1;
   2aa88:	2601      	movs	r6, #1
   2aa8a:	2700      	movs	r7, #0
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   2aa8c:	f108 0a01 	add.w	sl, r8, #1
   2aa90:	45ca      	cmp	sl, r9
   2aa92:	d00d      	beq.n	2aab0 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xc6>
    base_inner_size *= output_shape.Dims(i);
   2aa94:	4651      	mov	r1, sl
   2aa96:	4658      	mov	r0, fp
   2aa98:	f7fc fd96 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2aa9c:	17c3      	asrs	r3, r0, #31
   2aa9e:	4373      	muls	r3, r6
   2aaa0:	fb00 3307 	mla	r3, r0, r7, r3
   2aaa4:	fba6 6700 	umull	r6, r7, r6, r0
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   2aaa8:	f10a 0a01 	add.w	sl, sl, #1
    base_inner_size *= output_shape.Dims(i);
   2aaac:	441f      	add	r7, r3
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   2aaae:	e7ef      	b.n	2aa90 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xa6>
  for (int k = 0; k < outer_size; k++) {
   2aab0:	f04f 0a00 	mov.w	sl, #0
   2aab4:	4650      	mov	r0, sl
   2aab6:	45a2      	cmp	sl, r4
   2aab8:	ea4f 71e0 	mov.w	r1, r0, asr #31
   2aabc:	eb71 0305 	sbcs.w	r3, r1, r5
   2aac0:	da1f      	bge.n	2ab02 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x118>
    for (int i = 0; i < inputs_count; ++i) {
   2aac2:	f04f 0900 	mov.w	r9, #0
   2aac6:	9b00      	ldr	r3, [sp, #0]
   2aac8:	4599      	cmp	r9, r3
   2aaca:	da17      	bge.n	2aafc <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x112>
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
   2aacc:	9b01      	ldr	r3, [sp, #4]
   2aace:	4641      	mov	r1, r8
   2aad0:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
   2aad4:	f7fc fd78 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
      const Scalar* input_ptr = input_data[i] + k * copy_size;
   2aad8:	9b02      	ldr	r3, [sp, #8]
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
   2aada:	fb00 f206 	mul.w	r2, r0, r6
      const Scalar* input_ptr = input_data[i] + k * copy_size;
   2aade:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
   2aae2:	980e      	ldr	r0, [sp, #56]	; 0x38
   2aae4:	fb02 110a 	mla	r1, r2, sl, r1
   2aae8:	9203      	str	r2, [sp, #12]
   2aaea:	f006 f989 	bl	30e00 <memcpy>
      output_ptr += copy_size;
   2aaee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2aaf0:	9a03      	ldr	r2, [sp, #12]
    for (int i = 0; i < inputs_count; ++i) {
   2aaf2:	f109 0901 	add.w	r9, r9, #1
      output_ptr += copy_size;
   2aaf6:	4413      	add	r3, r2
   2aaf8:	930e      	str	r3, [sp, #56]	; 0x38
    for (int i = 0; i < inputs_count; ++i) {
   2aafa:	e7e4      	b.n	2aac6 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xdc>
  for (int k = 0; k < outer_size; k++) {
   2aafc:	f10a 0a01 	add.w	sl, sl, #1
   2ab00:	e7d8      	b.n	2aab4 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xca>
}
   2ab02:	b005      	add	sp, #20
   2ab04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002ab08 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode>:
void EvalUnquantized(TfLiteContext* context, TfLiteNode* node) {
   2ab08:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ab0a:	2200      	movs	r2, #0
   2ab0c:	4604      	mov	r4, r0
   2ab0e:	460e      	mov	r6, r1
   2ab10:	250a      	movs	r5, #10
   2ab12:	b0df      	sub	sp, #380	; 0x17c
   2ab14:	ab22      	add	r3, sp, #136	; 0x88
  RuntimeShape inputs_shape[kMaxInputNum];
   2ab16:	3d01      	subs	r5, #1
   2ab18:	f843 2b18 	str.w	r2, [r3], #24
   2ab1c:	d1fb      	bne.n	2ab16 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode+0xe>
  GetAllTensorShapes(*context, *node->inputs, inputs_shape);
   2ab1e:	f104 0008 	add.w	r0, r4, #8
   2ab22:	6831      	ldr	r1, [r6, #0]
   2ab24:	aa22      	add	r2, sp, #136	; 0x88
   2ab26:	f7ff fcfc 	bl	2a522 <_ZN6tflite3ops5micro13concatenation18GetAllTensorShapesERK13TfLiteContextRK14TfLiteIntArrayPNS_12RuntimeShapeE.isra.0>
  GetShapesPointers(inputs_shape, node->inputs->size, inputs_shape_ptr);
   2ab2a:	6833      	ldr	r3, [r6, #0]
   2ab2c:	aa0e      	add	r2, sp, #56	; 0x38
   2ab2e:	6819      	ldr	r1, [r3, #0]
   2ab30:	a822      	add	r0, sp, #136	; 0x88
   2ab32:	f7ff fd18 	bl	2a566 <_ZN6tflite3ops5micro13concatenation17GetShapesPointersEPKNS_12RuntimeShapeEjPS5_>
  for (int i = 0; i < tensor_list.size; ++i) {
   2ab36:	6831      	ldr	r1, [r6, #0]
   2ab38:	68a4      	ldr	r4, [r4, #8]
   2ab3a:	f851 2b04 	ldr.w	r2, [r1], #4
   2ab3e:	af18      	add	r7, sp, #96	; 0x60
   2ab40:	42aa      	cmp	r2, r5
   2ab42:	dd09      	ble.n	2ab58 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode+0x50>
    const TfLiteTensor* t = &context.tensors[tensor_list.data[i]];
   2ab44:	f851 3b04 	ldr.w	r3, [r1], #4
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   2ab48:	eb14 1383 	adds.w	r3, r4, r3, lsl #6
   2ab4c:	bf18      	it	ne
   2ab4e:	685b      	ldrne	r3, [r3, #4]
    all_data[i] = GetTensorData<T>(t);
   2ab50:	f847 3025 	str.w	r3, [r7, r5, lsl #2]
  for (int i = 0; i < tensor_list.size; ++i) {
   2ab54:	3501      	adds	r5, #1
   2ab56:	e7f3      	b.n	2ab40 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode+0x38>
  return &context->tensors[node->outputs->data[index]];
   2ab58:	6873      	ldr	r3, [r6, #4]
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   2ab5a:	a808      	add	r0, sp, #32
   2ab5c:	6859      	ldr	r1, [r3, #4]
  op_params.axis = CalculatePositiveAxis(params->axis, output);
   2ab5e:	6973      	ldr	r3, [r6, #20]
   2ab60:	eb04 1481 	add.w	r4, r4, r1, lsl #6
   2ab64:	681b      	ldr	r3, [r3, #0]
  if (axis >= 0) {
   2ab66:	2b00      	cmp	r3, #0
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   2ab68:	bfbc      	itt	lt
   2ab6a:	68a1      	ldrlt	r1, [r4, #8]
    return NumDimensions(output_tensor) + axis;
   2ab6c:	6809      	ldrlt	r1, [r1, #0]
  op_params.inputs_count = NumInputs(node);
   2ab6e:	f8ad 2014 	strh.w	r2, [sp, #20]
    return NumDimensions(output_tensor) + axis;
   2ab72:	bfb8      	it	lt
   2ab74:	185b      	addlt	r3, r3, r1
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   2ab76:	4621      	mov	r1, r4
  op_params.axis = CalculatePositiveAxis(params->axis, output);
   2ab78:	f88d 3008 	strb.w	r3, [sp, #8]
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   2ab7c:	f7fc fd5e 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   2ab80:	b104      	cbz	r4, 2ab84 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode+0x7c>
   2ab82:	6864      	ldr	r4, [r4, #4]
   2ab84:	463a      	mov	r2, r7
   2ab86:	9400      	str	r4, [sp, #0]
   2ab88:	ab08      	add	r3, sp, #32
   2ab8a:	a90e      	add	r1, sp, #56	; 0x38
   2ab8c:	a802      	add	r0, sp, #8
   2ab8e:	f7ff ff2c 	bl	2a9ea <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>
                               GetTensorShape(output),
   2ab92:	a808      	add	r0, sp, #32
   2ab94:	f7fc fd0d 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   2ab98:	2409      	movs	r4, #9
  RuntimeShape inputs_shape[kMaxInputNum];
   2ab9a:	2518      	movs	r5, #24
   2ab9c:	ab22      	add	r3, sp, #136	; 0x88
   2ab9e:	fb05 3004 	mla	r0, r5, r4, r3
   2aba2:	f7fc fd06 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   2aba6:	3c01      	subs	r4, #1
   2aba8:	d2f8      	bcs.n	2ab9c <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode+0x94>
}
   2abaa:	b05f      	add	sp, #380	; 0x17c
   2abac:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002abae <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>:
inline void Concatenation(const ConcatenationParams& params,
   2abae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2abb2:	469b      	mov	fp, r3
  int axis = params.axis;
   2abb4:	f990 8000 	ldrsb.w	r8, [r0]
  const int concat_dimensions = output_shape.DimensionsCount();
   2abb8:	f8db 9000 	ldr.w	r9, [fp]
  int inputs_count = params.inputs_count;
   2abbc:	8983      	ldrh	r3, [r0, #12]
inline void Concatenation(const ConcatenationParams& params,
   2abbe:	b085      	sub	sp, #20
  TFLITE_DCHECK_LT(axis, concat_dimensions);
   2abc0:	45c8      	cmp	r8, r9
inline void Concatenation(const ConcatenationParams& params,
   2abc2:	e9cd 1201 	strd	r1, r2, [sp, #4]
  int inputs_count = params.inputs_count;
   2abc6:	9300      	str	r3, [sp, #0]
  TFLITE_DCHECK_LT(axis, concat_dimensions);
   2abc8:	db01      	blt.n	2abce <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x20>
   2abca:	f006 f8f6 	bl	30dba <abort>
  for (int i = 0; i < inputs_count; i++) {
   2abce:	2400      	movs	r4, #0
  int64_t concat_size = 0;
   2abd0:	2600      	movs	r6, #0
   2abd2:	2700      	movs	r7, #0
  for (int i = 0; i < inputs_count; i++) {
   2abd4:	9b00      	ldr	r3, [sp, #0]
   2abd6:	429c      	cmp	r4, r3
   2abd8:	da1d      	bge.n	2ac16 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x68>
    TFLITE_DCHECK_EQ(input_shapes[i]->DimensionsCount(), concat_dimensions);
   2abda:	9b01      	ldr	r3, [sp, #4]
   2abdc:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   2abe0:	682b      	ldr	r3, [r5, #0]
   2abe2:	4599      	cmp	r9, r3
   2abe4:	d1f1      	bne.n	2abca <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1c>
    for (int j = 0; j < concat_dimensions; j++) {
   2abe6:	f04f 0a00 	mov.w	sl, #0
   2abea:	45ca      	cmp	sl, r9
   2abec:	da0a      	bge.n	2ac04 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x56>
      if (j != axis) {
   2abee:	45c2      	cmp	sl, r8
   2abf0:	d005      	beq.n	2abfe <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x50>
        MatchingDim(*input_shapes[i], j, output_shape, j);
   2abf2:	4653      	mov	r3, sl
   2abf4:	465a      	mov	r2, fp
   2abf6:	4651      	mov	r1, sl
   2abf8:	4628      	mov	r0, r5
   2abfa:	f7ff fb8f 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    for (int j = 0; j < concat_dimensions; j++) {
   2abfe:	f10a 0a01 	add.w	sl, sl, #1
   2ac02:	e7f2      	b.n	2abea <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x3c>
    concat_size += input_shapes[i]->Dims(axis);
   2ac04:	4641      	mov	r1, r8
   2ac06:	4628      	mov	r0, r5
   2ac08:	f7fc fcde 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2ac0c:	1836      	adds	r6, r6, r0
   2ac0e:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
  for (int i = 0; i < inputs_count; i++) {
   2ac12:	3401      	adds	r4, #1
   2ac14:	e7de      	b.n	2abd4 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x26>
  TFLITE_DCHECK_EQ(concat_size, output_shape.Dims(axis));
   2ac16:	4641      	mov	r1, r8
   2ac18:	4658      	mov	r0, fp
   2ac1a:	f7fc fcd5 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2ac1e:	17c1      	asrs	r1, r0, #31
   2ac20:	42b9      	cmp	r1, r7
   2ac22:	bf08      	it	eq
   2ac24:	42b0      	cmpeq	r0, r6
   2ac26:	d1d0      	bne.n	2abca <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1c>
  for (int i = 0; i < axis; ++i) {
   2ac28:	2600      	movs	r6, #0
  int64_t outer_size = 1;
   2ac2a:	2401      	movs	r4, #1
   2ac2c:	2500      	movs	r5, #0
  for (int i = 0; i < axis; ++i) {
   2ac2e:	4546      	cmp	r6, r8
   2ac30:	da0c      	bge.n	2ac4c <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x9e>
    outer_size *= output_shape.Dims(i);
   2ac32:	4631      	mov	r1, r6
   2ac34:	4658      	mov	r0, fp
   2ac36:	f7fc fcc7 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2ac3a:	17c1      	asrs	r1, r0, #31
   2ac3c:	4361      	muls	r1, r4
   2ac3e:	fb00 1105 	mla	r1, r0, r5, r1
   2ac42:	fba4 4500 	umull	r4, r5, r4, r0
  for (int i = 0; i < axis; ++i) {
   2ac46:	3601      	adds	r6, #1
    outer_size *= output_shape.Dims(i);
   2ac48:	440d      	add	r5, r1
  for (int i = 0; i < axis; ++i) {
   2ac4a:	e7f0      	b.n	2ac2e <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x80>
  int64_t base_inner_size = 1;
   2ac4c:	2601      	movs	r6, #1
   2ac4e:	2700      	movs	r7, #0
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   2ac50:	f108 0a01 	add.w	sl, r8, #1
   2ac54:	45ca      	cmp	sl, r9
   2ac56:	d00d      	beq.n	2ac74 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xc6>
    base_inner_size *= output_shape.Dims(i);
   2ac58:	4651      	mov	r1, sl
   2ac5a:	4658      	mov	r0, fp
   2ac5c:	f7fc fcb4 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2ac60:	17c3      	asrs	r3, r0, #31
   2ac62:	4373      	muls	r3, r6
   2ac64:	fb00 3307 	mla	r3, r0, r7, r3
   2ac68:	fba6 6700 	umull	r6, r7, r6, r0
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   2ac6c:	f10a 0a01 	add.w	sl, sl, #1
    base_inner_size *= output_shape.Dims(i);
   2ac70:	441f      	add	r7, r3
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   2ac72:	e7ef      	b.n	2ac54 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xa6>
  for (int k = 0; k < outer_size; k++) {
   2ac74:	f04f 0a00 	mov.w	sl, #0
   2ac78:	4650      	mov	r0, sl
   2ac7a:	45a2      	cmp	sl, r4
   2ac7c:	ea4f 71e0 	mov.w	r1, r0, asr #31
   2ac80:	eb71 0305 	sbcs.w	r3, r1, r5
   2ac84:	da21      	bge.n	2acca <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x11c>
    for (int i = 0; i < inputs_count; ++i) {
   2ac86:	f04f 0900 	mov.w	r9, #0
   2ac8a:	9b00      	ldr	r3, [sp, #0]
   2ac8c:	4599      	cmp	r9, r3
   2ac8e:	da19      	bge.n	2acc4 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x116>
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
   2ac90:	9b01      	ldr	r3, [sp, #4]
   2ac92:	4641      	mov	r1, r8
   2ac94:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
   2ac98:	f7fc fc96 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2ac9c:	4370      	muls	r0, r6
      const Scalar* input_ptr = input_data[i] + k * copy_size;
   2ac9e:	9b02      	ldr	r3, [sp, #8]
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
   2aca0:	00c2      	lsls	r2, r0, #3
      const Scalar* input_ptr = input_data[i] + k * copy_size;
   2aca2:	fb00 f00a 	mul.w	r0, r0, sl
   2aca6:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
   2acaa:	9203      	str	r2, [sp, #12]
   2acac:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   2acb0:	980e      	ldr	r0, [sp, #56]	; 0x38
   2acb2:	f006 f8a5 	bl	30e00 <memcpy>
      output_ptr += copy_size;
   2acb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2acb8:	9a03      	ldr	r2, [sp, #12]
    for (int i = 0; i < inputs_count; ++i) {
   2acba:	f109 0901 	add.w	r9, r9, #1
      output_ptr += copy_size;
   2acbe:	4413      	add	r3, r2
   2acc0:	930e      	str	r3, [sp, #56]	; 0x38
    for (int i = 0; i < inputs_count; ++i) {
   2acc2:	e7e2      	b.n	2ac8a <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xdc>
  for (int k = 0; k < outer_size; k++) {
   2acc4:	f10a 0a01 	add.w	sl, sl, #1
   2acc8:	e7d6      	b.n	2ac78 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xca>
}
   2acca:	b005      	add	sp, #20
   2accc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002acd0 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode>:
void EvalUnquantized(TfLiteContext* context, TfLiteNode* node) {
   2acd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2acd2:	2200      	movs	r2, #0
   2acd4:	4604      	mov	r4, r0
   2acd6:	460e      	mov	r6, r1
   2acd8:	250a      	movs	r5, #10
   2acda:	b0df      	sub	sp, #380	; 0x17c
   2acdc:	ab22      	add	r3, sp, #136	; 0x88
  RuntimeShape inputs_shape[kMaxInputNum];
   2acde:	3d01      	subs	r5, #1
   2ace0:	f843 2b18 	str.w	r2, [r3], #24
   2ace4:	d1fb      	bne.n	2acde <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode+0xe>
  GetAllTensorShapes(*context, *node->inputs, inputs_shape);
   2ace6:	f104 0008 	add.w	r0, r4, #8
   2acea:	6831      	ldr	r1, [r6, #0]
   2acec:	aa22      	add	r2, sp, #136	; 0x88
   2acee:	f7ff fc18 	bl	2a522 <_ZN6tflite3ops5micro13concatenation18GetAllTensorShapesERK13TfLiteContextRK14TfLiteIntArrayPNS_12RuntimeShapeE.isra.0>
  GetShapesPointers(inputs_shape, node->inputs->size, inputs_shape_ptr);
   2acf2:	6833      	ldr	r3, [r6, #0]
   2acf4:	aa0e      	add	r2, sp, #56	; 0x38
   2acf6:	6819      	ldr	r1, [r3, #0]
   2acf8:	a822      	add	r0, sp, #136	; 0x88
   2acfa:	f7ff fc34 	bl	2a566 <_ZN6tflite3ops5micro13concatenation17GetShapesPointersEPKNS_12RuntimeShapeEjPS5_>
  for (int i = 0; i < tensor_list.size; ++i) {
   2acfe:	6831      	ldr	r1, [r6, #0]
   2ad00:	68a4      	ldr	r4, [r4, #8]
   2ad02:	f851 2b04 	ldr.w	r2, [r1], #4
   2ad06:	af18      	add	r7, sp, #96	; 0x60
   2ad08:	42aa      	cmp	r2, r5
   2ad0a:	dd09      	ble.n	2ad20 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode+0x50>
    const TfLiteTensor* t = &context.tensors[tensor_list.data[i]];
   2ad0c:	f851 3b04 	ldr.w	r3, [r1], #4
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   2ad10:	eb14 1383 	adds.w	r3, r4, r3, lsl #6
   2ad14:	bf18      	it	ne
   2ad16:	685b      	ldrne	r3, [r3, #4]
    all_data[i] = GetTensorData<T>(t);
   2ad18:	f847 3025 	str.w	r3, [r7, r5, lsl #2]
  for (int i = 0; i < tensor_list.size; ++i) {
   2ad1c:	3501      	adds	r5, #1
   2ad1e:	e7f3      	b.n	2ad08 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode+0x38>
  return &context->tensors[node->outputs->data[index]];
   2ad20:	6873      	ldr	r3, [r6, #4]
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   2ad22:	a808      	add	r0, sp, #32
   2ad24:	6859      	ldr	r1, [r3, #4]
  op_params.axis = CalculatePositiveAxis(params->axis, output);
   2ad26:	6973      	ldr	r3, [r6, #20]
   2ad28:	eb04 1481 	add.w	r4, r4, r1, lsl #6
   2ad2c:	681b      	ldr	r3, [r3, #0]
  if (axis >= 0) {
   2ad2e:	2b00      	cmp	r3, #0
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   2ad30:	bfbc      	itt	lt
   2ad32:	68a1      	ldrlt	r1, [r4, #8]
    return NumDimensions(output_tensor) + axis;
   2ad34:	6809      	ldrlt	r1, [r1, #0]
  op_params.inputs_count = NumInputs(node);
   2ad36:	f8ad 2014 	strh.w	r2, [sp, #20]
    return NumDimensions(output_tensor) + axis;
   2ad3a:	bfb8      	it	lt
   2ad3c:	185b      	addlt	r3, r3, r1
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   2ad3e:	4621      	mov	r1, r4
  op_params.axis = CalculatePositiveAxis(params->axis, output);
   2ad40:	f88d 3008 	strb.w	r3, [sp, #8]
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   2ad44:	f7fc fc7a 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   2ad48:	b104      	cbz	r4, 2ad4c <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode+0x7c>
   2ad4a:	6864      	ldr	r4, [r4, #4]
   2ad4c:	463a      	mov	r2, r7
   2ad4e:	9400      	str	r4, [sp, #0]
   2ad50:	ab08      	add	r3, sp, #32
   2ad52:	a90e      	add	r1, sp, #56	; 0x38
   2ad54:	a802      	add	r0, sp, #8
   2ad56:	f7ff ff2a 	bl	2abae <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>
                               GetTensorShape(output),
   2ad5a:	a808      	add	r0, sp, #32
   2ad5c:	f7fc fc29 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   2ad60:	2409      	movs	r4, #9
  RuntimeShape inputs_shape[kMaxInputNum];
   2ad62:	2518      	movs	r5, #24
   2ad64:	ab22      	add	r3, sp, #136	; 0x88
   2ad66:	fb05 3004 	mla	r0, r5, r4, r3
   2ad6a:	f7fc fc22 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   2ad6e:	3c01      	subs	r4, #1
   2ad70:	d2f8      	bcs.n	2ad64 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode+0x94>
}
   2ad72:	b05f      	add	sp, #380	; 0x17c
   2ad74:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002ad76 <_ZN6tflite3ops5micro4conv4InitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   2ad76:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   2ad78:	b513      	push	{r0, r1, r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   2ad7a:	b90b      	cbnz	r3, 2ad80 <_ZN6tflite3ops5micro4conv4InitEP13TfLiteContextPKcj+0xa>
   2ad7c:	f006 f81d 	bl	30dba <abort>
  void* data = nullptr;
   2ad80:	2400      	movs	r4, #0
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
   2ad82:	2128      	movs	r1, #40	; 0x28
  void* data = nullptr;
   2ad84:	9401      	str	r4, [sp, #4]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
   2ad86:	aa01      	add	r2, sp, #4
   2ad88:	4798      	blx	r3
   2ad8a:	2801      	cmp	r0, #1
    return nullptr;
   2ad8c:	bf0c      	ite	eq
   2ad8e:	4620      	moveq	r0, r4
  return data;
   2ad90:	9801      	ldrne	r0, [sp, #4]
}
   2ad92:	b002      	add	sp, #8
   2ad94:	bd10      	pop	{r4, pc}

0002ad96 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv>:
inline void Conv(const ConvParams& params, const RuntimeShape& input_shape,
                 const uint8* input_data, const RuntimeShape& filter_shape,
                 const uint8* filter_data, const RuntimeShape& bias_shape,
                 const int32* bias_data, const RuntimeShape& output_shape,
                 uint8* output_data, const RuntimeShape& im2col_shape,
                 uint8* im2col_data, void* cpu_backend_context) {
   2ad96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ad9a:	ed2d 8b02 	vpush	{d8}
   2ad9e:	4699      	mov	r9, r3
  (void)cpu_backend_context;  // only used in optimized code.
  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int stride_width = params.stride_width;
   2ada0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
                 uint8* im2col_data, void* cpu_backend_context) {
   2ada4:	b0a1      	sub	sp, #132	; 0x84
  const int stride_width = params.stride_width;
   2ada6:	930d      	str	r3, [sp, #52]	; 0x34
  const int stride_height = params.stride_height;
   2ada8:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
                 uint8* im2col_data, void* cpu_backend_context) {
   2adac:	921f      	str	r2, [sp, #124]	; 0x7c
  const int stride_height = params.stride_height;
   2adae:	930e      	str	r3, [sp, #56]	; 0x38
  const int dilation_width_factor = params.dilation_width_factor;
   2adb0:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
                 uint8* im2col_data, void* cpu_backend_context) {
   2adb4:	4688      	mov	r8, r1
  const int dilation_width_factor = params.dilation_width_factor;
   2adb6:	930f      	str	r3, [sp, #60]	; 0x3c
  const int dilation_height_factor = params.dilation_height_factor;
   2adb8:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
                 uint8* im2col_data, void* cpu_backend_context) {
   2adbc:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
  const int dilation_height_factor = params.dilation_height_factor;
   2adbe:	9310      	str	r3, [sp, #64]	; 0x40
  const int pad_width = params.padding_values.width;
   2adc0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
   2adc4:	9312      	str	r3, [sp, #72]	; 0x48
  const int pad_height = params.padding_values.height;
   2adc6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   2adca:	9313      	str	r3, [sp, #76]	; 0x4c
  const int32 input_offset = params.input_offset;
   2adcc:	6943      	ldr	r3, [r0, #20]
   2adce:	9314      	str	r3, [sp, #80]	; 0x50
  const int32 filter_offset = params.weights_offset;
   2add0:	6983      	ldr	r3, [r0, #24]
   2add2:	9315      	str	r3, [sp, #84]	; 0x54
  const int32 output_offset = params.output_offset;
   2add4:	69c3      	ldr	r3, [r0, #28]
   2add6:	9316      	str	r3, [sp, #88]	; 0x58
  const int32 output_multiplier = params.output_multiplier;
   2add8:	6a03      	ldr	r3, [r0, #32]
   2adda:	ee08 3a10 	vmov	s16, r3
  const int output_shift = params.output_shift;
   2adde:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2ade0:	ee08 3a90 	vmov	s17, r3
  const int32 output_activation_min = params.quantized_activation_min;
   2ade4:	6a83      	ldr	r3, [r0, #40]	; 0x28
   2ade6:	930a      	str	r3, [sp, #40]	; 0x28
  const int32 output_activation_max = params.quantized_activation_max;
   2ade8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2adea:	930b      	str	r3, [sp, #44]	; 0x2c
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   2adec:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
   2adf0:	4293      	cmp	r3, r2
   2adf2:	dd01      	ble.n	2adf8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x62>
   2adf4:	f005 ffe1 	bl	30dba <abort>

  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   2adf8:	680b      	ldr	r3, [r1, #0]
   2adfa:	2b04      	cmp	r3, #4
   2adfc:	d1fa      	bne.n	2adf4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x5e>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   2adfe:	f8d9 3000 	ldr.w	r3, [r9]
   2ae02:	2b04      	cmp	r3, #4
   2ae04:	d1f6      	bne.n	2adf4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x5e>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   2ae06:	6833      	ldr	r3, [r6, #0]
   2ae08:	2b04      	cmp	r3, #4
   2ae0a:	d1f3      	bne.n	2adf4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x5e>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   2ae0c:	2300      	movs	r3, #0
   2ae0e:	4632      	mov	r2, r6
   2ae10:	4619      	mov	r1, r3
   2ae12:	4640      	mov	r0, r8
   2ae14:	f7ff fa82 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   2ae18:	2303      	movs	r3, #3
   2ae1a:	464a      	mov	r2, r9
   2ae1c:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   2ae1e:	9017      	str	r0, [sp, #92]	; 0x5c
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   2ae20:	4640      	mov	r0, r8
   2ae22:	f7ff fa7b 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   2ae26:	2303      	movs	r3, #3
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   2ae28:	9018      	str	r0, [sp, #96]	; 0x60
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   2ae2a:	4632      	mov	r2, r6
   2ae2c:	2100      	movs	r1, #0
   2ae2e:	4648      	mov	r0, r9
   2ae30:	f7ff fa74 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  if (bias_data) {
   2ae34:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   2ae36:	900c      	str	r0, [sp, #48]	; 0x30
  if (bias_data) {
   2ae38:	b12b      	cbz	r3, 2ae46 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0xb0>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   2ae3a:	982d      	ldr	r0, [sp, #180]	; 0xb4
   2ae3c:	f7fc fc49 	bl	276d2 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   2ae40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2ae42:	4298      	cmp	r0, r3
   2ae44:	d1d6      	bne.n	2adf4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x5e>
  }
  const int input_height = input_shape.Dims(1);
   2ae46:	2101      	movs	r1, #1
   2ae48:	4640      	mov	r0, r8
   2ae4a:	f7fc fbbd 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   2ae4e:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   2ae50:	9019      	str	r0, [sp, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
   2ae52:	4640      	mov	r0, r8
   2ae54:	f7fc fbb8 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
   2ae58:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   2ae5a:	901a      	str	r0, [sp, #104]	; 0x68
  const int filter_height = filter_shape.Dims(1);
   2ae5c:	4648      	mov	r0, r9
   2ae5e:	f7fc fbb3 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
   2ae62:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
   2ae64:	901b      	str	r0, [sp, #108]	; 0x6c
  const int filter_width = filter_shape.Dims(2);
   2ae66:	4648      	mov	r0, r9
   2ae68:	f7fc fbae 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   2ae6c:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
   2ae6e:	901c      	str	r0, [sp, #112]	; 0x70
  const int output_height = output_shape.Dims(1);
   2ae70:	4630      	mov	r0, r6
   2ae72:	f7fc fba9 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   2ae76:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   2ae78:	901d      	str	r0, [sp, #116]	; 0x74
  const int output_width = output_shape.Dims(2);
   2ae7a:	4630      	mov	r0, r6
   2ae7c:	f7fc fba4 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int batch = 0; batch < batches; ++batch) {
   2ae80:	f04f 0b00 	mov.w	fp, #0
  const int output_width = output_shape.Dims(2);
   2ae84:	901e      	str	r0, [sp, #120]	; 0x78
  for (int batch = 0; batch < batches; ++batch) {
   2ae86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2ae88:	459b      	cmp	fp, r3
   2ae8a:	f280 8096 	bge.w	2afba <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x224>
   2ae8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2ae90:	425b      	negs	r3, r3
   2ae92:	9308      	str	r3, [sp, #32]
    for (int out_y = 0; out_y < output_height; ++out_y) {
   2ae94:	2300      	movs	r3, #0
   2ae96:	9304      	str	r3, [sp, #16]
   2ae98:	9b04      	ldr	r3, [sp, #16]
   2ae9a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   2ae9c:	4293      	cmp	r3, r2
   2ae9e:	f280 8089 	bge.w	2afb4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x21e>
   2aea2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2aea4:	425b      	negs	r3, r3
   2aea6:	9309      	str	r3, [sp, #36]	; 0x24
      for (int out_x = 0; out_x < output_width; ++out_x) {
   2aea8:	2300      	movs	r3, #0
   2aeaa:	9305      	str	r3, [sp, #20]
   2aeac:	9b05      	ldr	r3, [sp, #20]
   2aeae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   2aeb0:	4293      	cmp	r3, r2
   2aeb2:	da77      	bge.n	2afa4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x20e>
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   2aeb4:	2400      	movs	r4, #0
   2aeb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2aeb8:	429c      	cmp	r4, r3
   2aeba:	da6b      	bge.n	2af94 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x1fe>
          const int in_x_origin = (out_x * stride_width) - pad_width;
          const int in_y_origin = (out_y * stride_height) - pad_height;
          int32 acc = 0;
   2aebc:	2500      	movs	r5, #0
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   2aebe:	f8dd a020 	ldr.w	sl, [sp, #32]
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   2aec2:	9506      	str	r5, [sp, #24]
   2aec4:	9b06      	ldr	r3, [sp, #24]
   2aec6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   2aec8:	4293      	cmp	r3, r2
   2aeca:	da42      	bge.n	2af52 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x1bc>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   2aecc:	2300      	movs	r3, #0
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
                const int in_y =
   2aece:	9f09      	ldr	r7, [sp, #36]	; 0x24
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   2aed0:	9307      	str	r3, [sp, #28]
   2aed2:	9b07      	ldr	r3, [sp, #28]
   2aed4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   2aed6:	4293      	cmp	r3, r2
   2aed8:	da35      	bge.n	2af46 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x1b0>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   2aeda:	2300      	movs	r3, #0
   2aedc:	9303      	str	r3, [sp, #12]
   2aede:	9b03      	ldr	r3, [sp, #12]
   2aee0:	9a18      	ldr	r2, [sp, #96]	; 0x60
   2aee2:	4293      	cmp	r3, r2
   2aee4:	da29      	bge.n	2af3a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x1a4>
                    in_y_origin + dilation_height_factor * filter_y;
                // If the location is outside the bounds of the input image,
                // use zero as a default value.
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   2aee6:	2f00      	cmp	r7, #0
   2aee8:	db24      	blt.n	2af34 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x19e>
   2aeea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   2aeec:	42bb      	cmp	r3, r7
   2aeee:	dd21      	ble.n	2af34 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x19e>
   2aef0:	f1ba 0f00 	cmp.w	sl, #0
   2aef4:	db1e      	blt.n	2af34 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x19e>
   2aef6:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2aef8:	4553      	cmp	r3, sl
   2aefa:	dd1b      	ble.n	2af34 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x19e>
                    (in_y < input_height)) {
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
   2aefc:	9b03      	ldr	r3, [sp, #12]
   2aefe:	4652      	mov	r2, sl
   2af00:	4659      	mov	r1, fp
   2af02:	9300      	str	r3, [sp, #0]
   2af04:	4640      	mov	r0, r8
   2af06:	463b      	mov	r3, r7
   2af08:	f7fc fc20 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
                  int32 filter_val =
                      filter_data[Offset(filter_shape, out_channel, filter_y,
   2af0c:	9b03      	ldr	r3, [sp, #12]
   2af0e:	4621      	mov	r1, r4
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
   2af10:	9011      	str	r0, [sp, #68]	; 0x44
                      filter_data[Offset(filter_shape, out_channel, filter_y,
   2af12:	9300      	str	r3, [sp, #0]
   2af14:	4648      	mov	r0, r9
   2af16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   2af1a:	f7fc fc17 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                         filter_x, in_channel)];
   2af1e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
                  acc +=
                      (filter_val + filter_offset) * (input_val + input_offset);
   2af20:	9a15      	ldr	r2, [sp, #84]	; 0x54
                                         filter_x, in_channel)];
   2af22:	5c1b      	ldrb	r3, [r3, r0]
                                                      in_x, in_channel)];
   2af24:	9911      	ldr	r1, [sp, #68]	; 0x44
                      (filter_val + filter_offset) * (input_val + input_offset);
   2af26:	4413      	add	r3, r2
                                                      in_x, in_channel)];
   2af28:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   2af2a:	5c52      	ldrb	r2, [r2, r1]
                      (filter_val + filter_offset) * (input_val + input_offset);
   2af2c:	9914      	ldr	r1, [sp, #80]	; 0x50
   2af2e:	440a      	add	r2, r1
                  acc +=
   2af30:	fb02 5503 	mla	r5, r2, r3, r5
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   2af34:	9b03      	ldr	r3, [sp, #12]
   2af36:	3301      	adds	r3, #1
   2af38:	e7d0      	b.n	2aedc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x146>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   2af3a:	9b07      	ldr	r3, [sp, #28]
   2af3c:	3301      	adds	r3, #1
   2af3e:	9307      	str	r3, [sp, #28]
   2af40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2af42:	441f      	add	r7, r3
   2af44:	e7c5      	b.n	2aed2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x13c>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   2af46:	9b06      	ldr	r3, [sp, #24]
   2af48:	3301      	adds	r3, #1
   2af4a:	9306      	str	r3, [sp, #24]
   2af4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2af4e:	449a      	add	sl, r3
   2af50:	e7b8      	b.n	2aec4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x12e>
                }
              }
            }
          }
          if (bias_data) {
   2af52:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   2af54:	b113      	cbz	r3, 2af5c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x1c6>
            acc += bias_data[out_channel];
   2af56:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   2af5a:	441d      	add	r5, r3
          }
          acc = MultiplyByQuantizedMultiplier(acc, output_multiplier,
   2af5c:	ee18 2a90 	vmov	r2, s17
   2af60:	ee18 1a10 	vmov	r1, s16
   2af64:	4628      	mov	r0, r5
   2af66:	f7ee f9d3 	bl	19310 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
                                              output_shift);
          acc += output_offset;
   2af6a:	9b16      	ldr	r3, [sp, #88]	; 0x58
          acc = std::max(acc, output_activation_min);
          acc = std::min(acc, output_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   2af6c:	9400      	str	r4, [sp, #0]
          acc += output_offset;
   2af6e:	18c5      	adds	r5, r0, r3
   2af70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   2af72:	4659      	mov	r1, fp
   2af74:	429d      	cmp	r5, r3
   2af76:	bfb8      	it	lt
   2af78:	461d      	movlt	r5, r3
   2af7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2af7c:	4630      	mov	r0, r6
   2af7e:	429d      	cmp	r5, r3
   2af80:	bfa8      	it	ge
   2af82:	461d      	movge	r5, r3
   2af84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   2af88:	f7fc fbe0 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   2af8c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   2af8e:	3401      	adds	r4, #1
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   2af90:	541d      	strb	r5, [r3, r0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   2af92:	e790      	b.n	2aeb6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x120>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   2af94:	9b05      	ldr	r3, [sp, #20]
   2af96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2af98:	3301      	adds	r3, #1
   2af9a:	9305      	str	r3, [sp, #20]
   2af9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2af9e:	4413      	add	r3, r2
   2afa0:	9309      	str	r3, [sp, #36]	; 0x24
   2afa2:	e783      	b.n	2aeac <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x116>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   2afa4:	9b04      	ldr	r3, [sp, #16]
   2afa6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2afa8:	3301      	adds	r3, #1
   2afaa:	9304      	str	r3, [sp, #16]
   2afac:	9b08      	ldr	r3, [sp, #32]
   2afae:	4413      	add	r3, r2
   2afb0:	9308      	str	r3, [sp, #32]
   2afb2:	e771      	b.n	2ae98 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x102>
  for (int batch = 0; batch < batches; ++batch) {
   2afb4:	f10b 0b01 	add.w	fp, fp, #1
   2afb8:	e765      	b.n	2ae86 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0xf0>
              static_cast<uint8>(acc);
        }
      }
    }
  }
}
   2afba:	b021      	add	sp, #132	; 0x84
   2afbc:	ecbd 8b02 	vpop	{d8}
   2afc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002afc4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const ConvParams& params, const int32* output_multiplier,
    const int32* output_shift, const RuntimeShape& input_shape,
    const int8* input_data, const RuntimeShape& filter_shape,
    const int8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int8* output_data) {
   2afc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2afc8:	4698      	mov	r8, r3
  // Get parameters.
  const int32 input_offset = params.input_offset;  // r = s(q - Z)
   2afca:	6943      	ldr	r3, [r0, #20]
    int8* output_data) {
   2afcc:	b0a1      	sub	sp, #132	; 0x84
  const int32 input_offset = params.input_offset;  // r = s(q - Z)
   2afce:	9312      	str	r3, [sp, #72]	; 0x48
  const int stride_width = params.stride_width;
   2afd0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    int8* output_data) {
   2afd4:	e9cd 121e 	strd	r1, r2, [sp, #120]	; 0x78
  const int stride_width = params.stride_width;
   2afd8:	930d      	str	r3, [sp, #52]	; 0x34
  const int stride_height = params.stride_height;
   2afda:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    int8* output_data) {
   2afde:	9e2b      	ldr	r6, [sp, #172]	; 0xac
  const int stride_height = params.stride_height;
   2afe0:	930e      	str	r3, [sp, #56]	; 0x38
  const int dilation_width_factor = params.dilation_width_factor;
   2afe2:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
    int8* output_data) {
   2afe6:	9f2f      	ldr	r7, [sp, #188]	; 0xbc
  const int dilation_width_factor = params.dilation_width_factor;
   2afe8:	930f      	str	r3, [sp, #60]	; 0x3c
  const int dilation_height_factor = params.dilation_height_factor;
   2afea:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
   2afee:	9310      	str	r3, [sp, #64]	; 0x40
  const int pad_width = params.padding_values.width;
   2aff0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
   2aff4:	9313      	str	r3, [sp, #76]	; 0x4c
  const int pad_height = params.padding_values.height;
   2aff6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   2affa:	9314      	str	r3, [sp, #80]	; 0x50
  const int32 output_offset = params.output_offset;
   2affc:	69c3      	ldr	r3, [r0, #28]
   2affe:	9315      	str	r3, [sp, #84]	; 0x54

  // Set min and max value of the output.
  const int32 output_activation_min = params.quantized_activation_min;
   2b000:	6a83      	ldr	r3, [r0, #40]	; 0x28
   2b002:	930a      	str	r3, [sp, #40]	; 0x28
  const int32 output_activation_max = params.quantized_activation_max;
   2b004:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2b006:	930b      	str	r3, [sp, #44]	; 0x2c

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   2b008:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
   2b00c:	4293      	cmp	r3, r2
   2b00e:	dd01      	ble.n	2b014 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x50>
   2b010:	f005 fed3 	bl	30dba <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   2b014:	f8d8 3000 	ldr.w	r3, [r8]
   2b018:	2b04      	cmp	r3, #4
   2b01a:	d1f9      	bne.n	2b010 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4c>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   2b01c:	6833      	ldr	r3, [r6, #0]
   2b01e:	2b04      	cmp	r3, #4
   2b020:	d1f6      	bne.n	2b010 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4c>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   2b022:	683b      	ldr	r3, [r7, #0]
   2b024:	2b04      	cmp	r3, #4
   2b026:	d1f3      	bne.n	2b010 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4c>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   2b028:	2300      	movs	r3, #0
   2b02a:	463a      	mov	r2, r7
   2b02c:	4619      	mov	r1, r3
   2b02e:	4640      	mov	r0, r8
   2b030:	f7ff f974 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   2b034:	2303      	movs	r3, #3
   2b036:	4632      	mov	r2, r6
   2b038:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   2b03a:	9016      	str	r0, [sp, #88]	; 0x58
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   2b03c:	4640      	mov	r0, r8
   2b03e:	f7ff f96d 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   2b042:	2303      	movs	r3, #3
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   2b044:	9017      	str	r0, [sp, #92]	; 0x5c
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   2b046:	463a      	mov	r2, r7
   2b048:	2100      	movs	r1, #0
   2b04a:	4630      	mov	r0, r6
   2b04c:	f7ff f966 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  if (bias_data) {
   2b050:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   2b052:	900c      	str	r0, [sp, #48]	; 0x30
  if (bias_data) {
   2b054:	b12b      	cbz	r3, 2b062 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x9e>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   2b056:	982d      	ldr	r0, [sp, #180]	; 0xb4
   2b058:	f7fc fb3b 	bl	276d2 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   2b05c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2b05e:	4298      	cmp	r0, r3
   2b060:	d1d6      	bne.n	2b010 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4c>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
   2b062:	2101      	movs	r1, #1
   2b064:	4640      	mov	r0, r8
   2b066:	f7fc faaf 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   2b06a:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   2b06c:	9018      	str	r0, [sp, #96]	; 0x60
  const int input_width = input_shape.Dims(2);
   2b06e:	4640      	mov	r0, r8
   2b070:	f7fc faaa 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
   2b074:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   2b076:	9019      	str	r0, [sp, #100]	; 0x64
  const int filter_height = filter_shape.Dims(1);
   2b078:	4630      	mov	r0, r6
   2b07a:	f7fc faa5 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
   2b07e:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
   2b080:	901a      	str	r0, [sp, #104]	; 0x68
  const int filter_width = filter_shape.Dims(2);
   2b082:	4630      	mov	r0, r6
   2b084:	f7fc faa0 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   2b088:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
   2b08a:	901b      	str	r0, [sp, #108]	; 0x6c
  const int output_height = output_shape.Dims(1);
   2b08c:	4638      	mov	r0, r7
   2b08e:	f7fc fa9b 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   2b092:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   2b094:	901c      	str	r0, [sp, #112]	; 0x70
  const int output_width = output_shape.Dims(2);
   2b096:	4638      	mov	r0, r7
   2b098:	f7fc fa96 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int batch = 0; batch < batches; ++batch) {
   2b09c:	f04f 0b00 	mov.w	fp, #0
  const int output_width = output_shape.Dims(2);
   2b0a0:	901d      	str	r0, [sp, #116]	; 0x74
  for (int batch = 0; batch < batches; ++batch) {
   2b0a2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2b0a4:	459b      	cmp	fp, r3
   2b0a6:	f280 8098 	bge.w	2b1da <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x216>
   2b0aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2b0ac:	425b      	negs	r3, r3
   2b0ae:	9308      	str	r3, [sp, #32]
    for (int out_y = 0; out_y < output_height; ++out_y) {
   2b0b0:	2300      	movs	r3, #0
   2b0b2:	9304      	str	r3, [sp, #16]
   2b0b4:	9b04      	ldr	r3, [sp, #16]
   2b0b6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   2b0b8:	4293      	cmp	r3, r2
   2b0ba:	f280 808b 	bge.w	2b1d4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x210>
   2b0be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2b0c0:	425b      	negs	r3, r3
   2b0c2:	9309      	str	r3, [sp, #36]	; 0x24
      for (int out_x = 0; out_x < output_width; ++out_x) {
   2b0c4:	2300      	movs	r3, #0
   2b0c6:	9305      	str	r3, [sp, #20]
   2b0c8:	9b05      	ldr	r3, [sp, #20]
   2b0ca:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   2b0cc:	4293      	cmp	r3, r2
   2b0ce:	da79      	bge.n	2b1c4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x200>
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   2b0d0:	2400      	movs	r4, #0
   2b0d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2b0d4:	429c      	cmp	r4, r3
   2b0d6:	da6d      	bge.n	2b1b4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f0>
          const int in_x_origin = (out_x * stride_width) - pad_width;
          const int in_y_origin = (out_y * stride_height) - pad_height;
          int32 acc = 0;
   2b0d8:	2500      	movs	r5, #0
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   2b0da:	f8dd 9020 	ldr.w	r9, [sp, #32]
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   2b0de:	9506      	str	r5, [sp, #24]
   2b0e0:	9b06      	ldr	r3, [sp, #24]
   2b0e2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   2b0e4:	4293      	cmp	r3, r2
   2b0e6:	da42      	bge.n	2b16e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1aa>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   2b0e8:	2300      	movs	r3, #0
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
                const int in_y =
   2b0ea:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   2b0ee:	9307      	str	r3, [sp, #28]
   2b0f0:	9b07      	ldr	r3, [sp, #28]
   2b0f2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   2b0f4:	4293      	cmp	r3, r2
   2b0f6:	da34      	bge.n	2b162 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19e>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   2b0f8:	2300      	movs	r3, #0
   2b0fa:	9303      	str	r3, [sp, #12]
   2b0fc:	9b03      	ldr	r3, [sp, #12]
   2b0fe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   2b100:	4293      	cmp	r3, r2
   2b102:	da28      	bge.n	2b156 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x192>
                    in_y_origin + dilation_height_factor * filter_y;
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   2b104:	f1ba 0f00 	cmp.w	sl, #0
   2b108:	db22      	blt.n	2b150 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x18c>
   2b10a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2b10c:	4553      	cmp	r3, sl
   2b10e:	dd1f      	ble.n	2b150 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x18c>
   2b110:	f1b9 0f00 	cmp.w	r9, #0
   2b114:	db1c      	blt.n	2b150 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x18c>
   2b116:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2b118:	454b      	cmp	r3, r9
   2b11a:	dd19      	ble.n	2b150 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x18c>
                    (in_y < input_height);
                if (is_point_inside_image) {
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
   2b11c:	9b03      	ldr	r3, [sp, #12]
   2b11e:	464a      	mov	r2, r9
   2b120:	4659      	mov	r1, fp
   2b122:	9300      	str	r3, [sp, #0]
   2b124:	4640      	mov	r0, r8
   2b126:	4653      	mov	r3, sl
   2b128:	f7fc fb10 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
                  int32 filter_val =
                      filter_data[Offset(filter_shape, out_channel, filter_y,
   2b12c:	9b03      	ldr	r3, [sp, #12]
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
   2b12e:	9011      	str	r0, [sp, #68]	; 0x44
                      filter_data[Offset(filter_shape, out_channel, filter_y,
   2b130:	9300      	str	r3, [sp, #0]
   2b132:	4621      	mov	r1, r4
   2b134:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   2b138:	4630      	mov	r0, r6
   2b13a:	f7fc fb07 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
   2b13e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   2b140:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   2b142:	569b      	ldrsb	r3, [r3, r2]
                  // long as the filter size (filter_y * filter_x * in_channel)
                  // does not exceed 2^16, which is the case in all the models
                  // we have seen so far.
                  // TODO(jianlijianli): Add a check to make sure the
                  // accumulator depth is smaller than 2^16.
                  acc += filter_val * (input_val + input_offset);
   2b144:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2b146:	4413      	add	r3, r2
                                         filter_x, in_channel)];
   2b148:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   2b14a:	5612      	ldrsb	r2, [r2, r0]
                  acc += filter_val * (input_val + input_offset);
   2b14c:	fb02 5503 	mla	r5, r2, r3, r5
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   2b150:	9b03      	ldr	r3, [sp, #12]
   2b152:	3301      	adds	r3, #1
   2b154:	e7d1      	b.n	2b0fa <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x136>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   2b156:	9b07      	ldr	r3, [sp, #28]
   2b158:	3301      	adds	r3, #1
   2b15a:	9307      	str	r3, [sp, #28]
   2b15c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2b15e:	449a      	add	sl, r3
   2b160:	e7c6      	b.n	2b0f0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x12c>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   2b162:	9b06      	ldr	r3, [sp, #24]
   2b164:	3301      	adds	r3, #1
   2b166:	9306      	str	r3, [sp, #24]
   2b168:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2b16a:	4499      	add	r9, r3
   2b16c:	e7b8      	b.n	2b0e0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x11c>
                }
              }
            }
          }

          if (bias_data) {
   2b16e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   2b170:	b113      	cbz	r3, 2b178 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b4>
            acc += bias_data[out_channel];
   2b172:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   2b176:	441d      	add	r5, r3
          }
          acc = MultiplyByQuantizedMultiplier(
   2b178:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2b17a:	4628      	mov	r0, r5
   2b17c:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   2b180:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   2b182:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   2b186:	f7ee f8c3 	bl	19310 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
              acc, output_multiplier[out_channel], output_shift[out_channel]);
          acc += output_offset;
   2b18a:	9b15      	ldr	r3, [sp, #84]	; 0x54
          acc = std::max(acc, output_activation_min);
          acc = std::min(acc, output_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   2b18c:	9400      	str	r4, [sp, #0]
          acc += output_offset;
   2b18e:	18c5      	adds	r5, r0, r3
   2b190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   2b192:	4659      	mov	r1, fp
   2b194:	429d      	cmp	r5, r3
   2b196:	bfb8      	it	lt
   2b198:	461d      	movlt	r5, r3
   2b19a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2b19c:	4638      	mov	r0, r7
   2b19e:	429d      	cmp	r5, r3
   2b1a0:	bfa8      	it	ge
   2b1a2:	461d      	movge	r5, r3
   2b1a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   2b1a8:	f7fc fad0 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   2b1ac:	9b30      	ldr	r3, [sp, #192]	; 0xc0
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   2b1ae:	3401      	adds	r4, #1
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   2b1b0:	541d      	strb	r5, [r3, r0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   2b1b2:	e78e      	b.n	2b0d2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x10e>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   2b1b4:	9b05      	ldr	r3, [sp, #20]
   2b1b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2b1b8:	3301      	adds	r3, #1
   2b1ba:	9305      	str	r3, [sp, #20]
   2b1bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2b1be:	4413      	add	r3, r2
   2b1c0:	9309      	str	r3, [sp, #36]	; 0x24
   2b1c2:	e781      	b.n	2b0c8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x104>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   2b1c4:	9b04      	ldr	r3, [sp, #16]
   2b1c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2b1c8:	3301      	adds	r3, #1
   2b1ca:	9304      	str	r3, [sp, #16]
   2b1cc:	9b08      	ldr	r3, [sp, #32]
   2b1ce:	4413      	add	r3, r2
   2b1d0:	9308      	str	r3, [sp, #32]
   2b1d2:	e76f      	b.n	2b0b4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xf0>
  for (int batch = 0; batch < batches; ++batch) {
   2b1d4:	f10b 0b01 	add.w	fp, fp, #1
   2b1d8:	e763      	b.n	2b0a2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xde>
              static_cast<int8_t>(acc);
        }
      }
    }
  }
}
   2b1da:	b021      	add	sp, #132	; 0x84
   2b1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002b1e0 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:
  switch (padding) {
   2b1e0:	2801      	cmp	r0, #1
   2b1e2:	d003      	beq.n	2b1ec <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0xc>
   2b1e4:	2802      	cmp	r0, #2
   2b1e6:	d006      	beq.n	2b1f6 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x16>
   2b1e8:	2000      	movs	r0, #0
   2b1ea:	4770      	bx	lr
      return (image_size + stride - 1) / stride;
   2b1ec:	1e58      	subs	r0, r3, #1
   2b1ee:	4408      	add	r0, r1
      return (image_size + stride - effective_filter_size) / stride;
   2b1f0:	fb90 f0f3 	sdiv	r0, r0, r3
}
   2b1f4:	4770      	bx	lr
      return (image_size + stride - effective_filter_size) / stride;
   2b1f6:	1e58      	subs	r0, r3, #1
   2b1f8:	4408      	add	r0, r1
   2b1fa:	9900      	ldr	r1, [sp, #0]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   2b1fc:	3a01      	subs	r2, #1
      return (image_size + stride - effective_filter_size) / stride;
   2b1fe:	fb01 0012 	mls	r0, r1, r2, r0
   2b202:	e7f5      	b.n	2b1f0 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x10>

0002b204 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_>:
                   TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
   2b204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b208:	b0b5      	sub	sp, #212	; 0xd4
   2b20a:	e9dd 873e 	ldrd	r8, r7, [sp, #248]	; 0xf8
  const int32_t input_offset = -input->params.zero_point;
   2b20e:	f8d8 1010 	ldr.w	r1, [r8, #16]
  op_params.padding_type = RuntimePaddingType(params->padding);
   2b212:	7810      	ldrb	r0, [r2, #0]
                   TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
   2b214:	9e43      	ldr	r6, [sp, #268]	; 0x10c
  const int32_t input_offset = -input->params.zero_point;
   2b216:	f1c1 0c00 	rsb	ip, r1, #0
  const int32_t filter_offset = -filter->params.zero_point;
   2b21a:	6939      	ldr	r1, [r7, #16]
  switch (padding) {
   2b21c:	2801      	cmp	r0, #1
  const int32_t output_offset = output->params.zero_point;
   2b21e:	f8d6 e010 	ldr.w	lr, [r6, #16]
  const int32_t filter_offset = -filter->params.zero_point;
   2b222:	f1c1 0100 	rsb	r1, r1, #0
                   TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
   2b226:	e9dd 4540 	ldrd	r4, r5, [sp, #256]	; 0x100
  switch (padding) {
   2b22a:	d002      	beq.n	2b232 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2e>
      return PaddingType::kNone;
   2b22c:	2802      	cmp	r0, #2
   2b22e:	bf18      	it	ne
   2b230:	2000      	movne	r0, #0
  op_params.padding_type = RuntimePaddingType(params->padding);
   2b232:	f88d 0098 	strb.w	r0, [sp, #152]	; 0x98
  op_params.padding_values.width = data.padding.width;
   2b236:	6818      	ldr	r0, [r3, #0]
  op_params.weights_offset = filter_offset;
   2b238:	e9cd c12b 	strd	ip, r1, [sp, #172]	; 0xac
  op_params.padding_values.width = data.padding.width;
   2b23c:	f8ad 009a 	strh.w	r0, [sp, #154]	; 0x9a
  op_params.padding_values.height = data.padding.height;
   2b240:	6858      	ldr	r0, [r3, #4]
  reference_ops::Conv(op_params, GetTensorShape(input),
   2b242:	4641      	mov	r1, r8
  op_params.padding_values.height = data.padding.height;
   2b244:	f8ad 009c 	strh.w	r0, [sp, #156]	; 0x9c
  op_params.stride_width = params->stride_width;
   2b248:	6850      	ldr	r0, [r2, #4]
  op_params.output_offset = output_offset;
   2b24a:	f8cd e0b4 	str.w	lr, [sp, #180]	; 0xb4
  op_params.stride_width = params->stride_width;
   2b24e:	f8ad 00a2 	strh.w	r0, [sp, #162]	; 0xa2
  op_params.stride_height = params->stride_height;
   2b252:	6890      	ldr	r0, [r2, #8]
   2b254:	f8ad 00a4 	strh.w	r0, [sp, #164]	; 0xa4
  op_params.dilation_width_factor = params->dilation_width_factor;
   2b258:	6910      	ldr	r0, [r2, #16]
  op_params.dilation_height_factor = params->dilation_height_factor;
   2b25a:	6952      	ldr	r2, [r2, #20]
  op_params.dilation_width_factor = params->dilation_width_factor;
   2b25c:	f8ad 00a6 	strh.w	r0, [sp, #166]	; 0xa6
  op_params.dilation_height_factor = params->dilation_height_factor;
   2b260:	f8ad 20a8 	strh.w	r2, [sp, #168]	; 0xa8
  op_params.output_multiplier = data.output_multiplier;
   2b264:	691a      	ldr	r2, [r3, #16]
  reference_ops::Conv(op_params, GetTensorShape(input),
   2b266:	a808      	add	r0, sp, #32
  op_params.output_multiplier = data.output_multiplier;
   2b268:	922e      	str	r2, [sp, #184]	; 0xb8
  op_params.output_shift = -data.output_shift;
   2b26a:	695a      	ldr	r2, [r3, #20]
   2b26c:	4252      	negs	r2, r2
   2b26e:	922f      	str	r2, [sp, #188]	; 0xbc
  op_params.quantized_activation_min = data.output_activation_min;
   2b270:	6a1a      	ldr	r2, [r3, #32]
  op_params.quantized_activation_max = data.output_activation_max;
   2b272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  op_params.quantized_activation_min = data.output_activation_min;
   2b274:	9230      	str	r2, [sp, #192]	; 0xc0
  op_params.quantized_activation_max = data.output_activation_max;
   2b276:	9331      	str	r3, [sp, #196]	; 0xc4
  reference_ops::Conv(op_params, GetTensorShape(input),
   2b278:	f7fc f9e0 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                      GetTensorData<uint8_t>(input), GetTensorShape(filter),
   2b27c:	4639      	mov	r1, r7
   2b27e:	a80e      	add	r0, sp, #56	; 0x38
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   2b280:	f8d8 9004 	ldr.w	r9, [r8, #4]
   2b284:	f7fc f9da 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2b288:	f8d7 a004 	ldr.w	sl, [r7, #4]
                      GetTensorData<uint8_t>(filter), GetTensorShape(bias),
   2b28c:	af14      	add	r7, sp, #80	; 0x50
   2b28e:	4621      	mov	r1, r4
   2b290:	4638      	mov	r0, r7
   2b292:	f7fc f9d3 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2b296:	b104      	cbz	r4, 2b29a <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x96>
   2b298:	6864      	ldr	r4, [r4, #4]
                      GetTensorData<int32_t>(bias), GetTensorShape(output),
   2b29a:	f10d 0868 	add.w	r8, sp, #104	; 0x68
   2b29e:	4631      	mov	r1, r6
   2b2a0:	4640      	mov	r0, r8
   2b2a2:	f7fc f9cb 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   2b2a6:	f8d6 b004 	ldr.w	fp, [r6, #4]
                      GetTensorData<uint8_t>(output), GetTensorShape(im2col),
   2b2aa:	ae20      	add	r6, sp, #128	; 0x80
   2b2ac:	4629      	mov	r1, r5
   2b2ae:	4630      	mov	r0, r6
   2b2b0:	f7fc f9c4 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2b2b4:	b105      	cbz	r5, 2b2b8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0xb4>
   2b2b6:	686d      	ldr	r5, [r5, #4]
  reference_ops::Conv(op_params, GetTensorShape(input),
   2b2b8:	2300      	movs	r3, #0
   2b2ba:	464a      	mov	r2, r9
   2b2bc:	a908      	add	r1, sp, #32
   2b2be:	e9cd 5306 	strd	r5, r3, [sp, #24]
   2b2c2:	a826      	add	r0, sp, #152	; 0x98
   2b2c4:	ab0e      	add	r3, sp, #56	; 0x38
   2b2c6:	e9cd b604 	strd	fp, r6, [sp, #16]
   2b2ca:	e9cd 4802 	strd	r4, r8, [sp, #8]
   2b2ce:	e9cd a700 	strd	sl, r7, [sp]
   2b2d2:	f7ff fd60 	bl	2ad96 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv>
                      GetTensorData<uint8_t>(output), GetTensorShape(im2col),
   2b2d6:	4630      	mov	r0, r6
   2b2d8:	f7fc f96b 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<int32_t>(bias), GetTensorShape(output),
   2b2dc:	4640      	mov	r0, r8
   2b2de:	f7fc f968 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<uint8_t>(filter), GetTensorShape(bias),
   2b2e2:	4638      	mov	r0, r7
   2b2e4:	f7fc f965 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<uint8_t>(input), GetTensorShape(filter),
   2b2e8:	a80e      	add	r0, sp, #56	; 0x38
   2b2ea:	f7fc f962 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Conv(op_params, GetTensorShape(input),
   2b2ee:	a808      	add	r0, sp, #32
   2b2f0:	f7fc f95f 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   2b2f4:	b035      	add	sp, #212	; 0xd4
   2b2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002b2fa <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_>:
                             TfLiteTensor* im2col) {
   2b2fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      data.per_channel_output_shift, GetTensorShape(input),
   2b2fe:	e9d3 ab06 	ldrd	sl, fp, [r3, #24]
                             TfLiteTensor* im2col) {
   2b302:	b0b1      	sub	sp, #196	; 0xc4
   2b304:	e9dd 643a 	ldrd	r6, r4, [sp, #232]	; 0xe8
  op_params.input_offset = -input->params.zero_point;
   2b308:	6931      	ldr	r1, [r6, #16]
                             TfLiteTensor* im2col) {
   2b30a:	e9dd 593c 	ldrd	r5, r9, [sp, #240]	; 0xf0
  op_params.input_offset = -input->params.zero_point;
   2b30e:	4249      	negs	r1, r1
   2b310:	9127      	str	r1, [sp, #156]	; 0x9c
  op_params.output_offset = output->params.zero_point;
   2b312:	f8d9 1010 	ldr.w	r1, [r9, #16]
      data.per_channel_output_shift, GetTensorShape(input),
   2b316:	a80a      	add	r0, sp, #40	; 0x28
  op_params.output_offset = output->params.zero_point;
   2b318:	9129      	str	r1, [sp, #164]	; 0xa4
  op_params.stride_height = params->stride_height;
   2b31a:	6891      	ldr	r1, [r2, #8]
   2b31c:	f8ad 1094 	strh.w	r1, [sp, #148]	; 0x94
  op_params.stride_width = params->stride_width;
   2b320:	6851      	ldr	r1, [r2, #4]
   2b322:	f8ad 1092 	strh.w	r1, [sp, #146]	; 0x92
  op_params.dilation_height_factor = params->dilation_height_factor;
   2b326:	6951      	ldr	r1, [r2, #20]
  op_params.dilation_width_factor = params->dilation_width_factor;
   2b328:	6912      	ldr	r2, [r2, #16]
  op_params.dilation_height_factor = params->dilation_height_factor;
   2b32a:	f8ad 1098 	strh.w	r1, [sp, #152]	; 0x98
  op_params.dilation_width_factor = params->dilation_width_factor;
   2b32e:	f8ad 2096 	strh.w	r2, [sp, #150]	; 0x96
  op_params.padding_values.height = data.padding.height;
   2b332:	685a      	ldr	r2, [r3, #4]
      data.per_channel_output_shift, GetTensorShape(input),
   2b334:	4631      	mov	r1, r6
  op_params.padding_values.height = data.padding.height;
   2b336:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
  op_params.padding_values.width = data.padding.width;
   2b33a:	681a      	ldr	r2, [r3, #0]
   2b33c:	f8ad 208a 	strh.w	r2, [sp, #138]	; 0x8a
  op_params.quantized_activation_min = data.output_activation_min;
   2b340:	6a1a      	ldr	r2, [r3, #32]
   2b342:	922c      	str	r2, [sp, #176]	; 0xb0
  op_params.quantized_activation_max = data.output_activation_max;
   2b344:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   2b346:	922d      	str	r2, [sp, #180]	; 0xb4
      data.per_channel_output_shift, GetTensorShape(input),
   2b348:	f7fc f978 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   2b34c:	6873      	ldr	r3, [r6, #4]
      GetTensorData<int8>(input), GetTensorShape(filter),
   2b34e:	ae10      	add	r6, sp, #64	; 0x40
   2b350:	4621      	mov	r1, r4
   2b352:	4630      	mov	r0, r6
   2b354:	9309      	str	r3, [sp, #36]	; 0x24
   2b356:	f7fc f971 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2b35a:	b104      	cbz	r4, 2b35e <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x64>
   2b35c:	6864      	ldr	r4, [r4, #4]
      GetTensorData<int8>(filter), GetTensorShape(bias),
   2b35e:	af16      	add	r7, sp, #88	; 0x58
   2b360:	4629      	mov	r1, r5
   2b362:	4638      	mov	r0, r7
   2b364:	f7fc f96a 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2b368:	b105      	cbz	r5, 2b36c <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x72>
   2b36a:	686d      	ldr	r5, [r5, #4]
      GetTensorData<int32>(bias), GetTensorShape(output),
   2b36c:	f10d 0870 	add.w	r8, sp, #112	; 0x70
   2b370:	4649      	mov	r1, r9
   2b372:	4640      	mov	r0, r8
   2b374:	f7fc f962 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::ConvPerChannel(
   2b378:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2b37c:	465a      	mov	r2, fp
   2b37e:	e9cd 8305 	strd	r8, r3, [sp, #20]
   2b382:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2b384:	4651      	mov	r1, sl
   2b386:	9300      	str	r3, [sp, #0]
   2b388:	a822      	add	r0, sp, #136	; 0x88
   2b38a:	ab0a      	add	r3, sp, #40	; 0x28
   2b38c:	e9cd 7503 	strd	r7, r5, [sp, #12]
   2b390:	e9cd 6401 	strd	r6, r4, [sp, #4]
   2b394:	f7ff fe16 	bl	2afc4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
      GetTensorData<int32>(bias), GetTensorShape(output),
   2b398:	4640      	mov	r0, r8
   2b39a:	f7fc f90a 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(filter), GetTensorShape(bias),
   2b39e:	4638      	mov	r0, r7
   2b3a0:	f7fc f907 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(input), GetTensorShape(filter),
   2b3a4:	4630      	mov	r0, r6
   2b3a6:	f7fc f904 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
      data.per_channel_output_shift, GetTensorShape(input),
   2b3aa:	a80a      	add	r0, sp, #40	; 0x28
   2b3ac:	f7fc f901 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   2b3b0:	b031      	add	sp, #196	; 0xc4
   2b3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002b3b6 <_ZN6tflite3ops5micro14depthwise_conv4InitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   2b3b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   2b3b8:	b513      	push	{r0, r1, r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   2b3ba:	b90b      	cbnz	r3, 2b3c0 <_ZN6tflite3ops5micro14depthwise_conv4InitEP13TfLiteContextPKcj+0xa>
   2b3bc:	f005 fcfd 	bl	30dba <abort>
  void* data = nullptr;
   2b3c0:	2400      	movs	r4, #0
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
   2b3c2:	2128      	movs	r1, #40	; 0x28
  void* data = nullptr;
   2b3c4:	9401      	str	r4, [sp, #4]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
   2b3c6:	aa01      	add	r2, sp, #4
   2b3c8:	4798      	blx	r3
   2b3ca:	2801      	cmp	r0, #1
    return nullptr;
   2b3cc:	bf0c      	ite	eq
   2b3ce:	4620      	moveq	r0, r4
  return data;
   2b3d0:	9801      	ldrne	r0, [sp, #4]
}
   2b3d2:	b002      	add	sp, #8
   2b3d4:	bd10      	pop	{r4, pc}

0002b3d6 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const DepthwiseParams& params, const int32* output_multiplier,
    const int32* output_shift, const RuntimeShape& input_shape,
    const int8* input_data, const RuntimeShape& filter_shape,
    const int8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int8* output_data) {
   2b3d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b3da:	4699      	mov	r9, r3
  // Get parameters.
  // TODO(b/141565753): Re-introduce ScopedProfilingLabel on Micro.
  const int stride_width = params.stride_width;
   2b3dc:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    int8* output_data) {
   2b3e0:	b0a1      	sub	sp, #132	; 0x84
  const int stride_width = params.stride_width;
   2b3e2:	930e      	str	r3, [sp, #56]	; 0x38
  const int stride_height = params.stride_height;
   2b3e4:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    int8* output_data) {
   2b3e8:	e9cd 121e 	strd	r1, r2, [sp, #120]	; 0x78
  const int stride_height = params.stride_height;
   2b3ec:	930f      	str	r3, [sp, #60]	; 0x3c
  const int dilation_width_factor = params.dilation_width_factor;
   2b3ee:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
    int8* output_data) {
   2b3f2:	9e2b      	ldr	r6, [sp, #172]	; 0xac
  const int dilation_width_factor = params.dilation_width_factor;
   2b3f4:	9310      	str	r3, [sp, #64]	; 0x40
  const int dilation_height_factor = params.dilation_height_factor;
   2b3f6:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
    int8* output_data) {
   2b3fa:	9f2f      	ldr	r7, [sp, #188]	; 0xbc
  const int dilation_height_factor = params.dilation_height_factor;
   2b3fc:	9311      	str	r3, [sp, #68]	; 0x44
  const int pad_width = params.padding_values.width;
   2b3fe:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
   2b402:	9313      	str	r3, [sp, #76]	; 0x4c
  const int pad_height = params.padding_values.height;
   2b404:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   2b408:	9314      	str	r3, [sp, #80]	; 0x50
  const int depth_multiplier = params.depth_multiplier;
   2b40a:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
   2b40e:	9308      	str	r3, [sp, #32]
  const int32 input_offset = params.input_offset;
   2b410:	6943      	ldr	r3, [r0, #20]
   2b412:	9315      	str	r3, [sp, #84]	; 0x54
  const int32 output_offset = params.output_offset;
   2b414:	69c3      	ldr	r3, [r0, #28]
   2b416:	9316      	str	r3, [sp, #88]	; 0x58
  const int32 output_activation_min = params.quantized_activation_min;
   2b418:	6a83      	ldr	r3, [r0, #40]	; 0x28
   2b41a:	930b      	str	r3, [sp, #44]	; 0x2c
  const int32 output_activation_max = params.quantized_activation_max;
   2b41c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2b41e:	930c      	str	r3, [sp, #48]	; 0x30

  // Check dimensions of the tensors.
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   2b420:	f8d9 3000 	ldr.w	r3, [r9]
   2b424:	2b04      	cmp	r3, #4
   2b426:	d001      	beq.n	2b42c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x56>
   2b428:	f005 fcc7 	bl	30dba <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   2b42c:	6833      	ldr	r3, [r6, #0]
   2b42e:	2b04      	cmp	r3, #4
   2b430:	d1fa      	bne.n	2b428 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   2b432:	683b      	ldr	r3, [r7, #0]
   2b434:	2b04      	cmp	r3, #4
   2b436:	d1f7      	bne.n	2b428 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   2b438:	e9dd 320b 	ldrd	r3, r2, [sp, #44]	; 0x2c
   2b43c:	4293      	cmp	r3, r2
   2b43e:	dcf3      	bgt.n	2b428 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   2b440:	2300      	movs	r3, #0
   2b442:	463a      	mov	r2, r7
   2b444:	4619      	mov	r1, r3
   2b446:	4648      	mov	r0, r9
   2b448:	f7fe ff68 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   2b44c:	2303      	movs	r3, #3
   2b44e:	463a      	mov	r2, r7
   2b450:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   2b452:	9017      	str	r0, [sp, #92]	; 0x5c
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   2b454:	4630      	mov	r0, r6
   2b456:	f7fe ff61 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   2b45a:	2101      	movs	r1, #1
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   2b45c:	4604      	mov	r4, r0
  const int input_height = input_shape.Dims(1);
   2b45e:	4648      	mov	r0, r9
   2b460:	f7fc f8b2 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   2b464:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   2b466:	9018      	str	r0, [sp, #96]	; 0x60
  const int input_width = input_shape.Dims(2);
   2b468:	4648      	mov	r0, r9
   2b46a:	f7fc f8ad 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_depth = input_shape.Dims(3);
   2b46e:	2103      	movs	r1, #3
  const int input_width = input_shape.Dims(2);
   2b470:	9019      	str	r0, [sp, #100]	; 0x64
  const int input_depth = input_shape.Dims(3);
   2b472:	4648      	mov	r0, r9
   2b474:	f7fc f8a8 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
   2b478:	2101      	movs	r1, #1
  const int input_depth = input_shape.Dims(3);
   2b47a:	900d      	str	r0, [sp, #52]	; 0x34
  const int filter_height = filter_shape.Dims(1);
   2b47c:	4630      	mov	r0, r6
   2b47e:	f7fc f8a3 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
   2b482:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
   2b484:	901a      	str	r0, [sp, #104]	; 0x68
  const int filter_width = filter_shape.Dims(2);
   2b486:	4630      	mov	r0, r6
   2b488:	f7fc f89e 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   2b48c:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
   2b48e:	901b      	str	r0, [sp, #108]	; 0x6c
  const int output_height = output_shape.Dims(1);
   2b490:	4638      	mov	r0, r7
   2b492:	f7fc f899 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   2b496:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   2b498:	901c      	str	r0, [sp, #112]	; 0x70
  const int output_width = output_shape.Dims(2);
   2b49a:	4638      	mov	r0, r7
   2b49c:	f7fc f894 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   2b4a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2b4a2:	9a08      	ldr	r2, [sp, #32]
  const int output_width = output_shape.Dims(2);
   2b4a4:	901d      	str	r0, [sp, #116]	; 0x74
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   2b4a6:	fb03 f502 	mul.w	r5, r3, r2
   2b4aa:	42a5      	cmp	r5, r4
   2b4ac:	d1bc      	bne.n	2b428 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   2b4ae:	982d      	ldr	r0, [sp, #180]	; 0xb4
   2b4b0:	f7fc f90f 	bl	276d2 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   2b4b4:	42a8      	cmp	r0, r5
   2b4b6:	d1b7      	bne.n	2b428 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>

  for (int batch = 0; batch < batches; ++batch) {
   2b4b8:	f04f 0b00 	mov.w	fp, #0
   2b4bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2b4be:	459b      	cmp	fp, r3
   2b4c0:	f280 80a0 	bge.w	2b604 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x22e>
   2b4c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2b4c6:	425b      	negs	r3, r3
   2b4c8:	930a      	str	r3, [sp, #40]	; 0x28
    for (int out_y = 0; out_y < output_height; ++out_y) {
   2b4ca:	2300      	movs	r3, #0
   2b4cc:	9303      	str	r3, [sp, #12]
   2b4ce:	9b03      	ldr	r3, [sp, #12]
   2b4d0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   2b4d2:	4293      	cmp	r3, r2
   2b4d4:	f280 8093 	bge.w	2b5fe <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x228>
   2b4d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2b4da:	425b      	negs	r3, r3
   2b4dc:	9309      	str	r3, [sp, #36]	; 0x24
      for (int out_x = 0; out_x < output_width; ++out_x) {
   2b4de:	2300      	movs	r3, #0
   2b4e0:	9304      	str	r3, [sp, #16]
   2b4e2:	9b04      	ldr	r3, [sp, #16]
   2b4e4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   2b4e6:	4293      	cmp	r3, r2
   2b4e8:	f280 8081 	bge.w	2b5ee <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x218>
   2b4ec:	2300      	movs	r3, #0
   2b4ee:	9302      	str	r3, [sp, #8]
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   2b4f0:	9305      	str	r3, [sp, #20]
   2b4f2:	9b05      	ldr	r3, [sp, #20]
   2b4f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2b4f6:	4293      	cmp	r3, r2
   2b4f8:	da71      	bge.n	2b5de <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x208>
   2b4fa:	9c02      	ldr	r4, [sp, #8]
          for (int m = 0; m < depth_multiplier; ++m) {
   2b4fc:	9b02      	ldr	r3, [sp, #8]
   2b4fe:	9a08      	ldr	r2, [sp, #32]
   2b500:	1ae3      	subs	r3, r4, r3
   2b502:	4293      	cmp	r3, r2
   2b504:	da63      	bge.n	2b5ce <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f8>
            const int output_channel = m + in_channel * depth_multiplier;
            const int in_x_origin = (out_x * stride_width) - pad_width;
            const int in_y_origin = (out_y * stride_height) - pad_height;
            int32 acc = 0;
   2b506:	2500      	movs	r5, #0
            const int output_channel = m + in_channel * depth_multiplier;
   2b508:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   2b50c:	9506      	str	r5, [sp, #24]
   2b50e:	9b06      	ldr	r3, [sp, #24]
   2b510:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   2b512:	4293      	cmp	r3, r2
   2b514:	da38      	bge.n	2b588 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b2>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   2b516:	2300      	movs	r3, #0
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
                const int in_y =
   2b518:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   2b51c:	9307      	str	r3, [sp, #28]
   2b51e:	9b07      	ldr	r3, [sp, #28]
   2b520:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   2b522:	4293      	cmp	r3, r2
   2b524:	da2a      	bge.n	2b57c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1a6>
                    in_y_origin + dilation_height_factor * filter_y;
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   2b526:	f1b8 0f00 	cmp.w	r8, #0
   2b52a:	db21      	blt.n	2b570 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
   2b52c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2b52e:	4543      	cmp	r3, r8
   2b530:	dd1e      	ble.n	2b570 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
   2b532:	f1ba 0f00 	cmp.w	sl, #0
   2b536:	db1b      	blt.n	2b570 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
   2b538:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2b53a:	4553      	cmp	r3, sl
   2b53c:	dd18      	ble.n	2b570 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
                    (in_y < input_height);
                if (is_point_inside_image) {
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
   2b53e:	9b05      	ldr	r3, [sp, #20]
   2b540:	4652      	mov	r2, sl
   2b542:	4659      	mov	r1, fp
   2b544:	9300      	str	r3, [sp, #0]
   2b546:	4648      	mov	r0, r9
   2b548:	4643      	mov	r3, r8
   2b54a:	f7fc f8ff 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
                  int32 filter_val = filter_data[Offset(
   2b54e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
   2b552:	9012      	str	r0, [sp, #72]	; 0x48
                  int32 filter_val = filter_data[Offset(
   2b554:	2100      	movs	r1, #0
   2b556:	4630      	mov	r0, r6
   2b558:	9400      	str	r4, [sp, #0]
   2b55a:	f7fc f8f7 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
   2b55e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2b560:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   2b562:	569b      	ldrsb	r3, [r3, r2]
                  // long as the filter size (filter_y * filter_x * in_channel)
                  // does not exceed 2^16, which is the case in all the models
                  // we have seen so far.
                  // TODO(jianlijianli): Add a check to make sure the
                  // accumulator depth is smaller than 2^16.
                  acc += filter_val * (input_val + input_offset);
   2b564:	9a15      	ldr	r2, [sp, #84]	; 0x54
   2b566:	4413      	add	r3, r2
                      filter_shape, 0, filter_y, filter_x, output_channel)];
   2b568:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   2b56a:	5612      	ldrsb	r2, [r2, r0]
                  acc += filter_val * (input_val + input_offset);
   2b56c:	fb02 5503 	mla	r5, r2, r3, r5
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   2b570:	9b07      	ldr	r3, [sp, #28]
   2b572:	3301      	adds	r3, #1
   2b574:	9307      	str	r3, [sp, #28]
   2b576:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2b578:	4498      	add	r8, r3
   2b57a:	e7d0      	b.n	2b51e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x148>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   2b57c:	9b06      	ldr	r3, [sp, #24]
   2b57e:	3301      	adds	r3, #1
   2b580:	9306      	str	r3, [sp, #24]
   2b582:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2b584:	449a      	add	sl, r3
   2b586:	e7c2      	b.n	2b50e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x138>
                }
              }
            }
            if (bias_data) {
   2b588:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   2b58a:	b113      	cbz	r3, 2b592 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1bc>
              acc += bias_data[output_channel];
   2b58c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   2b590:	441d      	add	r5, r3
            }
            acc = MultiplyByQuantizedMultiplier(
   2b592:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2b594:	4628      	mov	r0, r5
   2b596:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   2b59a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   2b59c:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   2b5a0:	f7ed feb6 	bl	19310 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
                acc, output_multiplier[output_channel],
                output_shift[output_channel]);
            acc += output_offset;
   2b5a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
            acc = std::max(acc, output_activation_min);
            acc = std::min(acc, output_activation_max);
            output_data[Offset(output_shape, batch, out_y, out_x,
   2b5a6:	9400      	str	r4, [sp, #0]
            acc += output_offset;
   2b5a8:	18c5      	adds	r5, r0, r3
   2b5aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            output_data[Offset(output_shape, batch, out_y, out_x,
   2b5ac:	4659      	mov	r1, fp
   2b5ae:	429d      	cmp	r5, r3
   2b5b0:	bfb8      	it	lt
   2b5b2:	461d      	movlt	r5, r3
   2b5b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2b5b6:	4638      	mov	r0, r7
   2b5b8:	429d      	cmp	r5, r3
   2b5ba:	bfa8      	it	ge
   2b5bc:	461d      	movge	r5, r3
   2b5be:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   2b5c2:	f7fc f8c3 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                               output_channel)] = static_cast<int8_t>(acc);
   2b5c6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   2b5c8:	3401      	adds	r4, #1
   2b5ca:	541d      	strb	r5, [r3, r0]
          for (int m = 0; m < depth_multiplier; ++m) {
   2b5cc:	e796      	b.n	2b4fc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x126>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   2b5ce:	9b05      	ldr	r3, [sp, #20]
   2b5d0:	9a08      	ldr	r2, [sp, #32]
   2b5d2:	3301      	adds	r3, #1
   2b5d4:	9305      	str	r3, [sp, #20]
   2b5d6:	9b02      	ldr	r3, [sp, #8]
   2b5d8:	4413      	add	r3, r2
   2b5da:	9302      	str	r3, [sp, #8]
   2b5dc:	e789      	b.n	2b4f2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x11c>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   2b5de:	9b04      	ldr	r3, [sp, #16]
   2b5e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2b5e2:	3301      	adds	r3, #1
   2b5e4:	9304      	str	r3, [sp, #16]
   2b5e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2b5e8:	4413      	add	r3, r2
   2b5ea:	9309      	str	r3, [sp, #36]	; 0x24
   2b5ec:	e779      	b.n	2b4e2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x10c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   2b5ee:	9b03      	ldr	r3, [sp, #12]
   2b5f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2b5f2:	3301      	adds	r3, #1
   2b5f4:	9303      	str	r3, [sp, #12]
   2b5f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b5f8:	4413      	add	r3, r2
   2b5fa:	930a      	str	r3, [sp, #40]	; 0x28
   2b5fc:	e767      	b.n	2b4ce <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xf8>
  for (int batch = 0; batch < batches; ++batch) {
   2b5fe:	f10b 0b01 	add.w	fp, fp, #1
   2b602:	e75b      	b.n	2b4bc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe6>
          }
        }
      }
    }
  }
}
   2b604:	b021      	add	sp, #132	; 0x84
   2b606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002b60a <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph>:
  static inline void Run(const DepthwiseParams& params,
   2b60a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b60e:	ed2d 8b02 	vpush	{d8}
   2b612:	469a      	mov	sl, r3
    const int stride_width = params.stride_width;
   2b614:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
  static inline void Run(const DepthwiseParams& params,
   2b618:	b0a1      	sub	sp, #132	; 0x84
    const int stride_width = params.stride_width;
   2b61a:	930e      	str	r3, [sp, #56]	; 0x38
    const int stride_height = params.stride_height;
   2b61c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  static inline void Run(const DepthwiseParams& params,
   2b620:	4689      	mov	r9, r1
    const int stride_height = params.stride_height;
   2b622:	930f      	str	r3, [sp, #60]	; 0x3c
    const int dilation_width_factor = params.dilation_width_factor;
   2b624:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
  static inline void Run(const DepthwiseParams& params,
   2b628:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
    const int dilation_width_factor = params.dilation_width_factor;
   2b62a:	9310      	str	r3, [sp, #64]	; 0x40
    const int dilation_height_factor = params.dilation_height_factor;
   2b62c:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
  static inline void Run(const DepthwiseParams& params,
   2b630:	921f      	str	r2, [sp, #124]	; 0x7c
    const int dilation_height_factor = params.dilation_height_factor;
   2b632:	9311      	str	r3, [sp, #68]	; 0x44
    const int pad_width = params.padding_values.width;
   2b634:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
   2b638:	9313      	str	r3, [sp, #76]	; 0x4c
    const int pad_height = params.padding_values.height;
   2b63a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   2b63e:	9314      	str	r3, [sp, #80]	; 0x50
    const int depth_multiplier = params.depth_multiplier;
   2b640:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
   2b644:	9308      	str	r3, [sp, #32]
    const int32 output_activation_min = params.quantized_activation_min;
   2b646:	6a83      	ldr	r3, [r0, #40]	; 0x28
   2b648:	930b      	str	r3, [sp, #44]	; 0x2c
    const int32 output_activation_max = params.quantized_activation_max;
   2b64a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2b64c:	930c      	str	r3, [sp, #48]	; 0x30
    const int32 input_offset = params.input_offset;
   2b64e:	6943      	ldr	r3, [r0, #20]
   2b650:	9315      	str	r3, [sp, #84]	; 0x54
    const int32 filter_offset = params.weights_offset;
   2b652:	6983      	ldr	r3, [r0, #24]
   2b654:	9316      	str	r3, [sp, #88]	; 0x58
    const int32 output_offset = params.output_offset;
   2b656:	69c3      	ldr	r3, [r0, #28]
   2b658:	9317      	str	r3, [sp, #92]	; 0x5c
    const int32 output_multiplier = params.output_multiplier;
   2b65a:	6a03      	ldr	r3, [r0, #32]
   2b65c:	ee08 3a10 	vmov	s16, r3
    const int output_shift = params.output_shift;
   2b660:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2b662:	ee08 3a90 	vmov	s17, r3
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   2b666:	680b      	ldr	r3, [r1, #0]
   2b668:	2b04      	cmp	r3, #4
   2b66a:	d001      	beq.n	2b670 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x66>
   2b66c:	f005 fba5 	bl	30dba <abort>
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   2b670:	f8da 3000 	ldr.w	r3, [sl]
   2b674:	2b04      	cmp	r3, #4
   2b676:	d1f9      	bne.n	2b66c <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x62>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   2b678:	6833      	ldr	r3, [r6, #0]
   2b67a:	2b04      	cmp	r3, #4
   2b67c:	d1f6      	bne.n	2b66c <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x62>
    TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   2b67e:	e9dd 320b 	ldrd	r3, r2, [sp, #44]	; 0x2c
   2b682:	4293      	cmp	r3, r2
   2b684:	dcf2      	bgt.n	2b66c <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x62>
    const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   2b686:	2300      	movs	r3, #0
   2b688:	4632      	mov	r2, r6
   2b68a:	4619      	mov	r1, r3
   2b68c:	4648      	mov	r0, r9
   2b68e:	f7fe fe45 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   2b692:	2303      	movs	r3, #3
   2b694:	4632      	mov	r2, r6
   2b696:	4619      	mov	r1, r3
    const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   2b698:	9018      	str	r0, [sp, #96]	; 0x60
    const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   2b69a:	4650      	mov	r0, sl
   2b69c:	f7fe fe3e 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    const int input_height = input_shape.Dims(1);
   2b6a0:	2101      	movs	r1, #1
    const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   2b6a2:	4604      	mov	r4, r0
    const int input_height = input_shape.Dims(1);
   2b6a4:	4648      	mov	r0, r9
   2b6a6:	f7fb ff8f 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int input_width = input_shape.Dims(2);
   2b6aa:	2102      	movs	r1, #2
    const int input_height = input_shape.Dims(1);
   2b6ac:	9019      	str	r0, [sp, #100]	; 0x64
    const int input_width = input_shape.Dims(2);
   2b6ae:	4648      	mov	r0, r9
   2b6b0:	f7fb ff8a 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int input_depth = input_shape.Dims(3);
   2b6b4:	2103      	movs	r1, #3
    const int input_width = input_shape.Dims(2);
   2b6b6:	901a      	str	r0, [sp, #104]	; 0x68
    const int input_depth = input_shape.Dims(3);
   2b6b8:	4648      	mov	r0, r9
   2b6ba:	f7fb ff85 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int filter_height = filter_shape.Dims(1);
   2b6be:	2101      	movs	r1, #1
    const int input_depth = input_shape.Dims(3);
   2b6c0:	900d      	str	r0, [sp, #52]	; 0x34
    const int filter_height = filter_shape.Dims(1);
   2b6c2:	4650      	mov	r0, sl
   2b6c4:	f7fb ff80 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int filter_width = filter_shape.Dims(2);
   2b6c8:	2102      	movs	r1, #2
    const int filter_height = filter_shape.Dims(1);
   2b6ca:	901b      	str	r0, [sp, #108]	; 0x6c
    const int filter_width = filter_shape.Dims(2);
   2b6cc:	4650      	mov	r0, sl
   2b6ce:	f7fb ff7b 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int output_height = output_shape.Dims(1);
   2b6d2:	2101      	movs	r1, #1
    const int filter_width = filter_shape.Dims(2);
   2b6d4:	901c      	str	r0, [sp, #112]	; 0x70
    const int output_height = output_shape.Dims(1);
   2b6d6:	4630      	mov	r0, r6
   2b6d8:	f7fb ff76 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int output_width = output_shape.Dims(2);
   2b6dc:	2102      	movs	r1, #2
    const int output_height = output_shape.Dims(1);
   2b6de:	901d      	str	r0, [sp, #116]	; 0x74
    const int output_width = output_shape.Dims(2);
   2b6e0:	4630      	mov	r0, r6
   2b6e2:	f7fb ff71 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
    TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   2b6e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2b6e8:	9a08      	ldr	r2, [sp, #32]
    const int output_width = output_shape.Dims(2);
   2b6ea:	901e      	str	r0, [sp, #120]	; 0x78
    TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   2b6ec:	fb03 f502 	mul.w	r5, r3, r2
   2b6f0:	42a5      	cmp	r5, r4
   2b6f2:	d1bb      	bne.n	2b66c <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x62>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   2b6f4:	982d      	ldr	r0, [sp, #180]	; 0xb4
   2b6f6:	f7fb ffec 	bl	276d2 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   2b6fa:	42a8      	cmp	r0, r5
   2b6fc:	d1b6      	bne.n	2b66c <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x62>
    for (int b = 0; b < batches; ++b) {
   2b6fe:	f04f 0b00 	mov.w	fp, #0
   2b702:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2b704:	459b      	cmp	fp, r3
   2b706:	f280 809d 	bge.w	2b844 <_flash_used+0x18>
   2b70a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2b70c:	425b      	negs	r3, r3
   2b70e:	930a      	str	r3, [sp, #40]	; 0x28
      for (int out_y = 0; out_y < output_height; ++out_y) {
   2b710:	2300      	movs	r3, #0
   2b712:	9303      	str	r3, [sp, #12]
   2b714:	9b03      	ldr	r3, [sp, #12]
   2b716:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   2b718:	4293      	cmp	r3, r2
   2b71a:	f280 8090 	bge.w	2b83e <_flash_used+0x12>
   2b71e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2b720:	425b      	negs	r3, r3
   2b722:	9309      	str	r3, [sp, #36]	; 0x24
        for (int out_x = 0; out_x < output_width; ++out_x) {
   2b724:	2300      	movs	r3, #0
   2b726:	9304      	str	r3, [sp, #16]
   2b728:	9b04      	ldr	r3, [sp, #16]
   2b72a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   2b72c:	4293      	cmp	r3, r2
   2b72e:	da7e      	bge.n	2b82e <_flash_used+0x2>
   2b730:	2300      	movs	r3, #0
   2b732:	9302      	str	r3, [sp, #8]
          for (int ic = 0; ic < input_depth; ++ic) {
   2b734:	9305      	str	r3, [sp, #20]
   2b736:	9b05      	ldr	r3, [sp, #20]
   2b738:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2b73a:	4293      	cmp	r3, r2
   2b73c:	da6f      	bge.n	2b81e <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x214>
   2b73e:	9c02      	ldr	r4, [sp, #8]
            for (int m = 0; m < depth_multiplier; m++) {
   2b740:	9b02      	ldr	r3, [sp, #8]
   2b742:	9a08      	ldr	r2, [sp, #32]
   2b744:	1ae3      	subs	r3, r4, r3
   2b746:	429a      	cmp	r2, r3
   2b748:	dd61      	ble.n	2b80e <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x204>
              int32 acc = 0;
   2b74a:	2500      	movs	r5, #0
              const int oc = m + ic * depth_multiplier;
   2b74c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
              for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   2b74e:	9506      	str	r5, [sp, #24]
   2b750:	9b06      	ldr	r3, [sp, #24]
   2b752:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   2b754:	4293      	cmp	r3, r2
   2b756:	da39      	bge.n	2b7cc <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x1c2>
                for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   2b758:	2300      	movs	r3, #0
                  const int in_y =
   2b75a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
                for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   2b75e:	9307      	str	r3, [sp, #28]
   2b760:	9b07      	ldr	r3, [sp, #28]
   2b762:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   2b764:	4293      	cmp	r3, r2
   2b766:	da2b      	bge.n	2b7c0 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x1b6>
                  if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   2b768:	f1b8 0f00 	cmp.w	r8, #0
   2b76c:	db22      	blt.n	2b7b4 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x1aa>
   2b76e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   2b770:	4543      	cmp	r3, r8
   2b772:	dd1f      	ble.n	2b7b4 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x1aa>
   2b774:	2f00      	cmp	r7, #0
   2b776:	db1d      	blt.n	2b7b4 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x1aa>
   2b778:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2b77a:	42bb      	cmp	r3, r7
   2b77c:	dd1a      	ble.n	2b7b4 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x1aa>
                        input_data[Offset(input_shape, b, in_y, in_x, ic)];
   2b77e:	9b05      	ldr	r3, [sp, #20]
   2b780:	463a      	mov	r2, r7
   2b782:	4659      	mov	r1, fp
   2b784:	9300      	str	r3, [sp, #0]
   2b786:	4648      	mov	r0, r9
   2b788:	4643      	mov	r3, r8
   2b78a:	f7fb ffdf 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                    int32 filter_val = filter_data[Offset(
   2b78e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   2b792:	2100      	movs	r1, #0
                        input_data[Offset(input_shape, b, in_y, in_x, ic)];
   2b794:	9012      	str	r0, [sp, #72]	; 0x48
                    int32 filter_val = filter_data[Offset(
   2b796:	9400      	str	r4, [sp, #0]
   2b798:	4650      	mov	r0, sl
   2b79a:	f7fb ffd7 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   2b79e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
                    acc += (filter_val + filter_offset) *
   2b7a0:	9a16      	ldr	r2, [sp, #88]	; 0x58
                    int32 filter_val = filter_data[Offset(
   2b7a2:	5c1b      	ldrb	r3, [r3, r0]
                    int32 input_val =
   2b7a4:	9912      	ldr	r1, [sp, #72]	; 0x48
                    acc += (filter_val + filter_offset) *
   2b7a6:	4413      	add	r3, r2
                    int32 input_val =
   2b7a8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   2b7aa:	5c52      	ldrb	r2, [r2, r1]
                           (input_val + input_offset);
   2b7ac:	9915      	ldr	r1, [sp, #84]	; 0x54
   2b7ae:	440a      	add	r2, r1
                    acc += (filter_val + filter_offset) *
   2b7b0:	fb02 5503 	mla	r5, r2, r3, r5
                for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   2b7b4:	9b07      	ldr	r3, [sp, #28]
   2b7b6:	3301      	adds	r3, #1
   2b7b8:	9307      	str	r3, [sp, #28]
   2b7ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2b7bc:	4498      	add	r8, r3
   2b7be:	e7cf      	b.n	2b760 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x156>
              for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   2b7c0:	9b06      	ldr	r3, [sp, #24]
   2b7c2:	3301      	adds	r3, #1
   2b7c4:	9306      	str	r3, [sp, #24]
   2b7c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2b7c8:	441f      	add	r7, r3
   2b7ca:	e7c1      	b.n	2b750 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x146>
              if (bias_data) {
   2b7cc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   2b7ce:	b113      	cbz	r3, 2b7d6 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x1cc>
                acc += bias_data[oc];
   2b7d0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   2b7d4:	441d      	add	r5, r3
  return MultiplyByQuantizedMultiplier(x, quantized_multiplier, shift);
   2b7d6:	ee18 2a90 	vmov	r2, s17
   2b7da:	ee18 1a10 	vmov	r1, s16
   2b7de:	4628      	mov	r0, r5
   2b7e0:	f7ed fd96 	bl	19310 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
              acc += output_offset;
   2b7e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
              output_data[Offset(output_shape, b, out_y, out_x, oc)] =
   2b7e6:	9400      	str	r4, [sp, #0]
              acc += output_offset;
   2b7e8:	181d      	adds	r5, r3, r0
   2b7ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
              output_data[Offset(output_shape, b, out_y, out_x, oc)] =
   2b7ec:	4659      	mov	r1, fp
   2b7ee:	429d      	cmp	r5, r3
   2b7f0:	bfb8      	it	lt
   2b7f2:	461d      	movlt	r5, r3
   2b7f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2b7f6:	4630      	mov	r0, r6
   2b7f8:	429d      	cmp	r5, r3
   2b7fa:	bfa8      	it	ge
   2b7fc:	461d      	movge	r5, r3
   2b7fe:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   2b802:	f7fb ffa3 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   2b806:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   2b808:	3401      	adds	r4, #1
   2b80a:	541d      	strb	r5, [r3, r0]
            for (int m = 0; m < depth_multiplier; m++) {
   2b80c:	e798      	b.n	2b740 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x136>
          for (int ic = 0; ic < input_depth; ++ic) {
   2b80e:	9b05      	ldr	r3, [sp, #20]
   2b810:	9a08      	ldr	r2, [sp, #32]
   2b812:	3301      	adds	r3, #1
   2b814:	9305      	str	r3, [sp, #20]
   2b816:	9b02      	ldr	r3, [sp, #8]
   2b818:	4413      	add	r3, r2
   2b81a:	9302      	str	r3, [sp, #8]
   2b81c:	e78b      	b.n	2b736 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x12c>
        for (int out_x = 0; out_x < output_width; ++out_x) {
   2b81e:	9b04      	ldr	r3, [sp, #16]
   2b820:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2b822:	3301      	adds	r3, #1
   2b824:	9304      	str	r3, [sp, #16]
   2b826:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2b828:	4413      	add	r3, r2
   2b82a:	9309      	str	r3, [sp, #36]	; 0x24
   2b82c:	e77c      	b.n	2b728 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x11e>
      for (int out_y = 0; out_y < output_height; ++out_y) {
   2b82e:	9b03      	ldr	r3, [sp, #12]
   2b830:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2b832:	3301      	adds	r3, #1
   2b834:	9303      	str	r3, [sp, #12]
   2b836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b838:	4413      	add	r3, r2
   2b83a:	930a      	str	r3, [sp, #40]	; 0x28
   2b83c:	e76a      	b.n	2b714 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x10a>
    for (int b = 0; b < batches; ++b) {
   2b83e:	f10b 0b01 	add.w	fp, fp, #1
   2b842:	e75e      	b.n	2b702 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0xf8>
  }
   2b844:	b021      	add	sp, #132	; 0x84
   2b846:	ecbd 8b02 	vpop	{d8}
   2b84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002b84e <_ZN6tflite3ops5micro10dequantize4InitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   2b84e:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   2b850:	b513      	push	{r0, r1, r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   2b852:	b90b      	cbnz	r3, 2b858 <_ZN6tflite3ops5micro10dequantize4InitEP13TfLiteContextPKcj+0xa>
   2b854:	f005 fab1 	bl	30dba <abort>
  void* data = nullptr;
   2b858:	2400      	movs	r4, #0
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
   2b85a:	2108      	movs	r1, #8
  void* data = nullptr;
   2b85c:	9401      	str	r4, [sp, #4]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
   2b85e:	aa01      	add	r2, sp, #4
   2b860:	4798      	blx	r3
   2b862:	2801      	cmp	r0, #1
    return nullptr;
   2b864:	bf0c      	ite	eq
   2b866:	4620      	moveq	r0, r4
  return data;
   2b868:	9801      	ldrne	r0, [sp, #4]
}
   2b86a:	b002      	add	sp, #8
   2b86c:	bd10      	pop	{r4, pc}

0002b86e <_ZSt3absf>:

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
   2b86e:	ee07 0a90 	vmov	s15, r0
   2b872:	eef0 7ae7 	vabs.f32	s15, s15
   2b876:	ee17 0a90 	vmov	r0, s15
   2b87a:	4770      	bx	lr

0002b87c <_ZZN6tflite3ops5micro11elementwise12_GLOBAL__N_110SquareEvalEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
  return EvalNumeric(context, node, [](float f) { return f * f; });
   2b87c:	ee07 0a90 	vmov	s15, r0
   2b880:	ee67 7aa7 	vmul.f32	s15, s15, s15
   2b884:	ee17 0a90 	vmov	r0, s15
   2b888:	4770      	bx	lr

0002b88a <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsLogicalSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode>:
   2b88a:	f7ee be5d 	b.w	1a548 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode>

0002b88e <_ZSt3sinf>:
  { return __builtin_sinf(__x); }
   2b88e:	f7f7 ba13 	b.w	22cb8 <sinf>

0002b892 <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
   2b892:	f7f7 b9b1 	b.w	22bf8 <cosf>

0002b896 <_ZSt3logf>:
  { return __builtin_logf(__x); }
   2b896:	f7f7 bbd1 	b.w	2303c <logf>

0002b89a <_ZSt4sqrtf>:
  { return __builtin_sqrtf(__x); }
   2b89a:	f7f7 bc6f 	b.w	2317c <sqrtf>

0002b89e <_ZZN6tflite3ops5micro11elementwise12_GLOBAL__N_19RsqrtEvalEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
  return EvalNumeric(context, node, [](float f) { return 1.f / std::sqrt(f); });
   2b89e:	b508      	push	{r3, lr}
   2b8a0:	f7f7 fc6c 	bl	2317c <sqrtf>
   2b8a4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   2b8a8:	ee07 0a10 	vmov	s14, r0
   2b8ac:	eec7 7a87 	vdiv.f32	s15, s15, s14
   2b8b0:	ee17 0a90 	vmov	r0, s15
   2b8b4:	bd08      	pop	{r3, pc}

0002b8b6 <_ZN6tflite3ops5micro6custom15Register_ETHOSUEv>:
TfLiteRegistration* Register_ETHOSU() { return nullptr; }
   2b8b6:	2000      	movs	r0, #0
   2b8b8:	4770      	bx	lr

0002b8ba <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   2b8ba:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   2b8bc:	b513      	push	{r0, r1, r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   2b8be:	b90b      	cbnz	r3, 2b8c4 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0xa>
   2b8c0:	f005 fa7b 	bl	30dba <abort>
  void* data = nullptr;
   2b8c4:	2400      	movs	r4, #0
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
   2b8c6:	2114      	movs	r1, #20
  void* data = nullptr;
   2b8c8:	9401      	str	r4, [sp, #4]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
   2b8ca:	aa01      	add	r2, sp, #4
   2b8cc:	4798      	blx	r3
   2b8ce:	2801      	cmp	r0, #1
    return nullptr;
   2b8d0:	bf0c      	ite	eq
   2b8d2:	4620      	moveq	r0, r4
  return data;
   2b8d4:	9801      	ldrne	r0, [sp, #4]
}
   2b8d6:	b002      	add	sp, #8
   2b8d8:	bd10      	pop	{r4, pc}

0002b8da <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   2b8da:	2900      	cmp	r1, #0
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
   2b8dc:	b538      	push	{r3, r4, r5, lr}
  const int dims_count = shape.DimensionsCount();
   2b8de:	6804      	ldr	r4, [r0, #0]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   2b8e0:	db01      	blt.n	2b8e6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0xc>
   2b8e2:	42a1      	cmp	r1, r4
   2b8e4:	db01      	blt.n	2b8ea <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x10>
   2b8e6:	f005 fa68 	bl	30dba <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   2b8ea:	2c05      	cmp	r4, #5
   2b8ec:	bfcc      	ite	gt
   2b8ee:	6843      	ldrgt	r3, [r0, #4]
   2b8f0:	1d03      	addle	r3, r0, #4
  for (int i = 0; i < dims_count; ++i) {
   2b8f2:	2200      	movs	r2, #0
  int flat_size = 1;
   2b8f4:	2001      	movs	r0, #1
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   2b8f6:	4291      	cmp	r1, r2
   2b8f8:	bf0c      	ite	eq
   2b8fa:	2501      	moveq	r5, #1
   2b8fc:	f853 5022 	ldrne.w	r5, [r3, r2, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
   2b900:	3201      	adds	r2, #1
   2b902:	42a2      	cmp	r2, r4
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   2b904:	fb05 f000 	mul.w	r0, r5, r0
  for (int i = 0; i < dims_count; ++i) {
   2b908:	dbf5      	blt.n	2b8f6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x1c>
}
   2b90a:	bd38      	pop	{r3, r4, r5, pc}

0002b90c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph>:
    uint8* output_data) {
   2b90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b910:	ed2d 8b02 	vpush	{d8}
   2b914:	461d      	mov	r5, r3
  const int32 input_offset = params.input_offset;
   2b916:	6803      	ldr	r3, [r0, #0]
    uint8* output_data) {
   2b918:	b089      	sub	sp, #36	; 0x24
  const int32 input_offset = params.input_offset;
   2b91a:	9303      	str	r3, [sp, #12]
  const int32 filter_offset = params.weights_offset;
   2b91c:	6843      	ldr	r3, [r0, #4]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
   2b91e:	682e      	ldr	r6, [r5, #0]
  const int32 filter_offset = params.weights_offset;
   2b920:	9304      	str	r3, [sp, #16]
  const int32 output_offset = params.output_offset;
   2b922:	6883      	ldr	r3, [r0, #8]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
   2b924:	2e01      	cmp	r6, #1
  const int32 output_offset = params.output_offset;
   2b926:	9305      	str	r3, [sp, #20]
  const int32 output_multiplier = params.output_multiplier;
   2b928:	68c3      	ldr	r3, [r0, #12]
    uint8* output_data) {
   2b92a:	4614      	mov	r4, r2
  const int32 output_multiplier = params.output_multiplier;
   2b92c:	ee08 3a10 	vmov	s16, r3
  const int output_shift = params.output_shift;
   2b930:	6903      	ldr	r3, [r0, #16]
    uint8* output_data) {
   2b932:	9f17      	ldr	r7, [sp, #92]	; 0x5c
  const int output_shift = params.output_shift;
   2b934:	ee08 3a90 	vmov	s17, r3
  const int32 output_activation_min = params.quantized_activation_min;
   2b938:	6943      	ldr	r3, [r0, #20]
   2b93a:	9300      	str	r3, [sp, #0]
  const int32 output_activation_max = params.quantized_activation_max;
   2b93c:	6983      	ldr	r3, [r0, #24]
   2b93e:	9301      	str	r3, [sp, #4]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
   2b940:	dc01      	bgt.n	2b946 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x3a>
   2b942:	f005 fa3a 	bl	30dba <abort>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
   2b946:	683b      	ldr	r3, [r7, #0]
   2b948:	2b00      	cmp	r3, #0
   2b94a:	ddfa      	ble.n	2b942 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x36>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   2b94c:	e9dd 2100 	ldrd	r2, r1, [sp]
   2b950:	428a      	cmp	r2, r1
   2b952:	dcf6      	bgt.n	2b942 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x36>
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
   2b954:	3b01      	subs	r3, #1
   2b956:	4619      	mov	r1, r3
   2b958:	4638      	mov	r0, r7
   2b95a:	9302      	str	r3, [sp, #8]
   2b95c:	f7ff ffbd 	bl	2b8da <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
   2b960:	463a      	mov	r2, r7
   2b962:	1eb1      	subs	r1, r6, #2
   2b964:	9b02      	ldr	r3, [sp, #8]
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
   2b966:	9006      	str	r0, [sp, #24]
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
   2b968:	4628      	mov	r0, r5
   2b96a:	f7fe fcd7 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
   2b96e:	1e71      	subs	r1, r6, #1
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
   2b970:	4607      	mov	r7, r0
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
   2b972:	4628      	mov	r0, r5
   2b974:	f7fb fe28 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2b978:	2600      	movs	r6, #0
   2b97a:	4605      	mov	r5, r0
  for (int b = 0; b < batches; ++b) {
   2b97c:	46b2      	mov	sl, r6
   2b97e:	9b06      	ldr	r3, [sp, #24]
   2b980:	459a      	cmp	sl, r3
   2b982:	da41      	bge.n	2ba08 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0xfc>
   2b984:	f04f 0800 	mov.w	r8, #0
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   2b988:	46c1      	mov	r9, r8
   2b98a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2b98c:	eb03 0b06 	add.w	fp, r3, r6
   2b990:	45b9      	cmp	r9, r7
   2b992:	da34      	bge.n	2b9fe <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0xf2>
      for (int d = 0; d < accum_depth; ++d) {
   2b994:	9b14      	ldr	r3, [sp, #80]	; 0x50
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   2b996:	46a6      	mov	lr, r4
   2b998:	eb03 0c08 	add.w	ip, r3, r8
      int32 acc = 0;
   2b99c:	2300      	movs	r3, #0
      for (int d = 0; d < accum_depth; ++d) {
   2b99e:	461a      	mov	r2, r3
   2b9a0:	42aa      	cmp	r2, r5
   2b9a2:	da10      	bge.n	2b9c6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0xba>
        int32 input_val = input_data[b * accum_depth + d];
   2b9a4:	f81e 1b01 	ldrb.w	r1, [lr], #1
        acc += (filter_val + filter_offset) * (input_val + input_offset);
   2b9a8:	9804      	ldr	r0, [sp, #16]
        int32 input_val = input_data[b * accum_depth + d];
   2b9aa:	9102      	str	r1, [sp, #8]
        int32 filter_val = filter_data[out_c * accum_depth + d];
   2b9ac:	f81c 1b01 	ldrb.w	r1, [ip], #1
      for (int d = 0; d < accum_depth; ++d) {
   2b9b0:	3201      	adds	r2, #1
        acc += (filter_val + filter_offset) * (input_val + input_offset);
   2b9b2:	4401      	add	r1, r0
   2b9b4:	9107      	str	r1, [sp, #28]
   2b9b6:	e9dd 1002 	ldrd	r1, r0, [sp, #8]
   2b9ba:	4401      	add	r1, r0
   2b9bc:	4608      	mov	r0, r1
   2b9be:	9907      	ldr	r1, [sp, #28]
   2b9c0:	fb00 3301 	mla	r3, r0, r1, r3
      for (int d = 0; d < accum_depth; ++d) {
   2b9c4:	e7ec      	b.n	2b9a0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x94>
      if (bias_data) {
   2b9c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2b9c8:	b112      	cbz	r2, 2b9d0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0xc4>
        acc += bias_data[out_c];
   2b9ca:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
   2b9ce:	4413      	add	r3, r2
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
   2b9d0:	4618      	mov	r0, r3
   2b9d2:	ee18 2a90 	vmov	r2, s17
   2b9d6:	ee18 1a10 	vmov	r1, s16
   2b9da:	f7ed fc99 	bl	19310 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
      acc += output_offset;
   2b9de:	9b05      	ldr	r3, [sp, #20]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   2b9e0:	f109 0901 	add.w	r9, r9, #1
      acc += output_offset;
   2b9e4:	4418      	add	r0, r3
      output_data[out_c + output_depth * b] = static_cast<uint8>(acc);
   2b9e6:	9b00      	ldr	r3, [sp, #0]
   2b9e8:	44a8      	add	r8, r5
   2b9ea:	4298      	cmp	r0, r3
   2b9ec:	bfb8      	it	lt
   2b9ee:	4618      	movlt	r0, r3
   2b9f0:	9b01      	ldr	r3, [sp, #4]
   2b9f2:	4298      	cmp	r0, r3
   2b9f4:	bfa8      	it	ge
   2b9f6:	4618      	movge	r0, r3
   2b9f8:	f80b 0b01 	strb.w	r0, [fp], #1
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   2b9fc:	e7c8      	b.n	2b990 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x84>
  for (int b = 0; b < batches; ++b) {
   2b9fe:	f10a 0a01 	add.w	sl, sl, #1
   2ba02:	443e      	add	r6, r7
   2ba04:	442c      	add	r4, r5
   2ba06:	e7ba      	b.n	2b97e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x72>
}
   2ba08:	b009      	add	sp, #36	; 0x24
   2ba0a:	ecbd 8b02 	vpop	{d8}
   2ba0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002ba12 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
   2ba12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ba16:	ed2d 8b02 	vpush	{d8}
   2ba1a:	461d      	mov	r5, r3
  const int32 input_offset = params.input_offset;
   2ba1c:	6803      	ldr	r3, [r0, #0]
    int8_t* output_data) {
   2ba1e:	b089      	sub	sp, #36	; 0x24
  const int32 input_offset = params.input_offset;
   2ba20:	9303      	str	r3, [sp, #12]
  const int32 filter_offset = params.weights_offset;
   2ba22:	6843      	ldr	r3, [r0, #4]
  const int32 output_offset = params.output_offset;
  const int32 output_multiplier = params.output_multiplier;
  const int output_shift = params.output_shift;
  const int32 output_activation_min = params.quantized_activation_min;
  const int32 output_activation_max = params.quantized_activation_max;
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
   2ba24:	682f      	ldr	r7, [r5, #0]
  const int32 filter_offset = params.weights_offset;
   2ba26:	9304      	str	r3, [sp, #16]
  const int32 output_offset = params.output_offset;
   2ba28:	6883      	ldr	r3, [r0, #8]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
   2ba2a:	2f01      	cmp	r7, #1
  const int32 output_offset = params.output_offset;
   2ba2c:	9305      	str	r3, [sp, #20]
  const int32 output_multiplier = params.output_multiplier;
   2ba2e:	68c3      	ldr	r3, [r0, #12]
    int8_t* output_data) {
   2ba30:	4614      	mov	r4, r2
  const int32 output_multiplier = params.output_multiplier;
   2ba32:	ee08 3a10 	vmov	s16, r3
  const int output_shift = params.output_shift;
   2ba36:	6903      	ldr	r3, [r0, #16]
    int8_t* output_data) {
   2ba38:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  const int output_shift = params.output_shift;
   2ba3a:	ee08 3a90 	vmov	s17, r3
  const int32 output_activation_min = params.quantized_activation_min;
   2ba3e:	6943      	ldr	r3, [r0, #20]
   2ba40:	9300      	str	r3, [sp, #0]
  const int32 output_activation_max = params.quantized_activation_max;
   2ba42:	6983      	ldr	r3, [r0, #24]
   2ba44:	9301      	str	r3, [sp, #4]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
   2ba46:	dc01      	bgt.n	2ba4c <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x3a>
   2ba48:	f005 f9b7 	bl	30dba <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
   2ba4c:	6833      	ldr	r3, [r6, #0]
   2ba4e:	2b02      	cmp	r3, #2
   2ba50:	d1fa      	bne.n	2ba48 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x36>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   2ba52:	e9dd 3200 	ldrd	r3, r2, [sp]
   2ba56:	4293      	cmp	r3, r2
   2ba58:	dcf6      	bgt.n	2ba48 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x36>
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = output_shape.Dims(0);
   2ba5a:	2100      	movs	r1, #0
   2ba5c:	4630      	mov	r0, r6
   2ba5e:	f7fb fdb3 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_depth = output_shape.Dims(1);
   2ba62:	2101      	movs	r1, #1
  const int batches = output_shape.Dims(0);
   2ba64:	9006      	str	r0, [sp, #24]
  const int output_depth = output_shape.Dims(1);
   2ba66:	4630      	mov	r0, r6
   2ba68:	f7fb fdae 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
   2ba6c:	1eb9      	subs	r1, r7, #2
  const int output_depth = output_shape.Dims(1);
   2ba6e:	4606      	mov	r6, r0
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
   2ba70:	4628      	mov	r0, r5
   2ba72:	f7fb fda9 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2ba76:	42b0      	cmp	r0, r6
   2ba78:	dbe6      	blt.n	2ba48 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x36>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
   2ba7a:	4628      	mov	r0, r5
   2ba7c:	1e79      	subs	r1, r7, #1
   2ba7e:	f7fb fda3 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2ba82:	2700      	movs	r7, #0
   2ba84:	4605      	mov	r5, r0
  for (int b = 0; b < batches; ++b) {
   2ba86:	46ba      	mov	sl, r7
   2ba88:	9b06      	ldr	r3, [sp, #24]
   2ba8a:	459a      	cmp	sl, r3
   2ba8c:	da41      	bge.n	2bb12 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x100>
   2ba8e:	f04f 0800 	mov.w	r8, #0
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   2ba92:	46c1      	mov	r9, r8
   2ba94:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2ba96:	eb03 0b07 	add.w	fp, r3, r7
   2ba9a:	45b1      	cmp	r9, r6
   2ba9c:	da34      	bge.n	2bb08 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0xf6>
      int32 acc = 0;
      for (int d = 0; d < accum_depth; ++d) {
   2ba9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   2baa0:	46a6      	mov	lr, r4
   2baa2:	eb03 0c08 	add.w	ip, r3, r8
      int32 acc = 0;
   2baa6:	2300      	movs	r3, #0
      for (int d = 0; d < accum_depth; ++d) {
   2baa8:	461a      	mov	r2, r3
   2baaa:	42aa      	cmp	r2, r5
   2baac:	da10      	bge.n	2bad0 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0xbe>
        int32 input_val = input_data[b * accum_depth + d];
   2baae:	f91e 1b01 	ldrsb.w	r1, [lr], #1
        int32 filter_val = filter_data[out_c * accum_depth + d];
        acc += (filter_val + filter_offset) * (input_val + input_offset);
   2bab2:	9804      	ldr	r0, [sp, #16]
        int32 input_val = input_data[b * accum_depth + d];
   2bab4:	9102      	str	r1, [sp, #8]
        int32 filter_val = filter_data[out_c * accum_depth + d];
   2bab6:	f91c 1b01 	ldrsb.w	r1, [ip], #1
      for (int d = 0; d < accum_depth; ++d) {
   2baba:	3201      	adds	r2, #1
        acc += (filter_val + filter_offset) * (input_val + input_offset);
   2babc:	4401      	add	r1, r0
   2babe:	9107      	str	r1, [sp, #28]
   2bac0:	e9dd 1002 	ldrd	r1, r0, [sp, #8]
   2bac4:	4401      	add	r1, r0
   2bac6:	4608      	mov	r0, r1
   2bac8:	9907      	ldr	r1, [sp, #28]
   2baca:	fb00 3301 	mla	r3, r0, r1, r3
      for (int d = 0; d < accum_depth; ++d) {
   2bace:	e7ec      	b.n	2baaa <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x98>
      }
      if (bias_data) {
   2bad0:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2bad2:	b112      	cbz	r2, 2bada <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0xc8>
        acc += bias_data[out_c];
   2bad4:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
   2bad8:	4413      	add	r3, r2
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
   2bada:	4618      	mov	r0, r3
   2badc:	ee18 2a90 	vmov	r2, s17
   2bae0:	ee18 1a10 	vmov	r1, s16
   2bae4:	f7ed fc14 	bl	19310 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
      acc += output_offset;
   2bae8:	9b05      	ldr	r3, [sp, #20]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   2baea:	f109 0901 	add.w	r9, r9, #1
      acc += output_offset;
   2baee:	4418      	add	r0, r3
      acc = std::max(acc, output_activation_min);
      acc = std::min(acc, output_activation_max);
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
   2baf0:	9b00      	ldr	r3, [sp, #0]
   2baf2:	44a8      	add	r8, r5
   2baf4:	4298      	cmp	r0, r3
   2baf6:	bfb8      	it	lt
   2baf8:	4618      	movlt	r0, r3
   2bafa:	9b01      	ldr	r3, [sp, #4]
   2bafc:	4298      	cmp	r0, r3
   2bafe:	bfa8      	it	ge
   2bb00:	4618      	movge	r0, r3
   2bb02:	f80b 0b01 	strb.w	r0, [fp], #1
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   2bb06:	e7c8      	b.n	2ba9a <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x88>
  for (int b = 0; b < batches; ++b) {
   2bb08:	f10a 0a01 	add.w	sl, sl, #1
   2bb0c:	4437      	add	r7, r6
   2bb0e:	442c      	add	r4, r5
   2bb10:	e7ba      	b.n	2ba88 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x76>
    }
  }
}
   2bb12:	b009      	add	sp, #36	; 0x24
   2bb14:	ecbd 8b02 	vpop	{d8}
   2bb18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002bb1c <_ZN6tflite3ops5micro10hard_swish13HardSwishInitEP13TfLiteContextPKcj>:
void* HardSwishInit(TfLiteContext* context, const char* buffer, size_t length) {
   2bb1c:	b513      	push	{r0, r1, r4, lr}
  void* data = nullptr;
   2bb1e:	2400      	movs	r4, #0
  if (context->AllocatePersistentBuffer(context, sizeof(HardSwishParams),
   2bb20:	2114      	movs	r1, #20
   2bb22:	6b83      	ldr	r3, [r0, #56]	; 0x38
  void* data = nullptr;
   2bb24:	9401      	str	r4, [sp, #4]
  if (context->AllocatePersistentBuffer(context, sizeof(HardSwishParams),
   2bb26:	aa01      	add	r2, sp, #4
   2bb28:	4798      	blx	r3
   2bb2a:	2801      	cmp	r0, #1
    return nullptr;
   2bb2c:	bf0c      	ite	eq
   2bb2e:	4620      	moveq	r0, r4
  return data;
   2bb30:	9801      	ldrne	r0, [sp, #4]
}
   2bb32:	b002      	add	sp, #8
   2bb34:	bd10      	pop	{r4, pc}

0002bb36 <_ZN6tflite31DownScaleInt32ToInt16MultiplierEiPs>:
  TFLITE_DCHECK_GE(multiplier_int32, 0);
   2bb36:	2800      	cmp	r0, #0
                                            int16_t* multiplier_int16) {
   2bb38:	b510      	push	{r4, lr}
  TFLITE_DCHECK_GE(multiplier_int32, 0);
   2bb3a:	da01      	bge.n	2bb40 <_ZN6tflite31DownScaleInt32ToInt16MultiplierEiPs+0xa>
   2bb3c:	f005 f93d 	bl	30dba <abort>
  if (multiplier_int32 >=
   2bb40:	f06f 2380 	mvn.w	r3, #2147516416	; 0x80008000
   2bb44:	4298      	cmp	r0, r3
   2bb46:	db03      	blt.n	2bb50 <_ZN6tflite31DownScaleInt32ToInt16MultiplierEiPs+0x1a>
    *multiplier_int16 = std::numeric_limits<int16_t>::max();
   2bb48:	f647 73ff 	movw	r3, #32767	; 0x7fff
   2bb4c:	800b      	strh	r3, [r1, #0]
}
   2bb4e:	bd10      	pop	{r4, pc}
  const int32_t result = (multiplier_int32 + kRoundingOffset) >> 16;
   2bb50:	f500 4200 	add.w	r2, r0, #32768	; 0x8000
  TFLITE_DCHECK_LE(result << 16, multiplier_int32 + kRoundingOffset);
   2bb54:	0c13      	lsrs	r3, r2, #16
   2bb56:	041b      	lsls	r3, r3, #16
   2bb58:	429a      	cmp	r2, r3
  const int32_t result = (multiplier_int32 + kRoundingOffset) >> 16;
   2bb5a:	ea4f 4422 	mov.w	r4, r2, asr #16
  TFLITE_DCHECK_LE(result << 16, multiplier_int32 + kRoundingOffset);
   2bb5e:	dbed      	blt.n	2bb3c <_ZN6tflite31DownScaleInt32ToInt16MultiplierEiPs+0x6>
  TFLITE_DCHECK_GT(result << 16, multiplier_int32 - kRoundingOffset);
   2bb60:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
   2bb64:	4283      	cmp	r3, r0
   2bb66:	dde9      	ble.n	2bb3c <_ZN6tflite31DownScaleInt32ToInt16MultiplierEiPs+0x6>
  *multiplier_int16 = result;
   2bb68:	800c      	strh	r4, [r1, #0]
  TFLITE_DCHECK_EQ(*multiplier_int16, result);
   2bb6a:	e7f0      	b.n	2bb4e <_ZN6tflite31DownScaleInt32ToInt16MultiplierEiPs+0x18>

0002bb6c <_ZN6tflite13reference_ops19SaturatingLeftShiftEsi>:
  int32_t result = static_cast<int32_t>(value) * (1 << amount);
   2bb6c:	4088      	lsls	r0, r1
  return result;
   2bb6e:	f300 000f 	ssat	r0, #16, r0
}
   2bb72:	b200      	sxth	r0, r0
   2bb74:	4770      	bx	lr

0002bb76 <_ZN6tflite13reference_ops9HardSwishIhEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>:
        6;
  }
}

template <typename T>
inline void HardSwish(const HardSwishParams& params,
   2bb76:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bb7a:	4604      	mov	r4, r0
   2bb7c:	4608      	mov	r0, r1
                      const RuntimeShape& input_shape, const T* input_data,
                      const RuntimeShape& output_shape, T* output_data) {
  ruy::profiler::ScopeLabel label("ReferenceHardSwish/Quantized");

  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   2bb7e:	4619      	mov	r1, r3
inline void HardSwish(const HardSwishParams& params,
   2bb80:	4691      	mov	r9, r2
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   2bb82:	f7fb fd32 	bl	275ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>

  for (int i = 0; i < flat_size; i++) {
   2bb86:	2700      	movs	r7, #0
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   2bb88:	4680      	mov	r8, r0
  std::int16_t ab_x2_high16 = static_cast<std::int16_t>((ab_32) / (1 << 15));
   2bb8a:	f647 7aff 	movw	sl, #32767	; 0x7fff
  for (int i = 0; i < flat_size; i++) {
   2bb8e:	4547      	cmp	r7, r8
   2bb90:	da3a      	bge.n	2bc08 <_ZN6tflite13reference_ops9HardSwishIhEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x92>
    const int16_t input_value = input_data[i] - params.input_zero_point;
   2bb92:	8820      	ldrh	r0, [r4, #0]
   2bb94:	f819 2007 	ldrb.w	r2, [r9, r7]
    // Compute the input value on essentially the output scale, just not
    // right-shifted yet. This is the value that we'll use in the (x >= +3)
    // case, and that in the general case we'll multiply against the "relu-ish"
    // fixed-point multiplier in [0, 1].
    const int16_t input_value_on_preshift_output_scale =
        gemmlowp::SaturatingRoundingDoublingHighMul(
   2bb98:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    const int16_t input_value = input_data[i] - params.input_zero_point;
   2bb9c:	1a12      	subs	r2, r2, r0
    const int16_t input_value_on_hires_input_scale = input_value * (1 << 7);
   2bb9e:	01d2      	lsls	r2, r2, #7
   2bba0:	fa0f fb82 	sxth.w	fp, r2
        gemmlowp::SaturatingRoundingDoublingHighMul(
   2bba4:	4658      	mov	r0, fp
   2bba6:	f7ef f9b3 	bl	1af10 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIsEET_S1_S1_>
    // MultiplyByQuantizedMultiplier assumes.
    int16_t reluish_value = input_value_on_hires_input_scale;
    // Shift left, saturating, as much as we can while ensuring that this
    // saturation will not contribute to the result. That is, left shift amount
    // reduced by 1.
    if (params.reluish_multiplier_exponent > 0) {
   2bbaa:	68a6      	ldr	r6, [r4, #8]
        gemmlowp::SaturatingRoundingDoublingHighMul(
   2bbac:	4605      	mov	r5, r0
    if (params.reluish_multiplier_exponent > 0) {
   2bbae:	2e00      	cmp	r6, #0
   2bbb0:	dd04      	ble.n	2bbbc <_ZN6tflite13reference_ops9HardSwishIhEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x46>
      reluish_value = SaturatingLeftShift(
   2bbb2:	4658      	mov	r0, fp
   2bbb4:	1e71      	subs	r1, r6, #1
   2bbb6:	f7ff ffd9 	bl	2bb6c <_ZN6tflite13reference_ops19SaturatingLeftShiftEsi>
   2bbba:	4683      	mov	fp, r0
          reluish_value, params.reluish_multiplier_exponent - 1);
    }
    // Apply the fixed-point multiplier, dividing the value by a divisor
    // ranging in [1, 2].
    reluish_value = gemmlowp::SaturatingRoundingDoublingHighMul(
   2bbbc:	4658      	mov	r0, fp
   2bbbe:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
   2bbc2:	f7ef f9a5 	bl	1af10 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIsEET_S1_S1_>
        reluish_value, params.reluish_multiplier_fixedpoint_int16);
    // Apply the last bit of left-shift. Thus, in the left-shifting case, if
    // any saturation affects the result, it is happening here --- any
    // saturation having occurred above is overwritten here, not affecting the
    // result.
    if (params.reluish_multiplier_exponent > 0) {
   2bbc6:	2e00      	cmp	r6, #0
    reluish_value = gemmlowp::SaturatingRoundingDoublingHighMul(
   2bbc8:	4603      	mov	r3, r0
    if (params.reluish_multiplier_exponent > 0) {
   2bbca:	dd18      	ble.n	2bbfe <_ZN6tflite13reference_ops9HardSwishIhEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x88>
      reluish_value = SaturatingLeftShift(reluish_value, 1);
   2bbcc:	2101      	movs	r1, #1
   2bbce:	f7ff ffcd 	bl	2bb6c <_ZN6tflite13reference_ops19SaturatingLeftShiftEsi>
    }
    // Shift right, in the right-shifting case.
    if (params.reluish_multiplier_exponent < 0) {
      reluish_value = gemmlowp::RoundingDivideByPOT(
   2bbd2:	4603      	mov	r3, r0
          reluish_value, -params.reluish_multiplier_exponent);
    }
    // At this point we have rescaled the value into a 16bit fixedpoint
    // reluish_value in [-1, 1].
    // We now convert that to a 16bit fixedpoint value in [0, 1].
    reluish_value = (reluish_value + (1 << 15)) >> 1;
   2bbd4:	f503 4000 	add.w	r0, r3, #32768	; 0x8000
   2bbd8:	1040      	asrs	r0, r0, #1
  std::int16_t ab_x2_high16 = static_cast<std::int16_t>((ab_32) / (1 << 15));
   2bbda:	4368      	muls	r0, r5
    //
    const int16_t preshift_output_value = SaturatingDoublingHighMul(
        reluish_value, input_value_on_preshift_output_scale);
    // We were so far operating on the pre-shift output scale. Now we finally
    // apply that output shift, arriving at the final output scale.
    int16_t output_value = gemmlowp::RoundingDivideByPOT(
   2bbdc:	6921      	ldr	r1, [r4, #16]
  std::int16_t ab_x2_high16 = static_cast<std::int16_t>((ab_32) / (1 << 15));
   2bbde:	bf48      	it	mi
   2bbe0:	4450      	addmi	r0, sl
    int16_t output_value = gemmlowp::RoundingDivideByPOT(
   2bbe2:	4249      	negs	r1, r1
   2bbe4:	f340 30cf 	sbfx	r0, r0, #15, #16
   2bbe8:	f7ef fa48 	bl	1b07c <_ZN8gemmlowp19RoundingDivideByPOTIsEET_S1_i>
        preshift_output_value, -params.output_multiplier_exponent);
    output_value += params.output_zero_point;
   2bbec:	8863      	ldrh	r3, [r4, #2]
   2bbee:	4418      	add	r0, r3
    output_value =
        std::min<int16_t>(output_value, std::numeric_limits<T>::max());
    output_value =
        std::max<int16_t>(output_value, std::numeric_limits<T>::min());
    output_data[i] = output_value;
   2bbf0:	b200      	sxth	r0, r0
   2bbf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2bbf4:	f380 0008 	usat	r0, #8, r0
   2bbf8:	55d8      	strb	r0, [r3, r7]
  for (int i = 0; i < flat_size; i++) {
   2bbfa:	3701      	adds	r7, #1
   2bbfc:	e7c7      	b.n	2bb8e <_ZN6tflite13reference_ops9HardSwishIhEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18>
    if (params.reluish_multiplier_exponent < 0) {
   2bbfe:	d0e9      	beq.n	2bbd4 <_ZN6tflite13reference_ops9HardSwishIhEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x5e>
      reluish_value = gemmlowp::RoundingDivideByPOT(
   2bc00:	4271      	negs	r1, r6
   2bc02:	f7ef fa3b 	bl	1b07c <_ZN8gemmlowp19RoundingDivideByPOTIsEET_S1_i>
   2bc06:	e7e4      	b.n	2bbd2 <_ZN6tflite13reference_ops9HardSwishIhEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x5c>
  }
}
   2bc08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002bc0c <_ZN6tflite13reference_ops9HardSwishIaEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>:
inline void HardSwish(const HardSwishParams& params,
   2bc0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bc10:	4604      	mov	r4, r0
   2bc12:	4608      	mov	r0, r1
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   2bc14:	4619      	mov	r1, r3
inline void HardSwish(const HardSwishParams& params,
   2bc16:	4691      	mov	r9, r2
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   2bc18:	f7fb fce7 	bl	275ea <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
  for (int i = 0; i < flat_size; i++) {
   2bc1c:	2600      	movs	r6, #0
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   2bc1e:	4680      	mov	r8, r0
  std::int16_t ab_x2_high16 = static_cast<std::int16_t>((ab_32) / (1 << 15));
   2bc20:	f647 7bff 	movw	fp, #32767	; 0x7fff
    output_data[i] = output_value;
   2bc24:	f06f 0a7f 	mvn.w	sl, #127	; 0x7f
  for (int i = 0; i < flat_size; i++) {
   2bc28:	4546      	cmp	r6, r8
   2bc2a:	da3f      	bge.n	2bcac <_ZN6tflite13reference_ops9HardSwishIaEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xa0>
    const int16_t input_value = input_data[i] - params.input_zero_point;
   2bc2c:	8820      	ldrh	r0, [r4, #0]
   2bc2e:	f919 3006 	ldrsb.w	r3, [r9, r6]
        gemmlowp::SaturatingRoundingDoublingHighMul(
   2bc32:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    const int16_t input_value = input_data[i] - params.input_zero_point;
   2bc36:	1a1b      	subs	r3, r3, r0
    const int16_t input_value_on_hires_input_scale = input_value * (1 << 7);
   2bc38:	01db      	lsls	r3, r3, #7
   2bc3a:	b21b      	sxth	r3, r3
        gemmlowp::SaturatingRoundingDoublingHighMul(
   2bc3c:	4618      	mov	r0, r3
   2bc3e:	9301      	str	r3, [sp, #4]
   2bc40:	f7ef f966 	bl	1af10 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIsEET_S1_S1_>
    if (params.reluish_multiplier_exponent > 0) {
   2bc44:	68a7      	ldr	r7, [r4, #8]
        gemmlowp::SaturatingRoundingDoublingHighMul(
   2bc46:	4605      	mov	r5, r0
    if (params.reluish_multiplier_exponent > 0) {
   2bc48:	2f00      	cmp	r7, #0
   2bc4a:	9b01      	ldr	r3, [sp, #4]
   2bc4c:	dd04      	ble.n	2bc58 <_ZN6tflite13reference_ops9HardSwishIaEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x4c>
      reluish_value = SaturatingLeftShift(
   2bc4e:	4618      	mov	r0, r3
   2bc50:	1e79      	subs	r1, r7, #1
   2bc52:	f7ff ff8b 	bl	2bb6c <_ZN6tflite13reference_ops19SaturatingLeftShiftEsi>
   2bc56:	4603      	mov	r3, r0
    reluish_value = gemmlowp::SaturatingRoundingDoublingHighMul(
   2bc58:	4618      	mov	r0, r3
   2bc5a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
   2bc5e:	f7ef f957 	bl	1af10 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIsEET_S1_S1_>
    if (params.reluish_multiplier_exponent > 0) {
   2bc62:	2f00      	cmp	r7, #0
    reluish_value = gemmlowp::SaturatingRoundingDoublingHighMul(
   2bc64:	4603      	mov	r3, r0
    if (params.reluish_multiplier_exponent > 0) {
   2bc66:	dd1c      	ble.n	2bca2 <_ZN6tflite13reference_ops9HardSwishIaEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x96>
      reluish_value = SaturatingLeftShift(reluish_value, 1);
   2bc68:	2101      	movs	r1, #1
   2bc6a:	f7ff ff7f 	bl	2bb6c <_ZN6tflite13reference_ops19SaturatingLeftShiftEsi>
      reluish_value = gemmlowp::RoundingDivideByPOT(
   2bc6e:	4603      	mov	r3, r0
    reluish_value = (reluish_value + (1 << 15)) >> 1;
   2bc70:	f503 4000 	add.w	r0, r3, #32768	; 0x8000
   2bc74:	1040      	asrs	r0, r0, #1
  std::int16_t ab_x2_high16 = static_cast<std::int16_t>((ab_32) / (1 << 15));
   2bc76:	4368      	muls	r0, r5
    int16_t output_value = gemmlowp::RoundingDivideByPOT(
   2bc78:	6921      	ldr	r1, [r4, #16]
  std::int16_t ab_x2_high16 = static_cast<std::int16_t>((ab_32) / (1 << 15));
   2bc7a:	bf48      	it	mi
   2bc7c:	4458      	addmi	r0, fp
    int16_t output_value = gemmlowp::RoundingDivideByPOT(
   2bc7e:	4249      	negs	r1, r1
   2bc80:	f340 30cf 	sbfx	r0, r0, #15, #16
   2bc84:	f7ef f9fa 	bl	1b07c <_ZN8gemmlowp19RoundingDivideByPOTIsEET_S1_i>
    output_value += params.output_zero_point;
   2bc88:	8863      	ldrh	r3, [r4, #2]
   2bc8a:	4418      	add	r0, r3
    output_data[i] = output_value;
   2bc8c:	b200      	sxth	r0, r0
   2bc8e:	287f      	cmp	r0, #127	; 0x7f
   2bc90:	bfa8      	it	ge
   2bc92:	207f      	movge	r0, #127	; 0x7f
   2bc94:	4550      	cmp	r0, sl
   2bc96:	bfb8      	it	lt
   2bc98:	4650      	movlt	r0, sl
   2bc9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2bc9c:	5598      	strb	r0, [r3, r6]
  for (int i = 0; i < flat_size; i++) {
   2bc9e:	3601      	adds	r6, #1
   2bca0:	e7c2      	b.n	2bc28 <_ZN6tflite13reference_ops9HardSwishIaEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1c>
    if (params.reluish_multiplier_exponent < 0) {
   2bca2:	d0e5      	beq.n	2bc70 <_ZN6tflite13reference_ops9HardSwishIaEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x64>
      reluish_value = gemmlowp::RoundingDivideByPOT(
   2bca4:	4279      	negs	r1, r7
   2bca6:	f7ef f9e9 	bl	1b07c <_ZN8gemmlowp19RoundingDivideByPOTIsEET_S1_i>
   2bcaa:	e7e0      	b.n	2bc6e <_ZN6tflite13reference_ops9HardSwishIaEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x62>
}
   2bcac:	b003      	add	sp, #12
   2bcae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002bcb2 <_ZN6tflite3ops5micro6l2norm7PrepareEP13TfLiteContextP10TfLiteNode>:
}
   2bcb2:	2000      	movs	r0, #0
   2bcb4:	4770      	bx	lr

0002bcb6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:
                                   const RuntimeShape& check_shape_0) {
   2bcb6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2bcba:	4604      	mov	r4, r0
   2bcbc:	460d      	mov	r5, r1
   2bcbe:	4690      	mov	r8, r2
  for (int i = 0; i < dims_count; ++i) {
   2bcc0:	2600      	movs	r6, #0
  const int dims_count = shape.DimensionsCount();
   2bcc2:	6807      	ldr	r7, [r0, #0]
  for (int i = 0; i < dims_count; ++i) {
   2bcc4:	42be      	cmp	r6, r7
   2bcc6:	da10      	bge.n	2bcea <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x34>
    if (i != skip_dim) {
   2bcc8:	42ae      	cmp	r6, r5
   2bcca:	d00c      	beq.n	2bce6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x30>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   2bccc:	4631      	mov	r1, r6
   2bcce:	4620      	mov	r0, r4
   2bcd0:	f7fb fc7a 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2bcd4:	4631      	mov	r1, r6
   2bcd6:	4681      	mov	r9, r0
   2bcd8:	4640      	mov	r0, r8
   2bcda:	f7fb fc75 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2bcde:	4581      	cmp	r9, r0
   2bce0:	d001      	beq.n	2bce6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x30>
   2bce2:	f005 f86a 	bl	30dba <abort>
  for (int i = 0; i < dims_count; ++i) {
   2bce6:	3601      	adds	r6, #1
   2bce8:	e7ec      	b.n	2bcc4 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0xe>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   2bcea:	2d00      	cmp	r5, #0
   2bcec:	dbf9      	blt.n	2bce2 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x2c>
   2bcee:	42bd      	cmp	r5, r7
   2bcf0:	daf7      	bge.n	2bce2 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x2c>
  int flat_size = 1;
   2bcf2:	2001      	movs	r0, #1
  for (int i = 0; i < dims_count; ++i) {
   2bcf4:	2300      	movs	r3, #0
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   2bcf6:	2f05      	cmp	r7, #5
   2bcf8:	bfcc      	ite	gt
   2bcfa:	6864      	ldrgt	r4, [r4, #4]
   2bcfc:	3404      	addle	r4, #4
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   2bcfe:	429d      	cmp	r5, r3
   2bd00:	bf0c      	ite	eq
   2bd02:	2201      	moveq	r2, #1
   2bd04:	f854 2023 	ldrne.w	r2, [r4, r3, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
   2bd08:	3301      	adds	r3, #1
   2bd0a:	429f      	cmp	r7, r3
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   2bd0c:	fb02 f000 	mul.w	r0, r2, r0
  for (int i = 0; i < dims_count; ++i) {
   2bd10:	dcf5      	bgt.n	2bcfe <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x48>
}
   2bd12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002bd16 <_ZN6tflite3ops5micro25Register_L2_NORMALIZATIONEv>:

TfLiteRegistration Register_L2_NORMALIZATION() { return Register_L2NORM_REF(); }
   2bd16:	b510      	push	{r4, lr}
   2bd18:	4604      	mov	r4, r0
   2bd1a:	f7ef fa85 	bl	1b228 <_ZN6tflite3ops5micro19Register_L2NORM_REFEv>
   2bd1e:	4620      	mov	r0, r4
   2bd20:	bd10      	pop	{r4, pc}

0002bd22 <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph>:

inline void L2Normalization(const tflite::L2NormalizationParams& op_params,
                            const RuntimeShape& input_shape,
                            const uint8* input_data,
                            const RuntimeShape& output_shape,
                            uint8* output_data) {
   2bd22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bd26:	460c      	mov	r4, r1
   2bd28:	4617      	mov	r7, r2
   2bd2a:	461a      	mov	r2, r3
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   2bd2c:	6809      	ldr	r1, [r1, #0]
                            uint8* output_data) {
   2bd2e:	b087      	sub	sp, #28
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   2bd30:	3901      	subs	r1, #1
                            uint8* output_data) {
   2bd32:	4606      	mov	r6, r0
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   2bd34:	460b      	mov	r3, r1
   2bd36:	4620      	mov	r0, r4
   2bd38:	e9cd 1201 	strd	r1, r2, [sp, #4]
   2bd3c:	f7fe faee 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   2bd40:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   2bd44:	4605      	mov	r5, r0
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   2bd46:	4620      	mov	r0, r4
  const int32 input_zero_point = op_params.input_zero_point;
   2bd48:	2400      	movs	r4, #0
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   2bd4a:	f7ff ffb4 	bl	2bcb6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
  const int32 input_zero_point = op_params.input_zero_point;
   2bd4e:	f8d6 b000 	ldr.w	fp, [r6]

  for (int i = 0; i < outer_size; ++i) {
   2bd52:	4626      	mov	r6, r4
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   2bd54:	9001      	str	r0, [sp, #4]
  for (int i = 0; i < outer_size; ++i) {
   2bd56:	9b01      	ldr	r3, [sp, #4]
   2bd58:	429e      	cmp	r6, r3
   2bd5a:	da3d      	bge.n	2bdd8 <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xb6>
    int32 square_l2_norm = 0;
    for (int c = 0; c < depth; c++) {
   2bd5c:	2300      	movs	r3, #0
   2bd5e:	eb07 0904 	add.w	r9, r7, r4
  for (int i = 0; i < outer_size; ++i) {
   2bd62:	4649      	mov	r1, r9
    int32 square_l2_norm = 0;
   2bd64:	4618      	mov	r0, r3
    for (int c = 0; c < depth; c++) {
   2bd66:	42ab      	cmp	r3, r5
   2bd68:	da07      	bge.n	2bd7a <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x58>
      int32 diff = input_data[depth * i + c] - input_zero_point;
   2bd6a:	f811 2b01 	ldrb.w	r2, [r1], #1
    for (int c = 0; c < depth; c++) {
   2bd6e:	3301      	adds	r3, #1
      int32 diff = input_data[depth * i + c] - input_zero_point;
   2bd70:	eba2 020b 	sub.w	r2, r2, fp
      square_l2_norm += diff * diff;
   2bd74:	fb02 0002 	mla	r0, r2, r2, r0
    for (int c = 0; c < depth; c++) {
   2bd78:	e7f5      	b.n	2bd66 <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x44>
    }
    int32 inv_l2norm_multiplier;
    int inv_l2norm_shift;
    GetInvSqrtQuantizedMultiplierExp(square_l2_norm, kReverseShift,
                                     &inv_l2norm_multiplier, &inv_l2norm_shift);
    for (int c = 0; c < depth; c++) {
   2bd7a:	f04f 0800 	mov.w	r8, #0
    GetInvSqrtQuantizedMultiplierExp(square_l2_norm, kReverseShift,
   2bd7e:	ab05      	add	r3, sp, #20
   2bd80:	aa04      	add	r2, sp, #16
   2bd82:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2bd86:	f7ef fa83 	bl	1b290 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_>
  return RoundingDivideByPOT(
   2bd8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   2bd8e:	f1c3 0a00 	rsb	sl, r3, #0
   2bd92:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2bd94:	4423      	add	r3, r4
    for (int c = 0; c < depth; c++) {
   2bd96:	45a8      	cmp	r8, r5
   2bd98:	9303      	str	r3, [sp, #12]
   2bd9a:	da1a      	bge.n	2bdd2 <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xb0>
      int32 diff = input_data[depth * i + c] - input_zero_point;
   2bd9c:	f819 0b01 	ldrb.w	r0, [r9], #1
   2bda0:	4611      	mov	r1, r2
   2bda2:	eba0 000b 	sub.w	r0, r0, fp
   2bda6:	01c0      	lsls	r0, r0, #7
   2bda8:	9202      	str	r2, [sp, #8]
   2bdaa:	f7ef fa13 	bl	1b1d4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
   2bdae:	4651      	mov	r1, sl
   2bdb0:	f7ef fa48 	bl	1b244 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
      if (__a < __b)
   2bdb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
      int32 rescaled_diff = MultiplyByQuantizedMultiplierSmallerThanOneExp(
          128 * diff, inv_l2norm_multiplier, inv_l2norm_shift);
      int32 unclamped_output_val = 128 + rescaled_diff;
   2bdb8:	3080      	adds	r0, #128	; 0x80
   2bdba:	2800      	cmp	r0, #0
   2bdbc:	dd07      	ble.n	2bdce <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xac>
      return __a;
   2bdbe:	28ff      	cmp	r0, #255	; 0xff
   2bdc0:	bfa8      	it	ge
   2bdc2:	20ff      	movge	r0, #255	; 0xff
      int32 output_val =
          std::min(static_cast<int32>(255),
                   std::max(static_cast<int32>(0), unclamped_output_val));
      output_data[depth * i + c] = static_cast<uint8>(output_val);
   2bdc4:	f803 0b01 	strb.w	r0, [r3], #1
    for (int c = 0; c < depth; c++) {
   2bdc8:	f108 0801 	add.w	r8, r8, #1
   2bdcc:	e7e3      	b.n	2bd96 <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x74>
      return __a;
   2bdce:	2000      	movs	r0, #0
   2bdd0:	e7f8      	b.n	2bdc4 <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xa2>
  for (int i = 0; i < outer_size; ++i) {
   2bdd2:	3601      	adds	r6, #1
   2bdd4:	442c      	add	r4, r5
   2bdd6:	e7be      	b.n	2bd56 <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x34>
    }
  }
}
   2bdd8:	b007      	add	sp, #28
   2bdda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002bdde <_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa>:
namespace tflite {
namespace reference_integer_ops {

inline void L2Normalization(int32_t input_zero_point, int32_t outer_size,
                            int32_t depth, const int8* input_data,
                            int8* output_data) {
   2bdde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bde2:	2500      	movs	r5, #0
   2bde4:	4680      	mov	r8, r0
   2bde6:	460f      	mov	r7, r1
   2bde8:	4616      	mov	r6, r2
  static constexpr int8_t kMaxInt8 = std::numeric_limits<int8_t>::max();
  // The output scale must be in sync with Prepare().
  // Output is in 1/128 scale so the actual output range is nudged from [-1, 1]
  // to [-1, 127/128].
  static constexpr int32_t kOutputScale = 7;
  for (int outer_index = 0; outer_index < outer_size; ++outer_index) {
   2bdea:	46a9      	mov	r9, r5
                            int8* output_data) {
   2bdec:	b087      	sub	sp, #28
   2bdee:	9301      	str	r3, [sp, #4]
  for (int outer_index = 0; outer_index < outer_size; ++outer_index) {
   2bdf0:	45b9      	cmp	r9, r7
   2bdf2:	da4c      	bge.n	2be8e <_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa+0xb0>
   2bdf4:	9b01      	ldr	r3, [sp, #4]
   2bdf6:	eb03 0b05 	add.w	fp, r3, r5
    // int32 = (int8 - int8) ^ 2.
    // ([-128, 127] - [-128, 127]) ^ 2 = [0, (2^8 - 1)^2] so the accumulator is
    // safe from overflowing in at least 2^16 steps.
    int32_t acc = 0;
    for (int inner_index = 0; inner_index < depth; ++inner_index) {
   2bdfa:	2300      	movs	r3, #0
  for (int outer_index = 0; outer_index < outer_size; ++outer_index) {
   2bdfc:	4659      	mov	r1, fp
    int32_t acc = 0;
   2bdfe:	4618      	mov	r0, r3
    for (int inner_index = 0; inner_index < depth; ++inner_index) {
   2be00:	42b3      	cmp	r3, r6
   2be02:	da07      	bge.n	2be14 <_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa+0x36>
      int32_t input =
          input_data[depth * outer_index + inner_index] - input_zero_point;
   2be04:	f911 2b01 	ldrsb.w	r2, [r1], #1
    for (int inner_index = 0; inner_index < depth; ++inner_index) {
   2be08:	3301      	adds	r3, #1
      int32_t input =
   2be0a:	eba2 0208 	sub.w	r2, r2, r8
      acc += input * input;
   2be0e:	fb02 0002 	mla	r0, r2, r2, r0
    for (int inner_index = 0; inner_index < depth; ++inner_index) {
   2be12:	e7f5      	b.n	2be00 <_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa+0x22>
    }
    int32_t inv_l2norm_multiplier;
    int inv_l2norm_shift;
    GetInvSqrtQuantizedMultiplierExp(acc, kReverseShift, &inv_l2norm_multiplier,
   2be14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2be18:	ab05      	add	r3, sp, #20
   2be1a:	aa04      	add	r2, sp, #16
   2be1c:	f7ef fa38 	bl	1b290 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_>
    for (int inner_index = 0; inner_index < depth; ++inner_index) {
      int32_t input =
          input_data[depth * outer_index + inner_index] - input_zero_point;

      // Rescale and downcast. Rescale is folded into the division.
      int32_t output_in_q24 = MultiplyByQuantizedMultiplier(
   2be20:	e9dd 2404 	ldrd	r2, r4, [sp, #16]
   2be24:	1de3      	adds	r3, r4, #7
  int right_shift = shift > 0 ? 0 : -shift;
   2be26:	f1c4 24ff 	rsb	r4, r4, #4278255360	; 0xff00ff00
   2be2a:	2b00      	cmp	r3, #0
   2be2c:	f504 047f 	add.w	r4, r4, #16711680	; 0xff0000
   2be30:	f104 04f9 	add.w	r4, r4, #249	; 0xf9
    for (int inner_index = 0; inner_index < depth; ++inner_index) {
   2be34:	f04f 0a00 	mov.w	sl, #0
   2be38:	bfc8      	it	gt
   2be3a:	2400      	movgt	r4, #0
  int left_shift = shift > 0 ? shift : 0;
   2be3c:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   2be40:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2be42:	9100      	str	r1, [sp, #0]
   2be44:	442b      	add	r3, r5
   2be46:	45b2      	cmp	sl, r6
   2be48:	9303      	str	r3, [sp, #12]
   2be4a:	da1c      	bge.n	2be86 <_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa+0xa8>
          input_data[depth * outer_index + inner_index] - input_zero_point;
   2be4c:	f91b 0b01 	ldrsb.w	r0, [fp], #1
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
   2be50:	9b00      	ldr	r3, [sp, #0]
      int32_t input =
   2be52:	eba0 0008 	sub.w	r0, r0, r8
   2be56:	4611      	mov	r1, r2
   2be58:	4098      	lsls	r0, r3
   2be5a:	9202      	str	r2, [sp, #8]
   2be5c:	f7ef f9ba 	bl	1b1d4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
   2be60:	4621      	mov	r1, r4
   2be62:	f7ef f9ef 	bl	1b244 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
      if (__a < __b)
   2be66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2be6a:	f110 0f7f 	cmn.w	r0, #127	; 0x7f
   2be6e:	db07      	blt.n	2be80 <_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa+0xa2>
      return __a;
   2be70:	287f      	cmp	r0, #127	; 0x7f
   2be72:	bfa8      	it	ge
   2be74:	207f      	movge	r0, #127	; 0x7f
          input, inv_l2norm_multiplier, inv_l2norm_shift + kOutputScale);
      output_in_q24 =
          std::min(static_cast<int32_t>(kMaxInt8),
                   std::max(static_cast<int32_t>(kMinInt8), output_in_q24));
      output_data[depth * outer_index + inner_index] =
   2be76:	f803 0b01 	strb.w	r0, [r3], #1
    for (int inner_index = 0; inner_index < depth; ++inner_index) {
   2be7a:	f10a 0a01 	add.w	sl, sl, #1
   2be7e:	e7e2      	b.n	2be46 <_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa+0x68>
      return __a;
   2be80:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2be84:	e7f7      	b.n	2be76 <_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa+0x98>
  for (int outer_index = 0; outer_index < outer_size; ++outer_index) {
   2be86:	f109 0901 	add.w	r9, r9, #1
   2be8a:	4435      	add	r5, r6
   2be8c:	e7b0      	b.n	2bdf0 <_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa+0x12>
          static_cast<int8>(output_in_q24);
    }
  }
}
   2be8e:	b007      	add	sp, #28
   2be90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002be94 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_19LogicalOrEbb>:
bool LogicalOr(bool x, bool y) { return x || y; }
   2be94:	2800      	cmp	r0, #0
   2be96:	bf08      	it	eq
   2be98:	4608      	moveq	r0, r1
   2be9a:	4770      	bx	lr

0002be9c <_ZN6tflite3ops5micro7logical12_GLOBAL__N_110LogicalAndEbb>:
bool LogicalAnd(bool x, bool y) { return x && y; }
   2be9c:	2800      	cmp	r0, #0
   2be9e:	bf14      	ite	ne
   2bea0:	4608      	movne	r0, r1
   2bea2:	2000      	moveq	r0, #0
   2bea4:	4770      	bx	lr

0002bea6 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E>:
}

// R: Result type. T1: Input 1 type. T2: Input 2 type.
// TODO(renjieliu): Refactor other binary functions to use this one.
template <typename R, typename T1, typename T2>
inline void BinaryFunction(const RuntimeShape& input1_shape,
   2bea6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2beaa:	4699      	mov	r9, r3
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   2beac:	6807      	ldr	r7, [r0, #0]
   2beae:	6813      	ldr	r3, [r2, #0]
   2beb0:	4604      	mov	r4, r0
   2beb2:	429f      	cmp	r7, r3
   2beb4:	4688      	mov	r8, r1
   2beb6:	4616      	mov	r6, r2
   2beb8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   2beba:	d001      	beq.n	2bec0 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x1a>
   2bebc:	f004 ff7d 	bl	30dba <abort>
  for (int i = 0; i < dims_count; ++i) {
   2bec0:	f04f 0a00 	mov.w	sl, #0
   2bec4:	4557      	cmp	r7, sl
   2bec6:	dd0d      	ble.n	2bee4 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x3e>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   2bec8:	4651      	mov	r1, sl
   2beca:	4620      	mov	r0, r4
   2becc:	f7fb fb7c 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2bed0:	4651      	mov	r1, sl
   2bed2:	4683      	mov	fp, r0
   2bed4:	4630      	mov	r0, r6
   2bed6:	f7fb fb77 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2beda:	4583      	cmp	fp, r0
   2bedc:	d1ee      	bne.n	2bebc <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  for (int i = 0; i < dims_count; ++i) {
   2bede:	f10a 0a01 	add.w	sl, sl, #1
   2bee2:	e7ef      	b.n	2bec4 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x1e>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   2bee4:	682b      	ldr	r3, [r5, #0]
   2bee6:	429f      	cmp	r7, r3
   2bee8:	d1e8      	bne.n	2bebc <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  for (int i = 0; i < dims_count; ++i) {
   2beea:	f04f 0a00 	mov.w	sl, #0
   2beee:	4557      	cmp	r7, sl
   2bef0:	dd0d      	ble.n	2bf0e <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x68>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   2bef2:	4651      	mov	r1, sl
   2bef4:	4620      	mov	r0, r4
   2bef6:	f7fb fb67 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2befa:	4651      	mov	r1, sl
   2befc:	4606      	mov	r6, r0
   2befe:	4628      	mov	r0, r5
   2bf00:	f7fb fb62 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2bf04:	4286      	cmp	r6, r0
   2bf06:	d1d9      	bne.n	2bebc <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  for (int i = 0; i < dims_count; ++i) {
   2bf08:	f10a 0a01 	add.w	sl, sl, #1
   2bf0c:	e7ef      	b.n	2beee <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x48>
    for (int i = 0; i < size_; i++) {
   2bf0e:	2300      	movs	r3, #0
    int buffer_size = 1;
   2bf10:	f04f 0a01 	mov.w	sl, #1
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   2bf14:	2f05      	cmp	r7, #5
   2bf16:	bfcc      	ite	gt
   2bf18:	6864      	ldrgt	r4, [r4, #4]
   2bf1a:	3404      	addle	r4, #4
    for (int i = 0; i < size_; i++) {
   2bf1c:	429f      	cmp	r7, r3
   2bf1e:	dd05      	ble.n	2bf2c <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x86>
      buffer_size *= dims_data[i];
   2bf20:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   2bf24:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   2bf26:	fb02 fa0a 	mul.w	sl, r2, sl
    for (int i = 0; i < size_; i++) {
   2bf2a:	e7f7      	b.n	2bf1c <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x76>
                           const T2* input2_data,
                           const RuntimeShape& output_shape, R* output_data,
                           R (*func)(T1, T2)) {
  const int flat_size =
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
  for (int i = 0; i < flat_size; ++i) {
   2bf2c:	2400      	movs	r4, #0
   2bf2e:	4554      	cmp	r4, sl
   2bf30:	da09      	bge.n	2bf46 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0xa0>
    output_data[i] = func(input1_data[i], input2_data[i]);
   2bf32:	f819 1004 	ldrb.w	r1, [r9, r4]
   2bf36:	f818 0004 	ldrb.w	r0, [r8, r4]
   2bf3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2bf3c:	4798      	blx	r3
   2bf3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2bf40:	5518      	strb	r0, [r3, r4]
  for (int i = 0; i < flat_size; ++i) {
   2bf42:	3401      	adds	r4, #1
   2bf44:	e7f3      	b.n	2bf2e <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x88>
  }
}
   2bf46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002bf4a <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E>:
inline void BroadcastBinaryFunction4DSlow(
   2bf4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bf4e:	469a      	mov	sl, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   2bf50:	6803      	ldr	r3, [r0, #0]
inline void BroadcastBinaryFunction4DSlow(
   2bf52:	b0a7      	sub	sp, #156	; 0x9c
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   2bf54:	2b04      	cmp	r3, #4
inline void BroadcastBinaryFunction4DSlow(
   2bf56:	4614      	mov	r4, r2
   2bf58:	4605      	mov	r5, r0
   2bf5a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
   2bf5c:	9103      	str	r1, [sp, #12]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   2bf5e:	dd01      	ble.n	2bf64 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x1a>
   2bf60:	f004 ff2b 	bl	30dba <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   2bf64:	6823      	ldr	r3, [r4, #0]
   2bf66:	2b04      	cmp	r3, #4
   2bf68:	dcfa      	bgt.n	2bf60 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   2bf6a:	6813      	ldr	r3, [r2, #0]
   2bf6c:	2b04      	cmp	r3, #4
   2bf6e:	dcf7      	bgt.n	2bf60 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
    return RuntimeShape(new_shape_size, shape, 1);
   2bf70:	2301      	movs	r3, #1
   2bf72:	2104      	movs	r1, #4
   2bf74:	a804      	add	r0, sp, #16
   2bf76:	f7fb fbbc 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2bf7a:	2301      	movs	r3, #1
   2bf7c:	462a      	mov	r2, r5
   2bf7e:	2104      	movs	r1, #4
   2bf80:	a80a      	add	r0, sp, #40	; 0x28
   2bf82:	f7fb fbb6 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2bf86:	4622      	mov	r2, r4
  for (int i = 0; i < N; ++i) {
   2bf88:	2400      	movs	r4, #0
   2bf8a:	2301      	movs	r3, #1
   2bf8c:	2104      	movs	r1, #4
   2bf8e:	a810      	add	r0, sp, #64	; 0x40
  CopyDimsToDesc<N>(extended_input0_shape, desc0_out);
   2bf90:	f10d 0858 	add.w	r8, sp, #88	; 0x58
   2bf94:	f7fb fbad 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  CopyDimsToDesc<N>(extended_input1_shape, desc1_out);
   2bf98:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
  CopyDimsToDesc<N>(extended_input0_shape, desc0_out);
   2bf9c:	4641      	mov	r1, r8
   2bf9e:	a80a      	add	r0, sp, #40	; 0x28
   2bfa0:	f7fb fd95 	bl	27ace <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
  CopyDimsToDesc<N>(extended_input1_shape, desc1_out);
   2bfa4:	4659      	mov	r1, fp
   2bfa6:	a810      	add	r0, sp, #64	; 0x40
   2bfa8:	f7fb fd91 	bl	27ace <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
   2bfac:	2610      	movs	r6, #16
   2bfae:	4627      	mov	r7, r4
    const int extent0 = extended_input0_shape.Dims(i);
   2bfb0:	4621      	mov	r1, r4
   2bfb2:	a80a      	add	r0, sp, #40	; 0x28
   2bfb4:	f7fb fb08 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int extent1 = extended_input1_shape.Dims(i);
   2bfb8:	4621      	mov	r1, r4
    const int extent0 = extended_input0_shape.Dims(i);
   2bfba:	4605      	mov	r5, r0
    const int extent1 = extended_input1_shape.Dims(i);
   2bfbc:	a810      	add	r0, sp, #64	; 0x40
   2bfbe:	f7fb fb03 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
    if (extent0 != extent1) {
   2bfc2:	4285      	cmp	r5, r0
   2bfc4:	d005      	beq.n	2bfd2 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x88>
      if (extent0 == 1) {
   2bfc6:	2d01      	cmp	r5, #1
   2bfc8:	d166      	bne.n	2c098 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x14e>
        desc0_out->strides[i] = 0;
   2bfca:	f848 7006 	str.w	r7, [r8, r6]
        desc0_out->extents[i] = extent1;
   2bfce:	f848 0024 	str.w	r0, [r8, r4, lsl #2]
  for (int i = 0; i < N; ++i) {
   2bfd2:	3401      	adds	r4, #1
   2bfd4:	2c04      	cmp	r4, #4
   2bfd6:	f106 0604 	add.w	r6, r6, #4
   2bfda:	d1e9      	bne.n	2bfb0 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x66>
  auto extended_input1_shape = RuntimeShape::ExtendedShape(N, input1_shape);
   2bfdc:	a810      	add	r0, sp, #64	; 0x40
   2bfde:	f7fb fae8 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  auto extended_input0_shape = RuntimeShape::ExtendedShape(N, input0_shape);
   2bfe2:	a80a      	add	r0, sp, #40	; 0x28
   2bfe4:	f7fb fae5 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   2bfe8:	2400      	movs	r4, #0
   2bfea:	2100      	movs	r1, #0
   2bfec:	a804      	add	r0, sp, #16
   2bfee:	f7fb faeb 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2bff2:	42a0      	cmp	r0, r4
   2bff4:	dd5f      	ble.n	2c0b6 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16c>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   2bff6:	2700      	movs	r7, #0
   2bff8:	f10d 0810 	add.w	r8, sp, #16
   2bffc:	2101      	movs	r1, #1
   2bffe:	4640      	mov	r0, r8
   2c000:	f7fb fae2 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2c004:	42b8      	cmp	r0, r7
   2c006:	dd54      	ble.n	2c0b2 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x168>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   2c008:	f04f 0900 	mov.w	r9, #0
   2c00c:	2102      	movs	r1, #2
   2c00e:	4640      	mov	r0, r8
   2c010:	f7fb fada 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2c014:	4548      	cmp	r0, r9
   2c016:	dd4a      	ble.n	2c0ae <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x164>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   2c018:	2500      	movs	r5, #0
   2c01a:	2103      	movs	r1, #3
   2c01c:	4640      	mov	r0, r8
   2c01e:	f7fb fad3 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2c022:	42a8      	cmp	r0, r5
   2c024:	dd40      	ble.n	2c0a8 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x15e>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   2c026:	9904      	ldr	r1, [sp, #16]
   2c028:	2904      	cmp	r1, #4
   2c02a:	d199      	bne.n	2bf60 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   2c02c:	2c00      	cmp	r4, #0
   2c02e:	db97      	blt.n	2bf60 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
   2c030:	9905      	ldr	r1, [sp, #20]
   2c032:	428c      	cmp	r4, r1
   2c034:	da94      	bge.n	2bf60 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   2c036:	2f00      	cmp	r7, #0
   2c038:	db92      	blt.n	2bf60 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
   2c03a:	9e06      	ldr	r6, [sp, #24]
   2c03c:	42b7      	cmp	r7, r6
   2c03e:	da8f      	bge.n	2bf60 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   2c040:	f1b9 0f00 	cmp.w	r9, #0
   2c044:	db8c      	blt.n	2bf60 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
   2c046:	9b07      	ldr	r3, [sp, #28]
   2c048:	4599      	cmp	r9, r3
   2c04a:	da89      	bge.n	2bf60 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   2c04c:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
   2c050:	d086      	beq.n	2bf60 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
   2c052:	9808      	ldr	r0, [sp, #32]
   2c054:	4285      	cmp	r5, r0
   2c056:	da83      	bge.n	2bf60 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   2c058:	fb06 7604 	mla	r6, r6, r4, r7
   2c05c:	fb03 9606 	mla	r6, r3, r6, r9
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   2c060:	463a      	mov	r2, r7
   2c062:	fb00 5606 	mla	r6, r0, r6, r5
   2c066:	464b      	mov	r3, r9
   2c068:	4621      	mov	r1, r4
   2c06a:	9500      	str	r5, [sp, #0]
   2c06c:	a816      	add	r0, sp, #88	; 0x58
   2c06e:	f7fb fba3 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   2c072:	464b      	mov	r3, r9
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   2c074:	4683      	mov	fp, r0
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   2c076:	463a      	mov	r2, r7
   2c078:	4621      	mov	r1, r4
   2c07a:	9500      	str	r5, [sp, #0]
   2c07c:	a81e      	add	r0, sp, #120	; 0x78
   2c07e:	f7fb fb9b 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[out_idx] = func(in1_val, in2_val);
   2c082:	9b03      	ldr	r3, [sp, #12]
   2c084:	f81a 1000 	ldrb.w	r1, [sl, r0]
   2c088:	f813 000b 	ldrb.w	r0, [r3, fp]
   2c08c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
   2c08e:	4798      	blx	r3
   2c090:	9b31      	ldr	r3, [sp, #196]	; 0xc4
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   2c092:	3501      	adds	r5, #1
          output_data[out_idx] = func(in1_val, in2_val);
   2c094:	5598      	strb	r0, [r3, r6]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   2c096:	e7c0      	b.n	2c01a <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0xd0>
        TFLITE_DCHECK_EQ(extent1, 1);
   2c098:	2801      	cmp	r0, #1
   2c09a:	f47f af61 	bne.w	2bf60 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
        desc1_out->strides[i] = 0;
   2c09e:	f84b 7006 	str.w	r7, [fp, r6]
        desc1_out->extents[i] = extent0;
   2c0a2:	f84b 5024 	str.w	r5, [fp, r4, lsl #2]
   2c0a6:	e794      	b.n	2bfd2 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x88>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   2c0a8:	f109 0901 	add.w	r9, r9, #1
   2c0ac:	e7ae      	b.n	2c00c <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0xc2>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   2c0ae:	3701      	adds	r7, #1
   2c0b0:	e7a2      	b.n	2bff8 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0xae>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   2c0b2:	3401      	adds	r4, #1
   2c0b4:	e799      	b.n	2bfea <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0xa0>
  const RuntimeShape output_shape =
   2c0b6:	a804      	add	r0, sp, #16
   2c0b8:	f7fb fa7b 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   2c0bc:	b027      	add	sp, #156	; 0x9c
   2c0be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002c0c2 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE>:
                         bool (*func)(bool, bool)) {
   2c0c2:	b5f0      	push	{r4, r5, r6, r7, lr}
  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
   2c0c4:	680b      	ldr	r3, [r1, #0]
   2c0c6:	6884      	ldr	r4, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
   2c0c8:	685d      	ldr	r5, [r3, #4]
   2c0ca:	689e      	ldr	r6, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
   2c0cc:	684b      	ldr	r3, [r1, #4]
  return &context->tensors[node->inputs->data[index]];
   2c0ce:	eb04 1585 	add.w	r5, r4, r5, lsl #6
  return &context->tensors[node->outputs->data[index]];
   2c0d2:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->inputs->data[index]];
   2c0d4:	eb04 1686 	add.w	r6, r4, r6, lsl #6
  if (HaveSameShapes(input1, input2)) {
   2c0d8:	4631      	mov	r1, r6
   2c0da:	4628      	mov	r0, r5
                         bool (*func)(bool, bool)) {
   2c0dc:	b097      	sub	sp, #92	; 0x5c
   2c0de:	4617      	mov	r7, r2
  return &context->tensors[node->outputs->data[index]];
   2c0e0:	eb04 1483 	add.w	r4, r4, r3, lsl #6
  if (HaveSameShapes(input1, input2)) {
   2c0e4:	f004 f80d 	bl	30102 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
        GetTensorShape(input1), GetTensorData<bool>(input1),
   2c0e8:	4629      	mov	r1, r5
  if (HaveSameShapes(input1, input2)) {
   2c0ea:	b330      	cbz	r0, 2c13a <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE+0x78>
        GetTensorShape(input1), GetTensorData<bool>(input1),
   2c0ec:	a804      	add	r0, sp, #16
   2c0ee:	f7fb faa5 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2c0f2:	b105      	cbz	r5, 2c0f6 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE+0x34>
   2c0f4:	686d      	ldr	r5, [r5, #4]
        GetTensorShape(input2), GetTensorData<bool>(input2),
   2c0f6:	4631      	mov	r1, r6
   2c0f8:	a80a      	add	r0, sp, #40	; 0x28
   2c0fa:	f7fb fa9f 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2c0fe:	b106      	cbz	r6, 2c102 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE+0x40>
   2c100:	6876      	ldr	r6, [r6, #4]
        GetTensorShape(output), GetTensorData<bool>(output), func);
   2c102:	4621      	mov	r1, r4
   2c104:	a810      	add	r0, sp, #64	; 0x40
   2c106:	f7fb fa99 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   2c10a:	b104      	cbz	r4, 2c10e <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE+0x4c>
   2c10c:	6864      	ldr	r4, [r4, #4]
    reference_ops::BinaryFunction<bool, bool, bool>(
   2c10e:	ab10      	add	r3, sp, #64	; 0x40
   2c110:	9300      	str	r3, [sp, #0]
   2c112:	4629      	mov	r1, r5
   2c114:	4633      	mov	r3, r6
   2c116:	e9cd 4701 	strd	r4, r7, [sp, #4]
   2c11a:	aa0a      	add	r2, sp, #40	; 0x28
   2c11c:	a804      	add	r0, sp, #16
   2c11e:	f7ff fec2 	bl	2bea6 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E>
        GetTensorShape(output), GetTensorData<bool>(output), func);
   2c122:	a810      	add	r0, sp, #64	; 0x40
   2c124:	f7fb fa45 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
        GetTensorShape(input2), GetTensorData<bool>(input2),
   2c128:	a80a      	add	r0, sp, #40	; 0x28
   2c12a:	f7fb fa42 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
        GetTensorShape(input1), GetTensorData<bool>(input1),
   2c12e:	a804      	add	r0, sp, #16
   2c130:	f7fb fa3f 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   2c134:	2000      	movs	r0, #0
   2c136:	b017      	add	sp, #92	; 0x5c
   2c138:	bdf0      	pop	{r4, r5, r6, r7, pc}
        GetTensorShape(input1), GetTensorData<bool>(input1),
   2c13a:	a804      	add	r0, sp, #16
   2c13c:	f7fb fa7e 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   2c140:	b105      	cbz	r5, 2c144 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE+0x82>
   2c142:	686d      	ldr	r5, [r5, #4]
        GetTensorShape(input2), GetTensorData<bool>(input2),
   2c144:	4631      	mov	r1, r6
   2c146:	a80a      	add	r0, sp, #40	; 0x28
   2c148:	f7fb fa78 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2c14c:	b106      	cbz	r6, 2c150 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE+0x8e>
   2c14e:	6876      	ldr	r6, [r6, #4]
        GetTensorShape(output), GetTensorData<bool>(output), func);
   2c150:	4621      	mov	r1, r4
   2c152:	a810      	add	r0, sp, #64	; 0x40
   2c154:	f7fb fa72 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   2c158:	b104      	cbz	r4, 2c15c <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE+0x9a>
   2c15a:	6864      	ldr	r4, [r4, #4]
    reference_ops::BroadcastBinaryFunction4DSlow<bool, bool, bool>(
   2c15c:	ab10      	add	r3, sp, #64	; 0x40
   2c15e:	9300      	str	r3, [sp, #0]
   2c160:	4629      	mov	r1, r5
   2c162:	4633      	mov	r3, r6
   2c164:	e9cd 4701 	strd	r4, r7, [sp, #4]
   2c168:	aa0a      	add	r2, sp, #40	; 0x28
   2c16a:	a804      	add	r0, sp, #16
   2c16c:	f7ff feed 	bl	2bf4a <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E>
   2c170:	e7d7      	b.n	2c122 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE+0x60>

0002c172 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
   2c172:	b508      	push	{r3, lr}
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
   2c174:	2100      	movs	r1, #0
   2c176:	f7ef f865 	bl	1b244 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
}
   2c17a:	bd08      	pop	{r3, pc}

0002c17c <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
   2c17c:	b508      	push	{r3, lr}
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   2c17e:	f7ef f829 	bl	1b1d4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
}
   2c182:	bd08      	pop	{r3, pc}

0002c184 <_ZN6tflite21reference_integer_ops8LogisticEiiiiiPKaPa>:
  static constexpr int32_t kOutputIntegerBits = 8;
  static constexpr int8_t kMinInt8 = std::numeric_limits<int8_t>::min();
  static constexpr int8_t kMaxInt8 = std::numeric_limits<int8_t>::max();
  static constexpr int32_t kOutputZeroPoint = -128;

  for (int i = 0; i < input_size; ++i) {
   2c184:	2b00      	cmp	r3, #0
                     int8_t* output_data) {
   2c186:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int right_shift = shift > 0 ? 0 : -shift;
   2c18a:	f1c3 0800 	rsb	r8, r3, #0
   2c18e:	4682      	mov	sl, r0
   2c190:	460f      	mov	r7, r1
   2c192:	4691      	mov	r9, r2
   2c194:	bfc8      	it	gt
   2c196:	f04f 0800 	movgt.w	r8, #0
  for (int i = 0; i < input_size; ++i) {
   2c19a:	2400      	movs	r4, #0
                     int8_t* output_data) {
   2c19c:	b089      	sub	sp, #36	; 0x24
    const int32_t input =
        static_cast<int32_t>(input_data[i]) - input_zero_point;
    if (input <= -input_range_radius) {
   2c19e:	f1c1 0b00 	rsb	fp, r1, #0
  int left_shift = shift > 0 ? shift : 0;
   2c1a2:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
  for (int i = 0; i < input_size; ++i) {
   2c1a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c1a8:	429c      	cmp	r4, r3
   2c1aa:	da55      	bge.n	2c258 <_ZN6tflite21reference_integer_ops8LogisticEiiiiiPKaPa+0xd4>
        static_cast<int32_t>(input_data[i]) - input_zero_point;
   2c1ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c1ae:	5718      	ldrsb	r0, [r3, r4]
    const int32_t input =
   2c1b0:	eba0 000a 	sub.w	r0, r0, sl
    if (input <= -input_range_radius) {
   2c1b4:	4583      	cmp	fp, r0
   2c1b6:	db04      	blt.n	2c1c2 <_ZN6tflite21reference_integer_ops8LogisticEiiiiiPKaPa+0x3e>
      output_data[i] = kMinInt8;
   2c1b8:	2380      	movs	r3, #128	; 0x80
      int32_t output_in_q23 =
          RoundingDivideByPOT(output_in_q0, 31 - kOutputIntegerBits);
      output_in_q23 = std::min(std::max(output_in_q23 + kOutputZeroPoint,
                                        static_cast<int32_t>(kMinInt8)),
                               static_cast<int32_t>(kMaxInt8));
      output_data[i] = static_cast<int8_t>(output_in_q23);
   2c1ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2c1bc:	5513      	strb	r3, [r2, r4]
  for (int i = 0; i < input_size; ++i) {
   2c1be:	3401      	adds	r4, #1
   2c1c0:	e7f1      	b.n	2c1a6 <_ZN6tflite21reference_integer_ops8LogisticEiiiiiPKaPa+0x22>
    } else if (input >= input_range_radius) {
   2c1c2:	42b8      	cmp	r0, r7
   2c1c4:	db01      	blt.n	2c1ca <_ZN6tflite21reference_integer_ops8LogisticEiiiiiPKaPa+0x46>
      output_data[i] = kMaxInt8;
   2c1c6:	237f      	movs	r3, #127	; 0x7f
   2c1c8:	e7f7      	b.n	2c1ba <_ZN6tflite21reference_integer_ops8LogisticEiiiiiPKaPa+0x36>
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
   2c1ca:	4649      	mov	r1, r9
   2c1cc:	40a8      	lsls	r0, r5
   2c1ce:	f7ef f801 	bl	1b1d4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
   2c1d2:	4641      	mov	r1, r8
   2c1d4:	f7ef f836 	bl	1b244 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return a ? BitNot(zero) : zero;
   2c1d8:	2800      	cmp	r0, #0
   2c1da:	dc39      	bgt.n	2c250 <_ZN6tflite21reference_integer_ops8LogisticEiiiiiPKaPa+0xcc>
   2c1dc:	bf0c      	ite	eq
   2c1de:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   2c1e2:	2200      	movne	r2, #0
   2c1e4:	2300      	movs	r3, #0
  return ~a;
   2c1e6:	43d9      	mvns	r1, r3
  return -a;
   2c1e8:	4246      	negs	r6, r0
  return a & b;
   2c1ea:	400e      	ands	r6, r1
   2c1ec:	4018      	ands	r0, r3
  return a ^ b;
   2c1ee:	4070      	eors	r0, r6

// Returns logistic(x) = 1 / (1 + exp(-x)) for x > 0.
template <typename tRawType, int tIntegerBits>
FixedPoint<tRawType, 0> logistic_on_positive_values(
    FixedPoint<tRawType, tIntegerBits> a) {
  return one_over_one_plus_x_for_x_in_0_1(exp_on_negative_values(-a));
   2c1f0:	4240      	negs	r0, r0
   2c1f2:	9203      	str	r2, [sp, #12]
  return a & b;
   2c1f4:	9102      	str	r1, [sp, #8]
   2c1f6:	9301      	str	r3, [sp, #4]
  return one_over_one_plus_x_for_x_in_0_1(exp_on_negative_values(-a));
   2c1f8:	f7ef fb22 	bl	1b840 <_ZN8gemmlowp22exp_on_negative_valuesIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
   2c1fc:	f7ef fa5a 	bl	1b6b4 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>
   2c200:	4606      	mov	r6, r0
  tRawType mask_if_zero = MaskIfZero(a);
  InputF abs_input = SelectUsingMask(mask_if_positive, a, -a);
  ResultF result_if_positive = logistic_on_positive_values(abs_input);
  ResultF result_if_negative = ResultF::One() - result_if_positive;
  const ResultF one_half =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(ResultF, 1 << 30, 0.5);
   2c202:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   2c206:	f7ff ffb4 	bl	2c172 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
  return a - b;
   2c20a:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
  return ~a;
   2c20e:	9a03      	ldr	r2, [sp, #12]
  return a & b;
   2c210:	9b01      	ldr	r3, [sp, #4]
  return a - b;
   2c212:	ebac 0c06 	sub.w	ip, ip, r6
  return a & b;
   2c216:	401e      	ands	r6, r3
  return ~a;
   2c218:	43d3      	mvns	r3, r2
  return a & b;
   2c21a:	9902      	ldr	r1, [sp, #8]
   2c21c:	4010      	ands	r0, r2
   2c21e:	ea0c 0101 	and.w	r1, ip, r1
  return a ^ b;
   2c222:	404e      	eors	r6, r1
  return a & b;
   2c224:	401e      	ands	r6, r3
          RoundingDivideByPOT(output_in_q0, 31 - kOutputIntegerBits);
   2c226:	2117      	movs	r1, #23
   2c228:	4070      	eors	r0, r6
   2c22a:	f7ef f80b 	bl	1b244 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
                                        static_cast<int32_t>(kMinInt8)),
   2c22e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
                               static_cast<int32_t>(kMaxInt8));
   2c232:	227f      	movs	r2, #127	; 0x7f
      output_in_q23 = std::min(std::max(output_in_q23 + kOutputZeroPoint,
   2c234:	3880      	subs	r0, #128	; 0x80
      if (__a < __b)
   2c236:	4298      	cmp	r0, r3
                                        static_cast<int32_t>(kMinInt8)),
   2c238:	9306      	str	r3, [sp, #24]
      output_in_q23 = std::min(std::max(output_in_q23 + kOutputZeroPoint,
   2c23a:	9005      	str	r0, [sp, #20]
	return __b;
   2c23c:	bfb4      	ite	lt
   2c23e:	ab06      	addlt	r3, sp, #24
      return __a;
   2c240:	ab05      	addge	r3, sp, #20
                               static_cast<int32_t>(kMaxInt8));
   2c242:	9207      	str	r2, [sp, #28]
      if (__b < __a)
   2c244:	681a      	ldr	r2, [r3, #0]
   2c246:	2a7f      	cmp	r2, #127	; 0x7f
	return __b;
   2c248:	bfc8      	it	gt
   2c24a:	ab07      	addgt	r3, sp, #28
      output_in_q23 = std::min(std::max(output_in_q23 + kOutputZeroPoint,
   2c24c:	681b      	ldr	r3, [r3, #0]
   2c24e:	e7b4      	b.n	2c1ba <_ZN6tflite21reference_integer_ops8LogisticEiiiiiPKaPa+0x36>
  return a ? BitNot(zero) : zero;
   2c250:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c254:	2200      	movs	r2, #0
   2c256:	e7c6      	b.n	2c1e6 <_ZN6tflite21reference_integer_ops8LogisticEiiiiiPKaPa+0x62>
    }
  }
}
   2c258:	b009      	add	sp, #36	; 0x24
   2c25a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002c25e <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MaximumOp2opIfEET_S6_S6_>:
  static data_type op(data_type el1, data_type el2) {
   2c25e:	ee07 0a10 	vmov	s14, r0
   2c262:	ee07 1a90 	vmov	s15, r1
    return el1 > el2 ? el1 : el2;
   2c266:	eeb4 7ae7 	vcmpe.f32	s14, s15
   2c26a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  }
   2c26e:	fe77 7a27 	vselgt.f32	s15, s14, s15
   2c272:	ee17 0a90 	vmov	r0, s15
   2c276:	4770      	bx	lr

0002c278 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MaximumOp2opIhEET_S6_S6_>:
   2c278:	4288      	cmp	r0, r1
   2c27a:	bf38      	it	cc
   2c27c:	4608      	movcc	r0, r1
   2c27e:	4770      	bx	lr

0002c280 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MaximumOp2opIaEET_S6_S6_>:
   2c280:	4288      	cmp	r0, r1
   2c282:	bfb8      	it	lt
   2c284:	4608      	movlt	r0, r1
   2c286:	4770      	bx	lr

0002c288 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MaximumOp2opIiEET_S6_S6_>:
   2c288:	4288      	cmp	r0, r1
   2c28a:	bfb8      	it	lt
   2c28c:	4608      	movlt	r0, r1
   2c28e:	4770      	bx	lr

0002c290 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MaximumOp2opIxEET_S6_S6_>:
  static data_type op(data_type el1, data_type el2) {
   2c290:	b530      	push	{r4, r5, lr}
   2c292:	4614      	mov	r4, r2
   2c294:	461d      	mov	r5, r3
    return el1 > el2 ? el1 : el2;
   2c296:	460b      	mov	r3, r1
   2c298:	42a0      	cmp	r0, r4
   2c29a:	eb73 0105 	sbcs.w	r1, r3, r5
   2c29e:	4602      	mov	r2, r0
   2c2a0:	bfbc      	itt	lt
   2c2a2:	462b      	movlt	r3, r5
   2c2a4:	4622      	movlt	r2, r4
  }
   2c2a6:	4619      	mov	r1, r3
   2c2a8:	4610      	mov	r0, r2
   2c2aa:	bd30      	pop	{r4, r5, pc}

0002c2ac <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MinimumOp2opIfEET_S6_S6_>:
  static data_type op(data_type el1, data_type el2) {
   2c2ac:	ee07 0a10 	vmov	s14, r0
   2c2b0:	ee07 1a90 	vmov	s15, r1
    return el1 < el2 ? el1 : el2;
   2c2b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
   2c2b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  }
   2c2bc:	bf54      	ite	pl
   2c2be:	ee17 0a90 	vmovpl	r0, s15
   2c2c2:	ee17 0a10 	vmovmi	r0, s14
   2c2c6:	4770      	bx	lr

0002c2c8 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MinimumOp2opIhEET_S6_S6_>:
   2c2c8:	4288      	cmp	r0, r1
   2c2ca:	bf28      	it	cs
   2c2cc:	4608      	movcs	r0, r1
   2c2ce:	4770      	bx	lr

0002c2d0 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MinimumOp2opIaEET_S6_S6_>:
   2c2d0:	4288      	cmp	r0, r1
   2c2d2:	bfa8      	it	ge
   2c2d4:	4608      	movge	r0, r1
   2c2d6:	4770      	bx	lr

0002c2d8 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MinimumOp2opIiEET_S6_S6_>:
   2c2d8:	4288      	cmp	r0, r1
   2c2da:	bfa8      	it	ge
   2c2dc:	4608      	movge	r0, r1
   2c2de:	4770      	bx	lr

0002c2e0 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MinimumOp2opIxEET_S6_S6_>:
  static data_type op(data_type el1, data_type el2) {
   2c2e0:	b530      	push	{r4, r5, lr}
   2c2e2:	4614      	mov	r4, r2
   2c2e4:	461d      	mov	r5, r3
    return el1 < el2 ? el1 : el2;
   2c2e6:	460b      	mov	r3, r1
   2c2e8:	4284      	cmp	r4, r0
   2c2ea:	eb75 0103 	sbcs.w	r1, r5, r3
   2c2ee:	4602      	mov	r2, r0
   2c2f0:	bfbc      	itt	lt
   2c2f2:	462b      	movlt	r3, r5
   2c2f4:	4622      	movlt	r2, r4
  }
   2c2f6:	4619      	mov	r1, r3
   2c2f8:	4610      	mov	r0, r2
   2c2fa:	bd30      	pop	{r4, r5, pc}

0002c2fc <_ZNK6tflite12RuntimeShapeeqERKS0_>:
  bool operator==(const RuntimeShape& comp) const {
   2c2fc:	b508      	push	{r3, lr}
    return this->size_ == comp.size_ &&
   2c2fe:	6802      	ldr	r2, [r0, #0]
   2c300:	680b      	ldr	r3, [r1, #0]
   2c302:	429a      	cmp	r2, r3
   2c304:	d10e      	bne.n	2c324 <_ZNK6tflite12RuntimeShapeeqERKS0_+0x28>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   2c306:	2a05      	cmp	r2, #5
   2c308:	bfcc      	ite	gt
   2c30a:	6840      	ldrgt	r0, [r0, #4]
   2c30c:	3004      	addle	r0, #4
   2c30e:	2b05      	cmp	r3, #5
   2c310:	bfcc      	ite	gt
   2c312:	6849      	ldrgt	r1, [r1, #4]
   2c314:	3104      	addle	r1, #4
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32)) == 0;
   2c316:	0092      	lsls	r2, r2, #2
   2c318:	f004 fd64 	bl	30de4 <memcmp>
    return this->size_ == comp.size_ &&
   2c31c:	fab0 f080 	clz	r0, r0
   2c320:	0940      	lsrs	r0, r0, #5
  }
   2c322:	bd08      	pop	{r3, pc}
    return this->size_ == comp.size_ &&
   2c324:	2000      	movs	r0, #0
   2c326:	e7fc      	b.n	2c322 <_ZNK6tflite12RuntimeShapeeqERKS0_+0x26>

0002c328 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>:
inline int SubscriptToIndex(const NdArrayDesc<5>& desc, int indexes[5]) {
   2c328:	b530      	push	{r4, r5, lr}
  return indexes[0] * desc.strides[0] + indexes[1] * desc.strides[1] +
   2c32a:	684a      	ldr	r2, [r1, #4]
   2c32c:	6984      	ldr	r4, [r0, #24]
   2c32e:	680b      	ldr	r3, [r1, #0]
   2c330:	4362      	muls	r2, r4
   2c332:	6945      	ldr	r5, [r0, #20]
         indexes[2] * desc.strides[2] + indexes[3] * desc.strides[3] +
   2c334:	6a04      	ldr	r4, [r0, #32]
   2c336:	fb05 2203 	mla	r2, r5, r3, r2
   2c33a:	68cb      	ldr	r3, [r1, #12]
   2c33c:	fb04 2203 	mla	r2, r4, r3, r2
   2c340:	69c4      	ldr	r4, [r0, #28]
   2c342:	688b      	ldr	r3, [r1, #8]
         indexes[4] * desc.strides[4];
   2c344:	6a40      	ldr	r0, [r0, #36]	; 0x24
         indexes[2] * desc.strides[2] + indexes[3] * desc.strides[3] +
   2c346:	fb04 2303 	mla	r3, r4, r3, r2
         indexes[4] * desc.strides[4];
   2c34a:	690a      	ldr	r2, [r1, #16]
}
   2c34c:	fb00 3002 	mla	r0, r0, r2, r3
   2c350:	bd30      	pop	{r4, r5, pc}

0002c352 <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>:
inline void CopyDimsToDesc(const RuntimeShape& input_shape,
   2c352:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c354:	4606      	mov	r6, r0
  for (int i = N - 1; i >= 0; --i) {
   2c356:	2404      	movs	r4, #4
  int desc_stride = 1;
   2c358:	2701      	movs	r7, #1
   2c35a:	f101 0510 	add.w	r5, r1, #16
    desc_out->extents[i] = input_shape.Dims(i);
   2c35e:	4621      	mov	r1, r4
   2c360:	4630      	mov	r0, r6
   2c362:	f7fb f931 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2c366:	f845 0904 	str.w	r0, [r5], #-4
    desc_stride *= input_shape.Dims(i);
   2c36a:	4621      	mov	r1, r4
    desc_out->strides[i] = desc_stride;
   2c36c:	61af      	str	r7, [r5, #24]
    desc_stride *= input_shape.Dims(i);
   2c36e:	4630      	mov	r0, r6
   2c370:	f7fb f92a 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = N - 1; i >= 0; --i) {
   2c374:	3c01      	subs	r4, #1
    desc_stride *= input_shape.Dims(i);
   2c376:	fb00 f707 	mul.w	r7, r0, r7
  for (int i = N - 1; i >= 0; --i) {
   2c37a:	d2f0      	bcs.n	2c35e <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE+0xc>
}
   2c37c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002c37e <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>:
inline void NdArrayDescsForElementwiseBroadcast(
   2c37e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2c382:	460c      	mov	r4, r1
   2c384:	461e      	mov	r6, r3
  TFLITE_DCHECK(desc0_out != nullptr);
   2c386:	4615      	mov	r5, r2
inline void NdArrayDescsForElementwiseBroadcast(
   2c388:	b08d      	sub	sp, #52	; 0x34
  TFLITE_DCHECK(desc0_out != nullptr);
   2c38a:	b90a      	cbnz	r2, 2c390 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x12>
   2c38c:	f004 fd15 	bl	30dba <abort>
  TFLITE_DCHECK(desc1_out != nullptr);
   2c390:	2b00      	cmp	r3, #0
   2c392:	d0fb      	beq.n	2c38c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xe>
    return RuntimeShape(new_shape_size, shape, 1);
   2c394:	4602      	mov	r2, r0
   2c396:	2301      	movs	r3, #1
   2c398:	2105      	movs	r1, #5
   2c39a:	4668      	mov	r0, sp
   2c39c:	f7fb f9a9 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2c3a0:	4622      	mov	r2, r4
  for (int i = 0; i < N; ++i) {
   2c3a2:	2400      	movs	r4, #0
   2c3a4:	2301      	movs	r3, #1
   2c3a6:	2105      	movs	r1, #5
   2c3a8:	a806      	add	r0, sp, #24
   2c3aa:	f7fb f9a2 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  CopyDimsToDesc<N>(extended_input0_shape, desc0_out);
   2c3ae:	4629      	mov	r1, r5
   2c3b0:	4668      	mov	r0, sp
   2c3b2:	f7ff ffce 	bl	2c352 <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
  CopyDimsToDesc<N>(extended_input1_shape, desc1_out);
   2c3b6:	4631      	mov	r1, r6
   2c3b8:	a806      	add	r0, sp, #24
   2c3ba:	f7ff ffca 	bl	2c352 <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
   2c3be:	f04f 0814 	mov.w	r8, #20
   2c3c2:	46a1      	mov	r9, r4
    const int extent0 = extended_input0_shape.Dims(i);
   2c3c4:	4621      	mov	r1, r4
   2c3c6:	4668      	mov	r0, sp
   2c3c8:	f7fb f8fe 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int extent1 = extended_input1_shape.Dims(i);
   2c3cc:	4621      	mov	r1, r4
    const int extent0 = extended_input0_shape.Dims(i);
   2c3ce:	4607      	mov	r7, r0
    const int extent1 = extended_input1_shape.Dims(i);
   2c3d0:	a806      	add	r0, sp, #24
   2c3d2:	f7fb f8f9 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
    if (extent0 != extent1) {
   2c3d6:	4287      	cmp	r7, r0
   2c3d8:	d005      	beq.n	2c3e6 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x68>
      if (extent0 == 1) {
   2c3da:	2f01      	cmp	r7, #1
   2c3dc:	d111      	bne.n	2c402 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x84>
        desc0_out->strides[i] = 0;
   2c3de:	f845 9008 	str.w	r9, [r5, r8]
        desc0_out->extents[i] = extent1;
   2c3e2:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
  for (int i = 0; i < N; ++i) {
   2c3e6:	3401      	adds	r4, #1
   2c3e8:	2c05      	cmp	r4, #5
   2c3ea:	f108 0804 	add.w	r8, r8, #4
   2c3ee:	d1e9      	bne.n	2c3c4 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x46>
  auto extended_input1_shape = RuntimeShape::ExtendedShape(N, input1_shape);
   2c3f0:	a806      	add	r0, sp, #24
   2c3f2:	f7fb f8de 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  auto extended_input0_shape = RuntimeShape::ExtendedShape(N, input0_shape);
   2c3f6:	4668      	mov	r0, sp
   2c3f8:	f7fb f8db 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   2c3fc:	b00d      	add	sp, #52	; 0x34
   2c3fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        TFLITE_DCHECK_EQ(extent1, 1);
   2c402:	2801      	cmp	r0, #1
   2c404:	d1c2      	bne.n	2c38c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xe>
        desc1_out->strides[i] = 0;
   2c406:	f846 9008 	str.w	r9, [r6, r8]
        desc1_out->extents[i] = extent0;
   2c40a:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
   2c40e:	e7ea      	b.n	2c3e6 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x68>

0002c410 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>:
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   2c410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c414:	2700      	movs	r7, #0
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   2c416:	4606      	mov	r6, r0
   2c418:	460d      	mov	r5, r1
   2c41a:	4614      	mov	r4, r2
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c41c:	60d7      	str	r7, [r2, #12]
   2c41e:	68e2      	ldr	r2, [r4, #12]
   2c420:	68f3      	ldr	r3, [r6, #12]
   2c422:	429a      	cmp	r2, r3
   2c424:	da2d      	bge.n	2c482 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x72>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c426:	6127      	str	r7, [r4, #16]
   2c428:	6922      	ldr	r2, [r4, #16]
   2c42a:	6933      	ldr	r3, [r6, #16]
   2c42c:	429a      	cmp	r2, r3
   2c42e:	da24      	bge.n	2c47a <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x6a>
    CopyDimsToDesc(RuntimeShape::ExtendedShape(N, unextended_output_shape),
                   &output_desc);

    auto maxmin_func = [&](int indexes[N]) {
      output_data[SubscriptToIndex(output_desc, indexes)] =
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   2c430:	4621      	mov	r1, r4
   2c432:	6928      	ldr	r0, [r5, #16]
   2c434:	f7ff ff78 	bl	2c328 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
             input2_data[SubscriptToIndex(desc2, indexes)]);
   2c438:	4621      	mov	r1, r4
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   2c43a:	4681      	mov	r9, r0
             input2_data[SubscriptToIndex(desc2, indexes)]);
   2c43c:	69a8      	ldr	r0, [r5, #24]
   2c43e:	f7ff ff73 	bl	2c328 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
      output_data[SubscriptToIndex(output_desc, indexes)] =
   2c442:	4621      	mov	r1, r4
             input2_data[SubscriptToIndex(desc2, indexes)]);
   2c444:	4682      	mov	sl, r0
      output_data[SubscriptToIndex(output_desc, indexes)] =
   2c446:	6868      	ldr	r0, [r5, #4]
   2c448:	f7ff ff6e 	bl	2c328 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   2c44c:	682b      	ldr	r3, [r5, #0]
   2c44e:	681b      	ldr	r3, [r3, #0]
   2c450:	eb03 0880 	add.w	r8, r3, r0, lsl #2
             input2_data[SubscriptToIndex(desc2, indexes)]);
   2c454:	696b      	ldr	r3, [r5, #20]
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   2c456:	681a      	ldr	r2, [r3, #0]
   2c458:	68eb      	ldr	r3, [r5, #12]
   2c45a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
   2c45e:	6818      	ldr	r0, [r3, #0]
   2c460:	68ab      	ldr	r3, [r5, #8]
   2c462:	eb00 0089 	add.w	r0, r0, r9, lsl #2
   2c466:	681b      	ldr	r3, [r3, #0]
   2c468:	6811      	ldr	r1, [r2, #0]
   2c46a:	6800      	ldr	r0, [r0, #0]
   2c46c:	4798      	blx	r3
   2c46e:	6923      	ldr	r3, [r4, #16]
      output_data[SubscriptToIndex(output_desc, indexes)] =
   2c470:	f8c8 0000 	str.w	r0, [r8]
   2c474:	3301      	adds	r3, #1
   2c476:	6123      	str	r3, [r4, #16]
   2c478:	e7d6      	b.n	2c428 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x18>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c47a:	68e3      	ldr	r3, [r4, #12]
   2c47c:	3301      	adds	r3, #1
   2c47e:	60e3      	str	r3, [r4, #12]
   2c480:	e7cd      	b.n	2c41e <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0xe>
}
   2c482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002c486 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>:
void MaximumMinimumBroadcastSlow(const RuntimeShape& unextended_input1_shape,
   2c486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c48a:	b0ae      	sub	sp, #184	; 0xb8
   2c48c:	9103      	str	r1, [sp, #12]
   2c48e:	4611      	mov	r1, r2
   2c490:	4605      	mov	r5, r0
   2c492:	9e34      	ldr	r6, [sp, #208]	; 0xd0
   2c494:	9302      	str	r3, [sp, #8]
  if (unextended_input1_shape == unextended_input2_shape) {
   2c496:	9201      	str	r2, [sp, #4]
   2c498:	f7ff ff30 	bl	2c2fc <_ZNK6tflite12RuntimeShapeeqERKS0_>
   2c49c:	9901      	ldr	r1, [sp, #4]
   2c49e:	4604      	mov	r4, r0
   2c4a0:	b1b8      	cbz	r0, 2c4d2 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x4c>
        MatchingElementsSize(unextended_input1_shape, unextended_input2_shape,
   2c4a2:	4632      	mov	r2, r6
   2c4a4:	4628      	mov	r0, r5
   2c4a6:	f7fb f973 	bl	27790 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
    for (int i = 0; i < flat_size; ++i) {
   2c4aa:	2400      	movs	r4, #0
        MatchingElementsSize(unextended_input1_shape, unextended_input2_shape,
   2c4ac:	4606      	mov	r6, r0
    for (int i = 0; i < flat_size; ++i) {
   2c4ae:	42b4      	cmp	r4, r6
   2c4b0:	da5f      	bge.n	2c572 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xec>
      output_data[i] = op(input1_data[i], input2_data[i]);
   2c4b2:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   2c4b4:	eb03 0584 	add.w	r5, r3, r4, lsl #2
   2c4b8:	9b02      	ldr	r3, [sp, #8]
   2c4ba:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   2c4be:	9b03      	ldr	r3, [sp, #12]
   2c4c0:	6811      	ldr	r1, [r2, #0]
   2c4c2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   2c4c6:	6818      	ldr	r0, [r3, #0]
   2c4c8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   2c4ca:	4798      	blx	r3
    for (int i = 0; i < flat_size; ++i) {
   2c4cc:	3401      	adds	r4, #1
      output_data[i] = op(input1_data[i], input2_data[i]);
   2c4ce:	6028      	str	r0, [r5, #0]
    for (int i = 0; i < flat_size; ++i) {
   2c4d0:	e7ed      	b.n	2c4ae <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x28>
    TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), N);
   2c4d2:	682b      	ldr	r3, [r5, #0]
   2c4d4:	2b05      	cmp	r3, #5
   2c4d6:	dd01      	ble.n	2c4dc <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x56>
   2c4d8:	f004 fc6f 	bl	30dba <abort>
    TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), N);
   2c4dc:	680b      	ldr	r3, [r1, #0]
   2c4de:	2b05      	cmp	r3, #5
   2c4e0:	dcfa      	bgt.n	2c4d8 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x52>
    TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), N);
   2c4e2:	6833      	ldr	r3, [r6, #0]
   2c4e4:	2b05      	cmp	r3, #5
   2c4e6:	dcf7      	bgt.n	2c4d8 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x52>
    NdArrayDescsForElementwiseBroadcast(
   2c4e8:	af1a      	add	r7, sp, #104	; 0x68
   2c4ea:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   2c4ee:	4628      	mov	r0, r5
   2c4f0:	463b      	mov	r3, r7
   2c4f2:	4642      	mov	r2, r8
   2c4f4:	f7ff ff43 	bl	2c37e <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
    CopyDimsToDesc(RuntimeShape::ExtendedShape(N, unextended_output_shape),
   2c4f8:	ad24      	add	r5, sp, #144	; 0x90
   2c4fa:	2301      	movs	r3, #1
   2c4fc:	4632      	mov	r2, r6
   2c4fe:	2105      	movs	r1, #5
   2c500:	a809      	add	r0, sp, #36	; 0x24
   2c502:	f7fb f8f6 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2c506:	4629      	mov	r1, r5
   2c508:	a809      	add	r0, sp, #36	; 0x24
   2c50a:	f7ff ff22 	bl	2c352 <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
   2c50e:	a809      	add	r0, sp, #36	; 0x24
   2c510:	f7fb f84f 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
    auto maxmin_func = [&](int indexes[N]) {
   2c514:	ab35      	add	r3, sp, #212	; 0xd4
   2c516:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
   2c51a:	ab36      	add	r3, sp, #216	; 0xd8
   2c51c:	930b      	str	r3, [sp, #44]	; 0x2c
   2c51e:	ab03      	add	r3, sp, #12
   2c520:	e9cd 380c 	strd	r3, r8, [sp, #48]	; 0x30
  int indexes[N] = {0};
   2c524:	2214      	movs	r2, #20
   2c526:	ab02      	add	r3, sp, #8
   2c528:	4621      	mov	r1, r4
   2c52a:	a804      	add	r0, sp, #16
   2c52c:	e9cd 370e 	strd	r3, r7, [sp, #56]	; 0x38
   2c530:	f004 fc8d 	bl	30e4e <memset>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c534:	9a04      	ldr	r2, [sp, #16]
   2c536:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2c538:	429a      	cmp	r2, r3
   2c53a:	da1a      	bge.n	2c572 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xec>
   2c53c:	9405      	str	r4, [sp, #20]
   2c53e:	9a05      	ldr	r2, [sp, #20]
   2c540:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2c542:	429a      	cmp	r2, r3
   2c544:	da11      	bge.n	2c56a <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xe4>
   2c546:	9406      	str	r4, [sp, #24]
   2c548:	9a06      	ldr	r2, [sp, #24]
   2c54a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c54c:	429a      	cmp	r2, r3
   2c54e:	da08      	bge.n	2c562 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xdc>
    NDOpsHelperImpl<N, DIM + 1, Calc>(output, calc, indexes);
   2c550:	4628      	mov	r0, r5
   2c552:	aa04      	add	r2, sp, #16
   2c554:	a909      	add	r1, sp, #36	; 0x24
   2c556:	f7ff ff5b 	bl	2c410 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c55a:	9b06      	ldr	r3, [sp, #24]
   2c55c:	3301      	adds	r3, #1
   2c55e:	9306      	str	r3, [sp, #24]
   2c560:	e7f2      	b.n	2c548 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xc2>
   2c562:	9b05      	ldr	r3, [sp, #20]
   2c564:	3301      	adds	r3, #1
   2c566:	9305      	str	r3, [sp, #20]
   2c568:	e7e9      	b.n	2c53e <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xb8>
   2c56a:	9b04      	ldr	r3, [sp, #16]
   2c56c:	3301      	adds	r3, #1
   2c56e:	9304      	str	r3, [sp, #16]
   2c570:	e7e0      	b.n	2c534 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xae>
    };
    NDOpsHelper<N>(output_desc, maxmin_func);
  }
}
   2c572:	b02e      	add	sp, #184	; 0xb8
   2c574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c578 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>:
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   2c578:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c57c:	2700      	movs	r7, #0
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   2c57e:	4606      	mov	r6, r0
   2c580:	460d      	mov	r5, r1
   2c582:	4614      	mov	r4, r2
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c584:	60d7      	str	r7, [r2, #12]
   2c586:	68e2      	ldr	r2, [r4, #12]
   2c588:	68f3      	ldr	r3, [r6, #12]
   2c58a:	429a      	cmp	r2, r3
   2c58c:	da2b      	bge.n	2c5e6 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x6e>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c58e:	6127      	str	r7, [r4, #16]
   2c590:	6922      	ldr	r2, [r4, #16]
   2c592:	6933      	ldr	r3, [r6, #16]
   2c594:	429a      	cmp	r2, r3
   2c596:	da22      	bge.n	2c5de <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x66>
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   2c598:	4621      	mov	r1, r4
   2c59a:	6928      	ldr	r0, [r5, #16]
   2c59c:	f7ff fec4 	bl	2c328 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
             input2_data[SubscriptToIndex(desc2, indexes)]);
   2c5a0:	4621      	mov	r1, r4
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   2c5a2:	4681      	mov	r9, r0
             input2_data[SubscriptToIndex(desc2, indexes)]);
   2c5a4:	69a8      	ldr	r0, [r5, #24]
   2c5a6:	f7ff febf 	bl	2c328 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
      output_data[SubscriptToIndex(output_desc, indexes)] =
   2c5aa:	4621      	mov	r1, r4
             input2_data[SubscriptToIndex(desc2, indexes)]);
   2c5ac:	4682      	mov	sl, r0
      output_data[SubscriptToIndex(output_desc, indexes)] =
   2c5ae:	6868      	ldr	r0, [r5, #4]
   2c5b0:	f7ff feba 	bl	2c328 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   2c5b4:	682b      	ldr	r3, [r5, #0]
   2c5b6:	4680      	mov	r8, r0
   2c5b8:	f8d3 b000 	ldr.w	fp, [r3]
             input2_data[SubscriptToIndex(desc2, indexes)]);
   2c5bc:	696b      	ldr	r3, [r5, #20]
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   2c5be:	6819      	ldr	r1, [r3, #0]
   2c5c0:	68eb      	ldr	r3, [r5, #12]
   2c5c2:	f811 100a 	ldrb.w	r1, [r1, sl]
   2c5c6:	681a      	ldr	r2, [r3, #0]
   2c5c8:	68ab      	ldr	r3, [r5, #8]
   2c5ca:	f812 0009 	ldrb.w	r0, [r2, r9]
   2c5ce:	681b      	ldr	r3, [r3, #0]
   2c5d0:	4798      	blx	r3
      output_data[SubscriptToIndex(output_desc, indexes)] =
   2c5d2:	f80b 0008 	strb.w	r0, [fp, r8]
   2c5d6:	6923      	ldr	r3, [r4, #16]
   2c5d8:	3301      	adds	r3, #1
   2c5da:	6123      	str	r3, [r4, #16]
   2c5dc:	e7d8      	b.n	2c590 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x18>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c5de:	68e3      	ldr	r3, [r4, #12]
   2c5e0:	3301      	adds	r3, #1
   2c5e2:	60e3      	str	r3, [r4, #12]
   2c5e4:	e7cf      	b.n	2c586 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0xe>
}
   2c5e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002c5ea <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>:
void MaximumMinimumBroadcastSlow(const RuntimeShape& unextended_input1_shape,
   2c5ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c5ee:	b0ae      	sub	sp, #184	; 0xb8
   2c5f0:	9103      	str	r1, [sp, #12]
   2c5f2:	4611      	mov	r1, r2
   2c5f4:	4605      	mov	r5, r0
   2c5f6:	9e34      	ldr	r6, [sp, #208]	; 0xd0
   2c5f8:	9302      	str	r3, [sp, #8]
  if (unextended_input1_shape == unextended_input2_shape) {
   2c5fa:	9201      	str	r2, [sp, #4]
   2c5fc:	f7ff fe7e 	bl	2c2fc <_ZNK6tflite12RuntimeShapeeqERKS0_>
   2c600:	9901      	ldr	r1, [sp, #4]
   2c602:	4604      	mov	r4, r0
   2c604:	b188      	cbz	r0, 2c62a <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x40>
        MatchingElementsSize(unextended_input1_shape, unextended_input2_shape,
   2c606:	4628      	mov	r0, r5
   2c608:	4632      	mov	r2, r6
   2c60a:	f7fb f8c1 	bl	27790 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
    for (int i = 0; i < flat_size; ++i) {
   2c60e:	2400      	movs	r4, #0
        MatchingElementsSize(unextended_input1_shape, unextended_input2_shape,
   2c610:	4605      	mov	r5, r0
    for (int i = 0; i < flat_size; ++i) {
   2c612:	42ac      	cmp	r4, r5
   2c614:	da59      	bge.n	2c6ca <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xe0>
      output_data[i] = op(input1_data[i], input2_data[i]);
   2c616:	9b02      	ldr	r3, [sp, #8]
   2c618:	9e35      	ldr	r6, [sp, #212]	; 0xd4
   2c61a:	5d19      	ldrb	r1, [r3, r4]
   2c61c:	9b03      	ldr	r3, [sp, #12]
   2c61e:	5d18      	ldrb	r0, [r3, r4]
   2c620:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   2c622:	4798      	blx	r3
   2c624:	5530      	strb	r0, [r6, r4]
    for (int i = 0; i < flat_size; ++i) {
   2c626:	3401      	adds	r4, #1
   2c628:	e7f3      	b.n	2c612 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x28>
    TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), N);
   2c62a:	682b      	ldr	r3, [r5, #0]
   2c62c:	2b05      	cmp	r3, #5
   2c62e:	dd01      	ble.n	2c634 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x4a>
   2c630:	f004 fbc3 	bl	30dba <abort>
    TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), N);
   2c634:	680b      	ldr	r3, [r1, #0]
   2c636:	2b05      	cmp	r3, #5
   2c638:	dcfa      	bgt.n	2c630 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x46>
    TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), N);
   2c63a:	6833      	ldr	r3, [r6, #0]
   2c63c:	2b05      	cmp	r3, #5
   2c63e:	dcf7      	bgt.n	2c630 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x46>
    NdArrayDescsForElementwiseBroadcast(
   2c640:	af1a      	add	r7, sp, #104	; 0x68
   2c642:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   2c646:	4628      	mov	r0, r5
   2c648:	463b      	mov	r3, r7
   2c64a:	4642      	mov	r2, r8
   2c64c:	f7ff fe97 	bl	2c37e <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
    CopyDimsToDesc(RuntimeShape::ExtendedShape(N, unextended_output_shape),
   2c650:	ad24      	add	r5, sp, #144	; 0x90
   2c652:	2301      	movs	r3, #1
   2c654:	4632      	mov	r2, r6
   2c656:	2105      	movs	r1, #5
   2c658:	a809      	add	r0, sp, #36	; 0x24
   2c65a:	f7fb f84a 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2c65e:	4629      	mov	r1, r5
   2c660:	a809      	add	r0, sp, #36	; 0x24
   2c662:	f7ff fe76 	bl	2c352 <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
   2c666:	a809      	add	r0, sp, #36	; 0x24
   2c668:	f7fa ffa3 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
    auto maxmin_func = [&](int indexes[N]) {
   2c66c:	ab35      	add	r3, sp, #212	; 0xd4
   2c66e:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
   2c672:	ab36      	add	r3, sp, #216	; 0xd8
   2c674:	930b      	str	r3, [sp, #44]	; 0x2c
   2c676:	ab03      	add	r3, sp, #12
   2c678:	e9cd 380c 	strd	r3, r8, [sp, #48]	; 0x30
  int indexes[N] = {0};
   2c67c:	2214      	movs	r2, #20
   2c67e:	ab02      	add	r3, sp, #8
   2c680:	4621      	mov	r1, r4
   2c682:	a804      	add	r0, sp, #16
   2c684:	e9cd 370e 	strd	r3, r7, [sp, #56]	; 0x38
   2c688:	f004 fbe1 	bl	30e4e <memset>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c68c:	9a04      	ldr	r2, [sp, #16]
   2c68e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2c690:	429a      	cmp	r2, r3
   2c692:	da1a      	bge.n	2c6ca <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xe0>
   2c694:	9405      	str	r4, [sp, #20]
   2c696:	9a05      	ldr	r2, [sp, #20]
   2c698:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2c69a:	429a      	cmp	r2, r3
   2c69c:	da11      	bge.n	2c6c2 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xd8>
   2c69e:	9406      	str	r4, [sp, #24]
   2c6a0:	9a06      	ldr	r2, [sp, #24]
   2c6a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c6a4:	429a      	cmp	r2, r3
   2c6a6:	da08      	bge.n	2c6ba <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xd0>
    NDOpsHelperImpl<N, DIM + 1, Calc>(output, calc, indexes);
   2c6a8:	4628      	mov	r0, r5
   2c6aa:	aa04      	add	r2, sp, #16
   2c6ac:	a909      	add	r1, sp, #36	; 0x24
   2c6ae:	f7ff ff63 	bl	2c578 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c6b2:	9b06      	ldr	r3, [sp, #24]
   2c6b4:	3301      	adds	r3, #1
   2c6b6:	9306      	str	r3, [sp, #24]
   2c6b8:	e7f2      	b.n	2c6a0 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xb6>
   2c6ba:	9b05      	ldr	r3, [sp, #20]
   2c6bc:	3301      	adds	r3, #1
   2c6be:	9305      	str	r3, [sp, #20]
   2c6c0:	e7e9      	b.n	2c696 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xac>
   2c6c2:	9b04      	ldr	r3, [sp, #16]
   2c6c4:	3301      	adds	r3, #1
   2c6c6:	9304      	str	r3, [sp, #16]
   2c6c8:	e7e0      	b.n	2c68c <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xa2>
}
   2c6ca:	b02e      	add	sp, #184	; 0xb8
   2c6cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c6d0 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>:
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   2c6d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c6d4:	2700      	movs	r7, #0
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   2c6d6:	4606      	mov	r6, r0
   2c6d8:	460d      	mov	r5, r1
   2c6da:	4614      	mov	r4, r2
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c6dc:	60d7      	str	r7, [r2, #12]
   2c6de:	68e2      	ldr	r2, [r4, #12]
   2c6e0:	68f3      	ldr	r3, [r6, #12]
   2c6e2:	429a      	cmp	r2, r3
   2c6e4:	da2b      	bge.n	2c73e <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x6e>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c6e6:	6127      	str	r7, [r4, #16]
   2c6e8:	6922      	ldr	r2, [r4, #16]
   2c6ea:	6933      	ldr	r3, [r6, #16]
   2c6ec:	429a      	cmp	r2, r3
   2c6ee:	da22      	bge.n	2c736 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x66>
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   2c6f0:	4621      	mov	r1, r4
   2c6f2:	6928      	ldr	r0, [r5, #16]
   2c6f4:	f7ff fe18 	bl	2c328 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
             input2_data[SubscriptToIndex(desc2, indexes)]);
   2c6f8:	4621      	mov	r1, r4
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   2c6fa:	4681      	mov	r9, r0
             input2_data[SubscriptToIndex(desc2, indexes)]);
   2c6fc:	69a8      	ldr	r0, [r5, #24]
   2c6fe:	f7ff fe13 	bl	2c328 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
      output_data[SubscriptToIndex(output_desc, indexes)] =
   2c702:	4621      	mov	r1, r4
             input2_data[SubscriptToIndex(desc2, indexes)]);
   2c704:	4682      	mov	sl, r0
      output_data[SubscriptToIndex(output_desc, indexes)] =
   2c706:	6868      	ldr	r0, [r5, #4]
   2c708:	f7ff fe0e 	bl	2c328 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   2c70c:	682b      	ldr	r3, [r5, #0]
   2c70e:	4680      	mov	r8, r0
   2c710:	f8d3 b000 	ldr.w	fp, [r3]
             input2_data[SubscriptToIndex(desc2, indexes)]);
   2c714:	696b      	ldr	r3, [r5, #20]
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   2c716:	6819      	ldr	r1, [r3, #0]
   2c718:	68eb      	ldr	r3, [r5, #12]
   2c71a:	f911 100a 	ldrsb.w	r1, [r1, sl]
   2c71e:	681a      	ldr	r2, [r3, #0]
   2c720:	68ab      	ldr	r3, [r5, #8]
   2c722:	f912 0009 	ldrsb.w	r0, [r2, r9]
   2c726:	681b      	ldr	r3, [r3, #0]
   2c728:	4798      	blx	r3
      output_data[SubscriptToIndex(output_desc, indexes)] =
   2c72a:	f80b 0008 	strb.w	r0, [fp, r8]
   2c72e:	6923      	ldr	r3, [r4, #16]
   2c730:	3301      	adds	r3, #1
   2c732:	6123      	str	r3, [r4, #16]
   2c734:	e7d8      	b.n	2c6e8 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x18>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c736:	68e3      	ldr	r3, [r4, #12]
   2c738:	3301      	adds	r3, #1
   2c73a:	60e3      	str	r3, [r4, #12]
   2c73c:	e7cf      	b.n	2c6de <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0xe>
}
   2c73e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002c742 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>:
void MaximumMinimumBroadcastSlow(const RuntimeShape& unextended_input1_shape,
   2c742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c746:	b0ae      	sub	sp, #184	; 0xb8
   2c748:	9103      	str	r1, [sp, #12]
   2c74a:	4611      	mov	r1, r2
   2c74c:	4605      	mov	r5, r0
   2c74e:	9e34      	ldr	r6, [sp, #208]	; 0xd0
   2c750:	9302      	str	r3, [sp, #8]
  if (unextended_input1_shape == unextended_input2_shape) {
   2c752:	9201      	str	r2, [sp, #4]
   2c754:	f7ff fdd2 	bl	2c2fc <_ZNK6tflite12RuntimeShapeeqERKS0_>
   2c758:	9901      	ldr	r1, [sp, #4]
   2c75a:	4604      	mov	r4, r0
   2c75c:	b188      	cbz	r0, 2c782 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x40>
        MatchingElementsSize(unextended_input1_shape, unextended_input2_shape,
   2c75e:	4628      	mov	r0, r5
   2c760:	4632      	mov	r2, r6
   2c762:	f7fb f815 	bl	27790 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
    for (int i = 0; i < flat_size; ++i) {
   2c766:	2400      	movs	r4, #0
        MatchingElementsSize(unextended_input1_shape, unextended_input2_shape,
   2c768:	4605      	mov	r5, r0
    for (int i = 0; i < flat_size; ++i) {
   2c76a:	42ac      	cmp	r4, r5
   2c76c:	da59      	bge.n	2c822 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xe0>
      output_data[i] = op(input1_data[i], input2_data[i]);
   2c76e:	9b02      	ldr	r3, [sp, #8]
   2c770:	9e35      	ldr	r6, [sp, #212]	; 0xd4
   2c772:	5719      	ldrsb	r1, [r3, r4]
   2c774:	9b03      	ldr	r3, [sp, #12]
   2c776:	5718      	ldrsb	r0, [r3, r4]
   2c778:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   2c77a:	4798      	blx	r3
   2c77c:	5530      	strb	r0, [r6, r4]
    for (int i = 0; i < flat_size; ++i) {
   2c77e:	3401      	adds	r4, #1
   2c780:	e7f3      	b.n	2c76a <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x28>
    TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), N);
   2c782:	682b      	ldr	r3, [r5, #0]
   2c784:	2b05      	cmp	r3, #5
   2c786:	dd01      	ble.n	2c78c <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x4a>
   2c788:	f004 fb17 	bl	30dba <abort>
    TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), N);
   2c78c:	680b      	ldr	r3, [r1, #0]
   2c78e:	2b05      	cmp	r3, #5
   2c790:	dcfa      	bgt.n	2c788 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x46>
    TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), N);
   2c792:	6833      	ldr	r3, [r6, #0]
   2c794:	2b05      	cmp	r3, #5
   2c796:	dcf7      	bgt.n	2c788 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x46>
    NdArrayDescsForElementwiseBroadcast(
   2c798:	af1a      	add	r7, sp, #104	; 0x68
   2c79a:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   2c79e:	4628      	mov	r0, r5
   2c7a0:	463b      	mov	r3, r7
   2c7a2:	4642      	mov	r2, r8
   2c7a4:	f7ff fdeb 	bl	2c37e <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
    CopyDimsToDesc(RuntimeShape::ExtendedShape(N, unextended_output_shape),
   2c7a8:	ad24      	add	r5, sp, #144	; 0x90
   2c7aa:	2301      	movs	r3, #1
   2c7ac:	4632      	mov	r2, r6
   2c7ae:	2105      	movs	r1, #5
   2c7b0:	a809      	add	r0, sp, #36	; 0x24
   2c7b2:	f7fa ff9e 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2c7b6:	4629      	mov	r1, r5
   2c7b8:	a809      	add	r0, sp, #36	; 0x24
   2c7ba:	f7ff fdca 	bl	2c352 <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
   2c7be:	a809      	add	r0, sp, #36	; 0x24
   2c7c0:	f7fa fef7 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
    auto maxmin_func = [&](int indexes[N]) {
   2c7c4:	ab35      	add	r3, sp, #212	; 0xd4
   2c7c6:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
   2c7ca:	ab36      	add	r3, sp, #216	; 0xd8
   2c7cc:	930b      	str	r3, [sp, #44]	; 0x2c
   2c7ce:	ab03      	add	r3, sp, #12
   2c7d0:	e9cd 380c 	strd	r3, r8, [sp, #48]	; 0x30
  int indexes[N] = {0};
   2c7d4:	2214      	movs	r2, #20
   2c7d6:	ab02      	add	r3, sp, #8
   2c7d8:	4621      	mov	r1, r4
   2c7da:	a804      	add	r0, sp, #16
   2c7dc:	e9cd 370e 	strd	r3, r7, [sp, #56]	; 0x38
   2c7e0:	f004 fb35 	bl	30e4e <memset>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c7e4:	9a04      	ldr	r2, [sp, #16]
   2c7e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2c7e8:	429a      	cmp	r2, r3
   2c7ea:	da1a      	bge.n	2c822 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xe0>
   2c7ec:	9405      	str	r4, [sp, #20]
   2c7ee:	9a05      	ldr	r2, [sp, #20]
   2c7f0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2c7f2:	429a      	cmp	r2, r3
   2c7f4:	da11      	bge.n	2c81a <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xd8>
   2c7f6:	9406      	str	r4, [sp, #24]
   2c7f8:	9a06      	ldr	r2, [sp, #24]
   2c7fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c7fc:	429a      	cmp	r2, r3
   2c7fe:	da08      	bge.n	2c812 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xd0>
    NDOpsHelperImpl<N, DIM + 1, Calc>(output, calc, indexes);
   2c800:	4628      	mov	r0, r5
   2c802:	aa04      	add	r2, sp, #16
   2c804:	a909      	add	r1, sp, #36	; 0x24
   2c806:	f7ff ff63 	bl	2c6d0 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c80a:	9b06      	ldr	r3, [sp, #24]
   2c80c:	3301      	adds	r3, #1
   2c80e:	9306      	str	r3, [sp, #24]
   2c810:	e7f2      	b.n	2c7f8 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xb6>
   2c812:	9b05      	ldr	r3, [sp, #20]
   2c814:	3301      	adds	r3, #1
   2c816:	9305      	str	r3, [sp, #20]
   2c818:	e7e9      	b.n	2c7ee <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xac>
   2c81a:	9b04      	ldr	r3, [sp, #16]
   2c81c:	3301      	adds	r3, #1
   2c81e:	9304      	str	r3, [sp, #16]
   2c820:	e7e0      	b.n	2c7e4 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xa2>
}
   2c822:	b02e      	add	sp, #184	; 0xb8
   2c824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c828 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>:
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   2c828:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c82c:	2700      	movs	r7, #0
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   2c82e:	4606      	mov	r6, r0
   2c830:	460d      	mov	r5, r1
   2c832:	4614      	mov	r4, r2
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c834:	60d7      	str	r7, [r2, #12]
   2c836:	68e2      	ldr	r2, [r4, #12]
   2c838:	68f3      	ldr	r3, [r6, #12]
   2c83a:	429a      	cmp	r2, r3
   2c83c:	da2b      	bge.n	2c896 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x6e>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c83e:	6127      	str	r7, [r4, #16]
   2c840:	6922      	ldr	r2, [r4, #16]
   2c842:	6933      	ldr	r3, [r6, #16]
   2c844:	429a      	cmp	r2, r3
   2c846:	da22      	bge.n	2c88e <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x66>
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   2c848:	4621      	mov	r1, r4
   2c84a:	6928      	ldr	r0, [r5, #16]
   2c84c:	f7ff fd6c 	bl	2c328 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
             input2_data[SubscriptToIndex(desc2, indexes)]);
   2c850:	4621      	mov	r1, r4
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   2c852:	4681      	mov	r9, r0
             input2_data[SubscriptToIndex(desc2, indexes)]);
   2c854:	69a8      	ldr	r0, [r5, #24]
   2c856:	f7ff fd67 	bl	2c328 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
      output_data[SubscriptToIndex(output_desc, indexes)] =
   2c85a:	4621      	mov	r1, r4
             input2_data[SubscriptToIndex(desc2, indexes)]);
   2c85c:	4682      	mov	sl, r0
      output_data[SubscriptToIndex(output_desc, indexes)] =
   2c85e:	6868      	ldr	r0, [r5, #4]
   2c860:	f7ff fd62 	bl	2c328 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   2c864:	682b      	ldr	r3, [r5, #0]
   2c866:	4680      	mov	r8, r0
   2c868:	f8d3 b000 	ldr.w	fp, [r3]
             input2_data[SubscriptToIndex(desc2, indexes)]);
   2c86c:	696b      	ldr	r3, [r5, #20]
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   2c86e:	6819      	ldr	r1, [r3, #0]
   2c870:	68eb      	ldr	r3, [r5, #12]
   2c872:	f851 102a 	ldr.w	r1, [r1, sl, lsl #2]
   2c876:	681a      	ldr	r2, [r3, #0]
   2c878:	68ab      	ldr	r3, [r5, #8]
   2c87a:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
   2c87e:	681b      	ldr	r3, [r3, #0]
   2c880:	4798      	blx	r3
      output_data[SubscriptToIndex(output_desc, indexes)] =
   2c882:	f84b 0028 	str.w	r0, [fp, r8, lsl #2]
   2c886:	6923      	ldr	r3, [r4, #16]
   2c888:	3301      	adds	r3, #1
   2c88a:	6123      	str	r3, [r4, #16]
   2c88c:	e7d8      	b.n	2c840 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x18>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c88e:	68e3      	ldr	r3, [r4, #12]
   2c890:	3301      	adds	r3, #1
   2c892:	60e3      	str	r3, [r4, #12]
   2c894:	e7cf      	b.n	2c836 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0xe>
}
   2c896:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002c89a <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>:
void MaximumMinimumBroadcastSlow(const RuntimeShape& unextended_input1_shape,
   2c89a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c89e:	b0ae      	sub	sp, #184	; 0xb8
   2c8a0:	9103      	str	r1, [sp, #12]
   2c8a2:	4611      	mov	r1, r2
   2c8a4:	4605      	mov	r5, r0
   2c8a6:	9e34      	ldr	r6, [sp, #208]	; 0xd0
   2c8a8:	9302      	str	r3, [sp, #8]
  if (unextended_input1_shape == unextended_input2_shape) {
   2c8aa:	9201      	str	r2, [sp, #4]
   2c8ac:	f7ff fd26 	bl	2c2fc <_ZNK6tflite12RuntimeShapeeqERKS0_>
   2c8b0:	9901      	ldr	r1, [sp, #4]
   2c8b2:	4604      	mov	r4, r0
   2c8b4:	b1a0      	cbz	r0, 2c8e0 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x46>
        MatchingElementsSize(unextended_input1_shape, unextended_input2_shape,
   2c8b6:	4628      	mov	r0, r5
   2c8b8:	4632      	mov	r2, r6
   2c8ba:	f7fa ff69 	bl	27790 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
    for (int i = 0; i < flat_size; ++i) {
   2c8be:	2400      	movs	r4, #0
        MatchingElementsSize(unextended_input1_shape, unextended_input2_shape,
   2c8c0:	4605      	mov	r5, r0
    for (int i = 0; i < flat_size; ++i) {
   2c8c2:	42ac      	cmp	r4, r5
   2c8c4:	da5c      	bge.n	2c980 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xe6>
      output_data[i] = op(input1_data[i], input2_data[i]);
   2c8c6:	9b02      	ldr	r3, [sp, #8]
   2c8c8:	9e35      	ldr	r6, [sp, #212]	; 0xd4
   2c8ca:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   2c8ce:	9b03      	ldr	r3, [sp, #12]
   2c8d0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   2c8d4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   2c8d6:	4798      	blx	r3
   2c8d8:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
    for (int i = 0; i < flat_size; ++i) {
   2c8dc:	3401      	adds	r4, #1
   2c8de:	e7f0      	b.n	2c8c2 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x28>
    TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), N);
   2c8e0:	682b      	ldr	r3, [r5, #0]
   2c8e2:	2b05      	cmp	r3, #5
   2c8e4:	dd01      	ble.n	2c8ea <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x50>
   2c8e6:	f004 fa68 	bl	30dba <abort>
    TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), N);
   2c8ea:	680b      	ldr	r3, [r1, #0]
   2c8ec:	2b05      	cmp	r3, #5
   2c8ee:	dcfa      	bgt.n	2c8e6 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x4c>
    TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), N);
   2c8f0:	6833      	ldr	r3, [r6, #0]
   2c8f2:	2b05      	cmp	r3, #5
   2c8f4:	dcf7      	bgt.n	2c8e6 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x4c>
    NdArrayDescsForElementwiseBroadcast(
   2c8f6:	af1a      	add	r7, sp, #104	; 0x68
   2c8f8:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   2c8fc:	4628      	mov	r0, r5
   2c8fe:	463b      	mov	r3, r7
   2c900:	4642      	mov	r2, r8
   2c902:	f7ff fd3c 	bl	2c37e <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
    CopyDimsToDesc(RuntimeShape::ExtendedShape(N, unextended_output_shape),
   2c906:	ad24      	add	r5, sp, #144	; 0x90
   2c908:	2301      	movs	r3, #1
   2c90a:	4632      	mov	r2, r6
   2c90c:	2105      	movs	r1, #5
   2c90e:	a809      	add	r0, sp, #36	; 0x24
   2c910:	f7fa feef 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2c914:	4629      	mov	r1, r5
   2c916:	a809      	add	r0, sp, #36	; 0x24
   2c918:	f7ff fd1b 	bl	2c352 <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
   2c91c:	a809      	add	r0, sp, #36	; 0x24
   2c91e:	f7fa fe48 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
    auto maxmin_func = [&](int indexes[N]) {
   2c922:	ab35      	add	r3, sp, #212	; 0xd4
   2c924:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
   2c928:	ab36      	add	r3, sp, #216	; 0xd8
   2c92a:	930b      	str	r3, [sp, #44]	; 0x2c
   2c92c:	ab03      	add	r3, sp, #12
   2c92e:	e9cd 380c 	strd	r3, r8, [sp, #48]	; 0x30
  int indexes[N] = {0};
   2c932:	2214      	movs	r2, #20
   2c934:	ab02      	add	r3, sp, #8
   2c936:	4621      	mov	r1, r4
   2c938:	a804      	add	r0, sp, #16
   2c93a:	e9cd 370e 	strd	r3, r7, [sp, #56]	; 0x38
   2c93e:	f004 fa86 	bl	30e4e <memset>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c942:	9a04      	ldr	r2, [sp, #16]
   2c944:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2c946:	429a      	cmp	r2, r3
   2c948:	da1a      	bge.n	2c980 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xe6>
   2c94a:	9405      	str	r4, [sp, #20]
   2c94c:	9a05      	ldr	r2, [sp, #20]
   2c94e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2c950:	429a      	cmp	r2, r3
   2c952:	da11      	bge.n	2c978 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xde>
   2c954:	9406      	str	r4, [sp, #24]
   2c956:	9a06      	ldr	r2, [sp, #24]
   2c958:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c95a:	429a      	cmp	r2, r3
   2c95c:	da08      	bge.n	2c970 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xd6>
    NDOpsHelperImpl<N, DIM + 1, Calc>(output, calc, indexes);
   2c95e:	4628      	mov	r0, r5
   2c960:	aa04      	add	r2, sp, #16
   2c962:	a909      	add	r1, sp, #36	; 0x24
   2c964:	f7ff ff60 	bl	2c828 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c968:	9b06      	ldr	r3, [sp, #24]
   2c96a:	3301      	adds	r3, #1
   2c96c:	9306      	str	r3, [sp, #24]
   2c96e:	e7f2      	b.n	2c956 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xbc>
   2c970:	9b05      	ldr	r3, [sp, #20]
   2c972:	3301      	adds	r3, #1
   2c974:	9305      	str	r3, [sp, #20]
   2c976:	e7e9      	b.n	2c94c <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xb2>
   2c978:	9b04      	ldr	r3, [sp, #16]
   2c97a:	3301      	adds	r3, #1
   2c97c:	9304      	str	r3, [sp, #16]
   2c97e:	e7e0      	b.n	2c942 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xa8>
}
   2c980:	b02e      	add	sp, #184	; 0xb8
   2c982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c986 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>:
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   2c986:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c98a:	2700      	movs	r7, #0
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   2c98c:	4606      	mov	r6, r0
   2c98e:	460d      	mov	r5, r1
   2c990:	4614      	mov	r4, r2
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c992:	60d7      	str	r7, [r2, #12]
   2c994:	68e2      	ldr	r2, [r4, #12]
   2c996:	68f3      	ldr	r3, [r6, #12]
   2c998:	429a      	cmp	r2, r3
   2c99a:	da30      	bge.n	2c9fe <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x78>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c99c:	6127      	str	r7, [r4, #16]
   2c99e:	6922      	ldr	r2, [r4, #16]
   2c9a0:	6933      	ldr	r3, [r6, #16]
   2c9a2:	429a      	cmp	r2, r3
   2c9a4:	da27      	bge.n	2c9f6 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x70>
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   2c9a6:	4621      	mov	r1, r4
   2c9a8:	6928      	ldr	r0, [r5, #16]
   2c9aa:	f7ff fcbd 	bl	2c328 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
             input2_data[SubscriptToIndex(desc2, indexes)]);
   2c9ae:	4621      	mov	r1, r4
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   2c9b0:	4681      	mov	r9, r0
             input2_data[SubscriptToIndex(desc2, indexes)]);
   2c9b2:	69a8      	ldr	r0, [r5, #24]
   2c9b4:	f7ff fcb8 	bl	2c328 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
      output_data[SubscriptToIndex(output_desc, indexes)] =
   2c9b8:	4621      	mov	r1, r4
             input2_data[SubscriptToIndex(desc2, indexes)]);
   2c9ba:	4682      	mov	sl, r0
      output_data[SubscriptToIndex(output_desc, indexes)] =
   2c9bc:	6868      	ldr	r0, [r5, #4]
   2c9be:	f7ff fcb3 	bl	2c328 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   2c9c2:	682b      	ldr	r3, [r5, #0]
   2c9c4:	681b      	ldr	r3, [r3, #0]
   2c9c6:	eb03 08c0 	add.w	r8, r3, r0, lsl #3
             input2_data[SubscriptToIndex(desc2, indexes)]);
   2c9ca:	696b      	ldr	r3, [r5, #20]
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   2c9cc:	681a      	ldr	r2, [r3, #0]
   2c9ce:	68eb      	ldr	r3, [r5, #12]
   2c9d0:	eb02 02ca 	add.w	r2, r2, sl, lsl #3
   2c9d4:	6818      	ldr	r0, [r3, #0]
   2c9d6:	68ab      	ldr	r3, [r5, #8]
   2c9d8:	eb00 00c9 	add.w	r0, r0, r9, lsl #3
   2c9dc:	e9d0 0100 	ldrd	r0, r1, [r0]
   2c9e0:	f8d3 9000 	ldr.w	r9, [r3]
   2c9e4:	e9d2 2300 	ldrd	r2, r3, [r2]
   2c9e8:	47c8      	blx	r9
   2c9ea:	6923      	ldr	r3, [r4, #16]
      output_data[SubscriptToIndex(output_desc, indexes)] =
   2c9ec:	e9c8 0100 	strd	r0, r1, [r8]
   2c9f0:	3301      	adds	r3, #1
   2c9f2:	6123      	str	r3, [r4, #16]
   2c9f4:	e7d3      	b.n	2c99e <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x18>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c9f6:	68e3      	ldr	r3, [r4, #12]
   2c9f8:	3301      	adds	r3, #1
   2c9fa:	60e3      	str	r3, [r4, #12]
   2c9fc:	e7ca      	b.n	2c994 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0xe>
}
   2c9fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002ca02 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>:
void MaximumMinimumBroadcastSlow(const RuntimeShape& unextended_input1_shape,
   2ca02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ca06:	b0ae      	sub	sp, #184	; 0xb8
   2ca08:	9103      	str	r1, [sp, #12]
   2ca0a:	4611      	mov	r1, r2
   2ca0c:	4605      	mov	r5, r0
   2ca0e:	9e34      	ldr	r6, [sp, #208]	; 0xd0
   2ca10:	9302      	str	r3, [sp, #8]
  if (unextended_input1_shape == unextended_input2_shape) {
   2ca12:	9201      	str	r2, [sp, #4]
   2ca14:	f7ff fc72 	bl	2c2fc <_ZNK6tflite12RuntimeShapeeqERKS0_>
   2ca18:	9901      	ldr	r1, [sp, #4]
   2ca1a:	4604      	mov	r4, r0
   2ca1c:	b1d0      	cbz	r0, 2ca54 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x52>
        MatchingElementsSize(unextended_input1_shape, unextended_input2_shape,
   2ca1e:	4632      	mov	r2, r6
   2ca20:	4628      	mov	r0, r5
   2ca22:	f7fa feb5 	bl	27790 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
    for (int i = 0; i < flat_size; ++i) {
   2ca26:	2400      	movs	r4, #0
        MatchingElementsSize(unextended_input1_shape, unextended_input2_shape,
   2ca28:	4606      	mov	r6, r0
    for (int i = 0; i < flat_size; ++i) {
   2ca2a:	42b4      	cmp	r4, r6
   2ca2c:	da62      	bge.n	2caf4 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xf2>
      output_data[i] = op(input1_data[i], input2_data[i]);
   2ca2e:	9b02      	ldr	r3, [sp, #8]
   2ca30:	9f36      	ldr	r7, [sp, #216]	; 0xd8
   2ca32:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
   2ca36:	9b03      	ldr	r3, [sp, #12]
   2ca38:	9d35      	ldr	r5, [sp, #212]	; 0xd4
   2ca3a:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
   2ca3e:	e9d1 0100 	ldrd	r0, r1, [r1]
   2ca42:	e9d2 2300 	ldrd	r2, r3, [r2]
   2ca46:	47b8      	blx	r7
   2ca48:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   2ca4c:	e9c5 0100 	strd	r0, r1, [r5]
    for (int i = 0; i < flat_size; ++i) {
   2ca50:	3401      	adds	r4, #1
   2ca52:	e7ea      	b.n	2ca2a <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x28>
    TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), N);
   2ca54:	682b      	ldr	r3, [r5, #0]
   2ca56:	2b05      	cmp	r3, #5
   2ca58:	dd01      	ble.n	2ca5e <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x5c>
   2ca5a:	f004 f9ae 	bl	30dba <abort>
    TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), N);
   2ca5e:	680b      	ldr	r3, [r1, #0]
   2ca60:	2b05      	cmp	r3, #5
   2ca62:	dcfa      	bgt.n	2ca5a <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x58>
    TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), N);
   2ca64:	6833      	ldr	r3, [r6, #0]
   2ca66:	2b05      	cmp	r3, #5
   2ca68:	dcf7      	bgt.n	2ca5a <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x58>
    NdArrayDescsForElementwiseBroadcast(
   2ca6a:	af1a      	add	r7, sp, #104	; 0x68
   2ca6c:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   2ca70:	4628      	mov	r0, r5
   2ca72:	463b      	mov	r3, r7
   2ca74:	4642      	mov	r2, r8
   2ca76:	f7ff fc82 	bl	2c37e <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
    CopyDimsToDesc(RuntimeShape::ExtendedShape(N, unextended_output_shape),
   2ca7a:	ad24      	add	r5, sp, #144	; 0x90
   2ca7c:	2301      	movs	r3, #1
   2ca7e:	4632      	mov	r2, r6
   2ca80:	2105      	movs	r1, #5
   2ca82:	a809      	add	r0, sp, #36	; 0x24
   2ca84:	f7fa fe35 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2ca88:	4629      	mov	r1, r5
   2ca8a:	a809      	add	r0, sp, #36	; 0x24
   2ca8c:	f7ff fc61 	bl	2c352 <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
   2ca90:	a809      	add	r0, sp, #36	; 0x24
   2ca92:	f7fa fd8e 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
    auto maxmin_func = [&](int indexes[N]) {
   2ca96:	ab35      	add	r3, sp, #212	; 0xd4
   2ca98:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
   2ca9c:	ab36      	add	r3, sp, #216	; 0xd8
   2ca9e:	930b      	str	r3, [sp, #44]	; 0x2c
   2caa0:	ab03      	add	r3, sp, #12
   2caa2:	e9cd 380c 	strd	r3, r8, [sp, #48]	; 0x30
  int indexes[N] = {0};
   2caa6:	2214      	movs	r2, #20
   2caa8:	ab02      	add	r3, sp, #8
   2caaa:	4621      	mov	r1, r4
   2caac:	a804      	add	r0, sp, #16
   2caae:	e9cd 370e 	strd	r3, r7, [sp, #56]	; 0x38
   2cab2:	f004 f9cc 	bl	30e4e <memset>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2cab6:	9a04      	ldr	r2, [sp, #16]
   2cab8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2caba:	429a      	cmp	r2, r3
   2cabc:	da1a      	bge.n	2caf4 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xf2>
   2cabe:	9405      	str	r4, [sp, #20]
   2cac0:	9a05      	ldr	r2, [sp, #20]
   2cac2:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2cac4:	429a      	cmp	r2, r3
   2cac6:	da11      	bge.n	2caec <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xea>
   2cac8:	9406      	str	r4, [sp, #24]
   2caca:	9a06      	ldr	r2, [sp, #24]
   2cacc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2cace:	429a      	cmp	r2, r3
   2cad0:	da08      	bge.n	2cae4 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xe2>
    NDOpsHelperImpl<N, DIM + 1, Calc>(output, calc, indexes);
   2cad2:	4628      	mov	r0, r5
   2cad4:	aa04      	add	r2, sp, #16
   2cad6:	a909      	add	r1, sp, #36	; 0x24
   2cad8:	f7ff ff55 	bl	2c986 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2cadc:	9b06      	ldr	r3, [sp, #24]
   2cade:	3301      	adds	r3, #1
   2cae0:	9306      	str	r3, [sp, #24]
   2cae2:	e7f2      	b.n	2caca <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xc8>
   2cae4:	9b05      	ldr	r3, [sp, #20]
   2cae6:	3301      	adds	r3, #1
   2cae8:	9305      	str	r3, [sp, #20]
   2caea:	e7e9      	b.n	2cac0 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xbe>
   2caec:	9b04      	ldr	r3, [sp, #16]
   2caee:	3301      	adds	r3, #1
   2caf0:	9304      	str	r3, [sp, #16]
   2caf2:	e7e0      	b.n	2cab6 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xb4>
}
   2caf4:	b02e      	add	sp, #184	; 0xb8
   2caf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002cafa <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>:
    }
  }
}

template <typename T>
void BroadcastMul4DSlow(const ArithmeticParams& params,
   2cafa:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   2cafe:	ed2d 8b04 	vpush	{d8-d9}
   2cb02:	461d      	mov	r5, r3
                        T* output_data) {
  T output_activation_min;
  T output_activation_max;
  GetActivationParams(params, &output_activation_min, &output_activation_max);

  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   2cb04:	680b      	ldr	r3, [r1, #0]
void BroadcastMul4DSlow(const ArithmeticParams& params,
   2cb06:	b098      	sub	sp, #96	; 0x60
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   2cb08:	2b04      	cmp	r3, #4
void BroadcastMul4DSlow(const ArithmeticParams& params,
   2cb0a:	4693      	mov	fp, r2
   2cb0c:	460c      	mov	r4, r1
  *min = params.float_activation_min;
   2cb0e:	ed90 9a0d 	vldr	s18, [r0, #52]	; 0x34
  *max = params.float_activation_max;
   2cb12:	edd0 8a0e 	vldr	s17, [r0, #56]	; 0x38
   2cb16:	9a25      	ldr	r2, [sp, #148]	; 0x94
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   2cb18:	dd01      	ble.n	2cb1e <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x24>
   2cb1a:	f004 f94e 	bl	30dba <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   2cb1e:	682b      	ldr	r3, [r5, #0]
   2cb20:	2b04      	cmp	r3, #4
   2cb22:	dcfa      	bgt.n	2cb1a <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x20>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   2cb24:	6813      	ldr	r3, [r2, #0]
   2cb26:	2b04      	cmp	r3, #4
   2cb28:	dcf7      	bgt.n	2cb1a <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x20>
    return RuntimeShape(new_shape_size, shape, 1);
   2cb2a:	2301      	movs	r3, #1
   2cb2c:	2104      	movs	r1, #4
   2cb2e:	a802      	add	r0, sp, #8
  const RuntimeShape output_shape =
      RuntimeShape::ExtendedShape(4, unextended_output_shape);

  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   2cb30:	f10d 0a20 	add.w	sl, sp, #32
   2cb34:	f7fa fddd 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2cb38:	4620      	mov	r0, r4
   2cb3a:	4652      	mov	r2, sl
   2cb3c:	4629      	mov	r1, r5
   2cb3e:	ab10      	add	r3, sp, #64	; 0x40
   2cb40:	f7fa ffdb 	bl	27afa <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   2cb44:	2400      	movs	r4, #0
   2cb46:	2100      	movs	r1, #0
   2cb48:	a802      	add	r0, sp, #8
   2cb4a:	f7fa fd3d 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2cb4e:	42a0      	cmp	r0, r4
   2cb50:	dd50      	ble.n	2cbf4 <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xfa>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   2cb52:	2500      	movs	r5, #0
   2cb54:	2101      	movs	r1, #1
   2cb56:	a802      	add	r0, sp, #8
   2cb58:	f7fa fd36 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2cb5c:	42a8      	cmp	r0, r5
   2cb5e:	dd47      	ble.n	2cbf0 <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xf6>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   2cb60:	2600      	movs	r6, #0
   2cb62:	2102      	movs	r1, #2
   2cb64:	a802      	add	r0, sp, #8
   2cb66:	f7fa fd2f 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2cb6a:	42b0      	cmp	r0, r6
   2cb6c:	dd3e      	ble.n	2cbec <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xf2>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   2cb6e:	2700      	movs	r7, #0
   2cb70:	2103      	movs	r1, #3
   2cb72:	a802      	add	r0, sp, #8
   2cb74:	f7fa fd28 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2cb78:	42b8      	cmp	r0, r7
   2cb7a:	dd35      	ble.n	2cbe8 <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xee>
          output_data[Offset(output_shape, b, y, x, c)] =
              ActivationFunctionWithMinMax(
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] *
   2cb7c:	4633      	mov	r3, r6
   2cb7e:	462a      	mov	r2, r5
   2cb80:	4621      	mov	r1, r4
   2cb82:	9700      	str	r7, [sp, #0]
   2cb84:	4650      	mov	r0, sl
   2cb86:	f7fa fe17 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                      input2_data[SubscriptToIndex(desc2, b, y, x, c)],
   2cb8a:	4633      	mov	r3, r6
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] *
   2cb8c:	4681      	mov	r9, r0
                      input2_data[SubscriptToIndex(desc2, b, y, x, c)],
   2cb8e:	462a      	mov	r2, r5
   2cb90:	4621      	mov	r1, r4
   2cb92:	9700      	str	r7, [sp, #0]
   2cb94:	a810      	add	r0, sp, #64	; 0x40
   2cb96:	f7fa fe0f 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   2cb9a:	9b24      	ldr	r3, [sp, #144]	; 0x90
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] *
   2cb9c:	eb0b 0989 	add.w	r9, fp, r9, lsl #2
                      input2_data[SubscriptToIndex(desc2, b, y, x, c)],
   2cba0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
              ActivationFunctionWithMinMax(
   2cba4:	edd0 7a00 	vldr	s15, [r0]
   2cba8:	ed99 8a00 	vldr	s16, [r9]
   2cbac:	ee28 8a27 	vmul.f32	s16, s16, s15
          output_data[Offset(output_shape, b, y, x, c)] =
   2cbb0:	4633      	mov	r3, r6
   2cbb2:	9700      	str	r7, [sp, #0]
   2cbb4:	462a      	mov	r2, r5
   2cbb6:	4621      	mov	r1, r4
   2cbb8:	a802      	add	r0, sp, #8
   2cbba:	f7fa fdc7 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
	return __b;
   2cbbe:	eeb4 8a49 	vcmp.f32	s16, s18
   2cbc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2cbc6:	bf48      	it	mi
   2cbc8:	eeb0 8a49 	vmovmi.f32	s16, s18
	return __b;
   2cbcc:	eef4 8a48 	vcmp.f32	s17, s16
   2cbd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2cbd4:	bf48      	it	mi
   2cbd6:	eeb0 8a68 	vmovmi.f32	s16, s17
   2cbda:	9b26      	ldr	r3, [sp, #152]	; 0x98
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   2cbdc:	3701      	adds	r7, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   2cbde:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   2cbe2:	ed80 8a00 	vstr	s16, [r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   2cbe6:	e7c3      	b.n	2cb70 <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x76>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   2cbe8:	3601      	adds	r6, #1
   2cbea:	e7ba      	b.n	2cb62 <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x68>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   2cbec:	3501      	adds	r5, #1
   2cbee:	e7b1      	b.n	2cb54 <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x5a>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   2cbf0:	3401      	adds	r4, #1
   2cbf2:	e7a8      	b.n	2cb46 <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x4c>
  const RuntimeShape output_shape =
   2cbf4:	a802      	add	r0, sp, #8
   2cbf6:	f7fa fcdc 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
                  output_activation_min, output_activation_max);
        }
      }
    }
  }
}
   2cbfa:	b018      	add	sp, #96	; 0x60
   2cbfc:	ecbd 8b04 	vpop	{d8-d9}
   2cc00:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

0002cc04 <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>:
    output_data[i] = output_offset + clamped_result;
  }
}

template <typename T>
inline void BroadcastMul4DSlow(
   2cc04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cc08:	b09b      	sub	sp, #108	; 0x6c
  ruy::profiler::ScopeLabel label("BroadcastMul4DSlow");

  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  // The input shapes are extended as part of NdArrayDesc initialization.
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   2cc0a:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
inline void BroadcastMul4DSlow(
   2cc0e:	9203      	str	r2, [sp, #12]
   2cc10:	4604      	mov	r4, r0
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   2cc12:	4652      	mov	r2, sl
inline void BroadcastMul4DSlow(
   2cc14:	4608      	mov	r0, r1
   2cc16:	4619      	mov	r1, r3
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   2cc18:	ab12      	add	r3, sp, #72	; 0x48
   2cc1a:	f7fa ff6e 	bl	27afa <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
   2cc1e:	2301      	movs	r3, #1
   2cc20:	2104      	movs	r1, #4
   2cc22:	9a25      	ldr	r2, [sp, #148]	; 0x94
   2cc24:	a804      	add	r0, sp, #16
   2cc26:	f7fa fd64 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
                                      &desc2);
  const RuntimeShape extended_output_shape =
      RuntimeShape::ExtendedShape(4, output_shape);

  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   2cc2a:	2600      	movs	r6, #0
   2cc2c:	2100      	movs	r1, #0
   2cc2e:	a804      	add	r0, sp, #16
   2cc30:	f7fa fcca 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2cc34:	42b0      	cmp	r0, r6
   2cc36:	dd53      	ble.n	2cce0 <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xdc>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   2cc38:	2700      	movs	r7, #0
   2cc3a:	f10d 0810 	add.w	r8, sp, #16
   2cc3e:	2101      	movs	r1, #1
   2cc40:	4640      	mov	r0, r8
   2cc42:	f7fa fcc1 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2cc46:	42b8      	cmp	r0, r7
   2cc48:	dd48      	ble.n	2ccdc <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xd8>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   2cc4a:	f04f 0b00 	mov.w	fp, #0
   2cc4e:	2102      	movs	r1, #2
   2cc50:	4640      	mov	r0, r8
   2cc52:	f7fa fcb9 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2cc56:	4558      	cmp	r0, fp
   2cc58:	dd3e      	ble.n	2ccd8 <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xd4>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   2cc5a:	f04f 0900 	mov.w	r9, #0
   2cc5e:	2103      	movs	r1, #3
   2cc60:	4640      	mov	r0, r8
   2cc62:	f7fa fcb1 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2cc66:	4548      	cmp	r0, r9
   2cc68:	dd33      	ble.n	2ccd2 <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xce>
          const int32 input1_val =
              params.input1_offset +
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   2cc6a:	465b      	mov	r3, fp
   2cc6c:	463a      	mov	r2, r7
   2cc6e:	4631      	mov	r1, r6
   2cc70:	f8cd 9000 	str.w	r9, [sp]
   2cc74:	4650      	mov	r0, sl
   2cc76:	f7fa fd9f 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   2cc7a:	9b03      	ldr	r3, [sp, #12]
          const int32 input1_val =
   2cc7c:	6862      	ldr	r2, [r4, #4]
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   2cc7e:	561d      	ldrsb	r5, [r3, r0]
          const int32 input2_val =
              params.input2_offset +
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   2cc80:	4631      	mov	r1, r6
          const int32 input1_val =
   2cc82:	4415      	add	r5, r2
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   2cc84:	465b      	mov	r3, fp
   2cc86:	463a      	mov	r2, r7
   2cc88:	f8cd 9000 	str.w	r9, [sp]
   2cc8c:	a812      	add	r0, sp, #72	; 0x48
   2cc8e:	f7fa fd93 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   2cc92:	9b24      	ldr	r3, [sp, #144]	; 0x90
          const int32 input2_val =
   2cc94:	68a2      	ldr	r2, [r4, #8]
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   2cc96:	5618      	ldrsb	r0, [r3, r0]
          const int32 input2_val =
   2cc98:	4410      	add	r0, r2
          const int32 unclamped_result =
              params.output_offset +
              MultiplyByQuantizedMultiplier(input1_val * input2_val,
   2cc9a:	4368      	muls	r0, r5
   2cc9c:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   2cca0:	f7ec fb36 	bl	19310 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
              params.output_offset +
   2cca4:	68e5      	ldr	r5, [r4, #12]
                                            params.output_multiplier,
                                            params.output_shift);
          const int32 clamped_output = std::min(
              params.quantized_activation_max,
              std::max(params.quantized_activation_min, unclamped_result));
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   2cca6:	465b      	mov	r3, fp
              params.output_offset +
   2cca8:	4405      	add	r5, r0
   2ccaa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   2ccac:	f8cd 9000 	str.w	r9, [sp]
   2ccb0:	4285      	cmp	r5, r0
   2ccb2:	bfb8      	it	lt
   2ccb4:	4605      	movlt	r5, r0
   2ccb6:	6b20      	ldr	r0, [r4, #48]	; 0x30
   2ccb8:	463a      	mov	r2, r7
   2ccba:	4285      	cmp	r5, r0
   2ccbc:	bfa8      	it	ge
   2ccbe:	4605      	movge	r5, r0
   2ccc0:	4631      	mov	r1, r6
   2ccc2:	4640      	mov	r0, r8
   2ccc4:	f7fa fd42 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   2ccc8:	9b26      	ldr	r3, [sp, #152]	; 0x98
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   2ccca:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   2ccce:	541d      	strb	r5, [r3, r0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   2ccd0:	e7c5      	b.n	2cc5e <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x5a>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   2ccd2:	f10b 0b01 	add.w	fp, fp, #1
   2ccd6:	e7ba      	b.n	2cc4e <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x4a>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   2ccd8:	3701      	adds	r7, #1
   2ccda:	e7ae      	b.n	2cc3a <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x36>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   2ccdc:	3601      	adds	r6, #1
   2ccde:	e7a5      	b.n	2cc2c <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x28>
  const RuntimeShape extended_output_shape =
   2cce0:	a804      	add	r0, sp, #16
   2cce2:	f7fa fc66 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
              static_cast<T>(clamped_output);
        }
      }
    }
  }
}
   2cce6:	b01b      	add	sp, #108	; 0x6c
   2cce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002ccec <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>:
                               uint8* output_data) {
   2ccec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ccf0:	b09b      	sub	sp, #108	; 0x6c
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   2ccf2:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
                               uint8* output_data) {
   2ccf6:	9203      	str	r2, [sp, #12]
   2ccf8:	4604      	mov	r4, r0
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   2ccfa:	4652      	mov	r2, sl
                               uint8* output_data) {
   2ccfc:	4608      	mov	r0, r1
   2ccfe:	4619      	mov	r1, r3
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   2cd00:	ab12      	add	r3, sp, #72	; 0x48
   2cd02:	f7fa fefa 	bl	27afa <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
   2cd06:	2301      	movs	r3, #1
   2cd08:	2104      	movs	r1, #4
   2cd0a:	9a25      	ldr	r2, [sp, #148]	; 0x94
   2cd0c:	a804      	add	r0, sp, #16
   2cd0e:	f7fa fcf0 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   2cd12:	2600      	movs	r6, #0
   2cd14:	2100      	movs	r1, #0
   2cd16:	a804      	add	r0, sp, #16
   2cd18:	f7fa fc56 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2cd1c:	42b0      	cmp	r0, r6
   2cd1e:	dd53      	ble.n	2cdc8 <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xdc>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   2cd20:	2700      	movs	r7, #0
   2cd22:	f10d 0810 	add.w	r8, sp, #16
   2cd26:	2101      	movs	r1, #1
   2cd28:	4640      	mov	r0, r8
   2cd2a:	f7fa fc4d 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2cd2e:	42b8      	cmp	r0, r7
   2cd30:	dd48      	ble.n	2cdc4 <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xd8>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   2cd32:	f04f 0b00 	mov.w	fp, #0
   2cd36:	2102      	movs	r1, #2
   2cd38:	4640      	mov	r0, r8
   2cd3a:	f7fa fc45 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2cd3e:	4558      	cmp	r0, fp
   2cd40:	dd3e      	ble.n	2cdc0 <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xd4>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   2cd42:	f04f 0900 	mov.w	r9, #0
   2cd46:	2103      	movs	r1, #3
   2cd48:	4640      	mov	r0, r8
   2cd4a:	f7fa fc3d 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2cd4e:	4548      	cmp	r0, r9
   2cd50:	dd33      	ble.n	2cdba <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xce>
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   2cd52:	465b      	mov	r3, fp
   2cd54:	463a      	mov	r2, r7
   2cd56:	4631      	mov	r1, r6
   2cd58:	f8cd 9000 	str.w	r9, [sp]
   2cd5c:	4650      	mov	r0, sl
   2cd5e:	f7fa fd2b 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   2cd62:	9b03      	ldr	r3, [sp, #12]
   2cd64:	6862      	ldr	r2, [r4, #4]
   2cd66:	5c1d      	ldrb	r5, [r3, r0]
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   2cd68:	4631      	mov	r1, r6
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   2cd6a:	4415      	add	r5, r2
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   2cd6c:	465b      	mov	r3, fp
   2cd6e:	463a      	mov	r2, r7
   2cd70:	f8cd 9000 	str.w	r9, [sp]
   2cd74:	a812      	add	r0, sp, #72	; 0x48
   2cd76:	f7fa fd1f 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   2cd7a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2cd7c:	68a2      	ldr	r2, [r4, #8]
   2cd7e:	5c18      	ldrb	r0, [r3, r0]
   2cd80:	4410      	add	r0, r2
              MultiplyByQuantizedMultiplier(input1_val * input2_val,
   2cd82:	4368      	muls	r0, r5
   2cd84:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   2cd88:	f7ec fac2 	bl	19310 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
              params.output_offset +
   2cd8c:	68e5      	ldr	r5, [r4, #12]
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   2cd8e:	465b      	mov	r3, fp
              params.output_offset +
   2cd90:	4405      	add	r5, r0
   2cd92:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   2cd94:	f8cd 9000 	str.w	r9, [sp]
   2cd98:	4285      	cmp	r5, r0
   2cd9a:	bfb8      	it	lt
   2cd9c:	4605      	movlt	r5, r0
   2cd9e:	6b20      	ldr	r0, [r4, #48]	; 0x30
   2cda0:	463a      	mov	r2, r7
   2cda2:	4285      	cmp	r5, r0
   2cda4:	bfa8      	it	ge
   2cda6:	4605      	movge	r5, r0
   2cda8:	4631      	mov	r1, r6
   2cdaa:	4640      	mov	r0, r8
   2cdac:	f7fa fcce 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   2cdb0:	9b26      	ldr	r3, [sp, #152]	; 0x98
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   2cdb2:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   2cdb6:	541d      	strb	r5, [r3, r0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   2cdb8:	e7c5      	b.n	2cd46 <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x5a>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   2cdba:	f10b 0b01 	add.w	fp, fp, #1
   2cdbe:	e7ba      	b.n	2cd36 <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x4a>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   2cdc0:	3701      	adds	r7, #1
   2cdc2:	e7ae      	b.n	2cd22 <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x36>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   2cdc4:	3601      	adds	r6, #1
   2cdc6:	e7a5      	b.n	2cd14 <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x28>
      RuntimeShape::ExtendedShape(4, output_shape);
   2cdc8:	a804      	add	r0, sp, #16
   2cdca:	f7fa fbf2 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   2cdce:	b01b      	add	sp, #108	; 0x6c
   2cdd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002cdd4 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0>:
void EvalQuantized(TfLiteContext* context, TfLiteNode* node,
   2cdd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2cdd8:	4616      	mov	r6, r2
   2cdda:	461d      	mov	r5, r3
  params->quantized_activation_min = min;
   2cddc:	e9d0 2300 	ldrd	r2, r3, [r0]
   2cde0:	b0c4      	sub	sp, #272	; 0x110
  params->quantized_activation_max = max;
   2cde2:	e9cd 2335 	strd	r2, r3, [sp, #212]	; 0xd4
    op_params.input1_offset = -input1->params.zero_point;
   2cde6:	690b      	ldr	r3, [r1, #16]
void EvalQuantized(TfLiteContext* context, TfLiteNode* node,
   2cde8:	460f      	mov	r7, r1
    op_params.input1_offset = -input1->params.zero_point;
   2cdea:	425b      	negs	r3, r3
   2cdec:	932b      	str	r3, [sp, #172]	; 0xac
    op_params.input2_offset = -input2->params.zero_point;
   2cdee:	6933      	ldr	r3, [r6, #16]
   2cdf0:	425b      	negs	r3, r3
   2cdf2:	932c      	str	r3, [sp, #176]	; 0xb0
    op_params.output_offset = output->params.zero_point;
   2cdf4:	692b      	ldr	r3, [r5, #16]
   2cdf6:	932d      	str	r3, [sp, #180]	; 0xb4
    op_params.output_multiplier = data->output_multiplier;
   2cdf8:	6883      	ldr	r3, [r0, #8]
   2cdfa:	932e      	str	r3, [sp, #184]	; 0xb8
    op_params.output_shift = data->output_shift;
   2cdfc:	68c3      	ldr	r3, [r0, #12]
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
   2cdfe:	a824      	add	r0, sp, #144	; 0x90
    op_params.output_shift = data->output_shift;
   2ce00:	932f      	str	r3, [sp, #188]	; 0xbc
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
   2ce02:	f7fa fc1b 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2ce06:	4631      	mov	r1, r6
   2ce08:	a81e      	add	r0, sp, #120	; 0x78
   2ce0a:	f7fa fc17 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bool need_broadcast = reference_ops::ProcessBroadcastShapes(
   2ce0e:	aa2a      	add	r2, sp, #168	; 0xa8
   2ce10:	a91e      	add	r1, sp, #120	; 0x78
   2ce12:	a824      	add	r0, sp, #144	; 0x90
   2ce14:	f7fa fd89 	bl	2792a <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>
   2ce18:	4604      	mov	r4, r0
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
   2ce1a:	a81e      	add	r0, sp, #120	; 0x78
   2ce1c:	f7fa fbc9 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   2ce20:	a824      	add	r0, sp, #144	; 0x90
   2ce22:	f7fa fbc6 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
    if (output->type == kTfLiteInt8) {
   2ce26:	782b      	ldrb	r3, [r5, #0]
   2ce28:	2b09      	cmp	r3, #9
   2ce2a:	d163      	bne.n	2cef4 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0x120>
        TF_LITE_MUL(reference_integer_ops, BroadcastMul4DSlow, int8_t);
   2ce2c:	4639      	mov	r1, r7
   2ce2e:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   2ce32:	a824      	add	r0, sp, #144	; 0x90
      if (need_broadcast) {
   2ce34:	b314      	cbz	r4, 2ce7c <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0xa8>
        TF_LITE_MUL(reference_integer_ops, BroadcastMul4DSlow, int8_t);
   2ce36:	f7fa fc01 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   2ce3a:	687a      	ldr	r2, [r7, #4]
   2ce3c:	4631      	mov	r1, r6
   2ce3e:	a81e      	add	r0, sp, #120	; 0x78
   2ce40:	9205      	str	r2, [sp, #20]
   2ce42:	f7fa fbfb 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2ce46:	4629      	mov	r1, r5
   2ce48:	4640      	mov	r0, r8
   2ce4a:	6874      	ldr	r4, [r6, #4]
   2ce4c:	f7fa fbf6 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2ce50:	686b      	ldr	r3, [r5, #4]
   2ce52:	9a05      	ldr	r2, [sp, #20]
   2ce54:	e9cd 8301 	strd	r8, r3, [sp, #4]
   2ce58:	9400      	str	r4, [sp, #0]
   2ce5a:	ab1e      	add	r3, sp, #120	; 0x78
   2ce5c:	a924      	add	r1, sp, #144	; 0x90
   2ce5e:	a82a      	add	r0, sp, #168	; 0xa8
   2ce60:	f7ff fed0 	bl	2cc04 <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>
        TF_LITE_MUL(reference_integer_ops, Mul, int8_t);
   2ce64:	4640      	mov	r0, r8
        TF_LITE_MUL(reference_ops, BroadcastMul4DSlow, uint8_t);
   2ce66:	f7fa fba4 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   2ce6a:	a81e      	add	r0, sp, #120	; 0x78
   2ce6c:	f7fa fba1 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   2ce70:	a824      	add	r0, sp, #144	; 0x90
        TF_LITE_MUL(reference_ops, Mul, uint8_t);
   2ce72:	f7fa fb9e 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   2ce76:	b044      	add	sp, #272	; 0x110
   2ce78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        TF_LITE_MUL(reference_integer_ops, Mul, int8_t);
   2ce7c:	f7fa fbde 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2ce80:	4631      	mov	r1, r6
   2ce82:	a81e      	add	r0, sp, #120	; 0x78
   2ce84:	687f      	ldr	r7, [r7, #4]
   2ce86:	f7fa fbd9 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2ce8a:	4629      	mov	r1, r5
   2ce8c:	4640      	mov	r0, r8
   2ce8e:	6876      	ldr	r6, [r6, #4]
   2ce90:	f7fa fbd4 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   2ce94:	e9dd 2335 	ldrd	r2, r3, [sp, #212]	; 0xd4
   2ce98:	429a      	cmp	r2, r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   2ce9a:	686d      	ldr	r5, [r5, #4]
   2ce9c:	dd01      	ble.n	2cea2 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0xce>
   2ce9e:	f003 ff8c 	bl	30dba <abort>
  const int size_1 = shape.FlatSize();
   2cea2:	a824      	add	r0, sp, #144	; 0x90
   2cea4:	f7fa fc15 	bl	276d2 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   2cea8:	4681      	mov	r9, r0
  const int size_2 = check_shape_0.FlatSize();
   2ceaa:	a81e      	add	r0, sp, #120	; 0x78
   2ceac:	f7fa fc11 	bl	276d2 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   2ceb0:	4682      	mov	sl, r0
  const int size_3 = check_shape_1.FlatSize();
   2ceb2:	4640      	mov	r0, r8
   2ceb4:	f7fa fc0d 	bl	276d2 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
  TFLITE_CHECK_EQ(size_1, size_2);
   2ceb8:	45d1      	cmp	r9, sl
   2ceba:	d1f0      	bne.n	2ce9e <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0xca>
  TFLITE_CHECK_EQ(size_2, size_3);
   2cebc:	4581      	cmp	r9, r0
   2cebe:	d1ee      	bne.n	2ce9e <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0xca>
  for (int i = 0; i < size; ++i) {
   2cec0:	454c      	cmp	r4, r9
   2cec2:	dacf      	bge.n	2ce64 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0x90>
    const int32 input1_val = params.input1_offset + input1_data[i];
   2cec4:	573b      	ldrsb	r3, [r7, r4]
   2cec6:	982b      	ldr	r0, [sp, #172]	; 0xac
    const int32 input2_val = params.input2_offset + input2_data[i];
   2cec8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    const int32 input1_val = params.input1_offset + input1_data[i];
   2ceca:	4403      	add	r3, r0
    const int32 input2_val = params.input2_offset + input2_data[i];
   2cecc:	5730      	ldrsb	r0, [r6, r4]
   2cece:	4410      	add	r0, r2
        MultiplyByQuantizedMultiplier(input1_val * input2_val,
   2ced0:	4358      	muls	r0, r3
   2ced2:	e9dd 122e 	ldrd	r1, r2, [sp, #184]	; 0xb8
   2ced6:	f7ec fa1b 	bl	19310 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
        params.output_offset +
   2ceda:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   2cedc:	4403      	add	r3, r0
    output_data[i] = static_cast<T>(clamped_output);
   2cede:	9835      	ldr	r0, [sp, #212]	; 0xd4
   2cee0:	4283      	cmp	r3, r0
   2cee2:	bfb8      	it	lt
   2cee4:	4603      	movlt	r3, r0
   2cee6:	9836      	ldr	r0, [sp, #216]	; 0xd8
   2cee8:	4283      	cmp	r3, r0
   2ceea:	bfa8      	it	ge
   2ceec:	4603      	movge	r3, r0
   2ceee:	552b      	strb	r3, [r5, r4]
  for (int i = 0; i < size; ++i) {
   2cef0:	3401      	adds	r4, #1
   2cef2:	e7e5      	b.n	2cec0 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0xec>
    } else if (output->type == kTfLiteUInt8) {
   2cef4:	2b03      	cmp	r3, #3
   2cef6:	d1be      	bne.n	2ce76 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0xa2>
        TF_LITE_MUL(reference_ops, BroadcastMul4DSlow, uint8_t);
   2cef8:	4639      	mov	r1, r7
      if (need_broadcast) {
   2cefa:	b1d4      	cbz	r4, 2cf32 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0x15e>
        TF_LITE_MUL(reference_ops, BroadcastMul4DSlow, uint8_t);
   2cefc:	a824      	add	r0, sp, #144	; 0x90
   2cefe:	f7fa fb9d 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   2cf02:	687a      	ldr	r2, [r7, #4]
   2cf04:	4631      	mov	r1, r6
   2cf06:	ac18      	add	r4, sp, #96	; 0x60
   2cf08:	a81e      	add	r0, sp, #120	; 0x78
   2cf0a:	9205      	str	r2, [sp, #20]
   2cf0c:	f7fa fb96 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2cf10:	4629      	mov	r1, r5
   2cf12:	4620      	mov	r0, r4
   2cf14:	6876      	ldr	r6, [r6, #4]
   2cf16:	f7fa fb91 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2cf1a:	686b      	ldr	r3, [r5, #4]
   2cf1c:	a82a      	add	r0, sp, #168	; 0xa8
   2cf1e:	e9cd 4301 	strd	r4, r3, [sp, #4]
   2cf22:	9a05      	ldr	r2, [sp, #20]
   2cf24:	9600      	str	r6, [sp, #0]
   2cf26:	ab1e      	add	r3, sp, #120	; 0x78
   2cf28:	a924      	add	r1, sp, #144	; 0x90
   2cf2a:	f7ff fedf 	bl	2ccec <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>
   2cf2e:	4620      	mov	r0, r4
   2cf30:	e799      	b.n	2ce66 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0x92>
        TF_LITE_MUL(reference_ops, Mul, uint8_t);
   2cf32:	a812      	add	r0, sp, #72	; 0x48
   2cf34:	f7fa fb82 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2cf38:	4631      	mov	r1, r6
   2cf3a:	a80c      	add	r0, sp, #48	; 0x30
   2cf3c:	687f      	ldr	r7, [r7, #4]
   2cf3e:	f7fa fb7d 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2cf42:	4629      	mov	r1, r5
   2cf44:	a806      	add	r0, sp, #24
   2cf46:	6876      	ldr	r6, [r6, #4]
   2cf48:	f7fa fb78 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   2cf4c:	e9dd 2335 	ldrd	r2, r3, [sp, #212]	; 0xd4
   2cf50:	429a      	cmp	r2, r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   2cf52:	686d      	ldr	r5, [r5, #4]
   2cf54:	dca3      	bgt.n	2ce9e <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0xca>
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   2cf56:	aa06      	add	r2, sp, #24
   2cf58:	a90c      	add	r1, sp, #48	; 0x30
   2cf5a:	a812      	add	r0, sp, #72	; 0x48
   2cf5c:	f7fb fbb1 	bl	286c2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
   2cf60:	4680      	mov	r8, r0
  for (int i = 0; i < size; ++i) {
   2cf62:	45a0      	cmp	r8, r4
   2cf64:	dd17      	ble.n	2cf96 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0x1c2>
    const int32 input1_val = params.input1_offset + input1_data[i];
   2cf66:	5d3b      	ldrb	r3, [r7, r4]
   2cf68:	982b      	ldr	r0, [sp, #172]	; 0xac
    const int32 input2_val = params.input2_offset + input2_data[i];
   2cf6a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    const int32 input1_val = params.input1_offset + input1_data[i];
   2cf6c:	4403      	add	r3, r0
    const int32 input2_val = params.input2_offset + input2_data[i];
   2cf6e:	5d30      	ldrb	r0, [r6, r4]
   2cf70:	4410      	add	r0, r2
        MultiplyByQuantizedMultiplier(input1_val * input2_val,
   2cf72:	4358      	muls	r0, r3
   2cf74:	e9dd 122e 	ldrd	r1, r2, [sp, #184]	; 0xb8
   2cf78:	f7ec f9ca 	bl	19310 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
        params.output_offset +
   2cf7c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   2cf7e:	4403      	add	r3, r0
    output_data[i] = static_cast<uint8>(clamped_output);
   2cf80:	9835      	ldr	r0, [sp, #212]	; 0xd4
   2cf82:	4283      	cmp	r3, r0
   2cf84:	bfb8      	it	lt
   2cf86:	4603      	movlt	r3, r0
   2cf88:	9836      	ldr	r0, [sp, #216]	; 0xd8
   2cf8a:	4283      	cmp	r3, r0
   2cf8c:	bfa8      	it	ge
   2cf8e:	4603      	movge	r3, r0
   2cf90:	552b      	strb	r3, [r5, r4]
  for (int i = 0; i < size; ++i) {
   2cf92:	3401      	adds	r4, #1
   2cf94:	e7e5      	b.n	2cf62 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0x18e>
   2cf96:	a806      	add	r0, sp, #24
   2cf98:	f7fa fb0b 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   2cf9c:	a80c      	add	r0, sp, #48	; 0x30
   2cf9e:	f7fa fb08 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   2cfa2:	a812      	add	r0, sp, #72	; 0x48
   2cfa4:	e765      	b.n	2ce72 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0x9e>

0002cfa6 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_>:
                   TfLiteTensor* output) {
   2cfa6:	b410      	push	{r4}
   2cfa8:	4618      	mov	r0, r3
   2cfaa:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
   2cfae:	9b03      	ldr	r3, [sp, #12]
  if (output->type == kTfLiteInt8 || output->type == kTfLiteUInt8) {
   2cfb0:	781c      	ldrb	r4, [r3, #0]
   2cfb2:	2c09      	cmp	r4, #9
   2cfb4:	d001      	beq.n	2cfba <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x14>
   2cfb6:	2c03      	cmp	r4, #3
   2cfb8:	d103      	bne.n	2cfc2 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x1c>
}
   2cfba:	f85d 4b04 	ldr.w	r4, [sp], #4
   2cfbe:	f7ff bf09 	b.w	2cdd4 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0>
   2cfc2:	f85d 4b04 	ldr.w	r4, [sp], #4
   2cfc6:	4770      	bx	lr

0002cfc8 <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode>:
  PadContext(TfLiteContext* context, TfLiteNode* node) {
   2cfc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    input = GetInput(context, node, 0);
   2cfca:	6816      	ldr	r6, [r2, #0]
   2cfcc:	688b      	ldr	r3, [r1, #8]
  return &context->tensors[node->inputs->data[index]];
   2cfce:	6875      	ldr	r5, [r6, #4]
   2cfd0:	68b1      	ldr	r1, [r6, #8]
   2cfd2:	eb03 1585 	add.w	r5, r3, r5, lsl #6
   2cfd6:	eb03 1181 	add.w	r1, r3, r1, lsl #6
  PadContext(TfLiteContext* context, TfLiteNode* node) {
   2cfda:	4604      	mov	r4, r0
    input = GetInput(context, node, 0);
   2cfdc:	6045      	str	r5, [r0, #4]
    paddings = GetInput(context, node, 1);
   2cfde:	6081      	str	r1, [r0, #8]
    constant_values = nullptr;
   2cfe0:	2000      	movs	r0, #0
    if (NumInputs(node) == 3) {
   2cfe2:	6837      	ldr	r7, [r6, #0]
  PadContext(TfLiteContext* context, TfLiteNode* node) {
   2cfe4:	b087      	sub	sp, #28
    if (NumInputs(node) == 3) {
   2cfe6:	2f03      	cmp	r7, #3
    constant_values = nullptr;
   2cfe8:	6020      	str	r0, [r4, #0]
    if (NumInputs(node) == 3) {
   2cfea:	d105      	bne.n	2cff8 <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode+0x30>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
   2cfec:	68f6      	ldr	r6, [r6, #12]
  const bool use_tensor = index < node->inputs->size &&
   2cfee:	1c77      	adds	r7, r6, #1
    return &context->tensors[node->inputs->data[index]];
   2cff0:	bf18      	it	ne
   2cff2:	eb03 1086 	addne.w	r0, r3, r6, lsl #6
      constant_values = GetOptionalInputTensor(context, node, 2);
   2cff6:	6020      	str	r0, [r4, #0]
  return &context->tensors[node->outputs->data[index]];
   2cff8:	6852      	ldr	r2, [r2, #4]
    const int paddings_total = GetTensorShape(paddings).FlatSize();
   2cffa:	4668      	mov	r0, sp
   2cffc:	6852      	ldr	r2, [r2, #4]
   2cffe:	eb03 1382 	add.w	r3, r3, r2, lsl #6
    output = GetOutput(context, node, 0);
   2d002:	60e3      	str	r3, [r4, #12]
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   2d004:	68ab      	ldr	r3, [r5, #8]
    dims = NumDimensions(input);
   2d006:	681b      	ldr	r3, [r3, #0]
   2d008:	6123      	str	r3, [r4, #16]
    resizing_category = ResizingCategory::kGenericResize;
   2d00a:	2302      	movs	r3, #2
   2d00c:	7523      	strb	r3, [r4, #20]
    const int paddings_total = GetTensorShape(paddings).FlatSize();
   2d00e:	f7fa fb15 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2d012:	4668      	mov	r0, sp
   2d014:	f7fa fb5d 	bl	276d2 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   2d018:	4605      	mov	r5, r0
   2d01a:	4668      	mov	r0, sp
   2d01c:	f7fa fac9 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
    const int32* paddings_data = GetTensorData<int32>(paddings);
   2d020:	68a2      	ldr	r2, [r4, #8]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   2d022:	b18a      	cbz	r2, 2d048 <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode+0x80>
   2d024:	6853      	ldr	r3, [r2, #4]
        (paddings_data[0] == 0 && paddings_data[1] == 0) &&
   2d026:	7d12      	ldrb	r2, [r2, #20]
   2d028:	2a01      	cmp	r2, #1
   2d02a:	d10a      	bne.n	2d042 <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode+0x7a>
    if (IsConstantTensor(paddings) && paddings_total == 8 &&
   2d02c:	2d08      	cmp	r5, #8
   2d02e:	d108      	bne.n	2d042 <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode+0x7a>
   2d030:	6819      	ldr	r1, [r3, #0]
   2d032:	b931      	cbnz	r1, 2d042 <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode+0x7a>
        (paddings_data[0] == 0 && paddings_data[1] == 0) &&
   2d034:	6859      	ldr	r1, [r3, #4]
   2d036:	b921      	cbnz	r1, 2d042 <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode+0x7a>
   2d038:	6999      	ldr	r1, [r3, #24]
   2d03a:	b911      	cbnz	r1, 2d042 <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode+0x7a>
        (paddings_data[6] == 0 && paddings_data[7] == 0)) {
   2d03c:	69db      	ldr	r3, [r3, #28]
   2d03e:	b903      	cbnz	r3, 2d042 <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode+0x7a>
      resizing_category = ResizingCategory::kImageStyle;
   2d040:	7522      	strb	r2, [r4, #20]
  }
   2d042:	4620      	mov	r0, r4
   2d044:	b007      	add	sp, #28
   2d046:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2d048:	4613      	mov	r3, r2
   2d04a:	e7ec      	b.n	2d026 <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode+0x5e>

0002d04c <_ZN6tflite3ops5micro14Register_PADV2Ev>:
   2d04c:	b510      	push	{r4, lr}
   2d04e:	4604      	mov	r4, r0
   2d050:	f7ef fc36 	bl	1c8c0 <_ZN6tflite3ops5micro12Register_PADEv>
   2d054:	4620      	mov	r0, r4
   2d056:	bd10      	pop	{r4, pc}

0002d058 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>:
inline void PadImpl(const tflite::PadParams& op_params,
   2d058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d05c:	4606      	mov	r6, r0
   2d05e:	b09f      	sub	sp, #124	; 0x7c
   2d060:	4614      	mov	r4, r2
   2d062:	461d      	mov	r5, r3
    return RuntimeShape(new_shape_size, shape, 1);
   2d064:	460a      	mov	r2, r1
   2d066:	2301      	movs	r3, #1
   2d068:	2104      	movs	r1, #4
   2d06a:	a812      	add	r0, sp, #72	; 0x48
   2d06c:	f7fa fb41 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2d070:	2301      	movs	r3, #1
   2d072:	2104      	movs	r1, #4
   2d074:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   2d076:	a818      	add	r0, sp, #96	; 0x60
   2d078:	f7fa fb3b 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
   2d07c:	f996 0000 	ldrsb.w	r0, [r6]
   2d080:	2804      	cmp	r0, #4
   2d082:	dd01      	ble.n	2d088 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x30>
   2d084:	f003 fe99 	bl	30dba <abort>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
   2d088:	f996 1014 	ldrsb.w	r1, [r6, #20]
   2d08c:	2904      	cmp	r1, #4
   2d08e:	dcf9      	bgt.n	2d084 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   2d090:	f06f 0203 	mvn.w	r2, #3
    left_padding_copy[i] = 0;
   2d094:	2300      	movs	r3, #0
   2d096:	f10d 0c78 	add.w	ip, sp, #120	; 0x78
   2d09a:	fb02 c200 	mla	r2, r2, r0, ip
   2d09e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   2d0a2:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   2d0a6:	1d37      	adds	r7, r6, #4
   2d0a8:	3a40      	subs	r2, #64	; 0x40
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   2d0aa:	4298      	cmp	r0, r3
   2d0ac:	dc13      	bgt.n	2d0d6 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x7e>
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   2d0ae:	f06f 0203 	mvn.w	r2, #3
    right_padding_copy[i] = 0;
   2d0b2:	2300      	movs	r3, #0
   2d0b4:	a81e      	add	r0, sp, #120	; 0x78
   2d0b6:	fb02 0201 	mla	r2, r2, r1, r0
   2d0ba:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
   2d0be:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   2d0c2:	3618      	adds	r6, #24
   2d0c4:	3a30      	subs	r2, #48	; 0x30
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   2d0c6:	4299      	cmp	r1, r3
   2d0c8:	dd0b      	ble.n	2d0e2 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x8a>
                       op_params.right_padding_count] =
   2d0ca:	f856 0b04 	ldr.w	r0, [r6], #4
    right_padding_copy[i + PadKernelMaxDimensionCount() -
   2d0ce:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   2d0d2:	3301      	adds	r3, #1
   2d0d4:	e7f7      	b.n	2d0c6 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x6e>
                      op_params.left_padding_count] = op_params.left_padding[i];
   2d0d6:	f857 cb04 	ldr.w	ip, [r7], #4
    left_padding_copy[i + PadKernelMaxDimensionCount() -
   2d0da:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   2d0de:	3301      	adds	r3, #1
   2d0e0:	e7e3      	b.n	2d0aa <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x52>
  const int output_batch = ext_output_shape.Dims(0);
   2d0e2:	2100      	movs	r1, #0
   2d0e4:	a818      	add	r0, sp, #96	; 0x60
   2d0e6:	f7fa fa6f 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = ext_output_shape.Dims(1);
   2d0ea:	2101      	movs	r1, #1
  const int output_batch = ext_output_shape.Dims(0);
   2d0ec:	4680      	mov	r8, r0
  const int output_height = ext_output_shape.Dims(1);
   2d0ee:	a818      	add	r0, sp, #96	; 0x60
   2d0f0:	f7fa fa6a 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = ext_output_shape.Dims(2);
   2d0f4:	2102      	movs	r1, #2
  const int output_height = ext_output_shape.Dims(1);
   2d0f6:	4681      	mov	r9, r0
  const int output_width = ext_output_shape.Dims(2);
   2d0f8:	a818      	add	r0, sp, #96	; 0x60
   2d0fa:	f7fa fa65 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_depth = ext_output_shape.Dims(3);
   2d0fe:	2103      	movs	r1, #3
  const int output_width = ext_output_shape.Dims(2);
   2d100:	4682      	mov	sl, r0
  const int output_depth = ext_output_shape.Dims(3);
   2d102:	a818      	add	r0, sp, #96	; 0x60
   2d104:	f7fa fa60 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   2d108:	2600      	movs	r6, #0
  const int output_depth = ext_output_shape.Dims(3);
   2d10a:	4607      	mov	r7, r0
  const int left_b_padding = left_padding_copy[0];
   2d10c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  const T pad_value = *pad_value_ptr;
   2d10e:	6829      	ldr	r1, [r5, #0]
  const int left_b_padding = left_padding_copy[0];
   2d110:	9301      	str	r3, [sp, #4]
  const int left_h_padding = left_padding_copy[1];
   2d112:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2d114:	9302      	str	r3, [sp, #8]
  const int left_w_padding = left_padding_copy[2];
   2d116:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2d118:	9303      	str	r3, [sp, #12]
  const int left_d_padding = left_padding_copy[3];
   2d11a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2d11c:	9304      	str	r3, [sp, #16]
  const int right_w_padding = right_padding_copy[2];
   2d11e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2d120:	9305      	str	r3, [sp, #20]
  const int right_d_padding = right_padding_copy[3];
   2d122:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2d124:	9306      	str	r3, [sp, #24]
   2d126:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   2d12a:	009b      	lsls	r3, r3, #2
   2d12c:	9307      	str	r3, [sp, #28]
              out_b >= output_batch - right_b_padding ||
   2d12e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2d130:	eba8 0303 	sub.w	r3, r8, r3
   2d134:	9309      	str	r3, [sp, #36]	; 0x24
              out_h >= output_height - right_h_padding ||
   2d136:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d138:	eba9 0e03 	sub.w	lr, r9, r3
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   2d13c:	4546      	cmp	r6, r8
   2d13e:	da39      	bge.n	2d1b4 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x15c>
    for (int out_h = 0; out_h < output_height; ++out_h) {
   2d140:	f04f 0c00 	mov.w	ip, #0
   2d144:	45cc      	cmp	ip, r9
   2d146:	da33      	bge.n	2d1b0 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x158>
      for (int out_w = 0; out_w < output_width; ++out_w) {
   2d148:	2000      	movs	r0, #0
              out_w >= output_width - right_w_padding ||
   2d14a:	9b05      	ldr	r3, [sp, #20]
   2d14c:	ebaa 0b03 	sub.w	fp, sl, r3
              out_d >= output_depth - right_d_padding) {
   2d150:	9b06      	ldr	r3, [sp, #24]
   2d152:	1afb      	subs	r3, r7, r3
   2d154:	9308      	str	r3, [sp, #32]
      for (int out_w = 0; out_w < output_width; ++out_w) {
   2d156:	4550      	cmp	r0, sl
   2d158:	da27      	bge.n	2d1aa <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x152>
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   2d15a:	2500      	movs	r5, #0
   2d15c:	42bd      	cmp	r5, r7
   2d15e:	da1e      	bge.n	2d19e <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x146>
          if (out_b < left_b_padding ||
   2d160:	9b01      	ldr	r3, [sp, #4]
   2d162:	429e      	cmp	r6, r3
   2d164:	db19      	blt.n	2d19a <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
   2d166:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2d168:	42b3      	cmp	r3, r6
   2d16a:	dd16      	ble.n	2d19a <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_b >= output_batch - right_b_padding ||
   2d16c:	9b02      	ldr	r3, [sp, #8]
   2d16e:	459c      	cmp	ip, r3
   2d170:	db13      	blt.n	2d19a <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_h < left_h_padding ||
   2d172:	45e6      	cmp	lr, ip
   2d174:	dd11      	ble.n	2d19a <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_h >= output_height - right_h_padding ||
   2d176:	9b03      	ldr	r3, [sp, #12]
   2d178:	4298      	cmp	r0, r3
   2d17a:	db0e      	blt.n	2d19a <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_w < left_w_padding ||
   2d17c:	4583      	cmp	fp, r0
   2d17e:	dd0c      	ble.n	2d19a <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_w >= output_width - right_w_padding ||
   2d180:	9b04      	ldr	r3, [sp, #16]
   2d182:	429d      	cmp	r5, r3
   2d184:	db09      	blt.n	2d19a <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_d < left_d_padding ||
   2d186:	9b08      	ldr	r3, [sp, #32]
   2d188:	42ab      	cmp	r3, r5
   2d18a:	dd06      	ble.n	2d19a <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
            *out_ptr++ = *in_ptr++;
   2d18c:	f854 3b04 	ldr.w	r3, [r4], #4
   2d190:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   2d192:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   2d196:	3501      	adds	r5, #1
   2d198:	e7e0      	b.n	2d15c <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x104>
            *out_ptr++ = pad_value;
   2d19a:	460b      	mov	r3, r1
   2d19c:	e7f8      	b.n	2d190 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x138>
   2d19e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   2d1a0:	9a07      	ldr	r2, [sp, #28]
      for (int out_w = 0; out_w < output_width; ++out_w) {
   2d1a2:	3001      	adds	r0, #1
   2d1a4:	4413      	add	r3, r2
   2d1a6:	9329      	str	r3, [sp, #164]	; 0xa4
   2d1a8:	e7d5      	b.n	2d156 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xfe>
    for (int out_h = 0; out_h < output_height; ++out_h) {
   2d1aa:	f10c 0c01 	add.w	ip, ip, #1
   2d1ae:	e7c9      	b.n	2d144 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xec>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   2d1b0:	3601      	adds	r6, #1
   2d1b2:	e7c3      	b.n	2d13c <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xe4>
  const RuntimeShape ext_output_shape =
   2d1b4:	a818      	add	r0, sp, #96	; 0x60
   2d1b6:	f7fa f9fc 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape ext_input_shape =
   2d1ba:	a812      	add	r0, sp, #72	; 0x48
   2d1bc:	f7fa f9f9 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   2d1c0:	b01f      	add	sp, #124	; 0x7c
   2d1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002d1c6 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>:
inline void PadImpl(const tflite::PadParams& op_params,
   2d1c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d1ca:	4606      	mov	r6, r0
   2d1cc:	b09d      	sub	sp, #116	; 0x74
   2d1ce:	4614      	mov	r4, r2
   2d1d0:	461d      	mov	r5, r3
   2d1d2:	460a      	mov	r2, r1
   2d1d4:	2301      	movs	r3, #1
   2d1d6:	2104      	movs	r1, #4
   2d1d8:	a810      	add	r0, sp, #64	; 0x40
   2d1da:	f7fa fa8a 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2d1de:	2301      	movs	r3, #1
   2d1e0:	2104      	movs	r1, #4
   2d1e2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2d1e4:	a816      	add	r0, sp, #88	; 0x58
   2d1e6:	f7fa fa84 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
   2d1ea:	f996 0000 	ldrsb.w	r0, [r6]
   2d1ee:	2804      	cmp	r0, #4
   2d1f0:	dd01      	ble.n	2d1f6 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x30>
   2d1f2:	f003 fde2 	bl	30dba <abort>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
   2d1f6:	f996 1014 	ldrsb.w	r1, [r6, #20]
   2d1fa:	2904      	cmp	r1, #4
   2d1fc:	dcf9      	bgt.n	2d1f2 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   2d1fe:	f06f 0203 	mvn.w	r2, #3
    left_padding_copy[i] = 0;
   2d202:	2300      	movs	r3, #0
   2d204:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   2d208:	fb02 c200 	mla	r2, r2, r0, ip
   2d20c:	e9cd 3308 	strd	r3, r3, [sp, #32]
   2d210:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   2d214:	1d37      	adds	r7, r6, #4
   2d216:	3a40      	subs	r2, #64	; 0x40
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   2d218:	4298      	cmp	r0, r3
   2d21a:	dc13      	bgt.n	2d244 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x7e>
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   2d21c:	f06f 0203 	mvn.w	r2, #3
    right_padding_copy[i] = 0;
   2d220:	2300      	movs	r3, #0
   2d222:	a81c      	add	r0, sp, #112	; 0x70
   2d224:	fb02 0201 	mla	r2, r2, r1, r0
   2d228:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   2d22c:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   2d230:	3618      	adds	r6, #24
   2d232:	3a30      	subs	r2, #48	; 0x30
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   2d234:	4299      	cmp	r1, r3
   2d236:	dd0b      	ble.n	2d250 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x8a>
                       op_params.right_padding_count] =
   2d238:	f856 0b04 	ldr.w	r0, [r6], #4
    right_padding_copy[i + PadKernelMaxDimensionCount() -
   2d23c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   2d240:	3301      	adds	r3, #1
   2d242:	e7f7      	b.n	2d234 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x6e>
                      op_params.left_padding_count] = op_params.left_padding[i];
   2d244:	f857 cb04 	ldr.w	ip, [r7], #4
    left_padding_copy[i + PadKernelMaxDimensionCount() -
   2d248:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   2d24c:	3301      	adds	r3, #1
   2d24e:	e7e3      	b.n	2d218 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x52>
  const int output_batch = ext_output_shape.Dims(0);
   2d250:	2100      	movs	r1, #0
   2d252:	a816      	add	r0, sp, #88	; 0x58
   2d254:	f7fa f9b8 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = ext_output_shape.Dims(1);
   2d258:	2101      	movs	r1, #1
  const int output_batch = ext_output_shape.Dims(0);
   2d25a:	4680      	mov	r8, r0
  const int output_height = ext_output_shape.Dims(1);
   2d25c:	a816      	add	r0, sp, #88	; 0x58
   2d25e:	f7fa f9b3 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = ext_output_shape.Dims(2);
   2d262:	2102      	movs	r1, #2
  const int output_height = ext_output_shape.Dims(1);
   2d264:	4681      	mov	r9, r0
  const int output_width = ext_output_shape.Dims(2);
   2d266:	a816      	add	r0, sp, #88	; 0x58
   2d268:	f7fa f9ae 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_depth = ext_output_shape.Dims(3);
   2d26c:	2103      	movs	r1, #3
  const int output_width = ext_output_shape.Dims(2);
   2d26e:	4682      	mov	sl, r0
  const int output_depth = ext_output_shape.Dims(3);
   2d270:	a816      	add	r0, sp, #88	; 0x58
   2d272:	f7fa f9a9 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int left_b_padding = left_padding_copy[0];
   2d276:	9b08      	ldr	r3, [sp, #32]
  const T pad_value = *pad_value_ptr;
   2d278:	ed95 7a00 	vldr	s14, [r5]
  const int left_b_padding = left_padding_copy[0];
   2d27c:	9300      	str	r3, [sp, #0]
  const int left_h_padding = left_padding_copy[1];
   2d27e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  const int output_depth = ext_output_shape.Dims(3);
   2d280:	4601      	mov	r1, r0
  const int left_h_padding = left_padding_copy[1];
   2d282:	9301      	str	r3, [sp, #4]
  const int left_w_padding = left_padding_copy[2];
   2d284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
              out_h >= output_height - right_h_padding ||
   2d286:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  const int left_w_padding = left_padding_copy[2];
   2d288:	9302      	str	r3, [sp, #8]
  const int left_d_padding = left_padding_copy[3];
   2d28a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
              out_h >= output_height - right_h_padding ||
   2d28c:	eba9 0c02 	sub.w	ip, r9, r2
  const int left_d_padding = left_padding_copy[3];
   2d290:	9303      	str	r3, [sp, #12]
  const int right_w_padding = right_padding_copy[2];
   2d292:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2d294:	9304      	str	r3, [sp, #16]
  const int right_d_padding = right_padding_copy[3];
   2d296:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d298:	9305      	str	r3, [sp, #20]
   2d29a:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   2d29e:	009b      	lsls	r3, r3, #2
   2d2a0:	9306      	str	r3, [sp, #24]
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   2d2a2:	2300      	movs	r3, #0
              out_b >= output_batch - right_b_padding ||
   2d2a4:	980c      	ldr	r0, [sp, #48]	; 0x30
   2d2a6:	eba8 0000 	sub.w	r0, r8, r0
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   2d2aa:	4543      	cmp	r3, r8
   2d2ac:	da38      	bge.n	2d320 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x15a>
    for (int out_h = 0; out_h < output_height; ++out_h) {
   2d2ae:	2500      	movs	r5, #0
   2d2b0:	454d      	cmp	r5, r9
   2d2b2:	da33      	bge.n	2d31c <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x156>
      for (int out_w = 0; out_w < output_width; ++out_w) {
   2d2b4:	2600      	movs	r6, #0
              out_w >= output_width - right_w_padding ||
   2d2b6:	9a04      	ldr	r2, [sp, #16]
   2d2b8:	ebaa 0b02 	sub.w	fp, sl, r2
              out_d >= output_depth - right_d_padding) {
   2d2bc:	9a05      	ldr	r2, [sp, #20]
   2d2be:	1a8a      	subs	r2, r1, r2
   2d2c0:	9207      	str	r2, [sp, #28]
      for (int out_w = 0; out_w < output_width; ++out_w) {
   2d2c2:	4556      	cmp	r6, sl
   2d2c4:	da28      	bge.n	2d318 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x152>
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   2d2c6:	2700      	movs	r7, #0
   2d2c8:	f8dd e09c 	ldr.w	lr, [sp, #156]	; 0x9c
   2d2cc:	428f      	cmp	r7, r1
   2d2ce:	da1d      	bge.n	2d30c <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x146>
          if (out_b < left_b_padding ||
   2d2d0:	9a00      	ldr	r2, [sp, #0]
   2d2d2:	4293      	cmp	r3, r2
   2d2d4:	db17      	blt.n	2d306 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x140>
   2d2d6:	4298      	cmp	r0, r3
   2d2d8:	dd15      	ble.n	2d306 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x140>
              out_b >= output_batch - right_b_padding ||
   2d2da:	9a01      	ldr	r2, [sp, #4]
   2d2dc:	4295      	cmp	r5, r2
   2d2de:	db12      	blt.n	2d306 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x140>
              out_h < left_h_padding ||
   2d2e0:	45ac      	cmp	ip, r5
   2d2e2:	dd10      	ble.n	2d306 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x140>
              out_h >= output_height - right_h_padding ||
   2d2e4:	9a02      	ldr	r2, [sp, #8]
   2d2e6:	4296      	cmp	r6, r2
   2d2e8:	db0d      	blt.n	2d306 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x140>
              out_w < left_w_padding ||
   2d2ea:	45b3      	cmp	fp, r6
   2d2ec:	dd0b      	ble.n	2d306 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x140>
              out_w >= output_width - right_w_padding ||
   2d2ee:	9a03      	ldr	r2, [sp, #12]
   2d2f0:	4297      	cmp	r7, r2
   2d2f2:	db08      	blt.n	2d306 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x140>
              out_d < left_d_padding ||
   2d2f4:	9a07      	ldr	r2, [sp, #28]
   2d2f6:	42ba      	cmp	r2, r7
   2d2f8:	dd05      	ble.n	2d306 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x140>
            *out_ptr++ = *in_ptr++;
   2d2fa:	ecf4 7a01 	vldmia	r4!, {s15}
   2d2fe:	ecee 7a01 	vstmia	lr!, {s15}
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   2d302:	3701      	adds	r7, #1
   2d304:	e7e2      	b.n	2d2cc <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x106>
            *out_ptr++ = pad_value;
   2d306:	eef0 7a47 	vmov.f32	s15, s14
   2d30a:	e7f8      	b.n	2d2fe <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x138>
   2d30c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2d30e:	9f06      	ldr	r7, [sp, #24]
      for (int out_w = 0; out_w < output_width; ++out_w) {
   2d310:	3601      	adds	r6, #1
   2d312:	443a      	add	r2, r7
   2d314:	9227      	str	r2, [sp, #156]	; 0x9c
   2d316:	e7d4      	b.n	2d2c2 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xfc>
    for (int out_h = 0; out_h < output_height; ++out_h) {
   2d318:	3501      	adds	r5, #1
   2d31a:	e7c9      	b.n	2d2b0 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xea>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   2d31c:	3301      	adds	r3, #1
   2d31e:	e7c4      	b.n	2d2aa <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xe4>
  const RuntimeShape ext_output_shape =
   2d320:	a816      	add	r0, sp, #88	; 0x58
   2d322:	f7fa f946 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape ext_input_shape =
   2d326:	a810      	add	r0, sp, #64	; 0x40
   2d328:	f7fa f943 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   2d32c:	b01d      	add	sp, #116	; 0x74
   2d32e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002d332 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>:
inline void PadImpl(const tflite::PadParams& op_params,
   2d332:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d336:	4606      	mov	r6, r0
   2d338:	b09f      	sub	sp, #124	; 0x7c
   2d33a:	4614      	mov	r4, r2
   2d33c:	461d      	mov	r5, r3
   2d33e:	460a      	mov	r2, r1
   2d340:	2301      	movs	r3, #1
   2d342:	2104      	movs	r1, #4
   2d344:	a812      	add	r0, sp, #72	; 0x48
   2d346:	f7fa f9d4 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2d34a:	2301      	movs	r3, #1
   2d34c:	2104      	movs	r1, #4
   2d34e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   2d350:	a818      	add	r0, sp, #96	; 0x60
   2d352:	f7fa f9ce 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
   2d356:	f996 0000 	ldrsb.w	r0, [r6]
   2d35a:	2804      	cmp	r0, #4
   2d35c:	dd01      	ble.n	2d362 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x30>
   2d35e:	f003 fd2c 	bl	30dba <abort>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
   2d362:	f996 1014 	ldrsb.w	r1, [r6, #20]
   2d366:	2904      	cmp	r1, #4
   2d368:	dcf9      	bgt.n	2d35e <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   2d36a:	f06f 0203 	mvn.w	r2, #3
    left_padding_copy[i] = 0;
   2d36e:	2300      	movs	r3, #0
   2d370:	f10d 0c78 	add.w	ip, sp, #120	; 0x78
   2d374:	fb02 c200 	mla	r2, r2, r0, ip
   2d378:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   2d37c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   2d380:	1d37      	adds	r7, r6, #4
   2d382:	3a40      	subs	r2, #64	; 0x40
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   2d384:	4298      	cmp	r0, r3
   2d386:	dc13      	bgt.n	2d3b0 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x7e>
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   2d388:	f06f 0203 	mvn.w	r2, #3
    right_padding_copy[i] = 0;
   2d38c:	2300      	movs	r3, #0
   2d38e:	a81e      	add	r0, sp, #120	; 0x78
   2d390:	fb02 0201 	mla	r2, r2, r1, r0
   2d394:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
   2d398:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   2d39c:	3618      	adds	r6, #24
   2d39e:	3a30      	subs	r2, #48	; 0x30
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   2d3a0:	4299      	cmp	r1, r3
   2d3a2:	dd0b      	ble.n	2d3bc <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x8a>
                       op_params.right_padding_count] =
   2d3a4:	f856 0b04 	ldr.w	r0, [r6], #4
    right_padding_copy[i + PadKernelMaxDimensionCount() -
   2d3a8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   2d3ac:	3301      	adds	r3, #1
   2d3ae:	e7f7      	b.n	2d3a0 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x6e>
                      op_params.left_padding_count] = op_params.left_padding[i];
   2d3b0:	f857 cb04 	ldr.w	ip, [r7], #4
    left_padding_copy[i + PadKernelMaxDimensionCount() -
   2d3b4:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   2d3b8:	3301      	adds	r3, #1
   2d3ba:	e7e3      	b.n	2d384 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x52>
  const int output_batch = ext_output_shape.Dims(0);
   2d3bc:	2100      	movs	r1, #0
   2d3be:	a818      	add	r0, sp, #96	; 0x60
   2d3c0:	f7fa f902 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = ext_output_shape.Dims(1);
   2d3c4:	2101      	movs	r1, #1
  const int output_batch = ext_output_shape.Dims(0);
   2d3c6:	4680      	mov	r8, r0
  const int output_height = ext_output_shape.Dims(1);
   2d3c8:	a818      	add	r0, sp, #96	; 0x60
   2d3ca:	f7fa f8fd 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = ext_output_shape.Dims(2);
   2d3ce:	2102      	movs	r1, #2
  const int output_height = ext_output_shape.Dims(1);
   2d3d0:	4681      	mov	r9, r0
  const int output_width = ext_output_shape.Dims(2);
   2d3d2:	a818      	add	r0, sp, #96	; 0x60
   2d3d4:	f7fa f8f8 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_depth = ext_output_shape.Dims(3);
   2d3d8:	2103      	movs	r1, #3
  const int output_width = ext_output_shape.Dims(2);
   2d3da:	4682      	mov	sl, r0
  const int output_depth = ext_output_shape.Dims(3);
   2d3dc:	a818      	add	r0, sp, #96	; 0x60
   2d3de:	f7fa f8f3 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   2d3e2:	2600      	movs	r6, #0
  const int output_depth = ext_output_shape.Dims(3);
   2d3e4:	4607      	mov	r7, r0
  const int left_b_padding = left_padding_copy[0];
   2d3e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  const T pad_value = *pad_value_ptr;
   2d3e8:	7829      	ldrb	r1, [r5, #0]
  const int left_b_padding = left_padding_copy[0];
   2d3ea:	9300      	str	r3, [sp, #0]
  const int left_h_padding = left_padding_copy[1];
   2d3ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2d3ee:	9301      	str	r3, [sp, #4]
  const int left_w_padding = left_padding_copy[2];
   2d3f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2d3f2:	9302      	str	r3, [sp, #8]
  const int left_d_padding = left_padding_copy[3];
   2d3f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2d3f6:	9303      	str	r3, [sp, #12]
  const int right_h_padding = right_padding_copy[1];
   2d3f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d3fa:	9304      	str	r3, [sp, #16]
  const int right_w_padding = right_padding_copy[2];
   2d3fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2d3fe:	9305      	str	r3, [sp, #20]
  const int right_d_padding = right_padding_copy[3];
   2d400:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2d402:	9306      	str	r3, [sp, #24]
              out_b >= output_batch - right_b_padding ||
   2d404:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2d406:	eba8 0303 	sub.w	r3, r8, r3
   2d40a:	9308      	str	r3, [sp, #32]
   2d40c:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   2d410:	9309      	str	r3, [sp, #36]	; 0x24
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   2d412:	4546      	cmp	r6, r8
   2d414:	da3b      	bge.n	2d48e <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x15c>
    for (int out_h = 0; out_h < output_height; ++out_h) {
   2d416:	f04f 0c00 	mov.w	ip, #0
              out_h >= output_height - right_h_padding ||
   2d41a:	9b04      	ldr	r3, [sp, #16]
   2d41c:	eba9 0e03 	sub.w	lr, r9, r3
    for (int out_h = 0; out_h < output_height; ++out_h) {
   2d420:	45cc      	cmp	ip, r9
   2d422:	da32      	bge.n	2d48a <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x158>
      for (int out_w = 0; out_w < output_width; ++out_w) {
   2d424:	2000      	movs	r0, #0
              out_w >= output_width - right_w_padding ||
   2d426:	9b05      	ldr	r3, [sp, #20]
   2d428:	ebaa 0b03 	sub.w	fp, sl, r3
      for (int out_w = 0; out_w < output_width; ++out_w) {
   2d42c:	4550      	cmp	r0, sl
   2d42e:	da29      	bge.n	2d484 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x152>
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   2d430:	2500      	movs	r5, #0
              out_d >= output_depth - right_d_padding) {
   2d432:	9b06      	ldr	r3, [sp, #24]
   2d434:	1afb      	subs	r3, r7, r3
   2d436:	9307      	str	r3, [sp, #28]
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   2d438:	42bd      	cmp	r5, r7
   2d43a:	da1d      	bge.n	2d478 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x146>
          if (out_b < left_b_padding ||
   2d43c:	9b00      	ldr	r3, [sp, #0]
   2d43e:	429e      	cmp	r6, r3
   2d440:	db18      	blt.n	2d474 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
   2d442:	9b08      	ldr	r3, [sp, #32]
   2d444:	42b3      	cmp	r3, r6
   2d446:	dd15      	ble.n	2d474 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_b >= output_batch - right_b_padding ||
   2d448:	9b01      	ldr	r3, [sp, #4]
   2d44a:	459c      	cmp	ip, r3
   2d44c:	db12      	blt.n	2d474 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_h < left_h_padding ||
   2d44e:	45e6      	cmp	lr, ip
   2d450:	dd10      	ble.n	2d474 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_h >= output_height - right_h_padding ||
   2d452:	9b02      	ldr	r3, [sp, #8]
   2d454:	4298      	cmp	r0, r3
   2d456:	db0d      	blt.n	2d474 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_w < left_w_padding ||
   2d458:	4583      	cmp	fp, r0
   2d45a:	dd0b      	ble.n	2d474 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_w >= output_width - right_w_padding ||
   2d45c:	9b03      	ldr	r3, [sp, #12]
   2d45e:	429d      	cmp	r5, r3
   2d460:	db08      	blt.n	2d474 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_d < left_d_padding ||
   2d462:	9b07      	ldr	r3, [sp, #28]
   2d464:	42ab      	cmp	r3, r5
   2d466:	dd05      	ble.n	2d474 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
            *out_ptr++ = *in_ptr++;
   2d468:	f814 3b01 	ldrb.w	r3, [r4], #1
   2d46c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   2d46e:	5553      	strb	r3, [r2, r5]
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   2d470:	3501      	adds	r5, #1
   2d472:	e7e1      	b.n	2d438 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x106>
            *out_ptr++ = pad_value;
   2d474:	460b      	mov	r3, r1
   2d476:	e7f9      	b.n	2d46c <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x13a>
   2d478:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   2d47a:	9a09      	ldr	r2, [sp, #36]	; 0x24
      for (int out_w = 0; out_w < output_width; ++out_w) {
   2d47c:	3001      	adds	r0, #1
   2d47e:	4413      	add	r3, r2
   2d480:	9329      	str	r3, [sp, #164]	; 0xa4
   2d482:	e7d3      	b.n	2d42c <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xfa>
    for (int out_h = 0; out_h < output_height; ++out_h) {
   2d484:	f10c 0c01 	add.w	ip, ip, #1
   2d488:	e7ca      	b.n	2d420 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xee>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   2d48a:	3601      	adds	r6, #1
   2d48c:	e7c1      	b.n	2d412 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xe0>
  const RuntimeShape ext_output_shape =
   2d48e:	a818      	add	r0, sp, #96	; 0x60
   2d490:	f7fa f88f 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape ext_input_shape =
   2d494:	a812      	add	r0, sp, #72	; 0x48
   2d496:	f7fa f88c 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   2d49a:	b01f      	add	sp, #124	; 0x7c
   2d49c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002d4a0 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>:
inline void PadImpl(const tflite::PadParams& op_params,
   2d4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d4a4:	4606      	mov	r6, r0
   2d4a6:	b09f      	sub	sp, #124	; 0x7c
   2d4a8:	4614      	mov	r4, r2
   2d4aa:	461d      	mov	r5, r3
   2d4ac:	460a      	mov	r2, r1
   2d4ae:	2301      	movs	r3, #1
   2d4b0:	2104      	movs	r1, #4
   2d4b2:	a812      	add	r0, sp, #72	; 0x48
   2d4b4:	f7fa f91d 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2d4b8:	2301      	movs	r3, #1
   2d4ba:	2104      	movs	r1, #4
   2d4bc:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   2d4be:	a818      	add	r0, sp, #96	; 0x60
   2d4c0:	f7fa f917 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
   2d4c4:	f996 0000 	ldrsb.w	r0, [r6]
   2d4c8:	2804      	cmp	r0, #4
   2d4ca:	dd01      	ble.n	2d4d0 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x30>
   2d4cc:	f003 fc75 	bl	30dba <abort>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
   2d4d0:	f996 1014 	ldrsb.w	r1, [r6, #20]
   2d4d4:	2904      	cmp	r1, #4
   2d4d6:	dcf9      	bgt.n	2d4cc <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   2d4d8:	f06f 0203 	mvn.w	r2, #3
    left_padding_copy[i] = 0;
   2d4dc:	2300      	movs	r3, #0
   2d4de:	f10d 0c78 	add.w	ip, sp, #120	; 0x78
   2d4e2:	fb02 c200 	mla	r2, r2, r0, ip
   2d4e6:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   2d4ea:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   2d4ee:	1d37      	adds	r7, r6, #4
   2d4f0:	3a40      	subs	r2, #64	; 0x40
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   2d4f2:	4298      	cmp	r0, r3
   2d4f4:	dc13      	bgt.n	2d51e <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x7e>
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   2d4f6:	f06f 0203 	mvn.w	r2, #3
    right_padding_copy[i] = 0;
   2d4fa:	2300      	movs	r3, #0
   2d4fc:	a81e      	add	r0, sp, #120	; 0x78
   2d4fe:	fb02 0201 	mla	r2, r2, r1, r0
   2d502:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
   2d506:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   2d50a:	3618      	adds	r6, #24
   2d50c:	3a30      	subs	r2, #48	; 0x30
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   2d50e:	4299      	cmp	r1, r3
   2d510:	dd0b      	ble.n	2d52a <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x8a>
                       op_params.right_padding_count] =
   2d512:	f856 0b04 	ldr.w	r0, [r6], #4
    right_padding_copy[i + PadKernelMaxDimensionCount() -
   2d516:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   2d51a:	3301      	adds	r3, #1
   2d51c:	e7f7      	b.n	2d50e <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x6e>
                      op_params.left_padding_count] = op_params.left_padding[i];
   2d51e:	f857 cb04 	ldr.w	ip, [r7], #4
    left_padding_copy[i + PadKernelMaxDimensionCount() -
   2d522:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   2d526:	3301      	adds	r3, #1
   2d528:	e7e3      	b.n	2d4f2 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x52>
  const int output_batch = ext_output_shape.Dims(0);
   2d52a:	2100      	movs	r1, #0
   2d52c:	a818      	add	r0, sp, #96	; 0x60
   2d52e:	f7fa f84b 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = ext_output_shape.Dims(1);
   2d532:	2101      	movs	r1, #1
  const int output_batch = ext_output_shape.Dims(0);
   2d534:	4680      	mov	r8, r0
  const int output_height = ext_output_shape.Dims(1);
   2d536:	a818      	add	r0, sp, #96	; 0x60
   2d538:	f7fa f846 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = ext_output_shape.Dims(2);
   2d53c:	2102      	movs	r1, #2
  const int output_height = ext_output_shape.Dims(1);
   2d53e:	4681      	mov	r9, r0
  const int output_width = ext_output_shape.Dims(2);
   2d540:	a818      	add	r0, sp, #96	; 0x60
   2d542:	f7fa f841 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_depth = ext_output_shape.Dims(3);
   2d546:	2103      	movs	r1, #3
  const int output_width = ext_output_shape.Dims(2);
   2d548:	4682      	mov	sl, r0
  const int output_depth = ext_output_shape.Dims(3);
   2d54a:	a818      	add	r0, sp, #96	; 0x60
   2d54c:	f7fa f83c 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   2d550:	2600      	movs	r6, #0
  const int output_depth = ext_output_shape.Dims(3);
   2d552:	4607      	mov	r7, r0
  const int left_b_padding = left_padding_copy[0];
   2d554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  const T pad_value = *pad_value_ptr;
   2d556:	f995 1000 	ldrsb.w	r1, [r5]
  const int left_b_padding = left_padding_copy[0];
   2d55a:	9300      	str	r3, [sp, #0]
  const int left_h_padding = left_padding_copy[1];
   2d55c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2d55e:	9301      	str	r3, [sp, #4]
  const int left_w_padding = left_padding_copy[2];
   2d560:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2d562:	9302      	str	r3, [sp, #8]
  const int left_d_padding = left_padding_copy[3];
   2d564:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2d566:	9303      	str	r3, [sp, #12]
  const int right_h_padding = right_padding_copy[1];
   2d568:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d56a:	9304      	str	r3, [sp, #16]
  const int right_w_padding = right_padding_copy[2];
   2d56c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2d56e:	9305      	str	r3, [sp, #20]
  const int right_d_padding = right_padding_copy[3];
   2d570:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2d572:	9306      	str	r3, [sp, #24]
              out_b >= output_batch - right_b_padding ||
   2d574:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2d576:	eba8 0303 	sub.w	r3, r8, r3
   2d57a:	9308      	str	r3, [sp, #32]
   2d57c:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   2d580:	9309      	str	r3, [sp, #36]	; 0x24
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   2d582:	4546      	cmp	r6, r8
   2d584:	da3b      	bge.n	2d5fe <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x15e>
    for (int out_h = 0; out_h < output_height; ++out_h) {
   2d586:	f04f 0c00 	mov.w	ip, #0
              out_h >= output_height - right_h_padding ||
   2d58a:	9b04      	ldr	r3, [sp, #16]
   2d58c:	eba9 0e03 	sub.w	lr, r9, r3
    for (int out_h = 0; out_h < output_height; ++out_h) {
   2d590:	45cc      	cmp	ip, r9
   2d592:	da32      	bge.n	2d5fa <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x15a>
      for (int out_w = 0; out_w < output_width; ++out_w) {
   2d594:	2000      	movs	r0, #0
              out_w >= output_width - right_w_padding ||
   2d596:	9b05      	ldr	r3, [sp, #20]
   2d598:	ebaa 0b03 	sub.w	fp, sl, r3
      for (int out_w = 0; out_w < output_width; ++out_w) {
   2d59c:	4550      	cmp	r0, sl
   2d59e:	da29      	bge.n	2d5f4 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x154>
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   2d5a0:	2500      	movs	r5, #0
              out_d >= output_depth - right_d_padding) {
   2d5a2:	9b06      	ldr	r3, [sp, #24]
   2d5a4:	1afb      	subs	r3, r7, r3
   2d5a6:	9307      	str	r3, [sp, #28]
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   2d5a8:	42bd      	cmp	r5, r7
   2d5aa:	da1d      	bge.n	2d5e8 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x148>
          if (out_b < left_b_padding ||
   2d5ac:	9b00      	ldr	r3, [sp, #0]
   2d5ae:	429e      	cmp	r6, r3
   2d5b0:	db18      	blt.n	2d5e4 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x144>
   2d5b2:	9b08      	ldr	r3, [sp, #32]
   2d5b4:	42b3      	cmp	r3, r6
   2d5b6:	dd15      	ble.n	2d5e4 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x144>
              out_b >= output_batch - right_b_padding ||
   2d5b8:	9b01      	ldr	r3, [sp, #4]
   2d5ba:	459c      	cmp	ip, r3
   2d5bc:	db12      	blt.n	2d5e4 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x144>
              out_h < left_h_padding ||
   2d5be:	45e6      	cmp	lr, ip
   2d5c0:	dd10      	ble.n	2d5e4 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x144>
              out_h >= output_height - right_h_padding ||
   2d5c2:	9b02      	ldr	r3, [sp, #8]
   2d5c4:	4298      	cmp	r0, r3
   2d5c6:	db0d      	blt.n	2d5e4 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x144>
              out_w < left_w_padding ||
   2d5c8:	4583      	cmp	fp, r0
   2d5ca:	dd0b      	ble.n	2d5e4 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x144>
              out_w >= output_width - right_w_padding ||
   2d5cc:	9b03      	ldr	r3, [sp, #12]
   2d5ce:	429d      	cmp	r5, r3
   2d5d0:	db08      	blt.n	2d5e4 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x144>
              out_d < left_d_padding ||
   2d5d2:	9b07      	ldr	r3, [sp, #28]
   2d5d4:	42ab      	cmp	r3, r5
   2d5d6:	dd05      	ble.n	2d5e4 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x144>
            *out_ptr++ = *in_ptr++;
   2d5d8:	f914 3b01 	ldrsb.w	r3, [r4], #1
   2d5dc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   2d5de:	5553      	strb	r3, [r2, r5]
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   2d5e0:	3501      	adds	r5, #1
   2d5e2:	e7e1      	b.n	2d5a8 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x108>
            *out_ptr++ = pad_value;
   2d5e4:	460b      	mov	r3, r1
   2d5e6:	e7f9      	b.n	2d5dc <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x13c>
   2d5e8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   2d5ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
      for (int out_w = 0; out_w < output_width; ++out_w) {
   2d5ec:	3001      	adds	r0, #1
   2d5ee:	4413      	add	r3, r2
   2d5f0:	9329      	str	r3, [sp, #164]	; 0xa4
   2d5f2:	e7d3      	b.n	2d59c <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xfc>
    for (int out_h = 0; out_h < output_height; ++out_h) {
   2d5f4:	f10c 0c01 	add.w	ip, ip, #1
   2d5f8:	e7ca      	b.n	2d590 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xf0>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   2d5fa:	3601      	adds	r6, #1
   2d5fc:	e7c1      	b.n	2d582 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xe2>
  const RuntimeShape ext_output_shape =
   2d5fe:	a818      	add	r0, sp, #96	; 0x60
   2d600:	f7f9 ffd7 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape ext_input_shape =
   2d604:	a812      	add	r0, sp, #72	; 0x48
   2d606:	f7f9 ffd4 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   2d60a:	b01f      	add	sp, #124	; 0x7c
   2d60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002d610 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>:

inline void AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const uint8* input_data,
                        const RuntimeShape& output_shape, uint8* output_data) {
   2d610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d614:	b097      	sub	sp, #92	; 0x5c
   2d616:	4698      	mov	r8, r3
   2d618:	9213      	str	r2, [sp, #76]	; 0x4c
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   2d61a:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
   2d61e:	429a      	cmp	r2, r3
                        const RuntimeShape& output_shape, uint8* output_data) {
   2d620:	4604      	mov	r4, r0
   2d622:	460f      	mov	r7, r1
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   2d624:	dd01      	ble.n	2d62a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1a>
   2d626:	f003 fbc8 	bl	30dba <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   2d62a:	680b      	ldr	r3, [r1, #0]
   2d62c:	2b04      	cmp	r3, #4
   2d62e:	d1fa      	bne.n	2d626 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   2d630:	f8d8 3000 	ldr.w	r3, [r8]
   2d634:	2b04      	cmp	r3, #4
   2d636:	d1f6      	bne.n	2d626 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   2d638:	2300      	movs	r3, #0
   2d63a:	4642      	mov	r2, r8
   2d63c:	4619      	mov	r1, r3
   2d63e:	4638      	mov	r0, r7
   2d640:	f7fc fe6c 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   2d644:	2303      	movs	r3, #3
   2d646:	4642      	mov	r2, r8
   2d648:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   2d64a:	900a      	str	r0, [sp, #40]	; 0x28
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   2d64c:	4638      	mov	r0, r7
   2d64e:	f7fc fe65 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   2d652:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   2d654:	900b      	str	r0, [sp, #44]	; 0x2c
  const int input_height = input_shape.Dims(1);
   2d656:	4638      	mov	r0, r7
   2d658:	f7f9 ffb6 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   2d65c:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   2d65e:	900c      	str	r0, [sp, #48]	; 0x30
  const int input_width = input_shape.Dims(2);
   2d660:	4638      	mov	r0, r7
   2d662:	f7f9 ffb1 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   2d666:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   2d668:	900d      	str	r0, [sp, #52]	; 0x34
  const int output_height = output_shape.Dims(1);
   2d66a:	4640      	mov	r0, r8
   2d66c:	f7f9 ffac 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   2d670:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   2d672:	900e      	str	r0, [sp, #56]	; 0x38
  const int output_width = output_shape.Dims(2);
   2d674:	4640      	mov	r0, r8
   2d676:	f7f9 ffa7 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
  const int stride_width = params.stride_width;
  for (int batch = 0; batch < batches; ++batch) {
   2d67a:	2100      	movs	r1, #0
  const int stride_height = params.stride_height;
   2d67c:	68e3      	ldr	r3, [r4, #12]
  const int output_width = output_shape.Dims(2);
   2d67e:	900f      	str	r0, [sp, #60]	; 0x3c
  const int stride_height = params.stride_height;
   2d680:	9310      	str	r3, [sp, #64]	; 0x40
  const int stride_width = params.stride_width;
   2d682:	6923      	ldr	r3, [r4, #16]
   2d684:	9311      	str	r3, [sp, #68]	; 0x44
  for (int batch = 0; batch < batches; ++batch) {
   2d686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d688:	4299      	cmp	r1, r3
   2d68a:	f280 808d 	bge.w	2d7a8 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x198>
   2d68e:	f04f 0b00 	mov.w	fp, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   2d692:	f8cd b010 	str.w	fp, [sp, #16]
   2d696:	9b04      	ldr	r3, [sp, #16]
   2d698:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2d69a:	4293      	cmp	r3, r2
   2d69c:	f280 8082 	bge.w	2d7a4 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x194>
      for (int out_x = 0; out_x < output_width; ++out_x) {
        for (int channel = 0; channel < depth; ++channel) {
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
   2d6a0:	f04f 0a00 	mov.w	sl, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
   2d6a4:	f8cd a014 	str.w	sl, [sp, #20]
   2d6a8:	9b05      	ldr	r3, [sp, #20]
   2d6aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2d6ac:	4293      	cmp	r3, r2
   2d6ae:	da73      	bge.n	2d798 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x188>
        for (int channel = 0; channel < depth; ++channel) {
   2d6b0:	2300      	movs	r3, #0
   2d6b2:	9303      	str	r3, [sp, #12]
   2d6b4:	9b03      	ldr	r3, [sp, #12]
   2d6b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2d6b8:	4293      	cmp	r3, r2
   2d6ba:	da67      	bge.n	2d78c <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x17c>
              (out_x * stride_width) - params.padding_values.width;
   2d6bc:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
              (out_y * stride_height) - params.padding_values.height;
   2d6c0:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
          const int in_x_origin =
   2d6c4:	ebaa 0306 	sub.w	r3, sl, r6
   2d6c8:	9312      	str	r3, [sp, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
   2d6ca:	eba6 060a 	sub.w	r6, r6, sl
          const int in_y_origin =
   2d6ce:	ebab 0302 	sub.w	r3, fp, r2
   2d6d2:	9308      	str	r3, [sp, #32]
          const int filter_x_start = std::max(0, -in_x_origin);
   2d6d4:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
   2d6d8:	9307      	str	r3, [sp, #28]
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
   2d6da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
          const int filter_y_start = std::max(0, -in_y_origin);
   2d6dc:	eba2 020b 	sub.w	r2, r2, fp
              std::min(params.filter_width, input_width - in_x_origin);
   2d6e0:	441e      	add	r6, r3
   2d6e2:	69a3      	ldr	r3, [r4, #24]
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
          int32 acc = 0;
   2d6e4:	2500      	movs	r5, #0
   2d6e6:	429e      	cmp	r6, r3
   2d6e8:	bfa8      	it	ge
   2d6ea:	461e      	movge	r6, r3
              std::min(params.filter_height, input_height - in_y_origin);
   2d6ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
          int filter_count = 0;
   2d6ee:	46a9      	mov	r9, r5
              std::min(params.filter_height, input_height - in_y_origin);
   2d6f0:	18d0      	adds	r0, r2, r3
   2d6f2:	6963      	ldr	r3, [r4, #20]
   2d6f4:	9606      	str	r6, [sp, #24]
    min(const _Tp& __a, const _Tp& __b)
   2d6f6:	4298      	cmp	r0, r3
   2d6f8:	bfa8      	it	ge
   2d6fa:	4618      	movge	r0, r3
   2d6fc:	9b08      	ldr	r3, [sp, #32]
   2d6fe:	9009      	str	r0, [sp, #36]	; 0x24
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   2d700:	2a00      	cmp	r2, #0
   2d702:	bfa8      	it	ge
   2d704:	189b      	addge	r3, r3, r2
   2d706:	461a      	mov	r2, r3
   2d708:	9b08      	ldr	r3, [sp, #32]
   2d70a:	9809      	ldr	r0, [sp, #36]	; 0x24
   2d70c:	1ad3      	subs	r3, r2, r3
   2d70e:	4283      	cmp	r3, r0
   2d710:	da1e      	bge.n	2d750 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x140>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   2d712:	9e07      	ldr	r6, [sp, #28]
   2d714:	9b06      	ldr	r3, [sp, #24]
   2d716:	429e      	cmp	r6, r3
   2d718:	da0f      	bge.n	2d73a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x12a>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              acc +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   2d71a:	9b03      	ldr	r3, [sp, #12]
   2d71c:	4638      	mov	r0, r7
   2d71e:	9300      	str	r3, [sp, #0]
   2d720:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2d722:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
   2d726:	4433      	add	r3, r6
   2d728:	f7fa f810 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   2d72c:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
              acc +=
   2d730:	9b13      	ldr	r3, [sp, #76]	; 0x4c
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   2d732:	3601      	adds	r6, #1
              acc +=
   2d734:	5c1b      	ldrb	r3, [r3, r0]
   2d736:	441d      	add	r5, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   2d738:	e7ec      	b.n	2d714 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x104>
   2d73a:	e9dd 3006 	ldrd	r3, r0, [sp, #24]
   2d73e:	1a1b      	subs	r3, r3, r0
   2d740:	e9dd 0606 	ldrd	r0, r6, [sp, #24]
   2d744:	42b0      	cmp	r0, r6
   2d746:	bfb8      	it	lt
   2d748:	2300      	movlt	r3, #0
   2d74a:	3201      	adds	r2, #1
   2d74c:	4499      	add	r9, r3
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   2d74e:	e7db      	b.n	2d708 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xf8>
              filter_count++;
            }
          }
          acc = (acc + filter_count / 2) / filter_count;
   2d750:	eb09 73d9 	add.w	r3, r9, r9, lsr #31
   2d754:	eb05 0563 	add.w	r5, r5, r3, asr #1
   2d758:	fb95 f9f9 	sdiv	r9, r5, r9
   2d75c:	69e5      	ldr	r5, [r4, #28]
          acc = std::max(acc, params.quantized_activation_min);
          acc = std::min(acc, params.quantized_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   2d75e:	9b03      	ldr	r3, [sp, #12]
   2d760:	45a9      	cmp	r9, r5
   2d762:	bfb8      	it	lt
   2d764:	46a9      	movlt	r9, r5
   2d766:	6a25      	ldr	r5, [r4, #32]
   2d768:	9300      	str	r3, [sp, #0]
   2d76a:	45a9      	cmp	r9, r5
   2d76c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   2d770:	4640      	mov	r0, r8
   2d772:	bfa8      	it	ge
   2d774:	46a9      	movge	r9, r5
   2d776:	9106      	str	r1, [sp, #24]
   2d778:	f7f9 ffe8 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   2d77c:	9b20      	ldr	r3, [sp, #128]	; 0x80
        for (int channel = 0; channel < depth; ++channel) {
   2d77e:	9906      	ldr	r1, [sp, #24]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   2d780:	f803 9000 	strb.w	r9, [r3, r0]
        for (int channel = 0; channel < depth; ++channel) {
   2d784:	9b03      	ldr	r3, [sp, #12]
   2d786:	3301      	adds	r3, #1
   2d788:	9303      	str	r3, [sp, #12]
   2d78a:	e793      	b.n	2d6b4 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xa4>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   2d78c:	9b05      	ldr	r3, [sp, #20]
   2d78e:	3301      	adds	r3, #1
   2d790:	9305      	str	r3, [sp, #20]
   2d792:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2d794:	449a      	add	sl, r3
   2d796:	e787      	b.n	2d6a8 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x98>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   2d798:	9b04      	ldr	r3, [sp, #16]
   2d79a:	3301      	adds	r3, #1
   2d79c:	9304      	str	r3, [sp, #16]
   2d79e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2d7a0:	449b      	add	fp, r3
   2d7a2:	e778      	b.n	2d696 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x86>
  for (int batch = 0; batch < batches; ++batch) {
   2d7a4:	3101      	adds	r1, #1
   2d7a6:	e76e      	b.n	2d686 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x76>
              static_cast<uint8>(acc);
        }
      }
    }
  }
}
   2d7a8:	b017      	add	sp, #92	; 0x5c
   2d7aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002d7ae <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
  }
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const float* input_data, const RuntimeShape& output_shape,
                    float* output_data) {
   2d7ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d7b2:	ed2d 8b04 	vpush	{d8-d9}
   2d7b6:	461e      	mov	r6, r3
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   2d7b8:	680b      	ldr	r3, [r1, #0]
                    float* output_data) {
   2d7ba:	b097      	sub	sp, #92	; 0x5c
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   2d7bc:	2b04      	cmp	r3, #4
                    float* output_data) {
   2d7be:	4604      	mov	r4, r0
   2d7c0:	460d      	mov	r5, r1
   2d7c2:	9212      	str	r2, [sp, #72]	; 0x48
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   2d7c4:	d001      	beq.n	2d7ca <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1c>
   2d7c6:	f003 faf8 	bl	30dba <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   2d7ca:	6833      	ldr	r3, [r6, #0]
   2d7cc:	2b04      	cmp	r3, #4
   2d7ce:	d1fa      	bne.n	2d7c6 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x18>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   2d7d0:	2300      	movs	r3, #0
   2d7d2:	4632      	mov	r2, r6
   2d7d4:	4619      	mov	r1, r3
   2d7d6:	4628      	mov	r0, r5
   2d7d8:	f7fc fda0 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   2d7dc:	2303      	movs	r3, #3
   2d7de:	4632      	mov	r2, r6
   2d7e0:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   2d7e2:	9007      	str	r0, [sp, #28]
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   2d7e4:	4628      	mov	r0, r5
   2d7e6:	f7fc fd99 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   2d7ea:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   2d7ec:	9008      	str	r0, [sp, #32]
  const int input_height = input_shape.Dims(1);
   2d7ee:	4628      	mov	r0, r5
   2d7f0:	f7f9 feea 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   2d7f4:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   2d7f6:	9009      	str	r0, [sp, #36]	; 0x24
  const int input_width = input_shape.Dims(2);
   2d7f8:	4628      	mov	r0, r5
   2d7fa:	f7f9 fee5 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   2d7fe:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   2d800:	900b      	str	r0, [sp, #44]	; 0x2c
  const int output_height = output_shape.Dims(1);
   2d802:	4630      	mov	r0, r6
   2d804:	f7f9 fee0 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   2d808:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   2d80a:	900c      	str	r0, [sp, #48]	; 0x30
  const int output_width = output_shape.Dims(2);
   2d80c:	4630      	mov	r0, r6
   2d80e:	f7f9 fedb 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
  const int stride_width = params.stride_width;
  for (int batch = 0; batch < batches; ++batch) {
   2d812:	f04f 0b00 	mov.w	fp, #0
  const int stride_height = params.stride_height;
   2d816:	68e3      	ldr	r3, [r4, #12]
  const int output_width = output_shape.Dims(2);
   2d818:	900d      	str	r0, [sp, #52]	; 0x34
  const int stride_height = params.stride_height;
   2d81a:	930e      	str	r3, [sp, #56]	; 0x38
  const int stride_width = params.stride_width;
   2d81c:	6923      	ldr	r3, [r4, #16]
   2d81e:	930f      	str	r3, [sp, #60]	; 0x3c
  for (int batch = 0; batch < batches; ++batch) {
   2d820:	9b07      	ldr	r3, [sp, #28]
   2d822:	459b      	cmp	fp, r3
   2d824:	f280 8094 	bge.w	2d950 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1a2>
   2d828:	f04f 0a00 	mov.w	sl, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   2d82c:	46d0      	mov	r8, sl
   2d82e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2d830:	4598      	cmp	r8, r3
   2d832:	f280 808a 	bge.w	2d94a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x19c>
      for (int out_x = 0; out_x < output_width; ++out_x) {
        for (int channel = 0; channel < depth; ++channel) {
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
   2d836:	2700      	movs	r7, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
   2d838:	46b9      	mov	r9, r7
   2d83a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2d83c:	4599      	cmp	r9, r3
   2d83e:	da7f      	bge.n	2d940 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x192>
        for (int channel = 0; channel < depth; ++channel) {
   2d840:	2300      	movs	r3, #0
   2d842:	9303      	str	r3, [sp, #12]
   2d844:	9b03      	ldr	r3, [sp, #12]
   2d846:	9a08      	ldr	r2, [sp, #32]
   2d848:	4293      	cmp	r3, r2
   2d84a:	da74      	bge.n	2d936 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x188>
              (out_x * stride_width) - params.padding_values.width;
   2d84c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   2d850:	69a0      	ldr	r0, [r4, #24]
          const int in_x_origin =
   2d852:	1afa      	subs	r2, r7, r3
   2d854:	9210      	str	r2, [sp, #64]	; 0x40
              (out_y * stride_height) - params.padding_values.height;
   2d856:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
   2d85a:	1bdb      	subs	r3, r3, r7
          const int in_y_origin =
   2d85c:	ebaa 0102 	sub.w	r1, sl, r2
   2d860:	9105      	str	r1, [sp, #20]
          const int filter_x_start = std::max(0, -in_x_origin);
   2d862:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   2d866:	9111      	str	r1, [sp, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
   2d868:	990b      	ldr	r1, [sp, #44]	; 0x2c
          const int filter_y_start = std::max(0, -in_y_origin);
   2d86a:	eba2 020a 	sub.w	r2, r2, sl
              std::min(params.filter_width, input_width - in_x_origin);
   2d86e:	440b      	add	r3, r1
   2d870:	4283      	cmp	r3, r0
   2d872:	bfa8      	it	ge
   2d874:	4603      	movge	r3, r0
   2d876:	930a      	str	r3, [sp, #40]	; 0x28
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
   2d878:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2d87a:	18d0      	adds	r0, r2, r3
   2d87c:	6963      	ldr	r3, [r4, #20]
   2d87e:	4298      	cmp	r0, r3
   2d880:	bfa8      	it	ge
   2d882:	4618      	movge	r0, r3
          float max = std::numeric_limits<float>::lowest();
   2d884:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
   2d888:	9315      	str	r3, [sp, #84]	; 0x54
   2d88a:	9b05      	ldr	r3, [sp, #20]
   2d88c:	9006      	str	r0, [sp, #24]
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   2d88e:	2a00      	cmp	r2, #0
   2d890:	bfa8      	it	ge
   2d892:	189b      	addge	r3, r3, r2
   2d894:	461a      	mov	r2, r3
   2d896:	9b05      	ldr	r3, [sp, #20]
   2d898:	9906      	ldr	r1, [sp, #24]
   2d89a:	1ad3      	subs	r3, r2, r3
   2d89c:	4299      	cmp	r1, r3
   2d89e:	dd26      	ble.n	2d8ee <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x140>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   2d8a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2d8a2:	9304      	str	r3, [sp, #16]
   2d8a4:	9b04      	ldr	r3, [sp, #16]
   2d8a6:	990a      	ldr	r1, [sp, #40]	; 0x28
   2d8a8:	ed9d 8a15 	vldr	s16, [sp, #84]	; 0x54
   2d8ac:	428b      	cmp	r3, r1
   2d8ae:	da1c      	bge.n	2d8ea <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x13c>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   2d8b0:	9b03      	ldr	r3, [sp, #12]
   2d8b2:	9910      	ldr	r1, [sp, #64]	; 0x40
   2d8b4:	9300      	str	r3, [sp, #0]
   2d8b6:	9b04      	ldr	r3, [sp, #16]
   2d8b8:	4628      	mov	r0, r5
   2d8ba:	440b      	add	r3, r1
   2d8bc:	4659      	mov	r1, fp
   2d8be:	9213      	str	r2, [sp, #76]	; 0x4c
   2d8c0:	f7f9 ff44 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   2d8c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   2d8c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   2d8c8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
      if (__a < __b)
   2d8cc:	edd0 7a00 	vldr	s15, [r0]
   2d8d0:	eef4 7ac8 	vcmpe.f32	s15, s16
   2d8d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      return __a;
   2d8d8:	ab15      	add	r3, sp, #84	; 0x54
   2d8da:	bfd8      	it	le
   2d8dc:	4618      	movle	r0, r3
              max = std::max(
   2d8de:	6803      	ldr	r3, [r0, #0]
   2d8e0:	9315      	str	r3, [sp, #84]	; 0x54
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   2d8e2:	9b04      	ldr	r3, [sp, #16]
   2d8e4:	3301      	adds	r3, #1
   2d8e6:	9304      	str	r3, [sp, #16]
   2d8e8:	e7dc      	b.n	2d8a4 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xf6>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   2d8ea:	3201      	adds	r2, #1
   2d8ec:	e7d3      	b.n	2d896 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xe8>
            }
          }
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(max, params.float_activation_min,
   2d8ee:	ed94 8a09 	vldr	s16, [r4, #36]	; 0x24
   2d8f2:	ed9d 9a15 	vldr	s18, [sp, #84]	; 0x54
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   2d8f6:	9b03      	ldr	r3, [sp, #12]
   2d8f8:	4642      	mov	r2, r8
   2d8fa:	9300      	str	r3, [sp, #0]
   2d8fc:	4659      	mov	r1, fp
   2d8fe:	464b      	mov	r3, r9
   2d900:	4630      	mov	r0, r6
   2d902:	f7f9 ff23 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   2d906:	eeb4 9ac8 	vcmpe.f32	s18, s16
   2d90a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                                           params.float_activation_max);
   2d90e:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
   2d912:	bf58      	it	pl
   2d914:	eeb0 8a49 	vmovpl.f32	s16, s18
	return __b;
   2d918:	eef4 8a48 	vcmp.f32	s17, s16
   2d91c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2d920:	bf48      	it	mi
   2d922:	eeb0 8a68 	vmovmi.f32	s16, s17
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   2d926:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2d928:	eb03 0080 	add.w	r0, r3, r0, lsl #2
        for (int channel = 0; channel < depth; ++channel) {
   2d92c:	9b03      	ldr	r3, [sp, #12]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   2d92e:	ed80 8a00 	vstr	s16, [r0]
        for (int channel = 0; channel < depth; ++channel) {
   2d932:	3301      	adds	r3, #1
   2d934:	e785      	b.n	2d842 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x94>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   2d936:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d938:	f109 0901 	add.w	r9, r9, #1
   2d93c:	441f      	add	r7, r3
   2d93e:	e77c      	b.n	2d83a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   2d940:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2d942:	f108 0801 	add.w	r8, r8, #1
   2d946:	449a      	add	sl, r3
   2d948:	e771      	b.n	2d82e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x80>
  for (int batch = 0; batch < batches; ++batch) {
   2d94a:	f10b 0b01 	add.w	fp, fp, #1
   2d94e:	e767      	b.n	2d820 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x72>
        }
      }
    }
  }
}
   2d950:	b017      	add	sp, #92	; 0x5c
   2d952:	ecbd 8b04 	vpop	{d8-d9}
   2d956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002d95a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>:

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const uint8* input_data, const RuntimeShape& output_shape,
                    uint8* output_data) {
   2d95a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d95e:	b097      	sub	sp, #92	; 0x5c
   2d960:	461e      	mov	r6, r3
   2d962:	9206      	str	r2, [sp, #24]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   2d964:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
   2d968:	429a      	cmp	r2, r3
                    uint8* output_data) {
   2d96a:	4604      	mov	r4, r0
   2d96c:	460d      	mov	r5, r1
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   2d96e:	dd01      	ble.n	2d974 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1a>
   2d970:	f003 fa23 	bl	30dba <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_GE(params.quantized_activation_min, 0);
   2d974:	2a00      	cmp	r2, #0
   2d976:	dbfb      	blt.n	2d970 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  TFLITE_DCHECK_LE(params.quantized_activation_max, 255);
   2d978:	2bff      	cmp	r3, #255	; 0xff
   2d97a:	dcf9      	bgt.n	2d970 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   2d97c:	680b      	ldr	r3, [r1, #0]
   2d97e:	2b04      	cmp	r3, #4
   2d980:	d1f6      	bne.n	2d970 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   2d982:	6833      	ldr	r3, [r6, #0]
   2d984:	2b04      	cmp	r3, #4
   2d986:	d1f3      	bne.n	2d970 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   2d988:	2300      	movs	r3, #0
   2d98a:	4632      	mov	r2, r6
   2d98c:	4619      	mov	r1, r3
   2d98e:	4628      	mov	r0, r5
   2d990:	f7fc fcc4 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   2d994:	2303      	movs	r3, #3
   2d996:	4632      	mov	r2, r6
   2d998:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   2d99a:	9008      	str	r0, [sp, #32]
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   2d99c:	4628      	mov	r0, r5
   2d99e:	f7fc fcbd 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   2d9a2:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   2d9a4:	9009      	str	r0, [sp, #36]	; 0x24
  const int input_height = input_shape.Dims(1);
   2d9a6:	4628      	mov	r0, r5
   2d9a8:	f7f9 fe0e 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   2d9ac:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   2d9ae:	900a      	str	r0, [sp, #40]	; 0x28
  const int input_width = input_shape.Dims(2);
   2d9b0:	4628      	mov	r0, r5
   2d9b2:	f7f9 fe09 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   2d9b6:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   2d9b8:	900b      	str	r0, [sp, #44]	; 0x2c
  const int output_height = output_shape.Dims(1);
   2d9ba:	4630      	mov	r0, r6
   2d9bc:	f7f9 fe04 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   2d9c0:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   2d9c2:	900d      	str	r0, [sp, #52]	; 0x34
  const int output_width = output_shape.Dims(2);
   2d9c4:	4630      	mov	r0, r6
   2d9c6:	f7f9 fdff 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
  const int stride_width = params.stride_width;
  for (int batch = 0; batch < batches; ++batch) {
   2d9ca:	f04f 0b00 	mov.w	fp, #0
  const int stride_height = params.stride_height;
   2d9ce:	68e3      	ldr	r3, [r4, #12]
  const int output_width = output_shape.Dims(2);
   2d9d0:	900e      	str	r0, [sp, #56]	; 0x38
  const int stride_height = params.stride_height;
   2d9d2:	930f      	str	r3, [sp, #60]	; 0x3c
  const int stride_width = params.stride_width;
   2d9d4:	6923      	ldr	r3, [r4, #16]
   2d9d6:	9310      	str	r3, [sp, #64]	; 0x40
  for (int batch = 0; batch < batches; ++batch) {
   2d9d8:	9b08      	ldr	r3, [sp, #32]
   2d9da:	459b      	cmp	fp, r3
   2d9dc:	f280 8089 	bge.w	2daf2 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x198>
   2d9e0:	f04f 0800 	mov.w	r8, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   2d9e4:	f8cd 800c 	str.w	r8, [sp, #12]
   2d9e8:	9b03      	ldr	r3, [sp, #12]
   2d9ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2d9ec:	4293      	cmp	r3, r2
   2d9ee:	da7d      	bge.n	2daec <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x192>
      for (int out_x = 0; out_x < output_width; ++out_x) {
        for (int channel = 0; channel < depth; ++channel) {
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
   2d9f0:	2700      	movs	r7, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
   2d9f2:	46b9      	mov	r9, r7
   2d9f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2d9f6:	4599      	cmp	r9, r3
   2d9f8:	da72      	bge.n	2dae0 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x186>
        for (int channel = 0; channel < depth; ++channel) {
   2d9fa:	2300      	movs	r3, #0
   2d9fc:	9302      	str	r3, [sp, #8]
   2d9fe:	9b02      	ldr	r3, [sp, #8]
   2da00:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2da02:	4293      	cmp	r3, r2
   2da04:	da67      	bge.n	2dad6 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x17c>
              (out_x * stride_width) - params.padding_values.width;
   2da06:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   2da0a:	69a0      	ldr	r0, [r4, #24]
          const int in_x_origin =
   2da0c:	1afa      	subs	r2, r7, r3
   2da0e:	9211      	str	r2, [sp, #68]	; 0x44
              (out_y * stride_height) - params.padding_values.height;
   2da10:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
   2da14:	1bdb      	subs	r3, r3, r7
          const int in_y_origin =
   2da16:	eba8 0102 	sub.w	r1, r8, r2
   2da1a:	9104      	str	r1, [sp, #16]
          const int filter_x_start = std::max(0, -in_x_origin);
   2da1c:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   2da20:	9112      	str	r1, [sp, #72]	; 0x48
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
   2da22:	990b      	ldr	r1, [sp, #44]	; 0x2c
          const int filter_y_start = std::max(0, -in_y_origin);
   2da24:	eba2 0208 	sub.w	r2, r2, r8
              std::min(params.filter_width, input_width - in_x_origin);
   2da28:	440b      	add	r3, r1
   2da2a:	4283      	cmp	r3, r0
   2da2c:	bfa8      	it	ge
   2da2e:	4603      	movge	r3, r0
   2da30:	9307      	str	r3, [sp, #28]
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
   2da32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2da34:	18d0      	adds	r0, r2, r3
   2da36:	6963      	ldr	r3, [r4, #20]
   2da38:	4298      	cmp	r0, r3
   2da3a:	bfa8      	it	ge
   2da3c:	4618      	movge	r0, r3
          uint8 max = 0;
   2da3e:	2300      	movs	r3, #0
   2da40:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
   2da44:	9b04      	ldr	r3, [sp, #16]
   2da46:	900c      	str	r0, [sp, #48]	; 0x30
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   2da48:	2a00      	cmp	r2, #0
   2da4a:	bfa8      	it	ge
   2da4c:	189b      	addge	r3, r3, r2
   2da4e:	461a      	mov	r2, r3
   2da50:	9b04      	ldr	r3, [sp, #16]
   2da52:	990c      	ldr	r1, [sp, #48]	; 0x30
   2da54:	1ad3      	subs	r3, r2, r3
   2da56:	428b      	cmp	r3, r1
   2da58:	da23      	bge.n	2daa2 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x148>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   2da5a:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   2da5e:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
   2da62:	9305      	str	r3, [sp, #20]
   2da64:	9b07      	ldr	r3, [sp, #28]
   2da66:	4553      	cmp	r3, sl
   2da68:	dd19      	ble.n	2da9e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x144>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   2da6a:	9b02      	ldr	r3, [sp, #8]
   2da6c:	4659      	mov	r1, fp
   2da6e:	9300      	str	r3, [sp, #0]
   2da70:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2da72:	4628      	mov	r0, r5
   2da74:	4453      	add	r3, sl
   2da76:	9213      	str	r2, [sp, #76]	; 0x4c
   2da78:	f7f9 fe68 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
      if (__a < __b)
   2da7c:	9a06      	ldr	r2, [sp, #24]
   2da7e:	9b06      	ldr	r3, [sp, #24]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   2da80:	f10a 0a01 	add.w	sl, sl, #1
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   2da84:	4403      	add	r3, r0
   2da86:	5c10      	ldrb	r0, [r2, r0]
   2da88:	9a05      	ldr	r2, [sp, #20]
   2da8a:	4290      	cmp	r0, r2
      return __a;
   2da8c:	f10d 0257 	add.w	r2, sp, #87	; 0x57
   2da90:	bf98      	it	ls
   2da92:	4613      	movls	r3, r2
              max = std::max(
   2da94:	781b      	ldrb	r3, [r3, #0]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   2da96:	9a13      	ldr	r2, [sp, #76]	; 0x4c
              max = std::max(
   2da98:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   2da9c:	e7df      	b.n	2da5e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x104>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   2da9e:	3201      	adds	r2, #1
   2daa0:	e7d6      	b.n	2da50 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xf6>
            }
          }
          max = std::max<uint8>(max, params.quantized_activation_min);
          max = std::min<uint8>(max, params.quantized_activation_max);
   2daa2:	f894 a01c 	ldrb.w	sl, [r4, #28]
   2daa6:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   2daaa:	4659      	mov	r1, fp
   2daac:	459a      	cmp	sl, r3
   2daae:	bf38      	it	cc
   2dab0:	469a      	movcc	sl, r3
   2dab2:	f894 3020 	ldrb.w	r3, [r4, #32]
   2dab6:	4630      	mov	r0, r6
   2dab8:	459a      	cmp	sl, r3
   2daba:	bf28      	it	cs
   2dabc:	469a      	movcs	sl, r3
   2dabe:	9b02      	ldr	r3, [sp, #8]
   2dac0:	9a03      	ldr	r2, [sp, #12]
   2dac2:	9300      	str	r3, [sp, #0]
   2dac4:	464b      	mov	r3, r9
   2dac6:	f7f9 fe41 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   2daca:	9b20      	ldr	r3, [sp, #128]	; 0x80
   2dacc:	f803 a000 	strb.w	sl, [r3, r0]
        for (int channel = 0; channel < depth; ++channel) {
   2dad0:	9b02      	ldr	r3, [sp, #8]
   2dad2:	3301      	adds	r3, #1
   2dad4:	e792      	b.n	2d9fc <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xa2>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   2dad6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2dad8:	f109 0901 	add.w	r9, r9, #1
   2dadc:	441f      	add	r7, r3
   2dade:	e789      	b.n	2d9f4 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x9a>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   2dae0:	9b03      	ldr	r3, [sp, #12]
   2dae2:	3301      	adds	r3, #1
   2dae4:	9303      	str	r3, [sp, #12]
   2dae6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2dae8:	4498      	add	r8, r3
   2daea:	e77d      	b.n	2d9e8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x8e>
  for (int batch = 0; batch < batches; ++batch) {
   2daec:	f10b 0b01 	add.w	fp, fp, #1
   2daf0:	e772      	b.n	2d9d8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x7e>
              static_cast<uint8>(max);
        }
      }
    }
  }
}
   2daf2:	b017      	add	sp, #92	; 0x5c
   2daf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002daf8 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>:
namespace tflite {
namespace reference_integer_ops {

inline void AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape, const int8* input_data,
                        const RuntimeShape& output_shape, int8* output_data) {
   2daf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2dafc:	b097      	sub	sp, #92	; 0x5c
   2dafe:	4698      	mov	r8, r3
   2db00:	9213      	str	r2, [sp, #76]	; 0x4c
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   2db02:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
   2db06:	429a      	cmp	r2, r3
                        const RuntimeShape& output_shape, int8* output_data) {
   2db08:	4605      	mov	r5, r0
   2db0a:	460f      	mov	r7, r1
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   2db0c:	dd01      	ble.n	2db12 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1a>
   2db0e:	f003 f954 	bl	30dba <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   2db12:	680b      	ldr	r3, [r1, #0]
   2db14:	2b04      	cmp	r3, #4
   2db16:	d1fa      	bne.n	2db0e <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x16>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   2db18:	f8d8 3000 	ldr.w	r3, [r8]
   2db1c:	2b04      	cmp	r3, #4
   2db1e:	d1f6      	bne.n	2db0e <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x16>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   2db20:	2300      	movs	r3, #0
   2db22:	4642      	mov	r2, r8
   2db24:	4619      	mov	r1, r3
   2db26:	4638      	mov	r0, r7
   2db28:	f7fc fbf8 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   2db2c:	2303      	movs	r3, #3
   2db2e:	4642      	mov	r2, r8
   2db30:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   2db32:	900a      	str	r0, [sp, #40]	; 0x28
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   2db34:	4638      	mov	r0, r7
   2db36:	f7fc fbf1 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   2db3a:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   2db3c:	900b      	str	r0, [sp, #44]	; 0x2c
  const int input_height = input_shape.Dims(1);
   2db3e:	4638      	mov	r0, r7
   2db40:	f7f9 fd42 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   2db44:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   2db46:	900c      	str	r0, [sp, #48]	; 0x30
  const int input_width = input_shape.Dims(2);
   2db48:	4638      	mov	r0, r7
   2db4a:	f7f9 fd3d 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   2db4e:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   2db50:	900d      	str	r0, [sp, #52]	; 0x34
  const int output_height = output_shape.Dims(1);
   2db52:	4640      	mov	r0, r8
   2db54:	f7f9 fd38 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   2db58:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   2db5a:	900e      	str	r0, [sp, #56]	; 0x38
  const int output_width = output_shape.Dims(2);
   2db5c:	4640      	mov	r0, r8
   2db5e:	f7f9 fd33 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
  const int stride_width = params.stride_width;
  for (int batch = 0; batch < batches; ++batch) {
   2db62:	2100      	movs	r1, #0
  const int stride_height = params.stride_height;
   2db64:	68eb      	ldr	r3, [r5, #12]
  const int output_width = output_shape.Dims(2);
   2db66:	900f      	str	r0, [sp, #60]	; 0x3c
  const int stride_height = params.stride_height;
   2db68:	9310      	str	r3, [sp, #64]	; 0x40
  const int stride_width = params.stride_width;
   2db6a:	692b      	ldr	r3, [r5, #16]
   2db6c:	9311      	str	r3, [sp, #68]	; 0x44
  for (int batch = 0; batch < batches; ++batch) {
   2db6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2db70:	4299      	cmp	r1, r3
   2db72:	f280 8092 	bge.w	2dc9a <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1a2>
   2db76:	f04f 0b00 	mov.w	fp, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   2db7a:	f8cd b010 	str.w	fp, [sp, #16]
   2db7e:	9b04      	ldr	r3, [sp, #16]
   2db80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2db82:	4293      	cmp	r3, r2
   2db84:	f280 8087 	bge.w	2dc96 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x19e>
      for (int out_x = 0; out_x < output_width; ++out_x) {
        for (int channel = 0; channel < depth; ++channel) {
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
   2db88:	f04f 0a00 	mov.w	sl, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
   2db8c:	f8cd a014 	str.w	sl, [sp, #20]
   2db90:	9b05      	ldr	r3, [sp, #20]
   2db92:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2db94:	4293      	cmp	r3, r2
   2db96:	da78      	bge.n	2dc8a <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x192>
        for (int channel = 0; channel < depth; ++channel) {
   2db98:	2300      	movs	r3, #0
   2db9a:	9303      	str	r3, [sp, #12]
   2db9c:	9b03      	ldr	r3, [sp, #12]
   2db9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2dba0:	4293      	cmp	r3, r2
   2dba2:	da6c      	bge.n	2dc7e <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x186>
              (out_x * stride_width) - params.padding_values.width;
   2dba4:	f9b5 6002 	ldrsh.w	r6, [r5, #2]
              (out_y * stride_height) - params.padding_values.height;
   2dba8:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
          const int in_x_origin =
   2dbac:	ebaa 0306 	sub.w	r3, sl, r6
   2dbb0:	9312      	str	r3, [sp, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
   2dbb2:	eba6 060a 	sub.w	r6, r6, sl
          const int in_y_origin =
   2dbb6:	ebab 0302 	sub.w	r3, fp, r2
   2dbba:	9308      	str	r3, [sp, #32]
          const int filter_x_start = std::max(0, -in_x_origin);
   2dbbc:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
   2dbc0:	9307      	str	r3, [sp, #28]
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
   2dbc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
          const int filter_y_start = std::max(0, -in_y_origin);
   2dbc4:	eba2 020b 	sub.w	r2, r2, fp
              std::min(params.filter_width, input_width - in_x_origin);
   2dbc8:	441e      	add	r6, r3
   2dbca:	69ab      	ldr	r3, [r5, #24]
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
          int32 acc = 0;
   2dbcc:	f04f 0900 	mov.w	r9, #0
   2dbd0:	429e      	cmp	r6, r3
   2dbd2:	bfa8      	it	ge
   2dbd4:	461e      	movge	r6, r3
              std::min(params.filter_height, input_height - in_y_origin);
   2dbd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
          int filter_count = 0;
   2dbd8:	464c      	mov	r4, r9
              std::min(params.filter_height, input_height - in_y_origin);
   2dbda:	18d0      	adds	r0, r2, r3
   2dbdc:	696b      	ldr	r3, [r5, #20]
   2dbde:	9606      	str	r6, [sp, #24]
    min(const _Tp& __a, const _Tp& __b)
   2dbe0:	4298      	cmp	r0, r3
   2dbe2:	bfa8      	it	ge
   2dbe4:	4618      	movge	r0, r3
   2dbe6:	9b08      	ldr	r3, [sp, #32]
   2dbe8:	9009      	str	r0, [sp, #36]	; 0x24
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   2dbea:	2a00      	cmp	r2, #0
   2dbec:	bfa8      	it	ge
   2dbee:	189b      	addge	r3, r3, r2
   2dbf0:	461a      	mov	r2, r3
   2dbf2:	9b08      	ldr	r3, [sp, #32]
   2dbf4:	9809      	ldr	r0, [sp, #36]	; 0x24
   2dbf6:	1ad3      	subs	r3, r2, r3
   2dbf8:	4298      	cmp	r0, r3
   2dbfa:	dd1e      	ble.n	2dc3a <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x142>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   2dbfc:	9e07      	ldr	r6, [sp, #28]
   2dbfe:	9b06      	ldr	r3, [sp, #24]
   2dc00:	429e      	cmp	r6, r3
   2dc02:	da0f      	bge.n	2dc24 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x12c>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              acc +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   2dc04:	9b03      	ldr	r3, [sp, #12]
   2dc06:	4638      	mov	r0, r7
   2dc08:	9300      	str	r3, [sp, #0]
   2dc0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2dc0c:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
   2dc10:	4433      	add	r3, r6
   2dc12:	f7f9 fd9b 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   2dc16:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
              acc +=
   2dc1a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   2dc1c:	3601      	adds	r6, #1
              acc +=
   2dc1e:	561b      	ldrsb	r3, [r3, r0]
   2dc20:	4499      	add	r9, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   2dc22:	e7ec      	b.n	2dbfe <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x106>
   2dc24:	e9dd 3006 	ldrd	r3, r0, [sp, #24]
   2dc28:	1a1b      	subs	r3, r3, r0
   2dc2a:	e9dd 0606 	ldrd	r0, r6, [sp, #24]
   2dc2e:	42b0      	cmp	r0, r6
   2dc30:	bfb8      	it	lt
   2dc32:	2300      	movlt	r3, #0
   2dc34:	3201      	adds	r2, #1
   2dc36:	441c      	add	r4, r3
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   2dc38:	e7db      	b.n	2dbf2 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xfa>
              filter_count++;
            }
          }
          // Round to the closest integer value.
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
   2dc3a:	0fe3      	lsrs	r3, r4, #31
   2dc3c:	4423      	add	r3, r4
   2dc3e:	f1b9 0f00 	cmp.w	r9, #0
   2dc42:	bfcc      	ite	gt
   2dc44:	eb09 0963 	addgt.w	r9, r9, r3, asr #1
                        : (acc - filter_count / 2) / filter_count;
   2dc48:	eba9 0963 	suble.w	r9, r9, r3, asr #1
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
   2dc4c:	fb99 f4f4 	sdiv	r4, r9, r4
   2dc50:	69eb      	ldr	r3, [r5, #28]
          acc = std::max(acc, params.quantized_activation_min);
          acc = std::min(acc, params.quantized_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   2dc52:	4640      	mov	r0, r8
   2dc54:	429c      	cmp	r4, r3
   2dc56:	bfb8      	it	lt
   2dc58:	461c      	movlt	r4, r3
   2dc5a:	6a2b      	ldr	r3, [r5, #32]
   2dc5c:	9106      	str	r1, [sp, #24]
   2dc5e:	429c      	cmp	r4, r3
   2dc60:	bfa8      	it	ge
   2dc62:	461c      	movge	r4, r3
   2dc64:	9b03      	ldr	r3, [sp, #12]
   2dc66:	9300      	str	r3, [sp, #0]
   2dc68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   2dc6c:	f7f9 fd6e 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   2dc70:	9b20      	ldr	r3, [sp, #128]	; 0x80
        for (int channel = 0; channel < depth; ++channel) {
   2dc72:	9906      	ldr	r1, [sp, #24]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   2dc74:	541c      	strb	r4, [r3, r0]
        for (int channel = 0; channel < depth; ++channel) {
   2dc76:	9b03      	ldr	r3, [sp, #12]
   2dc78:	3301      	adds	r3, #1
   2dc7a:	9303      	str	r3, [sp, #12]
   2dc7c:	e78e      	b.n	2db9c <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xa4>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   2dc7e:	9b05      	ldr	r3, [sp, #20]
   2dc80:	3301      	adds	r3, #1
   2dc82:	9305      	str	r3, [sp, #20]
   2dc84:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2dc86:	449a      	add	sl, r3
   2dc88:	e782      	b.n	2db90 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x98>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   2dc8a:	9b04      	ldr	r3, [sp, #16]
   2dc8c:	3301      	adds	r3, #1
   2dc8e:	9304      	str	r3, [sp, #16]
   2dc90:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2dc92:	449b      	add	fp, r3
   2dc94:	e773      	b.n	2db7e <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x86>
  for (int batch = 0; batch < batches; ++batch) {
   2dc96:	3101      	adds	r1, #1
   2dc98:	e769      	b.n	2db6e <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x76>
              static_cast<int8>(acc);
        }
      }
    }
  }
}
   2dc9a:	b017      	add	sp, #92	; 0x5c
   2dc9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002dca0 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>:

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const int8* input_data, const RuntimeShape& output_shape,
                    int8* output_data) {
   2dca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2dca4:	b097      	sub	sp, #92	; 0x5c
   2dca6:	461e      	mov	r6, r3
   2dca8:	9206      	str	r2, [sp, #24]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   2dcaa:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
   2dcae:	429a      	cmp	r2, r3
                    int8* output_data) {
   2dcb0:	4604      	mov	r4, r0
   2dcb2:	460d      	mov	r5, r1
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   2dcb4:	dd01      	ble.n	2dcba <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1a>
   2dcb6:	f003 f880 	bl	30dba <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_GE(params.quantized_activation_min,
   2dcba:	3280      	adds	r2, #128	; 0x80
   2dcbc:	dbfb      	blt.n	2dcb6 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x16>
                   std::numeric_limits<int8_t>::min());
  TFLITE_DCHECK_LE(params.quantized_activation_max,
   2dcbe:	2b7f      	cmp	r3, #127	; 0x7f
   2dcc0:	dcf9      	bgt.n	2dcb6 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x16>
                   std::numeric_limits<int8_t>::max());
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   2dcc2:	680b      	ldr	r3, [r1, #0]
   2dcc4:	2b04      	cmp	r3, #4
   2dcc6:	d1f6      	bne.n	2dcb6 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x16>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   2dcc8:	6833      	ldr	r3, [r6, #0]
   2dcca:	2b04      	cmp	r3, #4
   2dccc:	d1f3      	bne.n	2dcb6 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x16>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   2dcce:	2300      	movs	r3, #0
   2dcd0:	4632      	mov	r2, r6
   2dcd2:	4619      	mov	r1, r3
   2dcd4:	4628      	mov	r0, r5
   2dcd6:	f7fc fb21 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   2dcda:	2303      	movs	r3, #3
   2dcdc:	4632      	mov	r2, r6
   2dcde:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   2dce0:	9008      	str	r0, [sp, #32]
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   2dce2:	4628      	mov	r0, r5
   2dce4:	f7fc fb1a 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   2dce8:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   2dcea:	9009      	str	r0, [sp, #36]	; 0x24
  const int input_height = input_shape.Dims(1);
   2dcec:	4628      	mov	r0, r5
   2dcee:	f7f9 fc6b 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   2dcf2:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   2dcf4:	900a      	str	r0, [sp, #40]	; 0x28
  const int input_width = input_shape.Dims(2);
   2dcf6:	4628      	mov	r0, r5
   2dcf8:	f7f9 fc66 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   2dcfc:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   2dcfe:	900b      	str	r0, [sp, #44]	; 0x2c
  const int output_height = output_shape.Dims(1);
   2dd00:	4630      	mov	r0, r6
   2dd02:	f7f9 fc61 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   2dd06:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   2dd08:	900d      	str	r0, [sp, #52]	; 0x34
  const int output_width = output_shape.Dims(2);
   2dd0a:	4630      	mov	r0, r6
   2dd0c:	f7f9 fc5c 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
  const int stride_width = params.stride_width;
  for (int batch = 0; batch < batches; ++batch) {
   2dd10:	f04f 0b00 	mov.w	fp, #0
  const int stride_height = params.stride_height;
   2dd14:	68e3      	ldr	r3, [r4, #12]
  const int output_width = output_shape.Dims(2);
   2dd16:	900e      	str	r0, [sp, #56]	; 0x38
  const int stride_height = params.stride_height;
   2dd18:	930f      	str	r3, [sp, #60]	; 0x3c
  const int stride_width = params.stride_width;
   2dd1a:	6923      	ldr	r3, [r4, #16]
   2dd1c:	9310      	str	r3, [sp, #64]	; 0x40
  for (int batch = 0; batch < batches; ++batch) {
   2dd1e:	9b08      	ldr	r3, [sp, #32]
   2dd20:	459b      	cmp	fp, r3
   2dd22:	f280 808a 	bge.w	2de3a <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x19a>
   2dd26:	f04f 0800 	mov.w	r8, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   2dd2a:	f8cd 800c 	str.w	r8, [sp, #12]
   2dd2e:	9b03      	ldr	r3, [sp, #12]
   2dd30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2dd32:	4293      	cmp	r3, r2
   2dd34:	da7e      	bge.n	2de34 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x194>
      for (int out_x = 0; out_x < output_width; ++out_x) {
        for (int channel = 0; channel < depth; ++channel) {
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
   2dd36:	2700      	movs	r7, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
   2dd38:	46b9      	mov	r9, r7
   2dd3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2dd3c:	4599      	cmp	r9, r3
   2dd3e:	da73      	bge.n	2de28 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x188>
        for (int channel = 0; channel < depth; ++channel) {
   2dd40:	2300      	movs	r3, #0
   2dd42:	9302      	str	r3, [sp, #8]
   2dd44:	9b02      	ldr	r3, [sp, #8]
   2dd46:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2dd48:	4293      	cmp	r3, r2
   2dd4a:	da68      	bge.n	2de1e <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x17e>
              (out_x * stride_width) - params.padding_values.width;
   2dd4c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   2dd50:	69a0      	ldr	r0, [r4, #24]
          const int in_x_origin =
   2dd52:	1afa      	subs	r2, r7, r3
   2dd54:	9211      	str	r2, [sp, #68]	; 0x44
              (out_y * stride_height) - params.padding_values.height;
   2dd56:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
   2dd5a:	1bdb      	subs	r3, r3, r7
          const int in_y_origin =
   2dd5c:	eba8 0102 	sub.w	r1, r8, r2
   2dd60:	9104      	str	r1, [sp, #16]
          const int filter_x_start = std::max(0, -in_x_origin);
   2dd62:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   2dd66:	9112      	str	r1, [sp, #72]	; 0x48
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
   2dd68:	990b      	ldr	r1, [sp, #44]	; 0x2c
          const int filter_y_start = std::max(0, -in_y_origin);
   2dd6a:	eba2 0208 	sub.w	r2, r2, r8
              std::min(params.filter_width, input_width - in_x_origin);
   2dd6e:	440b      	add	r3, r1
   2dd70:	4283      	cmp	r3, r0
   2dd72:	bfa8      	it	ge
   2dd74:	4603      	movge	r3, r0
   2dd76:	9307      	str	r3, [sp, #28]
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
   2dd78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2dd7a:	18d0      	adds	r0, r2, r3
   2dd7c:	6963      	ldr	r3, [r4, #20]
   2dd7e:	4298      	cmp	r0, r3
   2dd80:	bfa8      	it	ge
   2dd82:	4618      	movge	r0, r3
          int8_t max = std::numeric_limits<int8_t>::lowest();
   2dd84:	2380      	movs	r3, #128	; 0x80
   2dd86:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
   2dd8a:	9b04      	ldr	r3, [sp, #16]
   2dd8c:	900c      	str	r0, [sp, #48]	; 0x30
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   2dd8e:	2a00      	cmp	r2, #0
   2dd90:	bfa8      	it	ge
   2dd92:	189b      	addge	r3, r3, r2
   2dd94:	461a      	mov	r2, r3
   2dd96:	9b04      	ldr	r3, [sp, #16]
   2dd98:	990c      	ldr	r1, [sp, #48]	; 0x30
   2dd9a:	1ad3      	subs	r3, r2, r3
   2dd9c:	428b      	cmp	r3, r1
   2dd9e:	da24      	bge.n	2ddea <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x14a>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   2dda0:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   2dda4:	f99d 3057 	ldrsb.w	r3, [sp, #87]	; 0x57
   2dda8:	9305      	str	r3, [sp, #20]
   2ddaa:	9b07      	ldr	r3, [sp, #28]
   2ddac:	4553      	cmp	r3, sl
   2ddae:	dd1a      	ble.n	2dde6 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x146>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   2ddb0:	9b02      	ldr	r3, [sp, #8]
   2ddb2:	4659      	mov	r1, fp
   2ddb4:	9300      	str	r3, [sp, #0]
   2ddb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2ddb8:	4628      	mov	r0, r5
   2ddba:	4453      	add	r3, sl
   2ddbc:	9213      	str	r2, [sp, #76]	; 0x4c
   2ddbe:	f7f9 fcc5 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
      if (__a < __b)
   2ddc2:	9a06      	ldr	r2, [sp, #24]
   2ddc4:	9b06      	ldr	r3, [sp, #24]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   2ddc6:	f10a 0a01 	add.w	sl, sl, #1
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   2ddca:	4403      	add	r3, r0
   2ddcc:	5610      	ldrsb	r0, [r2, r0]
   2ddce:	9a05      	ldr	r2, [sp, #20]
   2ddd0:	4290      	cmp	r0, r2
      return __a;
   2ddd2:	f10d 0257 	add.w	r2, sp, #87	; 0x57
   2ddd6:	bfd8      	it	le
   2ddd8:	4613      	movle	r3, r2
              max = std::max(
   2ddda:	f993 3000 	ldrsb.w	r3, [r3]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   2ddde:	9a13      	ldr	r2, [sp, #76]	; 0x4c
              max = std::max(
   2dde0:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   2dde4:	e7de      	b.n	2dda4 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x104>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   2dde6:	3201      	adds	r2, #1
   2dde8:	e7d5      	b.n	2dd96 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xf6>
            }
          }
          max = std::max<int8_t>(max, params.quantized_activation_min);
          max = std::min<int8_t>(max, params.quantized_activation_max);
   2ddea:	f994 a01c 	ldrsb.w	sl, [r4, #28]
   2ddee:	f99d 3057 	ldrsb.w	r3, [sp, #87]	; 0x57
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   2ddf2:	4659      	mov	r1, fp
   2ddf4:	459a      	cmp	sl, r3
   2ddf6:	bfb8      	it	lt
   2ddf8:	469a      	movlt	sl, r3
   2ddfa:	f994 3020 	ldrsb.w	r3, [r4, #32]
   2ddfe:	4630      	mov	r0, r6
   2de00:	459a      	cmp	sl, r3
   2de02:	bfa8      	it	ge
   2de04:	469a      	movge	sl, r3
   2de06:	9b02      	ldr	r3, [sp, #8]
   2de08:	9a03      	ldr	r2, [sp, #12]
   2de0a:	9300      	str	r3, [sp, #0]
   2de0c:	464b      	mov	r3, r9
   2de0e:	f7f9 fc9d 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   2de12:	9b20      	ldr	r3, [sp, #128]	; 0x80
   2de14:	f803 a000 	strb.w	sl, [r3, r0]
        for (int channel = 0; channel < depth; ++channel) {
   2de18:	9b02      	ldr	r3, [sp, #8]
   2de1a:	3301      	adds	r3, #1
   2de1c:	e791      	b.n	2dd42 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xa2>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   2de1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2de20:	f109 0901 	add.w	r9, r9, #1
   2de24:	441f      	add	r7, r3
   2de26:	e788      	b.n	2dd3a <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x9a>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   2de28:	9b03      	ldr	r3, [sp, #12]
   2de2a:	3301      	adds	r3, #1
   2de2c:	9303      	str	r3, [sp, #12]
   2de2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2de30:	4498      	add	r8, r3
   2de32:	e77c      	b.n	2dd2e <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x8e>
  for (int batch = 0; batch < batches; ++batch) {
   2de34:	f10b 0b01 	add.w	fp, fp, #1
   2de38:	e771      	b.n	2dd1e <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x7e>
              static_cast<int8_t>(max);
        }
      }
    }
  }
}
   2de3a:	b017      	add	sp, #92	; 0x5c
   2de3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002de40 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE.isra.0>:
TfLiteStatus CalculateOpData(const TfLiteContext* context,
   2de40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      params->filter_width, params->padding, &out_height, &out_width);
   2de44:	e9d0 6703 	ldrd	r6, r7, [r0, #12]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   2de48:	2401      	movs	r4, #1
  int height = SizeOfDimension(input, 1);
   2de4a:	688b      	ldr	r3, [r1, #8]
      params->filter_width, params->padding, &out_height, &out_width);
   2de4c:	f890 b000 	ldrb.w	fp, [r0]
TfLiteStatus CalculateOpData(const TfLiteContext* context,
   2de50:	b085      	sub	sp, #20
  return t->dims->data[dim];
   2de52:	e9d3 a802 	ldrd	sl, r8, [r3, #8]
   2de56:	4615      	mov	r5, r2
      params->stride_height, params->stride_width,
   2de58:	e9d0 3901 	ldrd	r3, r9, [r0, #4]
   2de5c:	4632      	mov	r2, r6
   2de5e:	4641      	mov	r1, r8
   2de60:	9400      	str	r4, [sp, #0]
   2de62:	4658      	mov	r0, fp
   2de64:	9302      	str	r3, [sp, #8]
   2de66:	f7fd f9bb 	bl	2b1e0 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   2de6a:	464b      	mov	r3, r9
   2de6c:	463a      	mov	r2, r7
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   2de6e:	9003      	str	r0, [sp, #12]
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   2de70:	9400      	str	r4, [sp, #0]
   2de72:	4651      	mov	r1, sl
   2de74:	4658      	mov	r0, fp
   2de76:	f7fd f9b3 	bl	2b1e0 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  int total_padding =
   2de7a:	eba7 070a 	sub.w	r7, r7, sl
      ((out_size - 1) * stride + effective_filter_size - in_size);
   2de7e:	3801      	subs	r0, #1
  int total_padding =
   2de80:	fb09 7900 	mla	r9, r9, r0, r7
}
   2de84:	2000      	movs	r0, #0
      ((out_size - 1) * stride + effective_filter_size - in_size);
   2de86:	9b03      	ldr	r3, [sp, #12]
  int total_padding =
   2de88:	eba6 0608 	sub.w	r6, r6, r8
      ((out_size - 1) * stride + effective_filter_size - in_size);
   2de8c:	1e5c      	subs	r4, r3, #1
  int total_padding =
   2de8e:	9b02      	ldr	r3, [sp, #8]
  total_padding = total_padding > 0 ? total_padding : 0;
   2de90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
  int total_padding =
   2de94:	fb03 6604 	mla	r6, r3, r4, r6
  total_padding = total_padding > 0 ? total_padding : 0;
   2de98:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
  return total_padding / 2;
   2de9c:	1073      	asrs	r3, r6, #1
      params->filter_width, params->padding, &out_height, &out_width);
   2de9e:	602b      	str	r3, [r5, #0]
  *offset = total_padding % 2;
   2dea0:	f006 0601 	and.w	r6, r6, #1
  return total_padding / 2;
   2dea4:	ea4f 0369 	mov.w	r3, r9, asr #1
  *offset = total_padding % 2;
   2dea8:	f009 0701 	and.w	r7, r9, #1
   2deac:	606b      	str	r3, [r5, #4]
   2deae:	60ae      	str	r6, [r5, #8]
   2deb0:	60ef      	str	r7, [r5, #12]
}
   2deb2:	b005      	add	sp, #20
   2deb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002deb8 <_ZN6tflite3ops5micro11activations12PreluPrepareEP13TfLiteContextP10TfLiteNode>:
}
   2deb8:	2000      	movs	r0, #0
   2deba:	4770      	bx	lr

0002debc <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf>:
    const RuntimeShape& unextended_output_shape, float* output_data) {
   2debc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2dec0:	469b      	mov	fp, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   2dec2:	6803      	ldr	r3, [r0, #0]
    const RuntimeShape& unextended_output_shape, float* output_data) {
   2dec4:	b09b      	sub	sp, #108	; 0x6c
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   2dec6:	2b04      	cmp	r3, #4
    const RuntimeShape& unextended_output_shape, float* output_data) {
   2dec8:	4615      	mov	r5, r2
   2deca:	4604      	mov	r4, r0
   2decc:	9a24      	ldr	r2, [sp, #144]	; 0x90
   2dece:	9103      	str	r1, [sp, #12]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   2ded0:	dd01      	ble.n	2ded6 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x1a>
   2ded2:	f002 ff72 	bl	30dba <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   2ded6:	682b      	ldr	r3, [r5, #0]
   2ded8:	2b04      	cmp	r3, #4
   2deda:	dcfa      	bgt.n	2ded2 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x16>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   2dedc:	6813      	ldr	r3, [r2, #0]
   2dede:	2b04      	cmp	r3, #4
   2dee0:	dcf7      	bgt.n	2ded2 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x16>
   2dee2:	2301      	movs	r3, #1
   2dee4:	2104      	movs	r1, #4
   2dee6:	a804      	add	r0, sp, #16
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   2dee8:	f10d 0928 	add.w	r9, sp, #40	; 0x28
   2deec:	f7f9 fc01 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2def0:	4620      	mov	r0, r4
   2def2:	464a      	mov	r2, r9
   2def4:	4629      	mov	r1, r5
   2def6:	ab12      	add	r3, sp, #72	; 0x48
   2def8:	f7f9 fdff 	bl	27afa <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   2defc:	2400      	movs	r4, #0
   2defe:	2100      	movs	r1, #0
   2df00:	a804      	add	r0, sp, #16
   2df02:	f7f9 fb61 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2df06:	42a0      	cmp	r0, r4
   2df08:	dd4a      	ble.n	2dfa0 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0xe4>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   2df0a:	2500      	movs	r5, #0
   2df0c:	2101      	movs	r1, #1
   2df0e:	a804      	add	r0, sp, #16
   2df10:	f7f9 fb5a 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2df14:	42a8      	cmp	r0, r5
   2df16:	dd41      	ble.n	2df9c <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0xe0>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   2df18:	f04f 0a00 	mov.w	sl, #0
   2df1c:	2102      	movs	r1, #2
   2df1e:	a804      	add	r0, sp, #16
   2df20:	f7f9 fb52 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2df24:	4550      	cmp	r0, sl
   2df26:	dd37      	ble.n	2df98 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0xdc>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   2df28:	2600      	movs	r6, #0
   2df2a:	2103      	movs	r1, #3
   2df2c:	a804      	add	r0, sp, #16
   2df2e:	f7f9 fb4b 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2df32:	42b0      	cmp	r0, r6
   2df34:	dd2d      	ble.n	2df92 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0xd6>
          auto out_idx = Offset(output_shape, b, y, x, c);
   2df36:	4653      	mov	r3, sl
   2df38:	462a      	mov	r2, r5
   2df3a:	4621      	mov	r1, r4
   2df3c:	9600      	str	r6, [sp, #0]
   2df3e:	a804      	add	r0, sp, #16
   2df40:	f7f9 fc04 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   2df44:	4653      	mov	r3, sl
          auto out_idx = Offset(output_shape, b, y, x, c);
   2df46:	4607      	mov	r7, r0
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   2df48:	462a      	mov	r2, r5
   2df4a:	4621      	mov	r1, r4
   2df4c:	9600      	str	r6, [sp, #0]
   2df4e:	4648      	mov	r0, r9
   2df50:	f7f9 fc32 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   2df54:	4680      	mov	r8, r0
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   2df56:	4653      	mov	r3, sl
   2df58:	9600      	str	r6, [sp, #0]
   2df5a:	462a      	mov	r2, r5
   2df5c:	4621      	mov	r1, r4
   2df5e:	a812      	add	r0, sp, #72	; 0x48
   2df60:	f7f9 fc2a 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          auto in1_val = input1_data[in1_idx];
   2df64:	9b03      	ldr	r3, [sp, #12]
          auto in2_val = input2_data[in2_idx];
   2df66:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
          auto in1_val = input1_data[in1_idx];
   2df6a:	eb03 0888 	add.w	r8, r3, r8, lsl #2
   2df6e:	edd8 7a00 	vldr	s15, [r8]
          output_data[out_idx] = in1_val >= 0.0f ? in1_val : in1_val * in2_val;
   2df72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
          auto in2_val = input2_data[in2_idx];
   2df76:	ed90 7a00 	vldr	s14, [r0]
          output_data[out_idx] = in1_val >= 0.0f ? in1_val : in1_val * in2_val;
   2df7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2df7e:	bfb8      	it	lt
   2df80:	ee67 7a87 	vmullt.f32	s15, s15, s14
   2df84:	9b25      	ldr	r3, [sp, #148]	; 0x94
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   2df86:	3601      	adds	r6, #1
          output_data[out_idx] = in1_val >= 0.0f ? in1_val : in1_val * in2_val;
   2df88:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   2df8c:	edc7 7a00 	vstr	s15, [r7]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   2df90:	e7cb      	b.n	2df2a <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x6e>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   2df92:	f10a 0a01 	add.w	sl, sl, #1
   2df96:	e7c1      	b.n	2df1c <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x60>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   2df98:	3501      	adds	r5, #1
   2df9a:	e7b7      	b.n	2df0c <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x50>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   2df9c:	3401      	adds	r4, #1
   2df9e:	e7ae      	b.n	2defe <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x42>
      RuntimeShape::ExtendedShape(4, unextended_output_shape);
   2dfa0:	a804      	add	r0, sp, #16
   2dfa2:	f7f9 fb06 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   2dfa6:	b01b      	add	sp, #108	; 0x6c
   2dfa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002dfac <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>:

namespace reference_ops {

// Broadcast prelu to output_shape for quantized uint8/int8 data.
template <typename T>
inline void BroadcastPrelu4DSlow(
   2dfac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2dfb0:	461e      	mov	r6, r3
    const PreluParams& params, const RuntimeShape& input_shape,
    const T* input_data, const RuntimeShape& alpha_shape, const T* alpha_data,
    const RuntimeShape& output_shape, T* output_data) {
  TFLITE_DCHECK_LE(input_shape.DimensionsCount(), 4);
   2dfb2:	680b      	ldr	r3, [r1, #0]
inline void BroadcastPrelu4DSlow(
   2dfb4:	b09b      	sub	sp, #108	; 0x6c
  TFLITE_DCHECK_LE(input_shape.DimensionsCount(), 4);
   2dfb6:	2b04      	cmp	r3, #4
inline void BroadcastPrelu4DSlow(
   2dfb8:	9203      	str	r2, [sp, #12]
   2dfba:	4604      	mov	r4, r0
   2dfbc:	460d      	mov	r5, r1
   2dfbe:	9a25      	ldr	r2, [sp, #148]	; 0x94
  TFLITE_DCHECK_LE(input_shape.DimensionsCount(), 4);
   2dfc0:	dd01      	ble.n	2dfc6 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x1a>
   2dfc2:	f002 fefa 	bl	30dba <abort>
  TFLITE_DCHECK_LE(alpha_shape.DimensionsCount(), 4);
   2dfc6:	6833      	ldr	r3, [r6, #0]
   2dfc8:	2b04      	cmp	r3, #4
   2dfca:	dcfa      	bgt.n	2dfc2 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x16>
  TFLITE_DCHECK_LE(output_shape.DimensionsCount(), 4);
   2dfcc:	6813      	ldr	r3, [r2, #0]
   2dfce:	2b04      	cmp	r3, #4
   2dfd0:	dcf7      	bgt.n	2dfc2 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x16>
   2dfd2:	2301      	movs	r3, #1
   2dfd4:	2104      	movs	r1, #4
   2dfd6:	a804      	add	r0, sp, #16
  const RuntimeShape extended_output_shape =
      RuntimeShape::ExtendedShape(4, output_shape);
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input_shape, alpha_shape, &desc1, &desc2);
   2dfd8:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
   2dfdc:	f7f9 fb89 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2dfe0:	4628      	mov	r0, r5
   2dfe2:	465a      	mov	r2, fp
   2dfe4:	4631      	mov	r1, r6
   2dfe6:	ab12      	add	r3, sp, #72	; 0x48
   2dfe8:	f7f9 fd87 	bl	27afa <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>

  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   2dfec:	2500      	movs	r5, #0
   2dfee:	2100      	movs	r1, #0
   2dff0:	a804      	add	r0, sp, #16
   2dff2:	f7f9 fae9 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2dff6:	42a8      	cmp	r0, r5
   2dff8:	dd5a      	ble.n	2e0b0 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x104>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   2dffa:	2600      	movs	r6, #0
   2dffc:	f10d 0810 	add.w	r8, sp, #16
   2e000:	2101      	movs	r1, #1
   2e002:	4640      	mov	r0, r8
   2e004:	f7f9 fae0 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2e008:	42b0      	cmp	r0, r6
   2e00a:	dd4f      	ble.n	2e0ac <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x100>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   2e00c:	2700      	movs	r7, #0
   2e00e:	2102      	movs	r1, #2
   2e010:	4640      	mov	r0, r8
   2e012:	f7f9 fad9 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2e016:	42b8      	cmp	r0, r7
   2e018:	dd46      	ble.n	2e0a8 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xfc>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   2e01a:	f04f 0900 	mov.w	r9, #0
   2e01e:	2103      	movs	r1, #3
   2e020:	4640      	mov	r0, r8
   2e022:	f7f9 fad1 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2e026:	4548      	cmp	r0, r9
   2e028:	dd3c      	ble.n	2e0a4 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xf8>
          int output_index = Offset(extended_output_shape, b, y, x, c);
   2e02a:	463b      	mov	r3, r7
   2e02c:	4632      	mov	r2, r6
   2e02e:	4629      	mov	r1, r5
   2e030:	4640      	mov	r0, r8
   2e032:	f8cd 9000 	str.w	r9, [sp]
   2e036:	f7f9 fb89 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
          int input_index = SubscriptToIndex(desc1, b, y, x, c);
   2e03a:	463b      	mov	r3, r7
          int output_index = Offset(extended_output_shape, b, y, x, c);
   2e03c:	9002      	str	r0, [sp, #8]
          int input_index = SubscriptToIndex(desc1, b, y, x, c);
   2e03e:	4632      	mov	r2, r6
   2e040:	4629      	mov	r1, r5
   2e042:	4658      	mov	r0, fp
   2e044:	f8cd 9000 	str.w	r9, [sp]
   2e048:	f7f9 fbb6 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          const int32 input_value =
              params.input_offset + input_data[input_index];
   2e04c:	9b03      	ldr	r3, [sp, #12]
   2e04e:	f813 a000 	ldrb.w	sl, [r3, r0]
          const int32 input_value =
   2e052:	6823      	ldr	r3, [r4, #0]
          int32 output_value;
          if (input_value >= 0) {
   2e054:	eb1a 0a03 	adds.w	sl, sl, r3
   2e058:	d411      	bmi.n	2e07e <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xd2>
            output_value = MultiplyByQuantizedMultiplier(
   2e05a:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   2e05e:	4650      	mov	r0, sl
          } else {
            auto alpha_index = SubscriptToIndex(desc2, b, y, x, c);
            const int32 alpha_value =
                params.alpha_offset + alpha_data[alpha_index];

            output_value = MultiplyByQuantizedMultiplier(
   2e060:	f7eb f956 	bl	19310 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
                input_value * alpha_value, params.output_multiplier_2,
                params.output_shift_2);
          }
          output_value += params.output_offset;
   2e064:	68a3      	ldr	r3, [r4, #8]
   2e066:	4418      	add	r0, r3
      if (__a < __b)
   2e068:	2800      	cmp	r0, #0
   2e06a:	dd19      	ble.n	2e0a0 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xf4>
      return __a;
   2e06c:	28ff      	cmp	r0, #255	; 0xff
   2e06e:	bfa8      	it	ge
   2e070:	20ff      	movge	r0, #255	; 0xff

          const int32 quantized_min = std::numeric_limits<T>::min();
          const int32 quantized_max = std::numeric_limits<T>::max();
          const int32 clamped_output =
              std::min(quantized_max, std::max(quantized_min, output_value));
          output_data[output_index] = static_cast<T>(clamped_output);
   2e072:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2e074:	9a02      	ldr	r2, [sp, #8]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   2e076:	f109 0901 	add.w	r9, r9, #1
          output_data[output_index] = static_cast<T>(clamped_output);
   2e07a:	5498      	strb	r0, [r3, r2]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   2e07c:	e7cf      	b.n	2e01e <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x72>
            auto alpha_index = SubscriptToIndex(desc2, b, y, x, c);
   2e07e:	463b      	mov	r3, r7
   2e080:	4632      	mov	r2, r6
   2e082:	4629      	mov	r1, r5
   2e084:	f8cd 9000 	str.w	r9, [sp]
   2e088:	a812      	add	r0, sp, #72	; 0x48
   2e08a:	f7f9 fb95 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
            output_value = MultiplyByQuantizedMultiplier(
   2e08e:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
                params.alpha_offset + alpha_data[alpha_index];
   2e092:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2e094:	5c18      	ldrb	r0, [r3, r0]
            const int32 alpha_value =
   2e096:	6863      	ldr	r3, [r4, #4]
   2e098:	4418      	add	r0, r3
            output_value = MultiplyByQuantizedMultiplier(
   2e09a:	fb0a f000 	mul.w	r0, sl, r0
   2e09e:	e7df      	b.n	2e060 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xb4>
      return __a;
   2e0a0:	2000      	movs	r0, #0
   2e0a2:	e7e6      	b.n	2e072 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xc6>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   2e0a4:	3701      	adds	r7, #1
   2e0a6:	e7b2      	b.n	2e00e <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x62>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   2e0a8:	3601      	adds	r6, #1
   2e0aa:	e7a7      	b.n	2dffc <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x50>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   2e0ac:	3501      	adds	r5, #1
   2e0ae:	e79e      	b.n	2dfee <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x42>
  const RuntimeShape extended_output_shape =
   2e0b0:	a804      	add	r0, sp, #16
   2e0b2:	f7f9 fa7e 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
        }
      }
    }
  }
}
   2e0b6:	b01b      	add	sp, #108	; 0x6c
   2e0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002e0bc <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>:
inline void BroadcastPrelu4DSlow(
   2e0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e0c0:	461e      	mov	r6, r3
  TFLITE_DCHECK_LE(input_shape.DimensionsCount(), 4);
   2e0c2:	680b      	ldr	r3, [r1, #0]
inline void BroadcastPrelu4DSlow(
   2e0c4:	b09b      	sub	sp, #108	; 0x6c
  TFLITE_DCHECK_LE(input_shape.DimensionsCount(), 4);
   2e0c6:	2b04      	cmp	r3, #4
inline void BroadcastPrelu4DSlow(
   2e0c8:	9203      	str	r2, [sp, #12]
   2e0ca:	4604      	mov	r4, r0
   2e0cc:	460d      	mov	r5, r1
   2e0ce:	9a25      	ldr	r2, [sp, #148]	; 0x94
  TFLITE_DCHECK_LE(input_shape.DimensionsCount(), 4);
   2e0d0:	dd01      	ble.n	2e0d6 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x1a>
   2e0d2:	f002 fe72 	bl	30dba <abort>
  TFLITE_DCHECK_LE(alpha_shape.DimensionsCount(), 4);
   2e0d6:	6833      	ldr	r3, [r6, #0]
   2e0d8:	2b04      	cmp	r3, #4
   2e0da:	dcfa      	bgt.n	2e0d2 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x16>
  TFLITE_DCHECK_LE(output_shape.DimensionsCount(), 4);
   2e0dc:	6813      	ldr	r3, [r2, #0]
   2e0de:	2b04      	cmp	r3, #4
   2e0e0:	dcf7      	bgt.n	2e0d2 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x16>
   2e0e2:	2301      	movs	r3, #1
   2e0e4:	2104      	movs	r1, #4
   2e0e6:	a804      	add	r0, sp, #16
  NdArrayDescsForElementwiseBroadcast(input_shape, alpha_shape, &desc1, &desc2);
   2e0e8:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
   2e0ec:	f7f9 fb01 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2e0f0:	4628      	mov	r0, r5
   2e0f2:	465a      	mov	r2, fp
   2e0f4:	4631      	mov	r1, r6
   2e0f6:	ab12      	add	r3, sp, #72	; 0x48
   2e0f8:	f7f9 fcff 	bl	27afa <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   2e0fc:	2500      	movs	r5, #0
   2e0fe:	2100      	movs	r1, #0
   2e100:	a804      	add	r0, sp, #16
   2e102:	f7f9 fa61 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2e106:	42a8      	cmp	r0, r5
   2e108:	dd5c      	ble.n	2e1c4 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x108>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   2e10a:	2600      	movs	r6, #0
   2e10c:	f10d 0810 	add.w	r8, sp, #16
   2e110:	2101      	movs	r1, #1
   2e112:	4640      	mov	r0, r8
   2e114:	f7f9 fa58 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2e118:	42b0      	cmp	r0, r6
   2e11a:	dd51      	ble.n	2e1c0 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x104>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   2e11c:	2700      	movs	r7, #0
   2e11e:	2102      	movs	r1, #2
   2e120:	4640      	mov	r0, r8
   2e122:	f7f9 fa51 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2e126:	42b8      	cmp	r0, r7
   2e128:	dd48      	ble.n	2e1bc <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x100>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   2e12a:	f04f 0900 	mov.w	r9, #0
   2e12e:	2103      	movs	r1, #3
   2e130:	4640      	mov	r0, r8
   2e132:	f7f9 fa49 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2e136:	4548      	cmp	r0, r9
   2e138:	dd3e      	ble.n	2e1b8 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xfc>
          int output_index = Offset(extended_output_shape, b, y, x, c);
   2e13a:	463b      	mov	r3, r7
   2e13c:	4632      	mov	r2, r6
   2e13e:	4629      	mov	r1, r5
   2e140:	4640      	mov	r0, r8
   2e142:	f8cd 9000 	str.w	r9, [sp]
   2e146:	f7f9 fb01 	bl	2774c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
          int input_index = SubscriptToIndex(desc1, b, y, x, c);
   2e14a:	463b      	mov	r3, r7
          int output_index = Offset(extended_output_shape, b, y, x, c);
   2e14c:	9002      	str	r0, [sp, #8]
          int input_index = SubscriptToIndex(desc1, b, y, x, c);
   2e14e:	4632      	mov	r2, r6
   2e150:	4629      	mov	r1, r5
   2e152:	4658      	mov	r0, fp
   2e154:	f8cd 9000 	str.w	r9, [sp]
   2e158:	f7f9 fb2e 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
              params.input_offset + input_data[input_index];
   2e15c:	9b03      	ldr	r3, [sp, #12]
   2e15e:	f913 a000 	ldrsb.w	sl, [r3, r0]
          const int32 input_value =
   2e162:	6823      	ldr	r3, [r4, #0]
          if (input_value >= 0) {
   2e164:	eb1a 0a03 	adds.w	sl, sl, r3
   2e168:	d412      	bmi.n	2e190 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xd4>
            output_value = MultiplyByQuantizedMultiplier(
   2e16a:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   2e16e:	4650      	mov	r0, sl
            output_value = MultiplyByQuantizedMultiplier(
   2e170:	f7eb f8ce 	bl	19310 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
          output_value += params.output_offset;
   2e174:	68a3      	ldr	r3, [r4, #8]
   2e176:	4418      	add	r0, r3
      if (__a < __b)
   2e178:	f110 0f7f 	cmn.w	r0, #127	; 0x7f
   2e17c:	db19      	blt.n	2e1b2 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xf6>
      return __a;
   2e17e:	287f      	cmp	r0, #127	; 0x7f
   2e180:	bfa8      	it	ge
   2e182:	207f      	movge	r0, #127	; 0x7f
          output_data[output_index] = static_cast<T>(clamped_output);
   2e184:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2e186:	9a02      	ldr	r2, [sp, #8]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   2e188:	f109 0901 	add.w	r9, r9, #1
          output_data[output_index] = static_cast<T>(clamped_output);
   2e18c:	5498      	strb	r0, [r3, r2]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   2e18e:	e7ce      	b.n	2e12e <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x72>
            auto alpha_index = SubscriptToIndex(desc2, b, y, x, c);
   2e190:	463b      	mov	r3, r7
   2e192:	4632      	mov	r2, r6
   2e194:	4629      	mov	r1, r5
   2e196:	f8cd 9000 	str.w	r9, [sp]
   2e19a:	a812      	add	r0, sp, #72	; 0x48
   2e19c:	f7f9 fb0c 	bl	277b8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
            output_value = MultiplyByQuantizedMultiplier(
   2e1a0:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
                params.alpha_offset + alpha_data[alpha_index];
   2e1a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2e1a6:	5618      	ldrsb	r0, [r3, r0]
            const int32 alpha_value =
   2e1a8:	6863      	ldr	r3, [r4, #4]
   2e1aa:	4418      	add	r0, r3
            output_value = MultiplyByQuantizedMultiplier(
   2e1ac:	fb0a f000 	mul.w	r0, sl, r0
   2e1b0:	e7de      	b.n	2e170 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xb4>
      return __a;
   2e1b2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2e1b6:	e7e5      	b.n	2e184 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xc8>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   2e1b8:	3701      	adds	r7, #1
   2e1ba:	e7b0      	b.n	2e11e <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x62>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   2e1bc:	3601      	adds	r6, #1
   2e1be:	e7a5      	b.n	2e10c <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x50>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   2e1c0:	3501      	adds	r5, #1
   2e1c2:	e79c      	b.n	2e0fe <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x42>
  const RuntimeShape extended_output_shape =
   2e1c4:	a804      	add	r0, sp, #16
   2e1c6:	f7f9 f9f4 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   2e1ca:	b01b      	add	sp, #108	; 0x6c
   2e1cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002e1d0 <_ZN6tflite3ops5micro8quantize4InitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   2e1d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   2e1d2:	b513      	push	{r0, r1, r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   2e1d4:	b90b      	cbnz	r3, 2e1da <_ZN6tflite3ops5micro8quantize4InitEP13TfLiteContextPKcj+0xa>
   2e1d6:	f002 fdf0 	bl	30dba <abort>
  void* data = nullptr;
   2e1da:	2400      	movs	r4, #0
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
   2e1dc:	2108      	movs	r1, #8
  void* data = nullptr;
   2e1de:	9401      	str	r4, [sp, #4]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
   2e1e0:	aa01      	add	r2, sp, #4
   2e1e2:	4798      	blx	r3
   2e1e4:	2801      	cmp	r0, #1
    return nullptr;
   2e1e6:	bf0c      	ite	eq
   2e1e8:	4620      	moveq	r0, r4
  return data;
   2e1ea:	9801      	ldrne	r0, [sp, #4]
}
   2e1ec:	b002      	add	sp, #8
   2e1ee:	bd10      	pop	{r4, pc}

0002e1f0 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_>:
                                  const int* axis) {
   2e1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e1f2:	469c      	mov	ip, r3
   2e1f4:	9f06      	ldr	r7, [sp, #24]
  if (num_dims == 0) {
   2e1f6:	b1d0      	cbz	r0, 2e22e <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x3e>
  TFLITE_DCHECK(dims != nullptr);
   2e1f8:	b909      	cbnz	r1, 2e1fe <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0xe>
   2e1fa:	f002 fdde 	bl	30dba <abort>
  TFLITE_DCHECK(index != nullptr);
   2e1fe:	2a00      	cmp	r2, #0
   2e200:	d0fb      	beq.n	2e1fa <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0xa>
  for (int idx = 0; idx < num_dims; ++idx) {
   2e202:	2400      	movs	r4, #0
  size_t offset = 0;
   2e204:	4625      	mov	r5, r4
  for (int idx = 0; idx < num_dims; ++idx) {
   2e206:	42a0      	cmp	r0, r4
   2e208:	dd12      	ble.n	2e230 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x40>
    if (axis != nullptr) {
   2e20a:	b147      	cbz	r7, 2e21e <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x2e>
      for (int axis_idx = 0; axis_idx < num_axis; ++axis_idx) {
   2e20c:	2600      	movs	r6, #0
   2e20e:	45b4      	cmp	ip, r6
   2e210:	dd05      	ble.n	2e21e <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x2e>
        if (idx == axis[axis_idx]) {
   2e212:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
   2e216:	429c      	cmp	r4, r3
   2e218:	d007      	beq.n	2e22a <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x3a>
      for (int axis_idx = 0; axis_idx < num_axis; ++axis_idx) {
   2e21a:	3601      	adds	r6, #1
   2e21c:	e7f7      	b.n	2e20e <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x1e>
      offset = offset * static_cast<size_t>(dims[idx]) +
   2e21e:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
   2e222:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
   2e226:	fb03 6505 	mla	r5, r3, r5, r6
  for (int idx = 0; idx < num_dims; ++idx) {
   2e22a:	3401      	adds	r4, #1
   2e22c:	e7eb      	b.n	2e206 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x16>
    return 0;
   2e22e:	4605      	mov	r5, r0
}
   2e230:	4628      	mov	r0, r5
   2e232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002e234 <_ZN6tflite3ops5micro6reduce16PrepareMeanOrSumEP13TfLiteContextP10TfLiteNode>:
  TF_LITE_ENSURE_OK(context, PrepareSimple(context, node));
   2e234:	f7ef b9de 	b.w	1d5f4 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode>

0002e238 <_ZN6tflite3ops5micro6reduce11ResolveAxisEPKiiPNS_10MeanParamsE>:
                 tflite::MeanParams* op_params) {
   2e238:	b570      	push	{r4, r5, r6, lr}
   2e23a:	1c94      	adds	r4, r2, #2
   2e23c:	4625      	mov	r5, r4
  int i = 0;
   2e23e:	2300      	movs	r3, #0
  for (; i < axis_count; ++i) {
   2e240:	428b      	cmp	r3, r1
   2e242:	db08      	blt.n	2e256 <_ZN6tflite3ops5micro6reduce11ResolveAxisEPKiiPNS_10MeanParamsE+0x1e>
    op_params->axis[i] = 1;
   2e244:	2001      	movs	r0, #1
   2e246:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
  for (; i < 4; ++i) {
   2e24a:	2b03      	cmp	r3, #3
   2e24c:	dc09      	bgt.n	2e262 <_ZN6tflite3ops5micro6reduce11ResolveAxisEPKiiPNS_10MeanParamsE+0x2a>
    op_params->axis[i] = 1;
   2e24e:	f824 0013 	strh.w	r0, [r4, r3, lsl #1]
  for (; i < 4; ++i) {
   2e252:	3301      	adds	r3, #1
   2e254:	e7f9      	b.n	2e24a <_ZN6tflite3ops5micro6reduce11ResolveAxisEPKiiPNS_10MeanParamsE+0x12>
    op_params->axis[i] = static_cast<int16>(axis_data[i]);
   2e256:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]
  for (; i < axis_count; ++i) {
   2e25a:	3301      	adds	r3, #1
    op_params->axis[i] = static_cast<int16>(axis_data[i]);
   2e25c:	f825 6b02 	strh.w	r6, [r5], #2
  for (; i < axis_count; ++i) {
   2e260:	e7ee      	b.n	2e240 <_ZN6tflite3ops5micro6reduce11ResolveAxisEPKiiPNS_10MeanParamsE+0x8>
  op_params->axis_count = axis_count;
   2e262:	7011      	strb	r1, [r2, #0]
}
   2e264:	bd70      	pop	{r4, r5, r6, pc}

0002e266 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->inputs->data[index]];
   2e266:	680b      	ldr	r3, [r1, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   2e268:	6882      	ldr	r2, [r0, #8]
   2e26a:	6858      	ldr	r0, [r3, #4]
  return &context->tensors[node->outputs->data[index]];
   2e26c:	684b      	ldr	r3, [r1, #4]
  return &context->tensors[node->inputs->data[index]];
   2e26e:	eb02 1080 	add.w	r0, r2, r0, lsl #6
  return &context->tensors[node->outputs->data[index]];
   2e272:	685b      	ldr	r3, [r3, #4]
  if (input->data.raw != output->data.raw) {
   2e274:	6841      	ldr	r1, [r0, #4]
   2e276:	eb02 1283 	add.w	r2, r2, r3, lsl #6
   2e27a:	6853      	ldr	r3, [r2, #4]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   2e27c:	b510      	push	{r4, lr}
  if (input->data.raw != output->data.raw) {
   2e27e:	4299      	cmp	r1, r3
   2e280:	d009      	beq.n	2e296 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x30>
    for (size_t i = 0; i < input->bytes; ++i) {
   2e282:	2300      	movs	r3, #0
   2e284:	6981      	ldr	r1, [r0, #24]
   2e286:	4299      	cmp	r1, r3
   2e288:	d905      	bls.n	2e296 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x30>
      output->data.raw[i] = input->data.raw[i];
   2e28a:	6841      	ldr	r1, [r0, #4]
   2e28c:	5ccc      	ldrb	r4, [r1, r3]
   2e28e:	6851      	ldr	r1, [r2, #4]
   2e290:	54cc      	strb	r4, [r1, r3]
    for (size_t i = 0; i < input->bytes; ++i) {
   2e292:	3301      	adds	r3, #1
   2e294:	e7f6      	b.n	2e284 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x1e>
}
   2e296:	2000      	movs	r0, #0
   2e298:	bd10      	pop	{r4, pc}

0002e29a <_ZN6tflite3ops5micro23resize_nearest_neighbor7PrepareEP13TfLiteContextP10TfLiteNode>:
}
   2e29a:	2000      	movs	r0, #0
   2e29c:	4770      	bx	lr

0002e29e <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_>:

template <typename T>
inline void ResizeNearestNeighbor(
   2e29e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e2a2:	4698      	mov	r8, r3
    const tflite::ResizeNearestNeighborParams& op_params,
    const RuntimeShape& unextended_input_shape, const T* input_data,
    const RuntimeShape& output_size_shape, const int32* output_size_data,
    const RuntimeShape& unextended_output_shape, T* output_data) {
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   2e2a4:	680b      	ldr	r3, [r1, #0]
inline void ResizeNearestNeighbor(
   2e2a6:	b099      	sub	sp, #100	; 0x64
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   2e2a8:	2b04      	cmp	r3, #4
inline void ResizeNearestNeighbor(
   2e2aa:	4605      	mov	r5, r0
   2e2ac:	e9dd 7422 	ldrd	r7, r4, [sp, #136]	; 0x88
   2e2b0:	4616      	mov	r6, r2
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   2e2b2:	dd01      	ble.n	2e2b8 <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x1a>
   2e2b4:	f002 fd81 	bl	30dba <abort>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   2e2b8:	6823      	ldr	r3, [r4, #0]
   2e2ba:	2b04      	cmp	r3, #4
   2e2bc:	dcfa      	bgt.n	2e2b4 <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x16>
    return RuntimeShape(new_shape_size, shape, 1);
   2e2be:	460a      	mov	r2, r1
   2e2c0:	2301      	movs	r3, #1
   2e2c2:	2104      	movs	r1, #4
   2e2c4:	a80c      	add	r0, sp, #48	; 0x30
   2e2c6:	f7f9 fa14 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2e2ca:	4622      	mov	r2, r4
   2e2cc:	2301      	movs	r3, #1
   2e2ce:	2104      	movs	r1, #4
   2e2d0:	a812      	add	r0, sp, #72	; 0x48
   2e2d2:	f7f9 fa0e 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  const RuntimeShape input_shape =
      RuntimeShape::ExtendedShape(4, unextended_input_shape);
  const RuntimeShape output_shape =
      RuntimeShape::ExtendedShape(4, unextended_output_shape);

  int32 batches = MatchingDim(input_shape, 0, output_shape, 0);
   2e2d6:	2300      	movs	r3, #0
   2e2d8:	aa12      	add	r2, sp, #72	; 0x48
   2e2da:	4619      	mov	r1, r3
   2e2dc:	a80c      	add	r0, sp, #48	; 0x30
   2e2de:	f7fc f81d 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  int32 input_height = input_shape.Dims(1);
   2e2e2:	2101      	movs	r1, #1
  int32 batches = MatchingDim(input_shape, 0, output_shape, 0);
   2e2e4:	900a      	str	r0, [sp, #40]	; 0x28
  int32 input_height = input_shape.Dims(1);
   2e2e6:	a80c      	add	r0, sp, #48	; 0x30
   2e2e8:	f7f9 f96e 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  int32 input_width = input_shape.Dims(2);
   2e2ec:	2102      	movs	r1, #2
  int32 input_height = input_shape.Dims(1);
   2e2ee:	9003      	str	r0, [sp, #12]
  int32 input_width = input_shape.Dims(2);
   2e2f0:	a80c      	add	r0, sp, #48	; 0x30
   2e2f2:	f7f9 f969 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  int32 depth = MatchingDim(input_shape, 3, output_shape, 3);
   2e2f6:	2303      	movs	r3, #3
  int32 input_width = input_shape.Dims(2);
   2e2f8:	9004      	str	r0, [sp, #16]
  int32 depth = MatchingDim(input_shape, 3, output_shape, 3);
   2e2fa:	4619      	mov	r1, r3
   2e2fc:	aa12      	add	r2, sp, #72	; 0x48
   2e2fe:	a80c      	add	r0, sp, #48	; 0x30
   2e300:	f7fc f80c 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
   2e304:	4604      	mov	r4, r0

  // The Tensorflow version of this op allows resize on the width and height
  // axis only.
  TFLITE_DCHECK_EQ(output_size_shape.FlatSize(), 2);
   2e306:	4640      	mov	r0, r8
   2e308:	f7f9 f9e3 	bl	276d2 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   2e30c:	2802      	cmp	r0, #2
   2e30e:	d1d1      	bne.n	2e2b4 <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x16>
  int32 output_height = output_size_data[0];
   2e310:	683b      	ldr	r3, [r7, #0]
  int32 output_width = output_size_data[1];

  const int col_offset = input_shape.Dims(3);
   2e312:	2103      	movs	r1, #3
   2e314:	a80c      	add	r0, sp, #48	; 0x30
  int32 output_height = output_size_data[0];
   2e316:	9305      	str	r3, [sp, #20]
  const int col_offset = input_shape.Dims(3);
   2e318:	f7f9 f956 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int row_offset = input_shape.Dims(2) * col_offset;
   2e31c:	4603      	mov	r3, r0
  const int batch_offset = input_shape.Dims(1) * row_offset;

  const T* input_ptr = input_data;
  T* output_ptr = output_data;
  for (int b = 0; b < batches; ++b) {
   2e31e:	f04f 0900 	mov.w	r9, #0
  const int row_offset = input_shape.Dims(2) * col_offset;
   2e322:	9a04      	ldr	r2, [sp, #16]
  int32 output_width = output_size_data[1];
   2e324:	f8d7 a004 	ldr.w	sl, [r7, #4]
  const int row_offset = input_shape.Dims(2) * col_offset;
   2e328:	4353      	muls	r3, r2
  const int batch_offset = input_shape.Dims(1) * row_offset;
   2e32a:	9a03      	ldr	r2, [sp, #12]
  const int row_offset = input_shape.Dims(2) * col_offset;
   2e32c:	9307      	str	r3, [sp, #28]
  const int batch_offset = input_shape.Dims(1) * row_offset;
   2e32e:	4353      	muls	r3, r2
        const T* x_input_ptr = y_input_ptr + in_x * col_offset;
        memcpy(output_ptr, x_input_ptr, depth * sizeof(T));
        output_ptr += depth;
      }
    }
    input_ptr += batch_offset;
   2e330:	009b      	lsls	r3, r3, #2
        memcpy(output_ptr, x_input_ptr, depth * sizeof(T));
   2e332:	00a4      	lsls	r4, r4, #2
    input_ptr += batch_offset;
   2e334:	9309      	str	r3, [sp, #36]	; 0x24
   2e336:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   2e33a:	4363      	muls	r3, r4
  const int col_offset = input_shape.Dims(3);
   2e33c:	9006      	str	r0, [sp, #24]
   2e33e:	930b      	str	r3, [sp, #44]	; 0x2c
  for (int b = 0; b < batches; ++b) {
   2e340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2e342:	4599      	cmp	r9, r3
   2e344:	da35      	bge.n	2e3b2 <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x114>
    for (int y = 0; y < output_height; ++y) {
   2e346:	2700      	movs	r7, #0
   2e348:	9b05      	ldr	r3, [sp, #20]
   2e34a:	429f      	cmp	r7, r3
   2e34c:	da2c      	bge.n	2e3a8 <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x10a>
      int32 in_y = GetNearestNeighbor(y, input_height, output_height,
   2e34e:	786b      	ldrb	r3, [r5, #1]
   2e350:	4638      	mov	r0, r7
   2e352:	9300      	str	r3, [sp, #0]
   2e354:	9a05      	ldr	r2, [sp, #20]
   2e356:	782b      	ldrb	r3, [r5, #0]
   2e358:	9903      	ldr	r1, [sp, #12]
   2e35a:	f7ef fcc5 	bl	1dce8 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb>
      for (int x = 0; x < output_width; ++x) {
   2e35e:	f04f 0800 	mov.w	r8, #0
      const T* y_input_ptr = input_ptr + in_y * row_offset;
   2e362:	9b07      	ldr	r3, [sp, #28]
   2e364:	f8dd b090 	ldr.w	fp, [sp, #144]	; 0x90
   2e368:	4343      	muls	r3, r0
   2e36a:	9308      	str	r3, [sp, #32]
      for (int x = 0; x < output_width; ++x) {
   2e36c:	45d0      	cmp	r8, sl
   2e36e:	da15      	bge.n	2e39c <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0xfe>
        int32 in_x = GetNearestNeighbor(x, input_width, output_width,
   2e370:	786b      	ldrb	r3, [r5, #1]
   2e372:	4652      	mov	r2, sl
   2e374:	4640      	mov	r0, r8
   2e376:	9904      	ldr	r1, [sp, #16]
   2e378:	9300      	str	r3, [sp, #0]
   2e37a:	782b      	ldrb	r3, [r5, #0]
   2e37c:	f7ef fcb4 	bl	1dce8 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb>
        const T* x_input_ptr = y_input_ptr + in_x * col_offset;
   2e380:	9a08      	ldr	r2, [sp, #32]
   2e382:	9b06      	ldr	r3, [sp, #24]
      for (int x = 0; x < output_width; ++x) {
   2e384:	f108 0801 	add.w	r8, r8, #1
        const T* x_input_ptr = y_input_ptr + in_x * col_offset;
   2e388:	fb00 2003 	mla	r0, r0, r3, r2
        memcpy(output_ptr, x_input_ptr, depth * sizeof(T));
   2e38c:	4622      	mov	r2, r4
   2e38e:	eb06 0180 	add.w	r1, r6, r0, lsl #2
   2e392:	4658      	mov	r0, fp
   2e394:	f002 fd34 	bl	30e00 <memcpy>
        output_ptr += depth;
   2e398:	44a3      	add	fp, r4
      for (int x = 0; x < output_width; ++x) {
   2e39a:	e7e7      	b.n	2e36c <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0xce>
   2e39c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2e39e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    for (int y = 0; y < output_height; ++y) {
   2e3a0:	3701      	adds	r7, #1
   2e3a2:	4413      	add	r3, r2
   2e3a4:	9324      	str	r3, [sp, #144]	; 0x90
   2e3a6:	e7cf      	b.n	2e348 <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0xaa>
    input_ptr += batch_offset;
   2e3a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  for (int b = 0; b < batches; ++b) {
   2e3aa:	f109 0901 	add.w	r9, r9, #1
    input_ptr += batch_offset;
   2e3ae:	441e      	add	r6, r3
  for (int b = 0; b < batches; ++b) {
   2e3b0:	e7c6      	b.n	2e340 <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0xa2>
  const RuntimeShape output_shape =
   2e3b2:	a812      	add	r0, sp, #72	; 0x48
   2e3b4:	f7f9 f8fd 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape =
   2e3b8:	a80c      	add	r0, sp, #48	; 0x30
   2e3ba:	f7f9 f8fa 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  }
}
   2e3be:	b019      	add	sp, #100	; 0x64
   2e3c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002e3c4 <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_>:
inline void ResizeNearestNeighbor(
   2e3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e3c8:	4698      	mov	r8, r3
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   2e3ca:	680b      	ldr	r3, [r1, #0]
inline void ResizeNearestNeighbor(
   2e3cc:	b099      	sub	sp, #100	; 0x64
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   2e3ce:	2b04      	cmp	r3, #4
inline void ResizeNearestNeighbor(
   2e3d0:	4604      	mov	r4, r0
   2e3d2:	e9dd 7622 	ldrd	r7, r6, [sp, #136]	; 0x88
   2e3d6:	4615      	mov	r5, r2
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   2e3d8:	dd01      	ble.n	2e3de <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x1a>
   2e3da:	f002 fcee 	bl	30dba <abort>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   2e3de:	6833      	ldr	r3, [r6, #0]
   2e3e0:	2b04      	cmp	r3, #4
   2e3e2:	dcfa      	bgt.n	2e3da <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x16>
   2e3e4:	460a      	mov	r2, r1
   2e3e6:	2301      	movs	r3, #1
   2e3e8:	2104      	movs	r1, #4
   2e3ea:	a80c      	add	r0, sp, #48	; 0x30
   2e3ec:	f7f9 f981 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2e3f0:	4632      	mov	r2, r6
   2e3f2:	2301      	movs	r3, #1
   2e3f4:	2104      	movs	r1, #4
   2e3f6:	a812      	add	r0, sp, #72	; 0x48
   2e3f8:	f7f9 f97b 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  int32 batches = MatchingDim(input_shape, 0, output_shape, 0);
   2e3fc:	2300      	movs	r3, #0
   2e3fe:	aa12      	add	r2, sp, #72	; 0x48
   2e400:	4619      	mov	r1, r3
   2e402:	a80c      	add	r0, sp, #48	; 0x30
   2e404:	f7fb ff8a 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  int32 input_height = input_shape.Dims(1);
   2e408:	2101      	movs	r1, #1
  int32 batches = MatchingDim(input_shape, 0, output_shape, 0);
   2e40a:	9009      	str	r0, [sp, #36]	; 0x24
  int32 input_height = input_shape.Dims(1);
   2e40c:	a80c      	add	r0, sp, #48	; 0x30
   2e40e:	f7f9 f8db 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  int32 input_width = input_shape.Dims(2);
   2e412:	2102      	movs	r1, #2
  int32 input_height = input_shape.Dims(1);
   2e414:	9003      	str	r0, [sp, #12]
  int32 input_width = input_shape.Dims(2);
   2e416:	a80c      	add	r0, sp, #48	; 0x30
   2e418:	f7f9 f8d6 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  int32 depth = MatchingDim(input_shape, 3, output_shape, 3);
   2e41c:	2303      	movs	r3, #3
  int32 input_width = input_shape.Dims(2);
   2e41e:	9004      	str	r0, [sp, #16]
  int32 depth = MatchingDim(input_shape, 3, output_shape, 3);
   2e420:	4619      	mov	r1, r3
   2e422:	aa12      	add	r2, sp, #72	; 0x48
   2e424:	a80c      	add	r0, sp, #48	; 0x30
   2e426:	f7fb ff79 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
   2e42a:	4606      	mov	r6, r0
  TFLITE_DCHECK_EQ(output_size_shape.FlatSize(), 2);
   2e42c:	4640      	mov	r0, r8
   2e42e:	f7f9 f950 	bl	276d2 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   2e432:	2802      	cmp	r0, #2
   2e434:	d1d1      	bne.n	2e3da <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x16>
  int32 output_height = output_size_data[0];
   2e436:	683b      	ldr	r3, [r7, #0]
  const int col_offset = input_shape.Dims(3);
   2e438:	2103      	movs	r1, #3
   2e43a:	a80c      	add	r0, sp, #48	; 0x30
  int32 output_height = output_size_data[0];
   2e43c:	9305      	str	r3, [sp, #20]
  const int col_offset = input_shape.Dims(3);
   2e43e:	f7f9 f8c3 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int row_offset = input_shape.Dims(2) * col_offset;
   2e442:	4603      	mov	r3, r0
  for (int b = 0; b < batches; ++b) {
   2e444:	f04f 0900 	mov.w	r9, #0
  const int row_offset = input_shape.Dims(2) * col_offset;
   2e448:	9a04      	ldr	r2, [sp, #16]
  int32 output_width = output_size_data[1];
   2e44a:	f8d7 a004 	ldr.w	sl, [r7, #4]
  const int row_offset = input_shape.Dims(2) * col_offset;
   2e44e:	4353      	muls	r3, r2
  const int batch_offset = input_shape.Dims(1) * row_offset;
   2e450:	9a03      	ldr	r2, [sp, #12]
  const int row_offset = input_shape.Dims(2) * col_offset;
   2e452:	9307      	str	r3, [sp, #28]
  const int batch_offset = input_shape.Dims(1) * row_offset;
   2e454:	4353      	muls	r3, r2
   2e456:	930a      	str	r3, [sp, #40]	; 0x28
   2e458:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   2e45c:	4373      	muls	r3, r6
  const int col_offset = input_shape.Dims(3);
   2e45e:	9006      	str	r0, [sp, #24]
   2e460:	930b      	str	r3, [sp, #44]	; 0x2c
  for (int b = 0; b < batches; ++b) {
   2e462:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2e464:	4599      	cmp	r9, r3
   2e466:	da34      	bge.n	2e4d2 <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x10e>
    for (int y = 0; y < output_height; ++y) {
   2e468:	2700      	movs	r7, #0
   2e46a:	9b05      	ldr	r3, [sp, #20]
   2e46c:	429f      	cmp	r7, r3
   2e46e:	da2b      	bge.n	2e4c8 <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x104>
      int32 in_y = GetNearestNeighbor(y, input_height, output_height,
   2e470:	7863      	ldrb	r3, [r4, #1]
   2e472:	4638      	mov	r0, r7
   2e474:	9300      	str	r3, [sp, #0]
   2e476:	9a05      	ldr	r2, [sp, #20]
   2e478:	7823      	ldrb	r3, [r4, #0]
   2e47a:	9903      	ldr	r1, [sp, #12]
   2e47c:	f7ef fc34 	bl	1dce8 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb>
      for (int x = 0; x < output_width; ++x) {
   2e480:	f04f 0800 	mov.w	r8, #0
      const T* y_input_ptr = input_ptr + in_y * row_offset;
   2e484:	9b07      	ldr	r3, [sp, #28]
   2e486:	f8dd b090 	ldr.w	fp, [sp, #144]	; 0x90
   2e48a:	4343      	muls	r3, r0
   2e48c:	9308      	str	r3, [sp, #32]
      for (int x = 0; x < output_width; ++x) {
   2e48e:	45d0      	cmp	r8, sl
   2e490:	da14      	bge.n	2e4bc <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0xf8>
        int32 in_x = GetNearestNeighbor(x, input_width, output_width,
   2e492:	7863      	ldrb	r3, [r4, #1]
   2e494:	4652      	mov	r2, sl
   2e496:	4640      	mov	r0, r8
   2e498:	9904      	ldr	r1, [sp, #16]
   2e49a:	9300      	str	r3, [sp, #0]
   2e49c:	7823      	ldrb	r3, [r4, #0]
   2e49e:	f7ef fc23 	bl	1dce8 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb>
        const T* x_input_ptr = y_input_ptr + in_x * col_offset;
   2e4a2:	9a08      	ldr	r2, [sp, #32]
   2e4a4:	9b06      	ldr	r3, [sp, #24]
      for (int x = 0; x < output_width; ++x) {
   2e4a6:	f108 0801 	add.w	r8, r8, #1
        const T* x_input_ptr = y_input_ptr + in_x * col_offset;
   2e4aa:	fb00 2003 	mla	r0, r0, r3, r2
        memcpy(output_ptr, x_input_ptr, depth * sizeof(T));
   2e4ae:	4632      	mov	r2, r6
   2e4b0:	1829      	adds	r1, r5, r0
   2e4b2:	4658      	mov	r0, fp
   2e4b4:	f002 fca4 	bl	30e00 <memcpy>
        output_ptr += depth;
   2e4b8:	44b3      	add	fp, r6
      for (int x = 0; x < output_width; ++x) {
   2e4ba:	e7e8      	b.n	2e48e <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0xca>
   2e4bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2e4be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    for (int y = 0; y < output_height; ++y) {
   2e4c0:	3701      	adds	r7, #1
   2e4c2:	4413      	add	r3, r2
   2e4c4:	9324      	str	r3, [sp, #144]	; 0x90
   2e4c6:	e7d0      	b.n	2e46a <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0xa6>
    input_ptr += batch_offset;
   2e4c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  for (int b = 0; b < batches; ++b) {
   2e4ca:	f109 0901 	add.w	r9, r9, #1
    input_ptr += batch_offset;
   2e4ce:	441d      	add	r5, r3
  for (int b = 0; b < batches; ++b) {
   2e4d0:	e7c7      	b.n	2e462 <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x9e>
  const RuntimeShape output_shape =
   2e4d2:	a812      	add	r0, sp, #72	; 0x48
   2e4d4:	f7f9 f86d 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape =
   2e4d8:	a80c      	add	r0, sp, #48	; 0x30
   2e4da:	f7f9 f86a 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   2e4de:	b019      	add	sp, #100	; 0x64
   2e4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002e4e4 <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_>:
inline void ResizeNearestNeighbor(
   2e4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e4e8:	4698      	mov	r8, r3
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   2e4ea:	680b      	ldr	r3, [r1, #0]
inline void ResizeNearestNeighbor(
   2e4ec:	b099      	sub	sp, #100	; 0x64
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   2e4ee:	2b04      	cmp	r3, #4
inline void ResizeNearestNeighbor(
   2e4f0:	4604      	mov	r4, r0
   2e4f2:	e9dd 7622 	ldrd	r7, r6, [sp, #136]	; 0x88
   2e4f6:	4615      	mov	r5, r2
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   2e4f8:	dd01      	ble.n	2e4fe <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x1a>
   2e4fa:	f002 fc5e 	bl	30dba <abort>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   2e4fe:	6833      	ldr	r3, [r6, #0]
   2e500:	2b04      	cmp	r3, #4
   2e502:	dcfa      	bgt.n	2e4fa <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x16>
   2e504:	460a      	mov	r2, r1
   2e506:	2301      	movs	r3, #1
   2e508:	2104      	movs	r1, #4
   2e50a:	a80c      	add	r0, sp, #48	; 0x30
   2e50c:	f7f9 f8f1 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2e510:	4632      	mov	r2, r6
   2e512:	2301      	movs	r3, #1
   2e514:	2104      	movs	r1, #4
   2e516:	a812      	add	r0, sp, #72	; 0x48
   2e518:	f7f9 f8eb 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  int32 batches = MatchingDim(input_shape, 0, output_shape, 0);
   2e51c:	2300      	movs	r3, #0
   2e51e:	aa12      	add	r2, sp, #72	; 0x48
   2e520:	4619      	mov	r1, r3
   2e522:	a80c      	add	r0, sp, #48	; 0x30
   2e524:	f7fb fefa 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  int32 input_height = input_shape.Dims(1);
   2e528:	2101      	movs	r1, #1
  int32 batches = MatchingDim(input_shape, 0, output_shape, 0);
   2e52a:	9009      	str	r0, [sp, #36]	; 0x24
  int32 input_height = input_shape.Dims(1);
   2e52c:	a80c      	add	r0, sp, #48	; 0x30
   2e52e:	f7f9 f84b 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  int32 input_width = input_shape.Dims(2);
   2e532:	2102      	movs	r1, #2
  int32 input_height = input_shape.Dims(1);
   2e534:	9003      	str	r0, [sp, #12]
  int32 input_width = input_shape.Dims(2);
   2e536:	a80c      	add	r0, sp, #48	; 0x30
   2e538:	f7f9 f846 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  int32 depth = MatchingDim(input_shape, 3, output_shape, 3);
   2e53c:	2303      	movs	r3, #3
  int32 input_width = input_shape.Dims(2);
   2e53e:	9004      	str	r0, [sp, #16]
  int32 depth = MatchingDim(input_shape, 3, output_shape, 3);
   2e540:	4619      	mov	r1, r3
   2e542:	aa12      	add	r2, sp, #72	; 0x48
   2e544:	a80c      	add	r0, sp, #48	; 0x30
   2e546:	f7fb fee9 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
   2e54a:	4606      	mov	r6, r0
  TFLITE_DCHECK_EQ(output_size_shape.FlatSize(), 2);
   2e54c:	4640      	mov	r0, r8
   2e54e:	f7f9 f8c0 	bl	276d2 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   2e552:	2802      	cmp	r0, #2
   2e554:	d1d1      	bne.n	2e4fa <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x16>
  int32 output_height = output_size_data[0];
   2e556:	683b      	ldr	r3, [r7, #0]
  const int col_offset = input_shape.Dims(3);
   2e558:	2103      	movs	r1, #3
   2e55a:	a80c      	add	r0, sp, #48	; 0x30
  int32 output_height = output_size_data[0];
   2e55c:	9305      	str	r3, [sp, #20]
  const int col_offset = input_shape.Dims(3);
   2e55e:	f7f9 f833 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int row_offset = input_shape.Dims(2) * col_offset;
   2e562:	4603      	mov	r3, r0
  for (int b = 0; b < batches; ++b) {
   2e564:	f04f 0900 	mov.w	r9, #0
  const int row_offset = input_shape.Dims(2) * col_offset;
   2e568:	9a04      	ldr	r2, [sp, #16]
  int32 output_width = output_size_data[1];
   2e56a:	f8d7 a004 	ldr.w	sl, [r7, #4]
  const int row_offset = input_shape.Dims(2) * col_offset;
   2e56e:	4353      	muls	r3, r2
  const int batch_offset = input_shape.Dims(1) * row_offset;
   2e570:	9a03      	ldr	r2, [sp, #12]
  const int row_offset = input_shape.Dims(2) * col_offset;
   2e572:	9307      	str	r3, [sp, #28]
  const int batch_offset = input_shape.Dims(1) * row_offset;
   2e574:	4353      	muls	r3, r2
   2e576:	930a      	str	r3, [sp, #40]	; 0x28
   2e578:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   2e57c:	4373      	muls	r3, r6
  const int col_offset = input_shape.Dims(3);
   2e57e:	9006      	str	r0, [sp, #24]
   2e580:	930b      	str	r3, [sp, #44]	; 0x2c
  for (int b = 0; b < batches; ++b) {
   2e582:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2e584:	4599      	cmp	r9, r3
   2e586:	da34      	bge.n	2e5f2 <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x10e>
    for (int y = 0; y < output_height; ++y) {
   2e588:	2700      	movs	r7, #0
   2e58a:	9b05      	ldr	r3, [sp, #20]
   2e58c:	429f      	cmp	r7, r3
   2e58e:	da2b      	bge.n	2e5e8 <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x104>
      int32 in_y = GetNearestNeighbor(y, input_height, output_height,
   2e590:	7863      	ldrb	r3, [r4, #1]
   2e592:	4638      	mov	r0, r7
   2e594:	9300      	str	r3, [sp, #0]
   2e596:	9a05      	ldr	r2, [sp, #20]
   2e598:	7823      	ldrb	r3, [r4, #0]
   2e59a:	9903      	ldr	r1, [sp, #12]
   2e59c:	f7ef fba4 	bl	1dce8 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb>
      for (int x = 0; x < output_width; ++x) {
   2e5a0:	f04f 0800 	mov.w	r8, #0
      const T* y_input_ptr = input_ptr + in_y * row_offset;
   2e5a4:	9b07      	ldr	r3, [sp, #28]
   2e5a6:	f8dd b090 	ldr.w	fp, [sp, #144]	; 0x90
   2e5aa:	4343      	muls	r3, r0
   2e5ac:	9308      	str	r3, [sp, #32]
      for (int x = 0; x < output_width; ++x) {
   2e5ae:	45d0      	cmp	r8, sl
   2e5b0:	da14      	bge.n	2e5dc <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0xf8>
        int32 in_x = GetNearestNeighbor(x, input_width, output_width,
   2e5b2:	7863      	ldrb	r3, [r4, #1]
   2e5b4:	4652      	mov	r2, sl
   2e5b6:	4640      	mov	r0, r8
   2e5b8:	9904      	ldr	r1, [sp, #16]
   2e5ba:	9300      	str	r3, [sp, #0]
   2e5bc:	7823      	ldrb	r3, [r4, #0]
   2e5be:	f7ef fb93 	bl	1dce8 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb>
        const T* x_input_ptr = y_input_ptr + in_x * col_offset;
   2e5c2:	9a08      	ldr	r2, [sp, #32]
   2e5c4:	9b06      	ldr	r3, [sp, #24]
      for (int x = 0; x < output_width; ++x) {
   2e5c6:	f108 0801 	add.w	r8, r8, #1
        const T* x_input_ptr = y_input_ptr + in_x * col_offset;
   2e5ca:	fb00 2003 	mla	r0, r0, r3, r2
        memcpy(output_ptr, x_input_ptr, depth * sizeof(T));
   2e5ce:	4632      	mov	r2, r6
   2e5d0:	1829      	adds	r1, r5, r0
   2e5d2:	4658      	mov	r0, fp
   2e5d4:	f002 fc14 	bl	30e00 <memcpy>
        output_ptr += depth;
   2e5d8:	44b3      	add	fp, r6
      for (int x = 0; x < output_width; ++x) {
   2e5da:	e7e8      	b.n	2e5ae <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0xca>
   2e5dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2e5de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    for (int y = 0; y < output_height; ++y) {
   2e5e0:	3701      	adds	r7, #1
   2e5e2:	4413      	add	r3, r2
   2e5e4:	9324      	str	r3, [sp, #144]	; 0x90
   2e5e6:	e7d0      	b.n	2e58a <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0xa6>
    input_ptr += batch_offset;
   2e5e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  for (int b = 0; b < batches; ++b) {
   2e5ea:	f109 0901 	add.w	r9, r9, #1
    input_ptr += batch_offset;
   2e5ee:	441d      	add	r5, r3
  for (int b = 0; b < batches; ++b) {
   2e5f0:	e7c7      	b.n	2e582 <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x9e>
  const RuntimeShape output_shape =
   2e5f2:	a812      	add	r0, sp, #72	; 0x48
   2e5f4:	f7f8 ffdd 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape =
   2e5f8:	a80c      	add	r0, sp, #48	; 0x30
   2e5fa:	f7f8 ffda 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   2e5fe:	b019      	add	sp, #100	; 0x64
   2e600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002e604 <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf>:
    return floor_val = floor_val + 1.0f;
  }
}

inline void Round(const RuntimeShape& input_shape, const float* input_data,
                  const RuntimeShape& output_shape, float* output_data) {
   2e604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e608:	461e      	mov	r6, r3
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   2e60a:	f8d0 8000 	ldr.w	r8, [r0]
   2e60e:	6813      	ldr	r3, [r2, #0]
   2e610:	4604      	mov	r4, r0
   2e612:	4598      	cmp	r8, r3
   2e614:	460f      	mov	r7, r1
   2e616:	4691      	mov	r9, r2
   2e618:	d001      	beq.n	2e61e <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0x1a>
   2e61a:	f002 fbce 	bl	30dba <abort>
  for (int i = 0; i < dims_count; ++i) {
   2e61e:	2500      	movs	r5, #0
   2e620:	45a8      	cmp	r8, r5
   2e622:	dd0c      	ble.n	2e63e <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0x3a>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   2e624:	4629      	mov	r1, r5
   2e626:	4620      	mov	r0, r4
   2e628:	f7f8 ffce 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2e62c:	4629      	mov	r1, r5
   2e62e:	4682      	mov	sl, r0
   2e630:	4648      	mov	r0, r9
   2e632:	f7f8 ffc9 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2e636:	4582      	cmp	sl, r0
   2e638:	d1ef      	bne.n	2e61a <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0x16>
  for (int i = 0; i < dims_count; ++i) {
   2e63a:	3501      	adds	r5, #1
   2e63c:	e7f0      	b.n	2e620 <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0x1c>
    for (int i = 0; i < size_; i++) {
   2e63e:	2300      	movs	r3, #0
    int buffer_size = 1;
   2e640:	2001      	movs	r0, #1
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   2e642:	f1b8 0f05 	cmp.w	r8, #5
   2e646:	bfcc      	ite	gt
   2e648:	6864      	ldrgt	r4, [r4, #4]
   2e64a:	3404      	addle	r4, #4
    for (int i = 0; i < size_; i++) {
   2e64c:	4598      	cmp	r8, r3
   2e64e:	dc24      	bgt.n	2e69a <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0x96>
   2e650:	4633      	mov	r3, r6
   2e652:	4639      	mov	r1, r7
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
  for (int i = 0; i < flat_size; ++i) {
   2e654:	2200      	movs	r2, #0
  if ((diff < 0.5f) ||
   2e656:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    return floor_val = floor_val + 1.0f;
   2e65a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  for (int i = 0; i < flat_size; ++i) {
   2e65e:	4282      	cmp	r2, r0
   2e660:	da20      	bge.n	2e6a4 <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0xa0>
    // Note that this implementation matches that of tensorFlow tf.round
    // and corresponds to the bankers rounding method.
    // cfenv (for fesetround) is not yet supported universally on Android, so
    // using a work around.
    output_data[i] = RoundToNearest(input_data[i]);
   2e662:	ecb1 7a01 	vldmia	r1!, {s14}
  { return __builtin_floorf(__x); }
   2e666:	fefb 7a47 	vrintm.f32	s15, s14
  auto diff = value - floor_val;
   2e66a:	ee37 7a67 	vsub.f32	s14, s14, s15
  if ((diff < 0.5f) ||
   2e66e:	eeb4 7ae6 	vcmpe.f32	s14, s13
   2e672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2e676:	d40c      	bmi.n	2e692 <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0x8e>
   2e678:	eeb4 7a66 	vcmp.f32	s14, s13
   2e67c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2e680:	d105      	bne.n	2e68e <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0x8a>
      ((diff == 0.5f) && (static_cast<int>(floor_val) % 2 == 0))) {
   2e682:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   2e686:	ee17 4a10 	vmov	r4, s14
   2e68a:	07e4      	lsls	r4, r4, #31
   2e68c:	d501      	bpl.n	2e692 <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0x8e>
    return floor_val = floor_val + 1.0f;
   2e68e:	ee77 7a86 	vadd.f32	s15, s15, s12
    output_data[i] = RoundToNearest(input_data[i]);
   2e692:	ece3 7a01 	vstmia	r3!, {s15}
  for (int i = 0; i < flat_size; ++i) {
   2e696:	3201      	adds	r2, #1
   2e698:	e7e1      	b.n	2e65e <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0x5a>
      buffer_size *= dims_data[i];
   2e69a:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   2e69e:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   2e6a0:	4350      	muls	r0, r2
    for (int i = 0; i < size_; i++) {
   2e6a2:	e7d3      	b.n	2e64c <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0x48>
  }
}
   2e6a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002e6a8 <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->inputs->data[index]];
   2e6a8:	680b      	ldr	r3, [r1, #0]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   2e6aa:	b530      	push	{r4, r5, lr}
   2e6ac:	685a      	ldr	r2, [r3, #4]
  return &context->tensors[node->outputs->data[index]];
   2e6ae:	684b      	ldr	r3, [r1, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   2e6b0:	6884      	ldr	r4, [r0, #8]
   2e6b2:	685d      	ldr	r5, [r3, #4]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   2e6b4:	b08d      	sub	sp, #52	; 0x34
   2e6b6:	eb04 1585 	add.w	r5, r4, r5, lsl #6
  if (tensor == nullptr) {
   2e6ba:	eb14 1482 	adds.w	r4, r4, r2, lsl #6
   2e6be:	d111      	bne.n	2e6e4 <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0x3c>
  RuntimeShape() : size_(0) {}
   2e6c0:	9400      	str	r4, [sp, #0]
   2e6c2:	b9cd      	cbnz	r5, 2e6f8 <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0x50>
   2e6c4:	9506      	str	r5, [sp, #24]
  reference_ops::Round(GetTensorShape(input), GetTensorData<float>(input),
   2e6c6:	462b      	mov	r3, r5
   2e6c8:	4621      	mov	r1, r4
   2e6ca:	aa06      	add	r2, sp, #24
   2e6cc:	4668      	mov	r0, sp
   2e6ce:	f7ff ff99 	bl	2e604 <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf>
                       GetTensorShape(output), GetTensorData<float>(output));
   2e6d2:	a806      	add	r0, sp, #24
   2e6d4:	f7f8 ff6d 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Round(GetTensorShape(input), GetTensorData<float>(input),
   2e6d8:	4668      	mov	r0, sp
   2e6da:	f7f8 ff6a 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   2e6de:	2000      	movs	r0, #0
   2e6e0:	b00d      	add	sp, #52	; 0x34
   2e6e2:	bd30      	pop	{r4, r5, pc}
  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
   2e6e4:	2300      	movs	r3, #0
  const int dims_size = dims->size;
   2e6e6:	68a2      	ldr	r2, [r4, #8]
    ReplaceWith(dimensions_count, dims_data);
   2e6e8:	4668      	mov	r0, sp
   2e6ea:	f852 1b04 	ldr.w	r1, [r2], #4
  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
   2e6ee:	9300      	str	r3, [sp, #0]
    ReplaceWith(dimensions_count, dims_data);
   2e6f0:	f7f9 ff65 	bl	285be <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   2e6f4:	6864      	ldr	r4, [r4, #4]
   2e6f6:	e7e4      	b.n	2e6c2 <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0x1a>
  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
   2e6f8:	2300      	movs	r3, #0
  const int dims_size = dims->size;
   2e6fa:	68aa      	ldr	r2, [r5, #8]
    ReplaceWith(dimensions_count, dims_data);
   2e6fc:	a806      	add	r0, sp, #24
   2e6fe:	f852 1b04 	ldr.w	r1, [r2], #4
  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
   2e702:	9306      	str	r3, [sp, #24]
    ReplaceWith(dimensions_count, dims_data);
   2e704:	f7f9 ff5b 	bl	285be <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   2e708:	686d      	ldr	r5, [r5, #4]
   2e70a:	e7dc      	b.n	2e6c6 <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0x1e>

0002e70c <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>:
                  const SoftmaxParams& op_data) {
   2e70c:	b570      	push	{r4, r5, r6, lr}
   2e70e:	4604      	mov	r4, r0
   2e710:	b08e      	sub	sp, #56	; 0x38
   2e712:	460d      	mov	r5, r1
      op_data, GetTensorShape(input), GetTensorData<float>(input),
   2e714:	4601      	mov	r1, r0
   2e716:	a802      	add	r0, sp, #8
                  const SoftmaxParams& op_data) {
   2e718:	4616      	mov	r6, r2
      op_data, GetTensorShape(input), GetTensorData<float>(input),
   2e71a:	f7f8 ff8f 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   2e71e:	b104      	cbz	r4, 2e722 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x16>
   2e720:	6864      	ldr	r4, [r4, #4]
      GetTensorShape(output), GetTensorData<float>(output));
   2e722:	4629      	mov	r1, r5
   2e724:	a808      	add	r0, sp, #32
   2e726:	f7f8 ff89 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   2e72a:	b105      	cbz	r5, 2e72e <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x22>
   2e72c:	686d      	ldr	r5, [r5, #4]
  tflite::reference_ops::Softmax(
   2e72e:	4622      	mov	r2, r4
   2e730:	ab08      	add	r3, sp, #32
   2e732:	a902      	add	r1, sp, #8
   2e734:	4630      	mov	r0, r6
   2e736:	9500      	str	r5, [sp, #0]
   2e738:	f7ef fcca 	bl	1e0d0 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
      GetTensorShape(output), GetTensorData<float>(output));
   2e73c:	a808      	add	r0, sp, #32
   2e73e:	f7f8 ff38 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
      op_data, GetTensorShape(input), GetTensorData<float>(input),
   2e742:	a802      	add	r0, sp, #8
   2e744:	f7f8 ff35 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   2e748:	b00e      	add	sp, #56	; 0x38
   2e74a:	bd70      	pop	{r4, r5, r6, pc}

0002e74c <_ZN6tflite13GetReciprocalEiiPi>:
                           int* num_bits_over_unit) {
   2e74c:	b508      	push	{r3, lr}
  return integer_input ? __builtin_clz(integer_input)
   2e74e:	fab0 f380 	clz	r3, r0
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
   2e752:	1ac9      	subs	r1, r1, r3
      static_cast<int32>((static_cast<uint32>(x) << headroom_plus_one) -
   2e754:	4098      	lsls	r0, r3
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
   2e756:	6011      	str	r1, [r2, #0]
          gemmlowp::FixedPoint<int32, 0>::FromRaw(shifted_sum_minus_one));
   2e758:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
   2e75c:	f7ec ffaa 	bl	1b6b4 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>
}
   2e760:	bd08      	pop	{r3, pc}

0002e762 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
   2e762:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e766:	460c      	mov	r4, r1
   2e768:	b08d      	sub	sp, #52	; 0x34
   2e76a:	9203      	str	r2, [sp, #12]
   2e76c:	461a      	mov	r2, r3
  const int32 input_beta_left_shift = params.input_left_shift;
   2e76e:	e9d0 b302 	ldrd	fp, r3, [r0, #8]
   2e772:	9300      	str	r3, [sp, #0]
  const int diff_min = params.diff_min;
   2e774:	6983      	ldr	r3, [r0, #24]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   2e776:	4620      	mov	r0, r4
  const int diff_min = params.diff_min;
   2e778:	9301      	str	r3, [sp, #4]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   2e77a:	680b      	ldr	r3, [r1, #0]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   2e77c:	9205      	str	r2, [sp, #20]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   2e77e:	3b01      	subs	r3, #1
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   2e780:	4619      	mov	r1, r3
   2e782:	9304      	str	r3, [sp, #16]
   2e784:	f7fd fa97 	bl	2bcb6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   2e788:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   2e78c:	9002      	str	r0, [sp, #8]
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   2e78e:	4619      	mov	r1, r3
   2e790:	4620      	mov	r0, r4
   2e792:	f7fb fdc3 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
   2e796:	2400      	movs	r4, #0
   2e798:	4605      	mov	r5, r0
  for (int i = 0; i < outer_size; ++i) {
   2e79a:	46a0      	mov	r8, r4
    InputT max_in_row = std::numeric_limits<InputT>::min();
   2e79c:	46a1      	mov	r9, r4
  for (int i = 0; i < outer_size; ++i) {
   2e79e:	9b02      	ldr	r3, [sp, #8]
   2e7a0:	4598      	cmp	r8, r3
   2e7a2:	da71      	bge.n	2e888 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x126>
   2e7a4:	9b03      	ldr	r3, [sp, #12]
    for (int c = 0; c < depth; ++c) {
   2e7a6:	2200      	movs	r2, #0
   2e7a8:	191f      	adds	r7, r3, r4
    InputT max_in_row = std::numeric_limits<InputT>::min();
   2e7aa:	4639      	mov	r1, r7
   2e7ac:	f88d 901f 	strb.w	r9, [sp, #31]
    for (int c = 0; c < depth; ++c) {
   2e7b0:	42aa      	cmp	r2, r5
   2e7b2:	da0e      	bge.n	2e7d2 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x70>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
   2e7b4:	460b      	mov	r3, r1
      if (__a < __b)
   2e7b6:	f89d 001f 	ldrb.w	r0, [sp, #31]
   2e7ba:	781e      	ldrb	r6, [r3, #0]
   2e7bc:	3101      	adds	r1, #1
   2e7be:	4286      	cmp	r6, r0
      return __a;
   2e7c0:	f10d 001f 	add.w	r0, sp, #31
   2e7c4:	bf98      	it	ls
   2e7c6:	4603      	movls	r3, r0
   2e7c8:	781b      	ldrb	r3, [r3, #0]
    for (int c = 0; c < depth; ++c) {
   2e7ca:	3201      	adds	r2, #1
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
   2e7cc:	f88d 301f 	strb.w	r3, [sp, #31]
    for (int c = 0; c < depth; ++c) {
   2e7d0:	e7ee      	b.n	2e7b0 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
   2e7d2:	2600      	movs	r6, #0
   2e7d4:	463b      	mov	r3, r7
    for (int c = 0; c < depth; ++c) {
   2e7d6:	46b2      	mov	sl, r6
   2e7d8:	45aa      	cmp	sl, r5
   2e7da:	da17      	bge.n	2e80c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xaa>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
   2e7dc:	f89d 201f 	ldrb.w	r2, [sp, #31]
   2e7e0:	f813 0b01 	ldrb.w	r0, [r3], #1
      int32 input_diff =
   2e7e4:	1a80      	subs	r0, r0, r2
      if (input_diff >= diff_min) {
   2e7e6:	9a01      	ldr	r2, [sp, #4]
   2e7e8:	4282      	cmp	r2, r0
   2e7ea:	dc0c      	bgt.n	2e806 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa4>
   2e7ec:	9304      	str	r3, [sp, #16]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
   2e7ee:	9b00      	ldr	r3, [sp, #0]
   2e7f0:	4659      	mov	r1, fp
   2e7f2:	4098      	lsls	r0, r3
   2e7f4:	f7ec fcee 	bl	1b1d4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
   2e7f8:	f7ef fd06 	bl	1e208 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
   2e7fc:	210c      	movs	r1, #12
   2e7fe:	f7ec fd21 	bl	1b244 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return a + b;
   2e802:	9b04      	ldr	r3, [sp, #16]
   2e804:	4406      	add	r6, r0
    for (int c = 0; c < depth; ++c) {
   2e806:	f10a 0a01 	add.w	sl, sl, #1
   2e80a:	e7e5      	b.n	2e7d8 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x76>
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
   2e80c:	4630      	mov	r0, r6
   2e80e:	210c      	movs	r1, #12
   2e810:	aa08      	add	r2, sp, #32
   2e812:	f7ff ff9b 	bl	2e74c <_ZN6tflite13GetReciprocalEiiPi>
   2e816:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2e818:	4682      	mov	sl, r0
   2e81a:	191e      	adds	r6, r3, r4
    for (int c = 0; c < depth; ++c) {
   2e81c:	2300      	movs	r3, #0
   2e81e:	42ab      	cmp	r3, r5
   2e820:	da2e      	bge.n	2e880 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x11e>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
   2e822:	f89d 101f 	ldrb.w	r1, [sp, #31]
   2e826:	f817 0b01 	ldrb.w	r0, [r7], #1
      int32 input_diff =
   2e82a:	1a40      	subs	r0, r0, r1
      if (input_diff >= diff_min) {
   2e82c:	9901      	ldr	r1, [sp, #4]
   2e82e:	4281      	cmp	r1, r0
   2e830:	dc23      	bgt.n	2e87a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x118>
   2e832:	9304      	str	r3, [sp, #16]
   2e834:	9b00      	ldr	r3, [sp, #0]
   2e836:	4659      	mov	r1, fp
   2e838:	4098      	lsls	r0, r3
   2e83a:	f7ec fccb 	bl	1b1d4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
   2e83e:	f7ef fce3 	bl	1e208 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
   2e842:	4601      	mov	r1, r0
            (shifted_scale * exp_in_0).raw(),
   2e844:	4650      	mov	r0, sl
   2e846:	f7fd fc99 	bl	2c17c <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
   2e84a:	9908      	ldr	r1, [sp, #32]
   2e84c:	3117      	adds	r1, #23
   2e84e:	f7ec fcf9 	bl	1b244 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
   2e852:	23ff      	movs	r3, #255	; 0xff
      if (__b < __a)
   2e854:	4298      	cmp	r0, r3
	return __b;
   2e856:	bfcc      	ite	gt
   2e858:	a90a      	addgt	r1, sp, #40	; 0x28
      return __a;
   2e85a:	a909      	addle	r1, sp, #36	; 0x24
   2e85c:	930a      	str	r3, [sp, #40]	; 0x28
        const int32 shifted_output =
   2e85e:	9009      	str	r0, [sp, #36]	; 0x24
      if (__a < __b)
   2e860:	6808      	ldr	r0, [r1, #0]
      if (__b < __a)
   2e862:	aa0b      	add	r2, sp, #44	; 0x2c
      if (__a < __b)
   2e864:	2800      	cmp	r0, #0
	return __b;
   2e866:	bfb8      	it	lt
   2e868:	4611      	movlt	r1, r2
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
   2e86a:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
   2e86e:	6809      	ldr	r1, [r1, #0]
      if (__b < __a)
   2e870:	9b04      	ldr	r3, [sp, #16]
   2e872:	7031      	strb	r1, [r6, #0]
    for (int c = 0; c < depth; ++c) {
   2e874:	3301      	adds	r3, #1
   2e876:	3601      	adds	r6, #1
   2e878:	e7d1      	b.n	2e81e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xbc>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
   2e87a:	f886 9000 	strb.w	r9, [r6]
   2e87e:	e7f9      	b.n	2e874 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x112>
  for (int i = 0; i < outer_size; ++i) {
   2e880:	f108 0801 	add.w	r8, r8, #1
   2e884:	442c      	add	r4, r5
   2e886:	e78a      	b.n	2e79e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3c>
}
   2e888:	b00d      	add	sp, #52	; 0x34
   2e88a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002e88e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
   2e88e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e892:	460c      	mov	r4, r1
   2e894:	b08d      	sub	sp, #52	; 0x34
   2e896:	9203      	str	r2, [sp, #12]
   2e898:	461a      	mov	r2, r3
  const int32 input_beta_left_shift = params.input_left_shift;
   2e89a:	e9d0 b302 	ldrd	fp, r3, [r0, #8]
   2e89e:	9300      	str	r3, [sp, #0]
  const int diff_min = params.diff_min;
   2e8a0:	6983      	ldr	r3, [r0, #24]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   2e8a2:	4620      	mov	r0, r4
  const int diff_min = params.diff_min;
   2e8a4:	9301      	str	r3, [sp, #4]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   2e8a6:	680b      	ldr	r3, [r1, #0]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   2e8a8:	9205      	str	r2, [sp, #20]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   2e8aa:	3b01      	subs	r3, #1
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   2e8ac:	4619      	mov	r1, r3
   2e8ae:	9304      	str	r3, [sp, #16]
   2e8b0:	f7fd fa01 	bl	2bcb6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   2e8b4:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   2e8b8:	9002      	str	r0, [sp, #8]
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   2e8ba:	4619      	mov	r1, r3
   2e8bc:	4620      	mov	r0, r4
   2e8be:	f7fb fd2d 	bl	2a31c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
   2e8c2:	2500      	movs	r5, #0
   2e8c4:	4604      	mov	r4, r0
  for (int i = 0; i < outer_size; ++i) {
   2e8c6:	46a8      	mov	r8, r5
   2e8c8:	9b02      	ldr	r3, [sp, #8]
   2e8ca:	4598      	cmp	r8, r3
   2e8cc:	da74      	bge.n	2e9b8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x12a>
    InputT max_in_row = std::numeric_limits<InputT>::min();
   2e8ce:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   2e8d2:	f88d 301f 	strb.w	r3, [sp, #31]
   2e8d6:	9b03      	ldr	r3, [sp, #12]
    for (int c = 0; c < depth; ++c) {
   2e8d8:	2200      	movs	r2, #0
   2e8da:	195f      	adds	r7, r3, r5
    InputT max_in_row = std::numeric_limits<InputT>::min();
   2e8dc:	4639      	mov	r1, r7
    for (int c = 0; c < depth; ++c) {
   2e8de:	42a2      	cmp	r2, r4
   2e8e0:	da10      	bge.n	2e904 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x76>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
   2e8e2:	460b      	mov	r3, r1
      if (__a < __b)
   2e8e4:	f99d 001f 	ldrsb.w	r0, [sp, #31]
   2e8e8:	f993 6000 	ldrsb.w	r6, [r3]
   2e8ec:	3101      	adds	r1, #1
   2e8ee:	4286      	cmp	r6, r0
      return __a;
   2e8f0:	f10d 001f 	add.w	r0, sp, #31
   2e8f4:	bfd8      	it	le
   2e8f6:	4603      	movle	r3, r0
   2e8f8:	f993 3000 	ldrsb.w	r3, [r3]
    for (int c = 0; c < depth; ++c) {
   2e8fc:	3201      	adds	r2, #1
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
   2e8fe:	f88d 301f 	strb.w	r3, [sp, #31]
    for (int c = 0; c < depth; ++c) {
   2e902:	e7ec      	b.n	2e8de <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x50>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
   2e904:	2600      	movs	r6, #0
   2e906:	46ba      	mov	sl, r7
    for (int c = 0; c < depth; ++c) {
   2e908:	46b1      	mov	r9, r6
   2e90a:	45a1      	cmp	r9, r4
   2e90c:	da15      	bge.n	2e93a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xac>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
   2e90e:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   2e912:	f91a 0b01 	ldrsb.w	r0, [sl], #1
      int32 input_diff =
   2e916:	1ac0      	subs	r0, r0, r3
      if (input_diff >= diff_min) {
   2e918:	9b01      	ldr	r3, [sp, #4]
   2e91a:	4283      	cmp	r3, r0
   2e91c:	dc0a      	bgt.n	2e934 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa6>
   2e91e:	9b00      	ldr	r3, [sp, #0]
   2e920:	4659      	mov	r1, fp
   2e922:	4098      	lsls	r0, r3
   2e924:	f7ec fc56 	bl	1b1d4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
   2e928:	f7ef fc6e 	bl	1e208 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
   2e92c:	210c      	movs	r1, #12
   2e92e:	f7ec fc89 	bl	1b244 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return a + b;
   2e932:	4406      	add	r6, r0
    for (int c = 0; c < depth; ++c) {
   2e934:	f109 0901 	add.w	r9, r9, #1
   2e938:	e7e7      	b.n	2e90a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x7c>
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
   2e93a:	4630      	mov	r0, r6
   2e93c:	210c      	movs	r1, #12
   2e93e:	aa08      	add	r2, sp, #32
   2e940:	f7ff ff04 	bl	2e74c <_ZN6tflite13GetReciprocalEiiPi>
    for (int c = 0; c < depth; ++c) {
   2e944:	f04f 0900 	mov.w	r9, #0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
   2e948:	4682      	mov	sl, r0
   2e94a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2e94c:	195e      	adds	r6, r3, r5
    for (int c = 0; c < depth; ++c) {
   2e94e:	45a1      	cmp	r9, r4
   2e950:	da2e      	bge.n	2e9b0 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x122>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
   2e952:	f99d 101f 	ldrsb.w	r1, [sp, #31]
   2e956:	f917 0b01 	ldrsb.w	r0, [r7], #1
      int32 input_diff =
   2e95a:	1a40      	subs	r0, r0, r1
      if (input_diff >= diff_min) {
   2e95c:	9901      	ldr	r1, [sp, #4]
   2e95e:	4281      	cmp	r1, r0
   2e960:	dc23      	bgt.n	2e9aa <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x11c>
   2e962:	9b00      	ldr	r3, [sp, #0]
   2e964:	4659      	mov	r1, fp
   2e966:	4098      	lsls	r0, r3
   2e968:	f7ec fc34 	bl	1b1d4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
   2e96c:	f7ef fc4c 	bl	1e208 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
   2e970:	4601      	mov	r1, r0
            (shifted_scale * exp_in_0).raw(),
   2e972:	4650      	mov	r0, sl
   2e974:	f7fd fc02 	bl	2c17c <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
   2e978:	9908      	ldr	r1, [sp, #32]
   2e97a:	3117      	adds	r1, #23
   2e97c:	f7ec fc62 	bl	1b244 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
   2e980:	237f      	movs	r3, #127	; 0x7f
      if (__b < __a)
   2e982:	f06f 027f 	mvn.w	r2, #127	; 0x7f
            unsat_output +
   2e986:	3880      	subs	r0, #128	; 0x80
   2e988:	4298      	cmp	r0, r3
	return __b;
   2e98a:	bfcc      	ite	gt
   2e98c:	a90a      	addgt	r1, sp, #40	; 0x28
      return __a;
   2e98e:	a909      	addle	r1, sp, #36	; 0x24
        const int32 shifted_output =
   2e990:	9009      	str	r0, [sp, #36]	; 0x24
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
   2e992:	930a      	str	r3, [sp, #40]	; 0x28
      if (__a < __b)
   2e994:	6808      	ldr	r0, [r1, #0]
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
   2e996:	920b      	str	r2, [sp, #44]	; 0x2c
   2e998:	3080      	adds	r0, #128	; 0x80
	return __b;
   2e99a:	bfb8      	it	lt
   2e99c:	a90b      	addlt	r1, sp, #44	; 0x2c
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
   2e99e:	6809      	ldr	r1, [r1, #0]
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
   2e9a0:	7031      	strb	r1, [r6, #0]
    for (int c = 0; c < depth; ++c) {
   2e9a2:	f109 0901 	add.w	r9, r9, #1
   2e9a6:	3601      	adds	r6, #1
   2e9a8:	e7d1      	b.n	2e94e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xc0>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
   2e9aa:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   2e9ae:	e7f7      	b.n	2e9a0 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x112>
  for (int i = 0; i < outer_size; ++i) {
   2e9b0:	f108 0801 	add.w	r8, r8, #1
   2e9b4:	4425      	add	r5, r4
   2e9b6:	e787      	b.n	2e8c8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3a>
}
   2e9b8:	b00d      	add	sp, #52	; 0x34
   2e9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002e9be <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>:
                      const SoftmaxParams& op_data) {
   2e9be:	b570      	push	{r4, r5, r6, lr}
  if (input->type == kTfLiteUInt8) {
   2e9c0:	7803      	ldrb	r3, [r0, #0]
                      const SoftmaxParams& op_data) {
   2e9c2:	4605      	mov	r5, r0
  if (input->type == kTfLiteUInt8) {
   2e9c4:	2b03      	cmp	r3, #3
                      const SoftmaxParams& op_data) {
   2e9c6:	460c      	mov	r4, r1
   2e9c8:	4616      	mov	r6, r2
   2e9ca:	b090      	sub	sp, #64	; 0x40
  if (input->type == kTfLiteUInt8) {
   2e9cc:	d11a      	bne.n	2ea04 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x46>
        op_data, GetTensorShape(input), GetTensorData<uint8_t>(input),
   2e9ce:	4601      	mov	r1, r0
   2e9d0:	a804      	add	r0, sp, #16
   2e9d2:	f7f8 fe33 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   2e9d6:	686a      	ldr	r2, [r5, #4]
        GetTensorShape(output), GetTensorData<uint8_t>(output));
   2e9d8:	4621      	mov	r1, r4
   2e9da:	a80a      	add	r0, sp, #40	; 0x28
   2e9dc:	9203      	str	r2, [sp, #12]
   2e9de:	f7f8 fe2d 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   2e9e2:	9a03      	ldr	r2, [sp, #12]
   2e9e4:	b104      	cbz	r4, 2e9e8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2a>
   2e9e6:	6864      	ldr	r4, [r4, #4]
    tflite::reference_ops::Softmax(
   2e9e8:	4630      	mov	r0, r6
   2e9ea:	9400      	str	r4, [sp, #0]
   2e9ec:	ab0a      	add	r3, sp, #40	; 0x28
   2e9ee:	a904      	add	r1, sp, #16
   2e9f0:	f7ff feb7 	bl	2e762 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          GetTensorShape(output), GetTensorData<int8_t>(output));
   2e9f4:	a80a      	add	r0, sp, #40	; 0x28
   2e9f6:	f7f8 fddc 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
   2e9fa:	a804      	add	r0, sp, #16
   2e9fc:	f7f8 fdd9 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   2ea00:	b010      	add	sp, #64	; 0x40
   2ea02:	bd70      	pop	{r4, r5, r6, pc}
    if (output->type == kTfLiteInt16) {
   2ea04:	780b      	ldrb	r3, [r1, #0]
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
   2ea06:	4601      	mov	r1, r0
    if (output->type == kTfLiteInt16) {
   2ea08:	2b07      	cmp	r3, #7
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
   2ea0a:	a804      	add	r0, sp, #16
    if (output->type == kTfLiteInt16) {
   2ea0c:	d110      	bne.n	2ea30 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x72>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
   2ea0e:	f7f8 fe15 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   2ea12:	686a      	ldr	r2, [r5, #4]
          GetTensorShape(output), GetTensorData<int16_t>(output));
   2ea14:	4621      	mov	r1, r4
   2ea16:	a80a      	add	r0, sp, #40	; 0x28
   2ea18:	9203      	str	r2, [sp, #12]
   2ea1a:	f7f8 fe0f 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
   2ea1e:	6863      	ldr	r3, [r4, #4]
   2ea20:	4630      	mov	r0, r6
   2ea22:	9300      	str	r3, [sp, #0]
   2ea24:	9a03      	ldr	r2, [sp, #12]
   2ea26:	ab0a      	add	r3, sp, #40	; 0x28
   2ea28:	a904      	add	r1, sp, #16
   2ea2a:	f7ef fc87 	bl	1e33c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
   2ea2e:	e7e1      	b.n	2e9f4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x36>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
   2ea30:	f7f8 fe04 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2ea34:	686a      	ldr	r2, [r5, #4]
          GetTensorShape(output), GetTensorData<int8_t>(output));
   2ea36:	4621      	mov	r1, r4
   2ea38:	a80a      	add	r0, sp, #40	; 0x28
   2ea3a:	9203      	str	r2, [sp, #12]
   2ea3c:	f7f8 fdfe 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
   2ea40:	6863      	ldr	r3, [r4, #4]
   2ea42:	4630      	mov	r0, r6
   2ea44:	9300      	str	r3, [sp, #0]
   2ea46:	9a03      	ldr	r2, [sp, #12]
   2ea48:	ab0a      	add	r3, sp, #40	; 0x28
   2ea4a:	a904      	add	r1, sp, #16
   2ea4c:	f7ff ff1f 	bl	2e88e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
   2ea50:	e7d0      	b.n	2e9f4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x36>

0002ea52 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>:
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   2ea52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const int output_count = NumOutputs(node);
   2ea56:	f8d1 c004 	ldr.w	ip, [r1, #4]
  const TfLiteIntArray* input_dims = input->dims;
   2ea5a:	6894      	ldr	r4, [r2, #8]
  const TfLiteTensor* output0 = GetOutput(context, node, 0);
   2ea5c:	6881      	ldr	r1, [r0, #8]
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   2ea5e:	b087      	sub	sp, #28
  const int split_dimensions = input_dims->size;
   2ea60:	f8d4 9000 	ldr.w	r9, [r4]
  const TfLiteTensor* output0 = GetOutput(context, node, 0);
   2ea64:	9103      	str	r1, [sp, #12]
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   2ea66:	2b00      	cmp	r3, #0
   2ea68:	f8dc 1004 	ldr.w	r1, [ip, #4]
  const TfLiteIntArray* output_dims = output0->dims;
   2ea6c:	9803      	ldr	r0, [sp, #12]
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   2ea6e:	bfb8      	it	lt
   2ea70:	444b      	addlt	r3, r9
  const TfLiteIntArray* output_dims = output0->dims;
   2ea72:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  TFLITE_DCHECK_LT(axis, split_dimensions);
   2ea76:	454b      	cmp	r3, r9
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   2ea78:	f8dc e000 	ldr.w	lr, [ip]
  const TfLiteIntArray* output_dims = output0->dims;
   2ea7c:	6889      	ldr	r1, [r1, #8]
  TFLITE_DCHECK_LT(axis, split_dimensions);
   2ea7e:	db01      	blt.n	2ea84 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x32>
   2ea80:	f002 f99b 	bl	30dba <abort>
  TFLITE_DCHECK_EQ(output_dims->size, split_dimensions);
   2ea84:	6808      	ldr	r0, [r1, #0]
   2ea86:	4548      	cmp	r0, r9
   2ea88:	d1fa      	bne.n	2ea80 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2e>
  int64_t split_size = output_dims->data[axis] * output_count;
   2ea8a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   2ea8e:	f8d1 8004 	ldr.w	r8, [r1, #4]
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   2ea92:	eb04 0183 	add.w	r1, r4, r3, lsl #2
  int64_t split_size = output_dims->data[axis] * output_count;
   2ea96:	fb0e f008 	mul.w	r0, lr, r8
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   2ea9a:	6849      	ldr	r1, [r1, #4]
   2ea9c:	4288      	cmp	r0, r1
   2ea9e:	d1ef      	bne.n	2ea80 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2e>
  int64_t outer_size = 1;
   2eaa0:	2001      	movs	r0, #1
   2eaa2:	2100      	movs	r1, #0
   2eaa4:	3404      	adds	r4, #4
   2eaa6:	46a2      	mov	sl, r4
  for (int i = 0; i < axis; ++i) {
   2eaa8:	2600      	movs	r6, #0
  int64_t outer_size = 1;
   2eaaa:	e9cd 0100 	strd	r0, r1, [sp]
  for (int i = 0; i < axis; ++i) {
   2eaae:	429e      	cmp	r6, r3
   2eab0:	da11      	bge.n	2ead6 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x84>
    outer_size *= input_dims->data[i];
   2eab2:	f85a 7b04 	ldr.w	r7, [sl], #4
   2eab6:	9d00      	ldr	r5, [sp, #0]
   2eab8:	17f9      	asrs	r1, r7, #31
   2eaba:	4369      	muls	r1, r5
   2eabc:	9801      	ldr	r0, [sp, #4]
  for (int i = 0; i < axis; ++i) {
   2eabe:	3601      	adds	r6, #1
    outer_size *= input_dims->data[i];
   2eac0:	fb07 1500 	mla	r5, r7, r0, r1
   2eac4:	9800      	ldr	r0, [sp, #0]
   2eac6:	fba0 0107 	umull	r0, r1, r0, r7
   2eaca:	e9cd 0100 	strd	r0, r1, [sp]
   2eace:	9801      	ldr	r0, [sp, #4]
   2ead0:	1829      	adds	r1, r5, r0
   2ead2:	9101      	str	r1, [sp, #4]
  for (int i = 0; i < axis; ++i) {
   2ead4:	e7eb      	b.n	2eaae <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x5c>
  int64_t base_inner_size = 1;
   2ead6:	2001      	movs	r0, #1
   2ead8:	2100      	movs	r1, #0
  for (int i = axis + 1; i < split_dimensions; ++i) {
   2eada:	3301      	adds	r3, #1
   2eadc:	454b      	cmp	r3, r9
   2eade:	d00c      	beq.n	2eafa <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xa8>
    base_inner_size *= input_dims->data[i];
   2eae0:	f854 a023 	ldr.w	sl, [r4, r3, lsl #2]
  for (int i = axis + 1; i < split_dimensions; ++i) {
   2eae4:	3301      	adds	r3, #1
    base_inner_size *= input_dims->data[i];
   2eae6:	4656      	mov	r6, sl
   2eae8:	17f7      	asrs	r7, r6, #31
   2eaea:	fb00 f607 	mul.w	r6, r0, r7
   2eaee:	fb0a 6601 	mla	r6, sl, r1, r6
   2eaf2:	fba0 010a 	umull	r0, r1, r0, sl
   2eaf6:	4431      	add	r1, r6
  for (int i = axis + 1; i < split_dimensions; ++i) {
   2eaf8:	e7f0      	b.n	2eadc <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x8a>
      input_ptr += copy_size;
   2eafa:	2100      	movs	r1, #0
      const int copy_size = output_dims->data[axis] * base_inner_size;
   2eafc:	fb00 f308 	mul.w	r3, r0, r8
  for (int k = 0; k < outer_size; ++k) {
   2eb00:	4608      	mov	r0, r1
   2eb02:	6854      	ldr	r4, [r2, #4]
      input_ptr += copy_size;
   2eb04:	ea4f 0983 	mov.w	r9, r3, lsl #2
   2eb08:	ea2e 72ee 	bic.w	r2, lr, lr, asr #31
   2eb0c:	fb09 f202 	mul.w	r2, r9, r2
   2eb10:	9204      	str	r2, [sp, #16]
  for (int k = 0; k < outer_size; ++k) {
   2eb12:	e9dd ab00 	ldrd	sl, fp, [sp]
   2eb16:	17c7      	asrs	r7, r0, #31
   2eb18:	4550      	cmp	r0, sl
   2eb1a:	eb77 020b 	sbcs.w	r2, r7, fp
   2eb1e:	da24      	bge.n	2eb6a <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x118>
   2eb20:	4627      	mov	r7, r4
    for (int i = 0; i < output_count; ++i) {
   2eb22:	2600      	movs	r6, #0
   2eb24:	008a      	lsls	r2, r1, #2
   2eb26:	f10c 0a04 	add.w	sl, ip, #4
   2eb2a:	9205      	str	r2, [sp, #20]
   2eb2c:	4576      	cmp	r6, lr
   2eb2e:	da17      	bge.n	2eb60 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x10e>
  return &context->tensors[node->outputs->data[index]];
   2eb30:	46bb      	mov	fp, r7
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   2eb32:	f04f 0800 	mov.w	r8, #0
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   2eb36:	9d03      	ldr	r5, [sp, #12]
   2eb38:	f85a 2b04 	ldr.w	r2, [sl], #4
   2eb3c:	eb15 1282 	adds.w	r2, r5, r2, lsl #6
   2eb40:	bf18      	it	ne
   2eb42:	6852      	ldrne	r2, [r2, #4]
   2eb44:	9d05      	ldr	r5, [sp, #20]
   2eb46:	442a      	add	r2, r5
   2eb48:	4598      	cmp	r8, r3
   2eb4a:	da06      	bge.n	2eb5a <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x108>
   2eb4c:	ecfb 7a01 	vldmia	fp!, {s15}
   2eb50:	f108 0801 	add.w	r8, r8, #1
   2eb54:	ece2 7a01 	vstmia	r2!, {s15}
   2eb58:	e7f6      	b.n	2eb48 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xf6>
      input_ptr += copy_size;
   2eb5a:	444f      	add	r7, r9
    for (int i = 0; i < output_count; ++i) {
   2eb5c:	3601      	adds	r6, #1
   2eb5e:	e7e5      	b.n	2eb2c <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xda>
   2eb60:	9a04      	ldr	r2, [sp, #16]
  for (int k = 0; k < outer_size; ++k) {
   2eb62:	3001      	adds	r0, #1
   2eb64:	4414      	add	r4, r2
   2eb66:	4419      	add	r1, r3
   2eb68:	e7d3      	b.n	2eb12 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xc0>
}
   2eb6a:	2000      	movs	r0, #0
   2eb6c:	b007      	add	sp, #28
   2eb6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002eb72 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>:
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   2eb72:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const TfLiteIntArray* input_dims = input->dims;
   2eb76:	6896      	ldr	r6, [r2, #8]
  const int output_count = NumOutputs(node);
   2eb78:	684c      	ldr	r4, [r1, #4]
  const int split_dimensions = input_dims->size;
   2eb7a:	f8d6 c000 	ldr.w	ip, [r6]
   2eb7e:	6865      	ldr	r5, [r4, #4]
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   2eb80:	2b00      	cmp	r3, #0
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   2eb82:	f8d4 e000 	ldr.w	lr, [r4]
  const TfLiteIntArray* output_dims = output0->dims;
   2eb86:	6884      	ldr	r4, [r0, #8]
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   2eb88:	bfb8      	it	lt
   2eb8a:	4463      	addlt	r3, ip
  const TfLiteIntArray* output_dims = output0->dims;
   2eb8c:	eb04 1485 	add.w	r4, r4, r5, lsl #6
  TFLITE_DCHECK_LT(axis, split_dimensions);
   2eb90:	4563      	cmp	r3, ip
  const TfLiteIntArray* output_dims = output0->dims;
   2eb92:	68a7      	ldr	r7, [r4, #8]
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   2eb94:	9101      	str	r1, [sp, #4]
  TFLITE_DCHECK_LT(axis, split_dimensions);
   2eb96:	db01      	blt.n	2eb9c <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2a>
   2eb98:	f002 f90f 	bl	30dba <abort>
  TFLITE_DCHECK_EQ(output_dims->size, split_dimensions);
   2eb9c:	683c      	ldr	r4, [r7, #0]
   2eb9e:	4564      	cmp	r4, ip
   2eba0:	d1fa      	bne.n	2eb98 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x26>
   2eba2:	eb07 0783 	add.w	r7, r7, r3, lsl #2
  int64_t split_size = output_dims->data[axis] * output_count;
   2eba6:	687c      	ldr	r4, [r7, #4]
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   2eba8:	eb06 0583 	add.w	r5, r6, r3, lsl #2
  int64_t split_size = output_dims->data[axis] * output_count;
   2ebac:	fb04 f40e 	mul.w	r4, r4, lr
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   2ebb0:	686d      	ldr	r5, [r5, #4]
   2ebb2:	42ac      	cmp	r4, r5
   2ebb4:	d1f0      	bne.n	2eb98 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x26>
   2ebb6:	3604      	adds	r6, #4
   2ebb8:	4631      	mov	r1, r6
  for (int i = 0; i < axis; ++i) {
   2ebba:	f04f 0800 	mov.w	r8, #0
  int64_t outer_size = 1;
   2ebbe:	f04f 0a01 	mov.w	sl, #1
   2ebc2:	f04f 0b00 	mov.w	fp, #0
  for (int i = 0; i < axis; ++i) {
   2ebc6:	4598      	cmp	r8, r3
   2ebc8:	da0d      	bge.n	2ebe6 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x74>
    outer_size *= input_dims->data[i];
   2ebca:	f851 9b04 	ldr.w	r9, [r1], #4
  for (int i = 0; i < axis; ++i) {
   2ebce:	f108 0801 	add.w	r8, r8, #1
    outer_size *= input_dims->data[i];
   2ebd2:	464c      	mov	r4, r9
   2ebd4:	17e5      	asrs	r5, r4, #31
   2ebd6:	fb0a f405 	mul.w	r4, sl, r5
   2ebda:	fb09 440b 	mla	r4, r9, fp, r4
   2ebde:	fbaa ab09 	umull	sl, fp, sl, r9
   2ebe2:	44a3      	add	fp, r4
  for (int i = 0; i < axis; ++i) {
   2ebe4:	e7ef      	b.n	2ebc6 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x54>
  int64_t base_inner_size = 1;
   2ebe6:	2401      	movs	r4, #1
   2ebe8:	2500      	movs	r5, #0
  for (int i = axis + 1; i < split_dimensions; ++i) {
   2ebea:	3301      	adds	r3, #1
   2ebec:	4563      	cmp	r3, ip
   2ebee:	d00c      	beq.n	2ec0a <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x98>
    base_inner_size *= input_dims->data[i];
   2ebf0:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
  for (int i = axis + 1; i < split_dimensions; ++i) {
   2ebf4:	3301      	adds	r3, #1
    base_inner_size *= input_dims->data[i];
   2ebf6:	ea4f 79e1 	mov.w	r9, r1, asr #31
   2ebfa:	fb04 f809 	mul.w	r8, r4, r9
   2ebfe:	fb01 8805 	mla	r8, r1, r5, r8
   2ec02:	fba4 4501 	umull	r4, r5, r4, r1
   2ec06:	4445      	add	r5, r8
  for (int i = axis + 1; i < split_dimensions; ++i) {
   2ec08:	e7f0      	b.n	2ebec <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x7a>
  for (int k = 0; k < outer_size; ++k) {
   2ec0a:	2600      	movs	r6, #0
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   2ec0c:	f8d2 c004 	ldr.w	ip, [r2, #4]
   2ec10:	17f3      	asrs	r3, r6, #31
   2ec12:	4556      	cmp	r6, sl
   2ec14:	eb73 030b 	sbcs.w	r3, r3, fp
   2ec18:	da22      	bge.n	2ec60 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xee>
    for (int i = 0; i < output_count; ++i) {
   2ec1a:	f04f 0800 	mov.w	r8, #0
   2ec1e:	45f0      	cmp	r8, lr
   2ec20:	da1c      	bge.n	2ec5c <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xea>
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   2ec22:	f04f 0900 	mov.w	r9, #0
  return &context->tensors[node->outputs->data[index]];
   2ec26:	9b01      	ldr	r3, [sp, #4]
   2ec28:	685b      	ldr	r3, [r3, #4]
   2ec2a:	eb03 0388 	add.w	r3, r3, r8, lsl #2
   2ec2e:	685a      	ldr	r2, [r3, #4]
   2ec30:	6883      	ldr	r3, [r0, #8]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   2ec32:	eb13 1382 	adds.w	r3, r3, r2, lsl #6
      const int copy_size = output_dims->data[axis] * base_inner_size;
   2ec36:	687a      	ldr	r2, [r7, #4]
   2ec38:	bf18      	it	ne
   2ec3a:	685b      	ldrne	r3, [r3, #4]
   2ec3c:	4362      	muls	r2, r4
   2ec3e:	fb02 3306 	mla	r3, r2, r6, r3
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   2ec42:	4591      	cmp	r9, r2
   2ec44:	da06      	bge.n	2ec54 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xe2>
   2ec46:	f81c 1009 	ldrb.w	r1, [ip, r9]
   2ec4a:	f109 0901 	add.w	r9, r9, #1
   2ec4e:	f803 1b01 	strb.w	r1, [r3], #1
   2ec52:	e7f6      	b.n	2ec42 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xd0>
      input_ptr += copy_size;
   2ec54:	4494      	add	ip, r2
    for (int i = 0; i < output_count; ++i) {
   2ec56:	f108 0801 	add.w	r8, r8, #1
   2ec5a:	e7e0      	b.n	2ec1e <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xac>
  for (int k = 0; k < outer_size; ++k) {
   2ec5c:	3601      	adds	r6, #1
   2ec5e:	e7d7      	b.n	2ec10 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x9e>
}
   2ec60:	2000      	movs	r0, #0
   2ec62:	b003      	add	sp, #12
   2ec64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002ec68 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>:
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   2ec68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const TfLiteIntArray* input_dims = input->dims;
   2ec6c:	6896      	ldr	r6, [r2, #8]
  const int output_count = NumOutputs(node);
   2ec6e:	684c      	ldr	r4, [r1, #4]
  const int split_dimensions = input_dims->size;
   2ec70:	f8d6 c000 	ldr.w	ip, [r6]
   2ec74:	6865      	ldr	r5, [r4, #4]
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   2ec76:	2b00      	cmp	r3, #0
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   2ec78:	f8d4 e000 	ldr.w	lr, [r4]
  const TfLiteIntArray* output_dims = output0->dims;
   2ec7c:	6884      	ldr	r4, [r0, #8]
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   2ec7e:	bfb8      	it	lt
   2ec80:	4463      	addlt	r3, ip
  const TfLiteIntArray* output_dims = output0->dims;
   2ec82:	eb04 1485 	add.w	r4, r4, r5, lsl #6
  TFLITE_DCHECK_LT(axis, split_dimensions);
   2ec86:	4563      	cmp	r3, ip
  const TfLiteIntArray* output_dims = output0->dims;
   2ec88:	68a7      	ldr	r7, [r4, #8]
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   2ec8a:	9101      	str	r1, [sp, #4]
  TFLITE_DCHECK_LT(axis, split_dimensions);
   2ec8c:	db01      	blt.n	2ec92 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2a>
   2ec8e:	f002 f894 	bl	30dba <abort>
  TFLITE_DCHECK_EQ(output_dims->size, split_dimensions);
   2ec92:	683c      	ldr	r4, [r7, #0]
   2ec94:	4564      	cmp	r4, ip
   2ec96:	d1fa      	bne.n	2ec8e <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x26>
   2ec98:	eb07 0783 	add.w	r7, r7, r3, lsl #2
  int64_t split_size = output_dims->data[axis] * output_count;
   2ec9c:	687c      	ldr	r4, [r7, #4]
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   2ec9e:	eb06 0583 	add.w	r5, r6, r3, lsl #2
  int64_t split_size = output_dims->data[axis] * output_count;
   2eca2:	fb04 f40e 	mul.w	r4, r4, lr
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   2eca6:	686d      	ldr	r5, [r5, #4]
   2eca8:	42ac      	cmp	r4, r5
   2ecaa:	d1f0      	bne.n	2ec8e <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x26>
   2ecac:	3604      	adds	r6, #4
   2ecae:	4631      	mov	r1, r6
  for (int i = 0; i < axis; ++i) {
   2ecb0:	f04f 0800 	mov.w	r8, #0
  int64_t outer_size = 1;
   2ecb4:	f04f 0a01 	mov.w	sl, #1
   2ecb8:	f04f 0b00 	mov.w	fp, #0
  for (int i = 0; i < axis; ++i) {
   2ecbc:	4598      	cmp	r8, r3
   2ecbe:	da0d      	bge.n	2ecdc <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x74>
    outer_size *= input_dims->data[i];
   2ecc0:	f851 9b04 	ldr.w	r9, [r1], #4
  for (int i = 0; i < axis; ++i) {
   2ecc4:	f108 0801 	add.w	r8, r8, #1
    outer_size *= input_dims->data[i];
   2ecc8:	464c      	mov	r4, r9
   2ecca:	17e5      	asrs	r5, r4, #31
   2eccc:	fb0a f405 	mul.w	r4, sl, r5
   2ecd0:	fb09 440b 	mla	r4, r9, fp, r4
   2ecd4:	fbaa ab09 	umull	sl, fp, sl, r9
   2ecd8:	44a3      	add	fp, r4
  for (int i = 0; i < axis; ++i) {
   2ecda:	e7ef      	b.n	2ecbc <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x54>
  int64_t base_inner_size = 1;
   2ecdc:	2401      	movs	r4, #1
   2ecde:	2500      	movs	r5, #0
  for (int i = axis + 1; i < split_dimensions; ++i) {
   2ece0:	3301      	adds	r3, #1
   2ece2:	4563      	cmp	r3, ip
   2ece4:	d00c      	beq.n	2ed00 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x98>
    base_inner_size *= input_dims->data[i];
   2ece6:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
  for (int i = axis + 1; i < split_dimensions; ++i) {
   2ecea:	3301      	adds	r3, #1
    base_inner_size *= input_dims->data[i];
   2ecec:	ea4f 79e1 	mov.w	r9, r1, asr #31
   2ecf0:	fb04 f809 	mul.w	r8, r4, r9
   2ecf4:	fb01 8805 	mla	r8, r1, r5, r8
   2ecf8:	fba4 4501 	umull	r4, r5, r4, r1
   2ecfc:	4445      	add	r5, r8
  for (int i = axis + 1; i < split_dimensions; ++i) {
   2ecfe:	e7f0      	b.n	2ece2 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x7a>
  for (int k = 0; k < outer_size; ++k) {
   2ed00:	2600      	movs	r6, #0
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   2ed02:	f8d2 c004 	ldr.w	ip, [r2, #4]
   2ed06:	17f3      	asrs	r3, r6, #31
   2ed08:	4556      	cmp	r6, sl
   2ed0a:	eb73 030b 	sbcs.w	r3, r3, fp
   2ed0e:	da22      	bge.n	2ed56 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xee>
    for (int i = 0; i < output_count; ++i) {
   2ed10:	f04f 0800 	mov.w	r8, #0
   2ed14:	45f0      	cmp	r8, lr
   2ed16:	da1c      	bge.n	2ed52 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xea>
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   2ed18:	f04f 0900 	mov.w	r9, #0
  return &context->tensors[node->outputs->data[index]];
   2ed1c:	9b01      	ldr	r3, [sp, #4]
   2ed1e:	685b      	ldr	r3, [r3, #4]
   2ed20:	eb03 0388 	add.w	r3, r3, r8, lsl #2
   2ed24:	685a      	ldr	r2, [r3, #4]
   2ed26:	6883      	ldr	r3, [r0, #8]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   2ed28:	eb13 1382 	adds.w	r3, r3, r2, lsl #6
      const int copy_size = output_dims->data[axis] * base_inner_size;
   2ed2c:	687a      	ldr	r2, [r7, #4]
   2ed2e:	bf18      	it	ne
   2ed30:	685b      	ldrne	r3, [r3, #4]
   2ed32:	4362      	muls	r2, r4
   2ed34:	fb02 3306 	mla	r3, r2, r6, r3
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   2ed38:	4591      	cmp	r9, r2
   2ed3a:	da06      	bge.n	2ed4a <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xe2>
   2ed3c:	f91c 1009 	ldrsb.w	r1, [ip, r9]
   2ed40:	f109 0901 	add.w	r9, r9, #1
   2ed44:	f803 1b01 	strb.w	r1, [r3], #1
   2ed48:	e7f6      	b.n	2ed38 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xd0>
      input_ptr += copy_size;
   2ed4a:	4494      	add	ip, r2
    for (int i = 0; i < output_count; ++i) {
   2ed4c:	f108 0801 	add.w	r8, r8, #1
   2ed50:	e7e0      	b.n	2ed14 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xac>
  for (int k = 0; k < outer_size; ++k) {
   2ed52:	3601      	adds	r6, #1
   2ed54:	e7d7      	b.n	2ed06 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x9e>
}
   2ed56:	2000      	movs	r0, #0
   2ed58:	b003      	add	sp, #12
   2ed5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002ed5e <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>:
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   2ed5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const int output_count = NumOutputs(node);
   2ed62:	684f      	ldr	r7, [r1, #4]
  const TfLiteIntArray* input_dims = input->dims;
   2ed64:	6894      	ldr	r4, [r2, #8]
  const TfLiteTensor* output0 = GetOutput(context, node, 0);
   2ed66:	6881      	ldr	r1, [r0, #8]
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   2ed68:	b085      	sub	sp, #20
  const int split_dimensions = input_dims->size;
   2ed6a:	6825      	ldr	r5, [r4, #0]
  const TfLiteTensor* output0 = GetOutput(context, node, 0);
   2ed6c:	9101      	str	r1, [sp, #4]
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   2ed6e:	2b00      	cmp	r3, #0
   2ed70:	6879      	ldr	r1, [r7, #4]
  const TfLiteIntArray* output_dims = output0->dims;
   2ed72:	9801      	ldr	r0, [sp, #4]
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   2ed74:	bfb8      	it	lt
   2ed76:	195b      	addlt	r3, r3, r5
  const TfLiteIntArray* output_dims = output0->dims;
   2ed78:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  TFLITE_DCHECK_LT(axis, split_dimensions);
   2ed7c:	42ab      	cmp	r3, r5
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   2ed7e:	683e      	ldr	r6, [r7, #0]
  const TfLiteIntArray* output_dims = output0->dims;
   2ed80:	6889      	ldr	r1, [r1, #8]
  TFLITE_DCHECK_LT(axis, split_dimensions);
   2ed82:	db01      	blt.n	2ed88 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2a>
   2ed84:	f002 f819 	bl	30dba <abort>
  TFLITE_DCHECK_EQ(output_dims->size, split_dimensions);
   2ed88:	6808      	ldr	r0, [r1, #0]
   2ed8a:	42a8      	cmp	r0, r5
   2ed8c:	d1fa      	bne.n	2ed84 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x26>
  int64_t split_size = output_dims->data[axis] * output_count;
   2ed8e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   2ed92:	f8d1 e004 	ldr.w	lr, [r1, #4]
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   2ed96:	eb04 0183 	add.w	r1, r4, r3, lsl #2
  int64_t split_size = output_dims->data[axis] * output_count;
   2ed9a:	fb06 f00e 	mul.w	r0, r6, lr
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   2ed9e:	6849      	ldr	r1, [r1, #4]
   2eda0:	4288      	cmp	r0, r1
   2eda2:	d1ef      	bne.n	2ed84 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x26>
   2eda4:	3404      	adds	r4, #4
   2eda6:	46a2      	mov	sl, r4
  for (int i = 0; i < axis; ++i) {
   2eda8:	f04f 0800 	mov.w	r8, #0
  int64_t outer_size = 1;
   2edac:	f04f 0b01 	mov.w	fp, #1
   2edb0:	f04f 0c00 	mov.w	ip, #0
  for (int i = 0; i < axis; ++i) {
   2edb4:	4598      	cmp	r8, r3
   2edb6:	da0d      	bge.n	2edd4 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x76>
    outer_size *= input_dims->data[i];
   2edb8:	f85a 9b04 	ldr.w	r9, [sl], #4
  for (int i = 0; i < axis; ++i) {
   2edbc:	f108 0801 	add.w	r8, r8, #1
    outer_size *= input_dims->data[i];
   2edc0:	4648      	mov	r0, r9
   2edc2:	17c1      	asrs	r1, r0, #31
   2edc4:	fb0b f101 	mul.w	r1, fp, r1
   2edc8:	fb09 110c 	mla	r1, r9, ip, r1
   2edcc:	fbab bc09 	umull	fp, ip, fp, r9
   2edd0:	448c      	add	ip, r1
  for (int i = 0; i < axis; ++i) {
   2edd2:	e7ef      	b.n	2edb4 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x56>
  int64_t base_inner_size = 1;
   2edd4:	2001      	movs	r0, #1
   2edd6:	2100      	movs	r1, #0
  for (int i = axis + 1; i < split_dimensions; ++i) {
   2edd8:	3301      	adds	r3, #1
   2edda:	42ab      	cmp	r3, r5
   2eddc:	d00c      	beq.n	2edf8 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x9a>
    base_inner_size *= input_dims->data[i];
   2edde:	f854 a023 	ldr.w	sl, [r4, r3, lsl #2]
  for (int i = axis + 1; i < split_dimensions; ++i) {
   2ede2:	3301      	adds	r3, #1
    base_inner_size *= input_dims->data[i];
   2ede4:	ea4f 79ea 	mov.w	r9, sl, asr #31
   2ede8:	fb00 f809 	mul.w	r8, r0, r9
   2edec:	fb0a 8801 	mla	r8, sl, r1, r8
   2edf0:	fba0 010a 	umull	r0, r1, r0, sl
   2edf4:	4441      	add	r1, r8
  for (int i = axis + 1; i < split_dimensions; ++i) {
   2edf6:	e7f0      	b.n	2edda <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x7c>
      input_ptr += copy_size;
   2edf8:	2100      	movs	r1, #0
      const int copy_size = output_dims->data[axis] * base_inner_size;
   2edfa:	fb00 f30e 	mul.w	r3, r0, lr
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   2edfe:	6855      	ldr	r5, [r2, #4]
      input_ptr += copy_size;
   2ee00:	ea4f 0a43 	mov.w	sl, r3, lsl #1
   2ee04:	ea26 72e6 	bic.w	r2, r6, r6, asr #31
   2ee08:	fb0a f202 	mul.w	r2, sl, r2
  for (int k = 0; k < outer_size; ++k) {
   2ee0c:	9100      	str	r1, [sp, #0]
   2ee0e:	9202      	str	r2, [sp, #8]
   2ee10:	9a00      	ldr	r2, [sp, #0]
   2ee12:	ea4f 79e2 	mov.w	r9, r2, asr #31
   2ee16:	455a      	cmp	r2, fp
   2ee18:	eb79 020c 	sbcs.w	r2, r9, ip
   2ee1c:	da26      	bge.n	2ee6c <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x10e>
   2ee1e:	46a8      	mov	r8, r5
    for (int i = 0; i < output_count; ++i) {
   2ee20:	f04f 0e00 	mov.w	lr, #0
   2ee24:	004a      	lsls	r2, r1, #1
   2ee26:	f107 0904 	add.w	r9, r7, #4
   2ee2a:	9203      	str	r2, [sp, #12]
   2ee2c:	45b6      	cmp	lr, r6
   2ee2e:	da16      	bge.n	2ee5e <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x100>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   2ee30:	9801      	ldr	r0, [sp, #4]
  return &context->tensors[node->outputs->data[index]];
   2ee32:	f859 2b04 	ldr.w	r2, [r9], #4
   2ee36:	eb10 1282 	adds.w	r2, r0, r2, lsl #6
   2ee3a:	bf18      	it	ne
   2ee3c:	6852      	ldrne	r2, [r2, #4]
   2ee3e:	9803      	ldr	r0, [sp, #12]
   2ee40:	4402      	add	r2, r0
   2ee42:	4614      	mov	r4, r2
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   2ee44:	2000      	movs	r0, #0
   2ee46:	4298      	cmp	r0, r3
   2ee48:	da05      	bge.n	2ee56 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xf8>
   2ee4a:	f938 2010 	ldrsh.w	r2, [r8, r0, lsl #1]
   2ee4e:	3001      	adds	r0, #1
   2ee50:	f824 2b02 	strh.w	r2, [r4], #2
   2ee54:	e7f7      	b.n	2ee46 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xe8>
      input_ptr += copy_size;
   2ee56:	44d0      	add	r8, sl
    for (int i = 0; i < output_count; ++i) {
   2ee58:	f10e 0e01 	add.w	lr, lr, #1
   2ee5c:	e7e6      	b.n	2ee2c <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xce>
   2ee5e:	9a02      	ldr	r2, [sp, #8]
   2ee60:	4419      	add	r1, r3
   2ee62:	4415      	add	r5, r2
  for (int k = 0; k < outer_size; ++k) {
   2ee64:	9a00      	ldr	r2, [sp, #0]
   2ee66:	3201      	adds	r2, #1
   2ee68:	9200      	str	r2, [sp, #0]
   2ee6a:	e7d1      	b.n	2ee10 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xb2>
}
   2ee6c:	2000      	movs	r0, #0
   2ee6e:	b005      	add	sp, #20
   2ee70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002ee74 <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>:
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   2ee74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const int output_count = NumOutputs(node);
   2ee78:	684f      	ldr	r7, [r1, #4]
  const TfLiteIntArray* input_dims = input->dims;
   2ee7a:	6894      	ldr	r4, [r2, #8]
  const TfLiteTensor* output0 = GetOutput(context, node, 0);
   2ee7c:	6881      	ldr	r1, [r0, #8]
  const int split_dimensions = input_dims->size;
   2ee7e:	6826      	ldr	r6, [r4, #0]
  const TfLiteTensor* output0 = GetOutput(context, node, 0);
   2ee80:	9100      	str	r1, [sp, #0]
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   2ee82:	2b00      	cmp	r3, #0
   2ee84:	6879      	ldr	r1, [r7, #4]
  const TfLiteIntArray* output_dims = output0->dims;
   2ee86:	9800      	ldr	r0, [sp, #0]
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   2ee88:	bfb8      	it	lt
   2ee8a:	199b      	addlt	r3, r3, r6
  const TfLiteIntArray* output_dims = output0->dims;
   2ee8c:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  TFLITE_DCHECK_LT(axis, split_dimensions);
   2ee90:	42b3      	cmp	r3, r6
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   2ee92:	f8d7 e000 	ldr.w	lr, [r7]
  const TfLiteIntArray* output_dims = output0->dims;
   2ee96:	688d      	ldr	r5, [r1, #8]
  TFLITE_DCHECK_LT(axis, split_dimensions);
   2ee98:	db01      	blt.n	2ee9e <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2a>
   2ee9a:	f001 ff8e 	bl	30dba <abort>
  TFLITE_DCHECK_EQ(output_dims->size, split_dimensions);
   2ee9e:	6829      	ldr	r1, [r5, #0]
   2eea0:	42b1      	cmp	r1, r6
   2eea2:	d1fa      	bne.n	2ee9a <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x26>
   2eea4:	eb05 0183 	add.w	r1, r5, r3, lsl #2
   2eea8:	9101      	str	r1, [sp, #4]
  int64_t split_size = output_dims->data[axis] * output_count;
   2eeaa:	6849      	ldr	r1, [r1, #4]
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   2eeac:	eb04 0083 	add.w	r0, r4, r3, lsl #2
  int64_t split_size = output_dims->data[axis] * output_count;
   2eeb0:	fb01 f10e 	mul.w	r1, r1, lr
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   2eeb4:	6840      	ldr	r0, [r0, #4]
   2eeb6:	4281      	cmp	r1, r0
   2eeb8:	d1ef      	bne.n	2ee9a <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x26>
   2eeba:	3404      	adds	r4, #4
   2eebc:	46a2      	mov	sl, r4
  for (int i = 0; i < axis; ++i) {
   2eebe:	f04f 0800 	mov.w	r8, #0
  int64_t outer_size = 1;
   2eec2:	f04f 0b01 	mov.w	fp, #1
   2eec6:	f04f 0c00 	mov.w	ip, #0
  for (int i = 0; i < axis; ++i) {
   2eeca:	4598      	cmp	r8, r3
   2eecc:	da0d      	bge.n	2eeea <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x76>
    outer_size *= input_dims->data[i];
   2eece:	f85a 9b04 	ldr.w	r9, [sl], #4
  for (int i = 0; i < axis; ++i) {
   2eed2:	f108 0801 	add.w	r8, r8, #1
    outer_size *= input_dims->data[i];
   2eed6:	4648      	mov	r0, r9
   2eed8:	17c1      	asrs	r1, r0, #31
   2eeda:	fb0b f101 	mul.w	r1, fp, r1
   2eede:	fb09 110c 	mla	r1, r9, ip, r1
   2eee2:	fbab bc09 	umull	fp, ip, fp, r9
   2eee6:	448c      	add	ip, r1
  for (int i = 0; i < axis; ++i) {
   2eee8:	e7ef      	b.n	2eeca <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x56>
  int64_t base_inner_size = 1;
   2eeea:	2001      	movs	r0, #1
   2eeec:	2100      	movs	r1, #0
  for (int i = axis + 1; i < split_dimensions; ++i) {
   2eeee:	3301      	adds	r3, #1
   2eef0:	42b3      	cmp	r3, r6
   2eef2:	d00c      	beq.n	2ef0e <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x9a>
    base_inner_size *= input_dims->data[i];
   2eef4:	f854 a023 	ldr.w	sl, [r4, r3, lsl #2]
  for (int i = axis + 1; i < split_dimensions; ++i) {
   2eef8:	3301      	adds	r3, #1
    base_inner_size *= input_dims->data[i];
   2eefa:	ea4f 79ea 	mov.w	r9, sl, asr #31
   2eefe:	fb00 f809 	mul.w	r8, r0, r9
   2ef02:	fb0a 8801 	mla	r8, sl, r1, r8
   2ef06:	fba0 010a 	umull	r0, r1, r0, sl
   2ef0a:	4441      	add	r1, r8
  for (int i = axis + 1; i < split_dimensions; ++i) {
   2ef0c:	e7f0      	b.n	2eef0 <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x7c>
  for (int k = 0; k < outer_size; ++k) {
   2ef0e:	2400      	movs	r4, #0
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   2ef10:	f8d2 8004 	ldr.w	r8, [r2, #4]
   2ef14:	17e3      	asrs	r3, r4, #31
   2ef16:	455c      	cmp	r4, fp
   2ef18:	eb73 030c 	sbcs.w	r3, r3, ip
   2ef1c:	da23      	bge.n	2ef66 <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xf2>
    for (int i = 0; i < output_count; ++i) {
   2ef1e:	f04f 0900 	mov.w	r9, #0
   2ef22:	f107 0a04 	add.w	sl, r7, #4
   2ef26:	45f1      	cmp	r9, lr
   2ef28:	da1b      	bge.n	2ef62 <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xee>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   2ef2a:	9a00      	ldr	r2, [sp, #0]
  return &context->tensors[node->outputs->data[index]];
   2ef2c:	f85a 3b04 	ldr.w	r3, [sl], #4
   2ef30:	eb12 1383 	adds.w	r3, r2, r3, lsl #6
      const int copy_size = output_dims->data[axis] * base_inner_size;
   2ef34:	9a01      	ldr	r2, [sp, #4]
   2ef36:	bf18      	it	ne
   2ef38:	685b      	ldrne	r3, [r3, #4]
   2ef3a:	6852      	ldr	r2, [r2, #4]
   2ef3c:	4342      	muls	r2, r0
      T* output_ptr = output_data + k * copy_size;
   2ef3e:	fb02 f604 	mul.w	r6, r2, r4
   2ef42:	eb03 0386 	add.w	r3, r3, r6, lsl #2
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   2ef46:	2600      	movs	r6, #0
   2ef48:	4296      	cmp	r6, r2
   2ef4a:	da05      	bge.n	2ef58 <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xe4>
   2ef4c:	f858 5026 	ldr.w	r5, [r8, r6, lsl #2]
   2ef50:	3601      	adds	r6, #1
   2ef52:	f843 5b04 	str.w	r5, [r3], #4
   2ef56:	e7f7      	b.n	2ef48 <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xd4>
      input_ptr += copy_size;
   2ef58:	eb08 0882 	add.w	r8, r8, r2, lsl #2
    for (int i = 0; i < output_count; ++i) {
   2ef5c:	f109 0901 	add.w	r9, r9, #1
   2ef60:	e7e1      	b.n	2ef26 <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xb2>
  for (int k = 0; k < outer_size; ++k) {
   2ef62:	3401      	adds	r4, #1
   2ef64:	e7d6      	b.n	2ef14 <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xa0>
}
   2ef66:	2000      	movs	r0, #0
   2ef68:	b003      	add	sp, #12
   2ef6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002ef6e <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi>:
}

inline void StridedSlicePadIndices(tflite::StridedSliceParams* p,
                                   int dim_count) {
  // Add indices and mask bits to fully include extra dimensions
  TFLITE_CHECK_LE(dim_count, 5);
   2ef6e:	2905      	cmp	r1, #5
                                   int dim_count) {
   2ef70:	b570      	push	{r4, r5, r6, lr}
  TFLITE_CHECK_LE(dim_count, 5);
   2ef72:	dd01      	ble.n	2ef78 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0xa>
   2ef74:	f001 ff21 	bl	30dba <abort>
  TFLITE_CHECK_GE(dim_count, p->start_indices_count);
   2ef78:	f990 2000 	ldrsb.w	r2, [r0]
   2ef7c:	428a      	cmp	r2, r1
   2ef7e:	dcf9      	bgt.n	2ef74 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x6>
  TFLITE_CHECK_EQ(p->start_indices_count, p->stop_indices_count);
   2ef80:	f990 3018 	ldrsb.w	r3, [r0, #24]
   2ef84:	429a      	cmp	r2, r3
   2ef86:	d1f5      	bne.n	2ef74 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x6>
  TFLITE_CHECK_EQ(p->stop_indices_count, p->strides_count);
   2ef88:	f990 3030 	ldrsb.w	r3, [r0, #48]	; 0x30
   2ef8c:	4293      	cmp	r3, r2
   2ef8e:	d1f1      	bne.n	2ef74 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x6>

  const int pad_count = dim_count - p->start_indices_count;
   2ef90:	1aca      	subs	r2, r1, r3

  // Pad indices at start, so move arrays by pad_count.
  for (int i = p->start_indices_count - 1; i >= 0; --i) {
   2ef92:	1e5d      	subs	r5, r3, #1
   2ef94:	eb00 0481 	add.w	r4, r0, r1, lsl #2
   2ef98:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   2ef9c:	2d00      	cmp	r5, #0
   2ef9e:	da0b      	bge.n	2efb8 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x4a>
    p->strides[i + pad_count] = p->strides[i];
    p->start_indices[i + pad_count] = p->start_indices[i];
    p->stop_indices[i + pad_count] = p->stop_indices[i];
  }
  for (int i = 0; i < pad_count; ++i) {
   2efa0:	2300      	movs	r3, #0
    p->start_indices[i] = 0;
    p->stop_indices[i] = 1;
   2efa2:	2501      	movs	r5, #1
    p->start_indices[i] = 0;
   2efa4:	461e      	mov	r6, r3
   2efa6:	1d04      	adds	r4, r0, #4
  for (int i = 0; i < pad_count; ++i) {
   2efa8:	4293      	cmp	r3, r2
   2efaa:	da0f      	bge.n	2efcc <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x5e>
    p->start_indices[i] = 0;
   2efac:	f844 6b04 	str.w	r6, [r4], #4
    p->stop_indices[i] = 1;
   2efb0:	6165      	str	r5, [r4, #20]
    p->strides[i] = 1;
   2efb2:	62e5      	str	r5, [r4, #44]	; 0x2c
  for (int i = 0; i < pad_count; ++i) {
   2efb4:	3301      	adds	r3, #1
   2efb6:	e7f7      	b.n	2efa8 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x3a>
    p->strides[i + pad_count] = p->strides[i];
   2efb8:	6b1e      	ldr	r6, [r3, #48]	; 0x30
  for (int i = p->start_indices_count - 1; i >= 0; --i) {
   2efba:	3d01      	subs	r5, #1
    p->strides[i + pad_count] = p->strides[i];
   2efbc:	6326      	str	r6, [r4, #48]	; 0x30
    p->start_indices[i + pad_count] = p->start_indices[i];
   2efbe:	f853 6904 	ldr.w	r6, [r3], #-4
   2efc2:	f844 6904 	str.w	r6, [r4], #-4
    p->stop_indices[i + pad_count] = p->stop_indices[i];
   2efc6:	69de      	ldr	r6, [r3, #28]
   2efc8:	61e6      	str	r6, [r4, #28]
  for (int i = p->start_indices_count - 1; i >= 0; --i) {
   2efca:	e7e7      	b.n	2ef9c <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x2e>
  }

  // Pad masks with 0s or 1s as required.
  p->shrink_axis_mask <<= pad_count;
   2efcc:	f9b0 3050 	ldrsh.w	r3, [r0, #80]	; 0x50
  p->ellipsis_mask <<= pad_count;
  p->new_axis_mask <<= pad_count;
  p->begin_mask <<= pad_count;
   2efd0:	f9b0 5048 	ldrsh.w	r5, [r0, #72]	; 0x48
  p->shrink_axis_mask <<= pad_count;
   2efd4:	4093      	lsls	r3, r2
   2efd6:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
  p->ellipsis_mask <<= pad_count;
   2efda:	f9b0 304a 	ldrsh.w	r3, [r0, #74]	; 0x4a
  p->end_mask <<= pad_count;
  p->begin_mask |= (1 << pad_count) - 1;
  p->end_mask |= (1 << pad_count) - 1;

  p->start_indices_count = dim_count;
   2efde:	b249      	sxtb	r1, r1
  p->ellipsis_mask <<= pad_count;
   2efe0:	4093      	lsls	r3, r2
   2efe2:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
  p->new_axis_mask <<= pad_count;
   2efe6:	f9b0 304e 	ldrsh.w	r3, [r0, #78]	; 0x4e
  p->start_indices_count = dim_count;
   2efea:	7001      	strb	r1, [r0, #0]
  p->new_axis_mask <<= pad_count;
   2efec:	4093      	lsls	r3, r2
   2efee:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
  p->end_mask <<= pad_count;
   2eff2:	f9b0 304c 	ldrsh.w	r3, [r0, #76]	; 0x4c
  p->stop_indices_count = dim_count;
   2eff6:	7601      	strb	r1, [r0, #24]
  p->end_mask <<= pad_count;
   2eff8:	fa03 f402 	lsl.w	r4, r3, r2
  p->begin_mask |= (1 << pad_count) - 1;
   2effc:	2301      	movs	r3, #1
   2effe:	4093      	lsls	r3, r2
   2f000:	3b01      	subs	r3, #1
   2f002:	b21b      	sxth	r3, r3
  p->begin_mask <<= pad_count;
   2f004:	fa05 f202 	lsl.w	r2, r5, r2
  p->begin_mask |= (1 << pad_count) - 1;
   2f008:	431a      	orrs	r2, r3
  p->end_mask |= (1 << pad_count) - 1;
   2f00a:	4323      	orrs	r3, r4
  p->begin_mask |= (1 << pad_count) - 1;
   2f00c:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
  p->end_mask |= (1 << pad_count) - 1;
   2f010:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  p->strides_count = dim_count;
   2f014:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
}
   2f018:	bd70      	pop	{r4, r5, r6, pc}

0002f01a <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>:

// Return the index for the first element along that axis. This index will be a
// positive integer between [0, axis_size - 1] that can be used to index
// directly into the data.
inline int StartForAxis(const tflite::StridedSliceParams& params,
                        const RuntimeShape& input_shape, int axis) {
   2f01a:	b538      	push	{r3, r4, r5, lr}
   2f01c:	4605      	mov	r5, r0
   2f01e:	4608      	mov	r0, r1
  const auto begin_mask = params.begin_mask;
  const auto* start_indices = params.start_indices;
  const auto* strides = params.strides;
  const int axis_size = input_shape.Dims(axis);
   2f020:	4611      	mov	r1, r2
                        const RuntimeShape& input_shape, int axis) {
   2f022:	4614      	mov	r4, r2
  const int axis_size = input_shape.Dims(axis);
   2f024:	f7f8 fad0 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  if (axis_size == 0) {
   2f028:	b1d8      	cbz	r0, 2f062 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x48>
  }
  // Begin with the specified index.
  int start = start_indices[axis];

  // begin_mask override
  if (begin_mask & 1 << axis) {
   2f02a:	f9b5 2048 	ldrsh.w	r2, [r5, #72]	; 0x48
  int start = start_indices[axis];
   2f02e:	eb05 0184 	add.w	r1, r5, r4, lsl #2
  if (begin_mask & 1 << axis) {
   2f032:	4122      	asrs	r2, r4
   2f034:	07d2      	lsls	r2, r2, #31
  int start = start_indices[axis];
   2f036:	684b      	ldr	r3, [r1, #4]
  if (begin_mask & 1 << axis) {
   2f038:	d508      	bpl.n	2f04c <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x32>
    if (strides[axis] > 0) {
   2f03a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   2f03c:	2b00      	cmp	r3, #0
   2f03e:	dc09      	bgt.n	2f054 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x3a>
      // clamped below (Note: We could have set them to 0 and axis_size-1, but
      // use lowest() and max() to maintain symmetry with StopForAxis())
      start = std::numeric_limits<int>::lowest();
    } else {
      // Backward iteration - use the last element.
      start = std::numeric_limits<int>::max();
   2f040:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  TFLITE_DCHECK(!(hi < lo));
   2f044:	3801      	subs	r0, #1
   2f046:	d508      	bpl.n	2f05a <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x40>
   2f048:	f001 feb7 	bl	30dba <abort>
    }
  }

  // Handle negative indices
  if (start < 0) {
   2f04c:	2b00      	cmp	r3, #0
   2f04e:	daf9      	bge.n	2f044 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x2a>
    start += axis_size;
   2f050:	4403      	add	r3, r0
   2f052:	e7f7      	b.n	2f044 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x2a>
      start = std::numeric_limits<int>::lowest();
   2f054:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   2f058:	e7fa      	b.n	2f050 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x36>
  if (hi < v) return hi;
   2f05a:	4298      	cmp	r0, r3
  if (v < lo) return lo;
   2f05c:	bfa8      	it	ge
   2f05e:	ea23 70e3 	bicge.w	r0, r3, r3, asr #31

  // Clamping
  start = Clamp(start, 0, axis_size - 1);

  return start;
}
   2f062:	bd38      	pop	{r3, r4, r5, pc}

0002f064 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>:
// element. ie. So if you were iterating through all elements of a 1D array of
// size 4, this function would return 4 as the stop, because it is one past the
// "real" indices of 0, 1, 2 & 3.
inline int StopForAxis(const tflite::StridedSliceParams& params,
                       const RuntimeShape& input_shape, int axis,
                       int start_for_axis) {
   2f064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f066:	4606      	mov	r6, r0
   2f068:	4608      	mov	r0, r1
  const auto end_mask = params.end_mask;
  const auto shrink_axis_mask = params.shrink_axis_mask;
  const auto* stop_indices = params.stop_indices;
  const auto* strides = params.strides;
  const int axis_size = input_shape.Dims(axis);
   2f06a:	4611      	mov	r1, r2
                       int start_for_axis) {
   2f06c:	4615      	mov	r5, r2
   2f06e:	461f      	mov	r7, r3
  const int axis_size = input_shape.Dims(axis);
   2f070:	f7f8 faaa 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
  if (axis_size == 0) {
   2f074:	b318      	cbz	r0, 2f0be <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x5a>
    return 0;
  }

  // Begin with the specified index
  const bool shrink_axis = shrink_axis_mask & (1 << axis);
   2f076:	f9b6 3050 	ldrsh.w	r3, [r6, #80]	; 0x50
  int stop = stop_indices[axis];
   2f07a:	eb06 0285 	add.w	r2, r6, r5, lsl #2
  const bool shrink_axis = shrink_axis_mask & (1 << axis);
   2f07e:	412b      	asrs	r3, r5

  // When shrinking an axis, the end position does not matter (and can be
  // incorrect when negative indexing is used, see Issue #19260). Always use
  // start_for_axis + 1 to generate a length 1 slice, since start_for_axis has
  // already been adjusted for negative indices.
  if (shrink_axis) {
   2f080:	07d9      	lsls	r1, r3, #31
  int stop = stop_indices[axis];
   2f082:	69d4      	ldr	r4, [r2, #28]
    stop = start_for_axis + 1;
   2f084:	6b53      	ldr	r3, [r2, #52]	; 0x34
  }

  // end_mask override
  if (end_mask & (1 << axis)) {
   2f086:	f9b6 204c 	ldrsh.w	r2, [r6, #76]	; 0x4c
    stop = start_for_axis + 1;
   2f08a:	bf48      	it	mi
   2f08c:	1c7c      	addmi	r4, r7, #1
  if (end_mask & (1 << axis)) {
   2f08e:	412a      	asrs	r2, r5
   2f090:	07d2      	lsls	r2, r2, #31
   2f092:	d505      	bpl.n	2f0a0 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x3c>
    if (strides[axis] > 0) {
   2f094:	2b00      	cmp	r3, #0
   2f096:	dc0b      	bgt.n	2f0b0 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x4c>
      // Forward iteration - use the last element. These values will get
      // clamped below
      stop = std::numeric_limits<int>::max();
    } else {
      // Backward iteration - use the first element.
      stop = std::numeric_limits<int>::lowest();
   2f098:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    }
  }

  // Handle negative indices
  if (stop < 0) {
    stop += axis_size;
   2f09c:	4404      	add	r4, r0
   2f09e:	e001      	b.n	2f0a4 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x40>
  if (stop < 0) {
   2f0a0:	2c00      	cmp	r4, #0
   2f0a2:	dbfb      	blt.n	2f09c <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x38>
  }

  // Clamping
  // Because the end index points one past the last element, we need slightly
  // different clamping ranges depending on the direction.
  if (strides[axis] > 0) {
   2f0a4:	2b00      	cmp	r3, #0
   2f0a6:	dd0b      	ble.n	2f0c0 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x5c>
  TFLITE_DCHECK(!(hi < lo));
   2f0a8:	2800      	cmp	r0, #0
   2f0aa:	da04      	bge.n	2f0b6 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x52>
   2f0ac:	f001 fe85 	bl	30dba <abort>
      stop = std::numeric_limits<int>::max();
   2f0b0:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   2f0b4:	e7f8      	b.n	2f0a8 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x44>
  if (hi < v) return hi;
   2f0b6:	4284      	cmp	r4, r0
   2f0b8:	dc01      	bgt.n	2f0be <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x5a>
  if (v < lo) return lo;
   2f0ba:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
    // Backward iteration
    stop = Clamp(stop, -1, axis_size - 1);
  }

  return stop;
}
   2f0be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    stop = Clamp(stop, -1, axis_size - 1);
   2f0c0:	3801      	subs	r0, #1
  TFLITE_DCHECK(!(hi < lo));
   2f0c2:	1c43      	adds	r3, r0, #1
   2f0c4:	dbf2      	blt.n	2f0ac <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x48>
  if (hi < v) return hi;
   2f0c6:	42a0      	cmp	r0, r4
  if (v < lo) return lo;
   2f0c8:	bfa8      	it	ge
   2f0ca:	ea44 70e4 	orrge.w	r0, r4, r4, asr #31
   2f0ce:	e7f6      	b.n	2f0be <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x5a>

0002f0d0 <_ZN6tflite3ops5micro13strided_slice19StridedSliceContextC1EP13TfLiteContextP10TfLiteNode>:
  StridedSliceContext(TfLiteContext* context, TfLiteNode* node) {
   2f0d0:	b570      	push	{r4, r5, r6, lr}
    input = GetInput(context, node, kInputTensor);
   2f0d2:	6815      	ldr	r5, [r2, #0]
   2f0d4:	6889      	ldr	r1, [r1, #8]
  return &context->tensors[node->inputs->data[index]];
   2f0d6:	68ae      	ldr	r6, [r5, #8]
    params = reinterpret_cast<TfLiteStridedSliceParams*>(node->builtin_data);
   2f0d8:	6954      	ldr	r4, [r2, #20]
  return &context->tensors[node->outputs->data[index]];
   2f0da:	6852      	ldr	r2, [r2, #4]
  return &context->tensors[node->inputs->data[index]];
   2f0dc:	eb01 1686 	add.w	r6, r1, r6, lsl #6
   2f0e0:	6004      	str	r4, [r0, #0]
   2f0e2:	686c      	ldr	r4, [r5, #4]
  return &context->tensors[node->outputs->data[index]];
   2f0e4:	6852      	ldr	r2, [r2, #4]
    begin = GetInput(context, node, kBeginTensor);
   2f0e6:	6086      	str	r6, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
   2f0e8:	68ee      	ldr	r6, [r5, #12]
   2f0ea:	692d      	ldr	r5, [r5, #16]
   2f0ec:	eb01 1484 	add.w	r4, r1, r4, lsl #6
   2f0f0:	eb01 1686 	add.w	r6, r1, r6, lsl #6
   2f0f4:	eb01 1585 	add.w	r5, r1, r5, lsl #6
  return &context->tensors[node->outputs->data[index]];
   2f0f8:	eb01 1182 	add.w	r1, r1, r2, lsl #6
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   2f0fc:	68a2      	ldr	r2, [r4, #8]
    input = GetInput(context, node, kInputTensor);
   2f0fe:	6044      	str	r4, [r0, #4]
    dims = NumDimensions(input);
   2f100:	6812      	ldr	r2, [r2, #0]
    end = GetInput(context, node, kEndTensor);
   2f102:	60c6      	str	r6, [r0, #12]
    strides = GetInput(context, node, kStridesTensor);
   2f104:	6105      	str	r5, [r0, #16]
    output = GetOutput(context, node, kOutputTensor);
   2f106:	6141      	str	r1, [r0, #20]
    dims = NumDimensions(input);
   2f108:	6182      	str	r2, [r0, #24]
  }
   2f10a:	bd70      	pop	{r4, r5, r6, pc}

0002f10c <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE>:
    StridedSliceContext* op_context) {
   2f10c:	b570      	push	{r4, r5, r6, lr}
  op_params.start_indices_count = op_context->dims;
   2f10e:	698e      	ldr	r6, [r1, #24]
  for (int i = 0; i < op_context->dims; ++i) {
   2f110:	2200      	movs	r2, #0
  op_params.start_indices_count = op_context->dims;
   2f112:	b273      	sxtb	r3, r6
   2f114:	7003      	strb	r3, [r0, #0]
  op_params.stop_indices_count = op_context->dims;
   2f116:	7603      	strb	r3, [r0, #24]
  op_params.strides_count = op_context->dims;
   2f118:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  for (int i = 0; i < op_context->dims; ++i) {
   2f11c:	4603      	mov	r3, r0
   2f11e:	4296      	cmp	r6, r2
   2f120:	dd13      	ble.n	2f14a <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE+0x3e>
    op_params.start_indices[i] = GetTensorData<int32_t>(op_context->begin)[i];
   2f122:	688c      	ldr	r4, [r1, #8]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   2f124:	b104      	cbz	r4, 2f128 <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE+0x1c>
   2f126:	6864      	ldr	r4, [r4, #4]
   2f128:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
   2f12c:	0095      	lsls	r5, r2, #2
   2f12e:	605c      	str	r4, [r3, #4]
    op_params.stop_indices[i] = GetTensorData<int32_t>(op_context->end)[i];
   2f130:	68cc      	ldr	r4, [r1, #12]
   2f132:	b104      	cbz	r4, 2f136 <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE+0x2a>
   2f134:	6864      	ldr	r4, [r4, #4]
   2f136:	5964      	ldr	r4, [r4, r5]
   2f138:	61dc      	str	r4, [r3, #28]
    op_params.strides[i] = GetTensorData<int32_t>(op_context->strides)[i];
   2f13a:	690c      	ldr	r4, [r1, #16]
   2f13c:	b104      	cbz	r4, 2f140 <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE+0x34>
   2f13e:	6864      	ldr	r4, [r4, #4]
   2f140:	5964      	ldr	r4, [r4, r5]
  for (int i = 0; i < op_context->dims; ++i) {
   2f142:	3201      	adds	r2, #1
    op_params.strides[i] = GetTensorData<int32_t>(op_context->strides)[i];
   2f144:	635c      	str	r4, [r3, #52]	; 0x34
  for (int i = 0; i < op_context->dims; ++i) {
   2f146:	3304      	adds	r3, #4
   2f148:	e7e9      	b.n	2f11e <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE+0x12>
  op_params.begin_mask = op_context->params->begin_mask;
   2f14a:	680b      	ldr	r3, [r1, #0]
   2f14c:	681a      	ldr	r2, [r3, #0]
  op_params.end_mask = op_context->params->end_mask;
   2f14e:	6859      	ldr	r1, [r3, #4]
  op_params.begin_mask = op_context->params->begin_mask;
   2f150:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
  op_params.ellipsis_mask = 0;
   2f154:	2200      	movs	r2, #0
  op_params.shrink_axis_mask = op_context->params->shrink_axis_mask;
   2f156:	691b      	ldr	r3, [r3, #16]
  op_params.ellipsis_mask = 0;
   2f158:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
  op_params.end_mask = op_context->params->end_mask;
   2f15c:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
  op_params.new_axis_mask = 0;
   2f160:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
  op_params.shrink_axis_mask = op_context->params->shrink_axis_mask;
   2f164:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
}
   2f168:	bd70      	pop	{r4, r5, r6, pc}

0002f16a <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>:

namespace tflite {

namespace reference_ops {
template <typename T>
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
   2f16a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f16e:	460e      	mov	r6, r1
   2f170:	b0b5      	sub	sp, #212	; 0xd4
                         T* output_data) {
  using strided_slice::LoopCondition;
  using strided_slice::StartForAxis;
  using strided_slice::StopForAxis;
  // Note that the output_shape is not used herein.
  tflite::StridedSliceParams params_copy = op_params;
   2f172:	4601      	mov	r1, r0
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
   2f174:	9211      	str	r2, [sp, #68]	; 0x44
  tflite::StridedSliceParams params_copy = op_params;
   2f176:	a81f      	add	r0, sp, #124	; 0x7c
   2f178:	2254      	movs	r2, #84	; 0x54
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
   2f17a:	461d      	mov	r5, r3
  tflite::StridedSliceParams params_copy = op_params;
   2f17c:	f001 fe40 	bl	30e00 <memcpy>

  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 5);
   2f180:	6833      	ldr	r3, [r6, #0]
   2f182:	2b05      	cmp	r3, #5
   2f184:	dd01      	ble.n	2f18a <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x20>
   2f186:	f001 fe18 	bl	30dba <abort>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 5);
   2f18a:	682b      	ldr	r3, [r5, #0]
   2f18c:	2b05      	cmp	r3, #5
   2f18e:	dcfa      	bgt.n	2f186 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1c>
    return RuntimeShape(new_shape_size, shape, 1);
   2f190:	ac13      	add	r4, sp, #76	; 0x4c
   2f192:	4632      	mov	r2, r6
   2f194:	2301      	movs	r3, #1
   2f196:	2105      	movs	r1, #5
   2f198:	4620      	mov	r0, r4
   2f19a:	f7f8 faaa 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2f19e:	2301      	movs	r3, #1
   2f1a0:	462a      	mov	r2, r5
   2f1a2:	2105      	movs	r1, #5
   2f1a4:	a819      	add	r0, sp, #100	; 0x64
   2f1a6:	f7f8 faa4 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  const RuntimeShape output_shape =
      RuntimeShape::ExtendedShape(5, unextended_output_shape);

  // Reverse and pad to 5 dimensions because that is what the runtime code
  // requires (ie. all shapes must be 5D and are given backwards).
  strided_slice::StridedSlicePadIndices(&params_copy, 5);
   2f1aa:	2105      	movs	r1, #5
   2f1ac:	a81f      	add	r0, sp, #124	; 0x7c
   2f1ae:	f7ff fede 	bl	2ef6e <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi>

  const int start_0 = StartForAxis(params_copy, input_shape, 0);
   2f1b2:	2200      	movs	r2, #0
   2f1b4:	4621      	mov	r1, r4
   2f1b6:	a81f      	add	r0, sp, #124	; 0x7c
   2f1b8:	f7ff ff2f 	bl	2f01a <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_0 = StopForAxis(params_copy, input_shape, 0, start_0);
   2f1bc:	2200      	movs	r2, #0
   2f1be:	4603      	mov	r3, r0
  const int start_0 = StartForAxis(params_copy, input_shape, 0);
   2f1c0:	4605      	mov	r5, r0
  const int stop_0 = StopForAxis(params_copy, input_shape, 0, start_0);
   2f1c2:	4621      	mov	r1, r4
   2f1c4:	a81f      	add	r0, sp, #124	; 0x7c
   2f1c6:	f7ff ff4d 	bl	2f064 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_1 = StartForAxis(params_copy, input_shape, 1);
   2f1ca:	2201      	movs	r2, #1
  const int stop_0 = StopForAxis(params_copy, input_shape, 0, start_0);
   2f1cc:	4606      	mov	r6, r0
  const int start_1 = StartForAxis(params_copy, input_shape, 1);
   2f1ce:	4621      	mov	r1, r4
   2f1d0:	a81f      	add	r0, sp, #124	; 0x7c
   2f1d2:	f7ff ff22 	bl	2f01a <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_1 = StopForAxis(params_copy, input_shape, 1, start_1);
   2f1d6:	2201      	movs	r2, #1
   2f1d8:	4603      	mov	r3, r0
   2f1da:	4621      	mov	r1, r4
  const int start_1 = StartForAxis(params_copy, input_shape, 1);
   2f1dc:	4680      	mov	r8, r0
  const int stop_1 = StopForAxis(params_copy, input_shape, 1, start_1);
   2f1de:	a81f      	add	r0, sp, #124	; 0x7c
   2f1e0:	f7ff ff40 	bl	2f064 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_2 = StartForAxis(params_copy, input_shape, 2);
   2f1e4:	2202      	movs	r2, #2
   2f1e6:	4621      	mov	r1, r4
  const int stop_1 = StopForAxis(params_copy, input_shape, 1, start_1);
   2f1e8:	900a      	str	r0, [sp, #40]	; 0x28
  const int start_2 = StartForAxis(params_copy, input_shape, 2);
   2f1ea:	a81f      	add	r0, sp, #124	; 0x7c
   2f1ec:	f7ff ff15 	bl	2f01a <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_2 = StopForAxis(params_copy, input_shape, 2, start_2);
   2f1f0:	2202      	movs	r2, #2
   2f1f2:	4603      	mov	r3, r0
   2f1f4:	4621      	mov	r1, r4
  const int start_2 = StartForAxis(params_copy, input_shape, 2);
   2f1f6:	9005      	str	r0, [sp, #20]
  const int stop_2 = StopForAxis(params_copy, input_shape, 2, start_2);
   2f1f8:	a81f      	add	r0, sp, #124	; 0x7c
   2f1fa:	f7ff ff33 	bl	2f064 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_3 = StartForAxis(params_copy, input_shape, 3);
   2f1fe:	2203      	movs	r2, #3
   2f200:	4621      	mov	r1, r4
  const int stop_2 = StopForAxis(params_copy, input_shape, 2, start_2);
   2f202:	900b      	str	r0, [sp, #44]	; 0x2c
  const int start_3 = StartForAxis(params_copy, input_shape, 3);
   2f204:	a81f      	add	r0, sp, #124	; 0x7c
   2f206:	f7ff ff08 	bl	2f01a <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_3 = StopForAxis(params_copy, input_shape, 3, start_3);
   2f20a:	2203      	movs	r2, #3
   2f20c:	4603      	mov	r3, r0
   2f20e:	4621      	mov	r1, r4
  const int start_3 = StartForAxis(params_copy, input_shape, 3);
   2f210:	9006      	str	r0, [sp, #24]
  const int stop_3 = StopForAxis(params_copy, input_shape, 3, start_3);
   2f212:	a81f      	add	r0, sp, #124	; 0x7c
   2f214:	f7ff ff26 	bl	2f064 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_4 = StartForAxis(params_copy, input_shape, 4);
   2f218:	2204      	movs	r2, #4
   2f21a:	4621      	mov	r1, r4
  const int stop_3 = StopForAxis(params_copy, input_shape, 3, start_3);
   2f21c:	900c      	str	r0, [sp, #48]	; 0x30
  const int start_4 = StartForAxis(params_copy, input_shape, 4);
   2f21e:	a81f      	add	r0, sp, #124	; 0x7c
   2f220:	f7ff fefb 	bl	2f01a <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_4 = StopForAxis(params_copy, input_shape, 4, start_4);
   2f224:	2204      	movs	r2, #4
   2f226:	4603      	mov	r3, r0
   2f228:	4621      	mov	r1, r4
  const int start_4 = StartForAxis(params_copy, input_shape, 4);
   2f22a:	9007      	str	r0, [sp, #28]
  const int stop_4 = StopForAxis(params_copy, input_shape, 4, start_4);
   2f22c:	a81f      	add	r0, sp, #124	; 0x7c
   2f22e:	f7ff ff19 	bl	2f064 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>

  T* out_ptr = output_data;
  for (int offset_0 = start_0 * input_shape.Dims(1),
   2f232:	2101      	movs	r1, #1
  const int stop_4 = StopForAxis(params_copy, input_shape, 4, start_4);
   2f234:	900d      	str	r0, [sp, #52]	; 0x34
  for (int offset_0 = start_0 * input_shape.Dims(1),
   2f236:	4620      	mov	r0, r4
   2f238:	f7f8 f9c6 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
           end_0 = stop_0 * input_shape.Dims(1),
   2f23c:	fb06 f300 	mul.w	r3, r6, r0
   2f240:	9308      	str	r3, [sp, #32]
           step_0 = params_copy.strides[0] * input_shape.Dims(1);
   2f242:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  for (int offset_0 = start_0 * input_shape.Dims(1),
   2f244:	4345      	muls	r5, r0
           step_0 = params_copy.strides[0] * input_shape.Dims(1);
   2f246:	9300      	str	r3, [sp, #0]
   2f248:	4343      	muls	r3, r0
   2f24a:	930e      	str	r3, [sp, #56]	; 0x38
       !LoopCondition(offset_0, end_0, params_copy.strides[0]);
       offset_0 += step_0) {
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
             end_1 = (offset_0 + stop_1) * input_shape.Dims(2),
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   2f24c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   2f24e:	9301      	str	r3, [sp, #4]
         !LoopCondition(offset_1, end_1, params_copy.strides[1]);
         offset_1 += step_1) {
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
               end_2 = (offset_1 + stop_2) * input_shape.Dims(3),
               step_2 = params_copy.strides[2] * input_shape.Dims(3);
   2f250:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   2f252:	9302      	str	r3, [sp, #8]
           !LoopCondition(offset_2, end_2, params_copy.strides[2]);
           offset_2 += step_2) {
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   2f254:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   2f256:	9303      	str	r3, [sp, #12]
             !LoopCondition(offset_3, end_3, params_copy.strides[3]);
             offset_3 += step_3) {
          for (int offset_4 = offset_3 + start_4, end_4 = offset_3 + stop_4;
               !LoopCondition(offset_4, end_4, params_copy.strides[4]);
   2f258:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   2f25a:	9304      	str	r3, [sp, #16]

inline bool LoopCondition(int index, int stop, int stride) {
  // True when we have reached the end of an axis and should loop.
  return stride > 0 ? index >= stop : index <= stop;
   2f25c:	9b00      	ldr	r3, [sp, #0]
   2f25e:	2b00      	cmp	r3, #0
   2f260:	9b08      	ldr	r3, [sp, #32]
   2f262:	dd6c      	ble.n	2f33e <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1d4>
   2f264:	429d      	cmp	r5, r3
   2f266:	bfb4      	ite	lt
   2f268:	2300      	movlt	r3, #0
   2f26a:	2301      	movge	r3, #1
       !LoopCondition(offset_0, end_0, params_copy.strides[0]);
   2f26c:	2b00      	cmp	r3, #0
   2f26e:	f040 808e 	bne.w	2f38e <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x224>
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   2f272:	2102      	movs	r1, #2
   2f274:	4620      	mov	r0, r4
   2f276:	f7f8 f9a7 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
             end_1 = (offset_0 + stop_1) * input_shape.Dims(2),
   2f27a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   2f27c:	eb08 0605 	add.w	r6, r8, r5
             end_1 = (offset_0 + stop_1) * input_shape.Dims(2),
   2f280:	eb03 0905 	add.w	r9, r3, r5
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   2f284:	9b01      	ldr	r3, [sp, #4]
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   2f286:	4346      	muls	r6, r0
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   2f288:	4343      	muls	r3, r0
             end_1 = (offset_0 + stop_1) * input_shape.Dims(2),
   2f28a:	fb00 f909 	mul.w	r9, r0, r9
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   2f28e:	930f      	str	r3, [sp, #60]	; 0x3c
   2f290:	9b01      	ldr	r3, [sp, #4]
   2f292:	2b00      	cmp	r3, #0
   2f294:	dd58      	ble.n	2f348 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1de>
   2f296:	454e      	cmp	r6, r9
   2f298:	bfb4      	ite	lt
   2f29a:	2300      	movlt	r3, #0
   2f29c:	2301      	movge	r3, #1
         !LoopCondition(offset_1, end_1, params_copy.strides[1]);
   2f29e:	2b00      	cmp	r3, #0
   2f2a0:	d172      	bne.n	2f388 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x21e>
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
   2f2a2:	2103      	movs	r1, #3
   2f2a4:	4620      	mov	r0, r4
   2f2a6:	f7f8 f98f 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2f2aa:	9b05      	ldr	r3, [sp, #20]
   2f2ac:	199f      	adds	r7, r3, r6
               end_2 = (offset_1 + stop_2) * input_shape.Dims(3),
   2f2ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
   2f2b0:	4347      	muls	r7, r0
               end_2 = (offset_1 + stop_2) * input_shape.Dims(3),
   2f2b2:	eb03 0a06 	add.w	sl, r3, r6
               step_2 = params_copy.strides[2] * input_shape.Dims(3);
   2f2b6:	9b02      	ldr	r3, [sp, #8]
               end_2 = (offset_1 + stop_2) * input_shape.Dims(3),
   2f2b8:	fb00 fa0a 	mul.w	sl, r0, sl
               step_2 = params_copy.strides[2] * input_shape.Dims(3);
   2f2bc:	4343      	muls	r3, r0
   2f2be:	9310      	str	r3, [sp, #64]	; 0x40
   2f2c0:	9b02      	ldr	r3, [sp, #8]
   2f2c2:	2b00      	cmp	r3, #0
   2f2c4:	dd45      	ble.n	2f352 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1e8>
   2f2c6:	4557      	cmp	r7, sl
   2f2c8:	bfb4      	ite	lt
   2f2ca:	2300      	movlt	r3, #0
   2f2cc:	2301      	movge	r3, #1
           !LoopCondition(offset_2, end_2, params_copy.strides[2]);
   2f2ce:	2b00      	cmp	r3, #0
   2f2d0:	d157      	bne.n	2f382 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x218>
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   2f2d2:	2104      	movs	r1, #4
   2f2d4:	4620      	mov	r0, r4
   2f2d6:	f7f8 f977 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
   2f2da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   2f2dc:	9b06      	ldr	r3, [sp, #24]
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
   2f2de:	eb02 0c07 	add.w	ip, r2, r7
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   2f2e2:	9a03      	ldr	r2, [sp, #12]
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   2f2e4:	443b      	add	r3, r7
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   2f2e6:	4342      	muls	r2, r0
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   2f2e8:	4343      	muls	r3, r0
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
   2f2ea:	fb00 fc0c 	mul.w	ip, r0, ip
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   2f2ee:	9209      	str	r2, [sp, #36]	; 0x24
   2f2f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2f2f2:	18d1      	adds	r1, r2, r3
   2f2f4:	9a03      	ldr	r2, [sp, #12]
   2f2f6:	2a00      	cmp	r2, #0
   2f2f8:	dd30      	ble.n	2f35c <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1f2>
   2f2fa:	4563      	cmp	r3, ip
   2f2fc:	bfb4      	ite	lt
   2f2fe:	2200      	movlt	r2, #0
   2f300:	2201      	movge	r2, #1
             !LoopCondition(offset_3, end_3, params_copy.strides[3]);
   2f302:	2a00      	cmp	r2, #0
   2f304:	d13a      	bne.n	2f37c <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x212>
   2f306:	9a07      	ldr	r2, [sp, #28]
   2f308:	f8dd e0f8 	ldr.w	lr, [sp, #248]	; 0xf8
   2f30c:	441a      	add	r2, r3
   2f30e:	9804      	ldr	r0, [sp, #16]
   2f310:	f8cd e0f8 	str.w	lr, [sp, #248]	; 0xf8
   2f314:	2800      	cmp	r0, #0
   2f316:	dd26      	ble.n	2f366 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1fc>
   2f318:	428a      	cmp	r2, r1
   2f31a:	bfb4      	ite	lt
   2f31c:	f04f 0b00 	movlt.w	fp, #0
   2f320:	f04f 0b01 	movge.w	fp, #1
               !LoopCondition(offset_4, end_4, params_copy.strides[4]);
   2f324:	f1bb 0f00 	cmp.w	fp, #0
   2f328:	d124      	bne.n	2f374 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x20a>
               offset_4 += params_copy.strides[4]) {
            *out_ptr++ = input_data[offset_4];
   2f32a:	9811      	ldr	r0, [sp, #68]	; 0x44
   2f32c:	eb00 0b82 	add.w	fp, r0, r2, lsl #2
   2f330:	f8db b000 	ldr.w	fp, [fp]
          for (int offset_4 = offset_3 + start_4, end_4 = offset_3 + stop_4;
   2f334:	9804      	ldr	r0, [sp, #16]
            *out_ptr++ = input_data[offset_4];
   2f336:	f84e bb04 	str.w	fp, [lr], #4
          for (int offset_4 = offset_3 + start_4, end_4 = offset_3 + stop_4;
   2f33a:	4402      	add	r2, r0
   2f33c:	e7e7      	b.n	2f30e <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1a4>
   2f33e:	429d      	cmp	r5, r3
   2f340:	bfcc      	ite	gt
   2f342:	2300      	movgt	r3, #0
   2f344:	2301      	movle	r3, #1
   2f346:	e791      	b.n	2f26c <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x102>
   2f348:	454e      	cmp	r6, r9
   2f34a:	bfcc      	ite	gt
   2f34c:	2300      	movgt	r3, #0
   2f34e:	2301      	movle	r3, #1
   2f350:	e7a5      	b.n	2f29e <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x134>
   2f352:	4557      	cmp	r7, sl
   2f354:	bfcc      	ite	gt
   2f356:	2300      	movgt	r3, #0
   2f358:	2301      	movle	r3, #1
   2f35a:	e7b8      	b.n	2f2ce <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x164>
   2f35c:	4563      	cmp	r3, ip
   2f35e:	bfcc      	ite	gt
   2f360:	2200      	movgt	r2, #0
   2f362:	2201      	movle	r2, #1
   2f364:	e7cd      	b.n	2f302 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x198>
   2f366:	428a      	cmp	r2, r1
   2f368:	bfcc      	ite	gt
   2f36a:	f04f 0b00 	movgt.w	fp, #0
   2f36e:	f04f 0b01 	movle.w	fp, #1
   2f372:	e7d7      	b.n	2f324 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ba>
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   2f374:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2f376:	4413      	add	r3, r2
   2f378:	4411      	add	r1, r2
   2f37a:	e7bb      	b.n	2f2f4 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18a>
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
   2f37c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2f37e:	441f      	add	r7, r3
   2f380:	e79e      	b.n	2f2c0 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x156>
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   2f382:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2f384:	441e      	add	r6, r3
   2f386:	e783      	b.n	2f290 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x126>
  for (int offset_0 = start_0 * input_shape.Dims(1),
   2f388:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2f38a:	441d      	add	r5, r3
   2f38c:	e766      	b.n	2f25c <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xf2>
  const RuntimeShape output_shape =
   2f38e:	a819      	add	r0, sp, #100	; 0x64
   2f390:	f7f8 f90f 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape =
   2f394:	4620      	mov	r0, r4
   2f396:	f7f8 f90c 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
          }
        }
      }
    }
  }
}
   2f39a:	b035      	add	sp, #212	; 0xd4
   2f39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002f3a0 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>:
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
   2f3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f3a4:	460e      	mov	r6, r1
   2f3a6:	b0b5      	sub	sp, #212	; 0xd4
  tflite::StridedSliceParams params_copy = op_params;
   2f3a8:	4601      	mov	r1, r0
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
   2f3aa:	9211      	str	r2, [sp, #68]	; 0x44
  tflite::StridedSliceParams params_copy = op_params;
   2f3ac:	a81f      	add	r0, sp, #124	; 0x7c
   2f3ae:	2254      	movs	r2, #84	; 0x54
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
   2f3b0:	461d      	mov	r5, r3
  tflite::StridedSliceParams params_copy = op_params;
   2f3b2:	f001 fd25 	bl	30e00 <memcpy>
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 5);
   2f3b6:	6833      	ldr	r3, [r6, #0]
   2f3b8:	2b05      	cmp	r3, #5
   2f3ba:	dd01      	ble.n	2f3c0 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x20>
   2f3bc:	f001 fcfd 	bl	30dba <abort>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 5);
   2f3c0:	682b      	ldr	r3, [r5, #0]
   2f3c2:	2b05      	cmp	r3, #5
   2f3c4:	dcfa      	bgt.n	2f3bc <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1c>
   2f3c6:	ac13      	add	r4, sp, #76	; 0x4c
   2f3c8:	4632      	mov	r2, r6
   2f3ca:	2301      	movs	r3, #1
   2f3cc:	2105      	movs	r1, #5
   2f3ce:	4620      	mov	r0, r4
   2f3d0:	f7f8 f98f 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2f3d4:	2301      	movs	r3, #1
   2f3d6:	462a      	mov	r2, r5
   2f3d8:	2105      	movs	r1, #5
   2f3da:	a819      	add	r0, sp, #100	; 0x64
   2f3dc:	f7f8 f989 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  strided_slice::StridedSlicePadIndices(&params_copy, 5);
   2f3e0:	2105      	movs	r1, #5
   2f3e2:	a81f      	add	r0, sp, #124	; 0x7c
   2f3e4:	f7ff fdc3 	bl	2ef6e <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi>
  const int start_0 = StartForAxis(params_copy, input_shape, 0);
   2f3e8:	2200      	movs	r2, #0
   2f3ea:	4621      	mov	r1, r4
   2f3ec:	a81f      	add	r0, sp, #124	; 0x7c
   2f3ee:	f7ff fe14 	bl	2f01a <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_0 = StopForAxis(params_copy, input_shape, 0, start_0);
   2f3f2:	2200      	movs	r2, #0
   2f3f4:	4603      	mov	r3, r0
  const int start_0 = StartForAxis(params_copy, input_shape, 0);
   2f3f6:	4605      	mov	r5, r0
  const int stop_0 = StopForAxis(params_copy, input_shape, 0, start_0);
   2f3f8:	4621      	mov	r1, r4
   2f3fa:	a81f      	add	r0, sp, #124	; 0x7c
   2f3fc:	f7ff fe32 	bl	2f064 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_1 = StartForAxis(params_copy, input_shape, 1);
   2f400:	2201      	movs	r2, #1
  const int stop_0 = StopForAxis(params_copy, input_shape, 0, start_0);
   2f402:	4606      	mov	r6, r0
  const int start_1 = StartForAxis(params_copy, input_shape, 1);
   2f404:	4621      	mov	r1, r4
   2f406:	a81f      	add	r0, sp, #124	; 0x7c
   2f408:	f7ff fe07 	bl	2f01a <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_1 = StopForAxis(params_copy, input_shape, 1, start_1);
   2f40c:	2201      	movs	r2, #1
   2f40e:	4603      	mov	r3, r0
   2f410:	4621      	mov	r1, r4
  const int start_1 = StartForAxis(params_copy, input_shape, 1);
   2f412:	4680      	mov	r8, r0
  const int stop_1 = StopForAxis(params_copy, input_shape, 1, start_1);
   2f414:	a81f      	add	r0, sp, #124	; 0x7c
   2f416:	f7ff fe25 	bl	2f064 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_2 = StartForAxis(params_copy, input_shape, 2);
   2f41a:	2202      	movs	r2, #2
   2f41c:	4621      	mov	r1, r4
  const int stop_1 = StopForAxis(params_copy, input_shape, 1, start_1);
   2f41e:	900a      	str	r0, [sp, #40]	; 0x28
  const int start_2 = StartForAxis(params_copy, input_shape, 2);
   2f420:	a81f      	add	r0, sp, #124	; 0x7c
   2f422:	f7ff fdfa 	bl	2f01a <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_2 = StopForAxis(params_copy, input_shape, 2, start_2);
   2f426:	2202      	movs	r2, #2
   2f428:	4603      	mov	r3, r0
   2f42a:	4621      	mov	r1, r4
  const int start_2 = StartForAxis(params_copy, input_shape, 2);
   2f42c:	9005      	str	r0, [sp, #20]
  const int stop_2 = StopForAxis(params_copy, input_shape, 2, start_2);
   2f42e:	a81f      	add	r0, sp, #124	; 0x7c
   2f430:	f7ff fe18 	bl	2f064 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_3 = StartForAxis(params_copy, input_shape, 3);
   2f434:	2203      	movs	r2, #3
   2f436:	4621      	mov	r1, r4
  const int stop_2 = StopForAxis(params_copy, input_shape, 2, start_2);
   2f438:	900b      	str	r0, [sp, #44]	; 0x2c
  const int start_3 = StartForAxis(params_copy, input_shape, 3);
   2f43a:	a81f      	add	r0, sp, #124	; 0x7c
   2f43c:	f7ff fded 	bl	2f01a <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_3 = StopForAxis(params_copy, input_shape, 3, start_3);
   2f440:	2203      	movs	r2, #3
   2f442:	4603      	mov	r3, r0
   2f444:	4621      	mov	r1, r4
  const int start_3 = StartForAxis(params_copy, input_shape, 3);
   2f446:	9006      	str	r0, [sp, #24]
  const int stop_3 = StopForAxis(params_copy, input_shape, 3, start_3);
   2f448:	a81f      	add	r0, sp, #124	; 0x7c
   2f44a:	f7ff fe0b 	bl	2f064 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_4 = StartForAxis(params_copy, input_shape, 4);
   2f44e:	2204      	movs	r2, #4
   2f450:	4621      	mov	r1, r4
  const int stop_3 = StopForAxis(params_copy, input_shape, 3, start_3);
   2f452:	900c      	str	r0, [sp, #48]	; 0x30
  const int start_4 = StartForAxis(params_copy, input_shape, 4);
   2f454:	a81f      	add	r0, sp, #124	; 0x7c
   2f456:	f7ff fde0 	bl	2f01a <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_4 = StopForAxis(params_copy, input_shape, 4, start_4);
   2f45a:	2204      	movs	r2, #4
   2f45c:	4603      	mov	r3, r0
   2f45e:	4621      	mov	r1, r4
  const int start_4 = StartForAxis(params_copy, input_shape, 4);
   2f460:	9007      	str	r0, [sp, #28]
  const int stop_4 = StopForAxis(params_copy, input_shape, 4, start_4);
   2f462:	a81f      	add	r0, sp, #124	; 0x7c
   2f464:	f7ff fdfe 	bl	2f064 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  for (int offset_0 = start_0 * input_shape.Dims(1),
   2f468:	2101      	movs	r1, #1
  const int stop_4 = StopForAxis(params_copy, input_shape, 4, start_4);
   2f46a:	900d      	str	r0, [sp, #52]	; 0x34
  for (int offset_0 = start_0 * input_shape.Dims(1),
   2f46c:	4620      	mov	r0, r4
   2f46e:	f7f8 f8ab 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
           end_0 = stop_0 * input_shape.Dims(1),
   2f472:	fb06 f300 	mul.w	r3, r6, r0
   2f476:	9308      	str	r3, [sp, #32]
           step_0 = params_copy.strides[0] * input_shape.Dims(1);
   2f478:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  for (int offset_0 = start_0 * input_shape.Dims(1),
   2f47a:	4345      	muls	r5, r0
           step_0 = params_copy.strides[0] * input_shape.Dims(1);
   2f47c:	9300      	str	r3, [sp, #0]
   2f47e:	4343      	muls	r3, r0
   2f480:	930e      	str	r3, [sp, #56]	; 0x38
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   2f482:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   2f484:	9301      	str	r3, [sp, #4]
               step_2 = params_copy.strides[2] * input_shape.Dims(3);
   2f486:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   2f488:	9302      	str	r3, [sp, #8]
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   2f48a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   2f48c:	9303      	str	r3, [sp, #12]
               !LoopCondition(offset_4, end_4, params_copy.strides[4]);
   2f48e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   2f490:	9304      	str	r3, [sp, #16]
   2f492:	9b00      	ldr	r3, [sp, #0]
   2f494:	2b00      	cmp	r3, #0
   2f496:	9b08      	ldr	r3, [sp, #32]
   2f498:	dd6a      	ble.n	2f570 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1d0>
   2f49a:	429d      	cmp	r5, r3
   2f49c:	bfb4      	ite	lt
   2f49e:	2300      	movlt	r3, #0
   2f4a0:	2301      	movge	r3, #1
       !LoopCondition(offset_0, end_0, params_copy.strides[0]);
   2f4a2:	2b00      	cmp	r3, #0
   2f4a4:	f040 808c 	bne.w	2f5c0 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x220>
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   2f4a8:	2102      	movs	r1, #2
   2f4aa:	4620      	mov	r0, r4
   2f4ac:	f7f8 f88c 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
             end_1 = (offset_0 + stop_1) * input_shape.Dims(2),
   2f4b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   2f4b2:	eb08 0605 	add.w	r6, r8, r5
             end_1 = (offset_0 + stop_1) * input_shape.Dims(2),
   2f4b6:	eb03 0905 	add.w	r9, r3, r5
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   2f4ba:	9b01      	ldr	r3, [sp, #4]
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   2f4bc:	4346      	muls	r6, r0
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   2f4be:	4343      	muls	r3, r0
             end_1 = (offset_0 + stop_1) * input_shape.Dims(2),
   2f4c0:	fb00 f909 	mul.w	r9, r0, r9
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   2f4c4:	930f      	str	r3, [sp, #60]	; 0x3c
   2f4c6:	9b01      	ldr	r3, [sp, #4]
   2f4c8:	2b00      	cmp	r3, #0
   2f4ca:	dd56      	ble.n	2f57a <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1da>
   2f4cc:	454e      	cmp	r6, r9
   2f4ce:	bfb4      	ite	lt
   2f4d0:	2300      	movlt	r3, #0
   2f4d2:	2301      	movge	r3, #1
         !LoopCondition(offset_1, end_1, params_copy.strides[1]);
   2f4d4:	2b00      	cmp	r3, #0
   2f4d6:	d170      	bne.n	2f5ba <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x21a>
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
   2f4d8:	2103      	movs	r1, #3
   2f4da:	4620      	mov	r0, r4
   2f4dc:	f7f8 f874 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2f4e0:	9b05      	ldr	r3, [sp, #20]
   2f4e2:	199f      	adds	r7, r3, r6
               end_2 = (offset_1 + stop_2) * input_shape.Dims(3),
   2f4e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
   2f4e6:	4347      	muls	r7, r0
               end_2 = (offset_1 + stop_2) * input_shape.Dims(3),
   2f4e8:	eb03 0a06 	add.w	sl, r3, r6
               step_2 = params_copy.strides[2] * input_shape.Dims(3);
   2f4ec:	9b02      	ldr	r3, [sp, #8]
               end_2 = (offset_1 + stop_2) * input_shape.Dims(3),
   2f4ee:	fb00 fa0a 	mul.w	sl, r0, sl
               step_2 = params_copy.strides[2] * input_shape.Dims(3);
   2f4f2:	4343      	muls	r3, r0
   2f4f4:	9310      	str	r3, [sp, #64]	; 0x40
   2f4f6:	9b02      	ldr	r3, [sp, #8]
   2f4f8:	2b00      	cmp	r3, #0
   2f4fa:	dd43      	ble.n	2f584 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1e4>
   2f4fc:	4557      	cmp	r7, sl
   2f4fe:	bfb4      	ite	lt
   2f500:	2300      	movlt	r3, #0
   2f502:	2301      	movge	r3, #1
           !LoopCondition(offset_2, end_2, params_copy.strides[2]);
   2f504:	2b00      	cmp	r3, #0
   2f506:	d155      	bne.n	2f5b4 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x214>
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   2f508:	2104      	movs	r1, #4
   2f50a:	4620      	mov	r0, r4
   2f50c:	f7f8 f85c 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
   2f510:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   2f512:	9b06      	ldr	r3, [sp, #24]
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
   2f514:	eb02 0c07 	add.w	ip, r2, r7
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   2f518:	9a03      	ldr	r2, [sp, #12]
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   2f51a:	443b      	add	r3, r7
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   2f51c:	4342      	muls	r2, r0
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   2f51e:	4343      	muls	r3, r0
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
   2f520:	fb00 fc0c 	mul.w	ip, r0, ip
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   2f524:	9209      	str	r2, [sp, #36]	; 0x24
   2f526:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2f528:	18d1      	adds	r1, r2, r3
   2f52a:	9a03      	ldr	r2, [sp, #12]
   2f52c:	2a00      	cmp	r2, #0
   2f52e:	dd2e      	ble.n	2f58e <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ee>
   2f530:	4563      	cmp	r3, ip
   2f532:	bfb4      	ite	lt
   2f534:	2200      	movlt	r2, #0
   2f536:	2201      	movge	r2, #1
             !LoopCondition(offset_3, end_3, params_copy.strides[3]);
   2f538:	2a00      	cmp	r2, #0
   2f53a:	d138      	bne.n	2f5ae <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x20e>
   2f53c:	9a07      	ldr	r2, [sp, #28]
   2f53e:	f8dd e0f8 	ldr.w	lr, [sp, #248]	; 0xf8
   2f542:	441a      	add	r2, r3
   2f544:	9804      	ldr	r0, [sp, #16]
   2f546:	f8cd e0f8 	str.w	lr, [sp, #248]	; 0xf8
   2f54a:	2800      	cmp	r0, #0
   2f54c:	dd24      	ble.n	2f598 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1f8>
   2f54e:	428a      	cmp	r2, r1
   2f550:	bfb4      	ite	lt
   2f552:	f04f 0b00 	movlt.w	fp, #0
   2f556:	f04f 0b01 	movge.w	fp, #1
               !LoopCondition(offset_4, end_4, params_copy.strides[4]);
   2f55a:	f1bb 0f00 	cmp.w	fp, #0
   2f55e:	d122      	bne.n	2f5a6 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x206>
            *out_ptr++ = input_data[offset_4];
   2f560:	9811      	ldr	r0, [sp, #68]	; 0x44
   2f562:	f810 b002 	ldrb.w	fp, [r0, r2]
          for (int offset_4 = offset_3 + start_4, end_4 = offset_3 + stop_4;
   2f566:	9804      	ldr	r0, [sp, #16]
            *out_ptr++ = input_data[offset_4];
   2f568:	f80e bb01 	strb.w	fp, [lr], #1
          for (int offset_4 = offset_3 + start_4, end_4 = offset_3 + stop_4;
   2f56c:	4402      	add	r2, r0
   2f56e:	e7e9      	b.n	2f544 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1a4>
   2f570:	429d      	cmp	r5, r3
   2f572:	bfcc      	ite	gt
   2f574:	2300      	movgt	r3, #0
   2f576:	2301      	movle	r3, #1
   2f578:	e793      	b.n	2f4a2 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x102>
   2f57a:	454e      	cmp	r6, r9
   2f57c:	bfcc      	ite	gt
   2f57e:	2300      	movgt	r3, #0
   2f580:	2301      	movle	r3, #1
   2f582:	e7a7      	b.n	2f4d4 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x134>
   2f584:	4557      	cmp	r7, sl
   2f586:	bfcc      	ite	gt
   2f588:	2300      	movgt	r3, #0
   2f58a:	2301      	movle	r3, #1
   2f58c:	e7ba      	b.n	2f504 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x164>
   2f58e:	4563      	cmp	r3, ip
   2f590:	bfcc      	ite	gt
   2f592:	2200      	movgt	r2, #0
   2f594:	2201      	movle	r2, #1
   2f596:	e7cf      	b.n	2f538 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x198>
   2f598:	428a      	cmp	r2, r1
   2f59a:	bfcc      	ite	gt
   2f59c:	f04f 0b00 	movgt.w	fp, #0
   2f5a0:	f04f 0b01 	movle.w	fp, #1
   2f5a4:	e7d9      	b.n	2f55a <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ba>
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   2f5a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2f5a8:	4413      	add	r3, r2
   2f5aa:	4411      	add	r1, r2
   2f5ac:	e7bd      	b.n	2f52a <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18a>
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
   2f5ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2f5b0:	441f      	add	r7, r3
   2f5b2:	e7a0      	b.n	2f4f6 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x156>
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   2f5b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2f5b6:	441e      	add	r6, r3
   2f5b8:	e785      	b.n	2f4c6 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x126>
  for (int offset_0 = start_0 * input_shape.Dims(1),
   2f5ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2f5bc:	441d      	add	r5, r3
   2f5be:	e768      	b.n	2f492 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xf2>
  const RuntimeShape output_shape =
   2f5c0:	a819      	add	r0, sp, #100	; 0x64
   2f5c2:	f7f7 fff6 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape =
   2f5c6:	4620      	mov	r0, r4
   2f5c8:	f7f7 fff3 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   2f5cc:	b035      	add	sp, #212	; 0xd4
   2f5ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002f5d2 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>:
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
   2f5d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f5d6:	460e      	mov	r6, r1
   2f5d8:	b0b5      	sub	sp, #212	; 0xd4
  tflite::StridedSliceParams params_copy = op_params;
   2f5da:	4601      	mov	r1, r0
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
   2f5dc:	9211      	str	r2, [sp, #68]	; 0x44
  tflite::StridedSliceParams params_copy = op_params;
   2f5de:	a81f      	add	r0, sp, #124	; 0x7c
   2f5e0:	2254      	movs	r2, #84	; 0x54
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
   2f5e2:	461d      	mov	r5, r3
  tflite::StridedSliceParams params_copy = op_params;
   2f5e4:	f001 fc0c 	bl	30e00 <memcpy>
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 5);
   2f5e8:	6833      	ldr	r3, [r6, #0]
   2f5ea:	2b05      	cmp	r3, #5
   2f5ec:	dd01      	ble.n	2f5f2 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x20>
   2f5ee:	f001 fbe4 	bl	30dba <abort>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 5);
   2f5f2:	682b      	ldr	r3, [r5, #0]
   2f5f4:	2b05      	cmp	r3, #5
   2f5f6:	dcfa      	bgt.n	2f5ee <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1c>
   2f5f8:	ac13      	add	r4, sp, #76	; 0x4c
   2f5fa:	4632      	mov	r2, r6
   2f5fc:	2301      	movs	r3, #1
   2f5fe:	2105      	movs	r1, #5
   2f600:	4620      	mov	r0, r4
   2f602:	f7f8 f876 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2f606:	2301      	movs	r3, #1
   2f608:	462a      	mov	r2, r5
   2f60a:	2105      	movs	r1, #5
   2f60c:	a819      	add	r0, sp, #100	; 0x64
   2f60e:	f7f8 f870 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  strided_slice::StridedSlicePadIndices(&params_copy, 5);
   2f612:	2105      	movs	r1, #5
   2f614:	a81f      	add	r0, sp, #124	; 0x7c
   2f616:	f7ff fcaa 	bl	2ef6e <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi>
  const int start_0 = StartForAxis(params_copy, input_shape, 0);
   2f61a:	2200      	movs	r2, #0
   2f61c:	4621      	mov	r1, r4
   2f61e:	a81f      	add	r0, sp, #124	; 0x7c
   2f620:	f7ff fcfb 	bl	2f01a <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_0 = StopForAxis(params_copy, input_shape, 0, start_0);
   2f624:	2200      	movs	r2, #0
   2f626:	4603      	mov	r3, r0
  const int start_0 = StartForAxis(params_copy, input_shape, 0);
   2f628:	4605      	mov	r5, r0
  const int stop_0 = StopForAxis(params_copy, input_shape, 0, start_0);
   2f62a:	4621      	mov	r1, r4
   2f62c:	a81f      	add	r0, sp, #124	; 0x7c
   2f62e:	f7ff fd19 	bl	2f064 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_1 = StartForAxis(params_copy, input_shape, 1);
   2f632:	2201      	movs	r2, #1
  const int stop_0 = StopForAxis(params_copy, input_shape, 0, start_0);
   2f634:	4606      	mov	r6, r0
  const int start_1 = StartForAxis(params_copy, input_shape, 1);
   2f636:	4621      	mov	r1, r4
   2f638:	a81f      	add	r0, sp, #124	; 0x7c
   2f63a:	f7ff fcee 	bl	2f01a <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_1 = StopForAxis(params_copy, input_shape, 1, start_1);
   2f63e:	2201      	movs	r2, #1
   2f640:	4603      	mov	r3, r0
   2f642:	4621      	mov	r1, r4
  const int start_1 = StartForAxis(params_copy, input_shape, 1);
   2f644:	4680      	mov	r8, r0
  const int stop_1 = StopForAxis(params_copy, input_shape, 1, start_1);
   2f646:	a81f      	add	r0, sp, #124	; 0x7c
   2f648:	f7ff fd0c 	bl	2f064 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_2 = StartForAxis(params_copy, input_shape, 2);
   2f64c:	2202      	movs	r2, #2
   2f64e:	4621      	mov	r1, r4
  const int stop_1 = StopForAxis(params_copy, input_shape, 1, start_1);
   2f650:	900a      	str	r0, [sp, #40]	; 0x28
  const int start_2 = StartForAxis(params_copy, input_shape, 2);
   2f652:	a81f      	add	r0, sp, #124	; 0x7c
   2f654:	f7ff fce1 	bl	2f01a <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_2 = StopForAxis(params_copy, input_shape, 2, start_2);
   2f658:	2202      	movs	r2, #2
   2f65a:	4603      	mov	r3, r0
   2f65c:	4621      	mov	r1, r4
  const int start_2 = StartForAxis(params_copy, input_shape, 2);
   2f65e:	9005      	str	r0, [sp, #20]
  const int stop_2 = StopForAxis(params_copy, input_shape, 2, start_2);
   2f660:	a81f      	add	r0, sp, #124	; 0x7c
   2f662:	f7ff fcff 	bl	2f064 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_3 = StartForAxis(params_copy, input_shape, 3);
   2f666:	2203      	movs	r2, #3
   2f668:	4621      	mov	r1, r4
  const int stop_2 = StopForAxis(params_copy, input_shape, 2, start_2);
   2f66a:	900b      	str	r0, [sp, #44]	; 0x2c
  const int start_3 = StartForAxis(params_copy, input_shape, 3);
   2f66c:	a81f      	add	r0, sp, #124	; 0x7c
   2f66e:	f7ff fcd4 	bl	2f01a <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_3 = StopForAxis(params_copy, input_shape, 3, start_3);
   2f672:	2203      	movs	r2, #3
   2f674:	4603      	mov	r3, r0
   2f676:	4621      	mov	r1, r4
  const int start_3 = StartForAxis(params_copy, input_shape, 3);
   2f678:	9006      	str	r0, [sp, #24]
  const int stop_3 = StopForAxis(params_copy, input_shape, 3, start_3);
   2f67a:	a81f      	add	r0, sp, #124	; 0x7c
   2f67c:	f7ff fcf2 	bl	2f064 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_4 = StartForAxis(params_copy, input_shape, 4);
   2f680:	2204      	movs	r2, #4
   2f682:	4621      	mov	r1, r4
  const int stop_3 = StopForAxis(params_copy, input_shape, 3, start_3);
   2f684:	900c      	str	r0, [sp, #48]	; 0x30
  const int start_4 = StartForAxis(params_copy, input_shape, 4);
   2f686:	a81f      	add	r0, sp, #124	; 0x7c
   2f688:	f7ff fcc7 	bl	2f01a <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_4 = StopForAxis(params_copy, input_shape, 4, start_4);
   2f68c:	2204      	movs	r2, #4
   2f68e:	4603      	mov	r3, r0
   2f690:	4621      	mov	r1, r4
  const int start_4 = StartForAxis(params_copy, input_shape, 4);
   2f692:	9007      	str	r0, [sp, #28]
  const int stop_4 = StopForAxis(params_copy, input_shape, 4, start_4);
   2f694:	a81f      	add	r0, sp, #124	; 0x7c
   2f696:	f7ff fce5 	bl	2f064 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  for (int offset_0 = start_0 * input_shape.Dims(1),
   2f69a:	2101      	movs	r1, #1
  const int stop_4 = StopForAxis(params_copy, input_shape, 4, start_4);
   2f69c:	900d      	str	r0, [sp, #52]	; 0x34
  for (int offset_0 = start_0 * input_shape.Dims(1),
   2f69e:	4620      	mov	r0, r4
   2f6a0:	f7f7 ff92 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
           end_0 = stop_0 * input_shape.Dims(1),
   2f6a4:	fb06 f300 	mul.w	r3, r6, r0
   2f6a8:	9308      	str	r3, [sp, #32]
           step_0 = params_copy.strides[0] * input_shape.Dims(1);
   2f6aa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  for (int offset_0 = start_0 * input_shape.Dims(1),
   2f6ac:	4345      	muls	r5, r0
           step_0 = params_copy.strides[0] * input_shape.Dims(1);
   2f6ae:	9300      	str	r3, [sp, #0]
   2f6b0:	4343      	muls	r3, r0
   2f6b2:	930e      	str	r3, [sp, #56]	; 0x38
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   2f6b4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   2f6b6:	9301      	str	r3, [sp, #4]
               step_2 = params_copy.strides[2] * input_shape.Dims(3);
   2f6b8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   2f6ba:	9302      	str	r3, [sp, #8]
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   2f6bc:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   2f6be:	9303      	str	r3, [sp, #12]
               !LoopCondition(offset_4, end_4, params_copy.strides[4]);
   2f6c0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   2f6c2:	9304      	str	r3, [sp, #16]
   2f6c4:	9b00      	ldr	r3, [sp, #0]
   2f6c6:	2b00      	cmp	r3, #0
   2f6c8:	9b08      	ldr	r3, [sp, #32]
   2f6ca:	dd6a      	ble.n	2f7a2 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1d0>
   2f6cc:	429d      	cmp	r5, r3
   2f6ce:	bfb4      	ite	lt
   2f6d0:	2300      	movlt	r3, #0
   2f6d2:	2301      	movge	r3, #1
       !LoopCondition(offset_0, end_0, params_copy.strides[0]);
   2f6d4:	2b00      	cmp	r3, #0
   2f6d6:	f040 808c 	bne.w	2f7f2 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x220>
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   2f6da:	2102      	movs	r1, #2
   2f6dc:	4620      	mov	r0, r4
   2f6de:	f7f7 ff73 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
             end_1 = (offset_0 + stop_1) * input_shape.Dims(2),
   2f6e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   2f6e4:	eb08 0605 	add.w	r6, r8, r5
             end_1 = (offset_0 + stop_1) * input_shape.Dims(2),
   2f6e8:	eb03 0905 	add.w	r9, r3, r5
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   2f6ec:	9b01      	ldr	r3, [sp, #4]
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   2f6ee:	4346      	muls	r6, r0
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   2f6f0:	4343      	muls	r3, r0
             end_1 = (offset_0 + stop_1) * input_shape.Dims(2),
   2f6f2:	fb00 f909 	mul.w	r9, r0, r9
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   2f6f6:	930f      	str	r3, [sp, #60]	; 0x3c
   2f6f8:	9b01      	ldr	r3, [sp, #4]
   2f6fa:	2b00      	cmp	r3, #0
   2f6fc:	dd56      	ble.n	2f7ac <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1da>
   2f6fe:	454e      	cmp	r6, r9
   2f700:	bfb4      	ite	lt
   2f702:	2300      	movlt	r3, #0
   2f704:	2301      	movge	r3, #1
         !LoopCondition(offset_1, end_1, params_copy.strides[1]);
   2f706:	2b00      	cmp	r3, #0
   2f708:	d170      	bne.n	2f7ec <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x21a>
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
   2f70a:	2103      	movs	r1, #3
   2f70c:	4620      	mov	r0, r4
   2f70e:	f7f7 ff5b 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
   2f712:	9b05      	ldr	r3, [sp, #20]
   2f714:	199f      	adds	r7, r3, r6
               end_2 = (offset_1 + stop_2) * input_shape.Dims(3),
   2f716:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
   2f718:	4347      	muls	r7, r0
               end_2 = (offset_1 + stop_2) * input_shape.Dims(3),
   2f71a:	eb03 0a06 	add.w	sl, r3, r6
               step_2 = params_copy.strides[2] * input_shape.Dims(3);
   2f71e:	9b02      	ldr	r3, [sp, #8]
               end_2 = (offset_1 + stop_2) * input_shape.Dims(3),
   2f720:	fb00 fa0a 	mul.w	sl, r0, sl
               step_2 = params_copy.strides[2] * input_shape.Dims(3);
   2f724:	4343      	muls	r3, r0
   2f726:	9310      	str	r3, [sp, #64]	; 0x40
   2f728:	9b02      	ldr	r3, [sp, #8]
   2f72a:	2b00      	cmp	r3, #0
   2f72c:	dd43      	ble.n	2f7b6 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1e4>
   2f72e:	4557      	cmp	r7, sl
   2f730:	bfb4      	ite	lt
   2f732:	2300      	movlt	r3, #0
   2f734:	2301      	movge	r3, #1
           !LoopCondition(offset_2, end_2, params_copy.strides[2]);
   2f736:	2b00      	cmp	r3, #0
   2f738:	d155      	bne.n	2f7e6 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x214>
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   2f73a:	2104      	movs	r1, #4
   2f73c:	4620      	mov	r0, r4
   2f73e:	f7f7 ff43 	bl	275c8 <_ZNK6tflite12RuntimeShape4DimsEi>
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
   2f742:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   2f744:	9b06      	ldr	r3, [sp, #24]
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
   2f746:	eb02 0c07 	add.w	ip, r2, r7
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   2f74a:	9a03      	ldr	r2, [sp, #12]
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   2f74c:	443b      	add	r3, r7
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   2f74e:	4342      	muls	r2, r0
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   2f750:	4343      	muls	r3, r0
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
   2f752:	fb00 fc0c 	mul.w	ip, r0, ip
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   2f756:	9209      	str	r2, [sp, #36]	; 0x24
   2f758:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2f75a:	18d1      	adds	r1, r2, r3
   2f75c:	9a03      	ldr	r2, [sp, #12]
   2f75e:	2a00      	cmp	r2, #0
   2f760:	dd2e      	ble.n	2f7c0 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ee>
   2f762:	4563      	cmp	r3, ip
   2f764:	bfb4      	ite	lt
   2f766:	2200      	movlt	r2, #0
   2f768:	2201      	movge	r2, #1
             !LoopCondition(offset_3, end_3, params_copy.strides[3]);
   2f76a:	2a00      	cmp	r2, #0
   2f76c:	d138      	bne.n	2f7e0 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x20e>
   2f76e:	9a07      	ldr	r2, [sp, #28]
   2f770:	f8dd e0f8 	ldr.w	lr, [sp, #248]	; 0xf8
   2f774:	441a      	add	r2, r3
   2f776:	9804      	ldr	r0, [sp, #16]
   2f778:	f8cd e0f8 	str.w	lr, [sp, #248]	; 0xf8
   2f77c:	2800      	cmp	r0, #0
   2f77e:	dd24      	ble.n	2f7ca <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1f8>
   2f780:	428a      	cmp	r2, r1
   2f782:	bfb4      	ite	lt
   2f784:	f04f 0b00 	movlt.w	fp, #0
   2f788:	f04f 0b01 	movge.w	fp, #1
               !LoopCondition(offset_4, end_4, params_copy.strides[4]);
   2f78c:	f1bb 0f00 	cmp.w	fp, #0
   2f790:	d122      	bne.n	2f7d8 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x206>
            *out_ptr++ = input_data[offset_4];
   2f792:	9811      	ldr	r0, [sp, #68]	; 0x44
   2f794:	f910 b002 	ldrsb.w	fp, [r0, r2]
          for (int offset_4 = offset_3 + start_4, end_4 = offset_3 + stop_4;
   2f798:	9804      	ldr	r0, [sp, #16]
            *out_ptr++ = input_data[offset_4];
   2f79a:	f80e bb01 	strb.w	fp, [lr], #1
          for (int offset_4 = offset_3 + start_4, end_4 = offset_3 + stop_4;
   2f79e:	4402      	add	r2, r0
   2f7a0:	e7e9      	b.n	2f776 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1a4>
   2f7a2:	429d      	cmp	r5, r3
   2f7a4:	bfcc      	ite	gt
   2f7a6:	2300      	movgt	r3, #0
   2f7a8:	2301      	movle	r3, #1
   2f7aa:	e793      	b.n	2f6d4 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x102>
   2f7ac:	454e      	cmp	r6, r9
   2f7ae:	bfcc      	ite	gt
   2f7b0:	2300      	movgt	r3, #0
   2f7b2:	2301      	movle	r3, #1
   2f7b4:	e7a7      	b.n	2f706 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x134>
   2f7b6:	4557      	cmp	r7, sl
   2f7b8:	bfcc      	ite	gt
   2f7ba:	2300      	movgt	r3, #0
   2f7bc:	2301      	movle	r3, #1
   2f7be:	e7ba      	b.n	2f736 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x164>
   2f7c0:	4563      	cmp	r3, ip
   2f7c2:	bfcc      	ite	gt
   2f7c4:	2200      	movgt	r2, #0
   2f7c6:	2201      	movle	r2, #1
   2f7c8:	e7cf      	b.n	2f76a <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x198>
   2f7ca:	428a      	cmp	r2, r1
   2f7cc:	bfcc      	ite	gt
   2f7ce:	f04f 0b00 	movgt.w	fp, #0
   2f7d2:	f04f 0b01 	movle.w	fp, #1
   2f7d6:	e7d9      	b.n	2f78c <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ba>
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   2f7d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2f7da:	4413      	add	r3, r2
   2f7dc:	4411      	add	r1, r2
   2f7de:	e7bd      	b.n	2f75c <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18a>
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
   2f7e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2f7e2:	441f      	add	r7, r3
   2f7e4:	e7a0      	b.n	2f728 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x156>
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   2f7e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2f7e8:	441e      	add	r6, r3
   2f7ea:	e785      	b.n	2f6f8 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x126>
  for (int offset_0 = start_0 * input_shape.Dims(1),
   2f7ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2f7ee:	441d      	add	r5, r3
   2f7f0:	e768      	b.n	2f6c4 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xf2>
  const RuntimeShape output_shape =
   2f7f2:	a819      	add	r0, sp, #100	; 0x64
   2f7f4:	f7f7 fedd 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape =
   2f7f8:	4620      	mov	r0, r4
   2f7fa:	f7f7 feda 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   2f7fe:	b035      	add	sp, #212	; 0xd4
   2f800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002f804 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>:
                const RuntimeShape& output_shape, uint8* output_data) {
   2f804:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f808:	4604      	mov	r4, r0
   2f80a:	4690      	mov	r8, r2
   2f80c:	4608      	mov	r0, r1
   2f80e:	4619      	mov	r1, r3
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   2f810:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	; 0x2c
   2f814:	429a      	cmp	r2, r3
                const RuntimeShape& output_shape, uint8* output_data) {
   2f816:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   2f818:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   2f81a:	dd01      	ble.n	2f820 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x1c>
   2f81c:	f001 facd 	bl	30dba <abort>
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
   2f820:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2f822:	f7f7 ffb5 	bl	27790 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
  TFLITE_DCHECK_GT(params.input1_offset, -256);
   2f826:	6862      	ldr	r2, [r4, #4]
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
   2f828:	4681      	mov	r9, r0
  TFLITE_DCHECK_GT(params.input1_offset, -256);
   2f82a:	f112 0fff 	cmn.w	r2, #255	; 0xff
   2f82e:	dbf5      	blt.n	2f81c <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x18>
  TFLITE_DCHECK_LT(params.input1_offset, 256);
   2f830:	2aff      	cmp	r2, #255	; 0xff
  TFLITE_DCHECK_GT(params.input2_offset, -256);
   2f832:	68a3      	ldr	r3, [r4, #8]
  TFLITE_DCHECK_LT(params.input1_offset, 256);
   2f834:	dcf2      	bgt.n	2f81c <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x18>
  TFLITE_DCHECK_LT(params.input2_offset, 256);
   2f836:	33ff      	adds	r3, #255	; 0xff
   2f838:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
   2f83c:	d8ee      	bhi.n	2f81c <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x18>
  for (int i = 0; i < size; ++i) {
   2f83e:	2700      	movs	r7, #0
   2f840:	45b9      	cmp	r9, r7
   2f842:	dd29      	ble.n	2f898 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x94>
    const int32 input2_val = params.input2_offset + input2_data[i];
   2f844:	f816 a007 	ldrb.w	sl, [r6, r7]
   2f848:	68a3      	ldr	r3, [r4, #8]
    const int32 input1_val = params.input1_offset + input1_data[i];
   2f84a:	6862      	ldr	r2, [r4, #4]
    const int32 input2_val = params.input2_offset + input2_data[i];
   2f84c:	449a      	add	sl, r3
    const int32 input1_val = params.input1_offset + input1_data[i];
   2f84e:	f818 3007 	ldrb.w	r3, [r8, r7]
    const int32 shifted_input1_val = input1_val * (1 << params.left_shift);
   2f852:	69a0      	ldr	r0, [r4, #24]
    const int32 input1_val = params.input1_offset + input1_data[i];
   2f854:	4413      	add	r3, r2
    const int32 shifted_input2_val = input2_val * (1 << params.left_shift);
   2f856:	fa0a fa00 	lsl.w	sl, sl, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2f85a:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
   2f85e:	fa03 f000 	lsl.w	r0, r3, r0
   2f862:	f7e7 f9bf 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2f866:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2f86a:	4683      	mov	fp, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2f86c:	4650      	mov	r0, sl
   2f86e:	f7e7 f9b9 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2f872:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   2f876:	ebab 0000 	sub.w	r0, fp, r0
   2f87a:	f7e7 f9b3 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
            raw_sub, params.output_multiplier, params.output_shift) +
   2f87e:	68e3      	ldr	r3, [r4, #12]
   2f880:	4403      	add	r3, r0
    output_data[i] = static_cast<uint8>(clamped_output);
   2f882:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2f884:	4283      	cmp	r3, r0
   2f886:	bfb8      	it	lt
   2f888:	4603      	movlt	r3, r0
   2f88a:	6b20      	ldr	r0, [r4, #48]	; 0x30
   2f88c:	4283      	cmp	r3, r0
   2f88e:	bfa8      	it	ge
   2f890:	4603      	movge	r3, r0
   2f892:	55eb      	strb	r3, [r5, r7]
  for (int i = 0; i < size; ++i) {
   2f894:	3701      	adds	r7, #1
   2f896:	e7d3      	b.n	2f840 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x3c>
}
   2f898:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002f89c <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>:
                const RuntimeShape& output_shape, int8_t* output_data) {
   2f89c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f8a0:	4604      	mov	r4, r0
   2f8a2:	4690      	mov	r8, r2
   2f8a4:	4608      	mov	r0, r1
   2f8a6:	4619      	mov	r1, r3
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   2f8a8:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	; 0x2c
   2f8ac:	429a      	cmp	r2, r3
                const RuntimeShape& output_shape, int8_t* output_data) {
   2f8ae:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   2f8b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   2f8b2:	dd01      	ble.n	2f8b8 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x1c>
   2f8b4:	f001 fa81 	bl	30dba <abort>
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
   2f8b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2f8ba:	f7f7 ff69 	bl	27790 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
  TFLITE_DCHECK_GE(params.input1_offset, -1 * int8_max_value);
   2f8be:	6862      	ldr	r2, [r4, #4]
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
   2f8c0:	4681      	mov	r9, r0
  TFLITE_DCHECK_GE(params.input1_offset, -1 * int8_max_value);
   2f8c2:	f112 0f7f 	cmn.w	r2, #127	; 0x7f
   2f8c6:	dbf5      	blt.n	2f8b4 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x18>
  TFLITE_DCHECK_LE(params.input1_offset, int8_max_value);
   2f8c8:	2a7f      	cmp	r2, #127	; 0x7f
  TFLITE_DCHECK_GE(params.input2_offset, -1 * int8_max_value);
   2f8ca:	68a3      	ldr	r3, [r4, #8]
  TFLITE_DCHECK_LE(params.input1_offset, int8_max_value);
   2f8cc:	dcf2      	bgt.n	2f8b4 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x18>
  TFLITE_DCHECK_LE(params.input2_offset, int8_max_value);
   2f8ce:	337f      	adds	r3, #127	; 0x7f
   2f8d0:	2bfe      	cmp	r3, #254	; 0xfe
   2f8d2:	d8ef      	bhi.n	2f8b4 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x18>
  for (int i = 0; i < size; ++i) {
   2f8d4:	2700      	movs	r7, #0
   2f8d6:	45b9      	cmp	r9, r7
   2f8d8:	dd29      	ble.n	2f92e <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x92>
    const int32 input2_val = params.input2_offset + input2_data[i];
   2f8da:	f916 a007 	ldrsb.w	sl, [r6, r7]
   2f8de:	68a3      	ldr	r3, [r4, #8]
    const int32 input1_val = params.input1_offset + input1_data[i];
   2f8e0:	6862      	ldr	r2, [r4, #4]
    const int32 input2_val = params.input2_offset + input2_data[i];
   2f8e2:	449a      	add	sl, r3
    const int32 input1_val = params.input1_offset + input1_data[i];
   2f8e4:	f918 3007 	ldrsb.w	r3, [r8, r7]
    const int32 shifted_input1_val = input1_val * (1 << params.left_shift);
   2f8e8:	69a0      	ldr	r0, [r4, #24]
    const int32 input1_val = params.input1_offset + input1_data[i];
   2f8ea:	4413      	add	r3, r2
    const int32 shifted_input2_val = input2_val * (1 << params.left_shift);
   2f8ec:	fa0a fa00 	lsl.w	sl, sl, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2f8f0:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
   2f8f4:	fa03 f000 	lsl.w	r0, r3, r0
   2f8f8:	f7e7 f974 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2f8fc:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2f900:	4683      	mov	fp, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2f902:	4650      	mov	r0, sl
   2f904:	f7e7 f96e 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2f908:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   2f90c:	ebab 0000 	sub.w	r0, fp, r0
   2f910:	f7e7 f968 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
            raw_sub, params.output_multiplier, params.output_shift) +
   2f914:	68e3      	ldr	r3, [r4, #12]
   2f916:	4403      	add	r3, r0
    output_data[i] = static_cast<int8_t>(clamped_output);
   2f918:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2f91a:	4283      	cmp	r3, r0
   2f91c:	bfb8      	it	lt
   2f91e:	4603      	movlt	r3, r0
   2f920:	6b20      	ldr	r0, [r4, #48]	; 0x30
   2f922:	4283      	cmp	r3, r0
   2f924:	bfa8      	it	ge
   2f926:	4603      	movge	r3, r0
   2f928:	55eb      	strb	r3, [r5, r7]
  for (int i = 0; i < size; ++i) {
   2f92a:	3701      	adds	r7, #1
   2f92c:	e7d3      	b.n	2f8d6 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x3a>
}
   2f92e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002f932 <_ZZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_PaENKUlPiE_clESB_>:
  auto sub_func = [&](int indexes[N]) {
   2f932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f936:	4605      	mov	r5, r0
   2f938:	6804      	ldr	r4, [r0, #0]
        params.input1_offset + input1_data[SubscriptToIndex(desc1, indexes)];
   2f93a:	6880      	ldr	r0, [r0, #8]
  auto sub_func = [&](int indexes[N]) {
   2f93c:	460f      	mov	r7, r1
        params.input1_offset + input1_data[SubscriptToIndex(desc1, indexes)];
   2f93e:	f7fc fcf3 	bl	2c328 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   2f942:	686b      	ldr	r3, [r5, #4]
        params.input2_offset + input2_data[SubscriptToIndex(desc2, indexes)];
   2f944:	4639      	mov	r1, r7
        params.input1_offset + input1_data[SubscriptToIndex(desc1, indexes)];
   2f946:	681b      	ldr	r3, [r3, #0]
   2f948:	f913 8000 	ldrsb.w	r8, [r3, r0]
    const int32_t input1_val =
   2f94c:	6863      	ldr	r3, [r4, #4]
        params.input2_offset + input2_data[SubscriptToIndex(desc2, indexes)];
   2f94e:	6928      	ldr	r0, [r5, #16]
    const int32_t input1_val =
   2f950:	4498      	add	r8, r3
        params.input2_offset + input2_data[SubscriptToIndex(desc2, indexes)];
   2f952:	f7fc fce9 	bl	2c328 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   2f956:	68ea      	ldr	r2, [r5, #12]
    const int32_t shifted_input1_val = input1_val * (1 << params.left_shift);
   2f958:	69a3      	ldr	r3, [r4, #24]
        params.input2_offset + input2_data[SubscriptToIndex(desc2, indexes)];
   2f95a:	6812      	ldr	r2, [r2, #0]
   2f95c:	5616      	ldrsb	r6, [r2, r0]
    const int32_t input2_val =
   2f95e:	68a2      	ldr	r2, [r4, #8]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2f960:	fa08 f003 	lsl.w	r0, r8, r3
    const int32_t input2_val =
   2f964:	4416      	add	r6, r2
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2f966:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
    const int32_t shifted_input2_val = input2_val * (1 << params.left_shift);
   2f96a:	409e      	lsls	r6, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2f96c:	f7e7 f93a 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2f970:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2f974:	4680      	mov	r8, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2f976:	4630      	mov	r0, r6
   2f978:	f7e7 f934 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2f97c:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   2f980:	eba8 0000 	sub.w	r0, r8, r0
   2f984:	f7e7 f92e 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
            raw_sub, params.output_multiplier, params.output_shift) +
   2f988:	68e3      	ldr	r3, [r4, #12]
    output_data[SubscriptToIndex(output_desc, indexes)] =
   2f98a:	4639      	mov	r1, r7
            raw_sub, params.output_multiplier, params.output_shift) +
   2f98c:	4418      	add	r0, r3
   2f98e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2f990:	6b24      	ldr	r4, [r4, #48]	; 0x30
   2f992:	4298      	cmp	r0, r3
   2f994:	bfb8      	it	lt
   2f996:	4618      	movlt	r0, r3
   2f998:	4284      	cmp	r4, r0
   2f99a:	bfa8      	it	ge
   2f99c:	4604      	movge	r4, r0
    output_data[SubscriptToIndex(output_desc, indexes)] =
   2f99e:	69a8      	ldr	r0, [r5, #24]
   2f9a0:	f7fc fcc2 	bl	2c328 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   2f9a4:	696b      	ldr	r3, [r5, #20]
   2f9a6:	681b      	ldr	r3, [r3, #0]
   2f9a8:	541c      	strb	r4, [r3, r0]
  auto sub_func = [&](int indexes[N]) {
   2f9aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002f9ae <_ZZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_PhENKUlPiE_clESB_>:
  auto sub_func = [&](int indexes[N]) {
   2f9ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f9b2:	4605      	mov	r5, r0
   2f9b4:	6804      	ldr	r4, [r0, #0]
        params.input1_offset + input1_data[SubscriptToIndex(desc1, indexes)];
   2f9b6:	6880      	ldr	r0, [r0, #8]
  auto sub_func = [&](int indexes[N]) {
   2f9b8:	460f      	mov	r7, r1
        params.input1_offset + input1_data[SubscriptToIndex(desc1, indexes)];
   2f9ba:	f7fc fcb5 	bl	2c328 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   2f9be:	686b      	ldr	r3, [r5, #4]
        params.input2_offset + input2_data[SubscriptToIndex(desc2, indexes)];
   2f9c0:	4639      	mov	r1, r7
        params.input1_offset + input1_data[SubscriptToIndex(desc1, indexes)];
   2f9c2:	681b      	ldr	r3, [r3, #0]
   2f9c4:	f813 8000 	ldrb.w	r8, [r3, r0]
    const int32 input1_val =
   2f9c8:	6863      	ldr	r3, [r4, #4]
        params.input2_offset + input2_data[SubscriptToIndex(desc2, indexes)];
   2f9ca:	6928      	ldr	r0, [r5, #16]
    const int32 input1_val =
   2f9cc:	4498      	add	r8, r3
        params.input2_offset + input2_data[SubscriptToIndex(desc2, indexes)];
   2f9ce:	f7fc fcab 	bl	2c328 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   2f9d2:	68ea      	ldr	r2, [r5, #12]
    const int32 shifted_input1_val = input1_val * (1 << params.left_shift);
   2f9d4:	69a3      	ldr	r3, [r4, #24]
        params.input2_offset + input2_data[SubscriptToIndex(desc2, indexes)];
   2f9d6:	6812      	ldr	r2, [r2, #0]
   2f9d8:	5c16      	ldrb	r6, [r2, r0]
    const int32 input2_val =
   2f9da:	68a2      	ldr	r2, [r4, #8]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2f9dc:	fa08 f003 	lsl.w	r0, r8, r3
    const int32 input2_val =
   2f9e0:	4416      	add	r6, r2
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2f9e2:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
    const int32 shifted_input2_val = input2_val * (1 << params.left_shift);
   2f9e6:	409e      	lsls	r6, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2f9e8:	f7e7 f8fc 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2f9ec:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2f9f0:	4680      	mov	r8, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2f9f2:	4630      	mov	r0, r6
   2f9f4:	f7e7 f8f6 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2f9f8:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   2f9fc:	eba8 0000 	sub.w	r0, r8, r0
   2fa00:	f7e7 f8f0 	bl	16be4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
            raw_sub, params.output_multiplier, params.output_shift) +
   2fa04:	68e3      	ldr	r3, [r4, #12]
    output_data[SubscriptToIndex(output_desc, indexes)] =
   2fa06:	4639      	mov	r1, r7
            raw_sub, params.output_multiplier, params.output_shift) +
   2fa08:	4418      	add	r0, r3
   2fa0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2fa0c:	6b24      	ldr	r4, [r4, #48]	; 0x30
   2fa0e:	4298      	cmp	r0, r3
   2fa10:	bfb8      	it	lt
   2fa12:	4618      	movlt	r0, r3
   2fa14:	4284      	cmp	r4, r0
   2fa16:	bfa8      	it	ge
   2fa18:	4604      	movge	r4, r0
    output_data[SubscriptToIndex(output_desc, indexes)] =
   2fa1a:	69a8      	ldr	r0, [r5, #24]
   2fa1c:	f7fc fc84 	bl	2c328 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   2fa20:	696b      	ldr	r3, [r5, #20]
   2fa22:	681b      	ldr	r3, [r3, #0]
   2fa24:	541c      	strb	r4, [r3, r0]
  auto sub_func = [&](int indexes[N]) {
   2fa26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002fa2a <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa>:
inline void BroadcastSubSlow(const ArithmeticParams& params,
   2fa2a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fa2c:	4604      	mov	r4, r0
   2fa2e:	b0ad      	sub	sp, #180	; 0xb4
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   2fa30:	ae18      	add	r6, sp, #96	; 0x60
   2fa32:	af0e      	add	r7, sp, #56	; 0x38
inline void BroadcastSubSlow(const ArithmeticParams& params,
   2fa34:	4608      	mov	r0, r1
   2fa36:	9201      	str	r2, [sp, #4]
   2fa38:	4619      	mov	r1, r3
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   2fa3a:	463a      	mov	r2, r7
   2fa3c:	4633      	mov	r3, r6
   2fa3e:	f7fc fc9e 	bl	2c37e <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  CopyDimsToDesc(RuntimeShape::ExtendedShape(N, output_shape), &output_desc);
   2fa42:	ad22      	add	r5, sp, #136	; 0x88
   2fa44:	2301      	movs	r3, #1
   2fa46:	9a33      	ldr	r2, [sp, #204]	; 0xcc
   2fa48:	2105      	movs	r1, #5
   2fa4a:	a807      	add	r0, sp, #28
   2fa4c:	f7f7 fe51 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2fa50:	4629      	mov	r1, r5
   2fa52:	a807      	add	r0, sp, #28
   2fa54:	f7fc fc7d 	bl	2c352 <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
   2fa58:	a807      	add	r0, sp, #28
   2fa5a:	f7f7 fdaa 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  auto sub_func = [&](int indexes[N]) {
   2fa5e:	ab01      	add	r3, sp, #4
   2fa60:	e9cd 3708 	strd	r3, r7, [sp, #32]
   2fa64:	ab32      	add	r3, sp, #200	; 0xc8
   2fa66:	e9cd 360a 	strd	r3, r6, [sp, #40]	; 0x28
  int indexes[N] = {0};
   2fa6a:	2214      	movs	r2, #20
   2fa6c:	ab34      	add	r3, sp, #208	; 0xd0
   2fa6e:	2100      	movs	r1, #0
   2fa70:	a802      	add	r0, sp, #8
   2fa72:	9407      	str	r4, [sp, #28]
   2fa74:	e9cd 350c 	strd	r3, r5, [sp, #48]	; 0x30
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2fa78:	2400      	movs	r4, #0
  int indexes[N] = {0};
   2fa7a:	f001 f9e8 	bl	30e4e <memset>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2fa7e:	9a02      	ldr	r2, [sp, #8]
   2fa80:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2fa82:	429a      	cmp	r2, r3
   2fa84:	da2b      	bge.n	2fade <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa+0xb4>
   2fa86:	9403      	str	r4, [sp, #12]
   2fa88:	9a03      	ldr	r2, [sp, #12]
   2fa8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2fa8c:	429a      	cmp	r2, r3
   2fa8e:	da22      	bge.n	2fad6 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa+0xac>
   2fa90:	9404      	str	r4, [sp, #16]
   2fa92:	9a04      	ldr	r2, [sp, #16]
   2fa94:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2fa96:	429a      	cmp	r2, r3
   2fa98:	da19      	bge.n	2face <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa+0xa4>
   2fa9a:	9405      	str	r4, [sp, #20]
   2fa9c:	9a05      	ldr	r2, [sp, #20]
   2fa9e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2faa0:	429a      	cmp	r2, r3
   2faa2:	da10      	bge.n	2fac6 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa+0x9c>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2faa4:	9406      	str	r4, [sp, #24]
   2faa6:	9a06      	ldr	r2, [sp, #24]
   2faa8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2faaa:	429a      	cmp	r2, r3
   2faac:	da07      	bge.n	2fabe <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa+0x94>
    calc(indexes);
   2faae:	a902      	add	r1, sp, #8
   2fab0:	a807      	add	r0, sp, #28
   2fab2:	f7ff ff3e 	bl	2f932 <_ZZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_PaENKUlPiE_clESB_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2fab6:	9b06      	ldr	r3, [sp, #24]
   2fab8:	3301      	adds	r3, #1
   2faba:	9306      	str	r3, [sp, #24]
   2fabc:	e7f3      	b.n	2faa6 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa+0x7c>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2fabe:	9b05      	ldr	r3, [sp, #20]
   2fac0:	3301      	adds	r3, #1
   2fac2:	9305      	str	r3, [sp, #20]
   2fac4:	e7ea      	b.n	2fa9c <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa+0x72>
   2fac6:	9b04      	ldr	r3, [sp, #16]
   2fac8:	3301      	adds	r3, #1
   2faca:	9304      	str	r3, [sp, #16]
   2facc:	e7e1      	b.n	2fa92 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa+0x68>
   2face:	9b03      	ldr	r3, [sp, #12]
   2fad0:	3301      	adds	r3, #1
   2fad2:	9303      	str	r3, [sp, #12]
   2fad4:	e7d8      	b.n	2fa88 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa+0x5e>
   2fad6:	9b02      	ldr	r3, [sp, #8]
   2fad8:	3301      	adds	r3, #1
   2fada:	9302      	str	r3, [sp, #8]
   2fadc:	e7cf      	b.n	2fa7e <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa+0x54>
}
   2fade:	b02d      	add	sp, #180	; 0xb4
   2fae0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002fae2 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph>:
inline void BroadcastSubSlow(const ArithmeticParams& params,
   2fae2:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fae4:	4604      	mov	r4, r0
   2fae6:	4608      	mov	r0, r1
   2fae8:	4619      	mov	r1, r3
  TFLITE_DCHECK_LE(input1_shape.DimensionsCount(), N);
   2faea:	6803      	ldr	r3, [r0, #0]
inline void BroadcastSubSlow(const ArithmeticParams& params,
   2faec:	b0ad      	sub	sp, #180	; 0xb4
  TFLITE_DCHECK_LE(input1_shape.DimensionsCount(), N);
   2faee:	2b05      	cmp	r3, #5
inline void BroadcastSubSlow(const ArithmeticParams& params,
   2faf0:	9d33      	ldr	r5, [sp, #204]	; 0xcc
   2faf2:	9201      	str	r2, [sp, #4]
  TFLITE_DCHECK_LE(input1_shape.DimensionsCount(), N);
   2faf4:	dd01      	ble.n	2fafa <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0x18>
   2faf6:	f001 f960 	bl	30dba <abort>
  TFLITE_DCHECK_LE(input2_shape.DimensionsCount(), N);
   2fafa:	680b      	ldr	r3, [r1, #0]
   2fafc:	2b05      	cmp	r3, #5
   2fafe:	dcfa      	bgt.n	2faf6 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0x14>
  TFLITE_DCHECK_LE(output_shape.DimensionsCount(), N);
   2fb00:	682b      	ldr	r3, [r5, #0]
   2fb02:	2b05      	cmp	r3, #5
   2fb04:	dcf7      	bgt.n	2faf6 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0x14>
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   2fb06:	ae18      	add	r6, sp, #96	; 0x60
   2fb08:	af0e      	add	r7, sp, #56	; 0x38
   2fb0a:	4633      	mov	r3, r6
   2fb0c:	463a      	mov	r2, r7
   2fb0e:	f7fc fc36 	bl	2c37e <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
   2fb12:	462a      	mov	r2, r5
   2fb14:	2301      	movs	r3, #1
   2fb16:	2105      	movs	r1, #5
  CopyDimsToDesc(RuntimeShape::ExtendedShape(N, output_shape), &output_desc);
   2fb18:	ad22      	add	r5, sp, #136	; 0x88
   2fb1a:	a807      	add	r0, sp, #28
   2fb1c:	f7f7 fde9 	bl	276f2 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2fb20:	4629      	mov	r1, r5
   2fb22:	a807      	add	r0, sp, #28
   2fb24:	f7fc fc15 	bl	2c352 <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
   2fb28:	a807      	add	r0, sp, #28
   2fb2a:	f7f7 fd42 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
  auto sub_func = [&](int indexes[N]) {
   2fb2e:	ab01      	add	r3, sp, #4
   2fb30:	e9cd 3708 	strd	r3, r7, [sp, #32]
   2fb34:	ab32      	add	r3, sp, #200	; 0xc8
   2fb36:	e9cd 360a 	strd	r3, r6, [sp, #40]	; 0x28
  int indexes[N] = {0};
   2fb3a:	2214      	movs	r2, #20
   2fb3c:	ab34      	add	r3, sp, #208	; 0xd0
   2fb3e:	2100      	movs	r1, #0
   2fb40:	a802      	add	r0, sp, #8
   2fb42:	9407      	str	r4, [sp, #28]
   2fb44:	e9cd 350c 	strd	r3, r5, [sp, #48]	; 0x30
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2fb48:	2400      	movs	r4, #0
  int indexes[N] = {0};
   2fb4a:	f001 f980 	bl	30e4e <memset>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2fb4e:	9a02      	ldr	r2, [sp, #8]
   2fb50:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2fb52:	429a      	cmp	r2, r3
   2fb54:	da2b      	bge.n	2fbae <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0xcc>
   2fb56:	9403      	str	r4, [sp, #12]
   2fb58:	9a03      	ldr	r2, [sp, #12]
   2fb5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2fb5c:	429a      	cmp	r2, r3
   2fb5e:	da22      	bge.n	2fba6 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0xc4>
   2fb60:	9404      	str	r4, [sp, #16]
   2fb62:	9a04      	ldr	r2, [sp, #16]
   2fb64:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2fb66:	429a      	cmp	r2, r3
   2fb68:	da19      	bge.n	2fb9e <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0xbc>
   2fb6a:	9405      	str	r4, [sp, #20]
   2fb6c:	9a05      	ldr	r2, [sp, #20]
   2fb6e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2fb70:	429a      	cmp	r2, r3
   2fb72:	da10      	bge.n	2fb96 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0xb4>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2fb74:	9406      	str	r4, [sp, #24]
   2fb76:	9a06      	ldr	r2, [sp, #24]
   2fb78:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2fb7a:	429a      	cmp	r2, r3
   2fb7c:	da07      	bge.n	2fb8e <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0xac>
    calc(indexes);
   2fb7e:	a902      	add	r1, sp, #8
   2fb80:	a807      	add	r0, sp, #28
   2fb82:	f7ff ff14 	bl	2f9ae <_ZZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_PhENKUlPiE_clESB_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2fb86:	9b06      	ldr	r3, [sp, #24]
   2fb88:	3301      	adds	r3, #1
   2fb8a:	9306      	str	r3, [sp, #24]
   2fb8c:	e7f3      	b.n	2fb76 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0x94>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2fb8e:	9b05      	ldr	r3, [sp, #20]
   2fb90:	3301      	adds	r3, #1
   2fb92:	9305      	str	r3, [sp, #20]
   2fb94:	e7ea      	b.n	2fb6c <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0x8a>
   2fb96:	9b04      	ldr	r3, [sp, #16]
   2fb98:	3301      	adds	r3, #1
   2fb9a:	9304      	str	r3, [sp, #16]
   2fb9c:	e7e1      	b.n	2fb62 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0x80>
   2fb9e:	9b03      	ldr	r3, [sp, #12]
   2fba0:	3301      	adds	r3, #1
   2fba2:	9303      	str	r3, [sp, #12]
   2fba4:	e7d8      	b.n	2fb58 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0x76>
   2fba6:	9b02      	ldr	r3, [sp, #8]
   2fba8:	3301      	adds	r3, #1
   2fbaa:	9302      	str	r3, [sp, #8]
   2fbac:	e7cf      	b.n	2fb4e <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0x6c>
}
   2fbae:	b02d      	add	sp, #180	; 0xb4
   2fbb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002fbb2 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0>:
TfLiteStatus EvalSubQuantized(TfLiteContext* context, TfLiteNode* node,
   2fbb2:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fbb4:	4614      	mov	r4, r2
   2fbb6:	461e      	mov	r6, r3
    op_params.left_shift = data->left_shift;
   2fbb8:	6a43      	ldr	r3, [r0, #36]	; 0x24
TfLiteStatus EvalSubQuantized(TfLiteContext* context, TfLiteNode* node,
   2fbba:	b0b1      	sub	sp, #196	; 0xc4
    op_params.left_shift = data->left_shift;
   2fbbc:	931c      	str	r3, [sp, #112]	; 0x70
    op_params.input1_offset = data->input1_offset;
   2fbbe:	6a83      	ldr	r3, [r0, #40]	; 0x28
TfLiteStatus EvalSubQuantized(TfLiteContext* context, TfLiteNode* node,
   2fbc0:	460d      	mov	r5, r1
    op_params.input1_offset = data->input1_offset;
   2fbc2:	9317      	str	r3, [sp, #92]	; 0x5c
    op_params.input1_multiplier = data->input1_multiplier;
   2fbc4:	6943      	ldr	r3, [r0, #20]
   2fbc6:	931d      	str	r3, [sp, #116]	; 0x74
    op_params.input1_shift = data->input1_shift;
   2fbc8:	6843      	ldr	r3, [r0, #4]
   2fbca:	931e      	str	r3, [sp, #120]	; 0x78
    op_params.input2_offset = data->input2_offset;
   2fbcc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2fbce:	9318      	str	r3, [sp, #96]	; 0x60
    op_params.input2_multiplier = data->input2_multiplier;
   2fbd0:	6983      	ldr	r3, [r0, #24]
   2fbd2:	931f      	str	r3, [sp, #124]	; 0x7c
    op_params.input2_shift = data->input2_shift;
   2fbd4:	6883      	ldr	r3, [r0, #8]
   2fbd6:	9320      	str	r3, [sp, #128]	; 0x80
    op_params.output_offset = data->output_offset;
   2fbd8:	6b03      	ldr	r3, [r0, #48]	; 0x30
   2fbda:	9319      	str	r3, [sp, #100]	; 0x64
    op_params.output_multiplier = data->output_multiplier;
   2fbdc:	69c3      	ldr	r3, [r0, #28]
   2fbde:	931a      	str	r3, [sp, #104]	; 0x68
    op_params.output_shift = data->output_shift;
   2fbe0:	6a03      	ldr	r3, [r0, #32]
   2fbe2:	931b      	str	r3, [sp, #108]	; 0x6c
  params->quantized_activation_min = min;
   2fbe4:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
   2fbe8:	a810      	add	r0, sp, #64	; 0x40
  params->quantized_activation_max = max;
   2fbea:	e9cd 2321 	strd	r2, r3, [sp, #132]	; 0x84
   2fbee:	f7f7 fd25 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2fbf2:	4621      	mov	r1, r4
   2fbf4:	a80a      	add	r0, sp, #40	; 0x28
   2fbf6:	f7f7 fd21 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bool need_broadcast = reference_ops::ProcessBroadcastShapes(
   2fbfa:	a90a      	add	r1, sp, #40	; 0x28
   2fbfc:	aa16      	add	r2, sp, #88	; 0x58
   2fbfe:	a810      	add	r0, sp, #64	; 0x40
   2fc00:	f7f7 fe93 	bl	2792a <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>
   2fc04:	4607      	mov	r7, r0
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
   2fc06:	a80a      	add	r0, sp, #40	; 0x28
   2fc08:	f7f7 fcd3 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   2fc0c:	a810      	add	r0, sp, #64	; 0x40
   2fc0e:	f7f7 fcd0 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
    if (output->type == kTfLiteInt8) {
   2fc12:	7833      	ldrb	r3, [r6, #0]
        TF_LITE_SUB(tflite::reference_ops::BroadcastSubSlow, int8_t);
   2fc14:	4629      	mov	r1, r5
    if (output->type == kTfLiteInt8) {
   2fc16:	2b09      	cmp	r3, #9
        TF_LITE_SUB(tflite::reference_ops::BroadcastSubSlow, int8_t);
   2fc18:	a810      	add	r0, sp, #64	; 0x40
    if (output->type == kTfLiteInt8) {
   2fc1a:	d13e      	bne.n	2fc9a <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xe8>
      if (need_broadcast) {
   2fc1c:	b31f      	cbz	r7, 2fc66 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xb4>
        TF_LITE_SUB(tflite::reference_ops::BroadcastSubSlow, int8_t);
   2fc1e:	f7f7 fd0d 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2fc22:	b105      	cbz	r5, 2fc26 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x74>
   2fc24:	686d      	ldr	r5, [r5, #4]
   2fc26:	4621      	mov	r1, r4
   2fc28:	a80a      	add	r0, sp, #40	; 0x28
   2fc2a:	f7f7 fd07 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2fc2e:	b104      	cbz	r4, 2fc32 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x80>
   2fc30:	6864      	ldr	r4, [r4, #4]
   2fc32:	4631      	mov	r1, r6
   2fc34:	a804      	add	r0, sp, #16
   2fc36:	f7f7 fd01 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2fc3a:	6873      	ldr	r3, [r6, #4]
   2fc3c:	462a      	mov	r2, r5
   2fc3e:	9302      	str	r3, [sp, #8]
   2fc40:	ab04      	add	r3, sp, #16
   2fc42:	e9cd 4300 	strd	r4, r3, [sp]
   2fc46:	a910      	add	r1, sp, #64	; 0x40
   2fc48:	ab0a      	add	r3, sp, #40	; 0x28
   2fc4a:	a816      	add	r0, sp, #88	; 0x58
   2fc4c:	f7ff feed 	bl	2fa2a <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa>
        TF_LITE_SUB(tflite::reference_ops::Sub, uint8_t);
   2fc50:	a804      	add	r0, sp, #16
   2fc52:	f7f7 fcae 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   2fc56:	a80a      	add	r0, sp, #40	; 0x28
   2fc58:	f7f7 fcab 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
   2fc5c:	a810      	add	r0, sp, #64	; 0x40
   2fc5e:	f7f7 fca8 	bl	275b2 <_ZN6tflite12RuntimeShapeD1Ev>
}
   2fc62:	b031      	add	sp, #196	; 0xc4
   2fc64:	bdf0      	pop	{r4, r5, r6, r7, pc}
        TF_LITE_SUB(tflite::reference_ops::Sub, int8_t);
   2fc66:	f7f7 fce9 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2fc6a:	b105      	cbz	r5, 2fc6e <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xbc>
   2fc6c:	686d      	ldr	r5, [r5, #4]
   2fc6e:	4621      	mov	r1, r4
   2fc70:	a80a      	add	r0, sp, #40	; 0x28
   2fc72:	f7f7 fce3 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2fc76:	b104      	cbz	r4, 2fc7a <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xc8>
   2fc78:	6864      	ldr	r4, [r4, #4]
   2fc7a:	4631      	mov	r1, r6
   2fc7c:	a804      	add	r0, sp, #16
   2fc7e:	f7f7 fcdd 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2fc82:	6873      	ldr	r3, [r6, #4]
   2fc84:	462a      	mov	r2, r5
   2fc86:	9302      	str	r3, [sp, #8]
   2fc88:	ab04      	add	r3, sp, #16
   2fc8a:	e9cd 4300 	strd	r4, r3, [sp]
   2fc8e:	a910      	add	r1, sp, #64	; 0x40
   2fc90:	ab0a      	add	r3, sp, #40	; 0x28
   2fc92:	a816      	add	r0, sp, #88	; 0x58
   2fc94:	f7ff fe02 	bl	2f89c <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>
   2fc98:	e7da      	b.n	2fc50 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x9e>
      if (need_broadcast) {
   2fc9a:	b1cf      	cbz	r7, 2fcd0 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x11e>
        TF_LITE_SUB(tflite::reference_ops::BroadcastSubSlow, uint8_t);
   2fc9c:	f7f7 fcce 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2fca0:	b105      	cbz	r5, 2fca4 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xf2>
   2fca2:	686d      	ldr	r5, [r5, #4]
   2fca4:	4621      	mov	r1, r4
   2fca6:	a80a      	add	r0, sp, #40	; 0x28
   2fca8:	f7f7 fcc8 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2fcac:	b104      	cbz	r4, 2fcb0 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xfe>
   2fcae:	6864      	ldr	r4, [r4, #4]
   2fcb0:	4631      	mov	r1, r6
   2fcb2:	a804      	add	r0, sp, #16
   2fcb4:	f7f7 fcc2 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2fcb8:	6873      	ldr	r3, [r6, #4]
   2fcba:	462a      	mov	r2, r5
   2fcbc:	9302      	str	r3, [sp, #8]
   2fcbe:	ab04      	add	r3, sp, #16
   2fcc0:	e9cd 4300 	strd	r4, r3, [sp]
   2fcc4:	a910      	add	r1, sp, #64	; 0x40
   2fcc6:	ab0a      	add	r3, sp, #40	; 0x28
   2fcc8:	a816      	add	r0, sp, #88	; 0x58
   2fcca:	f7ff ff0a 	bl	2fae2 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph>
   2fcce:	e7bf      	b.n	2fc50 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x9e>
        TF_LITE_SUB(tflite::reference_ops::Sub, uint8_t);
   2fcd0:	f7f7 fcb4 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2fcd4:	b105      	cbz	r5, 2fcd8 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x126>
   2fcd6:	686d      	ldr	r5, [r5, #4]
   2fcd8:	4621      	mov	r1, r4
   2fcda:	a80a      	add	r0, sp, #40	; 0x28
   2fcdc:	f7f7 fcae 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2fce0:	b104      	cbz	r4, 2fce4 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x132>
   2fce2:	6864      	ldr	r4, [r4, #4]
   2fce4:	4631      	mov	r1, r6
   2fce6:	a804      	add	r0, sp, #16
   2fce8:	f7f7 fca8 	bl	2763c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2fcec:	6873      	ldr	r3, [r6, #4]
   2fcee:	462a      	mov	r2, r5
   2fcf0:	9302      	str	r3, [sp, #8]
   2fcf2:	ab04      	add	r3, sp, #16
   2fcf4:	e9cd 4300 	strd	r4, r3, [sp]
   2fcf8:	a910      	add	r1, sp, #64	; 0x40
   2fcfa:	ab0a      	add	r3, sp, #40	; 0x28
   2fcfc:	a816      	add	r0, sp, #88	; 0x58
   2fcfe:	f7ff fd81 	bl	2f804 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>
   2fd02:	e7a5      	b.n	2fc50 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x9e>

0002fd04 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>:
                              TfLiteTensor* output) {
   2fd04:	b508      	push	{r3, lr}
   2fd06:	4618      	mov	r0, r3
   2fd08:	9b04      	ldr	r3, [sp, #16]
  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
   2fd0a:	781a      	ldrb	r2, [r3, #0]
   2fd0c:	2a03      	cmp	r2, #3
   2fd0e:	d001      	beq.n	2fd14 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x10>
   2fd10:	2a09      	cmp	r2, #9
   2fd12:	d103      	bne.n	2fd1c <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x18>
   2fd14:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   2fd18:	f7ff ff4b 	bl	2fbb2 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0>
}
   2fd1c:	2000      	movs	r0, #0
   2fd1e:	bd08      	pop	{r3, pc}

0002fd20 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS8_SA_S8_PfEUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SC_>:
   2fd20:	2300      	movs	r3, #0
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   2fd22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2fd26:	4607      	mov	r7, r0
   2fd28:	460d      	mov	r5, r1
   2fd2a:	4614      	mov	r4, r2
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2fd2c:	4698      	mov	r8, r3
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   2fd2e:	ed2d 8b04 	vpush	{d8-d9}
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2fd32:	60d3      	str	r3, [r2, #12]
   2fd34:	68e6      	ldr	r6, [r4, #12]
   2fd36:	68fb      	ldr	r3, [r7, #12]
   2fd38:	429e      	cmp	r6, r3
   2fd3a:	da41      	bge.n	2fdc0 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS8_SA_S8_PfEUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SC_+0xa0>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2fd3c:	f8c4 8010 	str.w	r8, [r4, #16]
   2fd40:	f8d4 9010 	ldr.w	r9, [r4, #16]
   2fd44:	693b      	ldr	r3, [r7, #16]
   2fd46:	4599      	cmp	r9, r3
   2fd48:	da37      	bge.n	2fdba <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS8_SA_S8_PfEUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SC_+0x9a>
            input1_data[SubscriptToIndex(desc1, indexes)] -
   2fd4a:	68e8      	ldr	r0, [r5, #12]
   2fd4c:	4621      	mov	r1, r4
   2fd4e:	f7fc faeb 	bl	2c328 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
                input2_data[SubscriptToIndex(desc2, indexes)],
   2fd52:	4621      	mov	r1, r4
            input1_data[SubscriptToIndex(desc1, indexes)] -
   2fd54:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, indexes)],
   2fd56:	6968      	ldr	r0, [r5, #20]
   2fd58:	f7fc fae6 	bl	2c328 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   2fd5c:	6929      	ldr	r1, [r5, #16]
            input1_data[SubscriptToIndex(desc1, indexes)] -
   2fd5e:	68aa      	ldr	r2, [r5, #8]
                input2_data[SubscriptToIndex(desc2, indexes)],
   2fd60:	680b      	ldr	r3, [r1, #0]
            input1_data[SubscriptToIndex(desc1, indexes)] -
   2fd62:	6812      	ldr	r2, [r2, #0]
                input2_data[SubscriptToIndex(desc2, indexes)],
   2fd64:	eb03 0380 	add.w	r3, r3, r0, lsl #2
            input1_data[SubscriptToIndex(desc1, indexes)] -
   2fd68:	eb02 028a 	add.w	r2, r2, sl, lsl #2
        ActivationFunctionWithMinMax(
   2fd6c:	edd3 7a00 	vldr	s15, [r3]
   2fd70:	edd2 8a00 	vldr	s17, [r2]
  auto sub_func = [&](int indexes[N]) {
   2fd74:	69ab      	ldr	r3, [r5, #24]
        ActivationFunctionWithMinMax(
   2fd76:	ee78 8ae7 	vsub.f32	s17, s17, s15
            params.float_activation_min, params.float_activation_max);
   2fd7a:	ed93 8a0d 	vldr	s16, [r3, #52]	; 0x34
    output_data[SubscriptToIndex(output_desc, indexes)] =
   2fd7e:	6868      	ldr	r0, [r5, #4]
   2fd80:	4621      	mov	r1, r4
            params.float_activation_min, params.float_activation_max);
   2fd82:	ed93 9a0e 	vldr	s18, [r3, #56]	; 0x38
    output_data[SubscriptToIndex(output_desc, indexes)] =
   2fd86:	f7fc facf 	bl	2c328 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
      return __a;
   2fd8a:	eef4 8ac8 	vcmpe.f32	s17, s16
   2fd8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2fd92:	bf58      	it	pl
   2fd94:	eeb0 8a68 	vmovpl.f32	s16, s17
	return __b;
   2fd98:	eeb4 9a48 	vcmp.f32	s18, s16
   2fd9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2fda0:	bf48      	it	mi
   2fda2:	eeb0 8a49 	vmovmi.f32	s16, s18
   2fda6:	682b      	ldr	r3, [r5, #0]
   2fda8:	681b      	ldr	r3, [r3, #0]
   2fdaa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   2fdae:	f109 0301 	add.w	r3, r9, #1
   2fdb2:	ed80 8a00 	vstr	s16, [r0]
   2fdb6:	6123      	str	r3, [r4, #16]
   2fdb8:	e7c2      	b.n	2fd40 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS8_SA_S8_PfEUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SC_+0x20>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2fdba:	3601      	adds	r6, #1
   2fdbc:	60e6      	str	r6, [r4, #12]
   2fdbe:	e7b9      	b.n	2fd34 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS8_SA_S8_PfEUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SC_+0x14>
}
   2fdc0:	ecbd 8b04 	vpop	{d8-d9}
   2fdc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002fdc8 <_ZN6tflite3ops5micro4svdf4InitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   2fdc8:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   2fdca:	b513      	push	{r0, r1, r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   2fdcc:	b90b      	cbnz	r3, 2fdd2 <_ZN6tflite3ops5micro4svdf4InitEP13TfLiteContextPKcj+0xa>
   2fdce:	f000 fff4 	bl	30dba <abort>
  void* data = nullptr;
   2fdd2:	2400      	movs	r4, #0
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
   2fdd4:	2118      	movs	r1, #24
  void* data = nullptr;
   2fdd6:	9401      	str	r4, [sp, #4]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
   2fdd8:	aa01      	add	r2, sp, #4
   2fdda:	4798      	blx	r3
   2fddc:	2801      	cmp	r0, #1
    return nullptr;
   2fdde:	bf0c      	ite	eq
   2fde0:	4620      	moveq	r0, r4
  return data;
   2fde2:	9801      	ldrne	r0, [sp, #4]
}
   2fde4:	b002      	add	sp, #8
   2fde6:	bd10      	pop	{r4, pc}

0002fde8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EiLi1EE4evalEi>:
  return a ? BitNot(zero) : zero;
   2fde8:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
  static IntegerType eval(IntegerType x) {
   2fdec:	b5d0      	push	{r4, r6, r7, lr}
  return a ? BitNot(zero) : zero;
   2fdee:	da25      	bge.n	2fe3c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EiLi1EE4evalEi+0x54>
   2fdf0:	f1b0 4f60 	cmp.w	r0, #3758096384	; 0xe0000000
   2fdf4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2fdf8:	f04f 0400 	mov.w	r4, #0
   2fdfc:	bfc8      	it	gt
   2fdfe:	2100      	movgt	r1, #0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
   2fe00:	17c7      	asrs	r7, r0, #31
   2fe02:	0082      	lsls	r2, r0, #2
   2fe04:	00bb      	lsls	r3, r7, #2
   2fe06:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
             ? min
   2fe0a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   2fe0e:	f173 30ff 	sbcs.w	r0, r3, #4294967295	; 0xffffffff
   2fe12:	db17      	blt.n	2fe44 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EiLi1EE4evalEi+0x5c>
             : wide_shifted > max ? max
   2fe14:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   2fe18:	2700      	movs	r7, #0
   2fe1a:	4296      	cmp	r6, r2
   2fe1c:	eb77 0003 	sbcs.w	r0, r7, r3
   2fe20:	bfb8      	it	lt
   2fe22:	f06f 4200 	mvnlt.w	r2, #2147483648	; 0x80000000
  return ~a;
   2fe26:	43e3      	mvns	r3, r4
   2fe28:	43c8      	mvns	r0, r1
  return a & b;
   2fe2a:	401a      	ands	r2, r3
   2fe2c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
  return a ^ b;
   2fe30:	4062      	eors	r2, r4
  return a & b;
   2fe32:	4002      	ands	r2, r0
   2fe34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  }
   2fe38:	4050      	eors	r0, r2
   2fe3a:	bdd0      	pop	{r4, r6, r7, pc}
  return a ? BitNot(zero) : zero;
   2fe3c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2fe40:	2100      	movs	r1, #0
   2fe42:	e7dd      	b.n	2fe00 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EiLi1EE4evalEi+0x18>
             ? min
   2fe44:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   2fe48:	e7ed      	b.n	2fe26 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EiLi1EE4evalEi+0x3e>

0002fe4a <_ZN8gemmlowp4tanhIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
  return a ? BitNot(zero) : zero;
   2fe4a:	2800      	cmp	r0, #0
FixedPoint<tRawType, 0> tanh(FixedPoint<tRawType, tIntegerBits> a) {
   2fe4c:	b570      	push	{r4, r5, r6, lr}
  return a ? BitNot(zero) : zero;
   2fe4e:	db14      	blt.n	2fe7a <_ZN8gemmlowp4tanhIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x30>
   2fe50:	bf0c      	ite	eq
   2fe52:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
   2fe56:	2400      	movne	r4, #0
   2fe58:	2600      	movs	r6, #0
  return ~a;
   2fe5a:	43f5      	mvns	r5, r6
  return -a;
   2fe5c:	4243      	negs	r3, r0
  return a & b;
   2fe5e:	402b      	ands	r3, r5
   2fe60:	4030      	ands	r0, r6
  return one_minus_x_over_one_plus_x_for_x_in_0_1(
   2fe62:	4058      	eors	r0, r3
   2fe64:	f7ee f9d0 	bl	1e208 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
   2fe68:	f7ef fd5c 	bl	1f924 <_ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>
  return -a;
   2fe6c:	4242      	negs	r2, r0
  return a & b;
   2fe6e:	4032      	ands	r2, r6
   2fe70:	4028      	ands	r0, r5
  return a ^ b;
   2fe72:	4042      	eors	r2, r0
  return ~a;
   2fe74:	43e0      	mvns	r0, r4
}
   2fe76:	4010      	ands	r0, r2
   2fe78:	bd70      	pop	{r4, r5, r6, pc}
  return a ? BitNot(zero) : zero;
   2fe7a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2fe7e:	2400      	movs	r4, #0
   2fe80:	e7eb      	b.n	2fe5a <_ZN8gemmlowp4tanhIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x10>

0002fe82 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIsLi0EEEEENT_13ScalarRawTypeEi>:
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
   2fe82:	2110      	movs	r1, #16
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
   2fe84:	b508      	push	{r3, lr}
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
   2fe86:	f7eb f9dd 	bl	1b244 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
}
   2fe8a:	b200      	sxth	r0, r0
   2fe8c:	bd08      	pop	{r3, pc}

0002fe8e <_ZN8gemmlowpmlIsLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
   2fe8e:	b508      	push	{r3, lr}
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   2fe90:	b209      	sxth	r1, r1
   2fe92:	b200      	sxth	r0, r0
   2fe94:	f7eb f83c 	bl	1af10 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIsEET_S1_S1_>
}
   2fe98:	bd08      	pop	{r3, pc}

0002fe9a <_ZN8gemmlowp4tanhIsLi3EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> tanh(FixedPoint<tRawType, tIntegerBits> a) {
   2fe9a:	b203      	sxth	r3, r0
  return a ? BitNot(zero) : zero;
   2fe9c:	2b00      	cmp	r3, #0
FixedPoint<tRawType, 0> tanh(FixedPoint<tRawType, tIntegerBits> a) {
   2fe9e:	b570      	push	{r4, r5, r6, lr}
  return a ? BitNot(zero) : zero;
   2fea0:	db16      	blt.n	2fed0 <_ZN8gemmlowp4tanhIsLi3EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x36>
   2fea2:	bf0c      	ite	eq
   2fea4:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
   2fea8:	2500      	movne	r5, #0
   2feaa:	2400      	movs	r4, #0
  return ~a;
   2feac:	43e2      	mvns	r2, r4
  return -a;
   2feae:	4240      	negs	r0, r0
  return a & b;
   2feb0:	4023      	ands	r3, r4
   2feb2:	4010      	ands	r0, r2
  return one_minus_x_over_one_plus_x_for_x_in_0_1(
   2feb4:	4058      	eors	r0, r3
  return ~a;
   2feb6:	b216      	sxth	r6, r2
  return one_minus_x_over_one_plus_x_for_x_in_0_1(
   2feb8:	f7ef fdc0 	bl	1fa3c <_ZN8gemmlowp22exp_on_negative_valuesIsLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
   2febc:	f7ef fe7e 	bl	1fbbc <_ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IsEENS_10FixedPointIT_Li0EEES3_>
   2fec0:	b203      	sxth	r3, r0
  return -a;
   2fec2:	4240      	negs	r0, r0
  return a & b;
   2fec4:	4004      	ands	r4, r0
  return ~a;
   2fec6:	43e8      	mvns	r0, r5
  return a & b;
   2fec8:	401e      	ands	r6, r3
  return a ^ b;
   2feca:	4074      	eors	r4, r6
}
   2fecc:	4020      	ands	r0, r4
   2fece:	bd70      	pop	{r4, r5, r6, pc}
  return a ? BitNot(zero) : zero;
   2fed0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2fed4:	2500      	movs	r5, #0
   2fed6:	e7e9      	b.n	2feac <_ZN8gemmlowp4tanhIsLi3EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x12>

0002fed8 <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
   2fed8:	b40e      	push	{r1, r2, r3}
   2feda:	b503      	push	{r0, r1, lr}
   2fedc:	aa03      	add	r2, sp, #12
   2fede:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list args;
  va_start(args, format);
  int code = Report(format, args);
   2fee2:	6803      	ldr	r3, [r0, #0]
  va_start(args, format);
   2fee4:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
   2fee6:	689b      	ldr	r3, [r3, #8]
   2fee8:	4798      	blx	r3
  va_end(args);
  return code;
}
   2feea:	b002      	add	sp, #8
   2feec:	f85d eb04 	ldr.w	lr, [sp], #4
   2fef0:	b003      	add	sp, #12
   2fef2:	4770      	bx	lr

0002fef4 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
   2fef4:	b40c      	push	{r2, r3}
   2fef6:	b507      	push	{r0, r1, r2, lr}
   2fef8:	aa04      	add	r2, sp, #16
   2fefa:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list args;
  va_start(args, format);
  int code = Report(format, args);
   2fefe:	6803      	ldr	r3, [r0, #0]
  va_start(args, format);
   2ff00:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
   2ff02:	689b      	ldr	r3, [r3, #8]
   2ff04:	4798      	blx	r3
  va_end(args);
  return code;
}
   2ff06:	b003      	add	sp, #12
   2ff08:	f85d eb04 	ldr.w	lr, [sp], #4
   2ff0c:	b002      	add	sp, #8
   2ff0e:	4770      	bx	lr

0002ff10 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>:
  switch (padding) {
   2ff10:	b120      	cbz	r0, 2ff1c <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0xc>
   2ff12:	2801      	cmp	r0, #1
   2ff14:	bf14      	ite	ne
   2ff16:	2000      	movne	r0, #0
   2ff18:	2002      	moveq	r0, #2
   2ff1a:	4770      	bx	lr
      return kTfLitePaddingSame;
   2ff1c:	2001      	movs	r0, #1
}
   2ff1e:	4770      	bx	lr

0002ff20 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                             void** builtin_data) {
   2ff20:	b508      	push	{r3, lr}
  TFLITE_DCHECK(op != nullptr);
   2ff22:	b908      	cbnz	r0, 2ff28 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8>
   2ff24:	f000 ff49 	bl	30dba <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
   2ff28:	2900      	cmp	r1, #0
   2ff2a:	d0fb      	beq.n	2ff24 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4>
  TFLITE_DCHECK(allocator != nullptr);
   2ff2c:	2a00      	cmp	r2, #0
   2ff2e:	d0f9      	beq.n	2ff24 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4>
  TFLITE_DCHECK(builtin_data != nullptr);
   2ff30:	2b00      	cmp	r3, #0
   2ff32:	d0f7      	beq.n	2ff24 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4>
}
   2ff34:	bd08      	pop	{r3, pc}

0002ff36 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv.isra.0>:
    void operator()(void* data) { allocator_->Deallocate(data); }
   2ff36:	6803      	ldr	r3, [r0, #0]
   2ff38:	685b      	ldr	r3, [r3, #4]
   2ff3a:	4718      	bx	r3

0002ff3c <_ZNK6tflite8Operator15builtin_optionsEv>:
  const void *builtin_options() const {
   2ff3c:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
   2ff3e:	210c      	movs	r1, #12
   2ff40:	4604      	mov	r4, r0
   2ff42:	f7f7 fa96 	bl	27472 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   2ff46:	b110      	cbz	r0, 2ff4e <_ZNK6tflite8Operator15builtin_optionsEv+0x12>
    auto p = data_ + field_offset;
   2ff48:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   2ff4a:	5820      	ldr	r0, [r4, r0]
   2ff4c:	4418      	add	r0, r3
  }
   2ff4e:	bd10      	pop	{r4, pc}

0002ff50 <_ZN6tflite8ParseAbsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}
   2ff50:	2000      	movs	r0, #0
   2ff52:	4770      	bx	lr

0002ff54 <_ZN6tflite9ParseCeilEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ff54:	2000      	movs	r0, #0
   2ff56:	4770      	bx	lr

0002ff58 <_ZN6tflite8ParseCosEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ff58:	2000      	movs	r0, #0
   2ff5a:	4770      	bx	lr

0002ff5c <_ZN6tflite15ParseDequantizeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ff5c:	2000      	movs	r0, #0
   2ff5e:	4770      	bx	lr

0002ff60 <_ZN6tflite10ParseEqualEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ff60:	2000      	movs	r0, #0
   2ff62:	4770      	bx	lr

0002ff64 <_ZN6tflite10ParseFloorEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ff64:	2000      	movs	r0, #0
   2ff66:	4770      	bx	lr

0002ff68 <_ZN6tflite12ParseGreaterEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ff68:	2000      	movs	r0, #0
   2ff6a:	4770      	bx	lr

0002ff6c <_ZN6tflite17ParseGreaterEqualEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ff6c:	2000      	movs	r0, #0
   2ff6e:	4770      	bx	lr

0002ff70 <_ZN6tflite14ParseHardSwishEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ff70:	2000      	movs	r0, #0
   2ff72:	4770      	bx	lr

0002ff74 <_ZN6tflite9ParseLessEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ff74:	2000      	movs	r0, #0
   2ff76:	4770      	bx	lr

0002ff78 <_ZN6tflite14ParseLessEqualEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ff78:	2000      	movs	r0, #0
   2ff7a:	4770      	bx	lr

0002ff7c <_ZN6tflite8ParseLogEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ff7c:	2000      	movs	r0, #0
   2ff7e:	4770      	bx	lr

0002ff80 <_ZN6tflite15ParseLogicalAndEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ff80:	2000      	movs	r0, #0
   2ff82:	4770      	bx	lr

0002ff84 <_ZN6tflite15ParseLogicalNotEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ff84:	2000      	movs	r0, #0
   2ff86:	4770      	bx	lr

0002ff88 <_ZN6tflite14ParseLogicalOrEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ff88:	2000      	movs	r0, #0
   2ff8a:	4770      	bx	lr

0002ff8c <_ZN6tflite13ParseLogisticEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ff8c:	2000      	movs	r0, #0
   2ff8e:	4770      	bx	lr

0002ff90 <_ZN6tflite12ParseMaximumEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ff90:	2000      	movs	r0, #0
   2ff92:	4770      	bx	lr

0002ff94 <_ZN6tflite12ParseMinimumEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ff94:	2000      	movs	r0, #0
   2ff96:	4770      	bx	lr

0002ff98 <_ZN6tflite8ParseNegEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ff98:	2000      	movs	r0, #0
   2ff9a:	4770      	bx	lr

0002ff9c <_ZN6tflite13ParseNotEqualEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ff9c:	2000      	movs	r0, #0
   2ff9e:	4770      	bx	lr

0002ffa0 <_ZN6tflite8ParsePadEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ffa0:	2000      	movs	r0, #0
   2ffa2:	4770      	bx	lr

0002ffa4 <_ZN6tflite10ParsePadV2EPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ffa4:	2000      	movs	r0, #0
   2ffa6:	4770      	bx	lr

0002ffa8 <_ZN6tflite10ParsePreluEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ffa8:	2000      	movs	r0, #0
   2ffaa:	4770      	bx	lr

0002ffac <_ZN6tflite13ParseQuantizeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ffac:	2000      	movs	r0, #0
   2ffae:	4770      	bx	lr

0002ffb0 <_ZN6tflite9ParseReluEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ffb0:	2000      	movs	r0, #0
   2ffb2:	4770      	bx	lr

0002ffb4 <_ZN6tflite10ParseRelu6EPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ffb4:	2000      	movs	r0, #0
   2ffb6:	4770      	bx	lr

0002ffb8 <_ZN6tflite10ParseRoundEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ffb8:	2000      	movs	r0, #0
   2ffba:	4770      	bx	lr

0002ffbc <_ZN6tflite10ParseRsqrtEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ffbc:	2000      	movs	r0, #0
   2ffbe:	4770      	bx	lr

0002ffc0 <_ZN6tflite8ParseSinEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ffc0:	2000      	movs	r0, #0
   2ffc2:	4770      	bx	lr

0002ffc4 <_ZN6tflite9ParseSqrtEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ffc4:	2000      	movs	r0, #0
   2ffc6:	4770      	bx	lr

0002ffc8 <_ZN6tflite11ParseSquareEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ffc8:	2000      	movs	r0, #0
   2ffca:	4770      	bx	lr

0002ffcc <_ZN6tflite9ParseTanhEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ffcc:	2000      	movs	r0, #0
   2ffce:	4770      	bx	lr

0002ffd0 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
   2ffd0:	b538      	push	{r3, r4, r5, lr}
   2ffd2:	4605      	mov	r5, r0
   2ffd4:	4614      	mov	r4, r2
    auto field_offset = GetOptionalFieldOffset(field);
   2ffd6:	f7f7 fa4c 	bl	27472 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   2ffda:	b100      	cbz	r0, 2ffde <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0xe>
   2ffdc:	5c2c      	ldrb	r4, [r5, r0]
  }
   2ffde:	4620      	mov	r0, r4
   2ffe0:	bd38      	pop	{r3, r4, r5, pc}

0002ffe2 <_ZNK6tflite8Operator20builtin_options_typeEv>:
  tflite::BuiltinOptions builtin_options_type() const {
   2ffe2:	b508      	push	{r3, lr}
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
   2ffe4:	2200      	movs	r2, #0
   2ffe6:	210a      	movs	r1, #10
   2ffe8:	f7ff fff2 	bl	2ffd0 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
  }
   2ffec:	bd08      	pop	{r3, pc}

0002ffee <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
   2ffee:	b538      	push	{r3, r4, r5, lr}
   2fff0:	4605      	mov	r5, r0
   2fff2:	4614      	mov	r4, r2
    auto field_offset = GetOptionalFieldOffset(field);
   2fff4:	f7f7 fa3d 	bl	27472 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   2fff8:	b100      	cbz	r0, 2fffc <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_+0xe>
   2fffa:	582c      	ldr	r4, [r5, r0]
  }
   2fffc:	4620      	mov	r0, r4
   2fffe:	bd38      	pop	{r3, r4, r5, pc}

00030000 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
   30000:	b538      	push	{r3, r4, r5, lr}
   30002:	4605      	mov	r5, r0
   30004:	4614      	mov	r4, r2
    auto field_offset = GetOptionalFieldOffset(field);
   30006:	f7f7 fa34 	bl	27472 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   3000a:	b100      	cbz	r0, 3000e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0xe>
   3000c:	562c      	ldrsb	r4, [r5, r0]
  }
   3000e:	4620      	mov	r0, r4
   30010:	bd38      	pop	{r3, r4, r5, pc}

00030012 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
   30012:	b538      	push	{r3, r4, r5, lr}
   30014:	4604      	mov	r4, r0
   30016:	4615      	mov	r5, r2
    auto field_offset = GetOptionalFieldOffset(field);
   30018:	f7f7 fa2b 	bl	27472 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   3001c:	b108      	cbz	r0, 30022 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x10>
   3001e:	4420      	add	r0, r4
   30020:	6805      	ldr	r5, [r0, #0]
  }
   30022:	4628      	mov	r0, r5
   30024:	bd38      	pop	{r3, r4, r5, pc}

00030026 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI17TfLiteSplitParamsEEPT_v>:
   30026:	2204      	movs	r2, #4
   30028:	6803      	ldr	r3, [r0, #0]
   3002a:	4611      	mov	r1, r2
   3002c:	681b      	ldr	r3, [r3, #0]
   3002e:	4718      	bx	r3

00030030 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor>:
#include "tensorflow/lite/c/common.h"

namespace tflite {

TfLiteStatus ResetVariableTensor(TfLiteTensor* tensor) {
  if (!tensor->is_variable) {
   30030:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
TfLiteStatus ResetVariableTensor(TfLiteTensor* tensor) {
   30034:	b510      	push	{r4, lr}
  if (!tensor->is_variable) {
   30036:	b173      	cbz	r3, 30056 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x26>
    return kTfLiteOk;
  }
  // TODO(b/115961645): Implement - If a variable tensor has a buffer, reset it
  // to the value of the buffer.
  int value = 0;
  if (tensor->type == kTfLiteInt8) {
   30038:	7803      	ldrb	r3, [r0, #0]
#if __ANDROID__ || defined(__x86_64__) || defined(__i386__) || \
    defined(__i386) || defined(__x86__) || defined(__X86__) || \
    defined(_X86_) || defined(_M_IX86) || defined(_M_X64)
  memset(tensor->data.raw, value, tensor->bytes);
#else
  char* raw_ptr = tensor->data.raw;
   3003a:	6841      	ldr	r1, [r0, #4]
  if (tensor->type == kTfLiteInt8) {
   3003c:	2b09      	cmp	r3, #9
  int value = 0;
   3003e:	bf18      	it	ne
   30040:	2200      	movne	r2, #0
  for (size_t i = 0; i < tensor->bytes; ++i) {
   30042:	f04f 0300 	mov.w	r3, #0
    value = tensor->params.zero_point;
   30046:	bf08      	it	eq
   30048:	6902      	ldreq	r2, [r0, #16]
  for (size_t i = 0; i < tensor->bytes; ++i) {
   3004a:	6984      	ldr	r4, [r0, #24]
   3004c:	429c      	cmp	r4, r3
   3004e:	d902      	bls.n	30056 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x26>
    *raw_ptr = value;
   30050:	54ca      	strb	r2, [r1, r3]
  for (size_t i = 0; i < tensor->bytes; ++i) {
   30052:	3301      	adds	r3, #1
   30054:	e7f9      	b.n	3004a <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x1a>
    raw_ptr++;
  }
#endif
  return kTfLiteOk;
}
   30056:	2000      	movs	r0, #0
   30058:	bd10      	pop	{r4, pc}

0003005a <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
   3005a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
   3005e:	2401      	movs	r4, #1
                         int total_signed_bits) {
   30060:	4681      	mov	r9, r0
      1.0 * ((1 << input_integer_bits) - 1) *
   30062:	fa04 f000 	lsl.w	r0, r4, r0
   30066:	3801      	subs	r0, #1
                         int total_signed_bits) {
   30068:	4688      	mov	r8, r1
   3006a:	4615      	mov	r5, r2
      1.0 * ((1 << input_integer_bits) - 1) *
   3006c:	f7dc fa3a 	bl	c4e4 <__aeabi_i2d>
   30070:	4606      	mov	r6, r0
      (1ll << (total_signed_bits - input_integer_bits)) /
   30072:	eba5 0009 	sub.w	r0, r5, r9
      1.0 * ((1 << input_integer_bits) - 1) *
   30076:	460f      	mov	r7, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
   30078:	f1c0 0320 	rsb	r3, r0, #32
   3007c:	f1a0 0120 	sub.w	r1, r0, #32
   30080:	fa24 f303 	lsr.w	r3, r4, r3
   30084:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
   30088:	fa04 f000 	lsl.w	r0, r4, r0
   3008c:	4319      	orrs	r1, r3
   3008e:	f7dc fa65 	bl	c55c <__aeabi_l2d>
   30092:	4602      	mov	r2, r0
   30094:	460b      	mov	r3, r1
   30096:	4630      	mov	r0, r6
   30098:	4639      	mov	r1, r7
   3009a:	f7e0 fa07 	bl	104ac <__aeabi_dmul>
      (1ll << input_left_shift);
   3009e:	f1c8 0320 	rsb	r3, r8, #32
      1.0 * ((1 << input_integer_bits) - 1) *
   300a2:	460f      	mov	r7, r1
      (1ll << input_left_shift);
   300a4:	f1a8 0120 	sub.w	r1, r8, #32
   300a8:	fa24 f303 	lsr.w	r3, r4, r3
   300ac:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
   300b0:	4606      	mov	r6, r0
      (1ll << (total_signed_bits - input_integer_bits)) /
   300b2:	4319      	orrs	r1, r3
   300b4:	fa04 f008 	lsl.w	r0, r4, r8
   300b8:	f7dc fa50 	bl	c55c <__aeabi_l2d>
   300bc:	4602      	mov	r2, r0
   300be:	460b      	mov	r3, r1
  const double max_input_rescaled =
   300c0:	4630      	mov	r0, r6
   300c2:	4639      	mov	r1, r7
   300c4:	f7e0 fb1c 	bl	10700 <__aeabi_ddiv>
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
   300c8:	f7e1 fdba 	bl	11c40 <floor>
   300cc:	f7e0 fc88 	bl	109e0 <__aeabi_d2iz>
#endif  // TFLITE_EMULATE_FLOAT
}
   300d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000300d4 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>:
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
   300d4:	edd0 7a00 	vldr	s15, [r0]
   300d8:	eec0 7a27 	vdiv.f32	s15, s0, s15
  auto quantize = [scale, zero_point](float f) {
   300dc:	b510      	push	{r4, lr}
   300de:	4604      	mov	r4, r0
   300e0:	ee17 0a90 	vmov	r0, s15
   300e4:	f7dc fa10 	bl	c508 <__aeabi_f2d>
   300e8:	f7f2 fcf0 	bl	22acc <round>
   300ec:	f7e0 fca0 	bl	10a30 <__aeabi_d2f>
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
   300f0:	ee07 0a90 	vmov	s15, r0
   300f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   300f8:	ee17 0a90 	vmov	r0, s15
   300fc:	6863      	ldr	r3, [r4, #4]
  };
   300fe:	4418      	add	r0, r3
   30100:	bd10      	pop	{r4, pc}

00030102 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>:

bool HaveSameShapes(const TfLiteTensor* input1, const TfLiteTensor* input2) {
   30102:	b508      	push	{r3, lr}
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
   30104:	6889      	ldr	r1, [r1, #8]
   30106:	6880      	ldr	r0, [r0, #8]
   30108:	f7dc fbde 	bl	c8c8 <TfLiteIntArrayEqual>
}
   3010c:	3800      	subs	r0, #0
   3010e:	bf18      	it	ne
   30110:	2001      	movne	r0, #1
   30112:	bd08      	pop	{r3, pc}

00030114 <_ZN6tflite14AlignPointerUpEPhj>:
namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
   30114:	1e4b      	subs	r3, r1, #1
   30116:	4403      	add	r3, r0
   30118:	fbb3 f3f1 	udiv	r3, r3, r1
  return aligned_result;
}
   3011c:	fb01 f003 	mul.w	r0, r1, r3
   30120:	4770      	bx	lr

00030122 <_ZN6tflite16AlignPointerDownEPhj>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
   30122:	fbb0 f0f1 	udiv	r0, r0, r1
  return aligned_result;
}
   30126:	4348      	muls	r0, r1
   30128:	4770      	bx	lr

0003012a <_ZN6tflite11AlignSizeUpEjj>:

size_t AlignSizeUp(size_t size, size_t alignment) {
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
   3012a:	1e43      	subs	r3, r0, #1
   3012c:	440b      	add	r3, r1
   3012e:	fbb3 f3f1 	udiv	r3, r3, r1
  return aligned_size;
}
   30132:	fb01 f003 	mul.w	r0, r1, r3
   30136:	4770      	bx	lr

00030138 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
  switch (type) {
   30138:	3801      	subs	r0, #1
   3013a:	2808      	cmp	r0, #8
   3013c:	d810      	bhi.n	30160 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x28>
   3013e:	e8df f000 	tbb	[pc, r0]
   30142:	0505      	.short	0x0505
   30144:	0b0f0d0b 	.word	0x0b0f0d0b
   30148:	0d09      	.short	0x0d09
   3014a:	0b          	.byte	0x0b
   3014b:	00          	.byte	0x00
    case kTfLiteFloat32:
      *size = sizeof(float);
   3014c:	2304      	movs	r3, #4
      *size = sizeof(float) * 2;
      break;
    default:
      return kTfLiteError;
  }
  return kTfLiteOk;
   3014e:	2000      	movs	r0, #0
      *size = sizeof(int16_t);
   30150:	600b      	str	r3, [r1, #0]
      break;
   30152:	4770      	bx	lr
      *size = sizeof(int16_t);
   30154:	2302      	movs	r3, #2
   30156:	e7fa      	b.n	3014e <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x16>
      *size = sizeof(uint8_t);
   30158:	2301      	movs	r3, #1
   3015a:	e7f8      	b.n	3014e <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x16>
      *size = sizeof(int64_t);
   3015c:	2308      	movs	r3, #8
   3015e:	e7f6      	b.n	3014e <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x16>
  return kTfLiteOk;
   30160:	2001      	movs	r0, #1
}
   30162:	4770      	bx	lr

00030164 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
   30164:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   30168:	460e      	mov	r6, r1
    return data_ - ReadScalar<soffset_t>(data_);
   3016a:	6801      	ldr	r1, [r0, #0]
   3016c:	4617      	mov	r7, r2
   3016e:	1a41      	subs	r1, r0, r1
   30170:	f8b1 c000 	ldrh.w	ip, [r1]
   30174:	461a      	mov	r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   30176:	f1bc 0f04 	cmp.w	ip, #4
   3017a:	d92a      	bls.n	301d2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
   3017c:	888b      	ldrh	r3, [r1, #4]
    auto p = data_ + field_offset;
   3017e:	18c4      	adds	r4, r0, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   30180:	b173      	cbz	r3, 301a0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x3c>
   30182:	58c3      	ldr	r3, [r0, r3]
  int element_count = 1;
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
   30184:	18e5      	adds	r5, r4, r3
   30186:	d00b      	beq.n	301a0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x3c>
  uoffset_t Length() const { return size(); }
   30188:	f854 8003 	ldr.w	r8, [r4, r3]
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
   3018c:	2300      	movs	r3, #0
  int element_count = 1;
   3018e:	2401      	movs	r4, #1
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
   30190:	4543      	cmp	r3, r8
   30192:	d006      	beq.n	301a2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x3e>
      element_count *= flatbuffer_tensor.shape()->Get(n);
   30194:	f855 ef04 	ldr.w	lr, [r5, #4]!
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
   30198:	3301      	adds	r3, #1
      element_count *= flatbuffer_tensor.shape()->Get(n);
   3019a:	fb0e f404 	mul.w	r4, lr, r4
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
   3019e:	e7f7      	b.n	30190 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x2c>
  int element_count = 1;
   301a0:	2401      	movs	r4, #1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   301a2:	f1bc 0f06 	cmp.w	ip, #6
   301a6:	d915      	bls.n	301d4 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x70>
   301a8:	88cd      	ldrh	r5, [r1, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   301aa:	b105      	cbz	r5, 301ae <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x4a>
   301ac:	5745      	ldrsb	r5, [r0, r5]
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
   301ae:	f10d 0107 	add.w	r1, sp, #7
   301b2:	b2e8      	uxtb	r0, r5
   301b4:	f7f0 f90c 	bl	203d0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
   301b8:	b940      	cbnz	r0, 301cc <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x68>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
   301ba:	4639      	mov	r1, r7
   301bc:	f89d 0007 	ldrb.w	r0, [sp, #7]
   301c0:	f7ff ffba 	bl	30138 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
   301c4:	b910      	cbnz	r0, 301cc <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x68>
  *bytes = element_count * (*type_size);
   301c6:	683b      	ldr	r3, [r7, #0]
   301c8:	435c      	muls	r4, r3
   301ca:	6034      	str	r4, [r6, #0]
  return kTfLiteOk;
}
   301cc:	b002      	add	sp, #8
   301ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  int element_count = 1;
   301d2:	2401      	movs	r4, #1
   301d4:	2500      	movs	r5, #0
   301d6:	e7ea      	b.n	301ae <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x4a>

000301d8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
   301d8:	6840      	ldr	r0, [r0, #4]
   301da:	6803      	ldr	r3, [r0, #0]
   301dc:	68db      	ldr	r3, [r3, #12]
   301de:	4718      	bx	r3

000301e0 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  }
   301e0:	4770      	bx	lr

000301e2 <_ZN6tflite14MicroAllocatorD1Ev>:
MicroAllocator::~MicroAllocator() {}
   301e2:	4770      	bx	lr

000301e4 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
   301e4:	4770      	bx	lr

000301e6 <_ZN6tflite14MicroAllocatorD0Ev>:
MicroAllocator::~MicroAllocator() {}
   301e6:	b510      	push	{r4, lr}
   301e8:	4604      	mov	r4, r0
   301ea:	f000 f9bd 	bl	30568 <_ZdlPv>
   301ee:	4620      	mov	r0, r4
   301f0:	bd10      	pop	{r4, pc}

000301f2 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
   301f2:	b510      	push	{r4, lr}
   301f4:	4604      	mov	r4, r0
   301f6:	f000 f9b7 	bl	30568 <_ZdlPv>
   301fa:	4620      	mov	r0, r4
   301fc:	bd10      	pop	{r4, pc}

000301fe <_ZNK6tflite22QuantizationParameters5scaleEv>:
  const flatbuffers::Vector<float> *scale() const {
   301fe:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
   30200:	2108      	movs	r1, #8
   30202:	4604      	mov	r4, r0
   30204:	f7f7 f935 	bl	27472 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   30208:	b110      	cbz	r0, 30210 <_ZNK6tflite22QuantizationParameters5scaleEv+0x12>
    auto p = data_ + field_offset;
   3020a:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   3020c:	5820      	ldr	r0, [r4, r0]
   3020e:	4418      	add	r0, r3
  }
   30210:	bd10      	pop	{r4, pc}

00030212 <_ZNK6tflite22QuantizationParameters10zero_pointEv>:
  const flatbuffers::Vector<int64_t> *zero_point() const {
   30212:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
   30214:	210a      	movs	r1, #10
   30216:	4604      	mov	r4, r0
   30218:	f7f7 f92b 	bl	27472 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   3021c:	b110      	cbz	r0, 30224 <_ZNK6tflite22QuantizationParameters10zero_pointEv+0x12>
    auto p = data_ + field_offset;
   3021e:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   30220:	5820      	ldr	r0, [r4, r0]
   30222:	4418      	add	r0, r3
  }
   30224:	bd10      	pop	{r4, pc}

00030226 <_ZNK6tflite6Tensor11is_variableEv>:
  bool is_variable() const {
   30226:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
   30228:	210e      	movs	r1, #14
   3022a:	4604      	mov	r4, r0
   3022c:	f7f7 f921 	bl	27472 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   30230:	b100      	cbz	r0, 30234 <_ZNK6tflite6Tensor11is_variableEv+0xe>
   30232:	5c20      	ldrb	r0, [r4, r0]
  }
   30234:	3800      	subs	r0, #0
   30236:	bf18      	it	ne
   30238:	2001      	movne	r0, #1
   3023a:	bd10      	pop	{r4, pc}

0003023c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
   3023c:	b510      	push	{r4, lr}
   3023e:	4604      	mov	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
   30240:	f7f7 f917 	bl	27472 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   30244:	b110      	cbz	r0, 3024c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x10>
    auto p = data_ + field_offset;
   30246:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   30248:	5820      	ldr	r0, [r4, r0]
   3024a:	4418      	add	r0, r3
  }
   3024c:	bd10      	pop	{r4, pc}

0003024e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
   3024e:	b510      	push	{r4, lr}
   30250:	4604      	mov	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
   30252:	f7f7 f90e 	bl	27472 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   30256:	b110      	cbz	r0, 3025e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x10>
    auto p = data_ + field_offset;
   30258:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   3025a:	5820      	ldr	r0, [r4, r0]
   3025c:	4418      	add	r0, r3
  }
   3025e:	bd10      	pop	{r4, pc}

00030260 <_ZN6tflite12ElementCountERK14TfLiteIntArray>:

}  // namespace

int ElementCount(const TfLiteIntArray& dims) {
  int result = 1;
  for (int i = 0; i < dims.size; ++i) {
   30260:	2200      	movs	r2, #0
  int result = 1;
   30262:	2301      	movs	r3, #1
int ElementCount(const TfLiteIntArray& dims) {
   30264:	b510      	push	{r4, lr}
  for (int i = 0; i < dims.size; ++i) {
   30266:	f850 4b04 	ldr.w	r4, [r0], #4
   3026a:	4294      	cmp	r4, r2
   3026c:	dd04      	ble.n	30278 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x18>
    result *= dims.data[i];
   3026e:	f850 1b04 	ldr.w	r1, [r0], #4
  for (int i = 0; i < dims.size; ++i) {
   30272:	3201      	adds	r2, #1
    result *= dims.data[i];
   30274:	434b      	muls	r3, r1
  for (int i = 0; i < dims.size; ++i) {
   30276:	e7f8      	b.n	3026a <_ZN6tflite12ElementCountERK14TfLiteIntArray+0xa>
  }
  return result;
}
   30278:	4618      	mov	r0, r3
   3027a:	bd10      	pop	{r4, pc}

0003027c <_ZN6tflite31FloatToAsymmetricQuantizedUInt8Effi>:

// Converts a float value into an unsigned eight-bit quantized value.
uint8_t FloatToAsymmetricQuantizedUInt8(const float value, const float scale,
                                        const int zero_point) {
  int32_t result = round(value / scale) + zero_point;
   3027c:	ee07 1a10 	vmov	s14, r1
   30280:	ee07 0a90 	vmov	s15, r0
   30284:	eec7 7a87 	vdiv.f32	s15, s15, s14
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
   30288:	feb8 7a67 	vrinta.f32	s14, s15
   3028c:	ee07 2a90 	vmov	s15, r2
   30290:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   30294:	ee77 7a87 	vadd.f32	s15, s15, s14
   30298:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   3029c:	ee17 0a90 	vmov	r0, s15
    result = kAsymmetricUInt8Min;
  }
  if (result > kAsymmetricUInt8Max) {
    result = kAsymmetricUInt8Max;
  }
  return result;
   302a0:	f380 0008 	usat	r0, #8, r0
}
   302a4:	b2c0      	uxtb	r0, r0
   302a6:	4770      	bx	lr

000302a8 <_ZN6tflite30FloatToAsymmetricQuantizedInt8Effi>:
  return result;
}

int8_t FloatToAsymmetricQuantizedInt8(const float value, const float scale,
                                      const int zero_point) {
  int32_t result = round(value / scale) + zero_point;
   302a8:	ee07 1a10 	vmov	s14, r1
   302ac:	ee07 0a90 	vmov	s15, r0
   302b0:	eec7 7a87 	vdiv.f32	s15, s15, s14
   302b4:	feb8 7a67 	vrinta.f32	s14, s15
   302b8:	ee07 2a90 	vmov	s15, r2
   302bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   302c0:	ee77 7a87 	vadd.f32	s15, s15, s14
   302c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   302c8:	ee17 0a90 	vmov	r0, s15
    result = kAsymmetricInt8Min;
  }
  if (result > kAsymmetricInt8Max) {
    result = kAsymmetricInt8Max;
  }
  return result;
   302cc:	f300 0007 	ssat	r0, #8, r0
}
   302d0:	b240      	sxtb	r0, r0
   302d2:	4770      	bx	lr

000302d4 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:
SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
   302d4:	4770      	bx	lr

000302d6 <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
   302d6:	b510      	push	{r4, lr}
   302d8:	4604      	mov	r4, r0
   302da:	f000 f945 	bl	30568 <_ZdlPv>
   302de:	4620      	mov	r0, r4
   302e0:	bd10      	pop	{r4, pc}

000302e2 <_ZNK6tflite21SimpleMemoryAllocator7GetHeadEv>:

uint8_t* SimpleMemoryAllocator::GetHead() const { return head_; }
   302e2:	6900      	ldr	r0, [r0, #16]
   302e4:	4770      	bx	lr

000302e6 <_ZNK6tflite21SimpleMemoryAllocator7GetTailEv>:

uint8_t* SimpleMemoryAllocator::GetTail() const { return tail_; }
   302e6:	6940      	ldr	r0, [r0, #20]
   302e8:	4770      	bx	lr

000302ea <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEv>:
size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory() const {
  return tail_ - head_;
   302ea:	e9d0 0204 	ldrd	r0, r2, [r0, #16]
}
   302ee:	1a10      	subs	r0, r2, r0
   302f0:	4770      	bx	lr

000302f2 <_ZN6tflite19GreedyMemoryPlannerD1Ev>:
}
   302f2:	4770      	bx	lr

000302f4 <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
   302f4:	6880      	ldr	r0, [r0, #8]
   302f6:	4770      	bx	lr

000302f8 <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
   302f8:	b510      	push	{r4, lr}
   302fa:	4604      	mov	r4, r0
}
   302fc:	f000 f934 	bl	30568 <_ZdlPv>
   30300:	4620      	mov	r0, r4
   30302:	bd10      	pop	{r4, pc}

00030304 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
void ReverseSortInPlace(int* values, int* ids, int size) {
   30304:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (int i = 1; i < size; ++i) {
   30306:	4604      	mov	r4, r0
   30308:	460b      	mov	r3, r1
   3030a:	2501      	movs	r5, #1
    any_swapped = false;
   3030c:	2600      	movs	r6, #0
    for (int i = 1; i < size; ++i) {
   3030e:	4295      	cmp	r5, r2
   30310:	da12      	bge.n	30338 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x34>
      if (values[i - 1] < values[i]) {
   30312:	e9d4 7c00 	ldrd	r7, ip, [r4]
   30316:	4567      	cmp	r7, ip
        values[i] = value_temp;
   30318:	bfb8      	it	lt
   3031a:	e9c4 c700 	strdlt	ip, r7, [r4]
    for (int i = 1; i < size; ++i) {
   3031e:	f105 0501 	add.w	r5, r5, #1
        ids[i - 1] = ids[i];
   30322:	bfb8      	it	lt
   30324:	e9d3 6700 	ldrdlt	r6, r7, [r3]
   30328:	f104 0404 	add.w	r4, r4, #4
        ids[i] = id_temp;
   3032c:	bfbc      	itt	lt
   3032e:	e9c3 7600 	strdlt	r7, r6, [r3]
        any_swapped = true;
   30332:	2601      	movlt	r6, #1
    for (int i = 1; i < size; ++i) {
   30334:	3304      	adds	r3, #4
   30336:	e7ea      	b.n	3030e <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xa>
  do {
   30338:	2e00      	cmp	r6, #0
   3033a:	d1e4      	bne.n	30306 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x2>
}
   3033c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003033e <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:
    int last_time_used, int offline_offset) {
   3033e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  BufferRequirements* current = &requirements_[buffer_count_];
   30340:	e9d0 6502 	ldrd	r6, r5, [r0, #8]
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
   30344:	9f08      	ldr	r7, [sp, #32]
   30346:	6804      	ldr	r4, [r0, #0]
   30348:	9700      	str	r7, [sp, #0]
   3034a:	68a4      	ldr	r4, [r4, #8]
   3034c:	47a0      	blx	r4
   3034e:	b928      	cbnz	r0, 3035c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x1e>
  current->offline_offset = offline_offset;
   30350:	9b09      	ldr	r3, [sp, #36]	; 0x24
   30352:	eb05 1506 	add.w	r5, r5, r6, lsl #4
   30356:	606b      	str	r3, [r5, #4]
}
   30358:	b003      	add	sp, #12
   3035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return kTfLiteError;
   3035c:	2001      	movs	r0, #1
   3035e:	e7fb      	b.n	30358 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x1a>

00030360 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:
    const int last_time_used) const {
   30360:	b510      	push	{r4, lr}
      &requirements_[entry->requirements_index];
   30362:	684c      	ldr	r4, [r1, #4]
  const BufferRequirements* entry_requirements =
   30364:	68c1      	ldr	r1, [r0, #12]
   30366:	eb01 1104 	add.w	r1, r1, r4, lsl #4
  if (entry_requirements->first_time_used > last_time_used) {
   3036a:	6888      	ldr	r0, [r1, #8]
   3036c:	4298      	cmp	r0, r3
   3036e:	dc05      	bgt.n	3037c <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x1c>
  if (first_time_used > entry_requirements->last_time_used) {
   30370:	68c8      	ldr	r0, [r1, #12]
   30372:	4290      	cmp	r0, r2
   30374:	bfb4      	ite	lt
   30376:	2000      	movlt	r0, #0
   30378:	2001      	movge	r0, #1
}
   3037a:	bd10      	pop	{r4, pc}
    return false;
   3037c:	2000      	movs	r0, #0
   3037e:	e7fc      	b.n	3037a <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x1a>

00030380 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:
    const int last_time_used) {
   30380:	b570      	push	{r4, r5, r6, lr}
   30382:	4605      	mov	r5, r0
  if (start == nullptr) {
   30384:	b989      	cbnz	r1, 303aa <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x2a>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
   30386:	6a04      	ldr	r4, [r0, #32]
   30388:	200c      	movs	r0, #12
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
   3038a:	260c      	movs	r6, #12
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
   3038c:	69a9      	ldr	r1, [r5, #24]
   3038e:	fb00 1404 	mla	r4, r0, r4, r1
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
   30392:	4621      	mov	r1, r4
   30394:	4628      	mov	r0, r5
   30396:	f7ff ffe3 	bl	30360 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
   3039a:	b950      	cbnz	r0, 303b2 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x32>
    if (candidate_next_entry->next_entry_index == -1) {
   3039c:	68a4      	ldr	r4, [r4, #8]
   3039e:	1c61      	adds	r1, r4, #1
   303a0:	d009      	beq.n	303b6 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x36>
    candidate_next_entry =
   303a2:	69a9      	ldr	r1, [r5, #24]
   303a4:	fb06 1404 	mla	r4, r6, r4, r1
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
   303a8:	e7f3      	b.n	30392 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x12>
    if (start->next_entry_index == -1) {
   303aa:	688c      	ldr	r4, [r1, #8]
   303ac:	1c60      	adds	r0, r4, #1
   303ae:	d1eb      	bne.n	30388 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x8>
      return nullptr;
   303b0:	2400      	movs	r4, #0
}
   303b2:	4620      	mov	r0, r4
   303b4:	bd70      	pop	{r4, r5, r6, pc}
      return nullptr;
   303b6:	4604      	mov	r4, r0
   303b8:	e7fb      	b.n	303b2 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x32>

000303ba <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:
void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
   303ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
   303be:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
   303c2:	4604      	mov	r4, r0
   303c4:	b085      	sub	sp, #20
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
   303c6:	2b00      	cmp	r3, #0
   303c8:	f000 80ae 	beq.w	30528 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16e>
   303cc:	6885      	ldr	r5, [r0, #8]
   303ce:	2d00      	cmp	r5, #0
   303d0:	f000 80aa 	beq.w	30528 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16e>
  need_to_calculate_offsets_ = false;
   303d4:	e9d0 7604 	ldrd	r7, r6, [r0, #16]
   303d8:	2300      	movs	r3, #0
  int idx_from_head = 0;
   303da:	461a      	mov	r2, r3
  need_to_calculate_offsets_ = false;
   303dc:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
  for (int i = 0; i < buffer_count_; ++i) {
   303e0:	f8d4 c008 	ldr.w	ip, [r4, #8]
   303e4:	ea4f 0e82 	mov.w	lr, r2, lsl #2
   303e8:	459c      	cmp	ip, r3
   303ea:	eb07 0082 	add.w	r0, r7, r2, lsl #2
   303ee:	eb06 0182 	add.w	r1, r6, r2, lsl #2
   303f2:	dd1e      	ble.n	30432 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x78>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
   303f4:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   303f8:	0119      	lsls	r1, r3, #4
   303fa:	eb0c 1003 	add.w	r0, ip, r3, lsl #4
   303fe:	f8d0 8004 	ldr.w	r8, [r0, #4]
   30402:	f85c c001 	ldr.w	ip, [ip, r1]
   30406:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   3040a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   3040c:	d108      	bne.n	30420 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x66>
      idx_from_tail--;
   3040e:	3d01      	subs	r5, #1
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
   30410:	f847 c025 	str.w	ip, [r7, r5, lsl #2]
      buffer_ids_sorted_[idx_from_tail] = i;
   30414:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
      buffer_offsets_[i] = -1;
   30418:	f841 8023 	str.w	r8, [r1, r3, lsl #2]
  for (int i = 0; i < buffer_count_; ++i) {
   3041c:	3301      	adds	r3, #1
   3041e:	e7df      	b.n	303e0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x26>
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
   30420:	f847 c00e 	str.w	ip, [r7, lr]
      buffer_ids_sorted_[idx_from_head] = i;
   30424:	f846 300e 	str.w	r3, [r6, lr]
      buffer_offsets_[i] = requirements_[i].offline_offset;
   30428:	6840      	ldr	r0, [r0, #4]
      idx_from_head++;
   3042a:	3201      	adds	r2, #1
      buffer_offsets_[i] = requirements_[i].offline_offset;
   3042c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
      idx_from_head++;
   30430:	e7f4      	b.n	3041c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x62>
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
   30432:	ebac 0202 	sub.w	r2, ip, r2
   30436:	f7ff ff65 	bl	30304 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  next_free_entry_ = 1;
   3043a:	2301      	movs	r3, #1
   3043c:	2200      	movs	r2, #0
   3043e:	e9c4 3207 	strd	r3, r2, [r4, #28]
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
   30442:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
   30446:	69a6      	ldr	r6, [r4, #24]
  for (int i = 1; i < buffer_count_; ++i) {
   30448:	2701      	movs	r7, #1
  first_entry->offset = buffer_offsets_[buffer_id];
   3044a:	46b2      	mov	sl, r6
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
   3044c:	60b3      	str	r3, [r6, #8]
  int buffer_id = buffer_ids_sorted_[0];
   3044e:	6963      	ldr	r3, [r4, #20]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
   30450:	f8d4 800c 	ldr.w	r8, [r4, #12]
  int buffer_id = buffer_ids_sorted_[0];
   30454:	9301      	str	r3, [sp, #4]
   30456:	681b      	ldr	r3, [r3, #0]
  first_entry->requirements_index = buffer_id;
   30458:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
   3045c:	eb08 1103 	add.w	r1, r8, r3, lsl #4
   30460:	6849      	ldr	r1, [r1, #4]
  first_entry->requirements_index = buffer_id;
   30462:	6073      	str	r3, [r6, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
   30464:	3101      	adds	r1, #1
    buffer_offsets_[buffer_id] = 0;
   30466:	bf08      	it	eq
   30468:	f84b 2023 	streq.w	r2, [fp, r3, lsl #2]
  first_entry->offset = buffer_offsets_[buffer_id];
   3046c:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
   30470:	6033      	str	r3, [r6, #0]
  for (int i = 1; i < buffer_count_; ++i) {
   30472:	68a3      	ldr	r3, [r4, #8]
   30474:	42bb      	cmp	r3, r7
   30476:	dd57      	ble.n	30528 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16e>
    buffer_id = buffer_ids_sorted_[i];
   30478:	9b01      	ldr	r3, [sp, #4]
   3047a:	f853 9027 	ldr.w	r9, [r3, r7, lsl #2]
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
   3047e:	eb08 1309 	add.w	r3, r8, r9, lsl #4
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
   30482:	685d      	ldr	r5, [r3, #4]
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
   30484:	ea4f 1209 	mov.w	r2, r9, lsl #4
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
   30488:	1c69      	adds	r1, r5, #1
   3048a:	d120      	bne.n	304ce <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x114>
      ListEntry* prior_entry = nullptr;
   3048c:	2000      	movs	r0, #0
    const int wanted_last_time_used = wanted_requirements->last_time_used;
   3048e:	edd3 7a03 	vldr	s15, [r3, #12]
    int candidate_offset = 0;
   30492:	4605      	mov	r5, r0
    const int wanted_size = wanted_requirements->size;
   30494:	f858 2002 	ldr.w	r2, [r8, r2]
   30498:	9202      	str	r2, [sp, #8]
    const int wanted_first_time_used = wanted_requirements->first_time_used;
   3049a:	689a      	ldr	r2, [r3, #8]
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
   3049c:	4601      	mov	r1, r0
   3049e:	9003      	str	r0, [sp, #12]
   304a0:	ee17 3a90 	vmov	r3, s15
   304a4:	4620      	mov	r0, r4
   304a6:	f7ff ff6b 	bl	30380 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
        if (prior_entry) {
   304aa:	9903      	ldr	r1, [sp, #12]
   304ac:	b149      	cbz	r1, 304c2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x108>
              prior_entry->offset + candidate_requirements->size;
   304ae:	684b      	ldr	r3, [r1, #4]
          const int prior_entry_offset =
   304b0:	6809      	ldr	r1, [r1, #0]
              prior_entry->offset + candidate_requirements->size;
   304b2:	ea4f 1c03 	mov.w	ip, r3, lsl #4
          const int prior_entry_offset =
   304b6:	f858 c00c 	ldr.w	ip, [r8, ip]
   304ba:	448c      	add	ip, r1
   304bc:	4565      	cmp	r5, ip
   304be:	bfb8      	it	lt
   304c0:	4665      	movlt	r5, ip
        if (next_entry == nullptr) {
   304c2:	b120      	cbz	r0, 304ce <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x114>
        const int gap = next_entry->offset - candidate_offset;
   304c4:	6801      	ldr	r1, [r0, #0]
        if (gap >= wanted_size) {
   304c6:	9b02      	ldr	r3, [sp, #8]
        const int gap = next_entry->offset - candidate_offset;
   304c8:	1b49      	subs	r1, r1, r5
        if (gap >= wanted_size) {
   304ca:	428b      	cmp	r3, r1
   304cc:	dce6      	bgt.n	3049c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xe2>
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
   304ce:	220c      	movs	r2, #12
    buffer_offsets_[buffer_id] = candidate_offset;
   304d0:	f84b 5029 	str.w	r5, [fp, r9, lsl #2]
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
   304d4:	69e3      	ldr	r3, [r4, #28]
   304d6:	fb02 f103 	mul.w	r1, r2, r3
    new_entry->offset = candidate_offset;
   304da:	5075      	str	r5, [r6, r1]
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
   304dc:	1872      	adds	r2, r6, r1
    ++next_free_entry_;
   304de:	1c59      	adds	r1, r3, #1
    new_entry->requirements_index = buffer_id;
   304e0:	f8c2 9004 	str.w	r9, [r2, #4]
    ++next_free_entry_;
   304e4:	61e1      	str	r1, [r4, #28]
    if (first_entry->offset > candidate_offset) {
   304e6:	f8da 1000 	ldr.w	r1, [sl]
   304ea:	42a9      	cmp	r1, r5
   304ec:	dd05      	ble.n	304fa <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x140>
      first_entry->next_entry_index = first_entry_index_;
   304ee:	4692      	mov	sl, r2
   304f0:	6a21      	ldr	r1, [r4, #32]
   304f2:	6091      	str	r1, [r2, #8]
      first_entry_index_ = new_entry_index;
   304f4:	6223      	str	r3, [r4, #32]
  for (int i = 1; i < buffer_count_; ++i) {
   304f6:	3701      	adds	r7, #1
   304f8:	e7bb      	b.n	30472 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xb8>
   304fa:	4651      	mov	r1, sl
        const int next_entry_index = current_entry->next_entry_index;
   304fc:	6888      	ldr	r0, [r1, #8]
        if (next_entry_index == -1) {
   304fe:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   30502:	d104      	bne.n	3050e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x154>
          current_entry->next_entry_index = new_entry_index;
   30504:	608b      	str	r3, [r1, #8]
          new_entry->next_entry_index = -1;
   30506:	6090      	str	r0, [r2, #8]
          break;
   30508:	e7f5      	b.n	304f6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x13c>
   3050a:	4671      	mov	r1, lr
   3050c:	e7f6      	b.n	304fc <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x142>
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
   3050e:	f04f 0c0c 	mov.w	ip, #12
   30512:	fb0c fc00 	mul.w	ip, ip, r0
   30516:	eb06 0e0c 	add.w	lr, r6, ip
        if (next_entry->offset > candidate_offset) {
   3051a:	f856 c00c 	ldr.w	ip, [r6, ip]
   3051e:	45ac      	cmp	ip, r5
   30520:	ddf3      	ble.n	3050a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x150>
          new_entry->next_entry_index = current_entry->next_entry_index;
   30522:	6090      	str	r0, [r2, #8]
          current_entry->next_entry_index = new_entry_index;
   30524:	608b      	str	r3, [r1, #8]
          break;
   30526:	e7e6      	b.n	304f6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x13c>
}
   30528:	b005      	add	sp, #20
   3052a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0003052e <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:
size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
   3052e:	b570      	push	{r4, r5, r6, lr}
   30530:	4604      	mov	r4, r0
  CalculateOffsetsIfNeeded();
   30532:	f7ff ff42 	bl	303ba <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
   30536:	68a0      	ldr	r0, [r4, #8]
   30538:	b1a8      	cbz	r0, 30566 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x38>
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
   3053a:	220c      	movs	r2, #12
  size_t max_size = 0;
   3053c:	2000      	movs	r0, #0
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
   3053e:	69a5      	ldr	r5, [r4, #24]
   30540:	6a23      	ldr	r3, [r4, #32]
   30542:	fb02 5303 	mla	r3, r2, r3, r5
  while (entry) {
   30546:	b173      	cbz	r3, 30566 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x38>
        &requirements_[entry->requirements_index];
   30548:	6859      	ldr	r1, [r3, #4]
    const size_t current_size = entry->offset + requirements->size;
   3054a:	68e6      	ldr	r6, [r4, #12]
   3054c:	0109      	lsls	r1, r1, #4
   3054e:	5871      	ldr	r1, [r6, r1]
   30550:	681e      	ldr	r6, [r3, #0]
    if (entry->next_entry_index == -1) {
   30552:	689b      	ldr	r3, [r3, #8]
    const size_t current_size = entry->offset + requirements->size;
   30554:	4431      	add	r1, r6
   30556:	4288      	cmp	r0, r1
   30558:	bf38      	it	cc
   3055a:	4608      	movcc	r0, r1
    if (entry->next_entry_index == -1) {
   3055c:	1c59      	adds	r1, r3, #1
   3055e:	d002      	beq.n	30566 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x38>
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
   30560:	fb02 5303 	mla	r3, r2, r3, r5
  while (entry) {
   30564:	e7ef      	b.n	30546 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x18>
}
   30566:	bd70      	pop	{r4, r5, r6, pc}

00030568 <_ZdlPv>:
   30568:	f7f5 b80e 	b.w	25588 <free>

0003056c <_ZdaPv>:
   3056c:	f7ff bffc 	b.w	30568 <_ZdlPv>

00030570 <__cxa_guard_release>:
   30570:	2301      	movs	r3, #1
   30572:	6003      	str	r3, [r0, #0]
   30574:	4770      	bx	lr

00030576 <_ZN9__gnu_cxx20recursive_init_errorD0Ev>:
   30576:	b510      	push	{r4, lr}
   30578:	4604      	mov	r4, r0
   3057a:	f7f1 fe35 	bl	221e8 <_ZN9__gnu_cxx20recursive_init_errorD1Ev>
   3057e:	2104      	movs	r1, #4
   30580:	4620      	mov	r0, r4
   30582:	f000 f8fc 	bl	3077e <_ZdlPvj>
   30586:	4620      	mov	r0, r4
   30588:	bd10      	pop	{r4, pc}

0003058a <_Znaj>:
   3058a:	f7f1 bf11 	b.w	223b0 <_Znwj>

0003058e <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   3058e:	b510      	push	{r4, lr}
   30590:	4604      	mov	r4, r0
   30592:	f7f1 fe39 	bl	22208 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   30596:	210c      	movs	r1, #12
   30598:	4620      	mov	r0, r4
   3059a:	f000 f8f0 	bl	3077e <_ZdlPvj>
   3059e:	4620      	mov	r0, r4
   305a0:	bd10      	pop	{r4, pc}

000305a2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   305a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   305a4:	9f08      	ldr	r7, [sp, #32]
   305a6:	4605      	mov	r5, r0
   305a8:	460e      	mov	r6, r1
   305aa:	4614      	mov	r4, r2
   305ac:	4297      	cmp	r7, r2
   305ae:	d00a      	beq.n	305c6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   305b0:	68a8      	ldr	r0, [r5, #8]
   305b2:	4631      	mov	r1, r6
   305b4:	6802      	ldr	r2, [r0, #0]
   305b6:	9708      	str	r7, [sp, #32]
   305b8:	6a15      	ldr	r5, [r2, #32]
   305ba:	4622      	mov	r2, r4
   305bc:	46ac      	mov	ip, r5
   305be:	b003      	add	sp, #12
   305c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   305c4:	4760      	bx	ip
   305c6:	4619      	mov	r1, r3
   305c8:	9301      	str	r3, [sp, #4]
   305ca:	f000 f858 	bl	3067e <_ZNKSt9type_infoeqERKS_>
   305ce:	9b01      	ldr	r3, [sp, #4]
   305d0:	2800      	cmp	r0, #0
   305d2:	d0ed      	beq.n	305b0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   305d4:	2006      	movs	r0, #6
   305d6:	b003      	add	sp, #12
   305d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000305da <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   305da:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   305de:	460d      	mov	r5, r1
   305e0:	4619      	mov	r1, r3
   305e2:	4681      	mov	r9, r0
   305e4:	4617      	mov	r7, r2
   305e6:	4698      	mov	r8, r3
   305e8:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   305ec:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   305f0:	f000 f845 	bl	3067e <_ZNKSt9type_infoeqERKS_>
   305f4:	b190      	cbz	r0, 3061c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   305f6:	2d00      	cmp	r5, #0
   305f8:	6034      	str	r4, [r6, #0]
   305fa:	7137      	strb	r7, [r6, #4]
   305fc:	db09      	blt.n	30612 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   305fe:	1961      	adds	r1, r4, r5
   30600:	458a      	cmp	sl, r1
   30602:	bf0c      	ite	eq
   30604:	2106      	moveq	r1, #6
   30606:	2101      	movne	r1, #1
   30608:	71b1      	strb	r1, [r6, #6]
   3060a:	2000      	movs	r0, #0
   3060c:	b001      	add	sp, #4
   3060e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30612:	3502      	adds	r5, #2
   30614:	d1f9      	bne.n	3060a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   30616:	2301      	movs	r3, #1
   30618:	71b3      	strb	r3, [r6, #6]
   3061a:	e7f6      	b.n	3060a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   3061c:	4554      	cmp	r4, sl
   3061e:	d106      	bne.n	3062e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   30620:	4659      	mov	r1, fp
   30622:	4648      	mov	r0, r9
   30624:	f000 f82b 	bl	3067e <_ZNKSt9type_infoeqERKS_>
   30628:	b108      	cbz	r0, 3062e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   3062a:	7177      	strb	r7, [r6, #5]
   3062c:	e7ed      	b.n	3060a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   3062e:	f8d9 0008 	ldr.w	r0, [r9, #8]
   30632:	463a      	mov	r2, r7
   30634:	4629      	mov	r1, r5
   30636:	6803      	ldr	r3, [r0, #0]
   30638:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   3063c:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   30640:	69dc      	ldr	r4, [r3, #28]
   30642:	4643      	mov	r3, r8
   30644:	46a4      	mov	ip, r4
   30646:	b001      	add	sp, #4
   30648:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3064c:	4760      	bx	ip

0003064e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   3064e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30652:	4607      	mov	r7, r0
   30654:	460c      	mov	r4, r1
   30656:	4615      	mov	r5, r2
   30658:	461e      	mov	r6, r3
   3065a:	f000 f86f 	bl	3073c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   3065e:	b948      	cbnz	r0, 30674 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   30660:	68b8      	ldr	r0, [r7, #8]
   30662:	462a      	mov	r2, r5
   30664:	4621      	mov	r1, r4
   30666:	6803      	ldr	r3, [r0, #0]
   30668:	699f      	ldr	r7, [r3, #24]
   3066a:	4633      	mov	r3, r6
   3066c:	46bc      	mov	ip, r7
   3066e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   30672:	4760      	bx	ip
   30674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00030678 <_ZNSt9type_infoD1Ev>:
   30678:	4770      	bx	lr

0003067a <_ZNKSt9type_info14__is_pointer_pEv>:
   3067a:	2000      	movs	r0, #0
   3067c:	4770      	bx	lr

0003067e <_ZNKSt9type_infoeqERKS_>:
   3067e:	4281      	cmp	r1, r0
   30680:	b508      	push	{r3, lr}
   30682:	d00e      	beq.n	306a2 <_ZNKSt9type_infoeqERKS_+0x24>
   30684:	6840      	ldr	r0, [r0, #4]
   30686:	7803      	ldrb	r3, [r0, #0]
   30688:	2b2a      	cmp	r3, #42	; 0x2a
   3068a:	d00c      	beq.n	306a6 <_ZNKSt9type_infoeqERKS_+0x28>
   3068c:	6849      	ldr	r1, [r1, #4]
   3068e:	780b      	ldrb	r3, [r1, #0]
   30690:	2b2a      	cmp	r3, #42	; 0x2a
   30692:	bf08      	it	eq
   30694:	3101      	addeq	r1, #1
   30696:	f7e1 fa35 	bl	11b04 <strcmp>
   3069a:	fab0 f080 	clz	r0, r0
   3069e:	0940      	lsrs	r0, r0, #5
   306a0:	bd08      	pop	{r3, pc}
   306a2:	2001      	movs	r0, #1
   306a4:	e7fc      	b.n	306a0 <_ZNKSt9type_infoeqERKS_+0x22>
   306a6:	2000      	movs	r0, #0
   306a8:	e7fa      	b.n	306a0 <_ZNKSt9type_infoeqERKS_+0x22>

000306aa <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   306aa:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   306ac:	2400      	movs	r4, #0
   306ae:	2310      	movs	r3, #16
   306b0:	4615      	mov	r5, r2
   306b2:	6812      	ldr	r2, [r2, #0]
   306b4:	9400      	str	r4, [sp, #0]
   306b6:	f88d 4004 	strb.w	r4, [sp, #4]
   306ba:	e9cd 3402 	strd	r3, r4, [sp, #8]
   306be:	6803      	ldr	r3, [r0, #0]
   306c0:	699e      	ldr	r6, [r3, #24]
   306c2:	466b      	mov	r3, sp
   306c4:	47b0      	blx	r6
   306c6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   306ca:	f003 0306 	and.w	r3, r3, #6
   306ce:	2b06      	cmp	r3, #6
   306d0:	bf05      	ittet	eq
   306d2:	9b00      	ldreq	r3, [sp, #0]
   306d4:	2001      	moveq	r0, #1
   306d6:	4620      	movne	r0, r4
   306d8:	602b      	streq	r3, [r5, #0]
   306da:	b004      	add	sp, #16
   306dc:	bd70      	pop	{r4, r5, r6, pc}

000306de <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   306de:	9800      	ldr	r0, [sp, #0]
   306e0:	4290      	cmp	r0, r2
   306e2:	bf14      	ite	ne
   306e4:	2001      	movne	r0, #1
   306e6:	2006      	moveq	r0, #6
   306e8:	4770      	bx	lr

000306ea <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   306ea:	b510      	push	{r4, lr}
   306ec:	4604      	mov	r4, r0
   306ee:	f7f1 fd95 	bl	2221c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   306f2:	2108      	movs	r1, #8
   306f4:	4620      	mov	r0, r4
   306f6:	f000 f842 	bl	3077e <_ZdlPvj>
   306fa:	4620      	mov	r0, r4
   306fc:	bd10      	pop	{r4, pc}

000306fe <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   306fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30702:	f8dd 8018 	ldr.w	r8, [sp, #24]
   30706:	461f      	mov	r7, r3
   30708:	4606      	mov	r6, r0
   3070a:	4615      	mov	r5, r2
   3070c:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   30710:	4598      	cmp	r8, r3
   30712:	d107      	bne.n	30724 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   30714:	9907      	ldr	r1, [sp, #28]
   30716:	f7ff ffb2 	bl	3067e <_ZNKSt9type_infoeqERKS_>
   3071a:	b118      	cbz	r0, 30724 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   3071c:	7165      	strb	r5, [r4, #5]
   3071e:	2000      	movs	r0, #0
   30720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   30724:	4639      	mov	r1, r7
   30726:	4630      	mov	r0, r6
   30728:	f7ff ffa9 	bl	3067e <_ZNKSt9type_infoeqERKS_>
   3072c:	2800      	cmp	r0, #0
   3072e:	d0f6      	beq.n	3071e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   30730:	2301      	movs	r3, #1
   30732:	f8c4 8000 	str.w	r8, [r4]
   30736:	7125      	strb	r5, [r4, #4]
   30738:	71a3      	strb	r3, [r4, #6]
   3073a:	e7f0      	b.n	3071e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

0003073c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   3073c:	b538      	push	{r3, r4, r5, lr}
   3073e:	4615      	mov	r5, r2
   30740:	461c      	mov	r4, r3
   30742:	f7ff ff9c 	bl	3067e <_ZNKSt9type_infoeqERKS_>
   30746:	b120      	cbz	r0, 30752 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   30748:	2308      	movs	r3, #8
   3074a:	6025      	str	r5, [r4, #0]
   3074c:	60e3      	str	r3, [r4, #12]
   3074e:	2306      	movs	r3, #6
   30750:	7123      	strb	r3, [r4, #4]
   30752:	bd38      	pop	{r3, r4, r5, pc}

00030754 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   30754:	b573      	push	{r0, r1, r4, r5, r6, lr}
   30756:	4605      	mov	r5, r0
   30758:	460c      	mov	r4, r1
   3075a:	461e      	mov	r6, r3
   3075c:	9201      	str	r2, [sp, #4]
   3075e:	f7ff ff8e 	bl	3067e <_ZNKSt9type_infoeqERKS_>
   30762:	b950      	cbnz	r0, 3077a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   30764:	2e03      	cmp	r6, #3
   30766:	d808      	bhi.n	3077a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   30768:	6823      	ldr	r3, [r4, #0]
   3076a:	4629      	mov	r1, r5
   3076c:	9a01      	ldr	r2, [sp, #4]
   3076e:	4620      	mov	r0, r4
   30770:	695b      	ldr	r3, [r3, #20]
   30772:	b002      	add	sp, #8
   30774:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   30778:	4718      	bx	r3
   3077a:	b002      	add	sp, #8
   3077c:	bd70      	pop	{r4, r5, r6, pc}

0003077e <_ZdlPvj>:
   3077e:	f7ff bef3 	b.w	30568 <_ZdlPv>

00030782 <__cxa_allocate_exception>:
   30782:	b510      	push	{r4, lr}
   30784:	f100 0480 	add.w	r4, r0, #128	; 0x80
   30788:	4620      	mov	r0, r4
   3078a:	f7f4 fef5 	bl	25578 <malloc>
   3078e:	4603      	mov	r3, r0
   30790:	b930      	cbnz	r0, 307a0 <__cxa_allocate_exception+0x1e>
   30792:	4620      	mov	r0, r4
   30794:	f7f1 fd84 	bl	222a0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>
   30798:	4603      	mov	r3, r0
   3079a:	b908      	cbnz	r0, 307a0 <__cxa_allocate_exception+0x1e>
   3079c:	f000 f823 	bl	307e6 <_ZSt9terminatev>
   307a0:	2280      	movs	r2, #128	; 0x80
   307a2:	2100      	movs	r1, #0
   307a4:	4618      	mov	r0, r3
   307a6:	f000 fb52 	bl	30e4e <memset>
   307aa:	3080      	adds	r0, #128	; 0x80
   307ac:	bd10      	pop	{r4, pc}

000307ae <_ZNSt9exceptionD1Ev>:
   307ae:	4770      	bx	lr

000307b0 <_ZNSt13bad_exceptionD1Ev>:
   307b0:	4770      	bx	lr

000307b2 <_ZNSt13bad_exceptionD0Ev>:
   307b2:	b510      	push	{r4, lr}
   307b4:	4604      	mov	r4, r0
   307b6:	2104      	movs	r1, #4
   307b8:	f7ff ffe1 	bl	3077e <_ZdlPvj>
   307bc:	4620      	mov	r0, r4
   307be:	bd10      	pop	{r4, pc}

000307c0 <_ZN10__cxxabiv111__terminateEPFvvE>:
   307c0:	b507      	push	{r0, r1, r2, lr}
   307c2:	4780      	blx	r0
   307c4:	f000 faf9 	bl	30dba <abort>
   307c8:	f000 f939 	bl	30a3e <__cxa_begin_catch>
   307cc:	f000 faf5 	bl	30dba <abort>
   307d0:	460c      	mov	r4, r1
   307d2:	9001      	str	r0, [sp, #4]
   307d4:	f000 f95c 	bl	30a90 <__cxa_end_catch>
   307d8:	9801      	ldr	r0, [sp, #4]
   307da:	3401      	adds	r4, #1
   307dc:	d001      	beq.n	307e2 <_ZN10__cxxabiv111__terminateEPFvvE+0x22>
   307de:	f000 f88c 	bl	308fa <__cxa_end_cleanup>
   307e2:	f7f1 fe6f 	bl	224c4 <__cxa_call_unexpected>

000307e6 <_ZSt9terminatev>:
   307e6:	b508      	push	{r3, lr}
   307e8:	f7f1 fdaa 	bl	22340 <_ZSt13get_terminatev>
   307ec:	f7ff ffe8 	bl	307c0 <_ZN10__cxxabiv111__terminateEPFvvE>

000307f0 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   307f0:	b508      	push	{r3, lr}
   307f2:	4780      	blx	r0
   307f4:	f7ff fff7 	bl	307e6 <_ZSt9terminatev>

000307f8 <_ZSt10unexpectedv>:
   307f8:	b508      	push	{r3, lr}
   307fa:	f7f1 fda7 	bl	2234c <_ZSt14get_unexpectedv>
   307fe:	f7ff fff7 	bl	307f0 <_ZN10__cxxabiv112__unexpectedEPFvvE>

00030802 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
   30802:	2801      	cmp	r0, #1
   30804:	b507      	push	{r0, r1, r2, lr}
   30806:	d903      	bls.n	30810 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
   30808:	f851 0c14 	ldr.w	r0, [r1, #-20]
   3080c:	f7ff ffd8 	bl	307c0 <_ZN10__cxxabiv111__terminateEPFvvE>
   30810:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
   30814:	e8d3 2fef 	ldaex	r2, [r3]
   30818:	3a01      	subs	r2, #1
   3081a:	e8c3 2fe0 	stlex	r0, r2, [r3]
   3081e:	2800      	cmp	r0, #0
   30820:	d1f8      	bne.n	30814 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x12>
   30822:	b962      	cbnz	r2, 3083e <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
   30824:	f851 3c1c 	ldr.w	r3, [r1, #-28]
   30828:	f101 0058 	add.w	r0, r1, #88	; 0x58
   3082c:	b113      	cbz	r3, 30834 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x32>
   3082e:	9001      	str	r0, [sp, #4]
   30830:	4798      	blx	r3
   30832:	9801      	ldr	r0, [sp, #4]
   30834:	b003      	add	sp, #12
   30836:	f85d eb04 	ldr.w	lr, [sp], #4
   3083a:	f7f1 bd55 	b.w	222e8 <__cxa_free_exception>
   3083e:	b003      	add	sp, #12
   30840:	f85d fb04 	ldr.w	pc, [sp], #4

00030844 <__cxa_throw>:
   30844:	b513      	push	{r0, r1, r4, lr}
   30846:	4604      	mov	r4, r0
   30848:	e9cd 2100 	strd	r2, r1, [sp]
   3084c:	f7f1 feb6 	bl	225bc <__cxa_get_globals>
   30850:	6843      	ldr	r3, [r0, #4]
   30852:	3301      	adds	r3, #1
   30854:	e9dd 2100 	ldrd	r2, r1, [sp]
   30858:	6043      	str	r3, [r0, #4]
   3085a:	4620      	mov	r0, r4
   3085c:	f7f1 fd7c 	bl	22358 <__cxa_init_primary_exception>
   30860:	2301      	movs	r3, #1
   30862:	4604      	mov	r4, r0
   30864:	f844 3b28 	str.w	r3, [r4], #40
   30868:	4620      	mov	r0, r4
   3086a:	f7e0 ff09 	bl	11680 <_Unwind_RaiseException>
   3086e:	4620      	mov	r0, r4
   30870:	f000 f8e5 	bl	30a3e <__cxa_begin_catch>
   30874:	f7ff ffb7 	bl	307e6 <_ZSt9terminatev>

00030878 <__cxa_rethrow>:
   30878:	b510      	push	{r4, lr}
   3087a:	f7f1 fe9f 	bl	225bc <__cxa_get_globals>
   3087e:	e9d0 4200 	ldrd	r4, r2, [r0]
   30882:	3201      	adds	r2, #1
   30884:	6042      	str	r2, [r0, #4]
   30886:	b34c      	cbz	r4, 308dc <__cxa_rethrow+0x64>
   30888:	f894 2020 	ldrb.w	r2, [r4, #32]
   3088c:	2a47      	cmp	r2, #71	; 0x47
   3088e:	d127      	bne.n	308e0 <__cxa_rethrow+0x68>
   30890:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   30894:	2a4e      	cmp	r2, #78	; 0x4e
   30896:	d123      	bne.n	308e0 <__cxa_rethrow+0x68>
   30898:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   3089c:	2a55      	cmp	r2, #85	; 0x55
   3089e:	d11f      	bne.n	308e0 <__cxa_rethrow+0x68>
   308a0:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
   308a4:	2a43      	cmp	r2, #67	; 0x43
   308a6:	d11b      	bne.n	308e0 <__cxa_rethrow+0x68>
   308a8:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   308ac:	2a43      	cmp	r2, #67	; 0x43
   308ae:	d117      	bne.n	308e0 <__cxa_rethrow+0x68>
   308b0:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   308b4:	2a2b      	cmp	r2, #43	; 0x2b
   308b6:	d113      	bne.n	308e0 <__cxa_rethrow+0x68>
   308b8:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   308bc:	2a2b      	cmp	r2, #43	; 0x2b
   308be:	d10f      	bne.n	308e0 <__cxa_rethrow+0x68>
   308c0:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   308c4:	2a01      	cmp	r2, #1
   308c6:	d80b      	bhi.n	308e0 <__cxa_rethrow+0x68>
   308c8:	6962      	ldr	r2, [r4, #20]
   308ca:	4252      	negs	r2, r2
   308cc:	6162      	str	r2, [r4, #20]
   308ce:	3420      	adds	r4, #32
   308d0:	4620      	mov	r0, r4
   308d2:	f7e0 fef9 	bl	116c8 <_Unwind_Resume_or_Rethrow>
   308d6:	4620      	mov	r0, r4
   308d8:	f000 f8b1 	bl	30a3e <__cxa_begin_catch>
   308dc:	f7ff ff83 	bl	307e6 <_ZSt9terminatev>
   308e0:	2200      	movs	r2, #0
   308e2:	6002      	str	r2, [r0, #0]
   308e4:	e7f3      	b.n	308ce <__cxa_rethrow+0x56>

000308e6 <_ZNSt9bad_allocD0Ev>:
   308e6:	b510      	push	{r4, lr}
   308e8:	4604      	mov	r4, r0
   308ea:	f7f1 fd83 	bl	223f4 <_ZNSt9bad_allocD1Ev>
   308ee:	2104      	movs	r1, #4
   308f0:	4620      	mov	r0, r4
   308f2:	f7ff ff44 	bl	3077e <_ZdlPvj>
   308f6:	4620      	mov	r0, r4
   308f8:	bd10      	pop	{r4, pc}

000308fa <__cxa_end_cleanup>:
   308fa:	b41e      	push	{r1, r2, r3, r4}
   308fc:	f000 f83d 	bl	3097a <__gnu_end_cleanup>
   30900:	bc1e      	pop	{r1, r2, r3, r4}
   30902:	f7e0 fecf 	bl	116a4 <_Unwind_Resume>

00030906 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
   30906:	7803      	ldrb	r3, [r0, #0]
   30908:	2b47      	cmp	r3, #71	; 0x47
   3090a:	d117      	bne.n	3093c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   3090c:	7843      	ldrb	r3, [r0, #1]
   3090e:	2b4e      	cmp	r3, #78	; 0x4e
   30910:	d114      	bne.n	3093c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   30912:	7883      	ldrb	r3, [r0, #2]
   30914:	2b55      	cmp	r3, #85	; 0x55
   30916:	d111      	bne.n	3093c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   30918:	78c3      	ldrb	r3, [r0, #3]
   3091a:	2b43      	cmp	r3, #67	; 0x43
   3091c:	d10e      	bne.n	3093c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   3091e:	7903      	ldrb	r3, [r0, #4]
   30920:	2b43      	cmp	r3, #67	; 0x43
   30922:	d10b      	bne.n	3093c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   30924:	7943      	ldrb	r3, [r0, #5]
   30926:	2b2b      	cmp	r3, #43	; 0x2b
   30928:	d108      	bne.n	3093c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   3092a:	7983      	ldrb	r3, [r0, #6]
   3092c:	2b2b      	cmp	r3, #43	; 0x2b
   3092e:	d105      	bne.n	3093c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   30930:	79c0      	ldrb	r0, [r0, #7]
   30932:	2801      	cmp	r0, #1
   30934:	bf8c      	ite	hi
   30936:	2000      	movhi	r0, #0
   30938:	2001      	movls	r0, #1
   3093a:	4770      	bx	lr
   3093c:	2000      	movs	r0, #0
   3093e:	4770      	bx	lr

00030940 <__cxa_begin_cleanup>:
   30940:	b510      	push	{r4, lr}
   30942:	4604      	mov	r4, r0
   30944:	f7f1 fe3a 	bl	225bc <__cxa_get_globals>
   30948:	4602      	mov	r2, r0
   3094a:	4620      	mov	r0, r4
   3094c:	f1a4 0120 	sub.w	r1, r4, #32
   30950:	f7ff ffd9 	bl	30906 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   30954:	b160      	cbz	r0, 30970 <__cxa_begin_cleanup+0x30>
   30956:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3095a:	3301      	adds	r3, #1
   3095c:	2b01      	cmp	r3, #1
   3095e:	f844 3c04 	str.w	r3, [r4, #-4]
   30962:	d103      	bne.n	3096c <__cxa_begin_cleanup+0x2c>
   30964:	6893      	ldr	r3, [r2, #8]
   30966:	f844 3c08 	str.w	r3, [r4, #-8]
   3096a:	6091      	str	r1, [r2, #8]
   3096c:	2001      	movs	r0, #1
   3096e:	bd10      	pop	{r4, pc}
   30970:	6893      	ldr	r3, [r2, #8]
   30972:	2b00      	cmp	r3, #0
   30974:	d0f9      	beq.n	3096a <__cxa_begin_cleanup+0x2a>
   30976:	f7ff ff36 	bl	307e6 <_ZSt9terminatev>

0003097a <__gnu_end_cleanup>:
   3097a:	b510      	push	{r4, lr}
   3097c:	f7f1 fe1e 	bl	225bc <__cxa_get_globals>
   30980:	6882      	ldr	r2, [r0, #8]
   30982:	4601      	mov	r1, r0
   30984:	b90a      	cbnz	r2, 3098a <__gnu_end_cleanup+0x10>
   30986:	f7ff ff2e 	bl	307e6 <_ZSt9terminatev>
   3098a:	f102 0420 	add.w	r4, r2, #32
   3098e:	4620      	mov	r0, r4
   30990:	f7ff ffb9 	bl	30906 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   30994:	b140      	cbz	r0, 309a8 <__gnu_end_cleanup+0x2e>
   30996:	69d3      	ldr	r3, [r2, #28]
   30998:	3b01      	subs	r3, #1
   3099a:	61d3      	str	r3, [r2, #28]
   3099c:	b913      	cbnz	r3, 309a4 <__gnu_end_cleanup+0x2a>
   3099e:	6990      	ldr	r0, [r2, #24]
   309a0:	6088      	str	r0, [r1, #8]
   309a2:	6193      	str	r3, [r2, #24]
   309a4:	4620      	mov	r0, r4
   309a6:	bd10      	pop	{r4, pc}
   309a8:	6088      	str	r0, [r1, #8]
   309aa:	e7fb      	b.n	309a4 <__gnu_end_cleanup+0x2a>

000309ac <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
   309ac:	7803      	ldrb	r3, [r0, #0]
   309ae:	2b47      	cmp	r3, #71	; 0x47
   309b0:	d117      	bne.n	309e2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   309b2:	7843      	ldrb	r3, [r0, #1]
   309b4:	2b4e      	cmp	r3, #78	; 0x4e
   309b6:	d114      	bne.n	309e2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   309b8:	7883      	ldrb	r3, [r0, #2]
   309ba:	2b55      	cmp	r3, #85	; 0x55
   309bc:	d111      	bne.n	309e2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   309be:	78c3      	ldrb	r3, [r0, #3]
   309c0:	2b43      	cmp	r3, #67	; 0x43
   309c2:	d10e      	bne.n	309e2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   309c4:	7903      	ldrb	r3, [r0, #4]
   309c6:	2b43      	cmp	r3, #67	; 0x43
   309c8:	d10b      	bne.n	309e2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   309ca:	7943      	ldrb	r3, [r0, #5]
   309cc:	2b2b      	cmp	r3, #43	; 0x2b
   309ce:	d108      	bne.n	309e2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   309d0:	7983      	ldrb	r3, [r0, #6]
   309d2:	2b2b      	cmp	r3, #43	; 0x2b
   309d4:	d105      	bne.n	309e2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   309d6:	79c0      	ldrb	r0, [r0, #7]
   309d8:	2801      	cmp	r0, #1
   309da:	bf8c      	ite	hi
   309dc:	2000      	movhi	r0, #0
   309de:	2001      	movls	r0, #1
   309e0:	4770      	bx	lr
   309e2:	2000      	movs	r0, #0
   309e4:	4770      	bx	lr

000309e6 <__cxa_call_terminate>:
   309e6:	b510      	push	{r4, lr}
   309e8:	4604      	mov	r4, r0
   309ea:	b148      	cbz	r0, 30a00 <__cxa_call_terminate+0x1a>
   309ec:	f000 f827 	bl	30a3e <__cxa_begin_catch>
   309f0:	4620      	mov	r0, r4
   309f2:	f7ff ffdb 	bl	309ac <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   309f6:	b118      	cbz	r0, 30a00 <__cxa_call_terminate+0x1a>
   309f8:	f854 0c14 	ldr.w	r0, [r4, #-20]
   309fc:	f7ff fee0 	bl	307c0 <_ZN10__cxxabiv111__terminateEPFvvE>
   30a00:	f7ff fef1 	bl	307e6 <_ZSt9terminatev>

00030a04 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
   30a04:	7803      	ldrb	r3, [r0, #0]
   30a06:	2b47      	cmp	r3, #71	; 0x47
   30a08:	d117      	bne.n	30a3a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   30a0a:	7843      	ldrb	r3, [r0, #1]
   30a0c:	2b4e      	cmp	r3, #78	; 0x4e
   30a0e:	d114      	bne.n	30a3a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   30a10:	7883      	ldrb	r3, [r0, #2]
   30a12:	2b55      	cmp	r3, #85	; 0x55
   30a14:	d111      	bne.n	30a3a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   30a16:	78c3      	ldrb	r3, [r0, #3]
   30a18:	2b43      	cmp	r3, #67	; 0x43
   30a1a:	d10e      	bne.n	30a3a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   30a1c:	7903      	ldrb	r3, [r0, #4]
   30a1e:	2b43      	cmp	r3, #67	; 0x43
   30a20:	d10b      	bne.n	30a3a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   30a22:	7943      	ldrb	r3, [r0, #5]
   30a24:	2b2b      	cmp	r3, #43	; 0x2b
   30a26:	d108      	bne.n	30a3a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   30a28:	7983      	ldrb	r3, [r0, #6]
   30a2a:	2b2b      	cmp	r3, #43	; 0x2b
   30a2c:	d105      	bne.n	30a3a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   30a2e:	79c0      	ldrb	r0, [r0, #7]
   30a30:	2801      	cmp	r0, #1
   30a32:	bf8c      	ite	hi
   30a34:	2000      	movhi	r0, #0
   30a36:	2001      	movls	r0, #1
   30a38:	4770      	bx	lr
   30a3a:	2000      	movs	r0, #0
   30a3c:	4770      	bx	lr

00030a3e <__cxa_begin_catch>:
   30a3e:	b538      	push	{r3, r4, r5, lr}
   30a40:	4604      	mov	r4, r0
   30a42:	f7f1 fdbb 	bl	225bc <__cxa_get_globals>
   30a46:	4602      	mov	r2, r0
   30a48:	6805      	ldr	r5, [r0, #0]
   30a4a:	4620      	mov	r0, r4
   30a4c:	f1a4 0120 	sub.w	r1, r4, #32
   30a50:	f7ff ffd8 	bl	30a04 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   30a54:	b928      	cbnz	r0, 30a62 <__cxa_begin_catch+0x24>
   30a56:	b10d      	cbz	r5, 30a5c <__cxa_begin_catch+0x1e>
   30a58:	f7ff fec5 	bl	307e6 <_ZSt9terminatev>
   30a5c:	6011      	str	r1, [r2, #0]
   30a5e:	4628      	mov	r0, r5
   30a60:	bd38      	pop	{r3, r4, r5, pc}
   30a62:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   30a66:	4620      	mov	r0, r4
   30a68:	2b00      	cmp	r3, #0
   30a6a:	bfb4      	ite	lt
   30a6c:	f1c3 0301 	rsblt	r3, r3, #1
   30a70:	3301      	addge	r3, #1
   30a72:	428d      	cmp	r5, r1
   30a74:	f844 3c0c 	str.w	r3, [r4, #-12]
   30a78:	6853      	ldr	r3, [r2, #4]
   30a7a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   30a7e:	6053      	str	r3, [r2, #4]
   30a80:	bf1c      	itt	ne
   30a82:	f844 5c10 	strne.w	r5, [r4, #-16]
   30a86:	6011      	strne	r1, [r2, #0]
   30a88:	6a65      	ldr	r5, [r4, #36]	; 0x24
   30a8a:	f7e0 fa1d 	bl	10ec8 <_Unwind_Complete>
   30a8e:	e7e6      	b.n	30a5e <__cxa_begin_catch+0x20>

00030a90 <__cxa_end_catch>:
   30a90:	b510      	push	{r4, lr}
   30a92:	f7f1 fd8f 	bl	225b4 <__cxa_get_globals_fast>
   30a96:	6802      	ldr	r2, [r0, #0]
   30a98:	4601      	mov	r1, r0
   30a9a:	b19a      	cbz	r2, 30ac4 <__cxa_end_catch+0x34>
   30a9c:	f102 0420 	add.w	r4, r2, #32
   30aa0:	4620      	mov	r0, r4
   30aa2:	f7ff ffaf 	bl	30a04 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   30aa6:	b928      	cbnz	r0, 30ab4 <__cxa_end_catch+0x24>
   30aa8:	6008      	str	r0, [r1, #0]
   30aaa:	4620      	mov	r0, r4
   30aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   30ab0:	f7e0 ba0c 	b.w	10ecc <_Unwind_DeleteException>
   30ab4:	6953      	ldr	r3, [r2, #20]
   30ab6:	2b00      	cmp	r3, #0
   30ab8:	da05      	bge.n	30ac6 <__cxa_end_catch+0x36>
   30aba:	3301      	adds	r3, #1
   30abc:	d101      	bne.n	30ac2 <__cxa_end_catch+0x32>
   30abe:	6910      	ldr	r0, [r2, #16]
   30ac0:	6008      	str	r0, [r1, #0]
   30ac2:	6153      	str	r3, [r2, #20]
   30ac4:	bd10      	pop	{r4, pc}
   30ac6:	3b01      	subs	r3, #1
   30ac8:	d102      	bne.n	30ad0 <__cxa_end_catch+0x40>
   30aca:	6913      	ldr	r3, [r2, #16]
   30acc:	600b      	str	r3, [r1, #0]
   30ace:	e7ec      	b.n	30aaa <__cxa_end_catch+0x1a>
   30ad0:	1c59      	adds	r1, r3, #1
   30ad2:	d1f6      	bne.n	30ac2 <__cxa_end_catch+0x32>
   30ad4:	f7ff fe87 	bl	307e6 <_ZSt9terminatev>

00030ad8 <_ZL12read_uleb128PKhPm>:
   30ad8:	2300      	movs	r3, #0
   30ada:	461a      	mov	r2, r3
   30adc:	b530      	push	{r4, r5, lr}
   30ade:	f810 5b01 	ldrb.w	r5, [r0], #1
   30ae2:	f005 047f 	and.w	r4, r5, #127	; 0x7f
   30ae6:	4094      	lsls	r4, r2
   30ae8:	3207      	adds	r2, #7
   30aea:	4323      	orrs	r3, r4
   30aec:	062c      	lsls	r4, r5, #24
   30aee:	d4f6      	bmi.n	30ade <_ZL12read_uleb128PKhPm+0x6>
   30af0:	600b      	str	r3, [r1, #0]
   30af2:	bd30      	pop	{r4, r5, pc}

00030af4 <_ZL12read_sleb128PKhPl>:
   30af4:	2300      	movs	r3, #0
   30af6:	461a      	mov	r2, r3
   30af8:	b530      	push	{r4, r5, lr}
   30afa:	f810 4b01 	ldrb.w	r4, [r0], #1
   30afe:	f004 057f 	and.w	r5, r4, #127	; 0x7f
   30b02:	4095      	lsls	r5, r2
   30b04:	3207      	adds	r2, #7
   30b06:	432b      	orrs	r3, r5
   30b08:	0625      	lsls	r5, r4, #24
   30b0a:	d4f6      	bmi.n	30afa <_ZL12read_sleb128PKhPl+0x6>
   30b0c:	2a1f      	cmp	r2, #31
   30b0e:	d806      	bhi.n	30b1e <_ZL12read_sleb128PKhPl+0x2a>
   30b10:	0664      	lsls	r4, r4, #25
   30b12:	bf42      	ittt	mi
   30b14:	f04f 34ff 	movmi.w	r4, #4294967295	; 0xffffffff
   30b18:	fa04 f202 	lslmi.w	r2, r4, r2
   30b1c:	4313      	orrmi	r3, r2
   30b1e:	600b      	str	r3, [r1, #0]
   30b20:	bd30      	pop	{r4, r5, pc}

00030b22 <_ZL28read_encoded_value_with_basehjPKhPj>:
   30b22:	2850      	cmp	r0, #80	; 0x50
   30b24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   30b28:	4606      	mov	r6, r0
   30b2a:	4688      	mov	r8, r1
   30b2c:	4615      	mov	r5, r2
   30b2e:	461f      	mov	r7, r3
   30b30:	d108      	bne.n	30b44 <_ZL28read_encoded_value_with_basehjPKhPj+0x22>
   30b32:	3203      	adds	r2, #3
   30b34:	f022 0003 	bic.w	r0, r2, #3
   30b38:	f850 4b04 	ldr.w	r4, [r0], #4
   30b3c:	603c      	str	r4, [r7, #0]
   30b3e:	b002      	add	sp, #8
   30b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   30b44:	f000 030f 	and.w	r3, r0, #15
   30b48:	2b0c      	cmp	r3, #12
   30b4a:	d82e      	bhi.n	30baa <_ZL28read_encoded_value_with_basehjPKhPj+0x88>
   30b4c:	e8df f003 	tbb	[pc, r3]
   30b50:	251d0725 	.word	0x251d0725
   30b54:	2d2d2d29 	.word	0x2d2d2d29
   30b58:	2521182d 	.word	0x2521182d
   30b5c:	29          	.byte	0x29
   30b5d:	00          	.byte	0x00
   30b5e:	a901      	add	r1, sp, #4
   30b60:	4628      	mov	r0, r5
   30b62:	f7ff ffb9 	bl	30ad8 <_ZL12read_uleb128PKhPm>
   30b66:	9c01      	ldr	r4, [sp, #4]
   30b68:	2c00      	cmp	r4, #0
   30b6a:	d0e7      	beq.n	30b3c <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
   30b6c:	f006 0370 	and.w	r3, r6, #112	; 0x70
   30b70:	2b10      	cmp	r3, #16
   30b72:	bf08      	it	eq
   30b74:	46a8      	moveq	r8, r5
   30b76:	0633      	lsls	r3, r6, #24
   30b78:	4444      	add	r4, r8
   30b7a:	bf48      	it	mi
   30b7c:	6824      	ldrmi	r4, [r4, #0]
   30b7e:	e7dd      	b.n	30b3c <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
   30b80:	a901      	add	r1, sp, #4
   30b82:	4628      	mov	r0, r5
   30b84:	f7ff ffb6 	bl	30af4 <_ZL12read_sleb128PKhPl>
   30b88:	e7ed      	b.n	30b66 <_ZL28read_encoded_value_with_basehjPKhPj+0x44>
   30b8a:	4628      	mov	r0, r5
   30b8c:	f830 4b02 	ldrh.w	r4, [r0], #2
   30b90:	e7ea      	b.n	30b68 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
   30b92:	4628      	mov	r0, r5
   30b94:	f930 4b02 	ldrsh.w	r4, [r0], #2
   30b98:	e7e6      	b.n	30b68 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
   30b9a:	4628      	mov	r0, r5
   30b9c:	f850 4b04 	ldr.w	r4, [r0], #4
   30ba0:	e7e2      	b.n	30b68 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
   30ba2:	4628      	mov	r0, r5
   30ba4:	f850 4b08 	ldr.w	r4, [r0], #8
   30ba8:	e7de      	b.n	30b68 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
   30baa:	f000 f906 	bl	30dba <abort>

00030bae <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
   30bae:	b508      	push	{r3, lr}
   30bb0:	4603      	mov	r3, r0
   30bb2:	4608      	mov	r0, r1
   30bb4:	2bff      	cmp	r3, #255	; 0xff
   30bb6:	d010      	beq.n	30bda <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
   30bb8:	f003 0270 	and.w	r2, r3, #112	; 0x70
   30bbc:	2a30      	cmp	r2, #48	; 0x30
   30bbe:	d012      	beq.n	30be6 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
   30bc0:	d807      	bhi.n	30bd2 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
   30bc2:	2a20      	cmp	r2, #32
   30bc4:	d00b      	beq.n	30bde <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x30>
   30bc6:	d802      	bhi.n	30bce <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   30bc8:	f013 0f60 	tst.w	r3, #96	; 0x60
   30bcc:	d005      	beq.n	30bda <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
   30bce:	f000 f8f4 	bl	30dba <abort>
   30bd2:	2a40      	cmp	r2, #64	; 0x40
   30bd4:	d00b      	beq.n	30bee <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>
   30bd6:	2a50      	cmp	r2, #80	; 0x50
   30bd8:	d1f9      	bne.n	30bce <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   30bda:	2000      	movs	r0, #0
   30bdc:	bd08      	pop	{r3, pc}
   30bde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   30be2:	f000 bb5d 	b.w	312a0 <_Unwind_GetTextRelBase>
   30be6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   30bea:	f000 bb56 	b.w	3129a <_Unwind_GetDataRelBase>
   30bee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   30bf2:	f7e0 bf57 	b.w	11aa4 <_Unwind_GetRegionStart>

00030bf6 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
   30bf6:	b513      	push	{r0, r1, r4, lr}
   30bf8:	460c      	mov	r4, r1
   30bfa:	4601      	mov	r1, r0
   30bfc:	4620      	mov	r0, r4
   30bfe:	e9cd 3200 	strd	r3, r2, [sp]
   30c02:	f7ff ffd4 	bl	30bae <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   30c06:	4601      	mov	r1, r0
   30c08:	4620      	mov	r0, r4
   30c0a:	e9dd 3200 	ldrd	r3, r2, [sp]
   30c0e:	b002      	add	sp, #8
   30c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   30c14:	f7ff bf85 	b.w	30b22 <_ZL28read_encoded_value_with_basehjPKhPj>

00030c18 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   30c18:	b573      	push	{r0, r1, r4, r5, r6, lr}
   30c1a:	460c      	mov	r4, r1
   30c1c:	4615      	mov	r5, r2
   30c1e:	4606      	mov	r6, r0
   30c20:	b328      	cbz	r0, 30c6e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x56>
   30c22:	f7e0 ff3f 	bl	11aa4 <_Unwind_GetRegionStart>
   30c26:	4603      	mov	r3, r0
   30c28:	4620      	mov	r0, r4
   30c2a:	602b      	str	r3, [r5, #0]
   30c2c:	f810 1b01 	ldrb.w	r1, [r0], #1
   30c30:	29ff      	cmp	r1, #255	; 0xff
   30c32:	d01e      	beq.n	30c72 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5a>
   30c34:	4602      	mov	r2, r0
   30c36:	1d2b      	adds	r3, r5, #4
   30c38:	4630      	mov	r0, r6
   30c3a:	f7ff ffdc 	bl	30bf6 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
   30c3e:	f810 3b01 	ldrb.w	r3, [r0], #1
   30c42:	2bff      	cmp	r3, #255	; 0xff
   30c44:	752b      	strb	r3, [r5, #20]
   30c46:	d016      	beq.n	30c76 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
   30c48:	2310      	movs	r3, #16
   30c4a:	a901      	add	r1, sp, #4
   30c4c:	752b      	strb	r3, [r5, #20]
   30c4e:	f7ff ff43 	bl	30ad8 <_ZL12read_uleb128PKhPm>
   30c52:	9b01      	ldr	r3, [sp, #4]
   30c54:	4403      	add	r3, r0
   30c56:	60eb      	str	r3, [r5, #12]
   30c58:	a901      	add	r1, sp, #4
   30c5a:	f810 3b01 	ldrb.w	r3, [r0], #1
   30c5e:	756b      	strb	r3, [r5, #21]
   30c60:	f7ff ff3a 	bl	30ad8 <_ZL12read_uleb128PKhPm>
   30c64:	9b01      	ldr	r3, [sp, #4]
   30c66:	4403      	add	r3, r0
   30c68:	612b      	str	r3, [r5, #16]
   30c6a:	b002      	add	sp, #8
   30c6c:	bd70      	pop	{r4, r5, r6, pc}
   30c6e:	4603      	mov	r3, r0
   30c70:	e7da      	b.n	30c28 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>
   30c72:	606b      	str	r3, [r5, #4]
   30c74:	e7e3      	b.n	30c3e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x26>
   30c76:	2300      	movs	r3, #0
   30c78:	e7ed      	b.n	30c56 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3e>

00030c7a <_Unwind_GetGR>:
   30c7a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   30c7c:	ab03      	add	r3, sp, #12
   30c7e:	460a      	mov	r2, r1
   30c80:	9300      	str	r3, [sp, #0]
   30c82:	2300      	movs	r3, #0
   30c84:	4619      	mov	r1, r3
   30c86:	f7e0 f927 	bl	10ed8 <_Unwind_VRS_Get>
   30c8a:	9803      	ldr	r0, [sp, #12]
   30c8c:	b005      	add	sp, #20
   30c8e:	f85d fb04 	ldr.w	pc, [sp], #4

00030c92 <__cxa_current_exception_type>:
   30c92:	b508      	push	{r3, lr}
   30c94:	f7f1 fc92 	bl	225bc <__cxa_get_globals>
   30c98:	6800      	ldr	r0, [r0, #0]
   30c9a:	b138      	cbz	r0, 30cac <__cxa_current_exception_type+0x1a>
   30c9c:	f890 2027 	ldrb.w	r2, [r0, #39]	; 0x27
   30ca0:	6803      	ldr	r3, [r0, #0]
   30ca2:	2a01      	cmp	r2, #1
   30ca4:	bf08      	it	eq
   30ca6:	f1a3 0078 	subeq.w	r0, r3, #120	; 0x78
   30caa:	6800      	ldr	r0, [r0, #0]
   30cac:	bd08      	pop	{r3, pc}

00030cae <__ieee754_sqrtf>:
   30cae:	b480      	push	{r7}
   30cb0:	b085      	sub	sp, #20
   30cb2:	af00      	add	r7, sp, #0
   30cb4:	6078      	str	r0, [r7, #4]
   30cb6:	edd7 7a01 	vldr	s15, [r7, #4]
   30cba:	eef1 7ae7 	vsqrt.f32	s15, s15
   30cbe:	edc7 7a03 	vstr	s15, [r7, #12]
   30cc2:	68fb      	ldr	r3, [r7, #12]
   30cc4:	4618      	mov	r0, r3
   30cc6:	3714      	adds	r7, #20
   30cc8:	46bd      	mov	sp, r7
   30cca:	f85d 7b04 	ldr.w	r7, [sp], #4
   30cce:	4770      	bx	lr

00030cd0 <matherr>:
   30cd0:	b580      	push	{r7, lr}
   30cd2:	b084      	sub	sp, #16
   30cd4:	af00      	add	r7, sp, #0
   30cd6:	6078      	str	r0, [r7, #4]
   30cd8:	2300      	movs	r3, #0
   30cda:	60fb      	str	r3, [r7, #12]
   30cdc:	687b      	ldr	r3, [r7, #4]
   30cde:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   30ce2:	687b      	ldr	r3, [r7, #4]
   30ce4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   30ce8:	f7df fe48 	bl	1097c <__aeabi_dcmpeq>
   30cec:	4603      	mov	r3, r0
   30cee:	2b00      	cmp	r3, #0
   30cf0:	d101      	bne.n	30cf6 <matherr+0x26>
   30cf2:	2300      	movs	r3, #0
   30cf4:	e000      	b.n	30cf8 <matherr+0x28>
   30cf6:	68fb      	ldr	r3, [r7, #12]
   30cf8:	4618      	mov	r0, r3
   30cfa:	3710      	adds	r7, #16
   30cfc:	46bd      	mov	sp, r7
   30cfe:	bd80      	pop	{r7, pc}

00030d00 <fabsf>:
   30d00:	b480      	push	{r7}
   30d02:	b087      	sub	sp, #28
   30d04:	af00      	add	r7, sp, #0
   30d06:	6078      	str	r0, [r7, #4]
   30d08:	687b      	ldr	r3, [r7, #4]
   30d0a:	613b      	str	r3, [r7, #16]
   30d0c:	693b      	ldr	r3, [r7, #16]
   30d0e:	617b      	str	r3, [r7, #20]
   30d10:	697b      	ldr	r3, [r7, #20]
   30d12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   30d16:	60fb      	str	r3, [r7, #12]
   30d18:	68fb      	ldr	r3, [r7, #12]
   30d1a:	607b      	str	r3, [r7, #4]
   30d1c:	687b      	ldr	r3, [r7, #4]
   30d1e:	4618      	mov	r0, r3
   30d20:	371c      	adds	r7, #28
   30d22:	46bd      	mov	sp, r7
   30d24:	f85d 7b04 	ldr.w	r7, [sp], #4
   30d28:	4770      	bx	lr

00030d2a <finitef>:
   30d2a:	b480      	push	{r7}
   30d2c:	b085      	sub	sp, #20
   30d2e:	af00      	add	r7, sp, #0
   30d30:	6078      	str	r0, [r7, #4]
   30d32:	687b      	ldr	r3, [r7, #4]
   30d34:	60bb      	str	r3, [r7, #8]
   30d36:	68bb      	ldr	r3, [r7, #8]
   30d38:	60fb      	str	r3, [r7, #12]
   30d3a:	68fb      	ldr	r3, [r7, #12]
   30d3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   30d40:	60fb      	str	r3, [r7, #12]
   30d42:	68fb      	ldr	r3, [r7, #12]
   30d44:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   30d48:	bfb4      	ite	lt
   30d4a:	2301      	movlt	r3, #1
   30d4c:	2300      	movge	r3, #0
   30d4e:	b2db      	uxtb	r3, r3
   30d50:	4618      	mov	r0, r3
   30d52:	3714      	adds	r7, #20
   30d54:	46bd      	mov	sp, r7
   30d56:	f85d 7b04 	ldr.w	r7, [sp], #4
   30d5a:	4770      	bx	lr

00030d5c <floorf>:
   30d5c:	b480      	push	{r7}
   30d5e:	b085      	sub	sp, #20
   30d60:	af00      	add	r7, sp, #0
   30d62:	6078      	str	r0, [r7, #4]
   30d64:	edd7 7a01 	vldr	s15, [r7, #4]
   30d68:	fefb 7a67 	vrintm.f32	s15, s15
   30d6c:	edc7 7a03 	vstr	s15, [r7, #12]
   30d70:	68fb      	ldr	r3, [r7, #12]
   30d72:	4618      	mov	r0, r3
   30d74:	3714      	adds	r7, #20
   30d76:	46bd      	mov	sp, r7
   30d78:	f85d 7b04 	ldr.w	r7, [sp], #4
   30d7c:	4770      	bx	lr

00030d7e <copysignf>:
   30d7e:	b480      	push	{r7}
   30d80:	b089      	sub	sp, #36	; 0x24
   30d82:	af00      	add	r7, sp, #0
   30d84:	6078      	str	r0, [r7, #4]
   30d86:	6039      	str	r1, [r7, #0]
   30d88:	687b      	ldr	r3, [r7, #4]
   30d8a:	617b      	str	r3, [r7, #20]
   30d8c:	697b      	ldr	r3, [r7, #20]
   30d8e:	61fb      	str	r3, [r7, #28]
   30d90:	683b      	ldr	r3, [r7, #0]
   30d92:	613b      	str	r3, [r7, #16]
   30d94:	693b      	ldr	r3, [r7, #16]
   30d96:	61bb      	str	r3, [r7, #24]
   30d98:	69fb      	ldr	r3, [r7, #28]
   30d9a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   30d9e:	69bb      	ldr	r3, [r7, #24]
   30da0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   30da4:	4313      	orrs	r3, r2
   30da6:	60fb      	str	r3, [r7, #12]
   30da8:	68fb      	ldr	r3, [r7, #12]
   30daa:	607b      	str	r3, [r7, #4]
   30dac:	687b      	ldr	r3, [r7, #4]
   30dae:	4618      	mov	r0, r3
   30db0:	3724      	adds	r7, #36	; 0x24
   30db2:	46bd      	mov	sp, r7
   30db4:	f85d 7b04 	ldr.w	r7, [sp], #4
   30db8:	4770      	bx	lr

00030dba <abort>:
   30dba:	2006      	movs	r0, #6
   30dbc:	b508      	push	{r3, lr}
   30dbe:	f7f4 ff1f 	bl	25c00 <raise>
   30dc2:	2001      	movs	r0, #1
   30dc4:	f7e3 f9c8 	bl	14158 <_exit>

00030dc8 <memchr>:
   30dc8:	b2c9      	uxtb	r1, r1
   30dca:	4402      	add	r2, r0
   30dcc:	b510      	push	{r4, lr}
   30dce:	4290      	cmp	r0, r2
   30dd0:	4603      	mov	r3, r0
   30dd2:	d101      	bne.n	30dd8 <memchr+0x10>
   30dd4:	2300      	movs	r3, #0
   30dd6:	e003      	b.n	30de0 <memchr+0x18>
   30dd8:	781c      	ldrb	r4, [r3, #0]
   30dda:	3001      	adds	r0, #1
   30ddc:	428c      	cmp	r4, r1
   30dde:	d1f6      	bne.n	30dce <memchr+0x6>
   30de0:	4618      	mov	r0, r3
   30de2:	bd10      	pop	{r4, pc}

00030de4 <memcmp>:
   30de4:	b530      	push	{r4, r5, lr}
   30de6:	3901      	subs	r1, #1
   30de8:	2400      	movs	r4, #0
   30dea:	42a2      	cmp	r2, r4
   30dec:	d101      	bne.n	30df2 <memcmp+0xe>
   30dee:	2000      	movs	r0, #0
   30df0:	e005      	b.n	30dfe <memcmp+0x1a>
   30df2:	5d03      	ldrb	r3, [r0, r4]
   30df4:	3401      	adds	r4, #1
   30df6:	5d0d      	ldrb	r5, [r1, r4]
   30df8:	42ab      	cmp	r3, r5
   30dfa:	d0f6      	beq.n	30dea <memcmp+0x6>
   30dfc:	1b58      	subs	r0, r3, r5
   30dfe:	bd30      	pop	{r4, r5, pc}

00030e00 <memcpy>:
   30e00:	440a      	add	r2, r1
   30e02:	1e43      	subs	r3, r0, #1
   30e04:	4291      	cmp	r1, r2
   30e06:	d100      	bne.n	30e0a <memcpy+0xa>
   30e08:	4770      	bx	lr
   30e0a:	b510      	push	{r4, lr}
   30e0c:	f811 4b01 	ldrb.w	r4, [r1], #1
   30e10:	4291      	cmp	r1, r2
   30e12:	f803 4f01 	strb.w	r4, [r3, #1]!
   30e16:	d1f9      	bne.n	30e0c <memcpy+0xc>
   30e18:	bd10      	pop	{r4, pc}

00030e1a <memmove>:
   30e1a:	4288      	cmp	r0, r1
   30e1c:	b510      	push	{r4, lr}
   30e1e:	eb01 0402 	add.w	r4, r1, r2
   30e22:	d902      	bls.n	30e2a <memmove+0x10>
   30e24:	4284      	cmp	r4, r0
   30e26:	4623      	mov	r3, r4
   30e28:	d807      	bhi.n	30e3a <memmove+0x20>
   30e2a:	1e43      	subs	r3, r0, #1
   30e2c:	42a1      	cmp	r1, r4
   30e2e:	d008      	beq.n	30e42 <memmove+0x28>
   30e30:	f811 2b01 	ldrb.w	r2, [r1], #1
   30e34:	f803 2f01 	strb.w	r2, [r3, #1]!
   30e38:	e7f8      	b.n	30e2c <memmove+0x12>
   30e3a:	4402      	add	r2, r0
   30e3c:	4601      	mov	r1, r0
   30e3e:	428a      	cmp	r2, r1
   30e40:	d100      	bne.n	30e44 <memmove+0x2a>
   30e42:	bd10      	pop	{r4, pc}
   30e44:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   30e48:	f802 4d01 	strb.w	r4, [r2, #-1]!
   30e4c:	e7f7      	b.n	30e3e <memmove+0x24>

00030e4e <memset>:
   30e4e:	4402      	add	r2, r0
   30e50:	4603      	mov	r3, r0
   30e52:	4293      	cmp	r3, r2
   30e54:	d100      	bne.n	30e58 <memset+0xa>
   30e56:	4770      	bx	lr
   30e58:	f803 1b01 	strb.w	r1, [r3], #1
   30e5c:	e7f9      	b.n	30e52 <memset+0x4>

00030e5e <_realloc_r>:
   30e5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30e60:	4607      	mov	r7, r0
   30e62:	4614      	mov	r4, r2
   30e64:	460e      	mov	r6, r1
   30e66:	b921      	cbnz	r1, 30e72 <_realloc_r+0x14>
   30e68:	4611      	mov	r1, r2
   30e6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   30e6e:	f7f4 bbe3 	b.w	25638 <_malloc_r>
   30e72:	b922      	cbnz	r2, 30e7e <_realloc_r+0x20>
   30e74:	4625      	mov	r5, r4
   30e76:	f7f4 fb8f 	bl	25598 <_free_r>
   30e7a:	4628      	mov	r0, r5
   30e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   30e7e:	f000 f966 	bl	3114e <_malloc_usable_size_r>
   30e82:	42a0      	cmp	r0, r4
   30e84:	d20f      	bcs.n	30ea6 <_realloc_r+0x48>
   30e86:	4621      	mov	r1, r4
   30e88:	4638      	mov	r0, r7
   30e8a:	f7f4 fbd5 	bl	25638 <_malloc_r>
   30e8e:	4605      	mov	r5, r0
   30e90:	2800      	cmp	r0, #0
   30e92:	d0f2      	beq.n	30e7a <_realloc_r+0x1c>
   30e94:	4631      	mov	r1, r6
   30e96:	4622      	mov	r2, r4
   30e98:	f7ff ffb2 	bl	30e00 <memcpy>
   30e9c:	4631      	mov	r1, r6
   30e9e:	4638      	mov	r0, r7
   30ea0:	f7f4 fb7a 	bl	25598 <_free_r>
   30ea4:	e7e9      	b.n	30e7a <_realloc_r+0x1c>
   30ea6:	4635      	mov	r5, r6
   30ea8:	e7e7      	b.n	30e7a <_realloc_r+0x1c>

00030eaa <__sfputc_r>:
   30eaa:	6893      	ldr	r3, [r2, #8]
   30eac:	3b01      	subs	r3, #1
   30eae:	2b00      	cmp	r3, #0
   30eb0:	6093      	str	r3, [r2, #8]
   30eb2:	b410      	push	{r4}
   30eb4:	da08      	bge.n	30ec8 <__sfputc_r+0x1e>
   30eb6:	6994      	ldr	r4, [r2, #24]
   30eb8:	42a3      	cmp	r3, r4
   30eba:	db01      	blt.n	30ec0 <__sfputc_r+0x16>
   30ebc:	290a      	cmp	r1, #10
   30ebe:	d103      	bne.n	30ec8 <__sfputc_r+0x1e>
   30ec0:	f85d 4b04 	ldr.w	r4, [sp], #4
   30ec4:	f7f4 bed6 	b.w	25c74 <__swbuf_r>
   30ec8:	6813      	ldr	r3, [r2, #0]
   30eca:	1c58      	adds	r0, r3, #1
   30ecc:	6010      	str	r0, [r2, #0]
   30ece:	4608      	mov	r0, r1
   30ed0:	7019      	strb	r1, [r3, #0]
   30ed2:	f85d 4b04 	ldr.w	r4, [sp], #4
   30ed6:	4770      	bx	lr

00030ed8 <__sfputs_r>:
   30ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30eda:	4606      	mov	r6, r0
   30edc:	460f      	mov	r7, r1
   30ede:	4614      	mov	r4, r2
   30ee0:	18d5      	adds	r5, r2, r3
   30ee2:	42ac      	cmp	r4, r5
   30ee4:	d101      	bne.n	30eea <__sfputs_r+0x12>
   30ee6:	2000      	movs	r0, #0
   30ee8:	e007      	b.n	30efa <__sfputs_r+0x22>
   30eea:	463a      	mov	r2, r7
   30eec:	f814 1b01 	ldrb.w	r1, [r4], #1
   30ef0:	4630      	mov	r0, r6
   30ef2:	f7ff ffda 	bl	30eaa <__sfputc_r>
   30ef6:	1c43      	adds	r3, r0, #1
   30ef8:	d1f3      	bne.n	30ee2 <__sfputs_r+0xa>
   30efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00030efc <_printf_common>:
   30efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   30f00:	4616      	mov	r6, r2
   30f02:	4699      	mov	r9, r3
   30f04:	688a      	ldr	r2, [r1, #8]
   30f06:	4607      	mov	r7, r0
   30f08:	690b      	ldr	r3, [r1, #16]
   30f0a:	460c      	mov	r4, r1
   30f0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
   30f10:	4293      	cmp	r3, r2
   30f12:	bfb8      	it	lt
   30f14:	4613      	movlt	r3, r2
   30f16:	6033      	str	r3, [r6, #0]
   30f18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   30f1c:	b10a      	cbz	r2, 30f22 <_printf_common+0x26>
   30f1e:	3301      	adds	r3, #1
   30f20:	6033      	str	r3, [r6, #0]
   30f22:	6823      	ldr	r3, [r4, #0]
   30f24:	0699      	lsls	r1, r3, #26
   30f26:	bf42      	ittt	mi
   30f28:	6833      	ldrmi	r3, [r6, #0]
   30f2a:	3302      	addmi	r3, #2
   30f2c:	6033      	strmi	r3, [r6, #0]
   30f2e:	6825      	ldr	r5, [r4, #0]
   30f30:	f015 0506 	ands.w	r5, r5, #6
   30f34:	d106      	bne.n	30f44 <_printf_common+0x48>
   30f36:	f104 0a19 	add.w	sl, r4, #25
   30f3a:	68e3      	ldr	r3, [r4, #12]
   30f3c:	6832      	ldr	r2, [r6, #0]
   30f3e:	1a9b      	subs	r3, r3, r2
   30f40:	42ab      	cmp	r3, r5
   30f42:	dc29      	bgt.n	30f98 <_printf_common+0x9c>
   30f44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   30f48:	1e13      	subs	r3, r2, #0
   30f4a:	6822      	ldr	r2, [r4, #0]
   30f4c:	bf18      	it	ne
   30f4e:	2301      	movne	r3, #1
   30f50:	0692      	lsls	r2, r2, #26
   30f52:	d42e      	bmi.n	30fb2 <_printf_common+0xb6>
   30f54:	f104 0243 	add.w	r2, r4, #67	; 0x43
   30f58:	4649      	mov	r1, r9
   30f5a:	4638      	mov	r0, r7
   30f5c:	47c0      	blx	r8
   30f5e:	3001      	adds	r0, #1
   30f60:	d021      	beq.n	30fa6 <_printf_common+0xaa>
   30f62:	6823      	ldr	r3, [r4, #0]
   30f64:	341a      	adds	r4, #26
   30f66:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   30f6a:	f003 0306 	and.w	r3, r3, #6
   30f6e:	6832      	ldr	r2, [r6, #0]
   30f70:	2600      	movs	r6, #0
   30f72:	2b04      	cmp	r3, #4
   30f74:	f854 3c12 	ldr.w	r3, [r4, #-18]
   30f78:	bf08      	it	eq
   30f7a:	1aad      	subeq	r5, r5, r2
   30f7c:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   30f80:	bf14      	ite	ne
   30f82:	2500      	movne	r5, #0
   30f84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   30f88:	4293      	cmp	r3, r2
   30f8a:	bfc4      	itt	gt
   30f8c:	1a9b      	subgt	r3, r3, r2
   30f8e:	18ed      	addgt	r5, r5, r3
   30f90:	42b5      	cmp	r5, r6
   30f92:	d11a      	bne.n	30fca <_printf_common+0xce>
   30f94:	2000      	movs	r0, #0
   30f96:	e008      	b.n	30faa <_printf_common+0xae>
   30f98:	2301      	movs	r3, #1
   30f9a:	4652      	mov	r2, sl
   30f9c:	4649      	mov	r1, r9
   30f9e:	4638      	mov	r0, r7
   30fa0:	47c0      	blx	r8
   30fa2:	3001      	adds	r0, #1
   30fa4:	d103      	bne.n	30fae <_printf_common+0xb2>
   30fa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   30fae:	3501      	adds	r5, #1
   30fb0:	e7c3      	b.n	30f3a <_printf_common+0x3e>
   30fb2:	18e1      	adds	r1, r4, r3
   30fb4:	1c5a      	adds	r2, r3, #1
   30fb6:	2030      	movs	r0, #48	; 0x30
   30fb8:	3302      	adds	r3, #2
   30fba:	4422      	add	r2, r4
   30fbc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   30fc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   30fc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   30fc8:	e7c4      	b.n	30f54 <_printf_common+0x58>
   30fca:	2301      	movs	r3, #1
   30fcc:	4622      	mov	r2, r4
   30fce:	4649      	mov	r1, r9
   30fd0:	4638      	mov	r0, r7
   30fd2:	47c0      	blx	r8
   30fd4:	3001      	adds	r0, #1
   30fd6:	d0e6      	beq.n	30fa6 <_printf_common+0xaa>
   30fd8:	3601      	adds	r6, #1
   30fda:	e7d9      	b.n	30f90 <_printf_common+0x94>

00030fdc <_raise_r>:
   30fdc:	291f      	cmp	r1, #31
   30fde:	b538      	push	{r3, r4, r5, lr}
   30fe0:	4604      	mov	r4, r0
   30fe2:	460d      	mov	r5, r1
   30fe4:	d904      	bls.n	30ff0 <_raise_r+0x14>
   30fe6:	2316      	movs	r3, #22
   30fe8:	6003      	str	r3, [r0, #0]
   30fea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30fee:	bd38      	pop	{r3, r4, r5, pc}
   30ff0:	6c42      	ldr	r2, [r0, #68]	; 0x44
   30ff2:	b112      	cbz	r2, 30ffa <_raise_r+0x1e>
   30ff4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   30ff8:	b94b      	cbnz	r3, 3100e <_raise_r+0x32>
   30ffa:	4620      	mov	r0, r4
   30ffc:	f000 f816 	bl	3102c <_getpid_r>
   31000:	462a      	mov	r2, r5
   31002:	4601      	mov	r1, r0
   31004:	4620      	mov	r0, r4
   31006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3100a:	f7f4 be01 	b.w	25c10 <_kill_r>
   3100e:	2b01      	cmp	r3, #1
   31010:	d00a      	beq.n	31028 <_raise_r+0x4c>
   31012:	1c59      	adds	r1, r3, #1
   31014:	d103      	bne.n	3101e <_raise_r+0x42>
   31016:	2316      	movs	r3, #22
   31018:	6003      	str	r3, [r0, #0]
   3101a:	2001      	movs	r0, #1
   3101c:	e7e7      	b.n	30fee <_raise_r+0x12>
   3101e:	2400      	movs	r4, #0
   31020:	4628      	mov	r0, r5
   31022:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   31026:	4798      	blx	r3
   31028:	2000      	movs	r0, #0
   3102a:	e7e0      	b.n	30fee <_raise_r+0x12>

0003102c <_getpid_r>:
   3102c:	f7f5 bef6 	b.w	26e1c <_getpid>

00031030 <strcpy>:
   31030:	4603      	mov	r3, r0
   31032:	f811 2b01 	ldrb.w	r2, [r1], #1
   31036:	f803 2b01 	strb.w	r2, [r3], #1
   3103a:	2a00      	cmp	r2, #0
   3103c:	d1f9      	bne.n	31032 <strcpy+0x2>
   3103e:	4770      	bx	lr

00031040 <strncmp>:
   31040:	b510      	push	{r4, lr}
   31042:	b16a      	cbz	r2, 31060 <strncmp+0x20>
   31044:	3901      	subs	r1, #1
   31046:	1884      	adds	r4, r0, r2
   31048:	f810 3b01 	ldrb.w	r3, [r0], #1
   3104c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   31050:	4293      	cmp	r3, r2
   31052:	d103      	bne.n	3105c <strncmp+0x1c>
   31054:	42a0      	cmp	r0, r4
   31056:	d001      	beq.n	3105c <strncmp+0x1c>
   31058:	2b00      	cmp	r3, #0
   3105a:	d1f5      	bne.n	31048 <strncmp+0x8>
   3105c:	1a98      	subs	r0, r3, r2
   3105e:	bd10      	pop	{r4, pc}
   31060:	4610      	mov	r0, r2
   31062:	e7fc      	b.n	3105e <strncmp+0x1e>

00031064 <strncpy>:
   31064:	3901      	subs	r1, #1
   31066:	4603      	mov	r3, r0
   31068:	b510      	push	{r4, lr}
   3106a:	b132      	cbz	r2, 3107a <strncpy+0x16>
   3106c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   31070:	3a01      	subs	r2, #1
   31072:	f803 4b01 	strb.w	r4, [r3], #1
   31076:	2c00      	cmp	r4, #0
   31078:	d1f7      	bne.n	3106a <strncpy+0x6>
   3107a:	441a      	add	r2, r3
   3107c:	2100      	movs	r1, #0
   3107e:	4293      	cmp	r3, r2
   31080:	d100      	bne.n	31084 <strncpy+0x20>
   31082:	bd10      	pop	{r4, pc}
   31084:	f803 1b01 	strb.w	r1, [r3], #1
   31088:	e7f9      	b.n	3107e <strncpy+0x1a>

0003108a <__sfmoreglue>:
   3108a:	b570      	push	{r4, r5, r6, lr}
   3108c:	1e4a      	subs	r2, r1, #1
   3108e:	2564      	movs	r5, #100	; 0x64
   31090:	460e      	mov	r6, r1
   31092:	4355      	muls	r5, r2
   31094:	f105 0170 	add.w	r1, r5, #112	; 0x70
   31098:	f7f4 face 	bl	25638 <_malloc_r>
   3109c:	4604      	mov	r4, r0
   3109e:	b140      	cbz	r0, 310b2 <__sfmoreglue+0x28>
   310a0:	2100      	movs	r1, #0
   310a2:	f105 0264 	add.w	r2, r5, #100	; 0x64
   310a6:	e9c0 1600 	strd	r1, r6, [r0]
   310aa:	300c      	adds	r0, #12
   310ac:	60a0      	str	r0, [r4, #8]
   310ae:	f7ff fece 	bl	30e4e <memset>
   310b2:	4620      	mov	r0, r4
   310b4:	bd70      	pop	{r4, r5, r6, pc}

000310b6 <_fwalk_reent>:
   310b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   310ba:	4606      	mov	r6, r0
   310bc:	4688      	mov	r8, r1
   310be:	f100 0448 	add.w	r4, r0, #72	; 0x48
   310c2:	2700      	movs	r7, #0
   310c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   310c8:	f1b9 0901 	subs.w	r9, r9, #1
   310cc:	d505      	bpl.n	310da <_fwalk_reent+0x24>
   310ce:	6824      	ldr	r4, [r4, #0]
   310d0:	2c00      	cmp	r4, #0
   310d2:	d1f7      	bne.n	310c4 <_fwalk_reent+0xe>
   310d4:	4638      	mov	r0, r7
   310d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   310da:	89ab      	ldrh	r3, [r5, #12]
   310dc:	2b01      	cmp	r3, #1
   310de:	d907      	bls.n	310f0 <_fwalk_reent+0x3a>
   310e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   310e4:	3301      	adds	r3, #1
   310e6:	d003      	beq.n	310f0 <_fwalk_reent+0x3a>
   310e8:	4629      	mov	r1, r5
   310ea:	4630      	mov	r0, r6
   310ec:	47c0      	blx	r8
   310ee:	4307      	orrs	r7, r0
   310f0:	3564      	adds	r5, #100	; 0x64
   310f2:	e7e9      	b.n	310c8 <_fwalk_reent+0x12>

000310f4 <__swhatbuf_r>:
   310f4:	b570      	push	{r4, r5, r6, lr}
   310f6:	460e      	mov	r6, r1
   310f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   310fc:	b096      	sub	sp, #88	; 0x58
   310fe:	4614      	mov	r4, r2
   31100:	2900      	cmp	r1, #0
   31102:	461d      	mov	r5, r3
   31104:	da09      	bge.n	3111a <__swhatbuf_r+0x26>
   31106:	89b3      	ldrh	r3, [r6, #12]
   31108:	2200      	movs	r2, #0
   3110a:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   3110e:	602a      	str	r2, [r5, #0]
   31110:	d116      	bne.n	31140 <__swhatbuf_r+0x4c>
   31112:	f44f 6380 	mov.w	r3, #1024	; 0x400
   31116:	6023      	str	r3, [r4, #0]
   31118:	e015      	b.n	31146 <__swhatbuf_r+0x52>
   3111a:	466a      	mov	r2, sp
   3111c:	f7f5 f91a 	bl	26354 <_fstat_r>
   31120:	2800      	cmp	r0, #0
   31122:	dbf0      	blt.n	31106 <__swhatbuf_r+0x12>
   31124:	9a01      	ldr	r2, [sp, #4]
   31126:	f44f 6000 	mov.w	r0, #2048	; 0x800
   3112a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   3112e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   31132:	425a      	negs	r2, r3
   31134:	415a      	adcs	r2, r3
   31136:	f44f 6380 	mov.w	r3, #1024	; 0x400
   3113a:	602a      	str	r2, [r5, #0]
   3113c:	6023      	str	r3, [r4, #0]
   3113e:	e002      	b.n	31146 <__swhatbuf_r+0x52>
   31140:	2340      	movs	r3, #64	; 0x40
   31142:	4610      	mov	r0, r2
   31144:	6023      	str	r3, [r4, #0]
   31146:	b016      	add	sp, #88	; 0x58
   31148:	bd70      	pop	{r4, r5, r6, pc}

0003114a <__malloc_lock>:
   3114a:	4770      	bx	lr

0003114c <__malloc_unlock>:
   3114c:	4770      	bx	lr

0003114e <_malloc_usable_size_r>:
   3114e:	f851 3c04 	ldr.w	r3, [r1, #-4]
   31152:	1f18      	subs	r0, r3, #4
   31154:	2b00      	cmp	r3, #0
   31156:	bfbc      	itt	lt
   31158:	580b      	ldrlt	r3, [r1, r0]
   3115a:	18c0      	addlt	r0, r0, r3
   3115c:	4770      	bx	lr

0003115e <__ssputs_r>:
   3115e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   31162:	688e      	ldr	r6, [r1, #8]
   31164:	4682      	mov	sl, r0
   31166:	460c      	mov	r4, r1
   31168:	4690      	mov	r8, r2
   3116a:	429e      	cmp	r6, r3
   3116c:	461f      	mov	r7, r3
   3116e:	d838      	bhi.n	311e2 <__ssputs_r+0x84>
   31170:	898a      	ldrh	r2, [r1, #12]
   31172:	f412 6f90 	tst.w	r2, #1152	; 0x480
   31176:	d032      	beq.n	311de <__ssputs_r+0x80>
   31178:	6825      	ldr	r5, [r4, #0]
   3117a:	3301      	adds	r3, #1
   3117c:	6909      	ldr	r1, [r1, #16]
   3117e:	eba5 0901 	sub.w	r9, r5, r1
   31182:	6965      	ldr	r5, [r4, #20]
   31184:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   31188:	444b      	add	r3, r9
   3118a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   3118e:	106d      	asrs	r5, r5, #1
   31190:	429d      	cmp	r5, r3
   31192:	bf38      	it	cc
   31194:	461d      	movcc	r5, r3
   31196:	0553      	lsls	r3, r2, #21
   31198:	d531      	bpl.n	311fe <__ssputs_r+0xa0>
   3119a:	4629      	mov	r1, r5
   3119c:	f7f4 fa4c 	bl	25638 <_malloc_r>
   311a0:	4606      	mov	r6, r0
   311a2:	b950      	cbnz	r0, 311ba <__ssputs_r+0x5c>
   311a4:	230c      	movs	r3, #12
   311a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   311aa:	f8ca 3000 	str.w	r3, [sl]
   311ae:	89a3      	ldrh	r3, [r4, #12]
   311b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   311b4:	81a3      	strh	r3, [r4, #12]
   311b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   311ba:	464a      	mov	r2, r9
   311bc:	6921      	ldr	r1, [r4, #16]
   311be:	f7ff fe1f 	bl	30e00 <memcpy>
   311c2:	89a3      	ldrh	r3, [r4, #12]
   311c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   311c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   311cc:	81a3      	strh	r3, [r4, #12]
   311ce:	6126      	str	r6, [r4, #16]
   311d0:	444e      	add	r6, r9
   311d2:	6165      	str	r5, [r4, #20]
   311d4:	eba5 0509 	sub.w	r5, r5, r9
   311d8:	6026      	str	r6, [r4, #0]
   311da:	463e      	mov	r6, r7
   311dc:	60a5      	str	r5, [r4, #8]
   311de:	42be      	cmp	r6, r7
   311e0:	d900      	bls.n	311e4 <__ssputs_r+0x86>
   311e2:	463e      	mov	r6, r7
   311e4:	4632      	mov	r2, r6
   311e6:	4641      	mov	r1, r8
   311e8:	6820      	ldr	r0, [r4, #0]
   311ea:	f7ff fe16 	bl	30e1a <memmove>
   311ee:	68a3      	ldr	r3, [r4, #8]
   311f0:	6822      	ldr	r2, [r4, #0]
   311f2:	2000      	movs	r0, #0
   311f4:	1b9b      	subs	r3, r3, r6
   311f6:	4432      	add	r2, r6
   311f8:	60a3      	str	r3, [r4, #8]
   311fa:	6022      	str	r2, [r4, #0]
   311fc:	e7db      	b.n	311b6 <__ssputs_r+0x58>
   311fe:	462a      	mov	r2, r5
   31200:	f7ff fe2d 	bl	30e5e <_realloc_r>
   31204:	4606      	mov	r6, r0
   31206:	2800      	cmp	r0, #0
   31208:	d1e1      	bne.n	311ce <__ssputs_r+0x70>
   3120a:	6921      	ldr	r1, [r4, #16]
   3120c:	4650      	mov	r0, sl
   3120e:	f7f4 f9c3 	bl	25598 <_free_r>
   31212:	e7c7      	b.n	311a4 <__ssputs_r+0x46>

00031214 <__sread>:
   31214:	b510      	push	{r4, lr}
   31216:	460c      	mov	r4, r1
   31218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   3121c:	f7f5 f8ce 	bl	263bc <_read_r>
   31220:	2800      	cmp	r0, #0
   31222:	bfab      	itete	ge
   31224:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   31226:	89a3      	ldrhlt	r3, [r4, #12]
   31228:	181b      	addge	r3, r3, r0
   3122a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   3122e:	bfac      	ite	ge
   31230:	6563      	strge	r3, [r4, #84]	; 0x54
   31232:	81a3      	strhlt	r3, [r4, #12]
   31234:	bd10      	pop	{r4, pc}

00031236 <__swrite>:
   31236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3123a:	461f      	mov	r7, r3
   3123c:	898b      	ldrh	r3, [r1, #12]
   3123e:	4605      	mov	r5, r0
   31240:	460c      	mov	r4, r1
   31242:	05db      	lsls	r3, r3, #23
   31244:	4616      	mov	r6, r2
   31246:	d505      	bpl.n	31254 <__swrite+0x1e>
   31248:	2302      	movs	r3, #2
   3124a:	2200      	movs	r2, #0
   3124c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   31250:	f7f5 f8a2 	bl	26398 <_lseek_r>
   31254:	89a3      	ldrh	r3, [r4, #12]
   31256:	4632      	mov	r2, r6
   31258:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   3125c:	4628      	mov	r0, r5
   3125e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   31262:	81a3      	strh	r3, [r4, #12]
   31264:	463b      	mov	r3, r7
   31266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3126a:	f7f5 b851 	b.w	26310 <_write_r>

0003126e <__sseek>:
   3126e:	b510      	push	{r4, lr}
   31270:	460c      	mov	r4, r1
   31272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   31276:	f7f5 f88f 	bl	26398 <_lseek_r>
   3127a:	1c43      	adds	r3, r0, #1
   3127c:	89a3      	ldrh	r3, [r4, #12]
   3127e:	bf15      	itete	ne
   31280:	6560      	strne	r0, [r4, #84]	; 0x54
   31282:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   31286:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   3128a:	81a3      	strheq	r3, [r4, #12]
   3128c:	bf18      	it	ne
   3128e:	81a3      	strhne	r3, [r4, #12]
   31290:	bd10      	pop	{r4, pc}

00031292 <__sclose>:
   31292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   31296:	f7f5 b84d 	b.w	26334 <_close_r>

0003129a <_Unwind_GetDataRelBase>:
   3129a:	b508      	push	{r3, lr}
   3129c:	f7ff fd8d 	bl	30dba <abort>

000312a0 <_Unwind_GetTextRelBase>:
   312a0:	b508      	push	{r3, lr}
   312a2:	f7ff fffa 	bl	3129a <_Unwind_GetDataRelBase>
